{
  "name": "HumanEval_6_parse_nested_parens",
  "language": "php",
  "prompt": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n",
  "tests": "function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = preg_replace(\"/\\\\(\\\\(.*\\\\)\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(.*\\\\)\\\\(\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \")\" in /tmp/tmpft0gvm2l.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $nesting = array();\n    $max_nesting = 0;\n    for ($i = 0; $i < count($parens); $i++) {\n        $nesting[$i] = count(explode(\"(\", $parens[$i]));\n        $max_nesting = max($max_nesting, $nesting[$i]);\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3jboto7.php:23\nStack trace:\n#0 /tmp/tmpj3jboto7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpj3jboto7.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = $paren_string.replace(/\\s/g, \"\");\n    $paren_string = $paren_string.replace(/^\\(/, \"\");\n    $paren_string = $paren_string.replace(/\\)$/, \"\");\n    $paren_string = $paren_string.replace(/\\(/, \"\");\n    $paren_string = $paren_string.replace(/\\)$/, \"\");\n    $paren_string = $paren_string.replace(/\\(/, \"\");\n    $paren_string = $paren_string.replace(/\\)$/, \"\");\n    $paren_string = $paren_string.replace(/\\(/, \"\");\n    $paren_string = $paren_string.replace(/\\)$/, \"\");\n    $paren_string = $paren_string.replace(/\\(/, \"\");\n    $paren_string = $paren_string.replace(/\\)$/, \"\");\n    $paren_string = $paren_string.replace(/\\(/, \"\");\n    $paren_string = $paren_string.replace(/\\)$/, \"\");\n    $paren_string = $paren_string.replace(/\\(/, \"\");\n    $paren_string = $paren_string.replace(/\\)$/, \"\");\n    $paren_string = $paren_string.replace(/\\(/, \"\");\n    $paren_string = $paren_string.replace(/\\)$/, \"\");\n    $paren_string = $paren_string.replace(/\\(/, \"\");\n    $paren_string = $paren_string.replace(/\\)$/, \"\");\n    $paren_string = $paren_string.replace(/\\(/, \"\");\n    $paren_string = $paren_string.replace(/\\)$/, \"\");\n    $paren_string = $paren_string.replace(/\\(/, \"\");\n    $paren_string = $paren_string.replace(/\\)$/, \"\");\n    $paren_string = $paren_string.replace(/\\(/, \"\");\n    $paren_string = $paren_string.replace(/\\)$/, \"\");\n    $paren_string = $paren_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpfqc2m3he.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmp41wnj9un.php on line 65\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string = str_replace('[', '', $paren_string);\n    $paren_string = str_replace(']', '', $paren_string);\n    $paren_string = str_replace('{', '', $paren_string);\n    $paren_string = str_replace('}', '', $paren_string);\n    $paren_string = str_replace('<', '', $paren_string);\n    $paren_string = str_replace('>', '', $paren_string);\n    $paren_string = str_replace('\"', '', $paren_string);\n    $paren_string = str_replace(\"'\", '', $paren_string);\n    $paren_string = str_replace('\\\\', '', $paren_string);\n    $paren_string = str_replace('/', '', $paren_string);\n    $paren_string = str_replace(';', '', $paren_string);\n    $paren_string = str_replace('&', '', $paren_string);\n    $paren_string = str_replace('|', '', $paren_string);\n    $paren_string = str_replace('?', '', $paren_string);\n    $paren_string = str_replace('!', '', $paren_string);\n    $paren_string = str_replace('=', '', $paren_string);\n    $paren_string = str_replace('+', '', $paren_string);\n    $paren_string = str_replace('-', '', $paren_string);\n    $paren_string = str_replace('*', '', $paren_string);\n    $paren_string = str_replace('%', '', $paren_string);\n    $paren_string = str_replace('#', '', $paren_string);\n    $paren_string = str_replace('@', '', $paren_string);\n    $paren_string = str_replace('^', '\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \")\" in /tmp/tmpjkykxknc.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_max = 0;\n    $paren_stack_count_max_max_max = 0;\n    $paren_stack_count_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpmq2k8zgj.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = preg_replace(\"/\\s+/\", \" \", $paren_string);\n    $paren_string = preg_replace(\"/^\\s+|\\s+$/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/^\\s+|\\s+$/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/^\\s+|\\s+$/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/^\\s+|\\s+$/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/^\\s+|\\s+$/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/^\\s+|\\s+$/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/^\\s+|\\s+$/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/^\\s+|\\s+$/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/^\\s+|\\s+$/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/^\\s+|\\s+$/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/^\\s+|\\s+$/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/^\\s+|\\s+$/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/^\\s+|\\s+$/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/^\\s+|\\s+$/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/^\\s+|\\s+$/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/^\\s+|\\s+$/\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \")\" in /tmp/tmpz0bya2n1.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = preg_replace(\"\\\\s+\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\(\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\)\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\[\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\]\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\{\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\}\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\|\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\^\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\$\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\%\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\&\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\*\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\+\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\?\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\:\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\;\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\=\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\<\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\>\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\@\", \"\", $paren_string);\n    $paren_string = preg_replace(\"\\\\#\", \"\", $paren_string);\n    $paren_string = pre\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp7os5dfwd.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: Unclosed '{' on line 7 in /tmp/tmpiw8rar_8.php on line 66\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack[0] = 0;\n    $paren_stack[1] = 0;\n    $paren_stack[2] = 0;\n    $paren_stack[3] = 0;\n    $paren_stack[4] = 0;\n    $paren_stack[5] = 0;\n    $paren_stack[6] = 0;\n    $paren_stack[7] = 0;\n    $paren_stack[8] = 0;\n    $paren_stack[9] = 0;\n    $paren_stack[10] = 0;\n    $paren_stack[11] = 0;\n    $paren_stack[12] = 0;\n    $paren_stack[13] = 0;\n    $paren_stack[14] = 0;\n    $paren_stack[15] = 0;\n    $paren_stack[16] = 0;\n    $paren_stack[17] = 0;\n    $paren_stack[18] = 0;\n    $paren_stack[19] = 0;\n    $paren_stack[20] = 0;\n    $paren_stack[21] = 0;\n    $paren_stack[22] = 0;\n    $paren_stack[23] = 0;\n    $paren_stack[24] = 0;\n    $paren_stack[25] = 0;\n    $paren_stack[26] = 0;\n    $paren_stack[27] = 0;\n    $paren_stack[28] = 0;\n    $paren_stack[29] = 0;\n    $paren_stack[30] = 0;\n    $paren_stack[31] = 0;\n    $paren_stack[32] = 0;\n    $paren_stack[33] = 0;\n    $paren_stack[34] = 0;\n    $paren_stack[35] = 0;\n    $paren_stack[36] = 0;\n    $paren_stack[37] = 0;\n    $paren_stack[38] = 0;\n    $paren_stack[39] = 0;\n    $paren_stack[40] = 0;\n    $paren\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpexzz05tr.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string = str_replace('[', '', $paren_string);\n    $paren_string = str_replace(']', '', $paren_string);\n    $paren_string = str_replace('{', '', $paren_string);\n    $paren_string = str_replace('}', '', $paren_string);\n    $paren_string = str_replace('<', '', $paren_string);\n    $paren_string = str_replace('>', '', $paren_string);\n    $paren_string = str_replace('\\'', '', $paren_string);\n    $paren_string = str_replace('\"', '', $paren_string);\n    $paren_string = str_replace('\\\\', '', $paren_string);\n    $paren_string = str_replace('/', '', $paren_string);\n    $paren_string = str_replace(';', '', $paren_string);\n    $paren_string = str_replace('&', '', $paren_string);\n    $paren_string = str_replace('|', '', $paren_string);\n    $paren_string = str_replace('^', '', $paren_string);\n    $paren_string = str_replace('%', '', $paren_string);\n    $paren_string = str_replace('#', '', $paren_string);\n    $paren_string = str_replace('~', '', $paren_string);\n    $paren_string = str_replace('!', '', $paren_string);\n    $paren_string = str_replace('@', '', $paren_string);\n    $paren_string = str_replace('$', '', $paren_string);\n    $paren_string = str_replace('=', '', $paren_string);\n    $paren_string = str_replace('+', '', $paren_string);\n    $paren_string = str_replace('-', '\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \")\" in /tmp/tmpxbpek3o_.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $nesting = 0;\n    $max_nesting = 0;\n    $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmp41wnj9un.php on line 65\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string = str_replace('[', '', $paren_string);\n    $paren_string = str_replace(']', '', $paren_string);\n    $paren_string = str_replace('{', '', $paren_string);\n    $paren_string = str_replace('}', '', $paren_string);\n    $paren_string = str_replace('<', '', $paren_string);\n    $paren_string = str_replace('>', '', $paren_string);\n    $paren_string = str_replace('\"', '', $paren_string);\n    $paren_string = str_replace(\"'\", '', $paren_string);\n    $paren_string = str_replace('&', '', $paren_string);\n    $paren_string = str_replace('|', '', $paren_string);\n    $paren_string = str_replace(';', '', $paren_string);\n    $paren_string = str_replace('#', '', $paren_string);\n    $paren_string = str_replace('%', '', $paren_string);\n    $paren_string = str_replace('@', '', $paren_string);\n    $paren_string = str_replace('!', '', $paren_string);\n    $paren_string = str_replace('?', '', $paren_string);\n    $paren_string = str_replace('+', '', $paren_string);\n    $paren_string = str_replace('-', '', $paren_string);\n    $paren_string = str_replace('*', '', $paren_string);\n    $paren_string = str_replace('/', '', $paren_string);\n    $paren_string = str_replace('^', '', $paren_string);\n    $paren_string = str_replace('%', '', $paren_string);\n    $paren_string = str_replace('~', '\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \")\" in /tmp/tmp7s5t2wmc.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"(\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \")\" in /tmp/tmp0ram02g5.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = preg_replace(\"/\\\\(\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\",\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp85oqjd_k.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(' ', $paren_string);\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    foreach($parens as $paren) {\n        if (count_nested_parens($paren) > $max_nesting) {\n            $max_nesting = count_nested_parens($paren);\n            $max_nesting_index = count_nested_parens($paren);\n        }\n    }\n    return $max_nesting_index;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function count_nested_parens() in /tmp/tmp6vi1zxoz.php:12\nStack trace:\n#0 /tmp/tmp6vi1zxoz.php(21): parse_nested_parens('(()()) ((())) (...')\n#1 /tmp/tmp6vi1zxoz.php(25): candidate('(()()) ((())) (...')\n#2 /tmp/tmp6vi1zxoz.php(30): test()\n#3 {main}\n  thrown in /tmp/tmp6vi1zxoz.php on line 12\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \" ( ) \", $paren_string);\n    $paren_string = str_replace(\"( )\", \"\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \")\" in /tmp/tmpfydosjnl.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_max = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_count_count = 0;\n    $paren_stack_max_count_count_count = 0;\n    $paren_stack_max_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpa4whtp0x.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpjomrollv.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = preg_replace(\"/\\s+/\", \" \", $paren_string);\n    $paren_string = $paren_string.replace(\"(\", \" ( \");\n    $paren_string = $paren_string.replace(\")\", \" ) \");\n    $paren_string = $paren_string.replace(\"{\", \" { \");\n    $paren_string = $paren_string.replace(\"}\", \" } \");\n    $paren_string = $paren_string.replace(\"[\", \" [ \");\n    $paren_string = $paren_string.replace(\"]\", \" ] \");\n    $paren_string = $paren_string.replace(\"<\", \" < \");\n    $paren_string = $paren_string.replace(\">\", \" > \");\n    $paren_string = $paren_string.replace(\"&\", \" & \");\n    $paren_string = $paren_string.replace(\"|\", \" | \");\n    $paren_string = $paren_string.replace(\"^\", \" ^ \");\n    $paren_string = $paren_string.replace(\"~\", \" ~ \");\n    $paren_string = $paren_string.replace(\"?\", \" ? \");\n    $paren_string = $paren_string.replace(\"!\", \" ! \");\n    $paren_string = $paren_string.replace(\"\\\\\", \" \\\\ \");\n    $paren_string = $paren_string.replace(\"#\", \" # \");\n    $paren_string = $paren_string.replace(\"%\", \" % \");\n    $paren_string = $paren_string.replace(\"@\", \" @ \");\n    $paren_string = $paren_string.replace(\"$\", \" $ \");\n    $paren_string = $paren_string.replace(\";\", \" ; \");\n    $paren_string = $paren_string.replace(\"'\", \" ' \");\n    $paren_string = $paren_string.replace(\"\\\"\", \" \\\" \");\n    $paren_string = $paren_string.replace(\"`\", \" ` \");\n    $paren_string = $paren_string.replace(\"?\", \" ? \");\n    $paren_string = $paren_string\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp8d3d5oba.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_max = 0;\n    $paren_stack_count_max_max_max = 0;\n    $paren_stack_count_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpmq2k8zgj.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmphq1pgoxv.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = preg_replace(\"/\\(([^\\(\\)]*)\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(([^\\(\\)]*)\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(([^\\(\\)]*)\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(([^\\(\\)]*)\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(([^\\(\\)]*)\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(([^\\(\\)]*)\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(([^\\(\\)]*)\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(([^\\(\\)]*)\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(([^\\(\\)]*)\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(([^\\(\\)]*)\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(([^\\(\\)]*)\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(([^\\(\\)]*)\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(([^\\(\\)]*)\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(([^\\(\\)]*)\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(([^\\(\\)]*)\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(([^\\(\\)]*)\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(([^\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \")\" in /tmp/tmp_9_199if.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmphq1pgoxv.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpwhspt3np.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_max = 0;\n    $paren_stack_count_max_max_max = 0;\n    $paren_stack_count_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpmq2k8zgj.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_max = 0;\n    $paren_stack_count_max_max_max = 0;\n    $paren_stack_count_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpmq2k8zgj.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_max = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_count = 0;\n    $paren_stack_count_max_count_max = 0;\n    $paren_stack_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max = 0;\n    $paren_stack_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp_2_wc3ck.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack[0] = 0;\n    $paren_stack[1] = 0;\n    $paren_stack[2] = 0;\n    $paren_stack[3] = 0;\n    $paren_stack[4] = 0;\n    $paren_stack[5] = 0;\n    $paren_stack[6] = 0;\n    $paren_stack[7] = 0;\n    $paren_stack[8] = 0;\n    $paren_stack[9] = 0;\n    $paren_stack[10] = 0;\n    $paren_stack[11] = 0;\n    $paren_stack[12] = 0;\n    $paren_stack[13] = 0;\n    $paren_stack[14] = 0;\n    $paren_stack[15] = 0;\n    $paren_stack[16] = 0;\n    $paren_stack[17] = 0;\n    $paren_stack[18] = 0;\n    $paren_stack[19] = 0;\n    $paren_stack[20] = 0;\n    $paren_stack[21] = 0;\n    $paren_stack[22] = 0;\n    $paren_stack[23] = 0;\n    $paren_stack[24] = 0;\n    $paren_stack[25] = 0;\n    $paren_stack[26] = 0;\n    $paren_stack[27] = 0;\n    $paren_stack[28] = 0;\n    $paren_stack[29] = 0;\n    $paren_stack[30] = 0;\n    $paren_stack[31] = 0;\n    $paren_stack[32] = 0;\n    $paren_stack[33] = 0;\n    $paren_stack[34] = 0;\n    $paren_stack[35] = 0;\n    $paren_stack[36] = 0;\n    $paren_stack[37] = 0;\n    $paren_stack[38] = 0;\n    $paren_stack[39] = 0;\n    $paren_stack[40] = 0;\n    $paren\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpexzz05tr.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_max = 0;\n    $paren_stack_count_max_max_max = 0;\n    $paren_stack_count_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpmq2k8zgj.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmphq1pgoxv.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = $paren_string.replace(/\\s/g, '');\n    $paren_string = $paren_string.replace(/^\\(|\\)$/g, '');\n    $paren_string = $paren_string.replace(/\\((\\(|\\))+/g, '(');\n    $paren_string = $paren_string.replace(/\\)\\((\\(|\\))+/g, ')');\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+/g, '(');\n    $paren_string = $paren_string.replace(/\\)\\((\\(|\\))+/g, ')');\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+/g, '(');\n    $paren_string = $paren_string.replace(/\\)\\((\\(|\\))+/g, ')');\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+/g, '(');\n    $paren_string = $paren_string.replace(/\\)\\((\\(|\\))+/g, ')');\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+/g, '(');\n    $paren_string = $paren_string.replace(/\\)\\((\\(|\\))+/g, ')');\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+/g, '(');\n    $paren_string = $paren_string.replace(/\\)\\((\\(|\\))+/g, ')');\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+/g, '(');\n    $paren_string = $paren_string.replace(/\\)\\((\\(|\\))+/g, ')');\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+/g, '(');\n    $paren_string = $paren_string.replace(/\\\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpkd9imvk7.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $result = array();\n    for ($i = 0; $i < $parens.length; $i++) {\n        $result[$i] = count_nested_parens($parens[$i]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpnh7guult.php:10\nStack trace:\n#0 /tmp/tmpnh7guult.php(17): parse_nested_parens('(()()) ((())) (...')\n#1 /tmp/tmpnh7guult.php(21): candidate('(()()) ((())) (...')\n#2 /tmp/tmpnh7guult.php(26): test()\n#3 {main}\n  thrown in /tmp/tmpnh7guult.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_stack_index = 0;\n    $paren_stack_count = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count =\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpgna52807.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $nesting = 0;\n    $max_nesting = 0;\n    foreach($parens as $paren) {\n        if ($paren == \"\") {\n            continue;\n        }\n        if ($paren == \"(\") {\n            $nesting++;\n        } else if ($paren == \")\") {\n            $nesting--;\n        }\n        $max_nesting = max($max_nesting, $nesting);\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1k30cjlb.php:30\nStack trace:\n#0 /tmp/tmp1k30cjlb.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1k30cjlb.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = $paren_string.replace(/^\\s+/, '');\n    $paren_string = $paren_string.replace(/\\s+$/, '');\n    $paren_string = $paren_string.replace(/\\(/g, '(');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\(/g, '(');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\(/g, '(');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\(/g, '(');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\(/g, '(');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\(/g, '(');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\(/g, '(');\n    $paren_string = $paren_string.replace(/\\)/g,\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp5rcaoj07.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = $paren_string.replace(/\\s/g, \"\");\n    $paren_string = $paren_string.replace(/^\\(|\\)$/g, \"\");\n    $paren_string = $paren_string.replace(/\\((\\(|\\))+/g, \"($1\");\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+/g, \"($1($2\");\n    $paren_string = $paren_string.replace(/\\((\\(|\\))+\\)/g, \"($1)\");\n    $paren_string = $paren_string.replace(/\\((\\(|\\))+\\)/g, \"($1)\");\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+\\)/g, \"($1)\");\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+\\)/g, \"($1)\");\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+\\)/g, \"($1)\");\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+\\)/g, \"($1)\");\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+\\)/g, \"($1)\");\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+\\)/g, \"($1)\");\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+\\)/g, \"($1)\");\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+\\)/g, \"($1)\");\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+\\)/g, \"($1)\");\n    $paren_string = $paren_string.replace(/\\(\\((\\(|\\))+\\)/g, \"($1)\");\n    $paren_string = $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp87ntos8m.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_max = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_count = 0;\n    $paren_stack_count_max_count_max = 0;\n    $paren_stack_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max = 0;\n    $paren_stack_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_count_max_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp_2_wc3ck.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string = str_replace('[', '', $paren_string);\n    $paren_string = str_replace(']', '', $paren_string);\n    $paren_string = str_replace('{', '', $paren_string);\n    $paren_string = str_replace('}', '', $paren_string);\n    $paren_string = str_replace('<', '', $paren_string);\n    $paren_string = str_replace('>', '', $paren_string);\n    $paren_string = str_replace('\"', '', $paren_string);\n    $paren_string = str_replace(\"'\", '', $paren_string);\n    $paren_string = str_replace('\\\\', '', $paren_string);\n    $paren_string = str_replace('/', '', $paren_string);\n    $paren_string = str_replace(';', '', $paren_string);\n    $paren_string = str_replace('&', '', $paren_string);\n    $paren_string = str_replace('|', '', $paren_string);\n    $paren_string = str_replace('=', '', $paren_string);\n    $paren_string = str_replace('!', '', $paren_string);\n    $paren_string = str_replace('?', '', $paren_string);\n    $paren_string = str_replace('+', '', $paren_string);\n    $paren_string = str_replace('-', '', $paren_string);\n    $paren_string = str_replace('*', '', $paren_string);\n    $paren_string = str_replace('%', '', $paren_string);\n    $paren_string = str_replace('#', '', $paren_string);\n    $paren_string = str_replace('@', '', $paren_string);\n    $paren_string = str_replace('^', '\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \")\" in /tmp/tmpym85cbng.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = trim($paren_string);\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack_max = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_count_count = 0;\n    $paren_stack_max_count_count_count = 0;\n    $paren_stack_max_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpkq2a0f46.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_max = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_count = 0;\n    $paren_stack_max_count_count_index = 0;\n    $paren_stack_max_count_count_count = 0;\n    $paren_stack_max_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_index = 0\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp6lbu5bjb.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpujln0xiv.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack[0] = 0;\n    $paren_stack[1] = 0;\n    $paren_stack[2] = 0;\n    $paren_stack[3] = 0;\n    $paren_stack[4] = 0;\n    $paren_stack[5] = 0;\n    $paren_stack[6] = 0;\n    $paren_stack[7] = 0;\n    $paren_stack[8] = 0;\n    $paren_stack[9] = 0;\n    $paren_stack[10] = 0;\n    $paren_stack[11] = 0;\n    $paren_stack[12] = 0;\n    $paren_stack[13] = 0;\n    $paren_stack[14] = 0;\n    $paren_stack[15] = 0;\n    $paren_stack[16] = 0;\n    $paren_stack[17] = 0;\n    $paren_stack[18] = 0;\n    $paren_stack[19] = 0;\n    $paren_stack[20] = 0;\n    $paren_stack[21] = 0;\n    $paren_stack[22] = 0;\n    $paren_stack[23] = 0;\n    $paren_stack[24] = 0;\n    $paren_stack[25] = 0;\n    $paren_stack[26] = 0;\n    $paren_stack[27] = 0;\n    $paren_stack[28] = 0;\n    $paren_stack[29] = 0;\n    $paren_stack[30] = 0;\n    $paren_stack[31] = 0;\n    $paren_stack[32] = 0;\n    $paren_stack[33] = 0;\n    $paren_stack[34] = 0;\n    $paren_stack[35] = 0;\n    $paren_stack[36] = 0;\n    $paren_stack[37] = 0;\n    $paren_stack[38] = 0;\n    $paren_stack[39] = 0;\n    $paren_stack[40] = 0;\n    $paren\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpexzz05tr.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $max_nesting = 0;\n    foreach($parens as $paren) {\n        $nesting = count_nested_parens($paren);\n        if($nesting > $max_nesting) {\n            $max_nesting = $nesting;\n        }\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function count_nested_parens() in /tmp/tmpwzoldxsn.php:11\nStack trace:\n#0 /tmp/tmpwzoldxsn.php(20): parse_nested_parens('(()()) ((())) (...')\n#1 /tmp/tmpwzoldxsn.php(24): candidate('(()()) ((())) (...')\n#2 /tmp/tmpwzoldxsn.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpwzoldxsn.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = $paren_string.replace(/\\s+/g, '');\n    $paren_string = $paren_string.replace(/^\\s+/, '');\n    $paren_string = $paren_string.replace(/\\s+$/, '');\n    $paren_string = $paren_string.replace(/\\(/g, '(');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\(/g, '(');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\(/g, '(');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\(/g, '(');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\(/g, '(');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\(/g, '(');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\)/g, ')');\n    $paren_string = $paren_string.replace(/\\(/g, '(');\n    $paren_string = $paren_string.replace(/\\)/g, ')\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpaxh30jhq.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    for ($i = 0; $i < count($parens); $i++) {\n        $nesting = count_nested_parens($parens[$i]);\n        if ($nesting > $max_nesting) {\n            $max_nesting = $nesting;\n            $max_nesting_index = $i;\n        }\n    }\n    return $max_nesting_index;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function count_nested_parens() in /tmp/tmpudzxwm0_.php:12\nStack trace:\n#0 /tmp/tmpudzxwm0_.php(22): parse_nested_parens('(()()) ((())) (...')\n#1 /tmp/tmpudzxwm0_.php(26): candidate('(()()) ((())) (...')\n#2 /tmp/tmpudzxwm0_.php(31): test()\n#3 {main}\n  thrown in /tmp/tmpudzxwm0_.php on line 12\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \")\" in /tmp/tmpui6cdvwd.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \")\" in /tmp/tmpui6cdvwd.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = preg_replace(\"/\\\\(\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \")\" in /tmp/tmpgf6j_9uv.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp04oprqcy.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $max_nesting = 0;\n    foreach($parens as $paren) {\n        $nesting = count_nested_parens($paren);\n        if($nesting > $max_nesting) {\n            $max_nesting = $nesting;\n        }\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function count_nested_parens() in /tmp/tmpwzoldxsn.php:11\nStack trace:\n#0 /tmp/tmpwzoldxsn.php(20): parse_nested_parens('(()()) ((())) (...')\n#1 /tmp/tmpwzoldxsn.php(24): candidate('(()()) ((())) (...')\n#2 /tmp/tmpwzoldxsn.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpwzoldxsn.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $nesting = 0;\n    $max_nesting = 0;\n    foreach ($parens as $paren) {\n        if ($paren == \"\") {\n            continue;\n        }\n        $nesting = $paren.count(\"(\");\n        $nesting -= $paren.count(\")\");\n        $max_nesting = max($max_nesting, $nesting);\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be of type Countable|array, string given in /tmp/tmp9gfhlfdf.php:15\nStack trace:\n#0 /tmp/tmp9gfhlfdf.php(23): parse_nested_parens('(()()) ((())) (...')\n#1 /tmp/tmp9gfhlfdf.php(27): candidate('(()()) ((())) (...')\n#2 /tmp/tmp9gfhlfdf.php(32): test()\n#3 {main}\n  thrown in /tmp/tmp9gfhlfdf.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack[0] = 0;\n    $paren_stack[1] = 0;\n    $paren_stack[2] = 0;\n    $paren_stack[3] = 0;\n    $paren_stack[4] = 0;\n    $paren_stack[5] = 0;\n    $paren_stack[6] = 0;\n    $paren_stack[7] = 0;\n    $paren_stack[8] = 0;\n    $paren_stack[9] = 0;\n    $paren_stack[10] = 0;\n    $paren_stack[11] = 0;\n    $paren_stack[12] = 0;\n    $paren_stack[13] = 0;\n    $paren_stack[14] = 0;\n    $paren_stack[15] = 0;\n    $paren_stack[16] = 0;\n    $paren_stack[17] = 0;\n    $paren_stack[18] = 0;\n    $paren_stack[19] = 0;\n    $paren_stack[20] = 0;\n    $paren_stack[21] = 0;\n    $paren_stack[22] = 0;\n    $paren_stack[23] = 0;\n    $paren_stack[24] = 0;\n    $paren_stack[25] = 0;\n    $paren_stack[26] = 0;\n    $paren_stack[27] = 0;\n    $paren_stack[28] = 0;\n    $paren_stack[29] = 0;\n    $paren_stack[30] = 0;\n    $paren_stack[31] = 0;\n    $paren_stack[32] = 0;\n    $paren_stack[33] = 0;\n    $paren_stack[34] = 0;\n    $paren_stack[35] = 0;\n    $paren_stack[36] = 0;\n    $paren_stack[37] = 0;\n    $paren_stack[38] = 0;\n    $paren_stack[39] = 0;\n    $paren_stack[40] = 0;\n    $paren\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpexzz05tr.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = $paren_string.trim();\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_max = 0;\n    $paren_stack_count_max_max_max = 0;\n    $paren_stack_count_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpbpn1ubaa.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $max_nesting = 0;\n    $nesting = 0;\n    foreach($parens as $paren) {\n        if ($paren == \"\") {\n            continue;\n        }\n        $nesting = count_nested_parens($paren);\n        if ($nesting > $max_nesting) {\n            $max_nesting = $nesting;\n        }\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function count_nested_parens() in /tmp/tmp5dhnvyf9.php:15\nStack trace:\n#0 /tmp/tmp5dhnvyf9.php(24): parse_nested_parens('(()()) ((())) (...')\n#1 /tmp/tmp5dhnvyf9.php(28): candidate('(()()) ((())) (...')\n#2 /tmp/tmp5dhnvyf9.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp5dhnvyf9.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_count = count_parens($paren_string);\n    $paren_stack = explode(' ', $paren_string);\n    $result = array();\n    for ($i = 0; $i < $paren_count; $i++) {\n        $result[$i] = count_nested_parens($paren_stack[$i]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function count_parens() in /tmp/tmp5s_p6ugc.php:10\nStack trace:\n#0 /tmp/tmp5s_p6ugc.php(20): parse_nested_parens('(()()) ((())) (...')\n#1 /tmp/tmp5s_p6ugc.php(24): candidate('(()()) ((())) (...')\n#2 /tmp/tmp5s_p6ugc.php(29): test()\n#3 {main}\n  thrown in /tmp/tmp5s_p6ugc.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_max = 0;\n    $paren_stack_count_max_max_max = 0;\n    $paren_stack_count_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpmq2k8zgj.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = $paren_string.replace(/\\s/g, '');\n    $paren_string = $paren_string.replace(/^\\(/, '');\n    $paren_string = $paren_string.replace(/\\)$/, '');\n    $paren_string = $paren_string.replace(/\\(/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $paren_string.replace(/\\)/g, '');\n    $paren_string = $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmp2dcthr5f.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_max = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_count_count = 0;\n    $paren_stack_max_count_count_count = 0;\n    $paren_stack_max_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpa4whtp0x.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_count = 0;\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: Unclosed '{' on line 7 in /tmp/tmps2abdch_.php on line 65\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = $paren_string.replace(/\\s/g, \"\");\n    $paren_string = $paren_string.replace(/\\(/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string = $paren_string.replace(/\\)/g, \"\");\n    $paren_string =\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmpxnmz1ske.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $max_nesting = 0;\n    foreach ($parens as $paren) {\n        $nesting = count_nested_parens($paren);\n        if ($nesting > $max_nesting) {\n            $max_nesting = $nesting;\n        }\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function count_nested_parens() in /tmp/tmppbha305f.php:11\nStack trace:\n#0 /tmp/tmppbha305f.php(20): parse_nested_parens('(()()) ((())) (...')\n#1 /tmp/tmppbha305f.php(24): candidate('(()()) ((())) (...')\n#2 /tmp/tmppbha305f.php(29): test()\n#3 {main}\n  thrown in /tmp/tmppbha305f.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $max_nesting = 0;\n    $nesting = 0;\n    foreach($parens as $paren) {\n        if ($paren == \"\") {\n            continue;\n        }\n        $nesting = count_nested_parens($paren);\n        if ($nesting > $max_nesting) {\n            $max_nesting = $nesting;\n        }\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function count_nested_parens() in /tmp/tmp5dhnvyf9.php:15\nStack trace:\n#0 /tmp/tmp5dhnvyf9.php(24): parse_nested_parens('(()()) ((())) (...')\n#1 /tmp/tmp5dhnvyf9.php(28): candidate('(()()) ((())) (...')\n#2 /tmp/tmp5dhnvyf9.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp5dhnvyf9.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack_count = 0;\n    $paren_stack_max = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_max = 0;\n    $paren_stack_count_max_max_max = 0;\n    $paren_stack_count_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmph085jzuj.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_max = 0;\n    $paren_stack_count_max_max_max = 0;\n    $paren_stack_count_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpmq2k8zgj.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp04oprqcy.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $max_nesting_count_index = 0;\n    $max_nesting_count_count = 0;\n    $max_nesting_count_count_index = 0;\n    $max_nesting_count_count_count = 0;\n    $max_nesting_count_count_count_index = 0;\n    $max_nesting_count_count_count_count = 0;\n    $max_nesting_count_count_count_count_index = 0;\n    $max_nesting_count_count_count_count_count = 0;\n    $max_nesting_count_count_count_count_count_index = 0;\n    $max_nesting_count_count_count_count_count_count = 0;\n    $max_nesting_count_count_count_count_count_count_index = 0;\n    $max_nesting_count_count_count_count_count_count_count = 0;\n    $max_nesting_count_count_count_count_count_count_count_index = 0;\n    $max_nesting_count_count_count_count_count_count_count_count = 0;\n    $max_nesting_count_count_count_count_count_count_count_count_index = 0;\n    $max_nesting_count_count_count_count_count_count_count_count_count = 0;\n    $max_nesting_count_count_count_count_count_count_count_count_count_index = 0;\n    $max_nesting_count_count_count_count_count_count_count_count_count_count = 0;\n    $max_nesting_count_count_count_count_count_count_count_count_count_count_index = 0;\n    $max_nesting_count_count_count_count_count_count_count\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpyuztyxzf.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack[1] = 0;\n    $paren_stack[2] = 0;\n    $paren_stack[3] = 0;\n    $paren_stack[4] = 0;\n    $paren_stack[5] = 0;\n    $paren_stack[6] = 0;\n    $paren_stack[7] = 0;\n    $paren_stack[8] = 0;\n    $paren_stack[9] = 0;\n    $paren_stack[10] = 0;\n    $paren_stack[11] = 0;\n    $paren_stack[12] = 0;\n    $paren_stack[13] = 0;\n    $paren_stack[14] = 0;\n    $paren_stack[15] = 0;\n    $paren_stack[16] = 0;\n    $paren_stack[17] = 0;\n    $paren_stack[18] = 0;\n    $paren_stack[19] = 0;\n    $paren_stack[20] = 0;\n    $paren_stack[21] = 0;\n    $paren_stack[22] = 0;\n    $paren_stack[23] = 0;\n    $paren_stack[24] = 0;\n    $paren_stack[25] = 0;\n    $paren_stack[26] = 0;\n    $paren_stack[27] = 0;\n    $paren_stack[28] = 0;\n    $paren_stack[29] = 0;\n    $paren_stack[30] = 0;\n    $paren_stack[31] = 0;\n    $paren_stack[32] = 0;\n    $paren_stack[33] = 0;\n    $paren_stack[34] = 0;\n    $paren_stack[35] = 0;\n    $paren_stack[36] = 0;\n    $paren_stack[37] = 0;\n    $paren_stack[38] = 0;\n    $paren_stack[39] = 0;\n    $paren_stack[40] = 0;\n    $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpw4cg6no0.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_max = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_count_count = 0;\n    $paren_stack_max_count_count_count = 0;\n    $paren_stack_max_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpa4whtp0x.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $nesting = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    for ($i = 0; $i < count($parens); $i++) {\n        $nesting = count(explode(\"(\", $parens[$i]));\n        if ($nesting > $max_nesting) {\n            $max_nesting = $nesting;\n            $max_nesting_index = $i;\n        }\n    }\n    return $max_nesting_index;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr15reha3.php:27\nStack trace:\n#0 /tmp/tmpr15reha3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpr15reha3.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = trim($paren_string);\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $paren_stack_index = 0;\n    $paren_stack_count = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_count = count($paren_stack);\n    $paren_stack_max_count = count($paren_stack_max);\n    $paren_stack_max_index = count($paren_stack_max);\n    $paren_stack_max_count = count($paren_stack_max);\n    $paren_stack_max_index = count($paren_stack_max);\n    $paren_stack_max_count = count($paren_stack_max);\n    $paren_stack_max_index = count($paren_stack_max);\n    $paren_stack_max_count = count($paren_stack_max);\n    $paren_stack_max_index = count($paren_stack_max);\n    $paren_stack_max_count = count($paren_stack_max);\n    $paren_stack_max_index = count($paren_stack_max);\n    $paren_stack_max_count = count($paren_stack_max);\n    $paren_stack_max_index = count($paren_stack_max);\n    $paren_stack_max_count = count($paren_stack_max);\n    $paren_stack_max_index = count($paren_stack_max);\n    $paren_stack_max_count = count($paren_stack_max);\n    $paren_stack_max_index = count($paren_stack_max);\n    $paren_stack_max_count = count($paren_stack_max);\n    $paren_stack_max_index = count($paren_stack_max);\n    $paren_stack_max_count = count($paren_stack_max);\n    $paren_stack_max_index = count($paren_stack_max);\n    $paren_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp_gv22nya.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = preg_replace(\"/\\(([^\\(\\)]+)\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\(/\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \")\" in /tmp/tmp35zug16f.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_max = 0;\n    $paren_stack_count = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_count_max = 0;\n    $paren_stack_max_count_max_count = 0;\n    $paren_stack_max_count_max_count_max = 0;\n    $paren_stack_max_count_max_count_max_count = 0;\n    $paren_stack_max_count_max_count_max_count_max = 0;\n    $paren_stack_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_max_count_max_count_max_count_max_count_max = 0;\n    $paren_stack_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_max_count_max_count_max_count_max_count_max_count_max = 0;\n    $paren_stack_max_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_max_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_max_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_max_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_max_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_max_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_max_count_max_count_max_count_max_count_max_count_max_count = 0;\n    $paren_stack_max_count\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpax4j8fjx.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpapr6ylw0.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_max = 0;\n    $paren_stack_count_max_max_max = 0;\n    $paren_stack_count_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpmq2k8zgj.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack[0] = 0;\n    $result = [];\n    $paren_stack_index = 0;\n    $paren_stack_count = 0;\n    $paren_stack_max = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_count = 0;\n    $paren_stack_max_count_count_index = 0;\n    $paren_stack_max_count_count_count = 0;\n    $paren_stack_max_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp_5f1hgw3.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack_count = 0;\n    $paren_stack_max = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_count_count = 0;\n    $paren_stack_max_count_count_count = 0;\n    $paren_stack_max_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmptzq7ebyy.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $nesting = array();\n    $max_nesting = 0;\n    for ($i = 0; $i < count($parens); $i++) {\n        $nesting[$i] = count(explode(\"(\", $parens[$i]));\n        $max_nesting = max($max_nesting, $nesting[$i]);\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3jboto7.php:23\nStack trace:\n#0 /tmp/tmpj3jboto7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpj3jboto7.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $nesting = array();\n    for ($i = 0; $i < count($parens); $i++) {\n        $nesting[$i] = count(explode(\"(\", $parens[$i]));\n    }\n    return $nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeqx07_g3.php:21\nStack trace:\n#0 /tmp/tmpeqx07_g3.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpeqx07_g3.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string = str_replace('[', '', $paren_string);\n    $paren_string = str_replace(']', '', $paren_string);\n    $paren_string = str_replace('{', '', $paren_string);\n    $paren_string = str_replace('}', '', $paren_string);\n    $paren_string = str_replace('<', '', $paren_string);\n    $paren_string = str_replace('>', '', $paren_string);\n    $paren_string = str_replace('\"', '', $paren_string);\n    $paren_string = str_replace(\"'\", '', $paren_string);\n    $paren_string = str_replace('&', '', $paren_string);\n    $paren_string = str_replace('|', '', $paren_string);\n    $paren_string = str_replace(';', '', $paren_string);\n    $paren_string = str_replace('!', '', $paren_string);\n    $paren_string = str_replace('?', '', $paren_string);\n    $paren_string = str_replace('#', '', $paren_string);\n    $paren_string = str_replace('%', '', $paren_string);\n    $paren_string = str_replace('@', '', $paren_string);\n    $paren_string = str_replace('^', '', $paren_string);\n    $paren_string = str_replace('~', '', $paren_string);\n    $paren_string = str_replace('`', '', $paren_string);\n    $paren_string = str_replace('\\\\', '', $paren_string);\n    $paren_string = str_replace('/', '', $paren_string);\n    $paren_string = str_replace('-', '', $paren_string);\n    $paren_string = str_replace('_', '\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \")\" in /tmp/tmpg02ltyo2.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_max = 0;\n    $paren_stack_count_max_max_max = 0;\n    $paren_stack_count_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpmq2k8zgj.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $max_nesting_index_count = 0;\n    $max_nesting_count_index = 0;\n    $paren_stack_index = 0;\n    $paren_stack_count = 0;\n    $paren_stack_index_count = 0;\n    $paren_stack_count_index = 0;\n    $paren_stack_index_count_index = 0;\n    $paren_stack_index_count_index_count = 0;\n    $paren_stack_index_count_index_count_index = 0;\n    $paren_stack_index_count_index_count_index_count = 0;\n    $paren_stack_index_count_index_count_index_count_index = 0;\n    $paren_stack_index_count_index_count_index_count_index_count = 0;\n    $paren_stack_index_count_index_count_index_count_index_count_index = 0;\n    $paren_stack_index_count_index_count_index_count_index_count_index_count = 0;\n    $paren_stack_index_count_index_count_index_count_index_count_index_count_index = 0;\n    $paren_stack_index_count_index_count_index_count_index_count_index_count_index_count = 0;\n    $paren_stack_index_count_index_count_index_count_index_count_index_count_index_count_index = 0;\n    $paren_stack_index_count_index_count_index_count_index_count_index_count_index_count_index_count = 0;\n    $paren_stack_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index = 0;\n    $paren_stack_index_count_index_count_index_count_index_count\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp48a73c55.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_max = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_count = 0;\n    $paren_stack_max_count_count_index = 0;\n    $paren_stack_max_count_count_count = 0;\n    $paren_stack_max_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_index = 0\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp6lbu5bjb.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_max = 0;\n    $paren_stack_count = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_count_count = 0;\n    $paren_stack_max_count_count_count = 0;\n    $paren_stack_max_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp3v8j__vv.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp04oprqcy.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string = str_replace('[', '', $paren_string);\n    $paren_string = str_replace(']', '', $paren_string);\n    $paren_string = str_replace('{', '', $paren_string);\n    $paren_string = str_replace('}', '', $paren_string);\n    $paren_string = str_replace('<', '', $paren_string);\n    $paren_string = str_replace('>', '', $paren_string);\n    $paren_string = str_replace('\"', '', $paren_string);\n    $paren_string = str_replace('\\'', '', $paren_string);\n    $paren_string = str_replace('\\\\', '', $paren_string);\n    $paren_string = str_replace('/', '', $paren_string);\n    $paren_string = str_replace('|', '', $paren_string);\n    $paren_string = str_replace(';', '', $paren_string);\n    $paren_string = str_replace('&', '', $paren_string);\n    $paren_string = str_replace('#', '', $paren_string);\n    $paren_string = str_replace('%', '', $paren_string);\n    $paren_string = str_replace('@', '', $paren_string);\n    $paren_string = str_replace('!', '', $paren_string);\n    $paren_string = str_replace('^', '', $paren_string);\n    $paren_string = str_replace('~', '', $paren_string);\n    $paren_string = str_replace('*', '', $paren_string);\n    $paren_string = str_replace('+', '', $paren_string);\n    $paren_string = str_replace('-', '', $paren_string);\n    $paren_string = str_replace('=', '\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \")\" in /tmp/tmpaagfi9vo.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack[0] = 0;\n    $paren_stack[1] = 0;\n    $paren_stack[2] = 0;\n    $paren_stack[3] = 0;\n    $paren_stack[4] = 0;\n    $paren_stack[5] = 0;\n    $paren_stack[6] = 0;\n    $paren_stack[7] = 0;\n    $paren_stack[8] = 0;\n    $paren_stack[9] = 0;\n    $paren_stack[10] = 0;\n    $paren_stack[11] = 0;\n    $paren_stack[12] = 0;\n    $paren_stack[13] = 0;\n    $paren_stack[14] = 0;\n    $paren_stack[15] = 0;\n    $paren_stack[16] = 0;\n    $paren_stack[17] = 0;\n    $paren_stack[18] = 0;\n    $paren_stack[19] = 0;\n    $paren_stack[20] = 0;\n    $paren_stack[21] = 0;\n    $paren_stack[22] = 0;\n    $paren_stack[23] = 0;\n    $paren_stack[24] = 0;\n    $paren_stack[25] = 0;\n    $paren_stack[26] = 0;\n    $paren_stack[27] = 0;\n    $paren_stack[28] = 0;\n    $paren_stack[29] = 0;\n    $paren_stack[30] = 0;\n    $paren_stack[31] = 0;\n    $paren_stack[32] = 0;\n    $paren_stack[33] = 0;\n    $paren_stack[34] = 0;\n    $paren_stack[35] = 0;\n    $paren_stack[36] = 0;\n    $paren_stack[37] = 0;\n    $paren_stack[38] = 0;\n    $paren_stack[39] = 0;\n    $paren_stack[40] = 0;\n    $paren\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpexzz05tr.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = preg_replace(\"/\\\\(\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\)/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_replace(\"/\\\\(/\", \"\", $paren_string);\n    $paren_string = preg_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp4caimko6.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack[1] = 0;\n    $paren_stack[2] = 0;\n    $paren_stack[3] = 0;\n    $paren_stack[4] = 0;\n    $paren_stack[5] = 0;\n    $paren_stack[6] = 0;\n    $paren_stack[7] = 0;\n    $paren_stack[8] = 0;\n    $paren_stack[9] = 0;\n    $paren_stack[10] = 0;\n    $paren_stack[11] = 0;\n    $paren_stack[12] = 0;\n    $paren_stack[13] = 0;\n    $paren_stack[14] = 0;\n    $paren_stack[15] = 0;\n    $paren_stack[16] = 0;\n    $paren_stack[17] = 0;\n    $paren_stack[18] = 0;\n    $paren_stack[19] = 0;\n    $paren_stack[20] = 0;\n    $paren_stack[21] = 0;\n    $paren_stack[22] = 0;\n    $paren_stack[23] = 0;\n    $paren_stack[24] = 0;\n    $paren_stack[25] = 0;\n    $paren_stack[26] = 0;\n    $paren_stack[27] = 0;\n    $paren_stack[28] = 0;\n    $paren_stack[29] = 0;\n    $paren_stack[30] = 0;\n    $paren_stack[31] = 0;\n    $paren_stack[32] = 0;\n    $paren_stack[33] = 0;\n    $paren_stack[34] = 0;\n    $paren_stack[35] = 0;\n    $paren_stack[36] = 0;\n    $paren_stack[37] = 0;\n    $paren_stack[38] = 0;\n    $paren_stack[39] = 0;\n    $paren_stack[40] = 0;\n    $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpw4cg6no0.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(' ', $paren_string);\n    $nesting = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    foreach ($parens as $paren) {\n        if ($paren == '(') {\n            $nesting++;\n        } else if ($paren == ')') {\n            $nesting--;\n        }\n        if ($nesting > $max_nesting) {\n            $max_nesting = $nesting;\n            $max_nesting_index = count($parens);\n        }\n    }\n    return $max_nesting_index;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsmcgf2mr.php:31\nStack trace:\n#0 /tmp/tmpsmcgf2mr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpsmcgf2mr.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack[1] = 0;\n    $paren_stack[2] = 0;\n    $paren_stack[3] = 0;\n    $paren_stack[4] = 0;\n    $paren_stack[5] = 0;\n    $paren_stack[6] = 0;\n    $paren_stack[7] = 0;\n    $paren_stack[8] = 0;\n    $paren_stack[9] = 0;\n    $paren_stack[10] = 0;\n    $paren_stack[11] = 0;\n    $paren_stack[12] = 0;\n    $paren_stack[13] = 0;\n    $paren_stack[14] = 0;\n    $paren_stack[15] = 0;\n    $paren_stack[16] = 0;\n    $paren_stack[17] = 0;\n    $paren_stack[18] = 0;\n    $paren_stack[19] = 0;\n    $paren_stack[20] = 0;\n    $paren_stack[21] = 0;\n    $paren_stack[22] = 0;\n    $paren_stack[23] = 0;\n    $paren_stack[24] = 0;\n    $paren_stack[25] = 0;\n    $paren_stack[26] = 0;\n    $paren_stack[27] = 0;\n    $paren_stack[28] = 0;\n    $paren_stack[29] = 0;\n    $paren_stack[30] = 0;\n    $paren_stack[31] = 0;\n    $paren_stack[32] = 0;\n    $paren_stack[33] = 0;\n    $paren_stack[34] = 0;\n    $paren_stack[35] = 0;\n    $paren_stack[36] = 0;\n    $paren_stack[37] = 0;\n    $paren_stack[38] = 0;\n    $paren_stack[39] = 0;\n    $paren_stack[40] = 0;\n    $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpw4cg6no0.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack_count = 0;\n    $paren_stack_max = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_count_count = 0;\n    $paren_stack_max_count_count_count = 0;\n    $paren_stack_max_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmptzq7ebyy.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_max = 0;\n    $paren_stack_count = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_count_max = 0;\n    $paren_stack_max_count_max_max = 0;\n    $paren_stack_max_count_max_max_max = 0;\n    $paren_stack_max_count_max_max_max_max = 0;\n    $paren_stack_max_count_max_max_max_max_max = 0;\n    $paren_stack_max_count_max_max_max_max_max_max = 0;\n    $paren_stack_max_count_max_max_max_max_max_max_max = 0;\n    $paren_stack_max_count_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_max_count_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_max_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_max_count_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_max_count_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_max_count_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_max_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_max_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_max_count_max_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpha1c9bnt.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $nesting = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_index_string = \"\";\n    for ($i = 0; $i < count($parens); $i++) {\n        if ($parens[$i] == \"\") {\n            continue;\n        }\n        $nesting = count_nested_parens($parens[$i]);\n        if ($nesting > $max_nesting) {\n            $max_nesting = $nesting;\n            $max_nesting_index = $i;\n            $max_nesting_index_string = $parens[$i];\n        }\n    }\n    return array($max_nesting, $max_nesting_index, $max_nesting_index_string);\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function count_nested_parens() in /tmp/tmpisu9b89h.php:17\nStack trace:\n#0 /tmp/tmpisu9b89h.php(28): parse_nested_parens('(()()) ((())) (...')\n#1 /tmp/tmpisu9b89h.php(32): candidate('(()()) ((())) (...')\n#2 /tmp/tmpisu9b89h.php(37): test()\n#3 {main}\n  thrown in /tmp/tmpisu9b89h.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $max_nesting = 0;\n    $nesting = 0;\n    foreach($parens as $paren) {\n        if ($paren == \"\") continue;\n        if ($paren == \" \") continue;\n        if ($paren == \"(\") {\n            $nesting++;\n            if ($nesting > $max_nesting) $max_nesting = $nesting;\n        } else if ($paren == \")\") {\n            $nesting--;\n        }\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8nzk_6a.php:29\nStack trace:\n#0 /tmp/tmpx8nzk_6a.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpx8nzk_6a.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = preg_replace(\"/\\s+/\", \" \", $paren_string);\n    $paren_string = $paren_string.replace(\"(\", \" ( \");\n    $paren_string = $paren_string.replace(\")\", \" ) \");\n    $paren_string = $paren_string.replace(\"{\", \" { \");\n    $paren_string = $paren_string.replace(\"}\", \" } \");\n    $paren_string = $paren_string.replace(\"[\", \" [ \");\n    $paren_string = $paren_string.replace(\"]\", \" ] \");\n    $paren_string = $paren_string.replace(\"<\", \" < \");\n    $paren_string = $paren_string.replace(\">\", \" > \");\n    $paren_string = $paren_string.replace(\"&\", \" & \");\n    $paren_string = $paren_string.replace(\"|\", \" | \");\n    $paren_string = $paren_string.replace(\"^\", \" ^ \");\n    $paren_string = $paren_string.replace(\"~\", \" ~ \");\n    $paren_string = $paren_string.replace(\"?\", \" ? \");\n    $paren_string = $paren_string.replace(\"!\", \" ! \");\n    $paren_string = $paren_string.replace(\"#\", \" # \");\n    $paren_string = $paren_string.replace(\"%\", \" % \");\n    $paren_string = $paren_string.replace(\"@\", \" @ \");\n    $paren_string = $paren_string.replace(\"$\", \" $ \");\n    $paren_string = $paren_string.replace(\";\", \" ; \");\n    $paren_string = $paren_string.replace(\"'\", \" ' \");\n    $paren_string = $paren_string.replace(\"\\\"\", \" \\\" \");\n    $paren_string = $paren_string.replace(\"\\\\\", \" \\\\ \");\n    $paren_string = $paren_string.replace(\"+\", \" + \");\n    $paren_string = $paren_string.replace(\"-\", \" - \");\n    $paren_string = $paren_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpnnhseqsp.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack[1] = 0;\n    $paren_stack[2] = 0;\n    $paren_stack[3] = 0;\n    $paren_stack[4] = 0;\n    $paren_stack[5] = 0;\n    $paren_stack[6] = 0;\n    $paren_stack[7] = 0;\n    $paren_stack[8] = 0;\n    $paren_stack[9] = 0;\n    $paren_stack[10] = 0;\n    $paren_stack[11] = 0;\n    $paren_stack[12] = 0;\n    $paren_stack[13] = 0;\n    $paren_stack[14] = 0;\n    $paren_stack[15] = 0;\n    $paren_stack[16] = 0;\n    $paren_stack[17] = 0;\n    $paren_stack[18] = 0;\n    $paren_stack[19] = 0;\n    $paren_stack[20] = 0;\n    $paren_stack[21] = 0;\n    $paren_stack[22] = 0;\n    $paren_stack[23] = 0;\n    $paren_stack[24] = 0;\n    $paren_stack[25] = 0;\n    $paren_stack[26] = 0;\n    $paren_stack[27] = 0;\n    $paren_stack[28] = 0;\n    $paren_stack[29] = 0;\n    $paren_stack[30] = 0;\n    $paren_stack[31] = 0;\n    $paren_stack[32] = 0;\n    $paren_stack[33] = 0;\n    $paren_stack[34] = 0;\n    $paren_stack[35] = 0;\n    $paren_stack[36] = 0;\n    $paren_stack[37] = 0;\n    $paren_stack[38] = 0;\n    $paren_stack[39] = 0;\n    $paren_stack[40] = 0;\n    $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpw4cg6no0.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_max = 0;\n    $paren_stack_count_max_max_max = 0;\n    $paren_stack_count_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpmq2k8zgj.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\" \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \")\" in /tmp/tmpui6cdvwd.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $result = array();\n    for ($i = 0; $i < count($parens); $i++) {\n        $result[$i] = count(explode(\"(\", $parens[$i]));\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzplubdzv.php:21\nStack trace:\n#0 /tmp/tmpzplubdzv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzplubdzv.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack[1] = 0;\n    $paren_stack[2] = 0;\n    $paren_stack[3] = 0;\n    $paren_stack[4] = 0;\n    $paren_stack[5] = 0;\n    $paren_stack[6] = 0;\n    $paren_stack[7] = 0;\n    $paren_stack[8] = 0;\n    $paren_stack[9] = 0;\n    $paren_stack[10] = 0;\n    $paren_stack[11] = 0;\n    $paren_stack[12] = 0;\n    $paren_stack[13] = 0;\n    $paren_stack[14] = 0;\n    $paren_stack[15] = 0;\n    $paren_stack[16] = 0;\n    $paren_stack[17] = 0;\n    $paren_stack[18] = 0;\n    $paren_stack[19] = 0;\n    $paren_stack[20] = 0;\n    $paren_stack[21] = 0;\n    $paren_stack[22] = 0;\n    $paren_stack[23] = 0;\n    $paren_stack[24] = 0;\n    $paren_stack[25] = 0;\n    $paren_stack[26] = 0;\n    $paren_stack[27] = 0;\n    $paren_stack[28] = 0;\n    $paren_stack[29] = 0;\n    $paren_stack[30] = 0;\n    $paren_stack[31] = 0;\n    $paren_stack[32] = 0;\n    $paren_stack[33] = 0;\n    $paren_stack[34] = 0;\n    $paren_stack[35] = 0;\n    $paren_stack[36] = 0;\n    $paren_stack[37] = 0;\n    $paren_stack[38] = 0;\n    $paren_stack[39] = 0;\n    $paren_stack[40] = 0;\n    $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpw4cg6no0.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = $paren_string.replace(/^\\s+/, '');\n    $paren_string = $paren_string.replace(/\\s+$/, '');\n    $paren_string = $paren_string.replace(/\\((\\(+)/, '$1');\n    $paren_string = $paren_string.replace(/\\(+\\)/, '');\n    $paren_string = $paren_string.replace(/\\(+$/, '');\n    $paren_string = $paren_string.replace(/\\s+\\(+/, '(');\n    $paren_string = $paren_string.replace(/\\s+\\)+/, ')');\n    $paren_string = $paren_string.replace(/\\s+\\)/+/, ')');\n    $paren_string = $paren_string.replace(/\\s+\\)/+/, ')');\n    $paren_string = $paren_string.replace(/\\s+\\)/+/, ')');\n    $paren_string = $paren_string.replace(/\\s+\\)/+/, ')');\n    $paren_string = $paren_string.replace(/\\s+\\)/+/, ')');\n    $paren_string = $paren_string.replace(/\\s+\\)/+/, ')');\n    $paren_string = $paren_string.replace(/\\s+\\)/+/, ')');\n    $paren_string = $paren_string.replace(/\\s+\\)/+/, ')');\n    $paren_string = $paren_string.replace(/\\s+\\)/+/, ')');\n    $paren_string = $paren_string.replace(/\\s+\\)/+/, ')');\n    $paren_string = $paren_string.replace(/\\s+\\)/+/, ')');\n    $paren_string = $paren_string.replace(/\\s+\\)/+/, ')');\n    $paren_string = $paren_string.replace(/\\s+\\)/+/, ')\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"/\" in /tmp/tmph5fsxwzp.php on line 9\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(' ', $paren_string);\n    $max_nesting = 0;\n    $nesting = 0;\n    $result = array();\n    foreach($parens as $paren) {\n        if ($paren == '(') {\n            $nesting++;\n        } else if ($paren == ')') {\n            $nesting--;\n        }\n        $max_nesting = max($max_nesting, $nesting);\n        $result[$nesting] = $max_nesting;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9i04hiux.php:29\nStack trace:\n#0 /tmp/tmp9i04hiux.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp9i04hiux.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $nesting = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_index_string = \"\";\n    for ($i = 0; $i < count($parens); $i++) {\n        if ($parens[$i] == \"\") {\n            continue;\n        }\n        if ($parens[$i] == \"(\" || $parens[$i] == \"{\" || $parens[$i] == \"[\") {\n            $nesting++;\n        }\n        if ($parens[$i] == \")\" || $parens[$i] == \"}\" || $parens[$i] == \"]\") {\n            $nesting--;\n        }\n        if ($nesting > $max_nesting) {\n            $max_nesting = $nesting;\n            $max_nesting_index = $i;\n            $max_nesting_index_string = $parens[$i];\n        }\n    }\n    return array($max_nesting, $max_nesting_index, $max_nesting_index_string);\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp29wxk0lf.php:37\nStack trace:\n#0 /tmp/tmp29wxk0lf.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp29wxk0lf.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = preg_replace(\"/\\s+/\", \" \", $paren_string);\n    $paren_string = $paren_string.replace(\"(\", \" ( \");\n    $paren_string = $paren_string.replace(\")\", \" ) \");\n    $paren_string = $paren_string.replace(\"{\", \" { \");\n    $paren_string = $paren_string.replace(\"}\", \" } \");\n    $paren_string = $paren_string.replace(\"[\", \" [ \");\n    $paren_string = $paren_string.replace(\"]\", \" ] \");\n    $paren_string = $paren_string.replace(\"<\", \" < \");\n    $paren_string = $paren_string.replace(\">\", \" > \");\n    $paren_string = $paren_string.replace(\"&\", \" & \");\n    $paren_string = $paren_string.replace(\"|\", \" | \");\n    $paren_string = $paren_string.replace(\"^\", \" ^ \");\n    $paren_string = $paren_string.replace(\"~\", \" ~ \");\n    $paren_string = $paren_string.replace(\"?\", \" ? \");\n    $paren_string = $paren_string.replace(\"\\\\\", \" \\\\ \");\n    $paren_string = $paren_string.replace(\"+\", \" + \");\n    $paren_string = $paren_string.replace(\"-\", \" - \");\n    $paren_string = $paren_string.replace(\"*\", \" * \");\n    $paren_string = $paren_string.replace(\"/\", \" / \");\n    $paren_string = $paren_string.replace(\"%\", \" % \");\n    $paren_string = $paren_string.replace(\";\", \" ; \");\n    $paren_string = $paren_string.replace(\"!\", \" ! \");\n    $paren_string = $paren_string.replace(\"@\", \" @ \");\n    $paren_string = $paren_string.replace(\"#\", \" # \");\n    $paren_string = $paren_string.replace(\"$\", \" $ \");\n    $paren_string = $paren_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpjjgmemh8.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $max_nesting_count_index = 0;\n    $max_nesting_count_count = 0;\n    $max_nesting_count_count_index = 0;\n    $max_nesting_count_count_count = 0;\n    $max_nesting_count_count_count_index = 0;\n    $max_nesting_count_count_count_count = 0;\n    $max_nesting_count_count_count_count_index = 0;\n    $max_nesting_count_count_count_count_count = 0;\n    $max_nesting_count_count_count_count_count_index = 0;\n    $max_nesting_count_count_count_count_count_count = 0;\n    $max_nesting_count_count_count_count_count_count_index = 0;\n    $max_nesting_count_count_count_count_count_count_count = 0;\n    $max_nesting_count_count_count_count_count_count_count_index = 0;\n    $max_nesting_count_count_count_count_count_count_count_count = 0;\n    $max_nesting_count_count_count_count_count_count_count_count_index = 0;\n    $max_nesting_count_count_count_count_count_count_count_count_count = 0;\n    $max_nesting_count_count_count_count_count_count_count_count_count_index = 0;\n    $max_nesting_count_count_count_count_count_count_count_count_count_count = 0;\n    $max_nesting_count_count_count_count_count_count_count_count_count_count_index = 0;\n    $max_nesting_count_count_count_count_count_count_count_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpugk9md8f.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_max = 0;\n    $paren_stack_count_max_max_max = 0;\n    $paren_stack_count_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpmq2k8zgj.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_max = 0;\n    $paren_stack_count_max_max_max = 0;\n    $paren_stack_count_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    $paren_stack_count_max_max_max_max_max_max_max_max\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpmq2k8zgj.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $nesting = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    for ($i = 0; $i < count($parens); $i++) {\n        $nesting += count(\"(\");\n        $nesting -= count(\")\");\n        if ($nesting > $max_nesting) {\n            $max_nesting = $nesting;\n            $max_nesting_index = $i;\n        }\n    }\n    return $max_nesting_index;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be of type Countable|array, string given in /tmp/tmpbsy49t7p.php:13\nStack trace:\n#0 /tmp/tmpbsy49t7p.php(24): parse_nested_parens('(()()) ((())) (...')\n#1 /tmp/tmpbsy49t7p.php(28): candidate('(()()) ((())) (...')\n#2 /tmp/tmpbsy49t7p.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpbsy49t7p.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_max = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_count = 0;\n    $paren_stack_max_count_count_index = 0;\n    $paren_stack_max_count_count_count = 0;\n    $paren_stack_max_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_index = 0\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp6lbu5bjb.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_max = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_count = 0;\n    $paren_stack_max_count_count_index = 0;\n    $paren_stack_max_count_count_count = 0;\n    $paren_stack_max_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0;\n    $paren_stack_max_count_count_count_count_count_count_count_count_count_count_index = 0\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp6lbu5bjb.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(\" \", $paren_string);\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    for ($i = 0; $i < count($parens); $i++) {\n        $nesting = count_nested_parens($parens[$i]);\n        if ($nesting > $max_nesting) {\n            $max_nesting = $nesting;\n            $max_nesting_index = $i;\n        }\n    }\n    return $max_nesting_index;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function count_nested_parens() in /tmp/tmpudzxwm0_.php:12\nStack trace:\n#0 /tmp/tmpudzxwm0_.php(22): parse_nested_parens('(()()) ((())) (...')\n#1 /tmp/tmpudzxwm0_.php(26): candidate('(()()) ((())) (...')\n#2 /tmp/tmpudzxwm0_.php(31): test()\n#3 {main}\n  thrown in /tmp/tmpudzxwm0_.php on line 12\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_index_max = 0;\n    $paren_stack_count_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n    $paren_stack_count_max_index_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpsa1oqh7v.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_max_value = 0;\n    $paren_stack_count_max_value_index = 0;\n    $paren_stack_count_max_value_value = 0;\n    $paren_stack_count_max_value_value_index = 0;\n    $paren_stack_count_max_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value = 0;\n    $paren_stack_count_max_value_value_value_value_value_value_value_value_value_index = 0;\n    $paren_stack_count_max_value\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmplu1r8pwx.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $parens = explode(' ', $paren_string);\n    $nested_parens = array();\n    $nested_parens_count = 0;\n    for ($i = 0; $i < count($parens); $i++) {\n        $nested_parens_count = count($nested_parens);\n        $nested_parens[$nested_parens_count] = $parens[$i];\n        $nested_parens_count = count($nested_parens);\n        $nested_parens[$nested_parens_count] = $parens[$i];\n    }\n    return $nested_parens_count;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f43u6on.php:25\nStack trace:\n#0 /tmp/tmp9f43u6on.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9f43u6on.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = [];\n    $paren_stack[0] = 0;\n    $paren_stack[1] = 0;\n    $paren_stack[2] = 0;\n    $paren_stack[3] = 0;\n    $paren_stack[4] = 0;\n    $paren_stack[5] = 0;\n    $paren_stack[6] = 0;\n    $paren_stack[7] = 0;\n    $paren_stack[8] = 0;\n    $paren_stack[9] = 0;\n    $paren_stack[10] = 0;\n    $paren_stack[11] = 0;\n    $paren_stack[12] = 0;\n    $paren_stack[13] = 0;\n    $paren_stack[14] = 0;\n    $paren_stack[15] = 0;\n    $paren_stack[16] = 0;\n    $paren_stack[17] = 0;\n    $paren_stack[18] = 0;\n    $paren_stack[19] = 0;\n    $paren_stack[20] = 0;\n    $paren_stack[21] = 0;\n    $paren_stack[22] = 0;\n    $paren_stack[23] = 0;\n    $paren_stack[24] = 0;\n    $paren_stack[25] = 0;\n    $paren_stack[26] = 0;\n    $paren_stack[27] = 0;\n    $paren_stack[28] = 0;\n    $paren_stack[29] = 0;\n    $paren_stack[30] = 0;\n    $paren_stack[31] = 0;\n    $paren_stack[32] = 0;\n    $paren_stack[33] = 0;\n    $paren_stack[34] = 0;\n    $paren_stack[35] = 0;\n    $paren_stack[36] = 0;\n    $paren_stack[37] = 0;\n    $paren_stack[38] = 0;\n    $paren_stack[39] = 0;\n    $paren_stack[40] = 0;\n    $paren\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpexzz05tr.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_stack_count = 0;\n    $paren_stack_index = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_index_max = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_index_max_index = 0;\n    $paren_stack_count_max_count = 0;\n    $paren_stack_index_max_count = 0;\n    $paren_stack_count_max_index_count = 0;\n    $paren_stack_index_max_index_count = 0;\n    $paren_stack_count_max_count_index = 0;\n    $paren_stack_index_max_count_index = 0;\n    $paren_stack_count_max_count_index_count = 0;\n    $paren_stack_index_max_count_index_count = 0;\n    $paren_stack_count_max_count_index_count_index = 0;\n    $paren_stack_index_max_count_index_count_index = 0;\n    $paren_stack_count_max_count_index_count_index_count = 0;\n    $paren_stack_index_max_count_index_count_index_count = 0;\n    $paren_stack_count_max_count_index_count_index_count_index = 0;\n    $paren_stack_index_max_count_index_count_index_count_index_count = 0;\n    $paren_stack_count_max_count_index_count_index_count_index_count = 0;\n    $paren_stack_index_max_count_index_count_index_count_index_count_index = 0;\n    $paren_stack_count_max_count_index_count_index_count_index_count_index_count = 0;\n    $paren_stack_index\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpbawx0d2v.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string = str_replace('[', '', $paren_string);\n    $paren_string = str_replace(']', '', $paren_string);\n    $paren_string = str_replace('{', '', $paren_string);\n    $paren_string = str_replace('}', '', $paren_string);\n    $paren_string = str_replace('<', '', $paren_string);\n    $paren_string = str_replace('>', '', $paren_string);\n    $paren_string = str_replace('\"', '', $paren_string);\n    $paren_string = str_replace(\"'\", '', $paren_string);\n    $paren_string = str_replace('\\\\', '', $paren_string);\n    $paren_string = str_replace('/', '', $paren_string);\n    $paren_string = str_replace(';', '', $paren_string);\n    $paren_string = str_replace('&', '', $paren_string);\n    $paren_string = str_replace('|', '', $paren_string);\n    $paren_string = str_replace('!', '', $paren_string);\n    $paren_string = str_replace('?', '', $paren_string);\n    $paren_string = str_replace('=', '', $paren_string);\n    $paren_string = str_replace('+', '', $paren_string);\n    $paren_string = str_replace('-', '', $paren_string);\n    $paren_string = str_replace('*', '', $paren_string);\n    $paren_string = str_replace('%', '', $paren_string);\n    $paren_string = str_replace('^', '', $paren_string);\n    $paren_string = str_replace('~', '', $paren_string);\n    $paren_string = str_replace('#', '\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \")\" in /tmp/tmp4hesz07x.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $paren_stack_index = 0;\n    $paren_stack_count = 0;\n    $paren_stack_count_max = 0;\n    $paren_stack_count_min = 0;\n    $paren_stack_count_max_index = 0;\n    $paren_stack_count_min_index = 0;\n    $paren_stack_count_max_index_temp = 0;\n    $paren_stack_count_min_index_temp = 0;\n    $paren_stack_count_max_temp = 0;\n    $paren_stack_count_min_temp = 0;\n    $paren_stack_count_max_temp_index = 0;\n    $paren_stack_count_min_temp_index = 0;\n    $paren_stack_count_max_temp_index_temp = 0;\n    $paren_stack_count_min_temp_index_temp = 0;\n    $paren_stack_count_max_temp_index_temp_temp = 0;\n    $paren_stack_count_min_temp_index_temp_temp = 0;\n    $paren_stack_count_max_temp_index_temp_temp_temp = 0;\n    $paren_stack_count_min_temp_index_temp_temp_temp_temp = 0;\n    $paren_stack_count_max_temp_index_temp_temp_temp_temp_temp = 0;\n    $paren_stack_count_min_temp_index_temp_temp_temp_temp_temp_temp = 0;\n    $paren_stack_count_max_temp_index_temp_temp_temp_temp_temp_temp_temp = 0;\n    $paren_stack_count_min_temp_index_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    $paren_stack_count_max_temp_index_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: Unclosed '{' on line 7 in /tmp/tmpbb3k29qy.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $paren_stack[1] = 0;\n    $paren_stack[2] = 0;\n    $paren_stack[3] = 0;\n    $paren_stack[4] = 0;\n    $paren_stack[5] = 0;\n    $paren_stack[6] = 0;\n    $paren_stack[7] = 0;\n    $paren_stack[8] = 0;\n    $paren_stack[9] = 0;\n    $paren_stack[10] = 0;\n    $paren_stack[11] = 0;\n    $paren_stack[12] = 0;\n    $paren_stack[13] = 0;\n    $paren_stack[14] = 0;\n    $paren_stack[15] = 0;\n    $paren_stack[16] = 0;\n    $paren_stack[17] = 0;\n    $paren_stack[18] = 0;\n    $paren_stack[19] = 0;\n    $paren_stack[20] = 0;\n    $paren_stack[21] = 0;\n    $paren_stack[22] = 0;\n    $paren_stack[23] = 0;\n    $paren_stack[24] = 0;\n    $paren_stack[25] = 0;\n    $paren_stack[26] = 0;\n    $paren_stack[27] = 0;\n    $paren_stack[28] = 0;\n    $paren_stack[29] = 0;\n    $paren_stack[30] = 0;\n    $paren_stack[31] = 0;\n    $paren_stack[32] = 0;\n    $paren_stack[33] = 0;\n    $paren_stack[34] = 0;\n    $paren_stack[35] = 0;\n    $paren_stack[36] = 0;\n    $paren_stack[37] = 0;\n    $paren_stack[38] = 0;\n    $paren_stack[39] = 0;\n    $paren_stack[40] = 0;\n    $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpw4cg6no0.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_count = 0;\n    $paren_stack = array();\n    $paren_stack[0] = 0;\n    $max_nesting = 0;\n    $max_nesting_index = 0;\n    $max_nesting_count = 0;\n    $paren_stack_index = 0;\n    $paren_stack_count = 0;\n    $paren_stack_max_count = 0;\n    $paren_stack_max_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_index = 0;\n    $paren_stack_max_count_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpf5pgkuhk.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_string = preg_replacenfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292602,
      "stdout": "\nParse error: syntax error, unexpected token \")\" in /tmp/tmpj74rsnyc.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}