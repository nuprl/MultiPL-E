{
  "name": "HumanEval_148_bf",
  "language": "php",
  "prompt": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n",
  "tests": "function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    $planets = array_merge($planets, array(\"uranus\", \"neptune\"));\n    $planets = array_sort($planets, function($a, $b) {\n        return abs($a - $b);\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptwpzj3ob.php:46\nStack trace:\n#0 /tmp/tmptwpzj3ob.php(55): test()\n#1 {main}\n  thrown in /tmp/tmptwpzj3ob.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array_merge($planets, array(\"mercury\", \"venus\"));\n    } else if ($planet2 == \"mars\") {\n        $planets = array_merge($planets, array(\"mars\"));\n    } else if ($planet2 == \"jupiter\") {\n        $planets = array_merge($planets, array(\"jupiter\"));\n    } else if ($planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"saturn\"));\n    } else if ($planet2 == \"uranus\") {\n        $planets = array_merge($planets, array(\"uranus\"));\n    } else if ($planet2 == \"neptune\") {\n        $planets = array_merge($planets, array(\"neptune\"));\n    }\n    return $planets;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppdkw5llf.php:55\nStack trace:\n#0 /tmp/tmppdkw5llf.php(64): test()\n#1 {main}\n  thrown in /tmp/tmppdkw5llf.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets1 = $planet1.split(\" \");\n    $planets2 = $planet2.split(\" \");\n    $planets1 = array_unique($planets1);\n    $planets2 = array_unique($planets2);\n    $planets1 = array_diff_key($planets1, $planets2);\n    $planets2 = array_diff_key($planets2, $planets1);\n    $planets1 = array_intersect_key($planets1, $planets2);\n    $planets1 = array_diff_key($planets1, $planets2);\n    $planets1 = array_intersect_key($planets1, $planets2);\n    $planets1 = array_diff_key($planets1, $planets2);\n    $planets1 = array_intersect_key($planets1, $planets2);\n    $planets1 = array_diff_key($planets1, $planets2);\n    $planets1 = array_intersect_key($planets1, $planets2);\n    $planets1 = array_diff_key($planets1, $planets2);\n    $planets1 = array_intersect_key($planets1, $planets2);\n    $planets1 = array_diff_key($planets1, $planets2);\n    $planets1 = array_intersect_key($planets1, $planets2);\n    $planets1 = array_diff_key($planets1, $planets2);\n    $planets1 = array_intersect_key($planets1, $planets2);\n    $planets1 = array_diff_key($planets1, $planets2);\n    $planets1 = array_intersect_key($planets1, $planets2);\n    $planets1 = array_diff_key($planets1, $planets2);\n    $planets1 = array_intersect_key($planets1, $planets2);\n    $planets1 = array_diff_key($planets1, $\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmp81wxs9c6.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" || $planet1 == \"EARTH\" || $planet1 == \"MARS\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"MERCURY\" || $planet2 == \"EARTH\" || $planet2 == \"MARS\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_merge($planets, array(\"MERCURY\", \"VENUS\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\"));\n    $planets = array_sort($planets, function($a, $b) {\n        return abs($a - $planets[0]) - abs($b - $planets[0]);\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4m5ka3kf.php:44\nStack trace:\n#0 /tmp/tmp4m5ka3kf.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp4m5ka3kf.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwc5hhj31.php on line 71\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" || $planet1 == \"EARTH\" || $planet1 == \"MARS\") {\n        $planets = array(\"VENUS\", \"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"JUPITER\" || $planet1 == \"SATURN\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"SATURN\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"UANUS\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"NEPTUNE\");\n    } else if ($planet1 == \"NEPTUNE\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"NEPTUNE\");\n    } else if ($planet1 == \"MERCURY\") {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"NEPTUNE\");\n    } else if ($planet1 == \"VENUS\") {\n        $planets = array(\"MERCURY\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"NEPTUNE\");\n    } else if ($planet1 == \"EARTH\") {\n        $planets = array(\"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\", \"NEPTUNE\");\n    } else if ($planet1 == \"MARS\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EAR\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpqp790kfq.php on line 45\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" || $planet1 == \"EARTH\" || $planet1 == \"MARS\") {\n        $planets[0] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"MERCURY\" || $planet2 == \"EARTH\" || $planet2 == \"MARS\") {\n        $planets[1] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets[2] = \"VENUS\";\n    $planets[3] = \"MARS\";\n    $planets[4] = \"JUPITER\";\n    $planets[5] = \"SATURN\";\n    $planets[6] = \"URANUS\";\n    $planets[7] = \"NEPTUNE\";\n    $planets[8] = \"PLUTO\";\n    $planets[9] = \"SUN\";\n    $planets[10] = \"MERCURY\";\n    $planets[11] = \"EARTH\";\n    $planets[12] = \"MARS\";\n    $planets[13] = \"JUPITER\";\n    $planets[14] = \"SATURN\";\n    $planets[15] = \"URANUS\";\n    $planets[16] = \"NEPTUNE\";\n    $planets[17] = \"PLUTO\";\n    $planets[18] = \"SUN\";\n    $planets[19] = \"MERCURY\";\n    $planets[20] = \"EARTH\";\n    $planets[21] = \"MARS\";\n    $planets[22] = \"JUPITER\";\n    $planets[23] = \"SATURN\";\n    $planets[24] = \"URANUS\";\n    $planets[25] = \"NEPTUNE\";\n    $planets[26] = \"PLUTO\";\n    $planets[27\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"]\" in /tmp/tmp1p9nhz25.php on line 58\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" || $planet1 == \"EARTH\" || $planet1 == \"MARS\") {\n        $planets[0] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"VENUS\" || $planet2 == \"MERCURY\" || $planet2 == \"MARS\") {\n        $planets[1] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets[2] = \"EARTH\";\n    $planets[3] = \"MARS\";\n    $planets[4] = \"JUPITER\";\n    $planets[5] = \"SATURN\";\n    $planets[6] = \"URANUS\";\n    $planets[7] = \"NEPTUNE\";\n    $planets = array_sort($planets, function($a, $b) {\n        return abs($a - $planets[0]) - abs($b - $planets[0]);\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppv33pocq.php:49\nStack trace:\n#0 /tmp/tmppv33pocq.php(58): test()\n#1 {main}\n  thrown in /tmp/tmppv33pocq.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\");\n    } else if ($planet1 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\");\n    } else if ($planet1 == \"EARTH\") {\n        $planets = array(\"EARTH\", \"MARS\");\n    } else if ($planet1 == \"MARS\") {\n        $planets = array(\"MARS\", \"JUPITER\");\n    } else if ($planet1 == \"JUPITER\") {\n        $planets = array(\"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"SATURN\") {\n        $planets = array(\"SATURN\", \"URANUS\");\n    } else if ($planet1 == \"URANUS\") {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"NEPTUNE\") {\n        $planets = array(\"NEPTUNE\");\n    }\n    if ($planet2 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\");\n    } else if ($planet2 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\");\n    } else if ($planet2 == \"EARTH\") {\n        $planets = array(\"EARTH\", \"MARS\");\n    } else if ($planet2 == \"MARS\") {\n        $planets = array(\"MARS\", \"JUPITER\");\n    } else if ($planet2 == \"JUPITER\") {\n        $planets = array(\"JUPITER\", \"SATURN\");\n    } else if ($planet2 == \"SATURN\") {\n        $planets = array(\"SATURN\", \"URANUS\");\n    } else if ($planet2 == \"URANUS\") {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if ($planet\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpn921z77f.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    $planets = array_merge($planets, array(\"uranus\", \"neptune\"));\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9cqs1kh0.php:43\nStack trace:\n#0 /tmp/tmp9cqs1kh0.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp9cqs1kh0.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" || $planet1 == \"MARS\" || $planet1 == \"JUPITER\" || $planet1 == \"SATURN\" || $planet1 == \"URANUS\" || $planet1 == \"NEPTUNE\") {\n        $planets = array($planet1);\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"MERCURY\" || $planet2 == \"MARS\" || $planet2 == \"JUPITER\" || $planet2 == \"SATURN\" || $planet2 == \"URANUS\" || $planet2 == \"NEPTUNE\") {\n        $planets = array_merge($planets, array($planet2));\n    } else {\n        return $planets;\n    }\n    $planets = array_sort($planets, function($a, $b) {\n        $a = strtoupper($a);\n        $b = strtoupper($b);\n        if ($a == \"MERCURY\" || $a == \"MARS\" || $a == \"JUPITER\" || $a == \"SATURN\" || $a == \"URANUS\" || $a == \"NEPTUNE\") {\n            return -1;\n        }\n        if ($b == \"MERCURY\" || $b == \"MARS\" || $b == \"JUPITER\" || $b == \"SATURN\" || $b == \"URANUS\" || $b == \"NEPTUNE\") {\n            return 1;\n        }\n        return 0;\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmp73nizl3f.php:32\nStack trace:\n#0 /tmp/tmp73nizl3f.php(47): bf('JUPITER', 'NEPTUNE')\n#1 /tmp/tmp73nizl3f.php(51): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmp73nizl3f.php(60): test()\n#3 {main}\n  thrown in /tmp/tmp73nizl3f.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array_merge($planets, array(\"mercury\", \"venus\"));\n    } else if ($planet2 == \"mars\") {\n        $planets = array_merge($planets, array(\"mars\"));\n    } else if ($planet2 == \"jupiter\") {\n        $planets = array_merge($planets, array(\"jupiter\"));\n    } else if ($planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"saturn\"));\n    } else if ($planet2 == \"uranus\") {\n        $planets = array_merge($planets, array(\"uranus\"));\n    } else if ($planet2 == \"neptune\") {\n        $planets = array_merge($planets, array(\"neptune\"));\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5fa2esz.php:56\nStack trace:\n#0 /tmp/tmpv5fa2esz.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpv5fa2esz.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\" || $planet1 == \"jupiter\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\" || $planet2 == \"jupiter\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"venus\", \"\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpudop7h30.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    $planets = array_merge($planets, array(\"Mercury\", \"Venus\"));\n    $planets = array_merge($planets, array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_merge($planets, array($planet1, $planet2));\n    $planets = array_sort($planets, function($a, $b) {\n        $a = strtolower($a);\n        $b = strtolower($b);\n        if ($a == $planet1) {\n            return 1;\n        } else if ($a == $planet2) {\n            return -1;\n        } else if ($b == $planet1) {\n            return -1;\n        } else if ($b == $planet2) {\n            return 1;\n        } else {\n            return 0;\n        }\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmp17jdpt1a.php:25\nStack trace:\n#0 /tmp/tmp17jdpt1a.php(44): bf('jupiter', 'neptune')\n#1 /tmp/tmp17jdpt1a.php(48): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmp17jdpt1a.php(57): test()\n#3 {main}\n  thrown in /tmp/tmp17jdpt1a.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets,\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpg5l28v0c.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    $planets = array_merge($planets, array(\"uranus\", \"neptune\"));\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9cqs1kh0.php:43\nStack trace:\n#0 /tmp/tmp9cqs1kh0.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp9cqs1kh0.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets[0] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets[1] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_merge($planets, $planets);\n    $planets = array_merge($planets, $planets);\n    $planets = array_merge($planets, $planets);\n    $planets = array_merge($planets, $planets);\n    $planets = array_merge($planets, $planets);\n    $planets = array_merge($planets, $planets);\n    $planets = array_merge($planets, $planets);\n    $planets = array_merge($planets, $planets);\n    $planets = array_merge($planets, $planets);\n    $planets = array_merge($planets, $planets);\n    $planets = array_merge($planets, $planets);\n    $planets = array_merge($planets, $planets);\n    $planets = array_merge($planets, $planets);\n    $planets = array_merge($planets, $planets);\n    $planets = array_merge($planets, $planets);\n    $planets = array_merge($planets, $planets);\n    $planets = array_merge($planets, $planets);\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmp5rnw08t1.php on line 64\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    $planets = array_merge($planets, array(\"uranus\", \"neptune\"));\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9cqs1kh0.php:43\nStack trace:\n#0 /tmp/tmp9cqs1kh0.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp9cqs1kh0.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    $planets = array_merge($planets, array(\"uranus\", \"neptune\"));\n    $planets = array_sort($planets, function($a, $b) {\n        return abs($a - $b);\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptwpzj3ob.php:46\nStack trace:\n#0 /tmp/tmptwpzj3ob.php(55): test()\n#1 {main}\n  thrown in /tmp/tmptwpzj3ob.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\");\n    }\n    if ($planet2 == \"saturn\") {\n        $planets = array(\"saturn\");\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2a6xbk9h.php:54\nStack trace:\n#0 /tmp/tmp2a6xbk9h.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp2a6xbk9h.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] =\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp6jhavltg.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if (strcmp($planet1, \"mercury\") == 0) {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet1, \"venus\") == 0) {\n        $planets = array(\"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet1, \"earth\") == 0) {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet1, \"mars\") == 0) {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if (strcmp($planet1, \"jupiter\") == 0) {\n        $planets = array(\"saturn\");\n    } else if (strcmp($planet1, \"saturn\") == 0) {\n        $planets = array();\n    } else {\n        $planets = array();\n    }\n    if (strcmp($planet2, \"mercury\") == 0) {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet2, \"venus\") == 0) {\n        $planets = array(\"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet2, \"earth\") == 0) {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet2, \"mars\") == 0) {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if (strcmp($planet2, \"jupiter\") == 0) {\n        $planets = array(\"saturn\");\n    } else if (strcmp($planet2, \"saturn\") == 0) {\n        $planets = array();\n    } else {\n        $planets = array();\n    }\n    return $planets;\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmpzeqh6crb.php on line 67\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Moon'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Moon'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Moon'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] =\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmph936013h.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array_merge($planets, array(\"mercury\", \"earth\", \"mars\"));\n    }\n    if ($planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array_merge($planets, array(\"jupiter\", \"saturn\"));\n    }\n    if ($planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    }\n    if ($planet1 == \"jupiter\" || $planet1 == \"saturn\" || $planet1 == \"uranus\" || $planet1 == \"neptune\") {\n        $planets = array_merge($planets, array(\"saturn\", \"uranus\", \"neptune\"));\n    }\n    if ($planet2 == \"jupiter\" || $planet2 == \"saturn\" || $planet2 == \"uranus\" || $planet2 == \"neptune\") {\n        $planets = array_merge($planets, array(\"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3hixivjs.php:48\nStack trace:\n#0 /tmp/tmp3hixivjs.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp3hixivjs.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected string content \"Mercury\" in /tmp/tmppkfig_vg.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected string content \"Saturn\", expecting \"]\" in /tmp/tmpi16awfq4.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" || $planet1 == \"MARS\" || $planet1 == \"JUPITER\" || $planet1 == \"SATURN\" || $planet1 == \"URANUS\" || $planet1 == \"NEPTUNE\") {\n        $planets = array(\"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    }\n    if ($planet2 == \"MERCURY\" || $planet2 == \"MARS\" || $planet2 == \"JUPITER\" || $planet2 == \"SATURN\" || $planet2 == \"URANUS\" || $planet2 == \"NEPTUNE\") {\n        $planets = array_merge($planets, array(\"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\"));\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmuhyimtc.php:36\nStack trace:\n#0 /tmp/tmpmuhyimtc.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpmuhyimtc.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"EARTH\") {\n        $planets = array(\"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"MARS\") {\n        $planets = array(\"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"JUPITER\") {\n        $planets = array(\"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"SATURN\") {\n        $planets = array(\"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"URANUS\") {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"NEPTUNE\") {\n        $planets = array(\"NEPTUNE\");\n    } else {\n        $planets = array();\n    }\n    if ($planet2 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet2 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"S\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpvog_ygq6.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpqdzl5v69.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\");\n    }\n    if ($planet2 == \"saturn\") {\n        $planets = array(\"saturn\");\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2a6xbk9h.php:54\nStack trace:\n#0 /tmp/tmp2a6xbk9h.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp2a6xbk9h.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == 'MERCURY' || $planet1 == 'MARS' || $planet1 == 'JUPITER' || $planet1 == 'SATURN' || $planet1 == 'URANUS' || $planet1 == 'NEPTUNE') {\n        $planets[0] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == 'MERCURY' || $planet2 == 'MARS' || $planet2 == 'JUPITER' || $planet2 == 'SATURN' || $planet2 == 'URANUS' || $planet2 == 'NEPTUNE') {\n        $planets[1] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets[2] = 'EARTH';\n    $planets[3] = 'MARS';\n    $planets[4] = 'JUPITER';\n    $planets[5] = 'SATURN';\n    $planets[6] = 'URANUS';\n    $planets[7] = 'NEPTUNE';\n    $planets[8] = 'PLUTO';\n    $planets[9] = 'SUN';\n    $planets[10] = 'MOON';\n    $planets[11] = 'MERCURY';\n    $planets[12] = 'VENUS';\n    $planets[13] = 'MARS';\n    $planets[14] = 'JUPITER';\n    $planets[15] = 'SATURN';\n    $planets[16] = 'URANUS';\n    $planets[17] = 'NEPTUNE';\n    $planets[18] = 'PLUTO';\n    $planets[19] = 'SUN';\n    $planets[20] = 'MOON';\n    $planets[21] = 'MERCURY';\n    $planets[22] = 'VENUS';\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmpfue3r6ny.php on line 67\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected string content \"Saturn\", expecting \"]\" in /tmp/tmpi16awfq4.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"EARTH\") {\n        $planets = array(\"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"MARS\") {\n        $planets = array(\"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"JUPITER\") {\n        $planets = array(\"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"SATURN\") {\n        $planets = array(\"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"URANUS\") {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"NEPTUNE\") {\n        $planets = array(\"NEPTUNE\");\n    } else {\n        $planets = array();\n    }\n    if ($planet2 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet2 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"S\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpvog_ygq6.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_sort($planets, function($a, $b) {\n        return abs($a - $sun) - abs($b - $sun);\n    });\n    return $planets;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7z78d5xn.php:43\nStack trace:\n#0 /tmp/tmp7z78d5xn.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp7z78d5xn.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" || $planet1 == \"MARS\" || $planet1 == \"JUPITER\" || $planet1 == \"SATURN\" || $planet1 == \"URANUS\" || $planet1 == \"NEPTUNE\") {\n        $planets = array($planet1);\n    }\n    if ($planet2 == \"MERCURY\" || $planet2 == \"MARS\" || $planet2 == \"JUPITER\" || $planet2 == \"SATURN\" || $planet2 == \"URANUS\" || $planet2 == \"NEPTUNE\") {\n        $planets = array_merge($planets, array($planet2));\n    }\n    $planets = array_sort($planets, function($a, $b) {\n        return abs($a - $sun) - abs($b - $sun);\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpiduzns_8.php:28\nStack trace:\n#0 /tmp/tmpiduzns_8.php(35): bf('JUPITER', 'NEPTUNE')\n#1 /tmp/tmpiduzns_8.php(39): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmpiduzns_8.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpiduzns_8.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" || $planet1 == \"MARS\" || $planet1 == \"JUPITER\" || $planet1 == \"SATURN\" || $planet1 == \"URANUS\" || $planet1 == \"NEPTUNE\") {\n        $planets = array($planet1);\n    } else {\n        $planets = array();\n    }\n    if ($planet2 == \"MERCURY\" || $planet2 == \"MARS\" || $planet2 == \"JUPITER\" || $planet2 == \"SATURN\" || $planet2 == \"URANUS\" || $planet2 == \"NEPTUNE\") {\n        $planets = array_merge($planets, array($planet2));\n    } else {\n        $planets = array();\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9q1luhcq.php:40\nStack trace:\n#0 /tmp/tmp9q1luhcq.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp9q1luhcq.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwc5hhj31.php on line 71\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets1 = array();\n    $planets2 = array();\n    $planets1 = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planets2 = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    for ($i = 0; $i < 8; $i++) {\n        $planet1 = $planets1[$i];\n        $planet2 = $planets2[$i];\n        if ($planet1 == $planet2) {\n            $planets[$i] = $planet1;\n        }\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_hrhfmc.php:39\nStack trace:\n#0 /tmp/tmpd_hrhfmc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpd_hrhfmc.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \"]\" in /tmp/tmppnh74cx2.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\" || $planet1 == \"jupiter\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\" || $planet2 == \"jupiter\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"venus\", \"\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpudop7h30.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"EARTH\") {\n        $planets = array(\"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"MARS\") {\n        $planets = array(\"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"JUPITER\") {\n        $planets = array(\"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"SATURN\") {\n        $planets = array(\"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"URANUS\") {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"NEPTUNE\") {\n        $planets = array(\"NEPTUNE\");\n    } else {\n        $planets = array();\n    }\n    if ($planet2 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet2 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"S\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpvog_ygq6.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_sort(array_intersect($planets, array(\"mercury\", \"venus\", \"earth\")));\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplveferwp.php:42\nStack trace:\n#0 /tmp/tmplveferwp.php(51): test()\n#1 {main}\n  thrown in /tmp/tmplveferwp.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets,\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpg5l28v0c.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \"]\" in /tmp/tmppnh74cx2.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if (strcmp($planet1, \"MERCURY\") == 0) {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"VENUS\") == 0) {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"EARTH\") == 0) {\n        $planets = array(\"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"MARS\") == 0) {\n        $planets = array(\"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"JUPITER\") == 0) {\n        $planets = array(\"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"SATURN\") == 0) {\n        $planets = array(\"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"URANUS\") == 0) {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"NEPTUNE\") == 0) {\n        $planets = array(\"NEPTUNE\");\n    } else {\n        $planets = array();\n    }\n    if (strcmp($planet2, \"MERCURY\") == 0) {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SAT\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpi148bsp9.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" || $planet1 == \"MARS\" || $planet1 == \"JUPITER\" || $planet1 == \"SATURN\" || $planet1 == \"URANUS\" || $planet1 == \"NEPTUNE\") {\n        $planets = array(\"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else {\n        $planets = array();\n    }\n    if ($planet2 == \"MERCURY\" || $planet2 == \"MARS\" || $planet2 == \"JUPITER\" || $planet2 == \"SATURN\" || $planet2 == \"URANUS\" || $planet2 == \"NEPTUNE\") {\n        $planets = array_merge($planets, array(\"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\"));\n    } else {\n        $planets = array();\n    }\n    return $planets;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph0uwgg1k.php:39\nStack trace:\n#0 /tmp/tmph0uwgg1k.php(48): test()\n#1 {main}\n  thrown in /tmp/tmph0uwgg1k.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $a1 = $planets[$planet1];\n    $a2 = $planets[$planet2];\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result = array();\n    $result\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpb6ht0aox.php on line 86\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planets = array_diff_key($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff_key($planets, array($planet1, $planet2));\n    $planets = array_sort($planets, function($a, $b) {\n        $a = abs($a - $planets[0]);\n        $b = abs($b - $planets[0]);\n        return $a - $b;\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpubzculrl.php:23\nStack trace:\n#0 /tmp/tmpubzculrl.php(32): bf('Jupiter', 'Neptune')\n#1 /tmp/tmpubzculrl.php(36): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmpubzculrl.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpubzculrl.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"EARTH\") {\n        $planets = array(\"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"MARS\") {\n        $planets = array(\"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"JUPITER\") {\n        $planets = array(\"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"SATURN\") {\n        $planets = array(\"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"URANUS\") {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"NEPTUNE\") {\n        $planets = array(\"NEPTUNE\");\n    } else {\n        $planets = array();\n    }\n    if ($planet2 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet2 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"S\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpvog_ygq6.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $a1 = $planets[$planet1];\n    $a2 = $planets[$planet2];\n    $result = array();\n    for ($i = 0; $i < $planets.length; $i++) {\n        if ($planets[$i] > $a1 && $planets[$i] < $a2) {\n            $result.push($planets[$i]);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nWarning: Undefined array key \"Jupiter\" in /tmp/tmpk3oucofs.php on line 21\n\nWarning: Undefined array key \"Neptune\" in /tmp/tmpk3oucofs.php on line 22\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpk3oucofs.php:24\nStack trace:\n#0 /tmp/tmpk3oucofs.php(33): bf('Jupiter', 'Neptune')\n#1 /tmp/tmpk3oucofs.php(37): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmpk3oucofs.php(46): test()\n#3 {main}\n  thrown in /tmp/tmpk3oucofs.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array_merge($planets, array(\"mercury\", \"venus\"));\n    } else if ($planet2 == \"mars\") {\n        $planets = array_merge($planets, array(\"mars\"));\n    } else if ($planet2 == \"jupiter\") {\n        $planets = array_merge($planets, array(\"jupiter\"));\n    } else if ($planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"saturn\"));\n    } else if ($planet2 == \"uranus\") {\n        $planets = array_merge($planets, array(\"uranus\"));\n    } else if ($planet2 == \"neptune\") {\n        $planets = array_merge($planets, array(\"neptune\"));\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5fa2esz.php:56\nStack trace:\n#0 /tmp/tmpv5fa2esz.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpv5fa2esz.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 : \"\";\n    if ($planet1 === \"\" || $planet2 === \"\") {\n        return $planets;\n    }\n    $planet1 = $planet1 === $planet2 ? \"Mercury\" : $planet1;\n    $planet2 = $planet1 === $planet2 ? \"Mercury\" : $planet2;\n    $planet1 = $planet1 === \"MERCURY\" ? \"Mercury\" : $planet1;\n    $planet2 = $planet2 === \"MERCURY\" ? \"Mercury\" : $planet2;\n    $planet1 = $planet1 === \"VENUS\" ? \"Venus\" : $planet1;\n    $planet2 = $planet2 === \"VENUS\" ? \"Venus\" : $planet2;\n    $planet1 = $planet1 === \"EARTH\" ? \"Earth\" : $planet1;\n    $planet2 = $planet2 === \"EARTH\" ? \"Earth\" : $planet2;\n    $planet1 = $planet1 === \"MARS\" ? \"Mars\" : $planet1;\n    $planet2 = $planet2 === \"MARS\" ? \"Mars\" : $planet2;\n    $planet1 = $planet1 === \"JUPITER\" ? \"Jupiter\" : $planet1;\n    $planet2 = $planet2 === \"JUPITER\" ? \"Jupiter\" : $planet2;\n    $planet1 = $planet1 === \"SATURN\" ? \"Saturn\" : $planet1;\n    $planet2 = $planet2 === \"SATURN\" ? \"Saturn\" : $planet2;\n    $planet1 = $planet1 === \"URANUS\" ? \"Uranus\" : $planet\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp6fzjn4b7.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    $planets = array_merge($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_intersect($planets, array($planet1, $planet2));\n    $planets = array_sort($planets, function($a, $b) {\n        return abs(strtolower($a) - strtolower($b));\n    });\n    return $planets;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpntgp7zsn.php:25\nStack trace:\n#0 /tmp/tmpntgp7zsn.php(31): bf('jupiter', 'neptune')\n#1 /tmp/tmpntgp7zsn.php(35): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmpntgp7zsn.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpntgp7zsn.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"jupiter\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\" || $planet1 == \"neptune\") {\n        $planets = array(\"neptune\", \"uranus\", \"saturn\", \"jupiter\", \"mars\");\n    } else {\n        $planets = array();\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\") {\n        $planets = array_merge($planets, array(\"mercury\", \"venus\"));\n    } else if ($planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"jupiter\", \"saturn\"));\n    } else if ($planet2 == \"uranus\" || $planet2 == \"neptune\") {\n        $planets = array_merge($planets, array(\"uranus\", \"neptune\"));\n    } else {\n        $planets = array();\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzzzgzl6p.php:48\nStack trace:\n#0 /tmp/tmpzzzgzl6p.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpzzzgzl6p.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array_merge($planets, array(\"mercury\", \"venus\"));\n    } else if ($planet2 == \"mars\") {\n        $planets = array_merge($planets, array(\"mars\"));\n    } else if ($planet2 == \"jupiter\") {\n        $planets = array_merge($planets, array(\"jupiter\"));\n    } else if ($planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"saturn\"));\n    } else if ($planet2 == \"uranus\") {\n        $planets = array_merge($planets, array(\"uranus\"));\n    } else if ($planet2 == \"neptune\") {\n        $planets = array_merge($planets, array(\"neptune\"));\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5fa2esz.php:56\nStack trace:\n#0 /tmp/tmpv5fa2esz.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpv5fa2esz.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planets = array_diff_key($planets, $planets, $planet1, $planet2);\n    $planets = array_diff_key($planets, $planets, $planet2, $planet1);\n    $planets = array_diff_key($planets, $planets, $planet1, $planet2);\n    $planets = array_diff_key($planets, $planets, $planet2, $planet1);\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught TypeError: array_diff_key(): Argument #3 must be of type array, string given in /tmp/tmpl3ya8g9l.php:21\nStack trace:\n#0 /tmp/tmpl3ya8g9l.php(21): array_diff_key(Array, Array, 'Jupiter', 'Neptune')\n#1 /tmp/tmpl3ya8g9l.php(29): bf('Jupiter', 'Neptune')\n#2 /tmp/tmpl3ya8g9l.php(33): candidate('Jupiter', 'Neptune')\n#3 /tmp/tmpl3ya8g9l.php(42): test()\n#4 {main}\n  thrown in /tmp/tmpl3ya8g9l.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets1 = array();\n    $planets2 = array();\n    $planets1 = array($planet1, $planet2);\n    $planets2 = array($planet2, $planet1);\n    $planets = array_diff($planets1, $planets2);\n    $planets = array_diff($planets2, $planets1);\n    $planets = array_sort($planets, function($a, $b) {\n        return abs($a - $b);\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpqicvtraf.php:26\nStack trace:\n#0 /tmp/tmpqicvtraf.php(33): bf('Jupiter', 'Neptune')\n#1 /tmp/tmpqicvtraf.php(37): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmpqicvtraf.php(46): test()\n#3 {main}\n  thrown in /tmp/tmpqicvtraf.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" || $planet1 == \"MARS\" || $planet1 == \"JUPITER\" || $planet1 == \"SATURN\" || $planet1 == \"URANUS\" || $planet1 == \"NEPTUNE\") {\n        $planets = array($planet1);\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"MERCURY\" || $planet2 == \"MARS\" || $planet2 == \"JUPITER\" || $planet2 == \"SATURN\" || $planet2 == \"URANUS\" || $planet2 == \"NEPTUNE\") {\n        $planets = array_merge($planets, array($planet2));\n    } else {\n        return $planets;\n    }\n    $planets = array_sort($planets, function($a, $b) {\n        $a = strtoupper($a);\n        $b = strtoupper($b);\n        $a = $a == \"MERCURY\" ? 1 : $a == \"MARS\" ? 2 : $a == \"JUPITER\" ? 3 : $a == \"SATURN\" ? 4 : $a == \"URANUS\" ? 5 : $a == \"NEPTUNE\" ? 6 : 0;\n        $b = $b == \"MERCURY\" ? 1 : $b == \"MARS\" ? 2 : $b == \"JUPITER\" ? 3 : $b == \"SATURN\" ? 4 : $b == \"URANUS\" ? 5 : $b == \"NEPTUNE\" ? 6 : 0;\n        return $a - $b;\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmplmfjy40z.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\" || $planet1 == \"jupiter\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\" || $planet2 == \"jupiter\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"venus\", \"\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpudop7h30.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\"));\n    }\n    if ($planet1 == \"mars\" || $planet1 == \"jupiter\") {\n        $planets = array_merge($planets, array(\"jupiter\", \"saturn\"));\n    }\n    if ($planet2 == \"mars\" || $planet2 == \"jupiter\") {\n        $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    }\n    if ($planet1 == \"saturn\") {\n        $planets = array_merge($planets, array(\"saturn\"));\n    }\n    if ($planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"saturn\"));\n    }\n    if ($planet1 == \"uranus\" || $planet1 == \"neptune\") {\n        $planets = array_merge($planets, array(\"uranus\", \"neptune\"));\n    }\n    if ($planet2 == \"uranus\" || $planet2 == \"neptune\") {\n        $planets = array_merge($planets, array(\"uranus\", \"neptune\"));\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp23tmyw3i.php:54\nStack trace:\n#0 /tmp/tmp23tmyw3i.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp23tmyw3i.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" || $planet1 == \"EARTH\" || $planet1 == \"MARS\") {\n        $planets = array(\"VENUS\", \"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"JUPITER\" || $planet1 == \"SATURN\") {\n        $planets = array(\"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"SATURN\") {\n        $planets = array(\"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"MARS\") {\n        $planets = array(\"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"JUPITER\") {\n        $planets = array(\"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"VENUS\") {\n        $planets = array(\"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"NEPTUNE\") {\n        $planets = array(\"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"URANUS\") {\n        $planets = array(\"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"PLUTO\") {\n        $planets = array(\"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"SUN\") {\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: Unclosed '{' on line 42 in /tmp/tmpmi60c2pf.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets1 = $planet1.split(\" \");\n    $planets2 = $planet2.split(\" \");\n    for($i = 0; $i < $planets1.length; $i++) {\n        for($j = 0; $j < $planets2.length; $j++) {\n            $a = abs($planets1[$i] - $planets2[$j]);\n            if($a < $planets1[$i]) {\n                $planets[$i] = $planets1[$i];\n            }\n        }\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function split() in /tmp/tmp0k6_7s1c.php:20\nStack trace:\n#0 /tmp/tmp0k6_7s1c.php(34): bf('Jupiter', 'Neptune')\n#1 /tmp/tmp0k6_7s1c.php(38): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmp0k6_7s1c.php(47): test()\n#3 {main}\n  thrown in /tmp/tmp0k6_7s1c.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array_merge($planets, array(\"mercury\", \"venus\"));\n    } else if ($planet2 == \"mars\") {\n        $planets = array_merge($planets, array(\"mars\"));\n    } else if ($planet2 == \"jupiter\") {\n        $planets = array_merge($planets, array(\"jupiter\"));\n    } else if ($planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"saturn\"));\n    } else if ($planet2 == \"uranus\") {\n        $planets = array_merge($planets, array(\"uranus\"));\n    } else if ($planet2 == \"neptune\") {\n        $planets = array_merge($planets, array(\"neptune\"));\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5fa2esz.php:56\nStack trace:\n#0 /tmp/tmpv5fa2esz.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpv5fa2esz.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    $planets = array_merge($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_filter($planets, function($planet) {\n        return $planet != $planet1 && $planet != $planet2;\n    });\n    $planets = array_sort($planets, function($planet1, $planet2) {\n        $distance1 = abs($planet1 - $planet);\n        $distance2 = abs($planet2 - $planet);\n        return $distance1 - $distance2;\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nWarning: Undefined variable $planet1 in /tmp/tmppjo_rtrk.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmppjo_rtrk.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmppjo_rtrk.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmppjo_rtrk.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmppjo_rtrk.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmppjo_rtrk.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmppjo_rtrk.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmppjo_rtrk.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmppjo_rtrk.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmppjo_rtrk.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmppjo_rtrk.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmppjo_rtrk.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmppjo_rtrk.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmppjo_rtrk.php on line 24\n\nW",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected string content \"Saturn\", expecting \"]\" in /tmp/tmpi16awfq4.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected string content \"Saturn\", expecting \"]\" in /tmp/tmpi16awfq4.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" && $planet2 == \"NEPTUNE\") {\n        $planets = array(\"MERCURY\", \"VENUS\");\n    } else if ($planet1 == \"EARTH\" && $planet2 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\");\n    } else if ($planet1 == \"MARS\" && $planet2 == \"JUPITER\") {\n        $planets = array(\"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"JUPITER\" && $planet2 == \"SATURN\") {\n        $planets = array(\"SATURN\", \"URANUS\");\n    } else if ($planet1 == \"SATURN\" && $planet2 == \"URANUS\") {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"URANUS\" && $planet2 == \"NEPTUNE\") {\n        $planets = array(\"NEPTUNE\");\n    } else if ($planet1 == \"MERCURY\" && $planet2 == \"VENUS\") {\n        $planets = array(\"MERCURY\", \"EARTH\");\n    } else if ($planet1 == \"EARTH\" && $planet2 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"MARS\");\n    } else if ($planet1 == \"MARS\" && $planet2 == \"JUPITER\") {\n        $planets = array(\"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"JUPITER\" && $planet2 == \"SATURN\") {\n        $planets = array(\"SATURN\", \"URANUS\");\n    } else if ($planet1 == \"SATURN\" && $planet2 == \"URANUS\") {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"URAN\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\" in /tmp/tmp9twh5g33.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\"));\n    }\n    if ($planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    }\n    if ($planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    }\n    if ($planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array_merge($planets, array(\"jupiter\", \"saturn\"));\n    }\n    if ($planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"jupiter\", \"saturn\"));\n    }\n    if ($planet1 == \"saturn\") {\n        $planets = array_merge($planets, array(\"saturn\"));\n    }\n    if ($planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"saturn\"));\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppqoxfafg.php:54\nStack trace:\n#0 /tmp/tmppqoxfafg.php(63): test()\n#1 {main}\n  thrown in /tmp/tmppqoxfafg.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \"]\" in /tmp/tmppnh74cx2.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\");\n    }\n    if ($planet2 == \"saturn\") {\n        $planets = array(\"saturn\");\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2a6xbk9h.php:54\nStack trace:\n#0 /tmp/tmp2a6xbk9h.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp2a6xbk9h.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    $planets = array_merge($planets, array(\"uranus\", \"neptune\"));\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9cqs1kh0.php:43\nStack trace:\n#0 /tmp/tmp9cqs1kh0.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp9cqs1kh0.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwc5hhj31.php on line 71\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if (strcmp($planet1, \"mercury\") == 0) {\n        $planets = array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\");\n    } else if (strcmp($planet1, \"venus\") == 0) {\n        $planets = array(\"Mercury\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\");\n    } else if (strcmp($planet1, \"earth\") == 0) {\n        $planets = array(\"Mercury\", \"Venus\", \"Mars\", \"Jupiter\", \"Saturn\");\n    } else if (strcmp($planet1, \"mars\") == 0) {\n        $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Jupiter\", \"Saturn\");\n    } else if (strcmp($planet1, \"jupiter\") == 0) {\n        $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Saturn\");\n    } else if (strcmp($planet1, \"saturn\") == 0) {\n        $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\");\n    } else if (strcmp($planet1, \"uranus\") == 0) {\n        $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\");\n    } else if (strcmp($planet1, \"neptune\") == 0) {\n        $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\");\n    } else if (strcmp($planet2, \"mercury\") == 0) {\n        $planets = array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\");\n    } else if (strcmp($planet2, \"venus\") == 0) {\n        $planets = array(\"Mercury\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\");\n    } else if (strcmp($planet2,\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp1_3gi7_j.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \"]\" in /tmp/tmppnh74cx2.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    $planets = array_merge($planets, array(\"uranus\", \"neptune\"));\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9cqs1kh0.php:43\nStack trace:\n#0 /tmp/tmp9cqs1kh0.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp9cqs1kh0.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    }\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_sort(array_intersect($planets, array(\"mercury\", \"venus\", \"earth\")));\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmp0kgnm24q.php:29\nStack trace:\n#0 /tmp/tmp0kgnm24q.php(34): bf('jupiter', 'neptune')\n#1 /tmp/tmp0kgnm24q.php(38): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmp0kgnm24q.php(47): test()\n#3 {main}\n  thrown in /tmp/tmp0kgnm24q.php on line 29\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if (strcmp($planet1, \"MERCURY\") == 0) {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"VENUS\") == 0) {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"EARTH\") == 0) {\n        $planets = array(\"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"MARS\") == 0) {\n        $planets = array(\"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"JUPITER\") == 0) {\n        $planets = array(\"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"SATURN\") == 0) {\n        $planets = array(\"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"URANUS\") == 0) {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"NEPTUNE\") == 0) {\n        $planets = array(\"NEPTUNE\");\n    } else {\n        $planets = array();\n    }\n    if (strcmp($planet2, \"MERCURY\") == 0) {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SAT\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpi148bsp9.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    }\n    if ($planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets[] = $planet2;\n    }\n    if ($planet1 == \"uranus\" || $planet1 == \"neptune\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"uranus\" || $planet2 == \"neptune\") {\n        $planets[] = $planet2;\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpogfg1gqn.php:48\nStack trace:\n#0 /tmp/tmpogfg1gqn.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpogfg1gqn.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planets = array_diff($planets, array($planet1, $planet2));\n    $planets = array_sort($planets, function($a, $b) {\n        return abs($a - $planet1) - abs($b - $planet1);\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpa1ps7ipo.php:22\nStack trace:\n#0 /tmp/tmpa1ps7ipo.php(29): bf('Jupiter', 'Neptune')\n#1 /tmp/tmpa1ps7ipo.php(33): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmpa1ps7ipo.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpa1ps7ipo.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" || $planet1 == \"EARTH\" || $planet1 == \"MARS\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"MERCURY\" || $planet2 == \"EARTH\" || $planet2 == \"MARS\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_sort(array_intersect($planets, array(\"MERCURY\", \"EARTH\", \"MARS\")));\n    $planets = array_sort(array_diff($planets, array(\"MERCURY\", \"EARTH\", \"MARS\")));\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcmzivyuu.php:42\nStack trace:\n#0 /tmp/tmpcmzivyuu.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpcmzivyuu.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    }\n    if ($planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets[] = $planet2;\n    }\n    if ($planet1 == \"uranus\" || $planet1 == \"neptune\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"uranus\" || $planet2 == \"neptune\") {\n        $planets[] = $planet2;\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpogfg1gqn.php:48\nStack trace:\n#0 /tmp/tmpogfg1gqn.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpogfg1gqn.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\"));\n    $planets = array_sort(array_intersect($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\")));\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphxhusgd9.php:42\nStack trace:\n#0 /tmp/tmphxhusgd9.php(51): test()\n#1 {main}\n  thrown in /tmp/tmphxhusgd9.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets,\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpg5l28v0c.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if (strcmp($planet1, \"mercury\") == 0) {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet1, \"venus\") == 0) {\n        $planets = array(\"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet1, \"earth\") == 0) {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet1, \"mars\") == 0) {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if (strcmp($planet1, \"jupiter\") == 0) {\n        $planets = array(\"saturn\");\n    } else if (strcmp($planet1, \"saturn\") == 0) {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if (strcmp($planet1, \"uranus\") == 0) {\n        $planets = array(\"neptune\");\n    } else if (strcmp($planet1, \"neptune\") == 0) {\n        $planets = array();\n    }\n    if (strcmp($planet2, \"mercury\") == 0) {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet2, \"venus\") == 0) {\n        $planets = array(\"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet2, \"earth\") == 0) {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet2, \"mars\") == 0) {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if (strcmp($planet2, \"jupiter\") == 0) {\n        $planets =\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpzyjjvvp3.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets,\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpg5l28v0c.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == 'MERCURY' || $planet1 == 'MARS' || $planet1 == 'JUPITER' || $planet1 == 'SATURN' || $planet1 == 'URANUS' || $planet1 == 'NEPTUNE') {\n        $planets = array($planet1);\n    } else {\n        $planets = array();\n    }\n    if ($planet2 == 'MERCURY' || $planet2 == 'MARS' || $planet2 == 'JUPITER' || $planet2 == 'SATURN' || $planet2 == 'URANUS' || $planet2 == 'NEPTUNE') {\n        $planets = array_merge($planets, array($planet2));\n    } else {\n        $planets = array();\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3vbftyfz.php:40\nStack trace:\n#0 /tmp/tmp3vbftyfz.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp3vbftyfz.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected string content \"Mercury\" in /tmp/tmppkfig_vg.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets,\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpg5l28v0c.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" || $planet1 == \"EARTH\" || $planet1 == \"MARS\") {\n        $planets[0] = $planet1;\n    }\n    if ($planet2 == \"MERCURY\" || $planet2 == \"EARTH\" || $planet2 == \"MARS\") {\n        $planets[1] = $planet2;\n    }\n    $planets[2] = \"VENUS\";\n    $planets[3] = \"MARS\";\n    $planets[4] = \"JUPITER\";\n    $planets[5] = \"SATURN\";\n    $planets[6] = \"URANUS\";\n    $planets[7] = \"NEPTUNE\";\n    $planets[8] = \"SUN\";\n    $planets[9] = \"MERCURY\";\n    $planets[10] = \"EARTH\";\n    $planets[11] = \"MARS\";\n    $planets[12] = \"JUPITER\";\n    $planets[13] = \"SATURN\";\n    $planets[14] = \"URANUS\";\n    $planets[15] = \"NEPTUNE\";\n    $planets[16] = \"SUN\";\n    $planets[17] = \"MERCURY\";\n    $planets[18] = \"EARTH\";\n    $planets[19] = \"MARS\";\n    $planets[20] = \"JUPITER\";\n    $planets[21] = \"SATURN\";\n    $planets[22] = \"URANUS\";\n    $planets[23] = \"NEPTUNE\";\n    $planets[24] = \"SUN\";\n    $planets[25] = \"MERCURY\";\n    $planets[26] = \"EARTH\";\n    $planets[27] = \"MARS\";\n    $planets[28] = \"JUPITER\";\n    $plan\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpkruf2lm4.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\" || $planet1 == \"jupiter\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\" || $planet2 == \"jupiter\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"venus\", \"\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpudop7h30.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    $planets = array_merge($planets, array(\"uranus\", \"neptune\"));\n    $planets = array_sort($planets, function($a, $b) {\n        return abs($a - $planets[0]) - abs($b - $planets[0]);\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy1i2l0i_.php:46\nStack trace:\n#0 /tmp/tmpy1i2l0i_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpy1i2l0i_.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \"]\" in /tmp/tmppnh74cx2.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\");\n    } else if ($planet1 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\");\n    } else if ($planet1 == \"EARTH\") {\n        $planets = array(\"EARTH\", \"MARS\");\n    } else if ($planet1 == \"MARS\") {\n        $planets = array(\"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"JUPITER\") {\n        $planets = array(\"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"SATURN\") {\n        $planets = array(\"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"URANUS\") {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"NEPTUNE\") {\n        $planets = array(\"NEPTUNE\");\n    } else {\n        $planets = array();\n    }\n    if ($planet2 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\");\n    } else if ($planet2 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\");\n    } else if ($planet2 == \"EARTH\") {\n        $planets = array(\"EARTH\", \"MARS\");\n    } else if ($planet2 == \"MARS\") {\n        $planets = array(\"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet2 == \"JUPITER\") {\n        $planets = array(\"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet2 == \"SATURN\") {\n        $planets =\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp2hz38q5t.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    }\n    if ($planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets[] = $planet2;\n    }\n    $planets = array_sort($planets, function($a, $b) {\n        return abs($a - $sun) - abs($b - $sun);\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpn2ip6l0p.php:34\nStack trace:\n#0 /tmp/tmpn2ip6l0p.php(41): bf('jupiter', 'neptune')\n#1 /tmp/tmpn2ip6l0p.php(45): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmpn2ip6l0p.php(54): test()\n#3 {main}\n  thrown in /tmp/tmpn2ip6l0p.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_sort(array_intersect($planets, array(\"mercury\", \"venus\", \"earth\")));\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplveferwp.php:42\nStack trace:\n#0 /tmp/tmplveferwp.php(51): test()\n#1 {main}\n  thrown in /tmp/tmplveferwp.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \"]\" in /tmp/tmppnh74cx2.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"EARTH\") {\n        $planets = array(\"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"MARS\") {\n        $planets = array(\"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"JUPITER\") {\n        $planets = array(\"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"SATURN\") {\n        $planets = array(\"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"URANUS\") {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"NEPTUNE\") {\n        $planets = array(\"NEPTUNE\");\n    } else {\n        $planets = array();\n    }\n    if ($planet2 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet2 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"S\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpvog_ygq6.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets,\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpg5l28v0c.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    $planets = array_merge($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_filter($planets, function($planet) {\n        return strtolower($planet) == $planet1 || strtolower($planet) == $planet2;\n    });\n    $planets = array_sort($planets, function($planet1, $planet2) {\n        return abs(get_orbit($planet1) - get_orbit($planet2));\n    });\n    return $planets;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nWarning: Undefined variable $planet1 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmpfa8m1hmq.php on line 24\n\nW",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if (strcmp($planet1, \"mercury\") == 0) {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet1, \"venus\") == 0) {\n        $planets = array(\"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet1, \"earth\") == 0) {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet1, \"mars\") == 0) {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if (strcmp($planet1, \"jupiter\") == 0) {\n        $planets = array(\"saturn\");\n    } else if (strcmp($planet1, \"saturn\") == 0) {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if (strcmp($planet1, \"uranus\") == 0) {\n        $planets = array(\"neptune\");\n    } else if (strcmp($planet1, \"neptune\") == 0) {\n        $planets = array();\n    } else {\n        $planets = array();\n    }\n    if (strcmp($planet2, \"mercury\") == 0) {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet2, \"venus\") == 0) {\n        $planets = array(\"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet2, \"earth\") == 0) {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if (strcmp($planet2, \"mars\") == 0) {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if (strcmp($planet2, \"\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmp_wtc23gg.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array_merge($planets, array(\"mercury\", \"venus\"));\n    } else if ($planet2 == \"mars\") {\n        $planets = array_merge($planets, array(\"mars\"));\n    } else if ($planet2 == \"jupiter\") {\n        $planets = array_merge($planets, array(\"jupiter\"));\n    } else if ($planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"saturn\"));\n    } else if ($planet2 == \"uranus\") {\n        $planets = array_merge($planets, array(\"uranus\"));\n    } else if ($planet2 == \"neptune\") {\n        $planets = array_merge($planets, array(\"neptune\"));\n    }\n    return $planets;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppdkw5llf.php:55\nStack trace:\n#0 /tmp/tmppdkw5llf.php(64): test()\n#1 {main}\n  thrown in /tmp/tmppdkw5llf.php on line 55\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \"]\" in /tmp/tmppnh74cx2.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    $planets = array_merge($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_filter($planets, function($planet) {\n        return strtolower($planet) == $planet1 || strtolower($planet) == $planet2;\n    });\n    $planets = array_sort($planets, function($planet1, $planet2) {\n        return abs(get_orbit($planet1) - get_orbit($planet2));\n    });\n    return $planets;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nWarning: Undefined variable $planet1 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet1 in /tmp/tmpfa8m1hmq.php on line 24\n\nWarning: Undefined variable $planet2 in /tmp/tmpfa8m1hmq.php on line 24\n\nW",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\");\n    }\n    if ($planet2 == \"saturn\") {\n        $planets = array(\"saturn\");\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2a6xbk9h.php:54\nStack trace:\n#0 /tmp/tmp2a6xbk9h.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp2a6xbk9h.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" || $planet1 == \"MARS\" || $planet1 == \"JUPITER\" || $planet1 == \"SATURN\" || $planet1 == \"URANUS\" || $planet1 == \"NEPTUNE\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"MERCURY\" || $planet2 == \"MARS\" || $planet2 == \"JUPITER\" || $planet2 == \"SATURN\" || $planet2 == \"URANUS\" || $planet2 == \"NEPTUNE\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_diff($planets, array(\"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\"));\n    $planets = array_sort($planets, function($a, $b) {\n        $a = abs($a - $planets[0]);\n        $b = abs($b - $planets[0]);\n        return $a - $b;\n    });\n    return $planets;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpqgwjwsdg.php:33\nStack trace:\n#0 /tmp/tmpqgwjwsdg.php(41): bf('JUPITER', 'NEPTUNE')\n#1 /tmp/tmpqgwjwsdg.php(45): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmpqgwjwsdg.php(54): test()\n#3 {main}\n  thrown in /tmp/tmpqgwjwsdg.php on line 33\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" || $planet1 == \"EARTH\" || $planet1 == \"MARS\") {\n        $planets = array(\"VENUS\", \"MERCURY\", \"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"JUPITER\" || $planet1 == \"SATURN\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"SATURN\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"URANUS\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"NEPTUNE\");\n    } else if ($planet1 == \"NEPTUNE\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\");\n    } else if ($planet1 == \"MERCURY\") {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"EARTH\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"MARS\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"JUPITER\")\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp0urwyvss.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    $planets = array_merge($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_sort($planets, function($a, $b) {\n        $a = $a.substr(0, 1);\n        $b = $b.substr(0, 1);\n        if ($a == $b) {\n            return 0;\n        }\n        if ($a == \"m\") {\n            return -1;\n        }\n        if ($b == \"m\") {\n            return 1;\n        }\n        if ($a == \"v\") {\n            return -1;\n        }\n        if ($b == \"v\") {\n            return 1;\n        }\n        if ($a == \"e\") {\n            return -1;\n        }\n        if ($b == \"e\") {\n            return 1;\n        }\n        if ($a == \"j\") {\n            return -1;\n        }\n        if ($b == \"j\") {\n            return 1;\n        }\n        if ($a == \"s\") {\n            return -1;\n        }\n        if ($b == \"s\") {\n            return 1;\n        }\n        if ($a == \"u\") {\n            return -1;\n        }\n        if ($b == \"u\") {\n            return 1;\n        }\n        if ($a == \"n\") {\n            return -1;\n        }\n        if ($b == \"n\") {\n            return 1;\n        }\n        return 0;\n    });\n    $planets = array_intersect($planets, array($planet1, $planet2));\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmplkupp6k9.php:24\nStack trace:\n#0 /tmp/tmplkupp6k9.php(79): bf('jupiter', 'neptune')\n#1 /tmp/tmplkupp6k9.php(83): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmplkupp6k9.php(92): test()\n#3 {main}\n  thrown in /tmp/tmplkupp6k9.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if (strcmp($planet1, \"mercury\") == 0) {\n        $planets = array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\");\n    } else if (strcmp($planet1, \"venus\") == 0) {\n        $planets = array(\"Mercury\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\");\n    } else if (strcmp($planet1, \"earth\") == 0) {\n        $planets = array(\"Mercury\", \"Venus\", \"Mars\", \"Jupiter\", \"Saturn\");\n    } else if (strcmp($planet1, \"mars\") == 0) {\n        $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Jupiter\", \"Saturn\");\n    } else if (strcmp($planet1, \"jupiter\") == 0) {\n        $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Saturn\");\n    } else if (strcmp($planet1, \"saturn\") == 0) {\n        $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\");\n    } else if (strcmp($planet1, \"uranus\") == 0) {\n        $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\");\n    } else if (strcmp($planet1, \"neptune\") == 0) {\n        $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\");\n    } else if (strcmp($planet1, \"pluto\") == 0) {\n        $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    } else if (strcmp($planet2, \"mercury\") == 0) {\n        $planets = array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Sat\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpykgj8_nw.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    for ($i = 0; $i < count($planets); $i++) {\n        if ($planets[$i] == $planet2) {\n            return $planets;\n        }\n        if ($planets[$i] == $planet1) {\n            $planets = array();\n        }\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp51vmbiib.php:51\nStack trace:\n#0 /tmp/tmp51vmbiib.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp51vmbiib.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array_merge($planets, array(\"mercury\", \"venus\"));\n    } else if ($planet2 == \"mars\") {\n        $planets = array_merge($planets, array(\"mars\"));\n    } else if ($planet2 == \"jupiter\") {\n        $planets = array_merge($planets, array(\"jupiter\"));\n    } else if ($planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"saturn\"));\n    } else if ($planet2 == \"uranus\") {\n        $planets = array_merge($planets, array(\"uranus\"));\n    } else if ($planet2 == \"neptune\") {\n        $planets = array_merge($planets, array(\"neptune\"));\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5fa2esz.php:56\nStack trace:\n#0 /tmp/tmpv5fa2esz.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpv5fa2esz.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if (strcmp($planet1, \"MERCURY\") == 0) {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"VENUS\") == 0) {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"EARTH\") == 0) {\n        $planets = array(\"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"MARS\") == 0) {\n        $planets = array(\"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"JUPITER\") == 0) {\n        $planets = array(\"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"SATURN\") == 0) {\n        $planets = array(\"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"URANUS\") == 0) {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"NEPTUNE\") == 0) {\n        $planets = array(\"NEPTUNE\");\n    } else {\n        $planets = array();\n    }\n    if (strcmp($planet2, \"MERCURY\") == 0) {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SAT\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpi148bsp9.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == 'mercury' || $planet1 == 'venus' || $planet1 == 'earth' || $planet1 == 'mars' || $planet1 == 'jupiter' || $planet1 == 'saturn' || $planet1 == 'uranus' || $planet1 == 'neptune') {\n        $planets = array($planet1);\n    }\n    if ($planet2 == 'mercury' || $planet2 == 'venus' || $planet2 == 'earth' || $planet2 == 'mars' || $planet2 == 'jupiter' || $planet2 == 'saturn' || $planet2 == 'uranus' || $planet2 == 'neptune') {\n        $planets = array_merge($planets, array($planet2));\n    }\n    $planets = array_sort(array_unique($planets), 'ASC');\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmptn75g4lc.php:28\nStack trace:\n#0 /tmp/tmptn75g4lc.php(33): bf('jupiter', 'neptune')\n#1 /tmp/tmptn75g4lc.php(37): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmptn75g4lc.php(46): test()\n#3 {main}\n  thrown in /tmp/tmptn75g4lc.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    for ($i = 0; $i < $planets.length; $i++) {\n        if ($planets[$i] == $planet2) {\n            return $planets;\n        }\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpgaqcnopp.php:35\nStack trace:\n#0 /tmp/tmpgaqcnopp.php(44): bf('jupiter', 'neptune')\n#1 /tmp/tmpgaqcnopp.php(48): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmpgaqcnopp.php(57): test()\n#3 {main}\n  thrown in /tmp/tmpgaqcnopp.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    $planets = array_merge($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff_key($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff_key($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff_key($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff_key($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff_key($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff_key($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff_key($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff_key($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff_key($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpwg4cxhfi.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    }\n    if ($planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets[] = $planet2;\n    }\n    $planets = array_sort(array_intersect($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\")));\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpwfymmxh7.php:34\nStack trace:\n#0 /tmp/tmpwfymmxh7.php(39): bf('jupiter', 'neptune')\n#1 /tmp/tmpwfymmxh7.php(43): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmpwfymmxh7.php(52): test()\n#3 {main}\n  thrown in /tmp/tmpwfymmxh7.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    $planets = array_merge($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_intersect($planets, array($planet1, $planet2));\n    $planets = array_sort($planets, function($a, $b) {\n        return abs($a - $sun) - abs($b - $sun);\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpwzuzlrra.php:25\nStack trace:\n#0 /tmp/tmpwzuzlrra.php(32): bf('jupiter', 'neptune')\n#1 /tmp/tmpwzuzlrra.php(36): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmpwzuzlrra.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpwzuzlrra.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\") {\n        $planets[] = \"mars\";\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\") {\n        $planets[] = \"mars\";\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\" || $planet1 == \"jupiter\") {\n        $planets[] = \"jupiter\";\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\" || $planet2 == \"jupiter\") {\n        $planets[] = \"jupiter\";\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets[] = \"saturn\";\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets[] = \"saturn\";\n    }\n    if ($planet1 == \"mercury\" || $planet1 ==\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp208kevmd.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array_merge($planets, array(\"mercury\", \"venus\"));\n    } else if ($planet2 == \"mars\") {\n        $planets = array_merge($planets, array(\"mars\"));\n    } else if ($planet2 == \"jupiter\") {\n        $planets = array_merge($planets, array(\"jupiter\"));\n    } else if ($planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"saturn\"));\n    } else if ($planet2 == \"uranus\") {\n        $planets = array_merge($planets, array(\"uranus\"));\n    } else if ($planet2 == \"neptune\") {\n        $planets = array_merge($planets, array(\"neptune\"));\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5fa2esz.php:56\nStack trace:\n#0 /tmp/tmpv5fa2esz.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpv5fa2esz.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\"));\n    }\n    if ($planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    }\n    if ($planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    }\n    if ($planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array_merge($planets, array(\"jupiter\", \"saturn\"));\n    }\n    if ($planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"jupiter\", \"saturn\"));\n    }\n    if ($planet1 == \"saturn\") {\n        $planets = array_merge($planets, array(\"saturn\"));\n    }\n    if ($planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"saturn\"));\n    }\n    return $planets;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3q4s70a.php:53\nStack trace:\n#0 /tmp/tmpk3q4s70a.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpk3q4s70a.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    foreach ($planets as $planet) {\n        if ($planet == $planet2) {\n            return $planets;\n        }\n        if ($planet == \"mercury\" || $planet == \"venus\" || $planet == \"earth\") {\n            continue;\n        }\n        if ($planet == \"mars\") {\n            $planets = array(\"mars\", \"jupiter\", \"saturn\");\n        } else if ($planet == \"jupiter\") {\n            $planets = array(\"jupiter\", \"saturn\");\n        } else if ($planet == \"saturn\") {\n            $planets = array(\"saturn\", \"uranus\", \"neptune\");\n        } else if ($planet == \"uranus\") {\n            $planets = array(\"uranus\", \"neptune\");\n        } else if ($planet == \"neptune\") {\n            $planets = array(\"neptune\");\n        }\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp9hc9t4z.php:62\nStack trace:\n#0 /tmp/tmpp9hc9t4z.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpp9hc9t4z.php on line 62\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\");\n    } else {\n        $planets = array();\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array_merge($planets, array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\"));\n    } else if ($planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    } else if ($planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"jupiter\", \"saturn\"));\n    } else if ($planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"saturn\"));\n    } else {\n        $planets = array();\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbgffaj7.php:52\nStack trace:\n#0 /tmp/tmpjbgffaj7.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpjbgffaj7.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    for ($i = 0; $i < $planets.length; $i++) {\n        if ($planets[$i] == $planet2) {\n            break;\n        }\n    }\n    if ($i == $planets.length) {\n        return \"\";\n    }\n    for ($j = 0; $j < $planets.length; $j++) {\n        if ($planets[$j] == $planet1) {\n            break;\n        }\n    }\n    $planets = array_slice($planets, $i, $j);\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpf6l9old_.php:35\nStack trace:\n#0 /tmp/tmpf6l9old_.php(53): bf('jupiter', 'neptune')\n#1 /tmp/tmpf6l9old_.php(57): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmpf6l9old_.php(66): test()\n#3 {main}\n  thrown in /tmp/tmpf6l9old_.php on line 35\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    $planets = array_merge($planets, array(\"uranus\", \"neptune\"));\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9cqs1kh0.php:43\nStack trace:\n#0 /tmp/tmp9cqs1kh0.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp9cqs1kh0.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets,\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpg5l28v0c.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array_merge($planets, array(\"mercury\", \"venus\"));\n    } else if ($planet2 == \"mars\") {\n        $planets = array_merge($planets, array(\"mars\"));\n    } else if ($planet2 == \"jupiter\") {\n        $planets = array_merge($planets, array(\"jupiter\"));\n    } else if ($planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"saturn\"));\n    } else if ($planet2 == \"uranus\") {\n        $planets = array_merge($planets, array(\"uranus\"));\n    } else if ($planet2 == \"neptune\") {\n        $planets = array_merge($planets, array(\"neptune\"));\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5fa2esz.php:56\nStack trace:\n#0 /tmp/tmpv5fa2esz.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpv5fa2esz.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Pluto'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected string content \"Saturn\", expecting \"]\" in /tmp/tmpi16awfq4.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\");\n    }\n    if ($planet2 == \"saturn\") {\n        $planets = array(\"saturn\");\n    }\n    return $planets;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy0t8p80k.php:53\nStack trace:\n#0 /tmp/tmpy0t8p80k.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpy0t8p80k.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if (strcmp($planet1, \"MERCURY\") == 0) {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"VENUS\") == 0) {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"EARTH\") == 0) {\n        $planets = array(\"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"MARS\") == 0) {\n        $planets = array(\"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"JUPITER\") == 0) {\n        $planets = array(\"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"SATURN\") == 0) {\n        $planets = array(\"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"URANUS\") == 0) {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if (strcmp($planet1, \"NEPTUNE\") == 0) {\n        $planets = array(\"NEPTUNE\");\n    } else {\n        $planets = array();\n    }\n    if (strcmp($planet2, \"MERCURY\") == 0) {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SAT\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpi148bsp9.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    $min = 0;\n    $max = 0;\n    $min = $planets[$planet1];\n    $max = $planets[$planet2];\n    $result = array();\n    for($i = $min; $i <= $max; $i++) {\n        $result[$i] = $planets[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nWarning: Undefined array key \"jupiter\" in /tmp/tmpmnc2gum4.php on line 25\n\nWarning: Undefined array key \"neptune\" in /tmp/tmpmnc2gum4.php on line 26\n\nWarning: Undefined array key \"\" in /tmp/tmpmnc2gum4.php on line 29\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmnc2gum4.php:39\nStack trace:\n#0 /tmp/tmpmnc2gum4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpmnc2gum4.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmp_166fydi.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    $planets = array_merge($planets, array(\"uranus\", \"neptune\"));\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9cqs1kh0.php:43\nStack trace:\n#0 /tmp/tmp9cqs1kh0.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp9cqs1kh0.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $a1 = $planets[$planet1];\n    $a2 = $planets[$planet2];\n    $result = array();\n    for($i = 0; $i < $planets.length; $i++) {\n        if($planets[$i] > $a1 && $planets[$i] < $a2) {\n            $result.push($planets[$i]);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nWarning: Undefined array key \"Jupiter\" in /tmp/tmpmi3e_pbz.php on line 21\n\nWarning: Undefined array key \"Neptune\" in /tmp/tmpmi3e_pbz.php on line 22\n\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpmi3e_pbz.php:24\nStack trace:\n#0 /tmp/tmpmi3e_pbz.php(33): bf('Jupiter', 'Neptune')\n#1 /tmp/tmpmi3e_pbz.php(37): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmpmi3e_pbz.php(46): test()\n#3 {main}\n  thrown in /tmp/tmpmi3e_pbz.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = $planet1.toLowerCase();\n    $planet2 = $planet2.toLowerCase();\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array($planet1, $planet2));\n    $planets = array_diff($planets, array($planet2, $planet1));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\",\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp14ynxo5y.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    $planets = array_merge($planets, array(\"uranus\", \"neptune\"));\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9cqs1kh0.php:43\nStack trace:\n#0 /tmp/tmp9cqs1kh0.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp9cqs1kh0.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"EARTH\") {\n        $planets = array(\"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"MARS\") {\n        $planets = array(\"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"JUPITER\") {\n        $planets = array(\"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"SATURN\") {\n        $planets = array(\"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"URANUS\") {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"NEPTUNE\") {\n        $planets = array(\"NEPTUNE\");\n    } else {\n        $planets = array();\n    }\n    if ($planet2 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet2 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"S\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpvog_ygq6.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \"]\" in /tmp/tmppnh74cx2.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\" || $planet1 == \"jupiter\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\" || $planet2 == \"jupiter\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"venus\", \"\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpudop7h30.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwc5hhj31.php on line 71\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    $planets = array_merge($planets, array(\"uranus\", \"neptune\"));\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9cqs1kh0.php:43\nStack trace:\n#0 /tmp/tmp9cqs1kh0.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp9cqs1kh0.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == 'mercury' || $planet1 == 'venus' || $planet1 == 'earth' || $planet1 == 'mars' || $planet1 == 'jupiter' || $planet1 == 'saturn' || $planet1 == 'uranus' || $planet1 == 'neptune') {\n        $planets = array($planet1);\n    } else {\n        return $planets;\n    }\n    if ($planet2 == 'mercury' || $planet2 == 'venus' || $planet2 == 'earth' || $planet2 == 'mars' || $planet2 == 'jupiter' || $planet2 == 'saturn' || $planet2 == 'uranus' || $planet2 == 'neptune') {\n        $planets = array_merge($planets, array($planet2));\n    } else {\n        return $planets;\n    }\n    $planets = array_sort($planets, function($a, $b) {\n        $a = abs($a - $sun);\n        $b = abs($b - $sun);\n        return $a - $b;\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmp2asxu9c5.php:32\nStack trace:\n#0 /tmp/tmp2asxu9c5.php(41): bf('jupiter', 'neptune')\n#1 /tmp/tmp2asxu9c5.php(45): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmp2asxu9c5.php(54): test()\n#3 {main}\n  thrown in /tmp/tmp2asxu9c5.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"EARTH\") {\n        $planets = array(\"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"MARS\") {\n        $planets = array(\"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"JUPITER\") {\n        $planets = array(\"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"SATURN\") {\n        $planets = array(\"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"URANUS\") {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"NEPTUNE\") {\n        $planets = array(\"NEPTUNE\");\n    } else {\n        $planets = array();\n    }\n    if ($planet2 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\");\n    } else if ($planet2 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\", \"MARS\", \"JUPITER\", \"S\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"Jupiter\", expecting \")\" in /tmp/tmpvog_ygq6.php on line 50\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    $planets = array_merge($planets, array(\"uranus\", \"neptune\"));\n    $planets = array_sort($planets, function($a, $b) {\n        return abs($a - $b);\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptwpzj3ob.php:46\nStack trace:\n#0 /tmp/tmptwpzj3ob.php(55): test()\n#1 {main}\n  thrown in /tmp/tmptwpzj3ob.php on line 46\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_sort(array_intersect($planets, array(\"mercury\", \"venus\", \"earth\")), function($a, $b) {\n        return abs($a - $b);\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpevgsag00.php:44\nStack trace:\n#0 /tmp/tmpevgsag00.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpevgsag00.php on line 44\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \"]\" in /tmp/tmppnh74cx2.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    $min = array_search($planets, $planet1);\n    $max = array_search($planets, $planet2);\n    if ($min === false || $max === false) {\n        return array();\n    }\n    $result = array();\n    for ($i = $min; $i <= $max; $i++) {\n        $result[$i] = $planets[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught TypeError: array_search(): Argument #2 ($haystack) must be of type array, string given in /tmp/tmpwel_yvxh.php:23\nStack trace:\n#0 /tmp/tmpwel_yvxh.php(23): array_search(Array, 'jupiter')\n#1 /tmp/tmpwel_yvxh.php(36): bf('jupiter', 'neptune')\n#2 /tmp/tmpwel_yvxh.php(40): candidate('Jupiter', 'Neptune')\n#3 /tmp/tmpwel_yvxh.php(49): test()\n#4 {main}\n  thrown in /tmp/tmpwel_yvxh.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    $planets = array_merge($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array($planet1, $planet2));\n    $planets = array_sort($planets, function($a, $b) {\n        $a = abs($a - $planet1);\n        $b = abs($b - $planet2);\n        return $a - $b;\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmp3nn2k_04.php:25\nStack trace:\n#0 /tmp/tmp3nn2k_04.php(34): bf('jupiter', 'neptune')\n#1 /tmp/tmp3nn2k_04.php(38): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmp3nn2k_04.php(47): test()\n#3 {main}\n  thrown in /tmp/tmp3nn2k_04.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" && $planet2 == \"MERCURY\") {\n        $planets = array(\"MERCURY\");\n    } else if ($planet1 == \"VENUS\" && $planet2 == \"VENUS\") {\n        $planets = array(\"VENUS\");\n    } else if ($planet1 == \"EARTH\" && $planet2 == \"EARTH\") {\n        $planets = array(\"EARTH\");\n    } else if ($planet1 == \"MARS\" && $planet2 == \"MARS\") {\n        $planets = array(\"MARS\");\n    } else if ($planet1 == \"JUPITER\" && $planet2 == \"JUPITER\") {\n        $planets = array(\"JUPITER\");\n    } else if ($planet1 == \"SATURN\" && $planet2 == \"SATURN\") {\n        $planets = array(\"SATURN\");\n    } else if ($planet1 == \"URANUS\" && $planet2 == \"URANUS\") {\n        $planets = array(\"URANUS\");\n    } else if ($planet1 == \"NEPTUNE\" && $planet2 == \"NEPTUNE\") {\n        $planets = array(\"NEPTUNE\");\n    } else {\n        $planets = array();\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmz165ogj.php:49\nStack trace:\n#0 /tmp/tmpmz165ogj.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpmz165ogj.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" || $planet1 == \"MARS\" || $planet1 == \"JUPITER\" || $planet1 == \"SATURN\" || $planet1 == \"URANUS\" || $planet1 == \"NEPTUNE\") {\n        $planets = array($planet1);\n    } else {\n        $planets = array();\n    }\n    if ($planet2 == \"MERCURY\" || $planet2 == \"MARS\" || $planet2 == \"JUPITER\" || $planet2 == \"SATURN\" || $planet2 == \"URANUS\" || $planet2 == \"NEPTUNE\") {\n        $planets = array_merge($planets, array($planet2));\n    } else {\n        $planets = array();\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9q1luhcq.php:40\nStack trace:\n#0 /tmp/tmp9q1luhcq.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp9q1luhcq.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planets = array_diff($planets, array($planet1, $planet2));\n    $planets = array_sort($planets, function($a, $b) {\n        return abs($a - $sun) - abs($b - $sun);\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpj_8qs4gw.php:22\nStack trace:\n#0 /tmp/tmpj_8qs4gw.php(29): bf('Jupiter', 'Neptune')\n#1 /tmp/tmpj_8qs4gw.php(33): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmpj_8qs4gw.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpj_8qs4gw.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == 'mercury' || $planet1 == 'venus' || $planet1 == 'earth') {\n        $planets['Mercury'] = $planet1;\n    }\n    if ($planet2 == 'mercury' || $planet2 == 'venus' || $planet2 == 'earth') {\n        $planets['Mercury'] = $planet2;\n    }\n    if ($planet1 == 'mars' || $planet1 == 'jupiter' || $planet1 == 'saturn') {\n        $planets['Mars'] = $planet1;\n    }\n    if ($planet2 == 'mars' || $planet2 == 'jupiter' || $planet2 == 'saturn') {\n        $planets['Mars'] = $planet2;\n    }\n    if ($planet1 == 'jupiter' || $planet1 == 'saturn' || $planet1 == 'uranus' || $planet1 == 'neptune') {\n        $planets['Jupiter'] = $planet1;\n    }\n    if ($planet2 == 'jupiter' || $planet2 == 'saturn' || $planet2 == 'uranus' || $planet2 == 'neptune') {\n        $planets['Jupiter'] = $planet2;\n    }\n    if ($planet1 == 'saturn' || $planet1 == 'uranus' || $planet1 == 'neptune') {\n        $planets['Saturn'] = $planet1;\n    }\n    if ($planet2 == 'saturn' || $planet2 == 'uranus' || $planet2 == 'neptune') {\n        $planets['Saturn'] = $planet2;\n    }\n    if ($planet1 == 'uranus' || $planet1 == 'neptune') {\n        $planets['Uranus'] = $planet1;\n    }\n    if ($planet2 == 'uranus' || $planet2 == 'neptune') {\n        $planets['Uranus'] = $planet2;\n    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: Unclosed '{' on line 18 in /tmp/tmpu4gxgksz.php on line 67\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[0] = $planet1;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[1] = $planet2;\n    }\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"(\" in /tmp/tmpnt_zxs37.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwc5hhj31.php on line 71\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    }\n    if ($planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    }\n    if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\");\n    }\n    if ($planet2 == \"saturn\") {\n        $planets = array(\"saturn\");\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2a6xbk9h.php:54\nStack trace:\n#0 /tmp/tmp2a6xbk9h.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp2a6xbk9h.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planets = array_diff($planets, array($planet1, $planet2));\n    $planets = array_sort($planets, function($a, $b) {\n        return abs($a - $sun) - abs($b - $sun);\n    });\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpj_8qs4gw.php:22\nStack trace:\n#0 /tmp/tmpj_8qs4gw.php(29): bf('Jupiter', 'Neptune')\n#1 /tmp/tmpj_8qs4gw.php(33): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmpj_8qs4gw.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpj_8qs4gw.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $a1 = $planets[$planet1];\n    $a2 = $planets[$planet2];\n    $i1 = $planets[$planet1];\n    $i2 = $planets[$planet2];\n    $d1 = $a1 - $a2;\n    $d2 = $i1 - $i2;\n    $d3 = $d1 * $d1 + $d2 * $d2;\n    $d4 = sqrt($d3);\n    $d5 = $d1 / $d4;\n    $d6 = $d2 / $d4;\n    $d7 = $a1 + $d5 * $d4;\n    $d8 = $i1 + $d6 * $d4;\n    $d9 = $d7 - $a2;\n    $d10 = $d8 - $i2;\n    $d11 = $d9 * $d9 + $d10 * $d10;\n    $d12 = sqrt($d11);\n    $d13 = $d9 / $d12;\n    $d14 = $d10 / $d12;\n    $d15 = $a1 - $d13 * $d12;\n    $d16 = $i1 - $d14 * $d12;\n    $d17 = $d15 + $a2;\n    $d18 = $d16 + $i2;\n    $d19 = $d17 - $d18;\n    $d20 = $d19 * $d19;\n    $d21 = sqrt($d20);\n    $d22 = $d19 / $d21;\n    $d23 = $d20 / $d21;\n    $d24 = $d22 * $d21;\n    $d25 = $d23 * $d21;\n    $d26 = $d24 + $d25;\n    $d27 = $d26 * $d26;\n    $d28 =\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp90wqkrrn.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    for ($i = 0; $i < 8; $i++) {\n        $planet = $planets[$i];\n        if (strcmp($planet, $planet1) == 0 || strcmp($planet, $planet2) == 0) {\n            continue;\n        }\n        $a = abs($planets[$i]->get_a() - $planet1->get_a());\n        $b = abs($planets[$i]->get_b() - $planet1->get_b());\n        $c = abs($planets[$i]->get_c() - $planet1->get_c());\n        $d = abs($planets[$i]->get_d() - $planet1->get_d());\n        $e = abs($planets[$i]->get_e() - $planet1->get_e());\n        $f = abs($planets[$i]->get_f() - $planet1->get_f());\n        $g = abs($planets[$i]->get_g() - $planet1->get_g());\n        $h = abs($planets[$i]->get_h() - $planet1->get_h());\n        $i = abs($planets[$i]->get_i() - $planet1->get_i());\n        $j = abs($planets[$i]->get_j() - $planet1->get_j());\n        $k = abs($planets[$i]->get_k() - $planet1->get_k());\n        $l = abs($planets[$i]->get_l() - $planet1->get_l());\n        $m = abs($planets[$i]->get_m() - $planet1->get_m());\n        $n = abs($planets[$i]->get_n() - $planet1\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpxis6l3q_.php on line 42\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \"]\" in /tmp/tmppnh74cx2.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury';\n    $planets_array['Mercury'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Mercury\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected string content \"Mercury\" in /tmp/tmppkfig_vg.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\" || $planet1 == \"uranus\" || $planet1 == \"neptune\") {\n        $planets = array($planet1);\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\" || $planet2 == \"uranus\" || $planet2 == \"neptune\") {\n        $planets = array_merge($planets, array($planet2));\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0h01n1t_.php:36\nStack trace:\n#0 /tmp/tmp0h01n1t_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0h01n1t_.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\");\n    } else if ($planet1 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\");\n    } else if ($planet1 == \"EARTH\") {\n        $planets = array(\"EARTH\", \"MARS\");\n    } else if ($planet1 == \"MARS\") {\n        $planets = array(\"MARS\", \"JUPITER\");\n    } else if ($planet1 == \"JUPITER\") {\n        $planets = array(\"JUPITER\", \"SATURN\");\n    } else if ($planet1 == \"SATURN\") {\n        $planets = array(\"SATURN\", \"URANUS\");\n    } else if ($planet1 == \"URANUS\") {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if ($planet1 == \"NEPTUNE\") {\n        $planets = array(\"NEPTUNE\");\n    }\n    if ($planet2 == \"MERCURY\") {\n        $planets = array(\"MERCURY\", \"VENUS\");\n    } else if ($planet2 == \"VENUS\") {\n        $planets = array(\"VENUS\", \"EARTH\");\n    } else if ($planet2 == \"EARTH\") {\n        $planets = array(\"EARTH\", \"MARS\");\n    } else if ($planet2 == \"MARS\") {\n        $planets = array(\"MARS\", \"JUPITER\");\n    } else if ($planet2 == \"JUPITER\") {\n        $planets = array(\"JUPITER\", \"SATURN\");\n    } else if ($planet2 == \"SATURN\") {\n        $planets = array(\"SATURN\", \"URANUS\");\n    } else if ($planet2 == \"URANUS\") {\n        $planets = array(\"URANUS\", \"NEPTUNE\");\n    } else if ($planet\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpn921z77f.php on line 54\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets = array_merge($planets, array(\"mercury\", \"venus\"));\n    } else if ($planet2 == \"mars\") {\n        $planets = array_merge($planets, array(\"mars\"));\n    } else if ($planet2 == \"jupiter\") {\n        $planets = array_merge($planets, array(\"jupiter\"));\n    } else if ($planet2 == \"saturn\") {\n        $planets = array_merge($planets, array(\"saturn\"));\n    } else if ($planet2 == \"uranus\") {\n        $planets = array_merge($planets, array(\"uranus\"));\n    } else if ($planet2 == \"neptune\") {\n        $planets = array_merge($planets, array(\"neptune\"));\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5fa2esz.php:56\nStack trace:\n#0 /tmp/tmpv5fa2esz.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpv5fa2esz.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets_array = array();\n    $planets\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwc5hhj31.php on line 71\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \"]\" in /tmp/tmppnh74cx2.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \"]\" in /tmp/tmppnh74cx2.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    if ($planet1 == \"MERCURY\" && $planet2 == \"MERCURY\") {\n        $planets = array(\"MERCURY\");\n    } else if ($planet1 == \"VENUS\" && $planet2 == \"VENUS\") {\n        $planets = array(\"VENUS\");\n    } else if ($planet1 == \"EARTH\" && $planet2 == \"EARTH\") {\n        $planets = array(\"EARTH\");\n    } else if ($planet1 == \"MARS\" && $planet2 == \"MARS\") {\n        $planets = array(\"MARS\");\n    } else if ($planet1 == \"JUPITER\" && $planet2 == \"JUPITER\") {\n        $planets = array(\"JUPITER\");\n    } else if ($planet1 == \"SATURN\" && $planet2 == \"SATURN\") {\n        $planets = array(\"SATURN\");\n    } else if ($planet1 == \"URANUS\" && $planet2 == \"URANUS\") {\n        $planets = array(\"URANUS\");\n    } else if ($planet1 == \"NEPTUNE\" && $planet2 == \"NEPTUNE\") {\n        $planets = array(\"NEPTUNE\");\n    } else {\n        $planets = array();\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmz165ogj.php:49\nStack trace:\n#0 /tmp/tmpmz165ogj.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpmz165ogj.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = $planet1.toLowerCase();\n    $planet2 = $planet2.toLowerCase();\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array($planet1, $planet2));\n    $planets = array_diff($planets, array($planet2, $planet1));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n    $planets = array_diff($planets, array(\"Mercury\",\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmp14ynxo5y.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \"]\" in /tmp/tmppnh74cx2.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    }\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_diff($plan\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \")\" in /tmp/tmpgpnjq0mb.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets = array(\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"mars\") {\n        $planets = array(\"mars\", \"jupiter\", \"saturn\");\n    } else if ($planet1 == \"jupiter\") {\n        $planets = array(\"jupiter\", \"saturn\");\n    } else if ($planet1 == \"saturn\") {\n        $planets = array(\"saturn\", \"uranus\", \"neptune\");\n    } else if ($planet1 == \"uranus\") {\n        $planets = array(\"uranus\", \"neptune\");\n    } else if ($planet1 == \"neptune\") {\n        $planets = array(\"neptune\");\n    }\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets, array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets = array_diff_key($planets,\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpg5l28v0c.php on line 41\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = $planet1.toLowerCase();\n    $planet2 = $planet2.toLowerCase();\n    $planet1 = $planet1.replace(\" \", \"\");\n    $planet2 = $planet2.replace(\" \", \"\");\n    $planet1 = $planet1.replace(\".\", \"\");\n    $planet2 = $planet2.replace(\".\", \"\");\n    $planet1 = $planet1.replace(\"-\", \"\");\n    $planet2 = $planet2.replace(\"-\", \"\");\n    $planet1 = $planet1.replace(\" \", \"\");\n    $planet2 = $planet2.replace(\" \", \"\");\n    $planet1 = $planet1.replace(\".\", \"\");\n    $planet2 = $planet2.replace(\".\", \"\");\n    $planet1 = $planet1.replace(\"-\", \"\");\n    $planet2 = $planet2.replace(\"-\", \"\");\n    $planet1 = $planet1.replace(\" \", \"\");\n    $planet2 = $planet2.replace(\" \", \"\");\n    $planet1 = $planet1.replace(\".\", \"\");\n    $planet2 = $planet2.replace(\".\", \"\");\n    $planet1 = $planet1.replace(\"-\", \"\");\n    $planet2 = $planet2.replace(\"-\", \"\");\n    $planet1 = $planet1.replace(\" \", \"\");\n    $planet2 = $planet2.replace(\" \", \"\");\n    $planet1 = $planet1.replace(\".\", \"\");\n    $planet2 = $planet2.replace(\".\", \"\");\n    $planet1 = $planet1.replace(\"-\", \"\");\n    $planet2 = $planet2.replace(\"-\", \"\");\n    $planet1 = $planet1.replace(\" \", \"\");\n    $planet2 = $planet2.replace(\" \", \"\");\n    $planet1 = $planet1.replace(\".\", \"\");\n    $planet2 = $planet2.replace(\".\", \"\");\n    $planet1 = $planet1.\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpnx7qoymp.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = $planet1.toLowerCase();\n    $planet2 = $planet2.toLowerCase();\n    $planet1 = $planet1.replace(\" \", \"\");\n    $planet2 = $planet2.replace(\" \", \"\");\n    $planet1 = $planet1.replace(\".\", \"\");\n    $planet2 = $planet2.replace(\".\", \"\");\n    $planet1 = $planet1.replace(\"-\", \"\");\n    $planet2 = $planet2.replace(\"-\", \"\");\n    $planet1 = $planet1.replace(\" \", \"\");\n    $planet2 = $planet2.replace(\" \", \"\");\n    $planet1 = $planet1.replace(\".\", \"\");\n    $planet2 = $planet2.replace(\".\", \"\");\n    $planet1 = $planet1.replace(\"-\", \"\");\n    $planet2 = $planet2.replace(\"-\", \"\");\n    $planet1 = $planet1.replace(\" \", \"\");\n    $planet2 = $planet2.replace(\" \", \"\");\n    $planet1 = $planet1.replace(\".\", \"\");\n    $planet2 = $planet2.replace(\".\", \"\");\n    $planet1 = $planet1.replace(\"-\", \"\");\n    $planet2 = $planet2.replace(\"-\", \"\");\n    $planet1 = $planet1.replace(\" \", \"\");\n    $planet2 = $planet2.replace(\" \", \"\");\n    $planet1 = $planet1.replace(\".\", \"\");\n    $planet2 = $planet2.replace(\".\", \"\");\n    $planet1 = $planet1.replace(\"-\", \"\");\n    $planet2 = $planet2.replace(\"-\", \"\");\n    $planet1 = $planet1.replace(\" \", \"\");\n    $planet2 = $planet2.replace(\" \", \"\");\n    $planet1 = $planet1.replace(\".\", \"\");\n    $planet2 = $planet2.replace(\".\", \"\");\n    $planet1 = $planet1.\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpnx7qoymp.php on line 52\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    }\n    if ($planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\") {\n        $planets[] = $planet2;\n    }\n    if ($planet1 == \"uranus\" || $planet1 == \"neptune\") {\n        $planets[] = $planet1;\n    }\n    if ($planet2 == \"uranus\" || $planet2 == \"neptune\") {\n        $planets[] = $planet2;\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpogfg1gqn.php:48\nStack trace:\n#0 /tmp/tmpogfg1gqn.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpogfg1gqn.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 'Venus';\n    $planets_array['Venus'] = 'Earth';\n    $planets_array['Earth'] = 'Mars';\n    $planets_array['Mars'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn'] = 'Uranus';\n    $planets_array['Uranus'] = 'Neptune';\n    $planets_array['Neptune'] = 'Jupiter';\n    $planets_array['Jupiter'] = 'Saturn';\n    $planets_array['Saturn']\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nParse error: syntax error, unexpected token \"function\" in /tmp/tmpwvxejlkv.php on line 51\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\" || $planet1 == \"mars\" || $planet1 == \"jupiter\" || $planet1 == \"saturn\" || $planet1 == \"uranus\" || $planet1 == \"neptune\") {\n        $planets = array($planet1);\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\" || $planet2 == \"mars\" || $planet2 == \"jupiter\" || $planet2 == \"saturn\" || $planet2 == \"uranus\" || $planet2 == \"neptune\") {\n        $planets = array_merge($planets, array($planet2));\n    }\n    $planets = array_sort(array_unique($planets), 'DESC');\n    return $planets;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function array_sort() in /tmp/tmpl2ez5hne.php:28\nStack trace:\n#0 /tmp/tmpl2ez5hne.php(32): bf('jupiter', 'neptune')\n#1 /tmp/tmpl2ez5hne.php(36): candidate('Jupiter', 'Neptune')\n#2 /tmp/tmpl2ez5hne.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpl2ez5hne.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    if ($planet1 == \"mercury\" || $planet1 == \"venus\" || $planet1 == \"earth\") {\n        $planets[] = $planet1;\n    } else {\n        return $planets;\n    }\n    if ($planet2 == \"mercury\" || $planet2 == \"venus\" || $planet2 == \"earth\") {\n        $planets[] = $planet2;\n    } else {\n        return $planets;\n    }\n    $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\"));\n    $planets = array_merge($planets, array(\"mars\", \"jupiter\", \"saturn\"));\n    $planets = array_merge($planets, array(\"uranus\", \"neptune\"));\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293530,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9cqs1kh0.php:43\nStack trace:\n#0 /tmp/tmp9cqs1kh0.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp9cqs1kh0.php on line 43\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets_array = array();\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['Sun'] = 0;\n    $planets_array['Mercury'] = 0;\n    $planets_array['Venus'] = 0;\n    $planets_array['Earth'] = 0;\n    $planets_array['Mars'] = 0;\n    $planets_array['Jupiter'] = 0;\n    $planets_array['Saturn'] = 0;\n    $planets_array['Uranus'] = 0;\n    $planets_array['Neptune'] = 0;\n    $planets_array['\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nParse error: syntax error, unexpected string content \"\", expecting \"]\" in /tmp/tmppnh74cx2.php on line 56\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array();\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = strtoupper($planet1);\n    $planet2 = strtoupper($planet2);\n    $min = $planets[strpos($planets, $planet1)];\n    $max = $planets[strpos($planets, $planet2)];\n    $result = array();\n    for ($i = 0; $i < $planets.length; $i++) {\n        if (strpos($planets[$i], $min) > strpos($planets[$i], $max)) {\n            $result.push($planets[$i]);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293531,
      "stdout": "\nFatal error: Uncaught TypeError: strpos(): Argument #1 ($haystack) must be of type string, array given in /tmp/tmpteq4wh01.php:23\nStack trace:\n#0 /tmp/tmpteq4wh01.php(23): strpos(Array, 'JUPITER')\n#1 /tmp/tmpteq4wh01.php(35): bf('JUPITER', 'NEPTUNE')\n#2 /tmp/tmpteq4wh01.php(39): candidate('Jupiter', 'Neptune')\n#3 /tmp/tmpteq4wh01.php(48): test()\n#4 {main}\n  thrown in /tmp/tmpteq4wh01.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}