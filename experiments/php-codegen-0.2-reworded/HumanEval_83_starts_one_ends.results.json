{
  "name": "HumanEval_83_starts_one_ends",
  "language": "php",
  "prompt": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n",
  "tests": "function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count--;\n        }\n    }\n    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292961,
      "stdout": "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdyhy0c3v.php:26\nStack trace:\n#0 /tmp/tmpdyhy0c3v.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdyhy0c3v.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292961,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_z4_yp7.php:27\nStack trace:\n#0 /tmp/tmpw_z4_yp7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpw_z4_yp7.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 5;\n$count = starts_one_ends($n);\necho $count;\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppskfkn5b.php:27\nStack trace:\n#0 /tmp/tmppskfkn5b.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppskfkn5b.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = pow(10, $i);\n        $count += (int) pow(10, $n - $i - 1) * (int) pow(10, $i) + (int) pow(10, $i) * (int) pow(10, $n - $i - 1);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292961,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp53rjx48t.php:19\nStack trace:\n#0 /tmp/tmp53rjx48t.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp53rjx48t.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $num = $i;\n        $count += ($num % 10 == 1) ? 1 : 0;\n        $num /= 10;\n        $count += ($num % 10 == 1) ? 1 : 0;\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nDeprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmpzsoklwuz.php on line 10\n\nDeprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmpzsoklwuz.php on line 10\n\nDeprecated: Implicit conversion from float 0.2 to int loses precision in /tmp/tmpzsoklwuz.php on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsoklwuz.php:21\nStack trace:\n#0 /tmp/tmpzsoklwuz.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpzsoklwuz.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $result = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $result++;\n        }\n        if ($digit == 0) {\n            $result++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5lbmg8x.php:24\nStack trace:\n#0 /tmp/tmpw5lbmg8x.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpw5lbmg8x.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = strval($n);\n    $n = intval($n);\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n : 0;\n    $n = $n > 0 ? $n :\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected identifier \"candidate\", expecting \"(\" in /tmp/tmpfmijpuvn.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            continue;\n        }\n        $count += starts_one_ends($n - $i);\n        $count += starts_one_ends($i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmpsbfzoh03.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n    }\n    $count += $n % 10 == 1;\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8q87q8a2.php:22\nStack trace:\n#0 /tmp/tmp8q87q8a2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8q87q8a2.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i);\n        } else {\n            $count += starts_one_ends($i);\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmp2p7jvh8m.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292961,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_z4_yp7.php:27\nStack trace:\n#0 /tmp/tmpw_z4_yp7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpw_z4_yp7.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = intval($n);\n    if ($n < 1) {\n        return 0;\n    }\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += starts_one_ends($n - $i);\n        $count += ends_one_starts($i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmpgh2uvzol.php:12\nStack trace:\n#0 /tmp/tmpgh2uvzol.php(18): starts_one_ends(1)\n#1 /tmp/tmpgh2uvzol.php(22): candidate(1)\n#2 /tmp/tmpgh2uvzol.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpgh2uvzol.php on line 12\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 1) {\n            $count++;\n        }\n        if ($i % 2 == 0) {\n            $count++;\n        }\n        if ($i == 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmguv5_q1.php:25\nStack trace:\n#0 /tmp/tmpmguv5_q1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpmguv5_q1.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i);\n        }\n        if ($i % 2 == 1) {\n            $count += ends_one_starts($n - $i);\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmp9aug99y3.php:11\nStack trace:\n#0 /tmp/tmp9aug99y3.php(18): starts_one_ends(1)\n#1 /tmp/tmp9aug99y3.php(22): candidate(1)\n#2 /tmp/tmp9aug99y3.php(29): test()\n#3 {main}\n  thrown in /tmp/tmp9aug99y3.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = intval($n);\n    if ($n < 1) {\n        return 0;\n    }\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmp1a_5d26n.php on line 58\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 10;\n$count = starts_one_ends($n);\necho $count;\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp01i9asfh.php:28\nStack trace:\n#0 /tmp/tmp01i9asfh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp01i9asfh.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = str_pad($n, 2, 0);\n    $n = str_pad($n, 2, 1);\n    $n = str_pad($n, 2, 2);\n    $n = str_pad($n, 2, 3);\n    $n = str_pad($n, 2, 4);\n    $n = str_pad($n, 2, 5);\n    $n = str_pad($n, 2, 6);\n    $n = str_pad($n, 2, 7);\n    $n = str_pad($n, 2, 8);\n    $n = str_pad($n, 2, 9);\n    $n = str_pad($n, 2, 10);\n    $n = str_pad($n, 2, 11);\n    $n = str_pad($n, 2, 12);\n    $n = str_pad($n, 2, 13);\n    $n = str_pad($n, 2, 14);\n    $n = str_pad($n, 2, 15);\n    $n = str_pad($n, 2, 16);\n    $n = str_pad($n, 2, 17);\n    $n = str_pad($n, 2, 18);\n    $n = str_pad($n, 2, 19);\n    $n = str_pad($n, 2, 20);\n    $n = str_pad($n, 2, 21);\n    $n = str_pad($n, 2, 22);\n    $n = str_pad($n, 2, 23);\n    $n = str_pad($n, 2, 24);\n    $n = str_pad($n, 2, 25);\n    $n = str_pad($n, 2, 26);\n    $n = str_pad($n, 2, 27);\n    $n = str_pad($n, 2, 28);\n    $n = str_pad($n, 2, 29);\n    $n = str_pad($n, 2, 30);\n    $n = str_pad($n, 2, 31);\n    $n = str_pad($n, 2, 32);\n    $n = str_pad($n, 2, 33);\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmp99hzxj02.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = pow(10, $i);\n        $count += (int)floor($n / $digit) + (int)floor($n % $digit);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpawjlvx6d.php:19\nStack trace:\n#0 /tmp/tmpawjlvx6d.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpawjlvx6d.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = intval($n);\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxlsd6cgc.php:25\nStack trace:\n#0 /tmp/tmpxlsd6cgc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxlsd6cgc.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = intval($n);\n    if ($n < 1) {\n        return 0;\n    }\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += starts_one_ends($n - $i);\n        $count += ends_one_starts($i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmpgh2uvzol.php:12\nStack trace:\n#0 /tmp/tmpgh2uvzol.php(18): starts_one_ends(1)\n#1 /tmp/tmpgh2uvzol.php(22): candidate(1)\n#2 /tmp/tmpgh2uvzol.php(29): test()\n#3 {main}\n  thrown in /tmp/tmpgh2uvzol.php on line 12\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if (strlen($i) == $n) {\n            $count++;\n        }\n        if (strlen($i) == $n - 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanygg9f1.php:23\nStack trace:\n#0 /tmp/tmpanygg9f1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpanygg9f1.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 5;\n$count = starts_one_ends($n);\necho $count;\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8rbblhu.php:26\nStack trace:\n#0 /tmp/tmpu8rbblhu.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpu8rbblhu.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_13pzdvi.php:24\nStack trace:\n#0 /tmp/tmp_13pzdvi.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_13pzdvi.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8q2dmtg.php:24\nStack trace:\n#0 /tmp/tmpu8q2dmtg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu8q2dmtg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n    }\n    $count += $n % 10 == 1;\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8q87q8a2.php:22\nStack trace:\n#0 /tmp/tmp8q87q8a2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8q87q8a2.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $result = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $result++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoabapn5j.php:21\nStack trace:\n#0 /tmp/tmpoabapn5j.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpoabapn5j.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8q2dmtg.php:24\nStack trace:\n#0 /tmp/tmpu8q2dmtg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu8q2dmtg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = intval($n);\n    if ($n < 1) {\n        return 0;\n    }\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($i > 1 && $digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpviczniq3.php:28\nStack trace:\n#0 /tmp/tmpviczniq3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpviczniq3.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    $n -= 1;\n    $n_digits = floor($n / 10);\n    $n_remainder = $n % 10;\n    $n_starts = 0;\n    $n_ends = 0;\n    for ($i = 0; $i < $n_digits; $i++) {\n        $n_starts += starts_one_ends($n - $i * 10);\n        $n_ends += ends_one_starts($n - $i * 10);\n    }\n    $n_starts += starts_one_ends($n_remainder);\n    $n_ends += ends_one_starts($n_remainder);\n    return $n_starts + $n_ends;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmp2qe1elk2.php:18\nStack trace:\n#0 /tmp/tmp2qe1elk2.php(23): starts_one_ends(0)\n#1 /tmp/tmp2qe1elk2.php(27): candidate(1)\n#2 /tmp/tmp2qe1elk2.php(34): test()\n#3 {main}\n  thrown in /tmp/tmp2qe1elk2.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += starts_one_ends($n - $i);\n        $count += ends_one_starts($i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmpgqb0wlqj.php:14\nStack trace:\n#0 /tmp/tmpgqb0wlqj.php(20): starts_one_ends(2)\n#1 /tmp/tmpgqb0wlqj.php(25): candidate(2)\n#2 /tmp/tmpgqb0wlqj.php(31): test()\n#3 {main}\n  thrown in /tmp/tmpgqb0wlqj.php on line 14\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmplvnjgw5c.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count++;\n        }\n        if ($i % 3 == 0) {\n            $count++;\n        }\n        if ($i % 5 == 0) {\n            $count++;\n        }\n        if ($i % 7 == 0) {\n            $count++;\n        }\n        if ($i % 11 == 0) {\n            $count++;\n        }\n        if ($i % 13 == 0) {\n            $count++;\n        }\n        if ($i % 17 == 0) {\n            $count++;\n        }\n        if ($i % 19 == 0) {\n            $count++;\n        }\n        if ($i % 23 == 0) {\n            $count++;\n        }\n        if ($i % 29 == 0) {\n            $count++;\n        }\n        if ($i % 31 == 0) {\n            $count++;\n        }\n        if ($i % 37 == 0) {\n            $count++;\n        }\n        if ($i % 41 == 0) {\n            $count++;\n        }\n        if ($i % 43 == 0) {\n            $count++;\n        }\n        if ($i % 47 == 0) {\n            $count++;\n        }\n        if ($i % 53 == 0) {\n            $count++;\n        }\n        if ($i % 59 == 0) {\n            $count++;\n        }\n        if ($i % 61 == 0) {\n            $count++;\n        }\n        if ($i % 67 == 0) {\n            $count++;\n        }\n        if ($i % 71 == 0) {\n            $count++;\n        }\n        if ($i % 73 == 0) {\n            $count++;\n        }\n        if ($i % 79 == 0) {\n            $count++;\n        }\n        if ($i % 83 == 0) {\n            $count++;\n        }\n        if ($i % 89 == 0) {\n            $count++;\n        }\n        if ($i % 97 == 0) {\n            $count++;\n        }\n        if ($i % 101 == 0) {\n            \nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: Unclosed '{' on line 82 in /tmp/tmps4v9eudx.php on line 96\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += starts_one_ends($n - $i);\n        $count += starts_one_ends($i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmpsf5d05vs.php on line 13\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            continue;\n        }\n        $count += starts_one_ends($n - $i);\n        $count += starts_one_ends($i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmpsbfzoh03.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8q2dmtg.php:24\nStack trace:\n#0 /tmp/tmpu8q2dmtg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu8q2dmtg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n    }\n    $count += $n % 10 == 1 ? 1 : 0;\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj7en7orq.php:22\nStack trace:\n#0 /tmp/tmpj7en7orq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpj7en7orq.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = pow(10, $i);\n        $count += (int)floor(pow(10, $n - $i - 1) / $digit) + (int)floor(pow(10, $i) / $digit);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppqd6adil.php:19\nStack trace:\n#0 /tmp/tmppqd6adil.php(26): test()\n#1 {main}\n  thrown in /tmp/tmppqd6adil.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = intval($n);\n    if ($n < 1) {\n        return 0;\n    }\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = pow(10, $i);\n        $count += (intval($n / $digit) + 1);\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp47nm4e3m.php:22\nStack trace:\n#0 /tmp/tmp47nm4e3m.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp47nm4e3m.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i);\n        } else {\n            $count += starts_one_ends($i);\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmp2p7jvh8m.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            continue;\n        }\n        $count += starts_one_ends($n - $i);\n        $count += ends_one_starts($i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmp4m12mpfl.php:11\nStack trace:\n#0 /tmp/tmp4m12mpfl.php(17): starts_one_ends(1)\n#1 /tmp/tmp4m12mpfl.php(21): candidate(1)\n#2 /tmp/tmp4m12mpfl.php(28): test()\n#3 {main}\n  thrown in /tmp/tmp4m12mpfl.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8q2dmtg.php:24\nStack trace:\n#0 /tmp/tmpu8q2dmtg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu8q2dmtg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsxdhf915.php:27\nStack trace:\n#0 /tmp/tmpsxdhf915.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsxdhf915.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for($i = 1; $i <= $n; $i++) {\n        if($i % 2 == 0) {\n            $count++;\n        }\n        if($i % 3 == 0) {\n            $count++;\n        }\n        if($i % 5 == 0) {\n            $count++;\n        }\n        if($i % 7 == 0) {\n            $count++;\n        }\n        if($i % 11 == 0) {\n            $count++;\n        }\n        if($i % 13 == 0) {\n            $count++;\n        }\n        if($i % 17 == 0) {\n            $count++;\n        }\n        if($i % 19 == 0) {\n            $count++;\n        }\n        if($i % 23 == 0) {\n            $count++;\n        }\n        if($i % 29 == 0) {\n            $count++;\n        }\n        if($i % 31 == 0) {\n            $count++;\n        }\n        if($i % 37 == 0) {\n            $count++;\n        }\n        if($i % 41 == 0) {\n            $count++;\n        }\n        if($i % 43 == 0) {\n            $count++;\n        }\n        if($i % 47 == 0) {\n            $count++;\n        }\n        if($i % 53 == 0) {\n            $count++;\n        }\n        if($i % 59 == 0) {\n            $count++;\n        }\n        if($i % 61 == 0) {\n            $count++;\n        }\n        if($i % 67 == 0) {\n            $count++;\n        }\n        if($i % 71 == 0) {\n            $count++;\n        }\n        if($i % 73 == 0) {\n            $count++;\n        }\n        if($i % 79 == 0) {\n            $count++;\n        }\n        if($i % 83 == 0) {\n            $count++;\n        }\n        if($i % 89 == 0) {\n            $count++;\n        }\n        if($i % 97 == 0) {\n            $count++;\n        }\n        if($i % 101 == 0) {\n            \nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: Unclosed '{' on line 82 in /tmp/tmpsuanj1kq.php on line 96\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n    }\n    $count += $n % 10 == 1;\n    return $count;\n}\n\n$n = 5;\n$count = starts_one_ends($n);\necho $count;\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfyzn100o.php:25\nStack trace:\n#0 /tmp/tmpfyzn100o.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfyzn100o.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n    }\n    $count += $n % 10 == 1 ? 1 : 0;\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj7en7orq.php:22\nStack trace:\n#0 /tmp/tmpj7en7orq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpj7en7orq.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count--;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppasqwjkg.php:24\nStack trace:\n#0 /tmp/tmppasqwjkg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppasqwjkg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8q2dmtg.php:24\nStack trace:\n#0 /tmp/tmpu8q2dmtg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu8q2dmtg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            continue;\n        }\n        $count += starts_one_ends($n - $i);\n        $count += starts_one_ends($i);\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmprer0x6br.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqghsxqzs.php:25\nStack trace:\n#0 /tmp/tmpqghsxqzs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqghsxqzs.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 1) {\n            $count += starts_one_ends($n - $i);\n        }\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i);\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprg5edvr8.php:22\nStack trace:\n#0 /tmp/tmprg5edvr8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmprg5edvr8.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i);\n        } else {\n            $count += starts_one_ends($i);\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmp2p7jvh8m.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $result = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $num = $i;\n        while ($num > 0) {\n            $num = $num - 1;\n            $digit = $num % 10;\n            if ($digit == 1) {\n                $result++;\n                break;\n            }\n        }\n        $num = $i;\n        while ($num > 0) {\n            $num = $num - 1;\n            $digit = $num % 10;\n            if ($digit == 1) {\n                $result++;\n                break;\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe05jqhjs.php:34\nStack trace:\n#0 /tmp/tmpe05jqhjs.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpe05jqhjs.php on line 34\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = pow(10, $i);\n        $count += ($i % 2 == 0) ? $digit : $digit - 1;\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplupkim_m.php:19\nStack trace:\n#0 /tmp/tmplupkim_m.php(26): test()\n#1 {main}\n  thrown in /tmp/tmplupkim_m.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i);\n        } else {\n            $count += starts_one_ends($i);\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmp2p7jvh8m.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $result = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $result++;\n        }\n        if ($i > 0 && $i % 10 == 0) {\n            $result++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvrvlx24.php:23\nStack trace:\n#0 /tmp/tmpdvrvlx24.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpdvrvlx24.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            continue;\n        }\n        $count += starts_one_ends($n - $i);\n        $count += ends_one_starts($i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmp4m12mpfl.php:11\nStack trace:\n#0 /tmp/tmp4m12mpfl.php(17): starts_one_ends(1)\n#1 /tmp/tmp4m12mpfl.php(21): candidate(1)\n#2 /tmp/tmp4m12mpfl.php(28): test()\n#3 {main}\n  thrown in /tmp/tmp4m12mpfl.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zwxrlvt.php:23\nStack trace:\n#0 /tmp/tmp2zwxrlvt.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2zwxrlvt.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $result = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $result++;\n        }\n        if ($i > 1 && $i % 10 == 0) {\n            $result++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo_6fzjq4.php:24\nStack trace:\n#0 /tmp/tmpo_6fzjq4.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpo_6fzjq4.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $result = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = pow(10, $i);\n        $result += (int) pow(10, $n - $i) * (int) pow(10, $i) - 1;\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3k3hma77.php:18\nStack trace:\n#0 /tmp/tmp3k3hma77.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp3k3hma77.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = pow(10, $i);\n        $count += ($i % 2 == 0) ? $digit : $digit - 1;\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplupkim_m.php:19\nStack trace:\n#0 /tmp/tmplupkim_m.php(26): test()\n#1 {main}\n  thrown in /tmp/tmplupkim_m.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            continue;\n        }\n        $count += starts_one_ends($n - $i);\n        $count += starts_one_ends($i);\n    }\n    return $count;\n}\n\n$n = 10;\necho starts_one_ends($n);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmpbtpz1t5q.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $num = $i;\n        $num = $num % 10;\n        if ($num == 1) {\n            $count++;\n        }\n        $num = $i;\n        $num = $num % 10;\n        if ($num == 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzfvm8obu.php:28\nStack trace:\n#0 /tmp/tmpzfvm8obu.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzfvm8obu.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8q2dmtg.php:24\nStack trace:\n#0 /tmp/tmpu8q2dmtg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu8q2dmtg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $result = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $result++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoabapn5j.php:21\nStack trace:\n#0 /tmp/tmpoabapn5j.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpoabapn5j.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3tajwoyv.php:26\nStack trace:\n#0 /tmp/tmp3tajwoyv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3tajwoyv.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    $n -= 1;\n    $n_digits = floor($n / 10);\n    $n_remainder = $n % 10;\n    $n_starts_one = 0;\n    $n_ends_one = 0;\n    for ($i = 0; $i < $n_digits; $i++) {\n        $n_starts_one += starts_one_ends($n - $i);\n        $n_ends_one += ends_one_starts($n - $i);\n    }\n    $n_starts_one += starts_one_ends($n_remainder);\n    $n_ends_one += ends_one_starts($n_remainder);\n    return $n_starts_one + $n_ends_one;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmpj6uje_9b.php:18\nStack trace:\n#0 /tmp/tmpj6uje_9b.php(23): starts_one_ends(0)\n#1 /tmp/tmpj6uje_9b.php(27): candidate(1)\n#2 /tmp/tmpj6uje_9b.php(34): test()\n#3 {main}\n  thrown in /tmp/tmpj6uje_9b.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd99g_93_.php:26\nStack trace:\n#0 /tmp/tmpd99g_93_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpd99g_93_.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = str_pad($n, 2, 0);\n    $n = $n.substr(0, $n.length - 1);\n    $n = $n.split('');\n    $n.sort();\n    $n = $n.join('');\n    $n = $n.substr(0, $n.length - 1);\n    $n = $n.split('');\n    $n.sort();\n    $n = $n.join('');\n    $n = $n.substr(0, $n.length - 1);\n    $n = $n.split('');\n    $n.sort();\n    $n = $n.join('');\n    $n = $n.substr(0, $n.length - 1);\n    $n = $n.split('');\n    $n.sort();\n    $n = $n.join('');\n    $n = $n.substr(0, $n.length - 1);\n    $n = $n.split('');\n    $n.sort();\n    $n = $n.join('');\n    $n = $n.substr(0, $n.length - 1);\n    $n = $n.split('');\n    $n.sort();\n    $n = $n.join('');\n    $n = $n.substr(0, $n.length - 1);\n    $n = $n.split('');\n    $n.sort();\n    $n = $n.join('');\n    $n = $n.substr(0, $n.length - 1);\n    $n = $n.split('');\n    $n.sort();\n    $n = $n.join('');\n    $n = $n.substr(0, $n.length - 1);\n    $n = $n.split('');\n    $n.sort();\n    $n = $n.join('');\n    $n = $n.substr(0, $n.length - 1);\n    $n = $n.split('');\n    $n.sort();\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: Unclosed '{' on line 4 in /tmp/tmpvkw1irog.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            continue;\n        }\n        $count += starts_one_ends($n - $i);\n        $count += ends_one_starts($i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmp4m12mpfl.php:11\nStack trace:\n#0 /tmp/tmp4m12mpfl.php(17): starts_one_ends(1)\n#1 /tmp/tmp4m12mpfl.php(21): candidate(1)\n#2 /tmp/tmp4m12mpfl.php(28): test()\n#3 {main}\n  thrown in /tmp/tmp4m12mpfl.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i - 1);\n        }\n        if ($i % 2 == 1) {\n            $count += ends_one_starts($n - $i - 1);\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbg_avr7.php:22\nStack trace:\n#0 /tmp/tmphbg_avr7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphbg_avr7.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i);\n        } else {\n            $count += starts_one_ends($i);\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmp2p7jvh8m.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($i > 1 && $i % 10 == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjibesn7k.php:24\nStack trace:\n#0 /tmp/tmpjibesn7k.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjibesn7k.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i);\n        } else {\n            $count += starts_one_ends($i);\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmp2p7jvh8m.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = pow(10, $i);\n        $count += ($i % 2 == 0) ? $digit : $digit * 10;\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp39hdzfba.php:19\nStack trace:\n#0 /tmp/tmp39hdzfba.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp39hdzfba.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $result = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $result++;\n        }\n        if ($digit == 0) {\n            $result++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5lbmg8x.php:24\nStack trace:\n#0 /tmp/tmpw5lbmg8x.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpw5lbmg8x.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = intval($n);\n    if ($n < 1) {\n        return 0;\n    }\n    $n = $n - 1;\n    $n = $n / 9;\n    $n = $n + 1;\n    $n = $n * 9;\n    $n = $n + 1;\n    $n = $n - 1;\n    $n = $n / 9;\n    $n = $n + 1;\n    $n = $n * 9;\n    $n = $n - 1;\n    $n = $n / 9;\n    $n = $n + 1;\n    $n = $n * 9;\n    $n = $n - 1;\n    $n = $n / 9;\n    $n = $n + 1;\n    $n = $n * 9;\n    $n = $n - 1;\n    $n = $n / 9;\n    $n = $n + 1;\n    $n = $n * 9;\n    $n = $n - 1;\n    $n = $n / 9;\n    $n = $n + 1;\n    $n = $n * 9;\n    $n = $n - 1;\n    $n = $n / 9;\n    $n = $n + 1;\n    $n = $n * 9;\n    $n = $n - 1;\n    $n = $n / 9;\n    $n = $n + 1;\n    $n = $n * 9;\n    $n = $n - 1;\n    $n = $n / 9;\n    $n = $n + 1;\n    $n = $n * 9;\n    $n = $n - 1;\n    $n = $n / 9;\n    $n = $n + 1;\n    $n = $n * 9;\n    $n = $n - 1;\n    $n = $n / 9;\n    $n = $n + 1;\n    $n = $n * 9;\n    $n = $n - 1;\n    $n = $n / 9;\n    $n = $n + 1;\n    $n = $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmpgl39e_o6.php on line 58\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n    }\n    $count += $n % 10 == 1;\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8q87q8a2.php:22\nStack trace:\n#0 /tmp/tmp8q87q8a2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8q87q8a2.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    if ($n < 1) {\n        return 0;\n    }\n\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            continue;\n        }\n\n        $count += starts_one_ends($n - $i);\n        $count += starts_one_ends($i);\n    }\n\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmp5esaysyn.php on line 15\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    $nums = range(0, $n);\n    $count = 0;\n    foreach ($nums as $i) {\n        if ($i == 1) {\n            $count++;\n        }\n        if ($i == $n - 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd9rjylg2.php:26\nStack trace:\n#0 /tmp/tmpd9rjylg2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd9rjylg2.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if (strlen($i) == $n) {\n            $count++;\n        }\n        if (strlen($i) == $n - 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 5;\n$count = starts_one_ends($n);\necho $count;\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7s5t_vu0.php:26\nStack trace:\n#0 /tmp/tmp7s5t_vu0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp7s5t_vu0.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n    }\n    $count += $n % 10 == 1;\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8q87q8a2.php:22\nStack trace:\n#0 /tmp/tmp8q87q8a2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8q87q8a2.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $count += (int) pow(10, $i) * (int) pow(10, $n - $i - 1);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_0xxqkp5.php:18\nStack trace:\n#0 /tmp/tmp_0xxqkp5.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_0xxqkp5.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = intval($n);\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxlsd6cgc.php:25\nStack trace:\n#0 /tmp/tmpxlsd6cgc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxlsd6cgc.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if (strlen($i) == $n) {\n            $count++;\n        }\n        if (strlen($i) == $n - 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpojn7ct1a.php:25\nStack trace:\n#0 /tmp/tmpojn7ct1a.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpojn7ct1a.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += $i;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmd7v1axb.php:20\nStack trace:\n#0 /tmp/tmpmd7v1axb.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmd7v1axb.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $result = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $result++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoabapn5j.php:21\nStack trace:\n#0 /tmp/tmpoabapn5j.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpoabapn5j.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 10;\n$count = starts_one_ends($n);\necho $count;\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpif7_pdkd.php:27\nStack trace:\n#0 /tmp/tmpif7_pdkd.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpif7_pdkd.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i);\n        } else {\n            $count += starts_one_ends($i);\n        }\n    }\n    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmpw5f419lc.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsxdhf915.php:27\nStack trace:\n#0 /tmp/tmpsxdhf915.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsxdhf915.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i);\n        }\n        if ($i % 2 == 1) {\n            $count += ends_one_starts($i);\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmplba7nxxk.php:11\nStack trace:\n#0 /tmp/tmplba7nxxk.php(18): starts_one_ends(1)\n#1 /tmp/tmplba7nxxk.php(22): candidate(1)\n#2 /tmp/tmplba7nxxk.php(29): test()\n#3 {main}\n  thrown in /tmp/tmplba7nxxk.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i);\n        } else {\n            $count += starts_one_ends($i);\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmp2p7jvh8m.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmplvnjgw5c.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = intval($n);\n    if ($n < 1) {\n        return 0;\n    }\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += starts_one_ends($n - $i);\n        $count += ends_one_starts($i);\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmp85o6dic5.php:12\nStack trace:\n#0 /tmp/tmp85o6dic5.php(17): starts_one_ends(1)\n#1 /tmp/tmp85o6dic5.php(21): candidate(1)\n#2 /tmp/tmp85o6dic5.php(28): test()\n#3 {main}\n  thrown in /tmp/tmp85o6dic5.php on line 12\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            continue;\n        }\n        $count += starts_one_ends($n - $i);\n        $count += starts_one_ends($i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmpsbfzoh03.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 2;\n    }\n    if ($n == 4) {\n        return 2;\n    }\n    if ($n == 5) {\n        return 2;\n    }\n    if ($n == 6) {\n        return 2;\n    }\n    if ($n == 7) {\n        return 2;\n    }\n    if ($n == 8) {\n        return 2;\n    }\n    if ($n == 9) {\n        return 2;\n    }\n    if ($n == 10) {\n        return 2;\n    }\n    if ($n == 11) {\n        return 2;\n    }\n    if ($n == 12) {\n        return 2;\n    }\n    if ($n == 13) {\n        return 2;\n    }\n    if ($n == 14) {\n        return 2;\n    }\n    if ($n == 15) {\n        return 2;\n    }\n    if ($n == 16) {\n        return 2;\n    }\n    if ($n == 17) {\n        return 2;\n    }\n    if ($n == 18) {\n        return 2;\n    }\n    if ($n == 19) {\n        return 2;\n    }\n    if ($n == 20) {\n        return 2;\n    }\n    if ($n == 21) {\n        return 2;\n    }\n    if ($n == 22) {\n        return 2;\n    }\n    if ($n == 23) {\n        return 2;\n    }\n    if ($n == 24) {\n        return 2;\n    }\n    if ($n == 25) {\n        return 2;\n    }\n    if ($n == 26) {\n        return 2;\n    }\n    if ($n == 27) {\n        return 2;\n    }\n    if ($n == 28) {\n        return 2;\n    }\n    if ($n == 29) {\n        return 2;\n    }\n    if\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting \"(\" in /tmp/tmpwdiqwkmi.php on line 96\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $result = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $result += starts_one_ends($n - $i);\n        } else {\n            $result += starts_one_ends($i);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmpzp0xbjg0.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $result = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $result += starts_one_ends($n - $i);\n        } else {\n            $result += starts_one_ends($i);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmpzp0xbjg0.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            continue;\n        }\n        $count += starts_one_ends($n - $i);\n        $count += ends_one_starts($i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmp4m12mpfl.php:11\nStack trace:\n#0 /tmp/tmp4m12mpfl.php(17): starts_one_ends(1)\n#1 /tmp/tmp4m12mpfl.php(21): candidate(1)\n#2 /tmp/tmp4m12mpfl.php(28): test()\n#3 {main}\n  thrown in /tmp/tmp4m12mpfl.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 10;\n$count = starts_one_ends($n);\necho $count;\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp05w62o8s.php:26\nStack trace:\n#0 /tmp/tmp05w62o8s.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp05w62o8s.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $count += ($i % 2 == 0) ? 1 : 0;\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32kzmp2g.php:18\nStack trace:\n#0 /tmp/tmp32kzmp2g.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp32kzmp2g.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8q2dmtg.php:24\nStack trace:\n#0 /tmp/tmpu8q2dmtg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu8q2dmtg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 5;\n$count = starts_one_ends($n);\necho $count;\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8rbblhu.php:26\nStack trace:\n#0 /tmp/tmpu8rbblhu.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpu8rbblhu.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            continue;\n        }\n        $count += starts_one_ends($n - $i);\n        $count += ends_one_starts($i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmp4m12mpfl.php:11\nStack trace:\n#0 /tmp/tmp4m12mpfl.php(17): starts_one_ends(1)\n#1 /tmp/tmp4m12mpfl.php(21): candidate(1)\n#2 /tmp/tmp4m12mpfl.php(28): test()\n#3 {main}\n  thrown in /tmp/tmp4m12mpfl.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqghsxqzs.php:25\nStack trace:\n#0 /tmp/tmpqghsxqzs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqghsxqzs.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $num = $i;\n        while ($num > 0) {\n            $num = $num - 1;\n            $count++;\n        }\n        $num = $i;\n        while ($num > 0) {\n            $num = $num - 1;\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf94oh30m.php:26\nStack trace:\n#0 /tmp/tmpf94oh30m.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpf94oh30m.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            continue;\n        }\n        $count += starts_one_ends($n - $i);\n        $count += ends_one_starts($i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmp4m12mpfl.php:11\nStack trace:\n#0 /tmp/tmp4m12mpfl.php(17): starts_one_ends(1)\n#1 /tmp/tmp4m12mpfl.php(21): candidate(1)\n#2 /tmp/tmp4m12mpfl.php(28): test()\n#3 {main}\n  thrown in /tmp/tmp4m12mpfl.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count++;\n        }\n        if ($i % 3 == 0) {\n            $count++;\n        }\n        if ($i % 5 == 0) {\n            $count++;\n        }\n        if ($i % 7 == 0) {\n            $count++;\n        }\n        if ($i % 11 == 0) {\n            $count++;\n        }\n        if ($i % 13 == 0) {\n            $count++;\n        }\n        if ($i % 17 == 0) {\n            $count++;\n        }\n        if ($i % 19 == 0) {\n            $count++;\n        }\n        if ($i % 23 == 0) {\n            $count++;\n        }\n        if ($i % 29 == 0) {\n            $count++;\n        }\n        if ($i % 31 == 0) {\n            $count++;\n        }\n        if ($i % 37 == 0) {\n            $count++;\n        }\n        if ($i % 41 == 0) {\n            $count++;\n        }\n        if ($i % 43 == 0) {\n            $count++;\n        }\n        if ($i % 47 == 0) {\n            $count++;\n        }\n        if ($i % 53 == 0) {\n            $count++;\n        }\n        if ($i % 59 == 0) {\n            $count++;\n        }\n        if ($i % 61 == 0) {\n            $count++;\n        }\n        if ($i % 67 == 0) {\n            $count++;\n        }\n        if ($i % 71 == 0) {\n            $count++;\n        }\n        if ($i % 73 == 0) {\n            $count++;\n        }\n        if ($i % 79 == 0) {\n            $count++;\n        }\n        if ($i % 83 == 0) {\n            $count++;\n        }\n        if ($i % 89 == 0) {\n            $count++;\n        }\n        if ($i % 97 == 0) {\n            $count++;\n        }\n        if ($i % 101 == 0) {\n            \nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: Unclosed '{' on line 82 in /tmp/tmps4v9eudx.php on line 96\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 10;\n$count = starts_one_ends($n);\necho $count;\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp01i9asfh.php:28\nStack trace:\n#0 /tmp/tmp01i9asfh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp01i9asfh.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i);\n        } else {\n            $count += starts_one_ends($i);\n        }\n    }\n    return $count;\n}\n\n$n = 10;\necho starts_one_ends($n);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmpo8kv7mzz.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += (int) pow(10, $n - 1) + (int) pow(10, $n - 1) - 1;\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx2ngh26x.php:18\nStack trace:\n#0 /tmp/tmpx2ngh26x.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpx2ngh26x.php on line 18\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = intval($n);\n    if ($n < 1) {\n        return 0;\n    }\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmyv2h7fr.php:28\nStack trace:\n#0 /tmp/tmpmyv2h7fr.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmyv2h7fr.php on line 28\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8q2dmtg.php:24\nStack trace:\n#0 /tmp/tmpu8q2dmtg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu8q2dmtg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($i == 0 || $i == $n - 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnittq9ju.php:24\nStack trace:\n#0 /tmp/tmpnittq9ju.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpnittq9ju.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if (strlen($i) == $n) {\n            $count++;\n        }\n        if (strlen($i) == $n - 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanygg9f1.php:23\nStack trace:\n#0 /tmp/tmpanygg9f1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpanygg9f1.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 10;\n$count = starts_one_ends($n);\necho $count;\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplm52hoea.php:26\nStack trace:\n#0 /tmp/tmplm52hoea.php(32): test()\n#1 {main}\n  thrown in /tmp/tmplm52hoea.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += (int) pow(10, $n - 1) + (int) pow(10, $n - 1) - 1;\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkki6e74h.php:21\nStack trace:\n#0 /tmp/tmpkki6e74h.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpkki6e74h.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i);\n        }\n        if ($i % 2 == 1) {\n            $count += ends_one_starts($i);\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmplba7nxxk.php:11\nStack trace:\n#0 /tmp/tmplba7nxxk.php(18): starts_one_ends(1)\n#1 /tmp/tmplba7nxxk.php(22): candidate(1)\n#2 /tmp/tmplba7nxxk.php(29): test()\n#3 {main}\n  thrown in /tmp/tmplba7nxxk.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n        if ($i % 10 == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt68tbbej.php:26\nStack trace:\n#0 /tmp/tmpt68tbbej.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt68tbbej.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = intval($n);\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($i > 1 && $i % 2 == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6pcdj3li.php:25\nStack trace:\n#0 /tmp/tmp6pcdj3li.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6pcdj3li.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $result = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $result += $i;\n        } else {\n            $result += $i - 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_7lkqdw.php:21\nStack trace:\n#0 /tmp/tmp5_7lkqdw.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5_7lkqdw.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 1) {\n            $count++;\n        }\n        if ($i % 2 == 0) {\n            $count++;\n        }\n        if ($i == 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmguv5_q1.php:25\nStack trace:\n#0 /tmp/tmpmguv5_q1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpmguv5_q1.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8q2dmtg.php:24\nStack trace:\n#0 /tmp/tmpu8q2dmtg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu8q2dmtg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 1) {\n            $count++;\n        }\n        if ($i % 2 == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsgmld1gw.php:23\nStack trace:\n#0 /tmp/tmpsgmld1gw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsgmld1gw.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count++;\n        }\n        if ($i % 2 == 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4q4abzs_.php:23\nStack trace:\n#0 /tmp/tmp4q4abzs_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4q4abzs_.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8q2dmtg.php:24\nStack trace:\n#0 /tmp/tmpu8q2dmtg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu8q2dmtg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmplvnjgw5c.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8q2dmtg.php:24\nStack trace:\n#0 /tmp/tmpu8q2dmtg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu8q2dmtg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            continue;\n        }\n        $count += starts_one_ends($n - $i);\n        $count += ends_one_starts($i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmp4m12mpfl.php:11\nStack trace:\n#0 /tmp/tmp4m12mpfl.php(17): starts_one_ends(1)\n#1 /tmp/tmp4m12mpfl.php(21): candidate(1)\n#2 /tmp/tmp4m12mpfl.php(28): test()\n#3 {main}\n  thrown in /tmp/tmp4m12mpfl.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $count += (int) pow(10, $i) + 1;\n    }\n    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "11116\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5zp1i1f.php:19\nStack trace:\n#0 /tmp/tmp_5zp1i1f.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_5zp1i1f.php on line 19\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += (int) pow(10, $n - 1) + (int) pow(10, $n - 1) - 1;\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpclkgwmy1.php:20\nStack trace:\n#0 /tmp/tmpclkgwmy1.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpclkgwmy1.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i);\n        }\n        if ($i % 2 == 1) {\n            $count += ends_one_starts($i);\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmplba7nxxk.php:11\nStack trace:\n#0 /tmp/tmplba7nxxk.php(18): starts_one_ends(1)\n#1 /tmp/tmplba7nxxk.php(22): candidate(1)\n#2 /tmp/tmplba7nxxk.php(29): test()\n#3 {main}\n  thrown in /tmp/tmplba7nxxk.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    if ($n < 1) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 1;\n    }\n    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkcw09brw.php:20\nStack trace:\n#0 /tmp/tmpkcw09brw.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkcw09brw.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd99g_93_.php:26\nStack trace:\n#0 /tmp/tmpd99g_93_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpd99g_93_.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8q2dmtg.php:24\nStack trace:\n#0 /tmp/tmpu8q2dmtg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu8q2dmtg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $n = $n % 10;\n    $n = $n + 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmp8fmztvlf.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $result = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 0) {\n            $result++;\n        } else if ($digit == 1) {\n            $result += 2;\n        }\n    }\n    return $result;\n}\n\n$n = 1000000;\n$result = starts_one_ends($n);\necho $result;\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "300000\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpethvf8d3.php:26\nStack trace:\n#0 /tmp/tmpethvf8d3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpethvf8d3.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplv3uot8t.php:27\nStack trace:\n#0 /tmp/tmplv3uot8t.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplv3uot8t.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplv3uot8t.php:27\nStack trace:\n#0 /tmp/tmplv3uot8t.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplv3uot8t.php on line 27\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8q2dmtg.php:24\nStack trace:\n#0 /tmp/tmpu8q2dmtg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu8q2dmtg.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i - 1);\n        }\n        $count += starts_one_ends($i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf79i0rjj.php:20\nStack trace:\n#0 /tmp/tmpf79i0rjj.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpf79i0rjj.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($i > 1 && $digit == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr3xt663.php:26\nStack trace:\n#0 /tmp/tmpzr3xt663.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpzr3xt663.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $n = $n * 10;\n    $n = $n - 1;\n    $n = $n / 10;\n    $n = $n + 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmplvnjgw5c.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfc0x71aa.php:26\nStack trace:\n#0 /tmp/tmpfc0x71aa.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfc0x71aa.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i);\n        }\n        $count += starts_one_ends($i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmp5gd8sswl.php on line 8\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $n = $n - 1;\n    $\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nParse error: syntax error, unexpected token \"function\", expecting variable or \"{\" or \"$\" in /tmp/tmppu0eu76s.php on line 57\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($digit == 0) {\n            $count--;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjml7v9zj.php:23\nStack trace:\n#0 /tmp/tmpjml7v9zj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjml7v9zj.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($i == 0 || $i == $n - 1) {\n            $count++;\n        }\n        $count += starts_one_ends($n - $i - 1);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6dgb78v.php:21\nStack trace:\n#0 /tmp/tmpa6dgb78v.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpa6dgb78v.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = intval($n);\n    if ($n < 1) {\n        return 0;\n    }\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = pow(10, $i);\n        $count += $digit * pow(10, $n - $i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmcorqaow.php:23\nStack trace:\n#0 /tmp/tmpmcorqaow.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmcorqaow.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n        if ($i > 1 && $i % 10 == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpym65lov1.php:26\nStack trace:\n#0 /tmp/tmpym65lov1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpym65lov1.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            continue;\n        }\n        $count += starts_one_ends($n - $i);\n        $count += ends_one_starts($i);\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function ends_one_starts() in /tmp/tmp4m12mpfl.php:11\nStack trace:\n#0 /tmp/tmp4m12mpfl.php(17): starts_one_ends(1)\n#1 /tmp/tmp4m12mpfl.php(21): candidate(1)\n#2 /tmp/tmp4m12mpfl.php(28): test()\n#3 {main}\n  thrown in /tmp/tmp4m12mpfl.php on line 11\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $count += starts_one_ends($n - $i);\n        } else {\n            $count += starts_one_ends($i);\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /tmp/tmp2p7jvh8m.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $n = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $digit = $i % 10;\n        if ($digit == 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj103ewvd.php:21\nStack trace:\n#0 /tmp/tmpj103ewvd.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpj103ewvd.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $num = $i;\n        if ($num == 1) {\n            $count++;\n        }\n        if ($num > 0) {\n            $num = $num % 10;\n            if ($num == 1) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnypbf84b.php:26\nStack trace:\n#0 /tmp/tmpnypbf84b.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnypbf84b.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if (strlen($i) == $n) {\n            $count++;\n        }\n        if (strlen($i) == $n - 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanygg9f1.php:23\nStack trace:\n#0 /tmp/tmpanygg9f1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpanygg9f1.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 10 == 1) {\n            $count++;\n        }\n        if ($i % 10 == 9) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292962,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtj4ndu0.php:23\nStack trace:\n#0 /tmp/tmpjtj4ndu0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjtj4ndu0.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}