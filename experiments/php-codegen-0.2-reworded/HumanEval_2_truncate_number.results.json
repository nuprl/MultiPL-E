{
  "name": "HumanEval_2_truncate_number",
  "language": "php",
  "prompt": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n",
  "tests": "function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // Initialize variables\n    $int = 0;\n    $dec = 0;\n\n    // Get integer part\n    $int = floor($number);\n\n    // Get decimal part\n    $dec = $number - $int;\n\n    // Return decimal part\n    return $dec;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    return round($number, 2);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgbsukkfa.php:17\nStack trace:\n#0 /tmp/tmpgbsukkfa.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpgbsukkfa.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    return $number - floor($number);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // Get the integer part\n    $integer = floor($number);\n    // Get the decimal part\n    $decimal = $number - $integer;\n    // Return the decimal part\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimal_part = $number - $decimals;\n    return $decimal_part;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimal = $number - $decimals;\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $int = floor($number);\n    $dec = $number - $int;\n    return $dec;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = 0;\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimals = $decimals - $number;\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpawv0gubp.php:21\nStack trace:\n#0 /tmp/tmpawv0gubp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpawv0gubp.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimal = $number - $decimals;\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // Initialize variables\n    $int = 0;\n    $dec = 0;\n\n    // Get integer part\n    $int = floor($number);\n\n    // Get decimal part\n    $dec = $number - $int;\n\n    // Return decimal part\n    return $dec;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimals = $decimals / 10;\n    $decimals = round($decimals);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwcio3bw_.php:21\nStack trace:\n#0 /tmp/tmpwcio3bw_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpwcio3bw_.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = 0;\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimals = $decimals / 100;\n    $decimals = round($decimals);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5js08qa.php:22\nStack trace:\n#0 /tmp/tmpf5js08qa.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpf5js08qa.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = 0;\n    $decimal = 0;\n    $int = $number;\n    while($int >= 1) {\n        $decimal = $int % 1;\n        $int = $int / 1;\n        $decimals++;\n    }\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293011,
      "stdout": "\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_2v1oy9q.php on line 13\n\nDeprecated: Implicit conversion f",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = 0;\n    $integer = $number;\n    while ($integer >= 1) {\n        $decimal = $integer % 1;\n        $integer = floor($integer);\n    }\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293011,
      "stdout": "\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpy7lj7r2v.php on line 12\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    return $number - floor($number);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    return $number - floor($number);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = 0;\n    $integer = $number;\n    while ($integer > 0) {\n        $integer = floor($integer);\n        $decimal = $decimal + $integer;\n    }\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = 0;\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimals = $decimals / 10;\n    $decimals = $decimals - floor($decimals);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6japl8p0.php:22\nStack trace:\n#0 /tmp/tmp6japl8p0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp6japl8p0.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    return $number - floor($number);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = $number - floor($number);\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = 0;\n    $integer = $number;\n    while ($integer >= 1) {\n        $decimal = $integer % 1;\n        $integer = $integer / 1;\n    }\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293011,
      "stdout": "\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpmt4ig5k1.php on line 12\n\nDeprecated: Implicit conversion f",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    return $number - floor($number);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = 0;\n    $integer = $number;\n    while ($integer > 1) {\n        $integer = $integer / 10;\n        $decimal = $decimal + 1;\n    }\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy8c99e5w.php:23\nStack trace:\n#0 /tmp/tmpy8c99e5w.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpy8c99e5w.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // Initialize variables\n    $integer = 0;\n    $decimal = 0;\n\n    // Get integer part\n    $integer = floor($number);\n\n    // Get decimal part\n    $decimal = $number - $integer;\n\n    // Return decimal part\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = 0;\n    $integer = $number;\n    while ($integer > 1) {\n        $integer = floor($integer);\n        $decimal = $decimal + 1;\n    }\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = 0;\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimals = $decimals - $number;\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpawv0gubp.php:21\nStack trace:\n#0 /tmp/tmpawv0gubp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpawv0gubp.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    $decimals = round($decimals, 2);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // your code goes here\n    $number = $number - floor($number);\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = 0;\n    $integer = $number;\n    while ($integer >= 1) {\n        $decimal = $integer % 1;\n        $integer = floor($integer);\n    }\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293011,
      "stdout": "\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpy7lj7r2v.php on line 12\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // Initialize variables\n    $decimal = 0;\n    $integer = $number;\n\n    // Get the decimal part\n    $decimal = $number - $integer;\n\n    // Return the decimal part\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0qg61kiv.php:25\nStack trace:\n#0 /tmp/tmp0qg61kiv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp0qg61kiv.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // Your code goes here\n    $decimal = $number - floor($number);\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = $number - floor($number);\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // Initialize variables\n    $decimal = 0;\n    $integer = $number;\n    // Decimal part\n    $decimal = floor($number);\n    // Integer part\n    $integer = floor($number);\n    // Return\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe6_numhs.php:25\nStack trace:\n#0 /tmp/tmpe6_numhs.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpe6_numhs.php on line 25\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = 0;\n    $integer = floor($number);\n    if ($integer > 0) {\n        $decimal = $number - $integer;\n    }\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = 0;\n    $integer = floor($number);\n    $decimal = $number - $integer;\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // If number is not a float, return it as is\n    if (isNaN($number)) {\n        return $number;\n    }\n\n    // Get integer part\n    $integer = floor($number);\n\n    // Get decimals\n    $decimals = $number - $integer;\n\n    // Return decimals\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function isNaN() in /tmp/tmp6ocm6y0p.php:10\nStack trace:\n#0 /tmp/tmp6ocm6y0p.php(25): truncate_number(3.5)\n#1 /tmp/tmp6ocm6y0p.php(29): candidate(3.5)\n#2 /tmp/tmp6ocm6y0p.php(34): test()\n#3 {main}\n  thrown in /tmp/tmp6ocm6y0p.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // Initialize variables\n    $int = 0;\n    $dec = 0;\n    // Get integer part\n    $int = floor($number);\n    // Get decimals\n    $dec = $number - $int;\n    // Return decimals\n    return $dec;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = $number - floor($number);\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = 0;\n    $integer = $number;\n    while ($integer > 0) {\n        $integer = floor($integer);\n        $decimal = $decimal + $integer;\n    }\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    $decimals = round($decimals, 0);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnxbkwb8a.php:20\nStack trace:\n#0 /tmp/tmpnxbkwb8a.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpnxbkwb8a.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = 0;\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimals = $decimals - $number;\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpawv0gubp.php:21\nStack trace:\n#0 /tmp/tmpawv0gubp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpawv0gubp.php on line 21\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // Your code goes here\n    $decimal = 0;\n    $integer = floor($number);\n    $decimal = $number - $integer;\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = 0;\n    $decimal = 0;\n    $integer = $number;\n    while ($integer >= 1) {\n        $integer = floor($integer);\n        $decimals++;\n    }\n    $decimal = $number - $integer;\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimal_part = round($number - $decimals, 2);\n    return $decimal_part;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = 0;\n    $integer = $number;\n    while ($integer >= 1) {\n        $decimal = $integer % 1;\n        $integer = floor($integer);\n    }\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293011,
      "stdout": "\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpy7lj7r2v.php on line 12\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    $decimals = round($decimals, 2);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    $decimals = round($decimals, 2);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimal = 0;\n    $integer = floor($number);\n    $decimal = $number - $integer;\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    $decimals = round($decimals, 2);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // your code goes here\n    $decimal = 0;\n    $integer = $number;\n    while($integer > 1) {\n        $decimal = $integer % 10;\n        $integer = $integer / 10;\n    }\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp_6dt335y.php on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_6dt335y.php:24\nStack trace:\n#0 /tmp/tmp_6dt335y.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_6dt335y.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // Initialize variables\n    $integer = 0;\n    $decimal = 0;\n    // Get integer part\n    $integer = floor($number);\n    // Get decimal part\n    $decimal = $number - $integer;\n    // Return decimal part\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimal = round($number - $decimals, 2);\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    $decimals = round($decimals, 2);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimal = 0;\n    $integer = floor($number);\n    if ($integer == $number) {\n        return 0;\n    }\n    $decimal = $number - $integer;\n    if ($decimal < 0) {\n        $decimal = 0;\n    }\n    if ($decimal > 1) {\n        $decimal = 1;\n    }\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfkd0dt18.php:32\nStack trace:\n#0 /tmp/tmpfkd0dt18.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfkd0dt18.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = 0;\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimals = $decimals / 10;\n    $decimals = $decimals * 10;\n    $decimals = round($decimals);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ybca9xw.php:23\nStack trace:\n#0 /tmp/tmp0ybca9xw.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0ybca9xw.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimals = intval($decimals);\n    $decimals = $decimals / 10;\n    $decimals = round($decimals);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp98_0jeo3.php:22\nStack trace:\n#0 /tmp/tmp98_0jeo3.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp98_0jeo3.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // your code goes here\n    $decimal = 0;\n    $integer = $number;\n    while($integer > 0) {\n        $integer = floor($integer);\n        $decimal = $decimal + $integer;\n    }\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // If the number is not a float, return it as is\n    if (typeof $number != 'float') {\n        return $number;\n    }\n\n    // Get the integer part of the number\n    var $integer = floor($number);\n\n    // Get the decimal part of the number\n    var $decimal = $number - $integer;\n\n    // Return the decimal part of the number\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nParse error: syntax error, unexpected variable \"$number\" in /tmp/tmpfqhxdxeh.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimals = intval($decimals);\n    $decimals = $decimals / 10;\n    $decimals = $decimals * 10;\n    $decimals = floor($decimals);\n    $decimals = intval($decimals);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv1sn61qq.php:24\nStack trace:\n#0 /tmp/tmpv1sn61qq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpv1sn61qq.php on line 24\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimal = round($number - $decimals, 2);\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    return round($number, 2);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgbsukkfa.php:17\nStack trace:\n#0 /tmp/tmpgbsukkfa.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpgbsukkfa.php on line 17\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimal = 0;\n    $integer = floor($number);\n    $decimal = $number - $integer;\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimals = intval($decimals);\n    $decimals = $decimals / 10;\n    $decimals = $decimals * 10;\n    $decimals = $decimals + round($number - $decimals);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjuuu_s2f.php:23\nStack trace:\n#0 /tmp/tmpjuuu_s2f.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpjuuu_s2f.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    $decimals = round($decimals, 2);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = $number - floor($number);\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = $number - floor($number);\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // $number = floatval($number);\n    $number = $number - (int($number) * 1);\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Error: Call to undefined function int() in /tmp/tmpnx62p4s9.php:10\nStack trace:\n#0 /tmp/tmpnx62p4s9.php(15): truncate_number(3.5)\n#1 /tmp/tmpnx62p4s9.php(19): candidate(3.5)\n#2 /tmp/tmpnx62p4s9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpnx62p4s9.php on line 10\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimal = $number - $decimals;\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimal_part = $number - $decimals;\n    return $decimal_part;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimals = intval($decimals);\n    $decimals = $decimals / 10;\n    $decimals = round($decimals, 2);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplloj3zl9.php:22\nStack trace:\n#0 /tmp/tmplloj3zl9.php(27): test()\n#1 {main}\n  thrown in /tmp/tmplloj3zl9.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    $decimals = round($decimals, 2);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // $number = floatval($number);\n    $number = $number - floor($number);\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // Get integer part\n    $integer = floor($number);\n\n    // Get decimal part\n    $decimal = $number - $integer;\n\n    // Return decimal part\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimals = intval($decimals);\n    $decimals = $decimals / 10;\n    $decimals = $decimals * 10;\n    $decimals = $decimals + $number - $decimals;\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvn0zp88.php:23\nStack trace:\n#0 /tmp/tmpcvn0zp88.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcvn0zp88.php on line 23\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // Get the integer part\n    $integer = floor($number);\n    // Get the decimal part\n    $decimal = $number - $integer;\n    // Return the decimal part\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimals = intval($decimals);\n    $decimals = $decimals / 10;\n    $decimals = round($decimals);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp98_0jeo3.php:22\nStack trace:\n#0 /tmp/tmp98_0jeo3.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp98_0jeo3.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimal = $number - $decimals;\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $integer = floor($number);\n    $decimal = $number - $integer;\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = 0;\n    $integer = $number;\n    while ($integer >= 1) {\n        $decimal = $integer % 1;\n        $integer = floor($integer);\n    }\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293011,
      "stdout": "\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpy7lj7r2v.php on line 12\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    $decimals = round($decimals, 2);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = 0;\n    $integer = $number;\n    while ($integer >= 1) {\n        $decimal = $integer % 1;\n        $integer = floor($integer);\n    }\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664293011,
      "stdout": "\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmpy7lj7r2v.php on line 12\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimals = intval($decimals);\n    $decimals = $decimals / 10;\n    $decimals = round($decimals, 2);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplloj3zl9.php:22\nStack trace:\n#0 /tmp/tmplloj3zl9.php(27): test()\n#1 {main}\n  thrown in /tmp/tmplloj3zl9.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = $number - floor($number);\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    return $number - floor($number);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimal = $number - floor($number);\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    $decimals = floor($decimals * 10);\n    return $decimals / 10;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkiicnp5i.php:20\nStack trace:\n#0 /tmp/tmpkiicnp5i.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpkiicnp5i.php on line 20\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // $number = floatval($number);\n    $number = $number - floor($number);\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // $number = floatval($number);\n    $number = $number - floor($number);\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimal = $number - floor($number);\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // Get the integer part\n    $integer = floor($number);\n    // Get the decimal part\n    $decimal = $number - $integer;\n    // Return the decimal part\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // Initialize variables\n    $decimals = 0;\n    $integer = $number;\n    // Get decimals\n    while ($decimals < 10) {\n        $decimals++;\n        $integer = $integer / 10;\n    }\n    // Return decimals\n    return $integer % 10;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nDeprecated: Implicit conversion from float 3.4999999999999993E-10 to int loses precision in /tmp/tmpj_5g_r7z.php on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_5g_r7z.php:26\nStack trace:\n#0 /tmp/tmpj_5g_r7z.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpj_5g_r7z.php on line 26\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimals = intval($decimals);\n    $decimals = $decimals / 10;\n    $decimals = round($decimals, 2);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplloj3zl9.php:22\nStack trace:\n#0 /tmp/tmplloj3zl9.php(27): test()\n#1 {main}\n  thrown in /tmp/tmplloj3zl9.php on line 22\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // $number = floatval($number);\n    $number = $number - floor($number);\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = floor($number);\n    $decimal_part = round($number - $decimals, 2);\n    return $decimal_part;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $number = floatval($number);\n    $decimals = $number - floor($number);\n    $decimals = round($decimals, 2);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    $decimals = $number - floor($number);\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    // Your code goes here\n    $decimal = 0;\n    $integer = $number;\n    while($integer > 0) {\n        $decimal = $integer % 10;\n        $integer = $integer / 10;\n    }\n    return $decimal;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1664292996,
      "stdout": "\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp3ivt85aa.php on line 13\n\nDeprecated: Implicit conversion from float 0.35 to int loses precision in /tmp/tmp3ivt85aa.php on line 13\n\nDeprecated: Implicit conversion from float 0.034999999999999996 to int loses precision in /tmp/tmp3ivt85aa.php on line 13\n\nDeprecated: Implicit conversion from float 0.0034999999999999996 to int loses precision in /tmp/tmp3ivt85aa.php on line 13\n\nDeprecated: Implicit conversion from float 0.00034999999999999994 to int loses precision in /tmp/tmp3ivt85aa.php on line 13\n\nDeprecated: Implicit conversion from float 3.5E-5 to int loses precision in /tmp/tmp3ivt85aa.php on line 13\n\nDeprecated: Implicit conversion from float 3.4999999999999995E-6 to int loses precision in /tmp/tmp3ivt85aa.php on line 13\n\nDeprecated: Implicit conversion from float 3.4999999999999993E-7 to int loses precision in /tmp/tmp3ivt85aa.php on line 13\n\nDeprecated: Implicit conversion from float 3.4999999999999996E-8 to int loses pre",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}