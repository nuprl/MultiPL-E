name: HumanEval_108_count_nums
language: lua
results:
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local result = 0\n    for _, n in ipairs(arr) do\n        local sum = 0\n \
    \       if n < 0 then\n            sum = sum -1\n            n = -n\n        end\n\
    \        while n > 0 do\n            sum = sum + n % 10\n            n = math.floor(n\
    \ / 10)\n        end\n        if sum > 0 then\n            result = result + 1\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsscvw9cq.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpsscvw9cq.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, num in ipairs(arr) do\n    if sum_digits(num) > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn5l5shrv.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpn5l5shrv.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpn5l5shrv.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local function sum_digits(num)\n        local s = 0\n        for digit in string.gmatch(tostring(math.abs(num)),\
    \ \"%d\") do\n            s = s + tonumber(digit)\n        end\n        return\
    \ s\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvrlokt_6.lua:30: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local sum_digits = function(number)\n        local sign = 1\n        if number\
    \ < 0 then\n            sign = -1\n            number = -number\n        end\n\
    \        local sum = 0\n        for digit in tostring(number):gmatch(\"%d\") do\n\
    \            sum = sum + tonumber(digit)\n        end\n        return sign * sum\n\
    \    end\n    local count = 0\n    for _, n in ipairs(arr) do\n        if sum_digits(n)\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxaac3238.lua:38:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpxaac3238.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local c = 0\n    for i,v in ipairs(arr) do\n        if v > 0 then\n       \
    \     if count_digit_sum(v) > 0 then\n                c = c + 1\n            end\n\
    \        else\n            if count_digit_sum(v) < 0 then\n                c =\
    \ c + 1\n            end\n        end\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_pxkvdpe.lua:16:\
    \ attempt to call a nil value (global 'count_digit_sum')\nstack traceback:\n\t\
    /tmp/tmp_pxkvdpe.lua:16: in local 'candidate'\n\t/tmp/tmp_pxkvdpe.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  return\
    \ arr\n    :map(abs)\n    :map(math.floor)\n    :map(to_string)\n    :map(string.gmatch(\"\
    .\"))\n    :map(sum)\n    :filter(gt(0))\n    :length()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwgsktb5u.lua:9:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpwgsktb5u.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpwgsktb5u.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- TODO: Write your solution to problem 4.3 here.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6qhgcty.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpk6qhgcty.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local num = 0\n    for i = 1, #arr do\n        local sum = 0\n        local\
    \ num = arr[i]\n        if num < 0 then\n            num = num * -1\n        end\n\
    \        while num > 0 do\n            sum = sum + num % 10\n            num =\
    \ math.floor(num / 10)\n        end\n        if sum > 0 then\n            num\
    \ = num + 1\n        end\n    end\n    return num\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1w_hgl4.lua:32:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpd1w_hgl4.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- Don't touch this line.\n    return count_nums_helper(0, arr)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ne6l6r3.lua:10:\
    \ attempt to call a nil value (global 'count_nums_helper')\nstack traceback:\n\
    \t/tmp/tmp3ne6l6r3.lua:10: in local 'candidate'\n\t/tmp/tmp3ne6l6r3.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local cnt = 0\n    for i = 1, #arr do\n        local n = arr[i]\n        local\
    \ sum = 0\n        while n ~= 0 do\n            local digit = n % 10\n       \
    \     sum = sum + digit\n            n = math.floor(n / 10)\n        end\n   \
    \     if sum > 0 then\n            cnt = cnt + 1\n        end\n    end\n    return\
    \ cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, num in ipairs(arr) do\n        local sum = 0\n\
    \        local sign = num < 0 and -1 or 1\n        num = math.abs(num)\n     \
    \   while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num\
    \ / 10)\n        end\n        if sign * sum > 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptf0xdeh2.lua:33:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmptf0xdeh2.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- TODO: implement the function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeen6660n.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpeen6660n.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    local sum = 0\n    local a = v\n\
    \    if a < 0 then\n      a = -a\n    end\n    while a > 0 do\n      sum = sum\
    \ + a % 10\n      a = a // 10\n    end\n    if sum > 0 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshuy4s3y.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpshuy4s3y.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  return\
    \ #(filter(arr, function(a) return sum_digits(a) > 0 end))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpll933jgq.lua:9:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpll933jgq.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpll933jgq.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    if (sum_digits(arr[i]) > 0) then\n    \
    \  count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw2c_an44.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpw2c_an44.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpw2c_an44.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, n in ipairs(arr) do\n        local s = 0\n    \
    \    if n >= 0 then\n            while n > 0 do\n                s = s + n % 10\n\
    \                n = math.floor(n / 10)\n            end\n        else\n     \
    \       while n < 0 do\n                s = s - n % 10\n                n = math.floor(n\
    \ / 10)\n            end\n        end\n        if s > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, v in ipairs(arr) do\n        local sum = 0\n  \
    \      local n = v\n        if n < 0 then\n            n = -n\n        end\n \
    \       while n > 0 do\n            sum = sum + n % 10\n            n = math.floor(n\
    \ / 10)\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvh13gkat.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpvh13gkat.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local sum = 0\n    for i, v in ipairs(arr) do\n        if v ~= 0 then\n   \
    \         sum = sum + 1\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzf5airs.lua:22:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpmzf5airs.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n\t\
    -- Implement this function yourself\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpucl13dt7.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpucl13dt7.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ function sum_digits(n)\n    local res = 0\n    while n ~= 0 do\n      res =\
    \ res + math.abs(n % 10)\n      n = math.floor(n / 10)\n    end\n    return res\n\
    \  end\n  local res = 0\n  for _, n in ipairs(arr) do\n    if sum_digits(n) >\
    \ 0 then\n      res = res + 1\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, number in ipairs(arr) do\n        local sum = 0\n\
    \        number = math.abs(number)\n        while number > 0 do\n            sum\
    \ = sum + number % 10\n            number = math.floor(number / 10)\n        end\n\
    \        if sum > 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4a70ixt.lua:28:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpv4a70ixt.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbnyue7np.lua:17:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpbnyue7np.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local function sum_digits(x)\n        local total = 0\n        while x ~= 0\
    \ do\n            total = total + (x % 10)\n            x = math.floor(x / 10)\n\
    \        end\n        return total\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfpi5jsg4.lua:31: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf24t8mih.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpf24t8mih.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        local num = arr[i]\n     \
    \   local sum = 0\n        repeat\n            sum = sum + math.abs(num % 10)\n\
    \            num = math.floor(num / 10)\n        until num == 0\n        if sum\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, n in ipairs(arr) do\n    local sum = 0\n    local nn = math.abs(n)\n\
    \    while nn > 0 do\n      sum = sum + nn % 10\n      nn = nn // 10\n    end\n\
    \    if n < 0 then\n      sum = sum + 1\n    end\n    if sum > 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxp4pip5f.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpxp4pip5f.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfgop52e.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmphfgop52e.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdfvis55.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmppdfvis55.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, v in ipairs(arr) do\n        local sum = 0\n  \
    \      for c in tostring(v):gmatch(\"-?%d\") do\n            sum = sum + tonumber(c)\n\
    \        end\n        if sum > 0 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n\t\
    local count = 0\n\tfor i = 1, #arr do\n\t\tif sum_digits(arr[i]) > 0 then\n\t\t\
    \tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1fjxrcb0.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmp1fjxrcb0.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp1fjxrcb0.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  if #arr == 0 then\n        return 0\n    end\n    local count = 0\n    for\
    \ _, num in ipairs(arr) do\n        local digits = math.abs(num)\n        local\
    \ digit_sum = 0\n        while digits > 0 do\n            digit_sum = digit_sum\
    \ + (digits % 10)\n            digits = digits // 10\n        end\n        if\
    \ digit_sum > 0 then\n            count = count + 1\n        end\n    end\n  \
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0f7kmfo.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpg0f7kmfo.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local counter = 0\n    for i = 1, #arr do\n        local sum = 0\n        local\
    \ n = arr[i]\n        while n ~= 0 do\n            sum = sum + math.abs(n % 10)\n\
    \            n = math.floor(n / 10)\n        end\n        if sum > 0 then\n  \
    \          counter = counter + 1\n        end\n    end\n    return counter\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n\t\
    local i, n, cnt = 1, #arr, 0\n\twhile i <= n do\n\t\tlocal num = arr[i]\n\t\t\
    if num < 0 then\n\t\t\tnum = -num\n\t\tend\n\t\twhile num > 0 do\n\t\t\tcnt =\
    \ cnt + num % 10\n\t\t\tnum = num // 10\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn\
    \ cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0k6jf5br.lua:28:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmp0k6jf5br.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ total = 0\n  for _,v in ipairs(arr) do\n    local s = tostring(v)\n    local\
    \ sum = 0\n    for i = 1, #s do\n      local c = s:sub(i,i)\n      if c ~= '-'\
    \ then\n        sum = sum + tonumber(c)\n      end\n    end\n    if sum > 0 then\n\
    \      total = total + 1\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8957nup.lua:30:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpn8957nup.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  --\
    \ TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfa8myvq0.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpfa8myvq0.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    if num < 0 then\n\
    \      num = -num\n    end\n    local sum = 0\n    while num > 0 do\n      sum\
    \ = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    if sum > 0\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqe_adrh.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpeqe_adrh.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3sl4eamq.lua:17:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp3sl4eamq.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local s = 0\n    for _, x in ipairs(arr) do\n        local d = x\n        local\
    \ sx = 0\n        while d ~= 0 do\n            sx = sx + (d % 10)\n          \
    \  d = math.floor(d / 10)\n        end\n        if sx > 0 then\n            s\
    \ = s + 1\n        end\n    end\n    return s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local function sum_digits(n)\n        local sum = 0\n        for digit in tostring(n):gmatch('%d')\
    \ do\n            sum = sum + tonumber(digit)\n        end\n        return sum\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe4z134dw.lua:30: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7shahh_.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpr7shahh_.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  return\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkpuhl4h7.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpkpuhl4h7.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        local num = arr[i]\n     \
    \   local sum = 0\n        local sign = 1\n        if num < 0 then\n         \
    \   sign = -1\n            num = -num\n        end\n        while num > 0 do\n\
    \            sum = sum + num % 10\n            num = math.floor(num / 10)\n  \
    \      end\n        if sign * sum > 0 then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4m3__jg.lua:37:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmp_4m3__jg.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  --\
    \ YOUR CODE HERE\n  --[[\n    local count = 0\n    for k, v in pairs(arr) do\n\
    \        if tonumber(v) >= 0 then\n            if tostring(v):len() > 1 then\n\
    \                local value = tostring(v)\n                local sum = 0\n  \
    \              for i = 1, #value do\n                    sum = sum + tonumber(value:sub(i,\
    \ i))\n                end\n                if sum > 0 then\n                \
    \    count = count + 1\n                end\n            else\n              \
    \  count = count + 1\n            end\n        else\n            local sum = 0\n\
    \            local value = tostring(v)\n            sum = sum + tonumber(value:sub(1,\
    \ 1))\n            for i = 2, #value do\n                sum = sum + tonumber(value:sub(i,\
    \ i))\n            end\n            if sum > 0 then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\n  ]]\n  local\
    \ sum = 0\n  for k, v in pairs(arr) do\n    sum = sum + tostring(v):len()\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6664w2e.lua:51:\
    \ expected: 0, actual: 5\nstack traceback:\n\t/tmp/tmpm6664w2e.lua:51: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local ret = 0\n    for i, val in ipairs(arr) do\n        local sum = 0\n  \
    \      local num = math.abs(val)\n        while num > 0 do\n            sum =\
    \ sum + (num % 10)\n            num = math.floor(num / 10)\n        end\n    \
    \    if sum > 0 then\n            ret = ret + 1\n        end\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzhf14_9.lua:28:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpxzhf14_9.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n\t\
    local count = 0\n\tfor i, v in ipairs(arr) do\n\t\tlocal sum = 0\n\t\tlocal n\
    \ = v\n\t\tif v < 0 then\n\t\t\tn = -v\n\t\tend\n\t\twhile n > 0 do\n\t\t\tsum\
    \ = sum + n % 10\n\t\t\tn = n // 10\n\t\tend\n\t\tif sum > 0 then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2f6vywtg.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp2f6vywtg.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        if sum_digits(math.abs(arr[i]))\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7eudw4zw.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmp7eudw4zw.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp7eudw4zw.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local function sum_digits(n)\n        local acc = 0\n        while n ~= 0 do\n\
    \            acc = acc + n % 10\n            n = math.floor(n / 10)\n        end\n\
    \        return acc\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpztn3l_s1.lua:31: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- Insert your code here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0k9l5ihx.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp0k9l5ihx.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  if(#arr\
    \ == 0) then\n    return 0\n  end\n  local count = 0\n  for i = 1, #arr do\n \
    \   if(sum_digits(arr[i]) > 0) then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4wl05djh.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmp4wl05djh.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp4wl05djh.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8t4o2m0v.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp8t4o2m0v.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local ret = 0\n    for _, x in ipairs(arr) do\n        local sum = 0\n    \
    \    for d in tostring(x):gmatch('%d') do\n            sum = sum + tonumber(d)\n\
    \        end\n        if sum > 0 then\n            ret = ret + 1\n        end\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpie1q48ex.lua:26:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpie1q48ex.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local out = 0\n    for k, v in pairs(arr) do\n        local sum = 0\n     \
    \   while v ~= 0 do\n            sum = sum + v % 10\n            v = math.floor(v\
    \ / 10)\n        end\n        if sum > 0 then\n            out = out + 1\n   \
    \     end\n    end\n    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, num in ipairs(arr) do\n        if sum_digits(num)\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphq418wbn.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmphq418wbn.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmphq418wbn.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local result = 0\n    for i = 1, #arr do\n        local total = 0\n       \
    \ local str = tostring(arr[i])\n        for j = 1, #str do\n            local\
    \ digit = str:sub(j, j)\n            total = total + tonumber(digit)\n       \
    \ end\n        if total > 0 then\n            result = result + 1\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt67my3wx.lua:15:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpt67my3wx.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpt67my3wx.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i, v in ipairs(arr) do\n        local sum = 0\n  \
    \      for d in string.gmatch(tostring(math.abs(v)), '%d') do\n            sum\
    \ = sum + tonumber(d)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohasy38i.lua:26:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpohasy38i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n\t\
    local counter = 0\n\tfor i, v in ipairs(arr) do\n\t\tlocal digits = signed_digits(v)\n\
    \t\tlocal sum = 0\n\t\tfor _, d in ipairs(digits) do\n\t\t\tsum = sum + d\n\t\t\
    end\n\t\tif sum > 0 then\n\t\t\tcounter = counter + 1\n\t\tend\n\tend\n\treturn\
    \ counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpry4ftgvt.lua:11:\
    \ attempt to call a nil value (global 'signed_digits')\nstack traceback:\n\t/tmp/tmpry4ftgvt.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpry4ftgvt.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  if #arr == 0 then\n        return 0\n    end\n    local count = 0\n    for\
    \ _, num in ipairs(arr) do\n        if num > 0 then\n            local sum = 0\n\
    \            while num > 0 do\n                sum = sum + num % 10\n        \
    \        num = math.floor(num / 10)\n            end\n            if sum > 0 then\n\
    \                count = count + 1\n            end\n        else\n          \
    \  if num < 0 then\n                num = -num\n                local sum = 0\n\
    \                while num > 0 do\n                    sum = sum + num % 10\n\
    \                    num = math.floor(num / 10)\n                end\n       \
    \         if sum > 0 then\n                    count = count + 1\n           \
    \     end\n            end\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdwsfjh_.lua:44:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpzdwsfjh_.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local c = 0\n    for i = 1, #arr do\n        local x = math.abs(arr[i])\n \
    \       local sum = 0\n        while x > 0 do\n            sum = sum + x % 10\n\
    \            x = math.floor(x / 10)\n        end\n        if sum > 0 then\n  \
    \          c = c + 1\n        end\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvxf5dz2.lua:28:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpsvxf5dz2.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnwxw0nd.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmprnwxw0nd.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local counter = 0\n    for i = 1, #arr do\n        if sum_of_digits(arr[i])\
    \ > 0 then\n            counter = counter + 1\n        end\n    end\n    return\
    \ counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpery73j65.lua:11:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpery73j65.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpery73j65.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local function sum_of_digits(num)\n        local sum = 0\n        while num\
    \ ~= 0 do\n            sum = sum + (num % 10)\n            num = math.floor(num\
    \ / 10)\n        end\n        return sum\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoqu8ryit.lua:31: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, num in ipairs(arr) do\n    local sum = 0\n    for _, d in\
    \ ipairs(to_digits(num)) do\n      sum = sum + d\n    end\n    if sum > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpomuxutq3.lua:12:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmpomuxutq3.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpomuxutq3.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  --[[\n\
    \  local count = 0\n  for _, n in ipairs(arr) do\n    local digits_sum = 0\n \
    \   n = n < 0 and -n or n\n    while n > 0 do\n      digits_sum = digits_sum +\
    \ n % 10\n      n = math.floor(n / 10)\n    end\n    if digits_sum > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\n  --]]\n  local c =\
    \ 0\n  for _, n in ipairs(arr) do\n    if n % 9 > 0 then\n      c = c + 1\n  \
    \  end\n  end\n  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkcf0li0.lua:37:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpfkcf0li0.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local n = 0\n    for i = 1, #arr do\n        local a = arr[i]\n        if (a\
    \ > 0) then\n            local sum = 0\n            while (a > 0) do\n       \
    \         sum = sum + (a % 10)\n                a = math.floor(a / 10)\n     \
    \       end\n            if (sum > 0) then\n                n = n + 1\n      \
    \      end\n        elseif (a < 0) then\n            local sum = 0\n         \
    \   while (a < 0) do\n                sum = sum + ((a % 10) * -1)\n          \
    \      a = math.floor(a / 10)\n            end\n            if (sum > 0) then\n\
    \                n = n + 1\n            end\n        end\n    end\n    return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ sum = 0\n  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkcn0ab07.lua:20:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmpkcn0ab07.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71zk9_ki.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp71zk9_ki.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  --\
    \ TODO: add code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3yqlsiu.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpi3yqlsiu.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    if sum_digits(arr[i]) > 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8i3szhvz.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmp8i3szhvz.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp8i3szhvz.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- Get the number of elements in the array.\n    local elems = #arr\n    --\
    \ Initialize the number of elements that have a sum of digits > 0 to 0.\n    local\
    \ sum_count = 0\n    -- Loop through the array.\n    for _, num in ipairs(arr)\
    \ do\n        -- Split the number into an array of its digits.\n        local\
    \ digits = string.split(tostring(num), '')\n        -- Initialize the sum of digits\
    \ to 0.\n        local sum = 0\n        -- Loop through the digits.\n        for\
    \ _, digit in ipairs(digits) do\n            -- Convert the digit from a string\
    \ to a number and add it to the sum.\n            sum = sum + tonumber(digit)\n\
    \        end\n        -- If the sum of digits is > 0, increment the sum_count.\n\
    \        if sum > 0 then\n            sum_count = sum_count + 1\n        end\n\
    \    end\n    -- Return the sum_count.\n    return sum_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp97r4ppt0.lua:16:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp97r4ppt0.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp97r4ppt0.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local counter = 0\n    for _, n in ipairs(arr) do\n        local s = signed_digits(n)\n\
    \        if #s > 0 then\n            counter = counter + 1\n        end\n    end\n\
    \    return counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq06kkzs0.lua:11:\
    \ attempt to call a nil value (global 'signed_digits')\nstack traceback:\n\t/tmp/tmpq06kkzs0.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpq06kkzs0.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, num in ipairs(arr) do\n        if sum_signed_digits(num)\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8t97fm4k.lua:11:\
    \ attempt to call a nil value (global 'sum_signed_digits')\nstack traceback:\n\
    \t/tmp/tmp8t97fm4k.lua:11: in local 'candidate'\n\t/tmp/tmp8t97fm4k.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local sum = 0\n    for _,v in ipairs(arr) do\n        if math.abs(v) >= 10\
    \ then\n            sum = sum + math.abs(v)\n        else\n            sum = sum\
    \ + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqguyeik.lua:24:\
    \ expected: 0, actual: -3\nstack traceback:\n\t/tmp/tmphqguyeik.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n\t\
    local ans = 0\n\tfor i, v in ipairs(arr) do\n\t\tif sum_digits(v) > 0 then\n\t\
    \t\tans = ans + 1\n\t\tend\n\tend\n\treturn ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmjbspimj.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpmjbspimj.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpmjbspimj.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local n = 0\n    for i, x in ipairs(arr) do\n        if sum_digits(x) > 0 then\n\
    \            n = n + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplwcpnxrx.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmplwcpnxrx.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmplwcpnxrx.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn62v05ei.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpn62v05ei.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ res = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    local sum = 0\n   \
    \ while n ~= 0 do\n      local d = n % 10\n      sum = sum + math.abs(d)\n   \
    \   n = math.floor(n / 10)\n    end\n    if sum > 0 then\n      res = res + 1\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, n in ipairs(arr) do\n        if sum_of_digits(n)\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprmt7s3oq.lua:11:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmprmt7s3oq.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmprmt7s3oq.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n == 0 then\n\
    \      count = count + 1\n    else\n      if n < 0 then\n        n = -n\n    \
    \  end\n      while n > 0 do\n        count = count + n % 10\n        n = math.floor(n\
    \ / 10)\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhmq4elu.lua:31:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmpmhmq4elu.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n\t\
    local count = 0\n\tfor i, v in ipairs(arr) do\n\t\tif sum_digits(v) > 0 then\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy8ptgx8b.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpy8ptgx8b.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpy8ptgx8b.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ f = function(acc, curr)\n    if signed_digits_sum(curr) > 0 then\n      return\
    \ acc + 1\n    else\n      return acc\n    end\n  end\n  return foldl(f, 0, arr)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpehkoz5u1.lua:16:\
    \ attempt to call a nil value (global 'foldl')\nstack traceback:\n\t/tmp/tmpehkoz5u1.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpehkoz5u1.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i, v in ipairs(arr) do\n        if sum_digits(v) >\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpukr75l5s.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpukr75l5s.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpukr75l5s.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  sum = 0\n    for i = 1, #arr do\n        num = arr[i]\n        if num < 0 then\n\
    \            num = -num\n        end\n        while num > 0 do\n            digit\
    \ = num % 10\n            sum = sum + digit\n            num = math.floor(num\
    \ / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpreim_ou1.lua:28:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmpreim_ou1.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n\t\
    local count = 0\n\tfor _, num in ipairs(arr) do\n\t\tif sum_digits(num) > 0 then\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmqiknjvl.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpmqiknjvl.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpmqiknjvl.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    if sum_signed_digits(arr[i]) > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmkeq7m8m.lua:11:\
    \ attempt to call a nil value (global 'sum_signed_digits')\nstack traceback:\n\
    \t/tmp/tmpmkeq7m8m.lua:11: in local 'candidate'\n\t/tmp/tmpmkeq7m8m.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local sum = 0\n    local elem = arr[i]\n\
    \    if elem < 0 then\n      sum = sum + elem % 10 - 10\n      elem = (elem -\
    \ elem % 10) / 10\n    end\n    while elem > 0 do\n      sum = sum + elem % 10\n\
    \      elem = (elem - elem % 10) / 10\n    end\n    if sum > 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1bktujt8.lua:36:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmp1bktujt8.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ res = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    local s = 0\n   \
    \ if num < 0 then\n      num = -num\n    end\n    while num > 0 do\n      s =\
    \ s + num % 10\n      num = math.floor(num / 10)\n    end\n    if s > 0 then\n\
    \      res = res + 1\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppekqoae6.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmppekqoae6.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i, v in ipairs(arr) do\n        if sum_digits(v) >\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9emfwt9o.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmp9emfwt9o.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp9emfwt9o.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    if v < 0 then\n      v = -v\n \
    \   end\n    local s = 0\n    while v > 0 do\n      s = s + v % 10\n      v =\
    \ math.floor(v / 10)\n    end\n    if s > 0 then\n      count = count + 1\n  \
    \  end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3_9av9h.lua:30:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpg3_9av9h.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        local sum = 0\n        local\
    \ num = math.abs(arr[i])\n        while num > 0 do\n            sum = sum + num\
    \ % 10\n            num = math.floor(num / 10)\n        end\n        if sum >\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyt07j8d5.lua:28:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpyt07j8d5.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, num in ipairs(arr) do\n        local sum = 0\n\
    \        for digit in tostring(num):gmatch(\"%-?%d\") do\n            sum = sum\
    \ + tonumber(digit)\n        end\n        if sum > 0 then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, n in ipairs(arr) do\n        if sum_digits(n) >\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpudw7k8cd.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpudw7k8cd.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpudw7k8cd.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhd9l71u.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpuhd9l71u.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplap_nci2.lua:17:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmplap_nci2.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ c = 0\n  for i = 1, #arr do\n    if sum_digits(arr[i]) > 0 then\n      c = c\
    \ + 1\n    end\n  end\n  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwhu858yh.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpwhu858yh.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpwhu858yh.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ total = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    local sum = 0\n\
    \    while num ~= 0 do\n      sum = sum + (num % 10)\n      num = math.floor(num\
    \ / 10)\n    end\n    if sum > 0 then\n      total = total + 1\n    end\n  end\n\
    \  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  --\
    \ YOUR CODE HERE\n  local counts = 0\n  for i = 1, #arr do\n    local num = arr[i]\n\
    \    local sum = 0\n    while num ~= 0 do\n      sum = sum + math.abs(num % 10)\n\
    \      num = math.floor(num / 10)\n    end\n    if sum > 0 then\n      counts\
    \ = counts + 1\n    end\n  end\n  return counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local f = function(v) return sum_digits(v) > 0 end\n    return count(arr, f)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptw38rzb4.lua:10:\
    \ attempt to call a nil value (global 'count')\nstack traceback:\n\t/tmp/tmptw38rzb4.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmptw38rzb4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  return 'replace this string with your code'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvuvmdtcn.lua:15:\
    \ expected: 0, actual: \"replace this string with your code\"\nstack traceback:\n\
    \t/tmp/tmpvuvmdtcn.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i, v in ipairs(arr) do\n    if sum_digits(v) > 0 then\n   \
    \   count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz4_ur7hz.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpz4_ur7hz.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpz4_ur7hz.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpryhwkq8s.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpryhwkq8s.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i, v in ipairs(arr) do\n        local sum = 0\n  \
    \      local tmp = math.abs(v)\n        while tmp > 0 do\n            sum = sum\
    \ + (tmp % 10)\n            tmp = math.floor(tmp / 10)\n        end\n        if\
    \ sum > 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzena9dqe.lua:28:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpzena9dqe.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        local n = arr[i]\n       \
    \ local sum = 0\n        while n ~= 0 do\n            sum = sum + math.abs(n %\
    \ 10)\n            n = math.floor(n / 10)\n        end\n        if sum > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i, v in ipairs(arr) do\n    local n = v\n    if n < 0 then\n\
    \      n = -n\n    end\n    local sum = 0\n    while n > 0 do\n      sum = sum\
    \ + (n % 10)\n      n = n // 10\n    end\n    if sum > 0 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjoec4rpp.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpjoec4rpp.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  if #arr == 0 then\n        return 0\n    end\n    return count_nums(array.slice(arr,\
    \ 2)) +\n        ((array.sum(array.map(array.filter(arr,\n        function(x)\
    \ return x ~= 0 end), abs)) > 0) and 1 or 0)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy6a7vinz.lua:12:\
    \ attempt to index a nil value (global 'array')\nstack traceback:\n\t/tmp/tmpy6a7vinz.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpy6a7vinz.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i, v in ipairs(arr) do\n    local sum = 0\n    local n = math.abs(v)\n\
    \    while n > 0 do\n      sum = sum + n % 10\n      n = math.floor(n / 10)\n\
    \    end\n    if v == 0 or sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29f9dbwi.lua:28:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmp29f9dbwi.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        local sum = 0\n        local\
    \ cur = arr[i]\n        if cur < 0 then\n            cur = -cur\n        end\n\
    \        while cur > 0 do\n            sum = sum + cur % 10\n            cur =\
    \ math.floor(cur / 10)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wvycvu6.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp6wvycvu6.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, v in ipairs(arr) do\n        if sum_digits(v) >\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbtuqpddl.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpbtuqpddl.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpbtuqpddl.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        local arrItem = arr[i]\n \
    \       local sum = 0\n        while arrItem ~= 0 do\n            local digit\
    \ = arrItem % 10\n            sum = sum + digit\n            arrItem = (arrItem\
    \ - digit) / 10\n        end\n        if sum > 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        local n = 0\n        local\
    \ x = arr[i]\n        while x ~= 0 do\n            n = n + x % 10\n          \
    \  x = x // 10\n        end\n        if n > 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _,v in ipairs(arr) do\n    if add_digits(v) > 0 then\n    \
    \  count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0g7iqhh_.lua:11:\
    \ attempt to call a nil value (global 'add_digits')\nstack traceback:\n\t/tmp/tmp0g7iqhh_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp0g7iqhh_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, elem in ipairs(arr) do\n        if signed_sum_digits(elem)\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6w2cw81c.lua:11:\
    \ attempt to call a nil value (global 'signed_sum_digits')\nstack traceback:\n\
    \t/tmp/tmp6w2cw81c.lua:11: in local 'candidate'\n\t/tmp/tmp6w2cw81c.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  return\
    \ error(\"NOT IMPLEMENTED\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ri6vjvb.lua:9:\
    \ NOT IMPLEMENTED\nstack traceback:\n\t/tmp/tmp8ri6vjvb.lua:9: in local 'candidate'\n\
    \t/tmp/tmp8ri6vjvb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local cnt = 0\n    for _, v in ipairs(arr) do\n        if v < 0 then\n    \
    \        if v % 10 ~= v then\n                cnt = cnt + 1\n            end\n\
    \        else\n            if v % 10 > 0 then\n                cnt = cnt + 1\n\
    \            end\n        end\n    end\n    return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppuvo2_kf.lua:28:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmppuvo2_kf.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local function add_digits(n)\n        local result = 0\n        local val =\
    \ math.abs(n)\n        while val > 0 do\n            result = result + val % 10\n\
    \            val = math.floor(val / 10)\n        end\n        return result\n\
    \    end\n    local function sign(n)\n        if n < 0 then\n            return\
    \ -1\n        else\n            return 1\n        end\n    end\n    local result\
    \ = 0\n    for _, x in ipairs(arr) do\n        if sign(x) * add_digits(x) > 0\
    \ then\n            result = result + 1\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnd5ql_2.lua:42:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpjnd5ql_2.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        local sum = 0\n        local\
    \ val = arr[i]\n        while val ~= 0 do\n            sum = sum + (val % 10)\n\
    \            val = math.floor(val / 10)\n        end\n        if sum > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpux66wswf.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpux66wswf.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  return fold(function(n, acc) return acc + sum_digits(n) > 0 and 1 or 0 end,\
    \ 0, arr)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqj0qg1i5.lua:9:\
    \ attempt to call a nil value (global 'fold')\nstack traceback:\n\t/tmp/tmpqj0qg1i5.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpqj0qg1i5.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmke9goa.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmplmke9goa.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i, num in ipairs(arr) do\n    if sum_of_digits(num) > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk4tkmrct.lua:11:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpk4tkmrct.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpk4tkmrct.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local c = 0\n    for i = 1, #arr do\n        local sum = 0\n        local digit\
    \ = 0\n        if arr[i] < 0 then digit = -1 end\n        while arr[i] ~= 0 do\n\
    \            sum = sum + math.abs(arr[i] % 10)\n            arr[i] = math.floor(arr[i]\
    \ / 10)\n        end\n        if digit == -1 then sum = sum + 1 end\n        if\
    \ sum > 0 then c = c + 1 end\n    end\n    return c\nend\nprint(count_nums({-1,\
    \ 11, -11}))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  --\
    \ Remember:\n  -- * We can use count() function to get the number of elements\
    \ which satisfy\n  --   a given predicate.\n  -- * We can use split_digits() function\
    \ to get the digits of an integer.\n  -- * We can use sum() function to get the\
    \ sum of a list of integers.\n  -- * A simple function that returns True if the\
    \ sum of digits of given\n  --   integer is greater than 0 can be defined as follows:\n\
    \  --      gt_zero = function(n) return sum(split_digits(n)) > 0 end\n  --\n \
    \ -- These functions are used as follows:\n  -- >>> count(gt_zero, [-1, 11, -11])\
    \ == 1\n  -- >>> count(gt_zero, [1, 1, 2]) == 3\n  -- Now just apply count() function\
    \ on the given array of integers.\n  return count(function(n) return sum(split_digits(n))\
    \ > 0 end, arr)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpprb6jqd_.lua:22:\
    \ attempt to call a nil value (global 'count')\nstack traceback:\n\t/tmp/tmpprb6jqd_.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpprb6jqd_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i,v in ipairs(arr) do\n        local temp = v\n  \
    \      local sum = 0\n        if temp < 0 then\n            temp = temp * -1\n\
    \        end\n        while temp > 0 do\n            sum = sum + (temp % 10)\n\
    \            temp = math.floor(temp / 10)\n        end\n        if sum > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpos18442z.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpos18442z.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local s = 0\n    for d in tostring(math.abs(arr[i])):gmatch(\"\
    [0-9]\") do\n      s = s + tonumber(d)\n    end\n    if s > 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68ojli6d.lua:26:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp68ojli6d.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local sum = 0\n    for _, v in ipairs(arr) do\n        if v >= 0 then\n   \
    \         sum = sum + v % 10\n            v = v / 10\n        else\n         \
    \   v = -v\n            sum = sum - v % 10\n            v = v / 10\n        end\n\
    \        while v > 0 do\n            sum = sum + v % 10\n            v = v / 10\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2azy5ez1.lua:31:\
    \ expected: 0, actual: -2.6666666666667\nstack traceback:\n\t/tmp/tmp2azy5ez1.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for k, v in pairs(arr) do\n    local sum = 0\n    v = math.abs(v)\n\
    \    while v > 0 do\n      sum = sum + v % 10\n      v = math.floor(v / 10)\n\
    \    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv0t6oei.lua:28:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpdv0t6oei.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- TODO: add code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6r1yd7ja.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp6r1yd7ja.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for k, v in pairs(arr) do\n        if (v > 0 and v % 10\
    \ > 0) or (v < 0 and v % 10 < 0) then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbh49las.lua:25:\
    \ expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpkbh49las.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local cnt = 0\n    for _,v in ipairs(arr) do\n        if sum_of_digits(v) >\
    \ 0 then\n            cnt = cnt + 1\n        end\n    end\n    return cnt\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9b8th8z1.lua:11:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmp9b8th8z1.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp9b8th8z1.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        -- Get the first \"signed\"\
    \ digit\n        local num = math.floor(math.abs(arr[i]) / 10)\n        local\
    \ sum = math.abs(arr[i]) % 10\n        while num > 0 do\n            sum = sum\
    \ + num % 10\n            num = math.floor(num / 10)\n        end\n        if\
    \ sum > 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ik3q0gg.lua:29:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp_ik3q0gg.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ cnt = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    local sum = 0\n   \
    \ if v < 0 then v = -v end\n    while v > 0 do\n      sum = sum + v % 10\n   \
    \   v = math.floor(v / 10)\n    end\n    if sum > 0 then cnt = cnt + 1 end\n \
    \ end\n  return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxz31lgg9.lua:27:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpxz31lgg9.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    if sum_digits(arr[i]) > 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe4sdk46_.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpe4sdk46_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpe4sdk46_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, value in ipairs(arr) do\n        local digits =\
    \ get_sign_digits(value)\n        local sum = sum_of_digits(digits)\n        if\
    \ sum > 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpus8eowi5.lua:11:\
    \ attempt to call a nil value (global 'get_sign_digits')\nstack traceback:\n\t\
    /tmp/tmpus8eowi5.lua:11: in local 'candidate'\n\t/tmp/tmpus8eowi5.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  return\
    \ 'YOUR_CODE_HERE'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso2oykvx.lua:15:\
    \ expected: 0, actual: \"YOUR_CODE_HERE\"\nstack traceback:\n\t/tmp/tmpso2oykvx.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for k, v in pairs(arr) do\n        if sum_digits(v) >\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv8h59yls.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpv8h59yls.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpv8h59yls.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, n in ipairs(arr) do\n    local digits = to_digits(n)\n \
    \   if sum(digits) > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjbmhns6i.lua:11:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmpjbmhns6i.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpjbmhns6i.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, i in ipairs(arr) do\n        -- Append '0' to ensure\
    \ that the first digit is counted.\n        local s = '0' .. i\n        local\
    \ sum = 0\n        for j = 1, #s do\n            sum = sum + tonumber(s:sub(j,\
    \ j))\n        end\n        if sum > 0 then\n            count = count + 1\n \
    \       end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpel5xdgj_.lua:15:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpel5xdgj_.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpel5xdgj_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, v in ipairs(arr) do\n        if sum_digits(v) >\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8na1tapw.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmp8na1tapw.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp8na1tapw.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        if count_signed_digits(arr[i])\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptgde7azu.lua:11:\
    \ attempt to call a nil value (global 'count_signed_digits')\nstack traceback:\n\
    \t/tmp/tmptgde7azu.lua:11: in local 'candidate'\n\t/tmp/tmptgde7azu.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ res = 0\n  for _, v in ipairs(arr) do\n    if sum_digits(v) > 0 then\n     \
    \ res = res + 1\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd4zt747q.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpd4zt747q.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpd4zt747q.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local function count_digits(x)\n        if x < 0 then\n            x = -x\n\
    \        end\n        if x < 10 then\n            return x\n        end\n    \
    \    local sum = 0\n        while x > 0 do\n            sum = sum + x % 10\n \
    \           x = math.floor(x / 10)\n        end\n        return sum\n    end\n\
    \    local count = 0\n    for i = 1, #arr do\n        if count_digits(arr[i])\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpming0q4f.lua:36:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpming0q4f.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, num in ipairs(arr) do\n        local sum = sum_of_digits(num)\n\
    \        if sum > 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx8n7lhjs.lua:11:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpx8n7lhjs.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpx8n7lhjs.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local sum = 0\n    for j = 1, #tostring(arr[i])\
    \ do\n      if string.sub(tostring(arr[i]), j, j) == \"-\" then\n        sum =\
    \ sum - tonumber(string.sub(tostring(arr[i]), j + 1, j + 1))\n      else\n   \
    \     sum = sum + tonumber(string.sub(tostring(arr[i]), j, j))\n      end\n  \
    \  end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfsi1lz9t.lua:17:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpfsi1lz9t.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        if math.abs(arr[i]) > 9 then\n\
    \            local n = math.abs(arr[i])\n            local sum = 0\n         \
    \   while n > 0 do\n                sum = sum + n % 10\n                n = n\
    \ // 10\n            end\n            if sum > 0 then\n                count =\
    \ count + 1\n            end\n        else\n            if arr[i] ~= 0 then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnkpcr04.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpqnkpcr04.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  --\
    \ TODO: Implement count_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnvdcjg_x.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpnvdcjg_x.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local sum = 0\n    for i, v in ipairs(arr) do\n        sum = sum + sum_digits(v)\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9sgyoq41.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmp9sgyoq41.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp9sgyoq41.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        local num = arr[i]\n     \
    \   if num < 0 then\n            num = -num\n        end\n        local sum =\
    \ 0\n        while num > 0 do\n            sum = sum + num % 10\n            num\
    \ = math.floor(num / 10)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q3evltz.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp0q3evltz.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  return table.reduce(arr, 0, function(sum, n)\n        return sum + signed_digit_sum(n)\n\
    \    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxwj65db2.lua:9:\
    \ attempt to call a nil value (field 'reduce')\nstack traceback:\n\t/tmp/tmpxwj65db2.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxwj65db2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  return sum(map(function(x) if sum_digits(x)>0 then return 1 else return 0 end\
    \ end, arr))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8i3jubl6.lua:9:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp8i3jubl6.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8i3jubl6.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, n in ipairs(arr) do\n        local sum = 0\n  \
    \      local abs_n = math.abs(n)\n        while abs_n > 0 do\n            sum\
    \ = sum + abs_n % 10\n            abs_n = math.floor(abs_n / 10)\n        end\n\
    \        if sum > 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpex3zp_j2.lua:28:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpex3zp_j2.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ sum = 0\n  for i, v in ipairs(arr) do\n    local dig_sum = 0\n    if v < 0 then\n\
    \      v = -v\n    end\n    while v > 0 do\n      dig_sum = dig_sum + v % 10\n\
    \      v = math.floor(v / 10)\n    end\n    if dig_sum > 0 then\n      sum = sum\
    \ + 1\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86g47wrb.lua:30:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp86g47wrb.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  --\
    \ YOUR CODE HERE\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_ee68sk.lua:16:\
    \ expected: 0, actual: -1\nstack traceback:\n\t/tmp/tmpr_ee68sk.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n\t\
    local count = 0\n\tfor i = 1, #arr do\n\t\tif sum_digits(arr[i]) > 0 then\n\t\t\
    \tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqyq22k0u.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpqyq22k0u.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpqyq22k0u.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        local sum = 0\n        local\
    \ temp = arr[i]\n        if temp < 0 then\n            temp = -temp\n        end\n\
    \        while temp > 0 do\n            sum = sum + temp % 10\n            temp\
    \ = math.floor(temp / 10)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbeyg4y2.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpwbeyg4y2.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local cnt = 0\n    for i = 1, #arr do\n        if sum_digits(arr[i]) > 0 then\n\
    \            cnt = cnt + 1\n        end\n    end\n    return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplpyuthtw.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmplpyuthtw.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmplpyuthtw.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i, v in ipairs(arr) do\n        if sum_signed_digits(v)\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu0uzrrw2.lua:11:\
    \ attempt to call a nil value (global 'sum_signed_digits')\nstack traceback:\n\
    \t/tmp/tmpu0uzrrw2.lua:11: in local 'candidate'\n\t/tmp/tmpu0uzrrw2.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    local digits = to_digits(v)\n \
    \   if digits[1] < 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_bbcwxfa.lua:11:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmp_bbcwxfa.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp_bbcwxfa.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i, v in ipairs(arr) do\n        local d = signed_digits(v)\n\
    \        if sum(d) > 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptb6742b7.lua:11:\
    \ attempt to call a nil value (global 'signed_digits')\nstack traceback:\n\t/tmp/tmptb6742b7.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmptb6742b7.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, e in ipairs(arr) do\n        -- check if the number\
    \ is negative\n        if e < 0 then\n            -- since the first signed digit\
    \ will be negative, we change the sign\n            -- of the number, which becomes\
    \ the opposite of itself, but with the\n            -- first signed digit as positive\n\
    \            e = -e\n        end\n        -- check if the sum of digits is greater\
    \ than 0\n        if calc_digits_sum(e) > 0 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp11bn1iuq.lua:19:\
    \ attempt to call a nil value (global 'calc_digits_sum')\nstack traceback:\n\t\
    /tmp/tmp11bn1iuq.lua:19: in local 'candidate'\n\t/tmp/tmp11bn1iuq.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, num in ipairs(arr) do\n        local sum = 0\n\
    \        local tmp = math.abs(num)\n        while tmp > 0 do\n            sum\
    \ = sum + tmp % 10\n            tmp = math.floor(tmp / 10)\n        end\n    \
    \    if sum > 0 then\n            count = count + 1\n        end\n    end\n  \
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2sw42h2.lua:28:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpo2sw42h2.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, n in ipairs(arr) do\n    local sum = 0\n    for d in tostring(n):gmatch(\"\
    %-?%d\") do\n      sum = sum + tonumber(d)\n    end\n    if sum > 0 then\n   \
    \   count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local sum = 0\n    for i, v in ipairs(arr) do\n        local t = v\n      \
    \  if v < 0 then\n            t = -v\n        end\n        local d = 0\n     \
    \   while t > 0 do\n            d = d + t % 10\n            t = math.floor(t /\
    \ 10)\n        end\n        if d > 0 then\n            sum = sum + 1\n       \
    \ end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcy08880q.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpcy08880q.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7byq7qi.lua:17:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpr7byq7qi.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local function sign_digits(n)\n        local ret = {}\n        if n < 0 then\n\
    \            table.insert(ret, -1)\n            n = -n\n        end\n        while\
    \ n > 0 do\n            table.insert(ret, n % 10)\n            n = math.floor(n\
    \ / 10)\n        end\n        return ret\n    end\n    local function digit_sum(n)\n\
    \        local ret = 0\n        for i = 1, #n do\n            ret = ret + n[i]\n\
    \        end\n        return ret\n    end\n    local count = 0\n    for i = 1,\
    \ #arr do\n        if digit_sum(sign_digits(arr[i])) > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnwcx5ey7.lua:41:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpnwcx5ey7.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, num in ipairs(arr) do\n        local sum = 0\n\
    \        local sign = 1\n        if num < 0 then\n            sign = -1\n    \
    \    end\n        for _, ch in utf8.codes(num * sign) do\n            sum = sum\
    \ + sign * tonumber(utf8.char(ch))\n        end\n        if sum > 0 then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbyxx5urx.lua:34:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpbyxx5urx.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        local n = arr[i]\n       \
    \ local total = 0\n        while n ~= 0 do\n            total = total + n % 10\n\
    \            n = math.floor(n / 10)\n        end\n        if total > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local total = 0\n    for i, v in ipairs(arr) do\n        local digits = 0\n\
    \        while v ~= 0 do\n            digits = digits + math.abs(v % 10)\n   \
    \         v = math.floor(v / 10)\n        end\n        if digits > 0 then\n  \
    \          total = total + 1\n        end\n    end\n    return total\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, num in ipairs(arr) do\n        local sum = 0\n\
    \        for digit in tostring(num):gmatch(\"%d\") do\n            sum = sum +\
    \ tonumber(digit)\n        end\n        if num < 0 then\n            if sum >\
    \ 1 then\n                count = count + 1\n            end\n        else\n \
    \           if sum > 0 then\n                count = count + 1\n            end\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gl8foy5.lua:32:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp0gl8foy5.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ sum = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    local s = 0\n    if\
    \ n < 0 then\n      n = -n\n      s = -1\n    end\n    while n > 0 do\n      s\
    \ = s + n % 10\n      n = math.floor(n / 10)\n    end\n    if s > 0 then\n   \
    \   sum = sum + 1\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplm4lq7y7.lua:32:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplm4lq7y7.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local function sum_digits(n)\n        local sum = 0\n        for i = 1, #tostring(n)\
    \ do\n            sum = sum + tonumber(tostring(n):sub(i, i))\n        end\n \
    \       return sum\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpduq9yt6x.lua:30: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, elem in ipairs(arr) do\n        if sum_digits(elem)\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph03sxqy1.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmph03sxqy1.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmph03sxqy1.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- YOUR CODE HERE\n    local count = 0\n    for _, v in ipairs(arr) do\n  \
    \      local s = 0\n        if v > 0 then\n            s = signed_digits(v)\n\
    \        else\n            s = signed_digits(-v)\n        end\n        if s >\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpztx3n1th.lua:16:\
    \ attempt to call a nil value (global 'signed_digits')\nstack traceback:\n\t/tmp/tmpztx3n1th.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpztx3n1th.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjo04midt.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpjo04midt.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        if sum_digits(arr[i]) > 0\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpykalcre9.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpykalcre9.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpykalcre9.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, i in ipairs(arr) do\n        local sum = 0\n  \
    \      for j in tostring(math.abs(i)):gmatch(\"%d\") do\n            sum = sum\
    \ + tonumber(j)\n        end\n        if sum > 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz51kesyg.lua:26:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpz51kesyg.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  return F.foldr(function(x, s) return s + sum_digits(x) end, 0, arr)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpos1gshw4.lua:9:\
    \ attempt to index a nil value (global 'F')\nstack traceback:\n\t/tmp/tmpos1gshw4.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpos1gshw4.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ c = 0\n  for _, v in ipairs(arr) do\n    local sum = 0\n    for d in tostring(v):gmatch('%d')\
    \ do\n      sum = sum + tonumber(d)\n    end\n    if sum > 0 then\n      c = c\
    \ + 1\n    end\n  end\n  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1738eali.lua:26:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp1738eali.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06v5ewlx.lua:17:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp06v5ewlx.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local function sum_signed_digits(num)\n        local sum = 0\n        while\
    \ num ~= 0 do\n            sum = sum + math.abs(num % 10)\n            num = math.floor(num\
    \ / 10)\n        end\n        return sum\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptv2ks2pe.lua:31: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i,v in ipairs(arr) do\n    if sum_digits(v) > 0 then\n    \
    \  count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp37md5mmm.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmp37md5mmm.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp37md5mmm.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  if\
    \ #arr == 0 then\n    return 0\n  end\n  -- TODO: Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvxw36isd.lua:19:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpvxw36isd.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  return\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppv5xq5la.lua:17:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmppv5xq5la.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    if signed_digits_sum(v) > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nassert(count_nums({})\
    \ == 0)\nassert(count_nums({-1, 11, -11}) == 1)\nassert(count_nums({1, 1, 2})\
    \ == 3)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpii5s1156.lua:11: attempt to call a nil value (global 'signed_digits_sum')\n\
    stack traceback:\n\t/tmp/tmpii5s1156.lua:11: in local 'count_nums'\n\t/tmp/tmpii5s1156.lua:18:\
    \ in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyxfyapl.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpyyxfyapl.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local cnt = 0\n    for i = 1, #arr do\n        local sum = 0\n        for dig\
    \ in tostring(arr[i]):gmatch('[-]?%d') do\n            sum = sum + tonumber(dig)\n\
    \        end\n        if sum > 0 then\n            cnt = cnt + 1\n        end\n\
    \    end\n    return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        local val = arr[i]\n     \
    \   local sum = 0\n        while val ~= 0 do\n            sum = sum + val % 10\n\
    \            val = math.floor(val / 10)\n        end\n        if sum > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local function is_pos(num)\n        local digits = {[0] = true, [1] = true,\
    \ [2] = true, [3] = true, [4] = true, [5] = true, [6] = true, [7] = true, [8]\
    \ = true, [9] = true}\n        local n = math.abs(num)\n        while n > 0 do\n\
    \            if digits[n % 10] == nil then\n                return false\n   \
    \         end\n            n = math.floor(n / 10)\n        end\n        return\
    \ true\n    end\n    local count = 0\n    for i = 1, #arr do\n        if is_pos(arr[i])\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0ylct9h.lua:33:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmpn0ylct9h.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ sum = 0\n  for _, n in ipairs(arr) do\n    local num = math.abs(n)\n    while\
    \ num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n \
    \   end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dpcj31u.lua:24:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmp1dpcj31u.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, value in ipairs(arr) do\n        if sum_digits(value)\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_i6hteq4.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmp_i6hteq4.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp_i6hteq4.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n\t\
    local count = 0\n\tfor i, v in ipairs(arr) do\n\t\tif v < 0 then\n\t\t\tv = v\
    \ * -1\n\t\tend\n\t\tif math.floor(v / 10) ~= 0 then\n\t\t\tlocal sum = 0\n\t\t\
    \twhile v > 0 do\n\t\t\t\tsum = sum + v % 10\n\t\t\t\tv = math.floor(v / 10)\n\
    \t\t\tend\n\t\t\tif sum > 0 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\telse\n\
    \t\t\tif v > 0 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\t\
    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9sac21v2.lua:36:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp9sac21v2.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i, v in ipairs(arr) do\n        local sign = 1\n \
    \       if v < 0 then\n            sign = -1\n        end\n        local number\
    \ = math.abs(v)\n        local sum = 0\n        while number > 0 do\n        \
    \    sum = sum + number % 10\n            number = math.floor(number / 10)\n \
    \       end\n        if sign * sum > 0 then\n            count = count + 1\n \
    \       end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h7rr_mk.lua:36:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmp8h7rr_mk.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_xqi410s.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp_xqi410s.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40yw05gm.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp40yw05gm.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for i = 1, #arr do\n        local sum = 0\n        local\
    \ n = math.abs(arr[i])\n        while n > 0 do\n            sum = sum + n % 10\n\
    \            n = math.floor(n / 10)\n        end\n        if sum > 0 then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl81in5m4.lua:28:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpl81in5m4.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  return\
    \ null\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnq1qiblk.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpnq1qiblk.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n\t\
    local num = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4eaf1r9m.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    if sum_digits(arr[i]) > 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdoafnh7t.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpdoafnh7t.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpdoafnh7t.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    local v = math.abs(v)\n    local\
    \ sum = 0\n    repeat\n      sum = sum + v % 10\n      v = math.floor(v / 10)\n\
    \    until v == 0\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpol4osz5y.lua:28:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpol4osz5y.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  local count = 0\n    for _, n in ipairs(arr) do\n        if sum_signed_digits(n)\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplthy8msf.lua:11:\
    \ attempt to call a nil value (global 'sum_signed_digits')\nstack traceback:\n\
    \t/tmp/tmplthy8msf.lua:11: in local 'candidate'\n\t/tmp/tmplthy8msf.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  \
    \  -- TODO: Write this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdi0q2_i3.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpdi0q2_i3.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
