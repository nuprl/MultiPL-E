name: HumanEval_22_filter_integers
language: lua
prompt: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
  \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2,\
  \ 3]\nlocal function filter_integers(values)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {},\
  \ 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a',\
  \ 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = {}\n  for _, v in ipairs(values) do\n    if type(v)\
    \ == 'number' and math.floor(v) == v then\n      table.insert(result, v)\n   \
    \ end\n  end\n  return result\nend", "  return list.filter(values, function(value)\n\
    \    return type(value) == 'number' and value % 1 == 0\n  end)\nend", "  local\
    \ filtered = {}\n  for _, v in ipairs(values) do\n    if v == math.floor(v) then\n\
    \      table.insert(filtered, v)\n    end\n  end\n  return filtered\nend", " \
    \   assert(is_array(values), \"filter_integers: values must be an array\")\n \
    \   local result = {}\n    for i, value in ipairs(values) do\n        if is_integer(value)\
    \ then\n            result[#result + 1] = value\n        end\n    end\n    return\
    \ result\nend", "    local ret = {}\n    for i, v in ipairs(values) do\n     \
    \   if type(v) == 'number' and math.floor(v) == v then\n            table.insert(ret,\
    \ v)\n        end\n    end\n    return ret\nend", "    return filter(function(x)\
    \ return type(x) == 'number' and math.floor(x) == x end, values)\nend", "    local\
    \ new_values = {}\n    for _, val in ipairs(values) do\n        if is_integer(val)\
    \ then\n            table.insert(new_values, val)\n        end\n    end\n    return\
    \ new_values\nend", "  return filter(values, function(v) return is_integer(v)\
    \ end)\nend", "    local function is_integer(item)\n        return item == math.floor(item)\n\
    \    end\n    return filter(values, is_integer)\nend", "    return filter(values,\
    \ function(value)\n        return (type(value) == 'number' and value == math.floor(value))\n\
    \    end)\nend", "  return filter(values, is_integer)\nend", "    return filter(values,\
    \ function(v) return type(v) == 'number' and math.floor(v) == v end)\nend", " \
    \   local result = {}\n    for i,v in ipairs(values) do\n        if type(v) ==\
    \ 'number' and v % 1 == 0 then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend", "    local ints = {}\n    for i, v in ipairs(values)\
    \ do\n        if type(v) == 'number' and math.floor(v) == v then\n           \
    \ table.insert(ints, v)\n        end\n    end\n    return ints\nend", "    local\
    \ integers = {}\n    for _, value in ipairs(values) do\n        if type(value)\
    \ == 'number' and value % 1 == 0 then\n            table.insert(integers, value)\n\
    \        end\n    end\n    return integers\nend", "    return util.filter(values,\
    \ function(x) return type(x) == 'number' and not x % 1 end)\nend", "  return filter(values,\
    \ is_integer)\nend", "    local t = {}\n    for k, v in pairs(values) do\n   \
    \     if type(v) == 'number' and math.floor(v) == v then\n            table.insert(t,\
    \ v)\n        end\n    end\n    return t\nend", "  local res = {}\n  for i, value\
    \ in ipairs(values) do\n    if type(value) == 'number' and value == math.floor(value)\
    \ then\n      table.insert(res, value)\n    end\n  end\n  return res\nend", " \
    \   local result = {}\n    for i = 1, #values do\n        local v = values[i]\n\
    \        if type(v) == 'number' and v % 1 == 0 then\n            result[#result\
    \ + 1] = v\n        end\n    end\n    return result\nend", "    return clist.filter(values,\
    \ function(v) return type(v) == 'number' end)\nend", "    local res = {}\n   \
    \ for _, item in ipairs(values) do\n        if type(item) == 'number' and item\
    \ % 1 == 0 then\n            res[#res + 1] = item\n        end\n    end\n    return\
    \ res\nend", "    local result = {}\n    for _, v in ipairs(values) do\n     \
    \   if type(v) == 'number' and v % 1 == 0 then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    return filter(is_integer,\
    \ values)\nend", "    local result = {}\n    for _, val in ipairs(values) do\n\
    \        if type(val) == 'number' and math.floor(val) == val then\n          \
    \  table.insert(result, val)\n        end\n    end\n    return result\nend", " \
    \   return filter(is_integer, values)\nend", "    local result = {}\n    for _,\
    \ value in ipairs(values) do\n        if type(value) == 'number' and math.floor(value)\
    \ == value then\n            table.insert(result, value)\n        end\n    end\n\
    \    return result\nend", "  if values == nil then\n    return {}\n  end\n  return\
    \ filter(function(v) return type(v) == 'number' and math.floor(v) == v end, values)\n\
    end", "  return List.filter(values, function(v) return type(v) == 'number' end)\n\
    end", "    local res = {}\n    for k, v in pairs(values) do\n        if type(v)\
    \ == 'number' and math.floor(v) == v then\n            table.insert(res, v)\n\
    \        end\n    end\n    return res\nend", "    local result = {}\n    for _,\
    \ v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v) ==\
    \ v then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "    local res = {}\n    for _, value in ipairs(values) do\n \
    \       if is_int(value) then\n            table.insert(res, value)\n        end\n\
    \    end\n    return res\nend", "    local result = {}\n    for _, value in ipairs(values)\
    \ do\n        if type(value) == 'number' and value == floor(value) then\n    \
    \        table.insert(result, value)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, value in ipairs(values) do\n        if\
    \ type(value) == 'number' and value % 1 == 0 then\n            result[#result\
    \ + 1] = value\n        end\n    end\n    return result\nend", "  local integers\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(integers, v)\n    end\n  end\n  return integers\n\
    end", "    local result = {}\n    for _, value in ipairs(values) do\n        if\
    \ type(value) == 'number' and value % 1 == 0 then\n            table.insert(result,\
    \ value)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for k, v in pairs(values) do\n        if type(v) == 'number' and v % 1 ==\
    \ 0 then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    for _, value in ipairs(values) do\n\
    \        if type(value) == 'number' and math.floor(value) == value then\n    \
    \        table.insert(result, value)\n        end\n    end\n    return result\n\
    end", "    return map(values, function(x)\n        if type(x) == 'number' and\
    \ x == math.floor(x) then\n            return x\n        end\n    end)\nend",
  "    local ret = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number'\
    \ and v == math.floor(v) then\n            table.insert(ret, v)\n        end\n\
    \    end\n    return ret\nend", "  local integers = {}\n  for _, value in ipairs(values)\
    \ do\n    if type(value) == 'number' and value % 1 == 0 then\n      table.insert(integers,\
    \ value)\n    end\n  end\n  return integers\nend", "  return filter(values, is_integer)\n\
    end", "    local ret = {}\n    for i,v in ipairs(values) do\n        if type(v)\
    \ == 'number' and v % 1 == 0 then\n            table.insert(ret, v)\n        end\n\
    \    end\n    return ret\nend", "    local integers = {}\n    for _, value in\
    \ ipairs(values) do\n        if type(value) == 'number' and value % 1 == 0 then\n\
    \            table.insert(integers, value)\n        end\n    end\n    return integers\n\
    end", "    local res = {}\n    for i, v in ipairs(values) do\n        if type(v)\
    \ == 'number' and v == math.floor(v) then\n            table.insert(res, v)\n\
    \        end\n    end\n    return res\nend", "    return filter(values, is_integer)\n\
    end", "  local ints = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number'\
    \ and floor(v) == v then\n      ints[#ints + 1] = v\n    end\n  end\n  return\
    \ ints\nend", "    local res = {}\n    for _, val in ipairs(values) do\n     \
    \   if is_integer(val) then\n            table.insert(res, val)\n        end\n\
    \    end\n    return res\nend", "  local result = {}\n  for _, value in ipairs(values)\
    \ do\n    if type(value) == 'number' and math.floor(value) == value then\n   \
    \   table.insert(result, value)\n    end\n  end\n  return result\nend", "  local\
    \ result = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number'\
    \ and math.tointeger(value) == value then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend", "  local filtered = {}\n  for _, value\
    \ in ipairs(values) do\n    if type(value) == 'number' and math.floor(value) ==\
    \ value then\n      table.insert(filtered, value)\n    end\n  end\n  return filtered\n\
    end", "  return filter(function(v) return type(v) == 'number' and v % 1 == 0 end,\
    \ values)\nend", "  return _.filter(values, function(v) return isinteger(v) end)\n\
    end", "    local filtered = {}\n    for k,v in pairs(values) do\n        if (type(v)\
    \ == 'number' and math.floor(v) == v) then\n            table.insert(filtered,\
    \ v)\n        end\n    end\n    return filtered\nend", "    local result = {}\n\
    \    for _, value in ipairs(values) do\n        if type(value) == 'number' and\
    \ value == math.floor(value) then\n            table.insert(result, value)\n \
    \       end\n    end\n    return result\nend", "    local filter_fn = function(val)\n\
    \        return type(val) == 'number' and (math.floor(val) == val)\n    end\n\
    \    return filter(values, filter_fn)\nend", "    local integers = {}\n    for\
    \ i, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ == math.floor(value) then\n            table.insert(integers, value)\n     \
    \   end\n    end\n    return integers\nend", "  local res = {}\n  for _, v in\
    \ ipairs(values) do\n    if type(v) == 'number' and v == floor(v) then\n     \
    \ table.insert(res, v)\n    end\n  end\n  return res\nend", "    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.tointeger(v) then\n            table.insert(result, v)\n        end\n \
    \   end\n    return result\nend", "    return filter(is_integer, values)\nend",
  "  local result = {}\n  for i, v in ipairs(values) do\n    if type(v) == 'number'\
    \ and v == math.floor(v) then\n      table.insert(result, v)\n    end\n  end\n\
    \  return result\nend", "    local integers = {}\n    for _, value in ipairs(values)\
    \ do\n        if (type(value) == 'number' and math.floor(value) == value) then\n\
    \            table.insert(integers, value)\n        end\n    end\n    return integers\n\
    end", "    return filter(values, function(value)\n        return type(value) ==\
    \ 'number' and (value % 1) == 0\n    end)\nend", "    local result = {}\n    for\
    \ _,v in ipairs(values) do\n        if type(v) == 'number' and v % 1 == 0 then\n\
    \            result[#result+1] = v\n        end\n    end\n    return result\n\
    end", "    local ret = {}\n    for _, v in ipairs(values) do\n        if type(v)\
    \ == 'number' and v == math.floor(v) then\n            table.insert(ret, v)\n\
    \        end\n    end\n    return ret\nend", "    return filter(values, function(value)\n\
    \        return is_integer(value)\n    end)\nend", "  local filtered = {}\n  for\
    \ k, v in pairs(values) do\n    if type(v) == 'number' and v % 1 == 0 then\n \
    \     filtered[#filtered + 1] = v\n    end\n  end\n  return filtered\nend", " \
    \   local filtered = {}\n    for _, value in ipairs(values) do\n        if is_number(value)\
    \ then\n            table.insert(filtered, value)\n        end\n    end\n    return\
    \ filtered\nend", "    local ints = {}\n    for _, v in ipairs(values) do\n  \
    \      if type(v) == 'number' and v % 1 == 0 then\n            table.insert(ints,\
    \ v)\n        end\n    end\n    return ints\nend", "    local result = {}\n  \
    \  for _, v in ipairs(values) do\n        if is_integer(v) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, value in ipairs(values) do\n        if isinteger(value) then\n   \
    \         table.insert(result, value)\n        end\n    end\n    return result\n\
    end", "    local integers = {}\n    for i, value in ipairs(values) do\n      \
    \  if (type(value) == 'number' and value % 1 == 0) then\n            table.insert(integers,\
    \ value)\n        end\n    end\n    return integers\nend", "    local ret = {}\n\
    \    for _, v in ipairs(values) do\n        if is_integer(v) then\n          \
    \  table.insert(ret, v)\n        end\n    end\n    return ret\nend", "    return\
    \ list(filter(is_integer, values))\nend", "  local retval = {}\n  for _, v in\
    \ ipairs(values) do\n    if type(v) == 'number' and v % 1 == 0 then\n      table.insert(retval,\
    \ v)\n    end\n  end\n  return retval\nend", "  return filter(function(v) return\
    \ type(v) == 'number' and v >= 0 and math.floor(v) == v end, values)\nend", " \
    \   local res = {}\n    for _, value in ipairs(values) do\n        if type(value)\
    \ == 'number' and value % 1 == 0 then\n            table.insert(res, value)\n\
    \        end\n    end\n    return res\nend", "  return filter(function(v) return\
    \ type(v) == 'number' and math.floor(v) == v end, values)\nend", "    local integers\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value == math.floor(value) then\n            integers[#integers + 1] = value\n\
    \        end\n    end\n    return integers\nend", "    local new_values = {}\n\
    \    for k, v in pairs(values) do\n        if type(v) == 'number' and v == math.floor(v)\
    \ then\n            table.insert(new_values, v)\n        end\n    end\n    return\
    \ new_values\nend", "    local integers = {}\n    for _, value in ipairs(values)\
    \ do\n        if type(value) == 'number' and math.floor(value) == value then\n\
    \            table.insert(integers, value)\n        end\n    end\n    return integers\n\
    end", "    return _.filter(values,\n            function(value)\n            \
    \    return _.isnumber(value) and (value % 1 == 0)\n            end)\nend", " \
    \   return filter(is_integer, values)\nend", "    local function is_integer(value)\n\
    \        return type(value) == 'number' and value % 1 == 0\n    end\n    return\
    \ List.filter(is_integer, values)\nend", "    local result = {}\n    for _, v\
    \ in ipairs(values) do\n        if type(v) == 'number' and v == math.floor(v)\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "    local res = {}\n    for _, value in ipairs(values) do\n \
    \       if type(value) == 'number' and\n                math.floor(value) == value\
    \ then\n            table.insert(res, value)\n        end\n    end\n    return\
    \ res\nend", "    local result = {}\n    for i = 1, #values do\n        local\
    \ value = values[i]\n        if is_integer(value) then\n            table.insert(result,\
    \ value)\n        end\n    end\n    return result\nend", "  local tmp = {}\n \
    \ for i, value in ipairs(values) do\n    if type(value) == 'number' and value\
    \ % 1 == 0 then\n      table.insert(tmp, value)\n    end\n  end\n  return tmp\n\
    end", "  local ret = {}\n  for i, v in ipairs(values) do\n    if (type(v) == 'number'\
    \ and v % 1 == 0) then\n      table.insert(ret, v)\n    end\n  end\n  return ret\n\
    end", "  local result = {}\n  for _, value in ipairs(values) do\n    if type(value)\
    \ == 'number' and math.floor(value) == value then\n      table.insert(result,\
    \ value)\n    end\n  end\n  return result\nend", "    return filter(values, function(v)\
    \ return type(v) == 'number' and v % 1 == 0 end)\nend", "    return fun.iter(values):filter(function(v)\
    \ return type(v) == 'number' end):totable()\nend", "    local result = {}\n  \
    \  for _,v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "    local list = list_new()\n    for _, value in pairs(values)\
    \ do\n        if is_integer(value) then\n            list_append(list, value)\n\
    \        end\n    end\n    return list\nend", "    return filter(values, function(x)\
    \ return type(x) == 'number' and x % 1 == 0 end)\nend", "    local integers =\
    \ {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(integers, value)\n\
    \        end\n    end\n    return integers\nend", "    return filter(values, function(x)\
    \ return type(x) == 'number' and math.floor(x) == x end)\nend", "    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if is_python_integer(value)\
    \ then\n            table.insert(result, value)\n        end\n    end\n    return\
    \ result\nend", "    if (not values) then\n        return {}\n    end\n    local\
    \ integers = {}\n    for _, value in ipairs(values) do\n        if (type(value)\
    \ == 'number' and (value % 1) == 0) then\n            table.insert(integers, value)\n\
    \        end\n    end\n    return integers\nend", "    local result = {}\n   \
    \ for _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ % 1 == 0 then\n            table.insert(result, value)\n        end\n    end\n\
    \    return result\nend", "  local new_list = {}\n  for _, value in ipairs(values)\
    \ do\n    if type(value) == 'number' and math.floor(value) == value then\n   \
    \   new_list[#new_list + 1] = value\n    end\n  end\n  return new_list\nend",
  "    return filter(values, function(value)\n        return is_integer(value)\n \
    \   end)\nend", "  return check_types(values, 'integer')\nend", "    local ret\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value == math.floor(value) then\n            table.insert(ret, value)\n\
    \        end\n    end\n    return ret\nend", "    return filter(function(value)\n\
    \        return type(value) == 'number' and math.floor(value) == value\n    end,\
    \ values)\nend", "    local result = {}\n    for _, v in ipairs(values) do\n \
    \       if type(v) == 'number' and v % 1 == 0 then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "  local result = {}\n  for\
    \ _, value in ipairs(values) do\n    if type(value) == 'number' and value == math.floor(value)\
    \ then\n      table.insert(result, value)\n    end\n  end\n  return result\nend",
  "    local ints = {}\n    for _, value in ipairs(values) do\n        if type(value)\
    \ == 'number' and value % 1 == 0 then\n            table.insert(ints, value)\n\
    \        end\n    end\n    return ints\nend", "  return _.filter(values, function(v)\
    \ return type(v) == 'number' end)\nend", "    return List.filter(values, function(v)\
    \ return type(v) == 'number' end)\nend", "  return filter(values, is_integer)\n\
    end", "  local result = {}\n  for i, v in ipairs(values) do\n    if type(v) ==\
    \ 'number' and math.floor(v) == v then\n      table.insert(result, v)\n    end\n\
    \  end\n  return result\nend", "    return f.filter(is_integer, values)\nend",
  "    local res = {}\n    for _, value in ipairs(values) do\n        if type(value)\
    \ == 'number' and value == math.floor(value) then\n            table.insert(res,\
    \ value)\n        end\n    end\n    return res\nend", "    local result = {}\n\
    \    for _, value in ipairs(values) do\n        if type(value) == 'number' and\
    \ value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, value in\
    \ ipairs(values) do\n        if is_integer(value) then\n            table.insert(result,\
    \ value)\n        end\n    end\n    return result\nend", "  return util.filter(function(value)\n\
    \    return type(value) == 'number' and math.floor(value) == value\n  end, values)\n\
    end", "    return __.filter(__.isInteger)(values)\nend", "    return filter(values,\
    \ is_integer)\nend", "    local result = {}\n    for _, value in ipairs(values)\
    \ do\n        if type(value) == 'number' and value % 1 == 0 then\n           \
    \ result[#result + 1] = value\n        end\n    end\n    return result\nend",
  "  local ret = {}\n  for i, v in ipairs(values) do\n    if v ~= nil and (type(v)\
    \ == 'number' or type(v) == 'string') and string.match(v, '^-?%d+$') then\n  \
    \    ret[#ret + 1] = tonumber(v)\n    end\n  end\n  return ret\nend", "  return\
    \ filter(values, is_integer)\nend", "  local result = {}\n  for i, v in ipairs(values)\
    \ do\n    if type(v) == 'number' and v % 1 == 0 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "    local ints = {}\n    for _,\
    \ v in ipairs(values) do\n        if is_integer(v) then\n            table.insert(ints,\
    \ v)\n        end\n    end\n    return ints\nend", "    return filter(values,\
    \ function(value)\n        return type(value) == 'number' and math.floor(value)\
    \ == value\n    end)\nend", "    local ret = {}\n    for _, v in ipairs(values)\
    \ do\n        if type(v) == 'number' and v % 1 == 0 then\n            table.insert(ret,\
    \ v)\n        end\n    end\n    return ret\nend", "    return filter(values, function(val)\n\
    \        return type(val) == 'number' and val % 1 == 0\n    end)\nend", "  local\
    \ integers = {}\n  for _, val in ipairs(values) do\n    if type(val) == 'number'\
    \ and math.floor(val) == val then\n      table.insert(integers, val)\n    end\n\
    \  end\n  return integers\nend", "  return filter(is_integer, values)\nend", " \
    \   local result = {}\n    for _, v in ipairs(values) do\n        if type(v) ==\
    \ 'number' and math.floor(v) == v then\n            table.insert(result, v)\n\
    \        end\n    end\n    return result\nend", "    local function is_number(value)\n\
    \        return is_integer(value)\n    end\n    return filter(values, is_number)\n\
    end", "  local res = {}\n  for _, v in ipairs(values) do\n    if v == math.floor(v)\
    \ then\n      res[#res + 1] = v\n    end\n  end\n  return res\nend", "    local\
    \ integers = {}\n    for _, value in ipairs(values) do\n        if type(value)\
    \ == 'number' and value % 1 == 0 then\n            table.insert(integers, value)\n\
    \        end\n    end\n    return integers\nend", "    local numbers = {}\n  \
    \  for _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ % 1 == 0 then\n            table.insert(numbers, value)\n        end\n    end\n\
    \    return numbers\nend", "    local result = {}\n    for _, v in ipairs(values)\
    \ do\n        if type(v) == 'number' and v % 1 == 0 then\n            result[#result\
    \ + 1] = v\n        end\n    end\n    return result\nend", "  return list.filter(function(v)\
    \ return type(v) == 'number' end, values)\nend", "  local result = {}\n  for _,\
    \ v in ipairs(values) do\n    if type(v) == 'number' and v % 1 == 0 then\n   \
    \   table.insert(result, v)\n    end\n  end\n  return result\nend", "  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end", "    local integers = {}\n    for _, v in ipairs(values) do\n        if\
    \ type(v) == 'number' and v % 1 == 0 then\n            table.insert(integers,\
    \ v)\n        end\n    end\n    return integers\nend", "    local result = {}\n\
    \    for _, value in ipairs(values) do\n        if type(value) == 'number' and\
    \ value == math.floor(value) then\n            table.insert(result, value)\n \
    \       end\n    end\n    return result\nend", "  return filter(values, function(v)\
    \ return type(v) == 'number' and math.floor(v) == v end)\nend", "    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, v in ipairs(values)\
    \ do\n        if math.type(v) == 'integer' then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    return filter(function(v)\
    \ return type(v) == 'number' and v % 1 == 0 end, values)\nend", "    return filter(values,\
    \ is_integer)\nend", "    local result = {}\n    for _, v in ipairs(values) do\n\
    \        if type(v) == 'number' and math.floor(v) == v then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    if type(values) ~= 'table'\
    \ then\n        raise_error('argument must be a table, not %s', type(values))\n\
    \    end\n    local result = {}\n    for i, value in ipairs(values) do\n     \
    \   if type(value) == 'number' and math.floor(value) == value then\n         \
    \   result[#result + 1] = value\n        end\n    end\n    return result\nend",
  "  local lst = {}\n  for _, v in ipairs(values) do\n    if is_integer(v) then\n\
    \      table.insert(lst, v)\n    end\n  end\n  return lst\nend", "    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v == math.floor(v) then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend", "    local out = {}\n    for _, value in ipairs(values)\
    \ do\n        if is_integer(value) then\n            table.insert(out, value)\n\
    \        end\n    end\n    return out\nend", "    local res = {}\n    for _, v\
    \ in ipairs(values) do\n        if type(v) == 'number' and math.floor(v) == v\
    \ then\n            table.insert(res, v)\n        end\n    end\n    return res\n\
    end", "  return tablex.filter(values, is_integer)\nend", "    return filter(function(v)\
    \ return (type(v) == 'number' and v % 1 == 0) end, values)\nend", "    local result\
    \ = {}\n    for i, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v == math.floor(v) then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend", "    local r = {}\n    for _, value in ipairs(values)\
    \ do\n        if type(value) == 'number' and value == math.floor(value) then\n\
    \            r[#r + 1] = value\n        end\n    end\n    return r\nend", "  \
    \  if not values then\n        return {}\n    end\n    return Array.filter(values,\
    \ function(e) return type(e) == 'number' end)\nend", "    local results = {}\n\
    \    for _, value in ipairs(values) do\n        if type(value) == 'number' and\
    \ value == math.tointeger(value) then\n            table.insert(results, value)\n\
    \        end\n    end\n    return results\nend", "  return filter(values, function(value)\n\
    \    return type(value) == 'number' and math.floor(value) == value\n  end)\nend",
  "    local result = {}\n    for i, val in ipairs(values) do\n        if type(val)\
    \ == 'number' and val == math.floor(val) then\n            table.insert(result,\
    \ val)\n        end\n    end\n    return result\nend", "    return filter(values,\
    \ is_integer)\nend", "    local result = {}\n    for _, val in ipairs(values)\
    \ do\n        if lua.is_integer(val) then\n            table.insert(result, val)\n\
    \        end\n    end\n    return result\nend", "    return filter(values, is_integer)\n\
    end", "    local _values = {}\n    for k, v in pairs(values) do\n        if tonumber(v)\
    \ ~= nil then\n            table.insert(_values, v)\n        end\n    end\n  \
    \  return _values\nend", "    local result = {}\n    for index, value in ipairs(values)\
    \ do\n        if is_integer(value) then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and math.floor(value)\
    \ == value then\n            table.insert(result, value)\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    for _, v in ipairs(values)\
    \ do\n        if type(v) == 'number' and v % 1 == 0 then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    local out = {}\n   \
    \ for _, v in ipairs(values) do\n        if (type(v) == 'number' and v % 1 ==\
    \ 0) then\n            table.insert(out, v)\n        end\n    end\n    return\
    \ out\nend", "  return filter(is_integer, values)\nend", "    local res = {}\n\
    \    for i, v in ipairs(values) do\n        if type(v) == 'number' and v % 1 ==\
    \ 0 then\n            table.insert(res, v)\n        end\n    end\n    return res\n\
    end", "    local copy = copytable(values)\n    for k, v in pairs(copy) do\n  \
    \      if type(v) ~= 'number' or v ~= math.floor(v) then\n            copy[k]\
    \ = nil\n        end\n    end\n    return copy\nend", "  local integers = {}\n\
    \  for _, v in ipairs(values) do\n    if type(v) == 'number' and not math.type(v)\
    \ == 'float' then\n      table.insert(integers, v)\n    end\n  end\n  return integers\n\
    end", "    local result = {}\n    for _, value in ipairs(values) do\n        if\
    \ type(value) == 'number' and math.floor(value) == value then\n            table.insert(result,\
    \ value)\n        end\n    end\n    return result\nend", "  local result = {}\n\
    \  for _, value in ipairs(values) do\n    if type(value) == 'number' and value\
    \ % 1 == 0 then\n      result[#result + 1] = value\n    end\n  end\n  return result\n\
    end", "  local integers = {}\n  for index, value in ipairs(values) do\n    if\
    \ type(value) == 'number' and math.floor(value) == value then\n      table.insert(integers,\
    \ value)\n    end\n  end\n  return integers\nend", "  return filter(function(x)\
    \ return type(x) == 'number' and x % 1 == 0 end, values)\nend", "    local result\
    \ = {}\n    for i, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend", "    local res = {}\n    for _, value in ipairs(values)\
    \ do\n        if type(value) == 'number' and floor(value) == value then\n    \
    \        table.insert(res, value)\n        end\n    end\n    return res\nend",
  "    local ints = {}\n    for i, val in ipairs(values) do\n        if type(val)\
    \ == 'number' and val == math.floor(val) then\n            table.insert(ints,\
    \ val)\n        end\n    end\n    return ints\nend", "    local result = {}\n\
    \    for _, value in ipairs(values) do\n        if type(value) == 'number' and\
    \ value % 1 == 0 then\n            result[#result + 1] = value\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, value in\
    \ ipairs(values) do\n        if is_integer(value) then\n            table.insert(result,\
    \ value)\n        end\n    end\n    return result\nend", "    local integers =\
    \ {}\n    for _, v in ipairs(values) do\n        if is_integer(v) then\n     \
    \       table.insert(integers, v)\n        end\n    end\n    return integers\n\
    end", "    local result = {}\n    for _, value in ipairs(values) do\n        if\
    \ type(value) == 'number' and math.floor(value) == value then\n            table.insert(result,\
    \ value)\n        end\n    end\n    return result\nend", "  local res = {}\n \
    \ for _, val in ipairs(values) do\n    if val == math.floor(val) then\n      table.insert(res,\
    \ val)\n    end\n  end\n  return res\nend", "    local res = {}\n    for _, val\
    \ in ipairs(values) do\n        if type(val) == 'number' and math.floor(val) ==\
    \ val then\n            table.insert(res, val)\n        end\n    end\n    return\
    \ res\nend", "  return dk.filter(values, function(v) return type(v) == 'number'\
    \ end)\nend", "  return _.filter(values, function(value)\n    return (type(value)\
    \ == 'number' and value % 1 == 0)\n  end)\nend", "    return filter(values, function(val)\n\
    \        return type(val) == 'number' and math.floor(val) == val\n    end)\nend",
  "  local result = {}\n  for _, value in ipairs(values) do\n    if type(value) ==\
    \ 'number' and math.floor(value) == value then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend", "  local function is_integer(value)\n\
    \    return type(value) == 'number' and value % 1 == 0\n  end\n  return filter(values,\
    \ is_integer)\nend", "  return filter(values, function(x) return type(x) == 'number'\
    \ and x % 1 == 0 end)\nend", "    local only_integers = {}\n    for _, value in\
    \ ipairs(values) do\n        if type(value) == 'number' and value == math.floor(value)\
    \ then\n            table.insert(only_integers, value)\n        end\n    end\n\
    \    return only_integers\nend", "    local integers = {}\n    for _, value in\
    \ ipairs(values) do\n        if type(value) == 'number' and value % 1 == 0 then\n\
    \            table.insert(integers, value)\n        end\n    end\n    return integers\n\
    end", "    local integers = {}\n    for _, value in ipairs(values) do\n      \
    \  if type(value) == 'number' and value == math.floor(value) then\n          \
    \  table.insert(integers, value)\n        end\n    end\n    return integers\n\
    end", "  local result = {}\n  for _, value in ipairs(values) do\n    if is_int(value)\
    \ then\n      table.insert(result, value)\n    end\n  end\n  return result\nend",
  "    if values and values[1] then\n        local result = {}\n        for _,v in\
    \ ipairs(values) do\n            if type(v) == 'number' and math.floor(v) == v\
    \ then\n                table.insert(result, v)\n            end\n        end\n\
    \        return result\n    end\nend", "    local result = {}\n    for _, v in\
    \ ipairs(values) do\n        if type(v) == 'number' and math.floor(v) == v then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end", "    local integers = {}\n    local j = 1\n    for i, v in ipairs(values)\
    \ do\n        if type(v) == 'number' and v % 1 == 0 then\n            integers[j]\
    \ = v\n            j = j + 1\n        end\n    end\n    return integers\nend",
  "    return filter(values, function(v) return v == tonumber(v) end)\nend", "  local\
    \ integers = {}\n  for _, value in ipairs(values) do\n    if is_integer(value)\
    \ then\n      table.insert(integers, value)\n    end\n  end\n  return integers\n\
    end", "    local numbers = {}\n    for _, value in ipairs(values) do\n       \
    \ if type(value) == 'number' and value == math.floor(value) then\n           \
    \ table.insert(numbers, value)\n        end\n    end\n    return numbers\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
