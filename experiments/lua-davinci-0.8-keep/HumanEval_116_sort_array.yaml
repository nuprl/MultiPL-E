name: HumanEval_116_sort_array
language: lua
prompt: "-- In this Kata, you have to sort an array of non-negative integers according\
  \ to\n-- number of ones in their binary representation in ascending order.\n-- For\
  \ similar number of ones, sort based on decimal value.\n-- It must be implemented\
  \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
  \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4]) [0,\
  \ 1, 2, 3, 4]\nlocal function sort_array(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
  \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
  \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
  \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
  \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
  \ 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function count_ones(n)\n    local s = string.format(\"%x\"\
    , n)\n    local c = 0\n    for i = 1, #s do\n      if s:sub(i, i) == \"1\" then\n\
    \        c = c + 1\n      end\n    end\n    return c\n  end\n  local function\
    \ comp(x, y)\n    local c = count_ones(x) - count_ones(y)\n    if c == 0 then\n\
    \      return x - y\n    else\n      return c\n    end\n  end\n  table.sort(arr,\
    \ comp)\n  return arr\nend", "  table.sort(arr, sort_value)\n  return arr\nend",
  "  local sort_arr = {}\n  for i = 1, #arr do\n    sort_arr[i] = 0\n    while arr[i]\
    \ > 0 do\n      sort_arr[i] = sort_arr[i] + (arr[i] % 2)\n      arr[i] = math.floor(arr[i]\
    \ / 2)\n    end\n  end\n  return bubble_sort(arr, sort_arr)\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a_bin = tostring(a):gsub('-', ''):reverse()\n    local\
    \ b_bin = tostring(b):gsub('-', ''):reverse()\n    local a_ones = a_bin:gsub('0',\
    \ ''):len()\n    local b_ones = b_bin:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return tonumber(a_bin) < tonumber(b_bin)\n    else\n      return\
    \ a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  return table.sort(arr,\
    \ function(a, b)\n    if get_num_ones(a) < get_num_ones(b) then\n      return\
    \ true\n    elseif get_num_ones(a) > get_num_ones(b) then\n      return false\n\
    \    else\n      return a < b\n    end\n  end)\nend", "  -- ...\nend", "  table.sort(arr,\
    \ function(a, b)\n    local onesA = 0\n    local onesB = 0\n    local binA = a\n\
    \    local binB = b\n    while binA > 0 do\n      if bit.band(binA, 1) == 1 then\n\
    \        onesA = onesA + 1\n      end\n      binA = bit.rshift(binA, 1)\n    end\n\
    \    while binB > 0 do\n      if bit.band(binB, 1) == 1 then\n        onesB =\
    \ onesB + 1\n      end\n      binB = bit.rshift(binB, 1)\n    end\n    if onesA\
    \ == onesB then\n      return a < b\n    else\n      return onesA < onesB\n  \
    \  end\n  end)\n  return arr\nend", "  if #arr == 0 then return arr end\n  local\
    \ new_arr = {}\n  for i = 1, #arr do\n    new_arr[i] = {}\n    new_arr[i][1] =\
    \ arr[i]\n    new_arr[i][2] = arr[i] .. ''\n    new_arr[i][3] = #(new_arr[i][2]:gsub('1',\
    \ ''))\n  end\n  local tab = {}\n  for i = 1, #new_arr do\n    for j = 1, #new_arr\
    \ - 1 do\n      if new_arr[j][3] < new_arr[j + 1][3] then\n        tab = new_arr[j]\n\
    \        new_arr[j] = new_arr[j + 1]\n        new_arr[j + 1] = tab\n      elseif\
    \ new_arr[j][3] == new_arr[j + 1][3] then\n        if new_arr[j][1] > new_arr[j\
    \ + 1][1] then\n          tab = new_arr[j]\n          new_arr[j] = new_arr[j +\
    \ 1]\n          new_arr[j + 1] = tab\n        end\n      end\n    end\n  end\n\
    \  for i = 1, #new_arr do\n    new_arr[i] = new_arr[i][1]\n  end\n  return new_arr\n\
    end", "  table.sort(arr, function(a, b)\n    if a == b then return false end\n\
    \    local a1 = tostring(a):gsub('%d', '')\n    local b1 = tostring(b):gsub('%d',\
    \ '')\n    if #a1 == #b1 then\n      return a < b\n    else\n      return #a1\
    \ < #b1\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n\
    \    local a_ones = (tostring(a):gsub('0', ''):gsub('-', '')):len()\n    local\
    \ b_ones = (tostring(b):gsub('0', ''):gsub('-', '')):len()\n    if a_ones ~= b_ones\
    \ then\n      return a_ones < b_ones\n    else\n      return a < b\n    end\n\
    \  end)\n  return arr\nend", "    local number_to_ones = {}\n    local ones_counts\
    \ = {}\n    local result = {}\n    for i, n in ipairs(arr) do\n        local ones\
    \ = count_ones(n)\n        if number_to_ones[ones] == nil then\n            number_to_ones[ones]\
    \ = {}\n            table.insert(ones_counts, ones)\n        end\n        table.insert(number_to_ones[ones],\
    \ n)\n    end\n    table.sort(ones_counts)\n    for _, ones in ipairs(ones_counts)\
    \ do\n        table.sort(number_to_ones[ones])\n        for _, n in ipairs(number_to_ones[ones])\
    \ do\n            table.insert(result, n)\n        end\n    end\n    return result\n\
    end", "  table.sort(arr, function(a, b)\n    local da, db = bit.tonumber(bit.tobit(a)),\
    \ bit.tonumber(bit.tobit(b))\n    local ca, cb = string.len(da), string.len(db)\n\
    \    if ca ~= cb then\n      return ca < cb\n    else\n      return a < b\n  \
    \  end\n  end)\n  return arr\nend", "    table.sort(arr, function(a, b)\n    \
    \    local ra = a >= 0 and a or -a\n        local rb = b >= 0 and b or -b\n  \
    \      local n1 = math.floor(math.log(ra, 2))\n        local n2 = math.floor(math.log(rb,\
    \ 2))\n        if n1 == n2 then\n            return a < b\n        else\n    \
    \        return n1 < n2\n        end\n    end)\n    return arr\nend", "    table.sort(arr,\
    \ function(a, b)\n        local sa = string.format(\"%b\", a)\n        local sb\
    \ = string.format(\"%b\", b)\n        local la = #sa\n        local lb = #sb\n\
    \        if la == lb then\n            return a < b\n        else\n          \
    \  return la < lb\n        end\n    end)\n    return arr\nend\n_exports.sort_array\
    \ = sort_array", "  return table.sort(arr, function(a, b)\n    return a:count('1')\
    \ == b:count('1') and a < b or a:count('1') < b:count('1')\n  end)\nend", "\t\
    local function cmp(a, b)\n\t\tlocal oa, ob = 0, 0\n\t\twhile a > 0 do\n\t\t\t\
    oa = oa + a % 2\n\t\t\ta = math.floor(a / 2)\n\t\tend\n\t\twhile b > 0 do\n\t\t\
    \tob = ob + b % 2\n\t\t\tb = math.floor(b / 2)\n\t\tend\n\t\tif oa == ob then\n\
    \t\t\treturn a < b\n\t\telse\n\t\t\treturn oa < ob\n\t\tend\n\tend\n\ttable.sort(arr,\
    \ cmp)\n\treturn arr\nend", "  table.sort(arr, function(a, b)\n    local x, y\
    \ = a, b\n    a, b = a - a % 2, b - b % 2\n    while a > 0 do\n      a, b = a\
    \ / 2, b / 2\n      if a % 2 ~= b % 2 then\n        return a % 2 > b % 2\n   \
    \   end\n    end\n    return x < y\n  end)\n  return arr\nend", "  table.sort(arr,\
    \ function(x, y)\n    local xn, yn = 0, 0\n    for c in tostring(x):gmatch('[01]')\
    \ do\n      xn = xn + 1\n    end\n    for c in tostring(y):gmatch('[01]') do\n\
    \      yn = yn + 1\n    end\n    if xn < yn then\n      return true\n    elseif\
    \ xn > yn then\n      return false\n    else\n      return x < y\n    end\n  end)\n\
    \  return arr\nend", "    local cache = {}\n    for _, v in ipairs(arr) do\n \
    \       local key = string.len(v:gsub('0', ''))\n        if not cache[key] then\n\
    \            cache[key] = {}\n        end\n        table.insert(cache[key], v)\n\
    \    end\n    local keys = {}\n    for k, _ in pairs(cache) do\n        table.insert(keys,\
    \ k)\n    end\n    table.sort(keys)\n    local result = {}\n    for _, k in ipairs(keys)\
    \ do\n        table.sort(cache[k])\n        for _, v in ipairs(cache[k]) do\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end", "  table.sort(arr, function(a, b)\n    local f = function(n)\n      return\
    \ tonumber(string.format(\"%b\", n):reverse())\n    end\n    return f(a) < f(b)\n\
    \  end)\n  return arr\nend", "  local to_sort = {}\n  for i, v in ipairs(arr)\
    \ do\n    to_sort[i] = {\n      v,\n      string.gsub(string.format(\"%b10\",\
    \ v), \"0\", \"\")\n    }\n  end\n  table.sort(to_sort, function(x, y)\n    if\
    \ #x[2] < #y[2] then\n      return true\n    elseif #x[2] > #y[2] then\n     \
    \ return false\n    else\n      return x[1] < y[1]\n    end\n  end)\n  for i,\
    \ v in ipairs(to_sort) do\n    arr[i] = v[1]\n  end\n  return arr\nend", "   \
    \ local t = {}\n    for _, v in ipairs(arr) do\n        t[#t + 1] = {val = v,\
    \ ones = v:to_str(2):count(\"1\")}\n    end\n    table.sort(t, function(a, b)\n\
    \        if a.ones == b.ones then\n            return a.val < b.val\n        else\n\
    \            return a.ones < b.ones\n        end\n    end)\n    local res = {}\n\
    \    for _, v in ipairs(t) do\n        res[#res + 1] = v.val\n    end\n    return\
    \ res\nend", "  local max_ones = 0\n  for i,n in ipairs(arr) do\n    if n > 0\
    \ then\n      max_ones = math.max(max_ones, n)\n    end\n  end\n  local b1 = max_ones\n\
    \  local powers = {}\n  while b1 > 0 do\n    table.insert(powers, b1 % 2)\n  \
    \  b1 = math.floor(b1 / 2)\n  end\n  local function less(a, b)\n    local function\
    \ num_ones(n)\n      local ones = 0\n      for i,p in ipairs(powers) do\n    \
    \    if n > 0 then\n          if p <= n then\n            ones = ones + 1\n  \
    \          n = n - p\n          end\n        end\n      end\n      return ones\n\
    \    end\n    local oa = num_ones(a)\n    local ob = num_ones(b)\n    if oa ==\
    \ ob then\n      return a < b\n    else\n      return oa < ob\n    end\n  end\n\
    \  table.sort(arr, less)\n  return arr\nend", "  local sorted_arr = {}\n  for\
    \ _, value in ipairs(arr) do\n    if not sorted_arr[dec_to_bin(value)] then\n\
    \      sorted_arr[dec_to_bin(value)] = {}\n    end\n    table.insert(sorted_arr[dec_to_bin(value)],\
    \ value)\n  end\n  local result = {}\n  for _, val in pairs(sorted_arr) do\n \
    \   table.sort(val)\n    for _, v in ipairs(val) do\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "  table.sort(arr, function(a, b)\n\
    \    local a_binary = tostring(math.floor(a))\n    local b_binary = tostring(math.floor(b))\n\
    \    if #a_binary == #b_binary then\n      return a < b\n    else\n      return\
    \ #a_binary < #b_binary\n    end\n  end)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local sum = 0\n    for i = 1, 32 do\n      sum = sum + bit32.extract(n,\
    \ i - 1)\n    end\n    return sum\n  end\n  table.sort(arr, function(a, b)\n \
    \   if count_ones(a) == count_ones(b) then\n      return a < b\n    else\n   \
    \   return count_ones(a) < count_ones(b)\n    end\n  end)\n  return arr\nend",
  "    -- use bitwise operation to count number of ones\n    local function countOnes(num)\n\
    \        local bitNum = 0\n        while num > 0 do\n            if num % 2 ==\
    \ 1 then\n                bitNum = bitNum + 1\n            end\n            num\
    \ = math.floor(num / 2)\n        end\n        return bitNum\n    end", "  table.sort(arr,\
    \ function(a, b)\n    local a1 = _.to_binary(a)\n    local b1 = _.to_binary(b)\n\
    \    local a2 = string.gsub(a1, '1', '')\n    local b2 = string.gsub(b1, '1',\
    \ '')\n    if #a1 - #a2 == #b1 - #b2 then\n      return a < b\n    else\n    \
    \  return #a1 - #a2 < #b1 - #b2\n    end\n  end)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a_ones = a % 2\n    local b_ones = b % 2\n    local\
    \ a_dec = a\n    local b_dec = b\n    while a >= 1 do\n      a = math.floor(a\
    \ / 2)\n      a_ones = a_ones + a % 2\n    end\n    while b >= 1 do\n      b =\
    \ math.floor(b / 2)\n      b_ones = b_ones + b % 2\n    end\n    if a_ones ==\
    \ b_ones then\n      return a_dec < b_dec\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  return table.sort(arr, function(a, b)\n\
    \    local c = a\n    a = a - (2 ^ (math.floor(math.log(a) / math.log(2)) + 1)\
    \ - 1)\n    local d = b\n    b = b - (2 ^ (math.floor(math.log(b) / math.log(2))\
    \ + 1) - 1)\n    if #tostring(c):gsub('1', '') ~= #tostring(d):gsub('1', '') then\n\
    \      return #tostring(c):gsub('1', '') < #tostring(d):gsub('1', '')\n    else\n\
    \      return a < b\n    end\n  end)\nend", "  local function number_of_ones(num)\n\
    \    local binary = string.format(\"%b\", num)\n    local count = 0\n    for i\
    \ = 1, #binary do\n      count = count + binary:sub(i, i) == \"1\" and 1 or 0\n\
    \    end\n    return count\n  end\n  return table.sort(arr, function(a, b)\n \
    \   local a_ones = number_of_ones(a)\n    local b_ones = number_of_ones(b)\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\nend", "  table.sort(arr, function(a, b)\n    return\
    \ a == b and a or a % 2 < b % 2 and a or count_ones(a) < count_ones(b) and a or\
    \ b\n  end)\n  return arr\nend", "    table.sort(arr, function(a, b)\n       \
    \ local fa, fb = string.format(\"%b\", a), string.format(\"%b\", b)\n        local\
    \ na, nb = fa:gsub(\"1\", \"\"), fb:gsub(\"1\", \"\")\n        if #na ~= #nb then\n\
    \            return #na < #nb\n        else\n            return a < b\n      \
    \  end\n    end)\n    return arr\nend\n_exports.sort_array = sort_array", "  local\
    \ arr1 = {}\n  local temp = {}\n  local res = {}\n  local tres = {}\n  for i =\
    \ 1, #arr do\n    arr1[i] = {}\n    arr1[i].val = arr[i]\n    arr1[i].bin = string.format(\"\
    %b\", arr[i])\n    arr1[i].ones = select(2, arr1[i].bin:gsub(\"1\", \"\"))\n \
    \ end\n  for k, v in pairs(arr1) do\n    table.insert(temp, v)\n  end\n  table.sort(temp,\
    \ function(a, b)\n    if a.ones == b.ones then\n      return a.val < b.val\n \
    \   else\n      return a.ones < b.ones\n    end\n  end)\n  for i = 1, #temp do\n\
    \    table.insert(res, temp[i].val)\n  end\n  return res\nend", "  return table.sort(arr,\
    \ function(a, b)\n    local a_ones = string.gsub(string.format(\"%b\", a), \"\
    0\", \"\")\n    local b_ones = string.gsub(string.format(\"%b\", b), \"0\", \"\
    \")\n    if #a_ones == #b_ones then\n      return a < b\n    else\n      return\
    \ #a_ones < #b_ones\n    end\n  end)\nend", "\ttable.sort(arr, function(a, b)\n\
    \t\tlocal a1 = a:match'1'\n\t\tlocal b1 = b:match'1'\n\t\tif a1 and b1 then\n\t\
    \t\treturn a1:len() == b1:len() and a < b or a1:len() < b1:len()\n\t\telseif a1\
    \ then\n\t\t\treturn true\n\t\telseif b1 then\n\t\t\treturn false\n\t\telse\n\t\
    \t\treturn a < b\n\t\tend\n\tend)\n\treturn arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local bina, binb = tostring(a, 2), tostring(b, 2)\n    local numa, numb\
    \ = a, b\n    if #bina == #binb then\n      numa, numb = a, b\n    elseif #bina\
    \ > #binb then\n      numa, numb = b, a\n    end\n    local c = select(2, bina:gsub('1',\
    \ ''))\n    local d = select(2, binb:gsub('1', ''))\n    if c == d then\n    \
    \  return numa < numb\n    end\n    return c < d\n  end)\n  return arr\nend",
  "    table.sort(arr, function(a, b)\n        local bin_a = {}\n        local bin_b\
    \ = {}\n        for c in tostring(a):gmatch\".\" do\n            table.insert(bin_a,\
    \ c)\n        end\n        for c in tostring(b):gmatch\".\" do\n            table.insert(bin_b,\
    \ c)\n        end\n        return #bin_a % 2 ~= #bin_b % 2 and #bin_a % 2 < #bin_b\
    \ % 2 or a < b\n    end)\n    return arr\nend", "    table.sort(arr, function(a,\
    \ b)\n        if bit.band(a, b) == 0 then\n            return bit.tohex(a) < bit.tohex(b)\n\
    \        else\n            return bit.popcount(a) < bit.popcount(b)\n        end\n\
    \    end)\n    return arr\nend", "    table.sort(arr, function(a, b)\n       \
    \     local an = ones(a)\n            local bn = ones(b)\n            if an ~=\
    \ bn then\n                return an < bn\n            else\n                return\
    \ a < bn\n            end\n        end)\n    return arr\nend", "    local function\
    \ count_ones(n)\n        local count = 0\n        while n > 0 do\n           \
    \ count = count + n % 2\n            n = math.floor(n / 2)\n        end\n    \
    \    return count\n    end\n    local function bitcount_compare(a, b)\n      \
    \  local bitcount_a = count_ones(a)\n        local bitcount_b = count_ones(b)\n\
    \        if bitcount_a == bitcount_b then\n            return a < b\n        else\n\
    \            return bitcount_a < bitcount_b\n        end\n    end\n    return\
    \ {table.sort(arr, bitcount_compare)}\nend", "  local function o_count(num)\n\
    \    local str = (\"%b\"):format(num)\n    local count = 0\n    for i = 1, str:len()\
    \ do\n      count = count + (str:sub(i, i) == \"1\" and 1 or 0)\n    end\n   \
    \ return count\n  end\n  table.sort(arr, function(a, b)\n    local c = o_count(a)\n\
    \    local d = o_count(b)\n    if c == d then\n      return a < b\n    else\n\
    \      return c < d\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function sort_helper(a,\
    \ b)\n    return (a - b) % 2 == 0\n  end\n  table.sort(arr, sort_helper)\n  return\
    \ arr\nend", "  local sorted = {}\n  for i = 0, #arr - 1 do\n    local num = arr[i\
    \ + 1]\n    local count = 0\n    for j = 0, num - 1 do\n      count = count +\
    \ num % 2\n      num = num / 2\n    end\n    table.insert(sorted, {count, num})\n\
    \  end\n  table.sort(sorted, function(a, b)\n    if a[1] == b[1] then\n      return\
    \ a[2] < b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n  local result\
    \ = {}\n  for i = 0, #sorted - 1 do\n    table.insert(result, sorted[i + 1][2])\n\
    \  end\n  return result\nend", "    table.sort(arr, function(a, b)\n        local\
    \ bin_a = string.format(\"%b\", a)\n        local bin_b = string.format(\"%b\"\
    , b)\n        local ones_a = string.gsub(bin_a, '0', '')\n        local ones_b\
    \ = string.gsub(bin_b, '0', '')\n        if #ones_a == #ones_b then\n        \
    \    return a < b\n        else\n            return #ones_a < #ones_b\n      \
    \  end\n    end)\n    return arr\nend", "    table.sort(arr, function(x, y)\n\
    \        local x_bin = string.format(\"%b\", x)\n        local y_bin = string.format(\"\
    %b\", y)\n        if x_bin:len() == y_bin:len() then\n            return x < y\n\
    \        else\n            return x_bin:len() < y_bin:len()\n        end\n   \
    \ end)\n    return arr\nend", "  local function toint(x)\n    return x < 0 and\
    \ (2^32 + x) or x\n  end\n  local function tobin(n)\n    local t = {}\n    while\
    \ n > 0 do\n      table.insert(t, 1, n % 2)\n      n = math.floor(n / 2)\n   \
    \ end\n    return t\n  end\n  table.sort(arr, function(a, b)\n    a, b = toint(a),\
    \ toint(b)\n    return (tobin(a) or {}).count(1) < (tobin(b) or {}).count(1) or\n\
    \      ((tobin(a) or {}).count(1) == (tobin(b) or {}).count(1) and a < b)\n  end)\n\
    \  return arr\nend", "  table.sort(arr, function(a, b)\n    local a1 = tonumber(string.format(\"\
    %b\", a))\n    local b1 = tonumber(string.format(\"%b\", b))\n    local a2 = string.match(a1,\
    \ \"1+\")\n    local b2 = string.match(b1, \"1+\")\n    if #a2 ~= #b2 then\n \
    \     return #a2 < #b2\n    else\n      return a < b\n    end\n  end)\n  return\
    \ arr\nend", "  local function bin_ones(x)\n    local r = 0\n    while x ~= 0\
    \ do\n      r = r + (x % 2)\n      x = (x - (x % 2)) / 2\n    end\n    return\
    \ r\n  end\n  local ones = {}\n  for i, v in ipairs(arr) do\n    local o = bin_ones(v)\n\
    \    if not ones[o] then\n      ones[o] = {}\n    end\n    table.insert(ones[o],\
    \ v)\n  end\n  local sorted = {}\n  for i, v in ipairs(ones) do\n    table.sort(v)\n\
    \    for ii, vv in ipairs(v) do\n      table.insert(sorted, vv)\n    end\n  end\n\
    \  return sorted\nend", "    local function sort(a, b)\n        local function\
    \ bin(x)\n            local r = 0\n            while x > 0 do\n              \
    \  r = r + x % 2\n                x = x // 2\n            end\n            return\
    \ r\n        end\n        return bin(a) < bin(b) or (bin(a) == bin(b) and a <\
    \ b)\n    end\n    return table.sort(arr, sort)\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = string.gsub(string.format(\"%b\", a), \"0\", \"\")\n\
    \    local b_ones = string.gsub(string.format(\"%b\", b), \"0\", \"\")\n    if\
    \ #a_ones ~= #b_ones then\n      return #a_ones < #b_ones\n    else\n      return\
    \ a < b\n    end\n  end)\n  return arr\nend", "  return table.sort(arr, function(a,\
    \ b)\n    local a_s, b_s = tostring(a, 2), tostring(b, 2)\n    local a_ones, b_ones\
    \ = a_s:gsub('1', ''), b_s:gsub('1', '')\n    if a_ones < b_ones then return true\n\
    \    elseif a_ones > b_ones then return false\n    else return a < b end\n  end)\n\
    end", "    local function bitcount(n)\n        local c = 0\n        while n >\
    \ 0 do\n            c = c + (n % 2)\n            n = n // 2\n        end\n   \
    \     return c\n    end\n    table.sort(arr, function(a, b)\n        local ac,\
    \ bc = bitcount(a), bitcount(b)\n        if ac ~= bc then\n            return\
    \ ac < bc\n        else\n            return a < b\n        end\n    end)\n   \
    \ return arr\nend", "    local function f(a, b)\n        if a == 0 then return\
    \ false end\n        if b == 0 then return true end\n        local f1 = string.find(string.format(\"\
    %b\", a), \"1\")\n        local f2 = string.find(string.format(\"%b\", b), \"\
    1\")\n        if f1 == f2 then\n            return a < b\n        else\n     \
    \       return f1 < f2\n        end\n    end\n    table.sort(arr, f)\n    return\
    \ arr\nend", "    table.sort(arr, function(a, b)\n        local oa = bit.popcount(a)\n\
    \        local ob = bit.popcount(b)\n        if oa == ob then\n            return\
    \ a < b\n        else\n            return oa < ob\n        end\n    end)\n   \
    \ return arr\nend", "  table.sort(arr, function(a, b)\n    if a == b then return\
    \ a < b end\n    return tostring(a):len() > tostring(b):len()\n  end)\n  return\
    \ arr\nend", "  return lib.ksort(arr, function(a, b)\n    local a_binary = tostring(a):gsub('.',\
    \ function(d) return table.concat({'000', d}, ''):sub(-4) end)\n    local b_binary\
    \ = tostring(b):gsub('.', function(d) return table.concat({'000', d}, ''):sub(-4)\
    \ end)\n    local a_ones = a_binary:gsub('[0]', ''):len()\n    local b_ones =\
    \ b_binary:gsub('[0]', ''):len()\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\nend", "\treturn\
    \ arr:sort(\n\t\tfunction(a, b)\n\t\t\tlocal a_bin = tostring(a):gsub('0', '')\n\
    \t\t\tlocal b_bin = tostring(b):gsub('0', '')\n\t\t\tif #a_bin == #b_bin then\n\
    \t\t\t\treturn a < b\n\t\t\telse\n\t\t\t\treturn #a_bin < #b_bin\n\t\t\tend\n\t\
    \tend\n\t)\nend", "    local function bin2dec(x)\n        return tonumber(x, 2)\n\
    \    end\n    local function array2binary(arr)\n        local ret = {}\n     \
    \   for _, v in ipairs(arr) do\n            table.insert(ret, {bits=string.format(\"\
    %b\", v), value=v})\n        end\n        return ret\n    end\n    local function\
    \ sort_one(arr)\n        table.sort(arr, function(x, y)\n            if #x.bits\
    \ ~= #y.bits then\n                return #x.bits < #y.bits\n            else\n\
    \                return x.value < y.value\n            end\n        end)\n   \
    \     return arr\n    end\n    local function binary2array(arr)\n        local\
    \ ret = {}\n        for _, v in ipairs(arr) do\n            table.insert(ret,\
    \ v.value)\n        end\n        return ret\n    end\n    local binary = array2binary(arr)\n\
    \    local bin_one = sort_one(binary)\n    return binary2array(bin_one)\nend\n\
    _exports.sort_array = sort_array", "    table.sort(arr, function(a, b)\n     \
    \   local c1, c2 = count_ones(a), count_ones(b)\n        if c1 == c2 then\n  \
    \          return a < b\n        else\n            return c1 < c2\n        end\n\
    \    end)\n    return arr\nend", "  local sort_func = function(x, y)\n    local\
    \ x_ones = x:to_bitstring():gsub('0', ''):len()\n    local y_ones = y:to_bitstring():gsub('0',\
    \ ''):len()\n    if x_ones ~= y_ones then\n      return x_ones < y_ones\n    else\n\
    \      return x < y\n    end\n  end\n  table.sort(arr, sort_func)\n  return arr\n\
    end", "  local t = {}\n  for i,v in ipairs(arr) do\n    local n = string.gsub(string.format(\"\
    %b\",v), \"1\", \"\")\n    t[i] = {k=string.len(n), v=v}\n  end\n  table.sort(t,\
    \ function(a,b) return a.k<b.k or (a.k==b.k and a.v<b.v) end)\n  for i,v in ipairs(t)\
    \ do arr[i] = v.v end\n  return arr\nend", "\tlocal function count_ones(n)\n\t\
    \tlocal s = 0\n\t\twhile n ~= 0 do\n\t\t\ts = s + n % 2\n\t\t\tn = math.floor(n\
    \ / 2)\n\t\tend\n\t\treturn s\n\tend\n\ttable.sort(arr, function(a, b)\n\t\tlocal\
    \ c1, c2 = count_ones(a), count_ones(b)\n\t\tif c1 ~= c2 then\n\t\t\treturn c1\
    \ < c2\n\t\telse\n\t\t\treturn a < b\n\t\tend\n\tend)\n\treturn arr\nend", " \
    \ local f = function(a, b)\n    local binA = dec2bin(a)\n    local binB = dec2bin(b)\n\
    \    if (string.len(binA) - string.len(binB)) ~= 0 then\n      return string.len(binA)\
    \ < string.len(binB)\n    else\n      local onesA = string.gsub(binA, '0', '')\n\
    \      local onesB = string.gsub(binB, '0', '')\n      if (#onesA - #onesB) ~=\
    \ 0 then\n        return #onesA < #onesB\n      else\n        return a < b\n \
    \     end\n    end\n  end\n  table.sort(arr, f)\n  return arr\nend", "  local\
    \ fn = function(a, b)\n    local x = math.tointeger(a)\n    local y = math.tointeger(b)\n\
    \    if x and y then\n      return get_ones(x) == get_ones(y) and x < y or get_ones(x)\
    \ < get_ones(y)\n    else\n      return false\n    end\n  end\n  table.sort(arr,\
    \ fn)\n  return arr\nend", "  local function count_ones(n)\n    local o = 0\n\
    \    while n > 0 do\n      o = o + (n % 2)\n      n = math.floor(n / 2)\n    end\n\
    \    return o\n  end\n  local sort = {}\n  for _, n in ipairs(arr) do\n    local\
    \ i = count_ones(n)\n    sort[i] = sort[i] or {}\n    table.insert(sort[i], n)\n\
    \  end\n  local function sort_by_decimal(t)\n    table.sort(t)\n    return t\n\
    \  end\n  local new = {}\n  for _, t in ipairs(sort) do\n    table.insert(new,\
    \ sort_by_decimal(t))\n  end\n  local result = {}\n  for _, t in ipairs(new) do\n\
    \    for _, n in ipairs(t) do\n      table.insert(result, n)\n    end\n  end\n\
    \  return result\nend", "  local function sort(a, b)\n    local function countOnes(n)\n\
    \      local count = 0\n      while n > 0 do\n        if n % 2 == 1 then\n   \
    \       count = count + 1\n        end\n        n = math.floor(n / 2)\n      end\n\
    \      return count\n    end\n    local count_a = countOnes(a)\n    local count_b\
    \ = countOnes(b)\n    if count_a == count_b then\n      return a < b\n    else\n\
    \      return count_a < count_b\n    end\n  end\n  table.sort(arr, sort)\n  return\
    \ arr\nend", "  table.sort(arr, function(a, b)\n    return ('%b'):format(a):match('1')\
    \ < ('%b'):format(b):match('1')\n  end)\n  return arr\nend", "  local res = {}\n\
    \  for i, v in ipairs(arr) do\n    res[i] = { value = v, binary = tostring(tonumber(string.format(\"\
    %b\", v))) }\n  end\n  local cmp = function(a, b)\n    if a.binary:len() ~= b.binary:len()\
    \ then\n      return a.binary:len() < b.binary:len()\n    else\n      return a.value\
    \ < b.value\n    end\n  end\n  table.sort(res, cmp)\n  for i, v in ipairs(res)\
    \ do\n    res[i] = v.value\n  end\n  return res\nend", "  local t = {}\n  for\
    \ i, v in ipairs(arr) do\n    local s = tostring(math.abs(v))\n    local c = 0\n\
    \    for j = 1, #s do\n      if s:sub(j, j) == '1' then\n        c = c + 1\n \
    \     end\n    end\n    if not t[c] then\n      t[c] = {}\n    end\n    table.insert(t[c],\
    \ v)\n  end\n  local res = {}\n  for i = 0, #t do\n    table.sort(t[i])\n    for\
    \ j, v in ipairs(t[i]) do\n      table.insert(res, v)\n    end\n  end\n  return\
    \ res\nend", "  -- Your code here\nend", "    -- your code here\n    table.sort(arr,\
    \ function(a, b)\n        if a < 0 and b < 0 then\n            return a > b\n\
    \        elseif a < 0 then\n            return false\n        elseif b < 0 then\n\
    \            return true\n        else\n            local m = a\n            local\
    \ n = b\n            local c, d = 0, 0\n            while m > 0 do\n         \
    \       c = c + m % 2\n                m = math.floor(m / 2)\n            end\n\
    \            while n > 0 do\n                d = d + n % 2\n                n\
    \ = math.floor(n / 2)\n            end\n            if c ~= d then\n         \
    \       return c < d\n            else\n                return a < b\n       \
    \     end\n        end\n    end)\n    return arr\nend", "    table.sort(arr, function(a,\
    \ b)\n        local bit_a = bit.tobits(a)\n        local bit_b = bit.tobits(b)\n\
    \        local count_a = #bit_a - bit.rshift(bit.bnot(bit.bor(a, -a)), 31)\n \
    \       local count_b = #bit_b - bit.rshift(bit.bnot(bit.bor(b, -b)), 31)\n  \
    \      if count_a ~= count_b then\n            return count_a < count_b\n    \
    \    else\n            return a < b\n        end\n    end)\n    return arr\nend",
  "  table.sort(arr, function(a, b)\n    local bin_a = string.gsub(string.format(\"\
    %b\", a), '0', '')\n    local bin_b = string.gsub(string.format(\"%b\", b), '0',\
    \ '')\n    if #bin_a == #bin_b then\n      return a < b\n    else\n      return\
    \ #bin_a < #bin_b\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    n = n - n % 2\n    local count = 0\n    while n > 0 do\n      n = n / 2\n\
    \      count = count + 1\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_count = count_ones(a)\n    local b_count = count_ones(b)\n\
    \    if a_count == b_count then\n      return a < b\n    else\n      return a_count\
    \ < b_count\n    end\n  end)\n  return arr\nend", "  local res = {}\n  local ones\
    \ = {}\n  for i, num in ipairs(arr) do\n    local tmp = {}\n    tmp.index = i\n\
    \    tmp.value = num\n    local count = 0\n    while num > 0 do\n      if num\
    \ % 2 == 1 then\n        count = count + 1\n      end\n      num = math.floor(num\
    \ / 2)\n    end\n    tmp.ones = count\n    table.insert(ones, tmp)\n  end\n  table.sort(ones,\
    \ function(a, b)\n    if a.ones < b.ones then\n      return true\n    elseif a.ones\
    \ > b.ones then\n      return false\n    else\n      return a.value < b.value\n\
    \    end\n  end)\n  for i, tmp in ipairs(ones) do\n    res[i] = tmp.value\n  end\n\
    \  return res\nend", "  local new_arr = {}\n  for _,v in ipairs(arr) do\n    table.insert(new_arr,\
    \ v)\n  end\n  table.sort(new_arr, function(a, b)\n    local ca = tostring(a):match(\"\
    1\"):len()\n    local cb = tostring(b):match(\"1\"):len()\n    if ca == cb then\n\
    \      return a < b\n    else\n      return ca < cb\n    end\n  end)\n  return\
    \ new_arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones = string.gsub(string.format(\"\
    %b\", a), \"[0]+\", \"\")\n    local b_ones = string.gsub(string.format(\"%b\"\
    , b), \"[0]+\", \"\")\n    if #a_ones == #b_ones then\n      return a < b\n  \
    \  else\n      return #a_ones < #b_ones\n    end\n  end)\n  return arr\nend",
  "  table.sort(arr, function(x, y)\n    local binaryx = math.tointeger(tostring(x),\
    \ 2)\n    local binaryy = math.tointeger(tostring(y), 2)\n    local xones = tostring(binaryx):len()\
    \ - tostring(binaryx):gsub(\"1\", \"\"):len()\n    local yones = tostring(binaryy):len()\
    \ - tostring(binaryy):gsub(\"1\", \"\"):len()\n    if xones == yones then\n  \
    \    return x < y\n    else\n      return xones < yones\n    end\n  end)\n  return\
    \ arr\nend", "  local tbl = {}\n  for i = 1, #arr do\n    local num = arr[i]\n\
    \    local row = tbl[num]\n    if row == nil then\n      row = {num}\n      tbl[num]\
    \ = row\n    else\n      table.insert(row, num)\n    end\n  end\n  local res =\
    \ {}\n  for i = 0, #arr do\n    local row = tbl[i]\n    if row ~= nil then\n \
    \     for j = 1, #row do\n        table.insert(res, row[j])\n      end\n    end\n\
    \  end\n  return res\nend", "  local function binary(n)\n    local s = ''\n  \
    \  repeat\n      s = tostring(n % 2) .. s\n      n = math.floor(n / 2)\n    until\
    \ n == 0\n    return s\n  end\n  table.sort(arr, function(a, b)\n    local bin_a,\
    \ bin_b = binary(a), binary(b)\n    if #bin_a == #bin_b then\n      return a <\
    \ b\n    else\n      return #bin_a < #bin_b\n    end\n  end)\n  return arr\nend",
  "  local negative = {}\n  local positive = {}\n  for _, n in ipairs(arr) do\n  \
    \  if n < 0 then\n      negative[#negative + 1] = n\n    else\n      positive[#positive\
    \ + 1] = n\n    end\n  end\n  local function compare(a, b)\n    local len_a =\
    \ a:len()\n    local len_b = b:len()\n    if len_a < len_b then\n      return\
    \ true\n    elseif len_a > len_b then\n      return false\n    else\n      for\
    \ i = 1, len_a do\n        if a:sub(i, i) < b:sub(i, i) then\n          return\
    \ true\n        elseif a:sub(i, i) > b:sub(i, i) then\n          return false\n\
    \        end\n      end\n      return true\n    end\n  end\n  local function compare_num(a,\
    \ b)\n    local len_a = a:len()\n    local len_b = b:len()\n    if len_a < len_b\
    \ then\n      return true\n    elseif len_a > len_b then\n      return false\n\
    \    else\n      for i = 1, len_a do\n        if a:sub(i, i) < b:sub(i, i) then\n\
    \          return true\n        elseif a:sub(i, i) > b:sub(i, i) then\n      \
    \    return false\n        end\n      end\n      return true\n    end\n  end\n\
    \  table.sort(negative, compare)\n  table.sort(positive, compare)\n  local result\
    \ = {}\n  for _, n in ipairs(negative) do\n    result[#result + 1] = n\n  end\n\
    \  for _, n in ipairs(positive) do\n    result[#result + 1] = n\n  end\n  return\
    \ result\nend", "  local list = {}\n  for k, v in ipairs(arr) do\n    table.insert(list,\
    \ {k, v})\n  end\n  table.sort(list, function(a, b)\n    local ones_a = a[2] %\
    \ 2 + a[2] // 2 % 2 + a[2] // 4 % 2 + a[2] // 8 % 2 + a[2] // 16 % 2 + a[2] //\
    \ 32 % 2 + a[2] // 64 % 2 + a[2] // 128 % 2\n    local ones_b = b[2] % 2 + b[2]\
    \ // 2 % 2 + b[2] // 4 % 2 + b[2] // 8 % 2 + b[2] // 16 % 2 + b[2] // 32 % 2 +\
    \ b[2] // 64 % 2 + b[2] // 128 % 2\n    if ones_a == ones_b then\n      return\
    \ a[2] < b[2]\n    else\n      return ones_a < ones_b\n    end\n  end)\n  local\
    \ result = {}\n  for _, v in ipairs(list) do\n    table.insert(result, v[2])\n\
    \  end\n  return result\nend", "  -- TODO\nend", "  -- If a is the sum of binary\
    \ representation of integer x, then x = 2^a + 2^(a-1) + 2^(a-2) + ...\n  local\
    \ function pack(n)\n    local a = 0\n    while n > 0 do\n      n = n % 2\n   \
    \   a = a + 1\n    end\n    return a\n  end\n  local nums = {}\n  for _, n in\
    \ ipairs(arr) do\n    local a = pack(n)\n    nums[a] = nums[a] or {}\n    table.insert(nums[a],\
    \ n)\n  end\n  local result = {}\n  for i = 0, #nums do\n    if nums[i] then\n\
    \      table.sort(nums[i])\n      for _, n in ipairs(nums[i]) do\n        table.insert(result,\
    \ n)\n      end\n    end\n  end\n  return result\nend", "    local ones = {}\n\
    \    for _, n in ipairs(arr) do\n        local o = {\n            n = n,\n   \
    \         ones = (n < 0 and -n or n)\n                :bit_rep()\n           \
    \     :gsub('0', '')\n                :len()\n        }\n        ones[#ones +\
    \ 1] = o\n    end\n    table.sort(ones, function(a, b)\n        if a.ones == b.ones\
    \ then\n            return a.n < b.n\n        else\n            return a.ones\
    \ < b.ones\n        end\n    end)\n    local r = {}\n    for _, o in ipairs(ones)\
    \ do\n        r[#r + 1] = o.n\n    end\n    return r\nend", "  -- Write your code\
    \ here:\nend", "  local t = {}\n  for _, v in ipairs(arr) do\n    t[#t + 1] =\
    \ {v, v >= 0 and v or -v, bin(v)}\n  end\n  table.sort(t, function(a, b)\n   \
    \ if a[3] ~= b[3] then\n      return a[3] < b[3]\n    else\n      return a[2]\
    \ < b[2]\n    end\n  end)\n  for i, v in ipairs(t) do\n    arr[i] = v[1]\n  end\n\
    \  return arr\nend", "  local function bin_rep(n)\n    local ret = \"\"\n    while\
    \ n > 0 do\n      ret = ret .. tostring(n % 2)\n      n = math.floor(n / 2)\n\
    \    end\n    return ret\n  end\n  local function count_ones(n)\n    local str\
    \ = bin_rep(n)\n    local count = 0\n    for i = 1, #str do\n      if str:sub(i,\
    \ i) == \"1\" then\n        count = count + 1\n      end\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local ca = count_ones(a)\n\
    \    local cb = count_ones(b)\n    if ca == cb then\n      return a < b\n    else\n\
    \      return ca < cb\n    end\n  end)\n  return arr\nend", "    table.sort(arr,\
    \ function(a, b)\n        local da, db = tostring(a):match('[^.]*$'), tostring(b):match('[^.]*$')\n\
    \        local va, vb = da:gsub('1', ''), db:gsub('1', '')\n        return (va:len()\
    \ < vb:len()) or (va:len() == vb:len() and a < b)\n    end)\n    return arr\n\
    end", "  -- We separate items with odd parity and even parity (which ones == 0).\n\
    \  local odd = {}\n  local even = {}\n  for _, n in ipairs(arr) do\n    if n %\
    \ 2 == 0 then\n      table.insert(even, n)\n    else\n      table.insert(odd,\
    \ n)\n    end\n  end\n  -- Then we sort both lists\n  table.sort(odd)\n  table.sort(even)\n\
    \  -- And we merge them\n  local ret = {}\n  for _, n in ipairs(odd) do\n    table.insert(ret,\
    \ n)\n  end\n  for _, n in ipairs(even) do\n    table.insert(ret, n)\n  end\n\
    \  return ret\nend", "  local function ones(n)\n    if n == 0 then return 0 end\n\
    \    local res = 0\n    for i = 0, 31 do\n      res = res + (n & 1)\n      n =\
    \ n >> 1\n    end\n    return res\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a1, b1 = ones(a), ones(b)\n    if a1 ~= b1 then return a1 < b1 end\n\
    \    return a < b\n  end)\n  return arr\nend", "  local function compare(a, b)\n\
    \    local aOnes = 0\n    local bOnes = 0\n    local aVal = a\n    local bVal\
    \ = b\n    -- Count ones in the binary representation of each number\n    while\
    \ aVal > 0 do\n      aOnes = aOnes + (aVal % 2)\n      aVal = math.floor(aVal\
    \ / 2)\n    end\n    while bVal > 0 do\n      bOnes = bOnes + (bVal % 2)\n   \
    \   bVal = math.floor(bVal / 2)\n    end\n    -- Order by number of ones, then\
    \ by number\n    if aOnes == bOnes then\n      return a < b\n    else\n      return\
    \ aOnes < bOnes\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend",
  "  local function bitcount(n)\n    local result = 0\n    while n > 0 do\n      result\
    \ = result + 1\n      n = n & (n - 1)\n    end\n    return result\n  end\n  local\
    \ function sort_bit(a, b)\n    local x = bitcount(a)\n    local y = bitcount(b)\n\
    \    if x == y then\n      return a < b\n    else\n      return x < y\n    end\n\
    \  end\n  table.sort(arr, sort_bit)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    if a < 0 and b < 0 then\n      return a > b\n    elseif a < 0 then\n\
    \      return false\n    elseif b < 0 then\n      return true\n    else\n    \
    \  return (string.format(\"%b\", a):gsub(\"0\", \"\"):len() < string.format(\"\
    %b\", b):gsub(\"0\", \"\"):len()) or (string.format(\"%b\", a):gsub(\"0\", \"\"\
    ):len() == string.format(\"%b\", b):gsub(\"0\", \"\"):len() and a < b)\n    end\n\
    \  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    if a == b\
    \ then return a < b end\n    local aa = a\n    local bb = b\n    local ones =\
    \ 0\n    while aa ~= 0 do\n      if aa % 2 == 1 then ones = ones + 1 end\n   \
    \   aa = math.floor(aa / 2)\n    end\n    while bb ~= 0 do\n      if bb % 2 ==\
    \ 1 then ones = ones - 1 end\n      bb = math.floor(bb / 2)\n    end\n    return\
    \ ones < 0\n  end)\n  return arr\nend", "    local sort = {}\n    for k, v in\
    \ pairs(arr) do\n        local bin = ''\n        local mod = v\n        repeat\n\
    \            bin = bin .. tostring(mod % 2)\n            mod = math.floor(mod\
    \ / 2)\n        until mod == 0\n        if sort[bin] == nil then\n           \
    \ sort[bin] = {}\n        end\n        table.insert(sort[bin], v)\n    end\n \
    \   local final = {}\n    for k, v in pairs(sort) do\n        table.sort(v)\n\
    \        for m, n in pairs(v) do\n            table.insert(final, n)\n       \
    \ end\n    end\n    return final\nend", "  local res = {}\n  for i, v in ipairs(arr)\
    \ do\n    res[i] = {\n      v = v,\n      ones = string.len(v:toBinary():gsub('[^1]',\
    \ ''))\n    }\n  end\n  table.sort(res, function(a, b)\n    if a.ones == b.ones\
    \ then\n      return a.v < b.v\n    else\n      return a.ones < b.ones\n    end\n\
    \  end)\n  for i, v in ipairs(res) do\n    res[i] = v.v\n  end\n  return res\n\
    end", "  if not arr or #arr == 0 then return arr end\n  local aux = {}\n  for\
    \ _, v in ipairs(arr) do\n    local n = string.format(\"%b\", v)\n    local count\
    \ = 0\n    for c in n:gmatch(\"1\") do count = count + 1 end\n    if not aux[count]\
    \ then aux[count] = {} end\n    aux[count][#aux[count] + 1] = v\n  end\n  table.sort(aux)\n\
    \  local result = {}\n  for _, v in ipairs(aux) do\n    for _, n in ipairs(v)\
    \ do\n      result[#result + 1] = n\n    end\n  end\n  return result\nend", " \
    \   table.sort(arr, function(a, b)\n        local sa = string.format(\"%08b\"\
    , a)\n        local sb = string.format(\"%08b\", b)\n        local ca = string.gsub(sa,\
    \ \"0\", \"\")\n        local cb = string.gsub(sb, \"0\", \"\")\n        local\
    \ ca_len = string.len(ca)\n        local cb_len = string.len(cb)\n        if ca_len\
    \ == cb_len then\n            return a < b\n        else\n            return ca_len\
    \ < cb_len\n        end\n    end)\n    return arr\nend", "  return table.sort(arr,\
    \ function(a, b)\n    local v1 = string.format(\"%d%d\", a, bin(a))\n    local\
    \ v2 = string.format(\"%d%d\", b, bin(b))\n    return v1 < v2\n  end)\nend", " \
    \   local function cmp(a, b)\n        local a_bin = string.format(\"%b\", a)\n\
    \        local b_bin = string.format(\"%b\", b)\n        local a_count = a_bin:match(\"\
    1+\") and #a_bin:match(\"1+\") or 0\n        local b_count = b_bin:match(\"1+\"\
    ) and #b_bin:match(\"1+\") or 0\n        if a_count == b_count then\n        \
    \    return a < b\n        else\n            return a_count < b_count\n      \
    \  end\n    end\n    table.sort(arr, cmp)\n    return arr\nend", "  local t =\
    \ {}\n  for i = 1, #arr do\n    local n = arr[i]\n    local ones = 0\n    while\
    \ n > 0 do\n      ones = ones + (n % 2)\n      n = n / 2\n    end\n    if not\
    \ t[ones] then\n      t[ones] = {}\n    end\n    table.insert(t[ones], arr[i])\n\
    \  end\n  local new = {}\n  for k, v in pairs(t) do\n    table.sort(v)\n    for\
    \ i = 1, #v do\n      table.insert(new, v[i])\n    end\n  end\n  return new\n\
    end", "    -- Original.\n    --[[\n    -- local function count1s(n)\n    --  \
    \   local c = 0\n    --     while n > 0 do\n    --         c = c + (n % 2)\n \
    \   --         n = math.floor(n / 2)\n    --     end\n    --     return c\n  \
    \  -- end\n    -- return table.sort(arr, function(a, b)\n    --     local cnt_a,\
    \ cnt_b = count1s(a), count1s(b)\n    --     if cnt_a ~= cnt_b then\n    --  \
    \       return cnt_a < cnt_b\n    --     else\n    --         return a < b\n \
    \   --     end\n    -- end)\n    --]]\n    -- #############################################\n\
    \    -- Tail Recursive.\n    --[[\n    local function count1s(n, cnt)\n      \
    \  if n == 0 then\n            return cnt\n        else\n            return count1s(math.floor(n\
    \ / 2), cnt + (n % 2))\n        end\n    end\n    return table.sort(arr, function(a,\
    \ b)\n        local cnt_a, cnt_b = count1s(a, 0), count1s(b, 0)\n        if cnt_a\
    \ ~= cnt_b then\n            return cnt_a < cnt_b\n        else\n            return\
    \ a < b\n        end\n    end)\n    --]]\n    -- #############################################\n\
    \    -- Iterative.\n    --[[\n    local function count1s(n)\n        local cnt\
    \ = 0\n        while n > 0 do\n            cnt = cnt + (n % 2)\n            n\
    \ = math.floor(n / 2)\n        end\n        return cnt\n    end\n    return table.sort(arr,\
    \ function(a, b)\n        local cnt_a, cnt_b = count1s(a), count1s(b)\n      \
    \  if cnt_a ~= cnt_b then\n            return cnt_a < cnt_b\n        else\n  \
    \          return a < b\n        end\n    end)\n    --]]\n    -- #################################",
  "  return table.sort(arr, function(a, b)\n      local a1 = a..\"\"; local b1 = b..\"\
    \";\n      return (string.gsub(a1, \"1\", \"\") .. a1) < (string.gsub(b1, \"1\"\
    , \"\") .. b1)\n  end)\nend", "  -- sort by \"one\" count and dec\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = bit.tohex(a):gsub(\"0\", \"\"):len()\n  \
    \  local b_ones = bit.tohex(b):gsub(\"0\", \"\"):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend", "  return table.sort(arr, function(a, b)\n    local\
    \ bin_a = string.format(\"%b\", a)\n    local bin_b = string.format(\"%b\", b)\n\
    \    local ones_a = bin_a:gsub(\"0\", \"\"):len()\n    local ones_b = bin_b:gsub(\"\
    0\", \"\"):len()\n    if ones_a == ones_b then\n      return a < b\n    else\n\
    \      return ones_a < ones_b\n    end\n  end)\nend", "    local function count_ones(n)\n\
    \        return string.len(string.gsub(string.format(\"%b\", n), \"[01]\", \"\"\
    ))\n    end\n    table.sort(arr, function(a, b)\n        local ao, bo = count_ones(a),\
    \ count_ones(b)\n        return ao < bo or (ao == bo and a < b)\n    end)\n  \
    \  return arr\nend", "    local function sort(a, b)\n        local bin_a = ('%b'):format(a)\n\
    \        local bin_b = ('%b'):format(b)\n        local num_ones_a = bin_a:gsub('[^1]',\
    \ ''):len()\n        local num_ones_b = bin_b:gsub('[^1]', ''):len()\n       \
    \ if num_ones_a ~= num_ones_b then\n            return num_ones_a < num_ones_b\n\
    \        else\n            return a < b\n        end\n    end\n    table.sort(arr,\
    \ sort)\n    return arr\nend", "  local function cmp(x, y)\n    local function\
    \ count_ones(n)\n      local s = tostring(n, 2)\n      local c = 0\n      for\
    \ i = 1, #s do\n        if s:sub(i, i) == '1' then\n          c = c + 1\n    \
    \    end\n      end\n      return c\n    end\n    local x1 = count_ones(x)\n \
    \   local y1 = count_ones(y)\n    if x1 == y1 then\n      return x < y\n    else\n\
    \      return x1 < y1\n    end\n  end\n  return table.sort(arr, cmp)\nend", " \
    \ local len = #arr\n  for i = 1, len do\n    for j = i + 1, len do\n      local\
    \ v1, v2 = arr[i], arr[j]\n      local n1, n2 = 0, 0\n      for k = 1, 32 do\n\
    \        local bit1, bit2 = bit.band(v1, 1), bit.band(v2, 1)\n        n1, n2 =\
    \ n1 + bit1, n2 + bit2\n        v1, v2 = bit.rshift(v1, 1), bit.rshift(v2, 1)\n\
    \        if v1 == 0 and v2 == 0 then break end\n      end\n      if n1 > n2 or\
    \ (n1 == n2 and v1 > v2) then\n        arr[i], arr[j] = arr[j], arr[i]\n     \
    \ end\n    end\n  end\n  return arr\nend", "  local func_ones = function(n)\n\
    \    local num = n\n    local count = 0\n    if n == 0 then\n      return 0\n\
    \    end\n    while num > 0 do\n      if num % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      num = num / 2\n    end\n    return count\n  end\n  local\
    \ t1 = {}\n  local t2 = {}\n  for i = 1, #arr do\n    if arr[i] >= 0 then\n  \
    \    local n = func_ones(arr[i])\n      if t1[n] == nil then\n        t1[n] =\
    \ {}\n      end\n      table.insert(t1[n], arr[i])\n    else\n      table.insert(t2,\
    \ arr[i])\n    end\n  end\n  local result = {}\n  for i = 0, #t1 do\n    if t1[i]\
    \ ~= nil then\n      table.sort(t1[i])\n      for j = 1, #t1[i] do\n        table.insert(result,\
    \ t1[i][j])\n      end\n    end\n  end\n  table.sort(t2)\n  for i = 1, #t2 do\n\
    \    table.insert(result, t2[i])\n  end\n  return result\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a_ones = string.match(string.format(\"%b\", a), \"\
    %d+\")\n    local b_ones = string.match(string.format(\"%b\", b), \"%d+\")\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function compare_items(n1,\
    \ n2)\n    local function count_ones(x)\n      local count = 0\n      for _, v\
    \ in string.gmatch(string.format(\"%b\", x), \"[^0]+\") do\n        count = count\
    \ + #v\n      end\n      return count\n    end\n    local ones_n1 = count_ones(n1)\n\
    \    local ones_n2 = count_ones(n2)\n    if ones_n1 < ones_n2 then\n      return\
    \ true\n    elseif ones_n1 > ones_n2 then\n      return false\n    else\n    \
    \  return n1 < n2\n    end\n  end\n  table.sort(arr, compare_items)\n  return\
    \ arr\nend", "    return table.sort(arr, function(a, b)\n        return tostring(a):match(\"\
    1\") > tostring(b):match(\"1\") or\n            #tostring(a):match(\"1\") == #tostring(b):match(\"\
    1\") and a > b\n    end)\nend", "  local buckets = {}\n  local result = {}\n \
    \ for _, v in ipairs(arr) do\n    if not buckets[v] then\n      buckets[v] = {v}\n\
    \    else\n      table.insert(buckets[v], v)\n    end\n  end\n  for k, v in pairs(buckets)\
    \ do\n    if #v > 1 then\n      for _, v2 in ipairs(v) do\n        table.insert(result,\
    \ v2)\n      end\n    else\n      table.insert(result, v[1])\n    end\n  end\n\
    \  table.sort(result)\n  return result\nend", "  table.sort(arr, function(a, b)\n\
    \    local bin_a = to_binary(a)\n    local bin_b = to_binary(b)\n    local count_a\
    \ = count_ones(bin_a)\n    local count_b = count_ones(bin_b)\n    if count_a ==\
    \ count_b then\n      return a < b\n    else\n      return count_a < count_b\n\
    \    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ aones = string.gsub(string.format(\"%b\", a), '0', '')\n    local bones = string.gsub(string.format(\"\
    %b\", b), '0', '')\n    if #aones == #bones then\n      return a < b\n    else\n\
    \      return #aones < #bones\n    end\n  end)\n  return arr\nend", "  local function\
    \ get_ones(n)\n    local bin = string.format(\"%b\", n)\n    local count = 0\n\
    \    for i = 1, #bin do\n      if bin:sub(i, i) == \"1\" then\n        count =\
    \ count + 1\n      end\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local cmp = get_ones(a) - get_ones(b)\n    if cmp == 0 then\n      return\
    \ a - b\n    else\n      return cmp\n    end\n  end)\n  return arr\nend", "  \
    \  return table.sort(arr,\n        function(a, b)\n            local _, d1 = math.frexp(a)\n\
    \            local _, d2 = math.frexp(b)\n            return d1 == d2 and a <\
    \ b or d1 < d2\n        end)\nend", "  table.sort(arr, function(a, b)\n    local\
    \ ones_a = #(string.gsub(string.format(\"%b\", a), \"1\", \"\"))\n    local ones_b\
    \ = #(string.gsub(string.format(\"%b\", b), \"1\", \"\"))\n    if ones_a == ones_b\
    \ then\n      return a < b\n    else\n      return ones_a < ones_b\n    end\n\
    \  end)\n  return arr\nend", "    table.sort(arr, function(a, b)\n        local\
    \ a_ones = string.gsub(string.format(\"%b\", a), \"0\", \"\")\n        local b_ones\
    \ = string.gsub(string.format(\"%b\", b), \"0\", \"\")\n        if #a_ones ==\
    \ #b_ones then\n            return a < b\n        else\n            return #a_ones\
    \ < #b_ones\n        end\n    end)\n    return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a % 2 == 1 and 1 or 0\n    local b_ones = b % 2 == 1\
    \ and 1 or 0\n    if a_ones == b_ones then\n      return a < b\n    else\n   \
    \   return a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local c = count_binary_ones(a) - count_binary_ones(b)\n\
    \    if c == 0 then\n      return a < b\n    end\n    return c < 0\n  end)\n \
    \ return arr\nend", "  table.sort(arr, function(a, b)\n    local pa, pb = bin(a),\
    \ bin(b)\n    local c = pa:gsub('1', '')\n    local d = pb:gsub('1', '')\n   \
    \ if #pa == #pb then\n      return a < b\n    else\n      return #pa < #pb\n \
    \   end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ a_count = a:count('1')\n    local b_count = b:count('1')\n    if a_count ==\
    \ b_count then\n      return a < b\n    else\n      return a_count < b_count\n\
    \    end\n  end)\n  return arr\nend", "    local tbl = {}\n    for _, v in ipairs(arr)\
    \ do\n        local cnt = 0\n        while v > 0 do\n            cnt = cnt + (v\
    \ % 2)\n            v = math.floor(v / 2)\n        end\n        tbl[#tbl + 1]\
    \ = {val = v, cnt = cnt}\n    end\n    table.sort(tbl, function(t1, t2)\n    \
    \    if t1.cnt == t2.cnt then\n            return t1.val < t2.val\n        else\n\
    \            return t1.cnt < t2.cnt\n        end\n    end)\n    local ret = {}\n\
    \    for _, v in ipairs(tbl) do\n        ret[#ret + 1] = v.val\n    end\n    return\
    \ ret\nend", "  table.sort(arr, function(a, b)\n    local a_ones = a % 2\n   \
    \ local b_ones = b % 2\n    if a_ones == b_ones then\n      return a < b\n   \
    \ else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ table.sort(arr, function(a, b)\n    local a_ones = bit.count(a)\n    local b_ones\
    \ = bit.count(b)\n    if a_ones == b_ones then\n      return a < b\n    else\n\
    \      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  table.sort(arr,\
    \ function(x, y)\n      if hamming.count(x) == hamming.count(y) then\n       \
    \ return x < y\n      else\n        return hamming.count(x) < hamming.count(y)\n\
    \      end\n    end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n\
    \    local bin_a = tonumber(string.format(\"%b\", a), 2)\n    local bin_b = tonumber(string.format(\"\
    %b\", b), 2)\n    return bin_a == bin_b and a < b or bin_a < bin_b\n  end)\n \
    \ return arr\nend", "  local comp = function(a, b)\n    local ones = function(n)\n\
    \      local c = 0\n      for i = 1, 32 do\n        if n % 2 == 1 then c = c +\
    \ 1 end\n        n = math.floor(n / 2)\n      end\n      return c\n    end\n \
    \   if ones(a) == ones(b) then return a < b end\n    return ones(a) < ones(b)\n\
    \  end\n  table.sort(arr, comp)\n  return arr\nend", "\ttable.sort(arr, function(a,\
    \ b)\n\t\tlocal aOnes = 0\n\t\tlocal bOnes = 0\n\t\tfor i = 0,32 do\n\t\t\tif\
    \ a&(1<<i)~=0 then aOnes = aOnes + 1 end\n\t\t\tif b&(1<<i)~=0 then bOnes = bOnes\
    \ + 1 end\n\t\tend\n\t\tif aOnes == bOnes then\n\t\t\treturn a < b\n\t\telse\n\
    \t\t\treturn aOnes < bOnes\n\t\tend\n\tend)\n\treturn arr\nend", "  local function\
    \ cmp(a, b)\n    local bin = {\n      [0] = 0, [1] = 1, [2] = 1, [3] = 2, [4]\
    \ = 1, [5] = 2, [6] = 2, [7] = 3,\n      [8] = 1, [9] = 2, [10] = 2, [11] = 3,\
    \ [12] = 2, [13] = 3, [14] = 3, [15] = 4\n    }\n    local ones_a, ones_b = bin[a\
    \ % 16], bin[b % 16]\n    if ones_a == ones_b then\n      return a < b\n    else\n\
    \      return ones_a < ones_b\n    end\n  end\n  table.sort(arr, cmp)\n  return\
    \ arr\nend", "    local function count_ones(a)\n        local n, i = 0, 1\n  \
    \      while (a >= 1) do\n            if (a % 2) > 0 then\n                n =\
    \ n + 1\n            end\n            a = math.floor(a / 2)\n            i = i\
    \ + 1\n        end\n        return n\n    end\n    table.sort(arr, function(a,\
    \ b)\n        if (count_ones(a) ~= count_ones(b)) then\n            return count_ones(a)\
    \ < count_ones(b)\n        else\n            return a < b\n        end\n    end)\n\
    \    return arr\nend", "  local result = {}\n  local sorted = {}\n  for _, v in\
    \ ipairs(arr) do\n    local bv = tostring(v)\n    result[bv] = (result[bv] or\
    \ 0) + 1\n  end\n  for k, v in pairs(result) do\n    if not sorted[v] then\n \
    \     sorted[v] = {}\n    end\n    table.insert(sorted[v], k)\n  end\n  for k,\
    \ v in pairs(sorted) do\n    for _, vv in ipairs(v) do\n      for i = 1, k do\n\
    \        table.insert(arr, tonumber(vv))\n      end\n    end\n  end\n  return\
    \ arr\nend", "  local compare = function(a, b)\n    local a_ones = tonumber(string.format(\"\
    %b\", a):gsub(\"0\", \"\"):len())\n    local b_ones = tonumber(string.format(\"\
    %b\", b):gsub(\"0\", \"\"):len())\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    if a ==\
    \ b then return a < b end\n    local ones_a = string.len(string.gsub(string.format(\"\
    %b\", a), \"[01]\", \"\"))\n    local ones_b = string.len(string.gsub(string.format(\"\
    %b\", b), \"[01]\", \"\"))\n    if ones_a == ones_b then return a < b end\n  \
    \  return ones_a < ones_b\n  end)\n  return arr\nend", "    return _.sort(arr,\
    \ function(a, b)\n        local binA = {a:gmatch('.')}\n        local binB = {b:gmatch('.')}\n\
    \        local onesA = 0\n        local onesB = 0\n        for _, digit in ipairs(binA)\
    \ do\n            if digit == '1' then\n                onesA = onesA + 1\n  \
    \          end\n        end\n        for _, digit in ipairs(binB) do\n       \
    \     if digit == '1' then\n                onesB = onesB + 1\n            end\n\
    \        end\n        if onesA == onesB then\n            return a < b\n     \
    \   else\n            return onesA < onesB\n        end\n    end)\nend", "  local\
    \ function dec(x)\n    return x % 10\n  end\n  local function ones(x)\n    local\
    \ v = x\n    local n = 0\n    while v > 0 do\n      n = n + v % 2\n      v = math.floor(v\
    \ / 2)\n    end\n    return n\n  end\n  local function pad(v, n)\n    local s\
    \ = v\n    for i = 1, n - #s do\n      s = \"0\" .. s\n    end\n    return s\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = ones(a)\n    local\
    \ ones_b = ones(b)\n    if ones_a ~= ones_b then\n      return ones_a < ones_b\n\
    \    end\n    local da = pad(tostring(dec(a)), #tostring(dec(b)))\n    local db\
    \ = pad(tostring(dec(b)), #tostring(dec(a)))\n    return tonumber(da) < tonumber(db)\n\
    \  end)\n  return arr\nend", "  local function count_ones(num)\n    local r =\
    \ 0\n    while num > 0 do\n      r = r + (num % 2)\n      num = num / 2\n    end\n\
    \    return r\n  end\n  local function sort_by_ones(a, b)\n    local count_a =\
    \ count_ones(a)\n    local count_b = count_ones(b)\n    if count_a == count_b\
    \ then\n      return a < b\n    else\n      return count_a < count_b\n    end\n\
    \  end\n  table.sort(arr, sort_by_ones)\n  return arr\nend", "  table.sort(arr,\n\
    \    function(a, b)\n      local na, nb = string.gsub(string.format(\"%b\", a),\
    \ \"[^1]\", \"\"),\n                     string.gsub(string.format(\"%b\", b),\
    \ \"[^1]\", \"\")\n      return na == nb and a < b or na < nb\n    end)\n  return\
    \ arr\nend", "  local sorted = {}\n  for i = 0, #arr do\n    sorted[i] = {0, 0}\n\
    \  end\n  for i, v in ipairs(arr) do\n    sorted[i][1] = v\n    sorted[i][2] =\
    \ v\n  end\n  local compare = function(a, b)\n    local a_ones = 0\n    local\
    \ b_ones = 0\n    while a > 0 do\n      if a % 2 == 1 then\n        a_ones = a_ones\
    \ + 1\n      end\n      a = math.floor(a / 2)\n    end\n    while b > 0 do\n \
    \     if b % 2 == 1 then\n        b_ones = b_ones + 1\n      end\n      b = math.floor(b\
    \ / 2)\n    end\n    if a_ones == b_ones then\n      return a > b\n    else\n\
    \      return a_ones > b_ones\n    end\n  end\n  table.sort(sorted, compare)\n\
    \  for i, v in ipairs(sorted) do\n    sorted[i] = v[1]\n  end\n  return sorted\n\
    end", "  local ones_count = function(n)\n    local count = 0\n    while n > 0\
    \ do\n      if n % 2 == 1 then\n        count = count + 1\n      end\n      n\
    \ = n / 2\n    end\n    return count\n  end\n  return table.sort(arr, function(a,\
    \ b)\n    local ones_a = ones_count(a)\n    local ones_b = ones_count(b)\n   \
    \ if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\nend", "  table.sort(arr, function(a, b)\n    if tostring(a):len()\
    \ == tostring(b):len() then\n      return a < b\n    else\n      return tostring(a):len()\
    \ < tostring(b):len()\n    end\n  end)\n  return arr\nend", "    local n = #arr\n\
    \    local ones = {}\n    for i = 1, n do\n        ones[i] = arr[i] % 2\n    \
    \    arr[i] = arr[i] - ones[i]\n    end\n    quick_sort(arr, 1, n)\n    quick_sort(ones,\
    \ 1, n)\n    for i = 1, n do\n        arr[i] = arr[i] + ones[i]\n    end\n   \
    \ return arr\nend", "  if not arr then return arr end\n  if #arr == 0 then return\
    \ arr end\n  return table.sort(arr, function(a, b)\n    local a_b = bit.tobits(a)\n\
    \    local b_b = bit.tobits(b)\n    local a_ones = a_b:count(1)\n    local b_ones\
    \ = b_b:count(1)\n    if a_ones == b_ones then\n      return a < b\n    else\n\
    \      return a_ones < b_ones\n    end\n  end)\nend", "  table.sort(arr, function(a,\
    \ b)\n    local x, y = tostring(a, 2), tostring(b, 2)\n    return x:reverse():match('1')\
    \ .. x < y:reverse():match('1') .. y\n  end)\n  return arr\nend", "  local dict\
    \ = {}\n  for i = 1, #arr do\n    dict[i] = {\n      arr[i],\n      1\n    }\n\
    \  end\n  for i = 1, #arr do\n    for j = 0, 30 do\n      if dict[i][1] % 2 ==\
    \ 1 then\n        dict[i][2] = dict[i][2] + 1\n      end\n      dict[i][1] = math.floor(dict[i][1]\
    \ / 2)\n    end\n  end\n  table.sort(dict, function(a, b)\n    if a[2] == b[2]\
    \ then\n      return a[1] < b[1]\n    else\n      return a[2] < b[2]\n    end\n\
    \  end)\n  for i = 1, #arr do\n    arr[i] = dict[i][1]\n  end\n  return arr\n\
    end", "  if not arr or #arr < 2 then return arr end\n  -- http://lua-users.org/wiki/SortedIteration\n\
    \  local function it(t, i)\n    i = i + 1\n    local v = t[i]\n    if v then\n\
    \      return i, v\n    end\n  end\n  -- http://www.lua.org/pil/19.3.html\n  local\
    \ function sort(a, b)\n    if (a == b) then return true end\n    local bi = a\
    \ % 2\n    local ei = b % 2\n    if (bi == ei) then\n      return sort(math.floor(a\
    \ / 2), math.floor(b / 2))\n    else\n      return bi < ei\n    end\n  end\n \
    \ table.sort(arr, sort)\n  return arr\nend", "  local n = #arr\n  local bin =\
    \ setmetatable({}, {__index = function(t,k)\n    local a = {}\n    for i = 0,\
    \ 31 do\n      local ai = k >> i & 1\n      if ai ~= 0 then a[#a+1] = ai end\n\
    \    end\n    t[k] = a\n    return a\n  end})\n  local sorted = {}\n  for i =\
    \ 1, n do\n    local ai = arr[i]\n    local bai = bin[ai]\n    local j = 1\n \
    \   local bsorted = sorted[j]\n    while bsorted do\n      local bsj = #bsorted\n\
    \      local bsji = bsorted[bsj]\n      if bsj < #bai then\n        break\n  \
    \    elseif bsj > #bai then\n        j = j + 1\n      elseif bsji < ai then\n\
    \        break\n      elseif bsji > ai then\n        j = j + 1\n      else\n \
    \       j = j + 1\n      end\n      bsorted = sorted[j]\n    end\n    tinsert(sorted,\
    \ j, {ai})\n  end\n  local r = {}\n  for _, a in ipairs(sorted) do\n    for _,\
    \ ai in ipairs(a) do\n      r[#r+1] = ai\n    end\n  end\n  return r\nend", " \
    \ table.sort(arr, function(a, b)\n    local a1, b1 = a % 2, b % 2\n    if a1 ~=\
    \ b1 then\n      return a1 > b1\n    end\n    a1, b1 = bit.band(a, 1), bit.band(b,\
    \ 1)\n    if a1 ~= b1 then\n      return a1 > b1\n    end\n    return a < b\n\
    \  end)\n  return arr\nend", "    local sorted = {}\n    for i, v in ipairs(arr)\
    \ do\n        table.insert(sorted, {v, i})\n    end\n    table.sort(sorted, function(a,\
    \ b)\n        local a1, b1 = a[1], b[1]\n        local a2, b2 = a[2], b[2]\n \
    \       local cnt_a, cnt_b = 0, 0\n        while a1 > 0 do\n            cnt_a\
    \ = cnt_a + 1\n            a1 = math.floor(a1 / 2)\n        end\n        while\
    \ b1 > 0 do\n            cnt_b = cnt_b + 1\n            b1 = math.floor(b1 / 2)\n\
    \        end\n        if cnt_a == cnt_b then\n            return a2 < b2\n   \
    \     else\n            return cnt_a < cnt_b\n        end\n    end)\n    local\
    \ ret = {}\n    for i, v in ipairs(sorted) do\n        table.insert(ret, v[1])\n\
    \    end\n    return ret\nend", "  local bucket = {}\n  local max_ones = 0\n \
    \ for i = 1, #arr do\n    local num = arr[i]\n    local bin = string.format(\"\
    %b\", num)\n    local ones = string.len(bin:gsub(\"0\", \"\"))\n    bucket[ones]\
    \ = bucket[ones] or {}\n    max_ones = math.max(max_ones, ones)\n    table.insert(bucket[ones],\
    \ num)\n  end\n  local result = {}\n  for i = 0, max_ones do\n    if bucket[i]\
    \ then\n      table.sort(bucket[i])\n      for j = 1, #bucket[i] do\n        table.insert(result,\
    \ bucket[i][j])\n      end\n    end\n  end\n  return result\nend", "    local\
    \ function onesInBinary(num)\n        local count = 0\n        local len = tostring(num):len()\n\
    \        for i = 1, len do\n            if tostring(num):sub(i, i) == \"1\" then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\n    table.sort(arr, function(a, b)\n        local onesA = onesInBinary(a)\n\
    \        local onesB = onesInBinary(b)\n        if onesA == onesB then\n     \
    \       return a < b\n        else\n            return onesA < onesB\n       \
    \ end\n    end)\n    return arr\nend", "  local function count_ones(num)\n   \
    \ local n, digits = 0, num\n    while digits > 0 do\n      n = n + (digits % 2)\n\
    \      digits = math.floor(digits / 2)\n    end\n    return n\n  end\n  local\
    \ function value_comp(a, b)\n    local f, s = count_ones(a), count_ones(b)\n \
    \   if f < s then return true end\n    if f > s then return false end\n    return\
    \ a < b\n  end\n  table.sort(arr, value_comp)\n  return arr\nend", "\tlocal swap\n\
    \tfor i = 1, #arr do\n\t\tfor j = i, #arr do\n\t\t\tswap = arr[i]\n\t\t\tif count_ones(arr[i])\
    \ > count_ones(arr[j]) or\n\t\t\t\t(count_ones(arr[i]) == count_ones(arr[j]) and\
    \ arr[i] > arr[j]) then\n\t\t\t\tarr[i] = arr[j]\n\t\t\t\tarr[j] = swap\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn arr\nend", "  return table.sort(arr, function(a,\
    \ b)\n    local num_ones_a = string.len(string.gsub(string.format(\"%b\", a),\
    \ \"1\", \"\"))\n    local num_ones_b = string.len(string.gsub(string.format(\"\
    %b\", b), \"1\", \"\"))\n    if num_ones_a == num_ones_b then\n      return a\
    \ < b\n    else\n      return num_ones_a < num_ones_b\n    end\n  end)\nend",
  "    -- sort the array\n    table.sort(arr, function(a, b)\n        if a > 0 and\
    \ b > 0 then\n            local a_bits = math.modf(math.log(a) / math.log(2))\
    \ + 1\n            local b_bits = math.modf(math.log(b) / math.log(2)) + 1\n \
    \           if a_bits == b_bits then\n                return a < b\n         \
    \   else\n                return a_bits < b_bits\n            end\n        else\n\
    \            return a < b\n        end\n    end)\n    return arr\nend", "  local\
    \ function f(a, b)\n    local n_a, n_b = bit32.extract(a, 0, 1), bit32.extract(b,\
    \ 0, 1)\n    return n_a == n_b and a < b or n_a < n_b\n  end\n  table.sort(arr,\
    \ f)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    if a ~= b then\n\
    \      local aones = a:gsub('[^1]', ''):len()\n      local bones = b:gsub('[^1]',\
    \ ''):len()\n      if aones ~= bones then\n        return aones < bones\n    \
    \  else\n        return a < b\n      end\n    end\n  end)\n  return arr\nend",
  "  return table.sort(arr, function(a, b)\n    if tostring(a):reverse():find(\"1\"\
    ) == tostring(b):reverse():find(\"1\") then\n      return a < b\n    else\n  \
    \    return tostring(a):reverse():find(\"1\") < tostring(b):reverse():find(\"\
    1\")\n    end\n  end)\nend", "  local sort_by_ones = function(a, b)\n    local\
    \ bin_a = tostring(a):gsub('.', function(s) return tostring(s:byte()) end)\n \
    \   local bin_b = tostring(b):gsub('.', function(s) return tostring(s:byte())\
    \ end)\n    local ones_a = bin_a:gsub('0', ''):len()\n    local ones_b = bin_b:gsub('0',\
    \ ''):len()\n    if ones_a > ones_b then\n      return true\n    elseif ones_a\
    \ < ones_b then\n      return false\n    else\n      return a < b\n    end\n \
    \ end\n  return table.sort(arr, sort_by_ones)\nend", "  local compare = function(x,\
    \ y)\n    local x_ones = tostring(x):gsub('0', ''):len()\n    local y_ones = tostring(y):gsub('0',\
    \ ''):len()\n    if x_ones == y_ones then\n      return x < y\n    else\n    \
    \  return x_ones < y_ones\n    end\n  end\n  return table.sort(arr, compare)\n\
    end", "  local len = #arr\n  for i = 1, len - 1 do\n    for j = i + 1, len do\n\
    \      local a, b = arr[i], arr[j]\n      local x, y = a, b\n      if a < 0 then\
    \ a = -a end\n      if b < 0 then b = -b end\n      if a == b then\n        x,\
    \ y = arr[i], arr[j]\n      elseif a < b then\n        x, y = arr[i], arr[j]\n\
    \      elseif a > b then\n        x, y = arr[j], arr[i]\n      end\n      local\
    \ c, d = tostring(a, 2), tostring(b, 2)\n      local _, m = string.gsub(c, \"\
    1\", \"1\")\n      local _, n = string.gsub(d, \"1\", \"1\")\n      if m == n\
    \ then\n        if x > y then\n          arr[i], arr[j] = y, x\n        end\n\
    \      elseif m < n then\n        arr[i], arr[j] = x, y\n      elseif m > n then\n\
    \        arr[i], arr[j] = y, x\n      end\n    end\n  end\n  return arr\nend",
  "  local get_ones = function(e)\n    local s = \"\"\n    local bin = string.format(\"\
    %b\", e)\n    for char in bin:gmatch(\".\") do\n      if char == \"1\" then\n\
    \        s = s .. char\n      end\n    end\n    return s\n  end\n  local insertion_sort\
    \ = function(arr)\n    local size = #arr\n    for i = 2, size do\n      local\
    \ j = i\n      while j > 1 and arr[j - 1] > arr[j] do\n        arr[j - 1], arr[j]\
    \ = arr[j], arr[j - 1]\n        j = j - 1\n      end\n    end\n    return arr\n\
    \  end\n  local first = {}\n  local second = {}\n  for k, v in pairs(arr) do\n\
    \    if v > 0 then\n      table.insert(first, v)\n    else\n      table.insert(second,\
    \ v)\n    end\n  end\n  first = insertion_sort(first)\n  second = insertion_sort(second)\n\
    \  for k, v in pairs(first) do\n    first[k] = get_ones(v)\n  end\n  for k, v\
    \ in pairs(second) do\n    second[k] = get_ones(v)\n  end\n  local result = {}\n\
    \  local ones = {}\n  for k, v in pairs(first) do\n    if ones[v] == nil then\n\
    \      ones[v] = {}\n    end\n    table.insert(ones[v], arr[k])\n  end\n  for\
    \ k, v in pairs(second) do\n    if ones[v] == nil then\n      ones[v] = {}\n \
    \   end\n    table.insert(ones[v], arr[k])\n  end\n  for k, v in pairs(ones) do\n\
    \    local ones = {}\n    for _, num in pairs(v) do\n      table.insert(ones,\
    \ num)\n    end\n    table.insert(result, ones)\n  end\n  for i = 1, #result do\n\
    \    result[i] = insertion_sort(result[i])\n  end\n  local final = {}\n  for _,\
    \ v in", "  local bin_arr = {}\n  local bin_lookup = {}\n  local res = {}\n  local\
    \ idx = 1\n  for _,v in ipairs(arr) do\n    local bin = {}\n    repeat\n     \
    \ bin[#bin+1] = v % 2\n      v = math.floor(v / 2)\n    until v == 0\n    bin_arr[idx]\
    \ = bin\n    bin_lookup[idx] = v\n    idx = idx + 1\n  end\n  table.sort(bin_arr,\
    \ function(a, b)\n    if #a < #b then\n      return true\n    elseif #a > #b then\n\
    \      return false\n    else\n      for i = 1, #a do\n        if a[i] < b[i]\
    \ then\n          return true\n        elseif a[i] > b[i] then\n          return\
    \ false\n        end\n      end\n      return false\n    end\n  end)\n  for _,v\
    \ in ipairs(bin_arr) do\n    local val = 0\n    for i = 1, #v do\n      val =\
    \ val + (v[i] * 2^(i-1))\n    end\n    res[#res+1] = val\n  end\n  return res\n\
    end", "  table.sort(arr, function(a, b)\n    local ones_a = math.tointeger(a)\
    \ > 0 and math.tointeger(string.format(\"%x\", a):gsub(\"f\", \"\"):len()) or\
    \ 0\n    local ones_b = math.tointeger(b) > 0 and math.tointeger(string.format(\"\
    %x\", b):gsub(\"f\", \"\"):len()) or 0\n    if ones_a == ones_b then\n      return\
    \ a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  return table.sort(arr, function(a, b)\n    local ca, cb = a:len(), b:len()\n\
    \    if ca ~= cb then\n      return ca < cb\n    end\n    return a < b\n  end)\n\
    end", "    table.sort(arr, function(a, b)\n        return (math.floor(math.log(a,\
    \ 2) + 1) % 2) < (math.floor(math.log(b, 2) + 1) % 2) or (math.floor(math.log(a,\
    \ 2) + 1) % 2) == (math.floor(math.log(b, 2) + 1) % 2) and a < b\n    end)\n \
    \   return arr\nend", "    local bin = {}\n    for _, v in ipairs(arr) do\n  \
    \      local str = (string.format(\"%b\", v))\n        if not bin[str] then\n\
    \            bin[str] = {}\n        end\n        table.insert(bin[str], v)\n \
    \   end\n    local function quicksort(arr)\n        if #arr <= 1 then\n      \
    \      return arr\n        end\n        local tmp, left, right = {}, {}, {}\n\
    \        local pivot = math.random(1, #arr)\n        for i, v in ipairs(arr) do\n\
    \            if i == pivot then\n                table.insert(tmp, v)\n      \
    \      elseif v < arr[pivot] then\n                table.insert(left, v)\n   \
    \         else\n                table.insert(right, v)\n            end\n    \
    \    end\n        return quicksort(left) .. tmp .. quicksort(right)\n    end\n\
    \    local result = {}\n    for str, v in pairs(bin) do\n        table.insert(result,\
    \ quicksort(v))\n    end\n    return result\nend", "  table.sort(arr, function(a,\
    \ b)\n    return a % 2 ~= b % 2 and a % 2 == 0 or a < b\n  end)\n  return arr\n\
    end", "  local function compare(a, b)\n    local ones_a = a:len() - a:gsub('1',\
    \ ''):len()\n    local ones_b = b:len() - b:gsub('1', ''):len()\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end\n  local map = {}\n  for i, n in ipairs(arr) do\n    map[n] =\
    \ ('{:032b}'):format(n)\n  end\n  table.sort(arr, function(a, b)\n    return compare(map[a],\
    \ map[b])\n  end)\n  return arr\nend", "  local ret = {}\n  for _,v in ipairs(arr)\
    \ do\n    local x = v >= 0 and v or -v\n    local b = {}\n    while x > 0 do\n\
    \      table.insert(b, x % 2)\n      x = math.floor(x / 2)\n    end\n    table.insert(ret,\
    \ {v, b})\n  end\n  table.sort(ret, function(a, b)\n    local ta, tb = #a[2],\
    \ #b[2]\n    if ta == tb then\n      return a[1] < b[1]\n    else\n      return\
    \ ta < tb\n    end\n  end)\n  for i,v in ipairs(ret) do\n    ret[i] = v[1]\n \
    \ end\n  return ret\nend", "  local res = {}\n  local t = {}\n  local z = {}\n\
    \  for i, v in ipairs(arr) do\n    if v > 0 then\n      t[v] = v\n      table.insert(res,\
    \ v)\n    else\n      table.insert(z, v)\n    end\n  end\n  local sorted = {}\n\
    \  for _, v in pairs(t) do\n    local count = 0\n    local x = v\n    while x\
    \ > 0 do\n      count = count + (x % 2)\n      x = math.floor(x / 2)\n    end\n\
    \    table.insert(sorted, {v, count})\n  end\n  table.sort(sorted, function(a,\
    \ b)\n    return a[2] == b[2] and a[1] < b[1] or a[2] < b[2]\n  end)\n  for i,\
    \ v in ipairs(sorted) do\n    res[i] = v[1]\n  end\n  for i, v in ipairs(z) do\n\
    \    table.insert(res, v)\n  end\n  return res\nend", "    local sort_func = function(a,\
    \ b)\n        local ones_a = count_ones(a)\n        local ones_b = count_ones(b)\n\
    \        if ones_a == ones_b then\n            return a < b\n        else\n  \
    \          return ones_a < ones_b\n        end\n    end\n    table.sort(arr, sort_func)\n\
    \    return arr\nend", "  return table.sort(arr,\n      function(a, b)\n     \
    \   if a ~= b then\n          return get_ones(a) < get_ones(b)\n        else\n\
    \          return a < b\n        end\n      end)\nend", "    table.sort(arr, function(a,\
    \ b)\n        local a1, b1 = string.gsub(string.format(\"%b\", a), '[0]', ''),\
    \ string.gsub(string.format(\"%b\", b), '[0]', '')\n        if #a1 == #b1 then\n\
    \            return a < b\n        else\n            return #a1 < #b1\n      \
    \  end\n    end)\n    return arr\nend\n_G.sort_array = sort_array", "  local f\
    \ = function(a, b)\n    local na, nb = tostring(a, 2), tostring(b, 2)\n    local\
    \ ones = function(n)\n      return #n:gsub('[^1]', '')\n    end\n    local na_ones,\
    \ nb_ones = ones(na), ones(nb)\n    if na_ones == nb_ones then\n      return a\
    \ < b\n    else\n      return na_ones < nb_ones\n    end\n  end\n  table.sort(arr,\
    \ f)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local a1, b1\
    \ = bin.tobit(a), bin.tobit(b)\n    local a1_ones, b1_ones = bit.band(a1, a1-1),\
    \ bit.band(b1, b1-1)\n    local a1_num, b1_num = bit.tobit(a1_ones), bit.tobit(b1_ones)\n\
    \    if a1_num == b1_num then\n      return a < b\n    else\n      return a1_num\
    \ < b1_num\n    end\n  end)\n  return arr\nend", "  if not arr then return end\n\
    \  if #arr == 0 then return arr end\n  local res = {}\n  for i, v in ipairs(arr)\
    \ do\n    res[#res + 1] = {\n      count = count_ones(v),\n      value = v\n \
    \   }\n  end\n  table.sort(res, function(a, b)\n    if a.count == b.count then\n\
    \      return a.value < b.value\n    else\n      return a.count < b.count\n  \
    \  end\n  end)\n  for i, v in ipairs(res) do\n    res[i] = v.value\n  end\n  return\
    \ res\nend", "    local to_count = function(a)\n        local r = {}\n       \
    \ for _, v in ipairs(a) do\n            r[v] = (r[v] or 0) + 1\n        end\n\
    \        return r\n    end\n    local count_to_array = function(c)\n        local\
    \ t = {}\n        for k, v in pairs(c) do\n            for i = 1, v do\n     \
    \           table.insert(t, k)\n            end\n        end\n        return t\n\
    \    end\n    local count_ones = function(a)\n        local r = {}\n        for\
    \ _, v in ipairs(a) do\n            local c = 0\n            for i = 1, 32 do\n\
    \                if v & 1 == 1 then\n                    c = c + 1\n         \
    \       end\n                v = v >> 1\n            end\n            r[v] = c\n\
    \        end\n        return r\n    end\n    local function cmp(a, b)\n      \
    \  local ones = count_ones(arr)\n        if ones[a] == ones[b] then\n        \
    \    return a < b\n        else\n            return ones[a] < ones[b]\n      \
    \  end\n    end\n    table.sort(arr, cmp)\n    return arr\nend", "  return table.sort(arr,\
    \ function(a, b)\n    local a_str = tostring(a)\n    local b_str = tostring(b)\n\
    \    local a_len = a_str:len()\n    local b_len = b_str:len()\n    local a_val\
    \ = tonumber(a_str, 2)\n    local b_val = tonumber(b_str, 2)\n    local a_ones\
    \ = a_str:match(\"1\") and a_str:match(\"1\"):len() or 0\n    local b_ones = b_str:match(\"\
    1\") and b_str:match(\"1\"):len() or 0\n    return a_ones < b_ones or a_ones ==\
    \ b_ones and a_val < b_val\n  end)\nend", "  local len = #arr\n  local sorted\
    \ = {}\n  for i = 1, len do\n    local val = arr[i]\n    local bin = val >= 0\
    \ and bit32.extract(val, 2) or val\n    local one_num = bin:len() - bin:gsub(\"\
    1\", \"\"):len()\n    sorted[i] = {bin=bin, one_num=one_num, val=val}\n  end\n\
    \  table.sort(sorted, function(a, b)\n    if a.one_num == b.one_num then\n   \
    \   return a.val < b.val\n    else\n      return a.one_num < b.one_num\n    end\n\
    \  end)\n  for i = 1, len do\n    arr[i] = sorted[i].val\n  end\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local ones_a = a % 2 + (a >> 1) %\
    \ 2 + (a >> 2) % 2 + (a >> 3) % 2 + (a >> 4) % 2 + (a >> 5) % 2 + (a >> 6) % 2\
    \ + (a >> 7) % 2\n    local ones_b = b % 2 + (b >> 1) % 2 + (b >> 2) % 2 + (b\
    \ >> 3) % 2 + (b >> 4) % 2 + (b >> 5) % 2 + (b >> 6) % 2 + (b >> 7) % 2\n    if\
    \ ones_a == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "    local function ones(x)\n        return\
    \ string.gsub(string.format(\"%b\", x), \"[^1]\", \"\")\n    end\n    local function\
    \ count_ones(x)\n        return #ones(x)\n    end\n    local function key(x)\n\
    \        return string.format(\"%03d %04d\", count_ones(x), x)\n    end\n    local\
    \ t = {}\n    for _, v in ipairs(arr) do\n        table.insert(t, v)\n    end\n\
    \    table.sort(t, function(a, b)\n        return key(a) < key(b)\n    end)\n\
    \    return t\nend", "  table.sort(arr, function(a, b)\n    local a_ones = 0\n\
    \    local b_ones = 0\n    while a > 0 do\n      a_ones = a_ones + a % 2\n   \
    \   a = math.floor(a / 2)\n    end\n    while b > 0 do\n      b_ones = b_ones\
    \ + b % 2\n      b = math.floor(b / 2)\n    end\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  table.sort(arr, function(x, y)\n    local xb = x % 2\n\
    \    local yb = y % 2\n    local xs = tostring(x)\n    local ys = tostring(y)\n\
    \    if xb == yb then\n      if x == y then\n        return false\n      elseif\
    \ x > y then\n        return true\n      else\n        return false\n      end\n\
    \    elseif xb == 1 then\n      return true\n    else\n      return false\n  \
    \  end\n  end)\n  return arr\nend", "    local bin = {}\n    for i = 1, #arr do\n\
    \        bin[i] = arr[i]\n        local counter = 0\n        while arr[i] > 0\
    \ do\n            if arr[i] % 2 == 1 then\n                counter = counter +\
    \ 1\n            end\n            arr[i] = math.floor(arr[i] / 2)\n        end\n\
    \        bin[i] = counter\n    end\n    table.sort(arr, function(a, b)\n     \
    \   if bin[a] == bin[b] then\n            return a < b\n        else\n       \
    \     return bin[a] < bin[b]\n        end\n    end)\n    return arr\nend", " \
    \ return table.sort(arr, function(a, b)\n    local da, db = a, b\n    a, b = #(tostring(a):gsub('%d',\
    \ '')), #(tostring(b):gsub('%d', ''))\n    return a == b and da < db or a < b\n\
    \  end)\nend", "  local result = {}\n  for i = 1, #arr do\n    local v = arr[i]\n\
    \    local bs = tostring(string.format(\"%b\", v))\n    local c = string.gsub(bs,\
    \ \"1\", \"\")\n    local n = #bs - #c\n    if result[n] == nil then\n      result[n]\
    \ = {}\n    end\n    table.insert(result[n], v)\n  end\n  local r = {}\n  for\
    \ i = 0, 32 do\n    if result[i] ~= nil then\n      table.sort(result[i])\n  \
    \    for j = 1, #result[i] do\n        table.insert(r, result[i][j])\n      end\n\
    \    end\n  end\n  return r\nend", "  local zeros = {}\n  local rest = {}\n  for\
    \ _, v in ipairs(arr) do\n    local num_ones = v:to(2):count(1)\n    local bucket\
    \ = (num_ones == 0) and zeros or rest\n    bucket[#bucket + 1] = v\n  end\n  table.sort(rest,\
    \ function(a, b)\n    local ones_a = a:to(2):count(1)\n    local ones_b = b:to(2):count(1)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  for _, v in ipairs(zeros) do\n    rest[#rest +\
    \ 1] = v\n  end\n  return rest\nend", "  table.sort(arr, function(a, b)\n    return\
    \ (get_ones(a) ~= get_ones(b)) and (get_ones(a) < get_ones(b)) or (a < b)\n  end)\n\
    \  return arr\nend", "  local function get_ones(num)\n    local i = 0\n    for\
    \ c in tostring(num):gmatch('1') do\n      i = i + 1\n    end\n    return i\n\
    \  end\n  local result = {}\n  for _,v in ipairs(arr) do\n    table.insert(result,\
    \ {v, get_ones(v)})\n  end\n  table.sort(result, function(a, b)\n    if a[2] ==\
    \ b[2] then\n      return a[1] < b[1]\n    else\n      return a[2] < b[2]\n  \
    \  end\n  end)\n  for i,v in ipairs(result) do\n    result[i] = v[1]\n  end\n\
    \  return result\nend", "    table.sort(arr, function(a, b)\n        local ones_a\
    \ = a:gsub('[^1]', '')\n        local ones_b = b:gsub('[^1]', '')\n        if\
    \ #ones_a == #ones_b then\n            return a < b\n        else\n          \
    \  return #ones_a < #ones_b\n        end\n    end)\n    return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local na, nb = a, b\n    if a < 0 then na = -a end\n   \
    \ if b < 0 then nb = -b end\n    if a < 0 and b < 0 then\n      return count_ones(na)\
    \ > count_ones(nb) or (count_ones(na) == count_ones(nb) and na > nb)\n    elseif\
    \ a < 0 then\n      return count_ones(na) < count_ones(nb) or (count_ones(na)\
    \ == count_ones(nb) and na > nb)\n    elseif b < 0 then\n      return count_ones(na)\
    \ > count_ones(nb) or (count_ones(na) == count_ones(nb) and na < nb)\n    else\n\
    \      return count_ones(na) < count_ones(nb) or (count_ones(na) == count_ones(nb)\
    \ and na < nb)\n    end\n  end)\n  return arr\nend", "    local helper = function(a,\
    \ b)\n        local ones_a = tostring(a):reverse():gsub(\"0\", \"\"):len()\n \
    \       local ones_b = tostring(b):reverse():gsub(\"0\", \"\"):len()\n       \
    \ if ones_a > ones_b then\n            return true\n        elseif ones_a < ones_b\
    \ then\n            return false\n        else\n            return a < b\n   \
    \     end\n    end\n    return table.sort(arr, helper)\nend", "    return table.sort(arr,\
    \ function(a, b)\n        local c = a\n        local d = b\n        local e =\
    \ 0\n        local f = 0\n        while c > 0 do\n            e = e + 1\n    \
    \        c = c % 2\n        end\n        while d > 0 do\n            f = f + 1\n\
    \            d = d % 2\n        end\n        if e ~= f then\n            return\
    \ e < f\n        else\n            return a < b\n        end\n    end)\nend",
  "  -- Your code here\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
