name: HumanEval_54_same_chars
language: lua
prompt: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n-- True\n\
  -- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd', 'dddddddabc')\n\
  -- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n-- >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddddabc')\n-- False\nlocal function same_chars(s0, s1)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
  \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd',\
  \ 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n\
  \    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd',\
  \ 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'),\
  \ false)\n    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if #s0 == #s1 then\n        for i = 1, #s0 do\n            local\
    \ c0 = s0:sub(i, i)\n            local c1 = s1:sub(i, i)\n            if c0 ~=\
    \ c1 then\n                return false\n            end\n        end\n      \
    \  return true\n    end\n    return false\nend", "    local chars = {}\n    for\
    \ _, c in ipairs(s0) do\n        chars[c] = true\n    end\n    for _, c in ipairs(s1)\
    \ do\n        if not chars[c] then\n            return false\n        end\n  \
    \  end\n    return true\nend", "    -- TODO\n    local l0, l1 = string.len(s0),\
    \ string.len(s1)\n    if l0 == l1 then\n        local used = string.rep(' ', l0)\n\
    \        for i = 1, l0 do\n            local c0 = string.sub(s0, i, i)\n     \
    \       for j = 1, l1 do\n                local c1 = string.sub(s1, j, j)\n  \
    \              if used[j] == ' ' and c0 == c1 then\n                    used[j]\
    \ = '+'\n                    break\n                end\n            end\n   \
    \     end\n        return string.match(used, ' ') == nil\n    else\n        return\
    \ false\n    end\nend", "    local counts0 = { }\n    local counts1 = { }\n  \
    \  for i = 1, string.len(s0) do\n        local c = string.sub(s0, i, i)\n    \
    \    counts0[c] = (counts0[c] or 0) + 1\n    end\n    for i = 1, string.len(s1)\
    \ do\n        local c = string.sub(s1, i, i)\n        counts1[c] = (counts1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(counts0) do\n        if counts1[k]\
    \ ~= v then\n            return false\n        end\n    end\n    for k, v in pairs(counts1)\
    \ do\n        if counts0[k] ~= v then\n            return false\n        end\n\
    \    end\n    return true\nend", "    local t0 = {}\n    local t1 = {}\n    for\
    \ i = 1, #s0 do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n\
    \    end\n    local test = true\n    for k, _ in pairs(t0) do\n        if not\
    \ t1[k] then\n            test = false\n            break\n        end\n    end\n\
    \    if test then\n        for k, _ in pairs(t1) do\n            if not t0[k]\
    \ then\n                test = false\n                break\n            end\n\
    \        end\n    end\n    return test\nend", "  local visited = {}\n  for c in\
    \ string.gmatch(s0, '.') do\n    visited[c] = visited[c] or 0\n    visited[c]\
    \ = visited[c] + 1\n  end\n  for c in string.gmatch(s1, '.') do\n    visited[c]\
    \ = visited[c] or 0\n    visited[c] = visited[c] - 1\n  end\n  for _, count in\
    \ pairs(visited) do\n    if count ~= 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "    local t0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\n    local t1 = { 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }\n    for i = 1,\
    \ s0:len() do\n        local p = s0:byte(i) - 96\n        t0[p] = t0[p] + 1\n\
    \    end\n    for i = 1, s1:len() do\n        local p = s1:byte(i) - 96\n    \
    \    t1[p] = t1[p] + 1\n    end\n    for i = 1, #t0 do\n        if t0[i] ~= t1[i]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "  local dict0 = dict(s0)\n  local dict1 = dict(s1)\n  for k,v in pairs(dict0) do\n\
    \    if dict1[k] ~= v then\n      return false\n    end\n  end\n  for k,v in pairs(dict1)\
    \ do\n    if dict0[k] ~= v then\n      return false\n    end\n  end\n  return\
    \ true\nend", "\tlocal c0 = {}\n\tlocal c1 = {}\n\tfor i = 1, #s0 do\n\t\tc0[s0:sub(i,\
    \ i)] = true\n\tend\n\tfor i = 1, #s1 do\n\t\tc1[s1:sub(i, i)] = true\n\tend\n\
    \tfor k, v in pairs(c0) do\n\t\tif not c1[k] then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\tfor k, v in pairs(c1) do\n\t\tif not c0[k] then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "  local c0 = {}\n  local c1 = {}\n  for\
    \ i = 1, #s0 do\n    c0[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n   \
    \ c1[s1:sub(i, i)] = true\n  end\n  for k, _ in pairs(c0) do\n    if not c1[k]\
    \ then\n      return false\n    end\n  end\n  for k, _ in pairs(c1) do\n    if\
    \ not c0[k] then\n      return false\n    end\n  end\n  return true\nend", " \
    \   local d0 = {}\n    local d1 = {}\n    for i = 1, #s0 do\n        local c =\
    \ s0:sub(i, i)\n        d0[c] = d0[c] or 0\n        d0[c] = d0[c] + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        d1[c] = d1[c]\
    \ or 0\n        d1[c] = d1[c] + 1\n    end\n    for k, v in pairs(d0) do\n   \
    \     if d1[k] ~= v then\n            return false\n        end\n    end\n   \
    \ for k, v in pairs(d1) do\n        if d0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend", "  return is_permutation(s0, s1)\n\
    end", "  local i = 1\n  local j = 1\n  while s0[i] and s1[j] do\n    if s0[i]\
    \ == s1[j] then\n      i = i + 1\n      j = j + 1\n    else\n      j = j + 1\n\
    \    end\n  end\n  return not s0[i]\nend", "    local freq0 = count_chars(s0)\n\
    \    local freq1 = count_chars(s1)\n    for k, v in pairs(freq0) do\n        if\
    \ freq1[k] ~= v then\n            return false\n        end\n    end\n    for\
    \ k, v in pairs(freq1) do\n        if freq0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local c0 = count_chars(s0)\n\
    \    local c1 = count_chars(s1)\n    return c0 == c1\nend", "  local c0 = count_chars(s0)\n\
    \  local c1 = count_chars(s1)\n  return c0.char_cnt == c1.char_cnt and c0.len\
    \ == c1.len\nend", "\tif string.len(s0) ~= string.len(s1) then\n\t\treturn false\n\
    \tend\n\tlocal s0_has_char = {}\n\tfor i = 1, string.len(s0) do\n\t\tlocal char\
    \ = string.sub(s0, i, i)\n\t\ts0_has_char[char] = true\n\tend\n\tfor i = 1, string.len(s1)\
    \ do\n\t\tlocal char = string.sub(s1, i, i)\n\t\tif not s0_has_char[char] then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  local h = { }\n  for\
    \ c in s0:gmatch('.') do\n    h[c] = h[c] and h[c] + 1 or 1\n  end\n  for c in\
    \ s1:gmatch('.') do\n    h[c] = h[c] and h[c] - 1 or -1\n  end\n  for _, n in\
    \ pairs(h) do\n    if n ~= 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local count0 = char_count(s0)\n    local count1 = char_count(s1)\n\
    \    for k, v in pairs(count0) do\n        if count1[k] ~= v then\n          \
    \  return false\n        end\n    end\n    for k, v in pairs(count1) do\n    \
    \    if count0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local hist = {}\n    for i = 1, #s0 do\n        local\
    \ c = s0:sub(i, i)\n        hist[c] = (hist[c] or 0) + 1\n    end\n    for i =\
    \ 1, #s1 do\n        local c = s1:sub(i, i)\n        hist[c] = (hist[c] or 0)\
    \ - 1\n    end\n    for k, v in pairs(hist) do\n        if v ~= 0 then\n     \
    \       return false\n        end\n    end\n    return true\nend", "  if #s0 ~=\
    \ #s1 then return false end\n  if s0 == s1 then return true end\n  local chars0\
    \ = {}\n  local chars1 = {}\n  for i = 1, #s0 do\n    local ch = s0:sub(i, i)\n\
    \    chars0[ch] = (chars0[ch] or 0) + 1\n  end\n  for i = 1, #s1 do\n    local\
    \ ch = s1:sub(i, i)\n    chars1[ch] = (chars1[ch] or 0) + 1\n  end\n  for ch,\
    \ cnt in pairs(chars0) do\n    if chars1[ch] ~= cnt then return false end\n  end\n\
    \  for ch, cnt in pairs(chars1) do\n    if chars0[ch] ~= cnt then return false\
    \ end\n  end\n  return true\nend", "  local data = {}\n  for i = 1, utf8.len(s0)\
    \ do\n    local c = utf8.sub(s0, i, i)\n    data[c] = (data[c] or 0) + 1\n  end\n\
    \  for i = 1, utf8.len(s1) do\n    local c = utf8.sub(s1, i, i)\n    data[c] =\
    \ (data[c] or 0) - 1\n  end\n  for _, v in pairs(data) do\n    if v ~= 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local t0 = {}\n \
    \ local t1 = {}\n  local i\n  for i = 1, #s0 do\n    t0[s0:sub(i, i)] = t0[s0:sub(i,\
    \ i)] and t0[s0:sub(i, i)] + 1 or 1\n  end\n  for i = 1, #s1 do\n    t1[s1:sub(i,\
    \ i)] = t1[s1:sub(i, i)] and t1[s1:sub(i, i)] + 1 or 1\n  end\n  for i = 1, #s0\
    \ do\n    if t0[s0:sub(i, i)] ~= t1[s0:sub(i, i)] then\n      return false\n \
    \   end\n  end\n  return true\nend", "    local chars0 = {}\n    local chars1\
    \ = {}\n    for c in s0:gmatch('.') do\n        chars0[c] = (chars0[c] or 0) +\
    \ 1\n    end\n    for c in s1:gmatch('.') do\n        chars1[c] = (chars1[c] or\
    \ 0) + 1\n    end\n    for c, n in pairs(chars0) do\n        if chars1[c] ~= n\
    \ then\n            return false\n        end\n    end\n    for c, n in pairs(chars1)\
    \ do\n        if chars0[c] ~= n then\n            return false\n        end\n\
    \    end\n    return true\nend", "    local check = {}\n    for _, c in ipairs\
    \ {s0:byte(1, -1)} do\n        check[c] = (check[c] or 0) + 1\n    end\n    for\
    \ _, c in ipairs {s1:byte(1, -1)} do\n        check[c] = (check[c] or 0) - 1\n\
    \    end\n    for _, c in ipairs {s0:byte(1, -1)} do\n        if check[c] ~= 0\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    local t0 = count_chars(s0)\n    local t1 = count_chars(s1)\n    for k,v in\
    \ pairs(t0) do\n        if t1[k] ~= v then\n            return false\n       \
    \ end\n    end\n    for k,v in pairs(t1) do\n        if t0[k] ~= v then\n    \
    \        return false\n        end\n    end\n    return true\nend", "    if type(s0)\
    \ ~= 'string' or type(s1) ~= 'string' then\n        return nil\n    end\n    local\
    \ len0 = string.len(s0)\n    local len1 = string.len(s1)\n    if len0 ~= len1\
    \ then\n        return false\n    end\n    for i = 1, len0 do\n        local ch0\
    \ = string.byte(s0, i)\n        local ch1 = string.byte(s1, i)\n        if ch0\
    \ ~= ch1 then\n            return false\n        end\n    end\n    return true\n\
    end", "  if #s0 ~= #s1 then return false end\n  local t = {}\n  for i = 1, #s0\
    \ do\n    local c = s0:sub(i, i)\n    t[c] = (t[c] or 0) + 1\n  end\n  for i =\
    \ 1, #s1 do\n    local c = s1:sub(i, i)\n    t[c] = (t[c] or 0) - 1\n    if t[c]\
    \ < 0 then return false end\n  end\n  return true\nend", "  local a0 = {}\n  local\
    \ a1 = {}\n  for c in s0:gmatch(\".\") do\n    a0[c] = (a0[c] or 0) + 1\n  end\n\
    \  for c in s1:gmatch(\".\") do\n    a1[c] = (a1[c] or 0) + 1\n  end\n  for k,\
    \ v in pairs(a0) do\n    if a1[k] ~= v then\n      return false\n    end\n  end\n\
    \  for k, v in pairs(a1) do\n    if a0[k] ~= v then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local c0 = count_chars(s0)\n  local c1 = count_chars(s1)\n\
    \  return c0 == c1\nend", "\tassert(type(s0) == 'string' and type(s1) == 'string')\n\
    \tlocal c0, c1 = count_chars(s0), count_chars(s1)\n\tfor k, v in pairs(c0) do\n\
    \t\tif c1[k] ~= v then\n\t\t\treturn false\n\t\tend\n\tend\n\tfor k, v in pairs(c1)\
    \ do\n\t\tif c0[k] ~= v then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "  local t0 = char_table(s0)\n  local t1 = char_table(s1)\n  for k,v in\
    \ pairs(t0) do\n    if not (t1[k] and t1[k] >= v) then\n      return false\n \
    \   end\n  end\n  return true\nend", "\tlocal t0 = {}\n\tlocal t1 = {}\n\tfor\
    \ i = 1, #s0 do\n\t\tt0[i] = s0:sub(i, i)\n\tend\n\tfor i = 1, #s1 do\n\t\tt1[i]\
    \ = s1:sub(i, i)\n\tend\n\ttable.sort(t0)\n\ttable.sort(t1)\n\ts0 = table.concat(t0)\n\
    \ts1 = table.concat(t1)\n\treturn s0 == s1\nend", "    local s0_len = #s0\n  \
    \  local s1_len = #s1\n    if s0_len ~= s1_len then\n        return false\n  \
    \  end\n    local char_map = {}\n    for i = 1, s0_len do\n        local char\
    \ = s0:sub(i, i)\n        if char_map[char] then\n            char_map[char] =\
    \ char_map[char] + 1\n        else\n            char_map[char] = 1\n        end\n\
    \    end\n    for i = 1, s1_len do\n        local char = s1:sub(i, i)\n      \
    \  if char_map[char] then\n            char_map[char] = char_map[char] - 1\n \
    \       else\n            return false\n        end\n    end\n    for _, count\
    \ in pairs(char_map) do\n        if count ~= 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local freq = {}\n  for char in\
    \ s0:gmatch('.') do\n    freq[char] = (freq[char] or 0) + 1\n  end\n  for char\
    \ in s1:gmatch('.') do\n    freq[char] = (freq[char] or 0) - 1\n  end\n  for _,\
    \ v in pairs(freq) do\n    if v ~= 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "    -- If the words are different in length, they can't\
    \ have the same characters.\n    if #s0 ~= #s1 then\n        return false\n  \
    \  end", "    local c0 = count_chars(s0)\n    local c1 = count_chars(s1)\n   \
    \ for k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return false\n\
    \        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k] ~= v then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ t = {}\n    for c in s0:gmatch\".\" do\n        t[c] = (t[c] or 0) + 1\n   \
    \ end\n    for c in s1:gmatch\".\" do\n        t[c] = (t[c] or 0) - 1\n    end\n\
    \    for _, v in pairs(t) do\n        if v ~= 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local t = {}\n    for i = 1,\
    \ #s0 do\n        local c = s0:sub(i, i)\n        t[c] = (t[c] or 0) + 1\n   \
    \ end\n    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t[c] = (t[c]\
    \ or 0) - 1\n    end\n    for _, v in pairs(t) do\n        if v ~= 0 then\n  \
    \          return false\n        end\n    end\n    return true\nend", "  assert(type(s0)\
    \ == 'string' and type(s1) == 'string')\n  local n0, n1 = #s0, #s1\n  if n0 ~=\
    \ n1 then return false end\n  local used_in_s0 = {}\n  for i = 1, n0 do\n    local\
    \ c = s0:sub(i, i)\n    local pos = s1:find(c, 1, true)\n    if not pos then return\
    \ false end\n    if used_in_s0[pos] then return false end\n    used_in_s0[pos]\
    \ = true\n  end\n  return true\nend", "  -- method 1\n  -- for c in s0:gmatch('.')\
    \ do\n  --   local n = (s1:gsub(c, ''))\n  --   if #n == #s1 then\n  --     return\
    \ false\n  --   end\n  --   s1 = n\n  -- end\n  -- return true", "\tif #s0 ~=\
    \ #s1 then\n\t\treturn false\n\tend\n\tlocal c0 = char_counts(s0)\n\tlocal c1\
    \ = char_counts(s1)\n\tfor k, v in pairs(c0) do\n\t\tif v ~= c1[k] then\n\t\t\t\
    return false\n\t\tend\n\tend\n\treturn true\nend", "    local ss0 = s0:gsub('%s',\
    \ '')\n    local ss1 = s1:gsub('%s', '')\n    if ss0:len() ~= ss1:len() then\n\
    \        return false\n    end\n    return ss0:gsub('.', function(c)\n       \
    \ return ss1:gsub(c, '')\n    end) == ''\nend", "  local seen = {}\n  for c in\
    \ (s0 .. s1):gmatch'.' do\n    seen[c] = true\n  end\n  local c = 0\n  for _ in\
    \ pairs(seen) do\n    c = c + 1\n  end\n  return c == 2\nend", "  -- count the\
    \ number of times each letter appears in s0\n  local counts = {}\n  for i = 1,\
    \ #s0 do\n    local c = s0:sub(i, i)\n    if counts[c] then\n      counts[c] =\
    \ counts[c] + 1\n    else\n      counts[c] = 1\n    end\n  end\n  -- count the\
    \ number of times each letter appears in s1\n  for i = 1, #s1 do\n    local c\
    \ = s1:sub(i, i)\n    if counts[c] then\n      counts[c] = counts[c] - 1\n   \
    \ else\n      counts[c] = -1\n    end\n  end\n  -- check if the counts are zero\
    \ for all letters\n  for _, v in pairs(counts) do\n    if v ~= 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local t0 = char_counts(s0)\n\
    \  local t1 = char_counts(s1)\n  for k,v in pairs(t0) do\n    if t1[k] ~= v then\n\
    \      return false\n    end\n  end\n  for k,v in pairs(t1) do\n    if t0[k] ~=\
    \ v then\n      return false\n    end\n  end\n  return true\nend", "  -- First,\
    \ check lengths\n  if #s0 ~= #s1 then\n    return false\n  end\n  -- Assume the\
    \ strings are made of ASCII characters, so we can use the\n  -- values of the\
    \ characters to create the histograms.\n  local histo0 = {}\n  local histo1 =\
    \ {}\n  for i = 1, #s0 do\n    local c0 = s0:sub(i, i)\n    local c1 = s1:sub(i,\
    \ i)\n    histo0[c0] = (histo0[c0] or 0) + 1\n    histo1[c1] = (histo1[c1] or\
    \ 0) + 1\n  end\n  -- Check if the histograms are the same\n  local same = true\n\
    \  for c, n0 in pairs(histo0) do\n    local n1 = histo1[c]\n    if n1 ~= n0 then\n\
    \      same = false\n      break\n    end\n  end\n  return same\nend", "    local\
    \ map0 = {}\n    local map1 = {}\n    for i = 1, #s0 do\n        local c = s0:sub(i,\
    \ i)\n        map0[c] = (map0[c] or 0) + 1\n    end\n    for i = 1, #s1 do\n \
    \       local c = s1:sub(i, i)\n        map1[c] = (map1[c] or 0) + 1\n    end\n\
    \    for c, n in pairs(map0) do\n        if not map1[c] or map1[c] < n then\n\
    \            return false\n        end\n    end\n    for c, n in pairs(map1) do\n\
    \        if not map0[c] or map0[c] < n then\n            return false\n      \
    \  end\n    end\n    return true\nend", "    local c0 = count_chars(s0)\n    local\
    \ c1 = count_chars(s1)\n    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(c1) do\n\
    \        if c0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend", "  --print(s0, s1)\n  if s0 == s1 then return true end\n\
    \  for c in s0:gmatch('.') do\n    if not s1:find(c, 1, true) then return false\
    \ end\n  end\n  return true\nend", "  if #s0 ~= #s1 then return false end\n  for\
    \ c in s0:gmatch('.') do\n    if s1:find(c, 1, true) == nil then return false\
    \ end\n  end\n  return true\nend", "  assert(#s0 <= #s1)\n  local count0 = count_chars(s0)\n\
    \  local count1 = count_chars(s1)\n  for k, n in pairs(count0) do\n    if count1[k]\
    \ < n then\n      return false\n    end\n  end\n  return true\nend", "    local\
    \ t0 = {}; t0[s0] = 1\n    local t1 = {}; t1[s1] = 1\n    for k, _ in pairs(t0)\
    \ do\n        t0[k] = nil\n        if t1[k] then\n            t1[k] = nil\n  \
    \      end\n    end\n    for k, _ in pairs(t1) do\n        t1[k] = nil\n     \
    \   if t0[k] then\n            t0[k] = nil\n        end\n    end\n    return next(t0)\
    \ == nil and next(t1) == nil\nend", "    local t0 = {}\n    local t1 = {}\n  \
    \  for _, c in ipairs(str_to_chars(s0)) do\n        t0[c] = (t0[c] or 0) + 1\n\
    \    end\n    for _, c in ipairs(str_to_chars(s1)) do\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local m0 = {}\n    local m1 = {}\n    local count\
    \ = 0\n    local len0 = #s0\n    local len1 = #s1\n    if len0 == len1 then\n\
    \        for c in s0:gmatch(\".\") do\n            if not m0[c] then\n       \
    \         m0[c] = 0\n            end\n            m0[c] = m0[c] + 1\n        end\n\
    \        for c in s1:gmatch(\".\") do\n            if not m1[c] then\n       \
    \         m1[c] = 0\n            end\n            m1[c] = m1[c] + 1\n        end\n\
    \        for _, v in pairs(m0) do\n            if m1[v] then\n               \
    \ count = count + 1\n            end\n        end\n        return count == len0\n\
    \    end\n    return false\nend", "\tlocal l0, l1 = s0:len(), s1:len()\n\tlocal\
    \ chars = {}\n\tfor i = 1, l0 do\n\t\tchars[s0:sub(i, i)] = true\n\tend\n\tfor\
    \ i = 1, l1 do\n\t\tlocal c = s1:sub(i, i)\n\t\tif chars[c] then\n\t\t\tchars[c]\
    \ = nil\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn not next(chars)\n\
    end", "\tif #s0 ~= #s1 then\n\t\treturn false\n\tend\n\tlocal xs = {}\n\tfor i\
    \ = 1, #s0 do\n\t\txs[i] = s0:sub(i, i)\n\tend\n\tfor i = 1, #s1 do\n\t\tlocal\
    \ x = s1:sub(i, i)\n\t\tlocal j = find(xs, x)\n\t\tif j then\n\t\t\ttremove(xs,\
    \ j)\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "   \
    \ local freq0 = get_char_freq(s0)\n    local freq1 = get_char_freq(s1)\n    for\
    \ char, freq in pairs(freq0) do\n        if freq1[char] ~= freq then\n       \
    \     return false\n        end\n    end\n    return true\nend", "    if #s0 ~=\
    \ #s1 then\n        return false\n    end\n    local chars = {}\n    for i = 1,\
    \ #s0 do\n        local c = s0:sub(i, i)\n        chars[c] = (chars[c] or 0) +\
    \ 1\n    end\n    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        if\
    \ chars[c] then\n            chars[c] = chars[c] - 1\n            if chars[c]\
    \ < 0 then\n                return false\n            end\n        else\n    \
    \        return false\n        end\n    end\n    return true\nend", "  if #s0\
    \ == #s1 then\n    for c in s0:gmatch'.' do\n      if not s1:find(c, 1, true)\
    \ then\n        return false\n      end\n    end\n    return true\n  end\n  return\
    \ false\nend", "    local l0, l1 = #s0, #s1\n    local i0, i1 = 1, 1\n    while\
    \ i0 <= l0 and i1 <= l1 do\n        local c0, c1 = sub(s0, i0, i0), sub(s1, i1,\
    \ i1)\n        if c0 ~= c1 then\n            return false\n        end\n     \
    \   local i0p, i1p = i0, i1\n        i0 = find(s0, c0, i0p + 1, true) or (l0 +\
    \ 1)\n        i1 = find(s1, c1, i1p + 1, true) or (l1 + 1)\n    end\n    return\
    \ i0 > l0 and i1 > l1\nend", "\tlocal chars = {}\n\tfor i = 1, string.len(s0)\
    \ do\n\t\tlocal c = string.sub(s0, i, i)\n\t\tchars[c] = (chars[c] or 0) + 1\n\
    \tend\n\tfor i = 1, string.len(s1) do\n\t\tlocal c = string.sub(s1, i, i)\n\t\t\
    chars[c] = (chars[c] or 0) - 1\n\tend\n\tfor c, n in pairs(chars) do\n\t\tif n\
    \ ~= 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    local\
    \ t0 = {}\n    local t1 = {}\n    for c in (s0 .. s1):gmatch('.') do\n       \
    \ t0[c] = (t0[c] or 0) + 1\n        t1[c] = (t1[c] or 0) + 1\n    end\n    for\
    \ c, v in pairs(t0) do\n        if v ~= t1[c] then\n            return false\n\
    \        end\n    end\n    return true\nend", "    if #s0 ~= #s1 then\n      \
    \  return false\n    end\n    return s0:sort() == s1:sort()\nend", "  local table0\
    \ = {}\n  local table1 = {}\n  for i=1,#s0 do\n    table0[s0:sub(i,i)] = true\n\
    \  end\n  for i=1,#s1 do\n    table1[s1:sub(i,i)] = true\n  end\n  for c in pairs(table0)\
    \ do\n    if not table1[c] then\n      return false\n    end\n  end\n  for c in\
    \ pairs(table1) do\n    if not table0[c] then\n      return false\n    end\n \
    \ end\n  return true\nend", "    local hist0 = histogram(s0)\n    local hist1\
    \ = histogram(s1)\n    for c in pairs(hist0) do\n        if not hist1[c] or hist1[c]\
    \ < hist0[c] then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local c0 = count_chars(s0)\n    local c1 = count_chars(s1)\n\
    \    for c in pairs(c0) do\n        if c0[c] ~= c1[c] then\n            return\
    \ false\n        end\n    end\n    for c in pairs(c1) do\n        if c0[c] ~=\
    \ c1[c] then\n            return false\n        end\n    end\n    return true\n\
    end", "  local c0 = {}\n  local c1 = {}\n  -- count letters in s0\n  for _, c\
    \ in utf8.codes(s0) do\n    c0[c] = (c0[c] or 0) + 1\n  end\n  -- count letters\
    \ in s1\n  for _, c in utf8.codes(s1) do\n    c1[c] = (c1[c] or 0) + 1\n  end\n\
    \  -- compare\n  for c, n in pairs(c0) do\n    if n ~= c1[c] then\n      return\
    \ false\n    end\n  end\n  for c, n in pairs(c1) do\n    if n ~= c0[c] then\n\
    \      return false\n    end\n  end\n  return true\nend", "\tif #s0 ~= #s1 then\n\
    \t\treturn false\n\tend\n\tlocal x0 = {}\n\tlocal x1 = {}\n\tfor c in string.gmatch(s0,\
    \ \".\") do\n\t\tx0[c] = (x0[c] or 0) + 1\n\tend\n\tfor c in string.gmatch(s1,\
    \ \".\") do\n\t\tx1[c] = (x1[c] or 0) + 1\n\tend\n\tfor k, v in pairs(x0) do\n\
    \t\tif x1[k] ~= v then\n\t\t\treturn false\n\t\tend\n\tend\n\tfor k, v in pairs(x1)\
    \ do\n\t\tif x0[k] ~= v then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "  if #s0 ~= #s1 then return false end\n  local sc = {}\n  for c in gmatch(s0,\
    \ '.') do sc[c] = (sc[c] or 0) + 1 end\n  for c in gmatch(s1, '.') do sc[c] =\
    \ (sc[c] or 0) - 1 end\n  for _, n in pairs(sc) do if n ~= 0 then return false\
    \ end end\n  return true\nend", "    for i = 1, #s0 do\n        if not find(s1,\
    \ sub(s0, i, i)) then\n            return false\n        end\n    end\n    for\
    \ i = 1, #s1 do\n        if not find(s0, sub(s1, i, i)) then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local c0 = {}\n   \
    \ local c1 = {}\n    for i = 1, #s0 do\n        c0[s0:sub(i, i)] = (c0[s0:sub(i,\
    \ i)] or 0) + 1\n    end\n    for i = 1, #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i,\
    \ i)] or 0) + 1\n    end\n    for k, v in pairs(c0) do\n        if c1[k] ~= v\
    \ then\n            return false\n        end\n    end\n    for k, v in pairs(c1)\
    \ do\n        if c0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local u0 = {}\n    local u1 = {}\n    for i = 1,\
    \ string.len(s0) do\n        u0[s0:sub(i, i)] = true\n    end\n    for i = 1,\
    \ string.len(s1) do\n        u1[s1:sub(i, i)] = true\n    end\n    for k, _ in\
    \ pairs(u0) do\n        if not u1[k] then\n            return false\n        end\n\
    \    end\n    for k, _ in pairs(u1) do\n        if not u0[k] then\n          \
    \  return false\n        end\n    end\n    return true\nend", "  if #s0 ~= #s1\
    \ then return false end\n  local chars = {}\n  for i = 1, #s0 do\n    local c\
    \ = s0:sub(i, i)\n    if chars[c] then chars[c] = chars[c] + 1\n    else chars[c]\
    \ = 1 end\n  end\n  for i = 1, #s1 do\n    local c = s1:sub(i, i)\n    if chars[c]\
    \ then chars[c] = chars[c] - 1\n    else return false end\n  end\n  for c, v in\
    \ pairs(chars) do\n    if v ~= 0 then return false end\n  end\n  return true\n\
    end", "\tif #s0 ~= #s1 then\n\t\treturn false\n\tend\n\tlocal used = {}\n\tfor\
    \ i = 1, #s0 do\n\t\tlocal c = s0:sub(i, i)\n\t\tused[c] = true\n\tend\n\tfor\
    \ i = 1, #s1 do\n\t\tlocal c = s1:sub(i, i)\n\t\tif not used[c] then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "\tlocal char_count = {}\n\tlocal\
    \ char_count_end = 0\n\tfor i = 1, #s0 do\n\t\tlocal c = s0:sub(i, i)\n\t\tif\
    \ not char_count[c] then\n\t\t\tchar_count_end = char_count_end + 1\n\t\t\tchar_count[c]\
    \ = char_count_end\n\t\tend\n\tend\n\tfor i = 1, #s1 do\n\t\tlocal c = s1:sub(i,\
    \ i)\n\t\tif not char_count[c] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "  local map0 = {}\n  local map1 = {}\n  for i = 1, #s0 do\n   \
    \ local c = s0:sub(i, i)\n    map0[c] = (map0[c] or 0) + 1\n  end\n  for i = 1,\
    \ #s1 do\n    local c = s1:sub(i, i)\n    map1[c] = (map1[c] or 0) + 1\n  end\n\
    \  for c, n in pairs(map0) do\n    if map1[c] ~= n then\n      return false\n\
    \    end\n  end\n  for c, n in pairs(map1) do\n    if map0[c] ~= n then\n    \
    \  return false\n    end\n  end\n  return true\nend", "    for c in (s0 .. s1):gmatch('.')\
    \ do\n        s0 = s0:gsub(c, '')\n        s1 = s1:gsub(c, '')\n    end\n    return\
    \ s0 == '' and s1 == ''\nend", "    local t0 = {}\n    local t1 = {}\n    for\
    \ i = 1, #s0 do\n        local c = s0:sub(i, i)\n        t0[c] = t0[c] or 0\n\
    \        t0[c] = t0[c] + 1\n    end\n    for i = 1, #s1 do\n        local c =\
    \ s1:sub(i, i)\n        t1[c] = t1[c] or 0\n        t1[c] = t1[c] + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if not t1[k] or t1[k] ~= v then\n     \
    \       return false\n        end\n    end\n    for k, v in pairs(t1) do\n   \
    \     if not t0[k] or t0[k] ~= v then\n            return false\n        end\n\
    \    end\n    return true\nend", "    local t = _M.create_char_table(s0)\n   \
    \ for i = 1, s1:len() do\n        local c = s1:sub(i, i)\n        if not t[c]\
    \ then\n            return false\n        end\n        t[c] = t[c] - 1\n     \
    \   if t[c] < 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  local lut = {}\n  for c in s0:gmatch('.') do\n    lut[c] = true\n\
    \  end\n  for c in s1:gmatch('.') do\n    if not lut[c] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local l0, l1 = #s0, #s1\n  if l0 > l1\
    \ then return false end\n  local k = 0\n  for i = 1, l0 do\n    local j = 0\n\
    \    repeat\n      j = s1:find(s0:sub(i, i), j + 1)\n      if j then\n       \
    \ k = k + 1\n        s1 = s1:sub(1, j - 1) .. s1:sub(j + 1)\n      end\n    until\
    \ not j\n  end\n  return k == l0\nend", "  local c0 = {}\n  local c1 = {}\n  for\
    \ i = 1, #s0 do\n    c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n  end\n \
    \ for i = 1, #s1 do\n    c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n  end\n\
    \  for k, v in pairs(c0) do\n    if not c1[k] or c1[k] ~= v then\n      return\
    \ false\n    end\n  end\n  for k, v in pairs(c1) do\n    if not c0[k] or c0[k]\
    \ ~= v then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ t0 = {}\n  local t1 = {}\n  for c in string.gmatch(s0, '.') do\n    t0[c] =\
    \ true\n  end\n  for c in string.gmatch(s1, '.') do\n    t1[c] = true\n  end\n\
    \  for k, _ in pairs(t0) do\n    if not t1[k] then\n      return false\n    end\n\
    \  end\n  for k, _ in pairs(t1) do\n    if not t0[k] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local len0 = string.len(s0)\n  local\
    \ len1 = string.len(s1)\n  local delta = len1 - len0\n  local m = {}\n  for i\
    \ = 1, len0 do\n    local n = string.byte(s0, i)\n    m[n] = m[n] and m[n] + 1\
    \ or 1\n  end\n  for i = 1, len1 do\n    local n = string.byte(s1, i)\n    if\
    \ m[n] then\n      m[n] = m[n] - 1\n      if m[n] == 0 then\n        m[n] = nil\n\
    \      end\n    end\n  end\n  return next(m) == nil\nend", "  local c0 = get_chars(s0)\n\
    \  local c1 = get_chars(s1)\n  for k,v in pairs(c0) do\n    if v ~= c1[k] then\n\
    \      return false\n    end\n  end\n  for k,v in pairs(c1) do\n    if v ~= c0[k]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  return word_to_chars(s0)\
    \ == word_to_chars(s1)\nend", "  if #s0 ~= #s1 then return false end\n  local\
    \ c0, c1 = {}, {}\n  for i = 1, #s0 do\n    local x0, x1 = s0:sub(i, i), s1:sub(i,\
    \ i)\n    c0[x0] = (c0[x0] or 0) + 1\n    c1[x1] = (c1[x1] or 0) + 1\n  end\n\
    \  for k, v in pairs(c0) do\n    if c1[k] ~= v then return false end\n  end\n\
    \  return true\nend", "    local used0 = {}\n    local used1 = {}\n    for i =\
    \ 1, s0:len() do\n        local idx = s0:sub(i, i):byte()\n        if used0[idx]\
    \ then\n            used0[idx] = used0[idx] + 1\n        else\n            used0[idx]\
    \ = 1\n        end\n    end\n    for i = 1, s1:len() do\n        local idx = s1:sub(i,\
    \ i):byte()\n        if used1[idx] then\n            used1[idx] = used1[idx] +\
    \ 1\n        else\n            used1[idx] = 1\n        end\n    end\n    for k,\
    \ v in pairs(used0) do\n        if used1[k] ~= v then\n            return false\n\
    \        end\n    end\n    for k, v in pairs(used1) do\n        if used0[k] ~=\
    \ v then\n            return false\n        end\n    end\n    return true\nend",
  "    assert(type(s0) == 'string' and type(s1) == 'string')\n    assert(s0:len()\
    \ <= MAX_WORD_LEN and s1:len() <= MAX_WORD_LEN)\n    local counts0 = count_chars(s0)\n\
    \    local counts1 = count_chars(s1)\n    for char, count in pairs(counts0) do\n\
    \        if counts1[char] ~= count then\n            return false\n        end\n\
    \    end\n    for char, count in pairs(counts1) do\n        if counts0[char] ~=\
    \ count then\n            return false\n        end\n    end\n    return true\n\
    end", "    local t0 = {}\n    local t1 = {}\n    for i = 1, string.len(s0) do\n\
    \        local c = string.sub(s0, i, i)\n        t0[c] = true\n    end\n    for\
    \ i = 1, string.len(s1) do\n        local c = string.sub(s1, i, i)\n        t1[c]\
    \ = true\n    end\n    for k, _ in pairs(t0) do\n        if not t1[k] then\n \
    \           return false\n        end\n    end\n    for k, _ in pairs(t1) do\n\
    \        if not t0[k] then\n            return false\n        end\n    end\n \
    \   return true\nend", "    local m0 = {}\n    local m1 = {}\n    for c in string.gmatch(s0,\
    \ \"%a\") do\n        m0[c] = (m0[c] or 0) + 1\n    end\n    for c in string.gmatch(s1,\
    \ \"%a\") do\n        m1[c] = (m1[c] or 0) + 1\n    end\n    for k, v in pairs(m0)\
    \ do\n        if v ~= m1[k] then\n            return false\n        end\n    end\n\
    \    for k, v in pairs(m1) do\n        if v ~= m0[k] then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    if #s0 ~= #s1 then\n\
    \        return false\n    end\n    local set0 = {}\n    local set1 = {}\n   \
    \ for c in utf8.chars(s0) do\n        set0[c] = (set0[c] or 0) + 1\n    end\n\
    \    for c in utf8.chars(s1) do\n        set1[c] = (set1[c] or 0) + 1\n    end\n\
    \    for c, v in pairs(set0) do\n        if v ~= set1[c] then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local map0 = {}\n \
    \   local map1 = {}\n    for c in s0:gmatch\".\" do\n        map0[c] = map0[c]\
    \ or 0\n        map0[c] = map0[c] + 1\n    end\n    for c in s1:gmatch\".\" do\n\
    \        map1[c] = map1[c] or 0\n        map1[c] = map1[c] + 1\n    end\n    for\
    \ k, v in pairs(map0) do\n        if map1[k] ~= v then\n            return false\n\
    \        end\n    end\n    for k, v in pairs(map1) do\n        if map0[k] ~= v\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    local c0 = count_chars(s0)\n    local c1 = count_chars(s1)\n    for k, v in\
    \ pairs(c0) do\n        if c1[k] ~= v then\n            return false\n       \
    \ end\n    end\n    for k, v in pairs(c1) do\n        if c0[k] ~= v then\n   \
    \         return false\n        end\n    end\n    return true\nend", "    local\
    \ letter_count = {}\n    for i = 1, #s0 do\n        letter_count[s0:sub(i, i)]\
    \ = letter_count[s0:sub(i, i)] or 0\n        letter_count[s0:sub(i, i)] = letter_count[s0:sub(i,\
    \ i)] + 1\n    end\n    for i = 1, #s1 do\n        letter_count[s1:sub(i, i)]\
    \ = letter_count[s1:sub(i, i)] or 0\n        letter_count[s1:sub(i, i)] = letter_count[s1:sub(i,\
    \ i)] - 1\n    end\n    for k, v in pairs(letter_count) do\n        if v ~= 0\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "\tlocal t = {}\n\tlocal l = #s0\n\tfor i = 1, l do\n\t\tlocal c = s0:sub(i, i)\n\
    \t\tt[c] = (t[c] or 0) + 1\n\tend\n\tfor i = 1, l do\n\t\tlocal c = s1:sub(i,\
    \ i)\n\t\tt[c] = (t[c] or 0) - 1\n\tend\n\tfor c, v in pairs(t) do\n\t\tif v ~=\
    \ 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\tlocal counts0\
    \ = count_chars(s0)\n\tlocal counts1 = count_chars(s1)\n\tfor char, count in pairs(counts0)\
    \ do\n\t\tif counts1[char] ~= count then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend", "    local s0, s1 = s0:lower(), s1:lower()\n    for i = 1,\
    \ #s0 do\n        local c = s0:sub(i, i)\n        s1 = s1:gsub(c, '')\n    end\n\
    \    return #s1 == 0\nend", "    return table.concat(s0):sort() == table.concat(s1):sort()\n\
    end", "    local t0 = {}\n    local t1 = {}\n    for c in s0:gmatch(\".\") do\n\
    \        t0[c] = (t0[c] or 0) + 1\n    end\n    for c in s1:gmatch(\".\") do\n\
    \        t1[c] = (t1[c] or 0) + 1\n    end\n    for k,v in pairs(t0) do\n    \
    \    if t1[k] ~= v then\n            return false\n        end\n    end\n    for\
    \ k,v in pairs(t1) do\n        if t0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local t0 = {}\n    local t1\
    \ = {}\n    for c in string.gmatch(s0, \".\") do\n        t0[c] = (t0[c] or 0)\
    \ + 1\n    end\n    for c in string.gmatch(s1, \".\") do\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    return table.equal(t0, t1)\nend", "    local t0 = char_histogram(s0)\n\
    \    local t1 = char_histogram(s1)\n    return t0[1] == t1[1] and t0[2] == t1[2]\
    \ and t0[3] == t1[3] and t0[4] == t1[4]\nend", "\tlocal c0 = count_chars(s0)\n\
    \tlocal c1 = count_chars(s1)\n\treturn c0 == c1\nend", "  local s0_chars, s1_chars\
    \ = {}, {}\n  for i = 1, #s0 do\n    s0_chars[s0:sub(i, i)] = (s0_chars[s0:sub(i,\
    \ i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n    s1_chars[s1:sub(i, i)] = (s1_chars[s1:sub(i,\
    \ i)] or 0) + 1\n  end\n  return deepcompare(s0_chars, s1_chars)\nend", "    local\
    \ h0 = hist(s0)\n    local h1 = hist(s1)\n    for c, count in pairs(h0) do\n \
    \       if h1[c] ~= count then\n            return false\n        end\n    end\n\
    \    return true\nend", "\tlocal counts = {}\n\tfor c in s0:gmatch('.') do\n\t\
    \tcounts[c] = (counts[c] or 0) + 1\n\tend\n\tfor c in s1:gmatch('.') do\n\t\t\
    counts[c] = (counts[c] or 0) - 1\n\tend\n\tfor _, count in pairs(counts) do\n\t\
    \tif count ~= 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
  "  local h = {}\n  for i = 1, #s0 do\n    h[s0:sub(i, i)] = (h[s0:sub(i, i)] or\
    \ 0) + 1\n  end\n  for i = 1, #s1 do\n    h[s1:sub(i, i)] = (h[s1:sub(i, i)] or\
    \ 0) - 1\n  end\n  for _, v in pairs(h) do\n    if v ~= 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "\tlocal t0 = {}\n\tlocal t1 = {}\n\tfor\
    \ c in s0:gmatch('.') do\n\t\tt0[c] = (t0[c] or 0) + 1\n\tend\n\tfor c in s1:gmatch('.')\
    \ do\n\t\tt1[c] = (t1[c] or 0) + 1\n\tend\n\tfor c, n in pairs(t0) do\n\t\tif\
    \ t1[c] ~= n then\n\t\t\treturn false\n\t\tend\n\tend\n\tfor c, n in pairs(t1)\
    \ do\n\t\tif t0[c] ~= n then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "    -- sort the two strings and see if they match\n    return s0:gsub('%a',\
    \ '') == s1:gsub('%a', '')\nend", "    if #s0 ~= #s1 then\n        return false\n\
    \    end\n    for i = 1, #s0 do\n        local c0 = s0:sub(i, i)\n        local\
    \ c1 = s1:sub(i, i)\n        if c0 ~= c1 then\n            return false\n    \
    \    end\n    end\n    return true\nend", "  local map = {}\n  for i = 1, #s0\
    \ do\n    map[s0:sub(i, i)] = (map[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1,\
    \ #s1 do\n    map[s1:sub(i, i)] = (map[s1:sub(i, i)] or 0) - 1\n  end\n  for k,\
    \ v in pairs(map) do\n    if v ~= 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local function _count_chars(s)\n    local r = {}\n  \
    \  for c in s:gmatch('.') do\n      r[c] = (r[c] or 0) + 1\n    end\n    return\
    \ r\n  end\n  local c0 = _count_chars(s0)\n  local c1 = _count_chars(s1)\n  for\
    \ k,v in pairs(c0) do\n    if c1[k] ~= v then\n      return false\n    end\n \
    \ end\n  for k,v in pairs(c1) do\n    if c0[k] ~= v then\n      return false\n\
    \    end\n  end\n  return true\nend", "\tlocal t0 = {}\n\tlocal t1 = {}\n\tfor\
    \ c in s0:gmatch('.') do\n\t\tt0[c] = true\n\tend\n\tfor c in s1:gmatch('.') do\n\
    \t\tt1[c] = true\n\tend\n\tfor c in pairs(t0) do\n\t\tif not t1[c] then\n\t\t\t\
    return false\n\t\tend\n\tend\n\tfor c in pairs(t1) do\n\t\tif not t0[c] then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    local t0 = {}\n\
    \    local t1 = {}\n    for i = 1, #s0 do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i,\
    \ i)] or 0) + 1\n    end\n    for i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i,\
    \ i)] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v\
    \ then\n            return false\n        end\n    end\n    for k, v in pairs(t1)\
    \ do\n        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend", "    if s0 == s1 then\n        return true\n    end\n\
    \    if #s0 ~= #s1 then\n        return false\n    end\n    local c0 = make_counts(s0)\n\
    \    local c1 = make_counts(s1)\n    for k,v in pairs(c0) do\n        if c1[k]\
    \ ~= v then\n            return false\n        end\n    end\n    for k,v in pairs(c1)\
    \ do\n        if c0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local map0 = {}\n    local map1 = {}\n    for i =\
    \ 1, #s0 do\n        local c = s0:sub(i, i)\n        map0[c] = (map0[c] or 0)\
    \ + 1\n    end\n    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n      \
    \  map1[c] = (map1[c] or 0) + 1\n    end\n    for k, v in pairs(map0) do\n   \
    \     if map1[k] ~= v then\n            return false\n        end\n    end\n \
    \   for k, v in pairs(map1) do\n        if map0[k] ~= v then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  local get_count = function(s)\n\
    \    local t = {}\n    for c in utf8.chars(s) do\n      t[c] = (t[c] or 0) + 1\n\
    \    end\n    return t\n  end\n  local c0 = get_count(s0)\n  local c1 = get_count(s1)\n\
    \  for k, v in pairs(c0) do\n    if c1[k] ~= v then\n      return false\n    end\n\
    \  end\n  for k, v in pairs(c1) do\n    if c0[k] ~= v then\n      return false\n\
    \    end\n  end\n  return true\nend", "    local h0 = hist(s0)\n    local h1 =\
    \ hist(s1)\n    for c in pairs(h0) do\n        if h0[c] ~= h1[c] then\n      \
    \      return false\n        end\n    end\n    for c in pairs(h1) do\n       \
    \ if h0[c] ~= h1[c] then\n            return false\n        end\n    end\n   \
    \ return true\nend", "    local r0 = {}\n    local r1 = {}\n    for _, c in utf8.codes(s0)\
    \ do\n        r0[c] = r0[c] or 0\n        r0[c] = r0[c] + 1\n    end\n    for\
    \ _, c in utf8.codes(s1) do\n        r1[c] = r1[c] or 0\n        r1[c] = r1[c]\
    \ + 1\n    end\n    for k, v in pairs(r0) do\n        if r1[k] ~= v then\n   \
    \         return false\n        end\n    end\n    for k, v in pairs(r1) do\n \
    \       if r0[k] ~= v then\n            return false\n        end\n    end\n \
    \   return true\nend", "    local count0 = count_chars(s0)\n    local count1 =\
    \ count_chars(s1)\n    for k, v in pairs(count0) do\n        if count1[k] ~= v\
    \ then\n            return false\n        end\n    end\n    for k, v in pairs(count1)\
    \ do\n        if count0[k] ~= v then\n            return false\n        end\n\
    \    end\n    return true\nend", "  local occ0 = {}\n  local occ1 = {}\n  for\
    \ i = 1,#s0 do\n    local c = s0:sub(i,i)\n    occ0[c] = (occ0[c] or 0) + 1\n\
    \  end\n  for i = 1,#s1 do\n    local c = s1:sub(i,i)\n    occ1[c] = (occ1[c]\
    \ or 0) + 1\n  end\n  for c,n in pairs(occ0) do\n    if not occ1[c] or occ1[c]\
    \ ~= n then\n      return false\n    end\n  end\n  for c,n in pairs(occ1) do\n\
    \    if not occ0[c] or occ0[c] ~= n then\n      return false\n    end\n  end\n\
    \  return true\nend", "  if #s0 ~= #s1 then return false end\n  local found =\
    \ {}\n  for c in s0:gmatch('.') do\n    if not found[c] then found[c] = 1\n  \
    \  else found[c] = found[c] + 1 end\n  end\n  for c in s1:gmatch('.') do\n   \
    \ if not found[c] then return false\n    elseif found[c] > 1 then found[c] = found[c]\
    \ - 1\n    else found[c] = nil end\n  end\n  return true\nend", "  local t0 =\
    \ {}\n  local t1 = {}\n  for i = 1, #s0 do\n    t0[s0:sub(i, i)] = true\n  end\n\
    \  for i = 1, #s1 do\n    t1[s1:sub(i, i)] = true\n  end\n  for k, _ in pairs(t0)\
    \ do\n    if not t1[k] then\n      return false\n    end\n  end\n  for k, _ in\
    \ pairs(t1) do\n    if not t0[k] then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local count0 = char_count(s0)\n    local count1 = char_count(s1)\n\
    \    for char, freq in pairs(count0) do\n        if count1[char] < freq then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ m0 = count_chars(s0)\n  local m1 = count_chars(s1)\n  for k, _ in pairs(m0)\
    \ do\n    if m0[k] ~= m1[k] then\n      return false\n    end\n  end\n  for k,\
    \ _ in pairs(m1) do\n    if m0[k] ~= m1[k] then\n      return false\n    end\n\
    \  end\n  return true\nend", "  if #s0 ~= #s1 then return false end\n  local u0\
    \ = unique_chars(s0)\n  local u1 = unique_chars(s1)\n  if #u0 ~= #u1 then return\
    \ false end\n  for _, c in ipairs(u0) do\n    if not tablex.find(u1, c) then return\
    \ false end\n  end\n  return true\nend", "    local t0 = {}\n    local t1 = {}\n\
    \    for i = 1, #s0 do\n        t0[s0:sub(i, i)] = true\n    end\n    for i =\
    \ 1, #s1 do\n        t1[s1:sub(i, i)] = true\n    end\n    for c in pairs(t0)\
    \ do\n        if not t1[c] then\n            return false\n        end\n    end\n\
    \    for c in pairs(t1) do\n        if not t0[c] then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local i0, i1 = 0, 0\n  local\
    \ v0, v1 = s0:byte(1, -1), s1:byte(1, -1)\n  while true do\n    while i0 < #v0\
    \ and not v0[i0] do i0 = i0 + 1 end\n    while i1 < #v1 and not v1[i1] do i1 =\
    \ i1 + 1 end\n    if i0 == #v0 and i1 == #v1 then return true end\n    if i0 ==\
    \ #v0 or i1 == #v1 then return false end\n    if v0[i0] ~= v1[i1] then return\
    \ false end\n    i0, i1 = i0 + 1, i1 + 1\n  end\nend", "    if #s0 ~= #s1 then\n\
    \        return false\n    end\n    for i=1,#s0 do\n        if s0:find(s0:sub(i,i),\
    \ 1, true) ~= s1:find(s0:sub(i,i), 1, true) then\n            return false\n \
    \       end\n    end\n    return true\nend", "  -- TODO: same_chars\n  local dict0\
    \ = char_count(s0)\n  local dict1 = char_count(s1)\n  for k, v in pairs(dict0)\
    \ do\n    if dict1[k] ~= v then\n      return false\n    end\n  end\n  for k,\
    \ v in pairs(dict1) do\n    if dict0[k] ~= v then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local _, m0 = table.unpack(count_chars(s0))\n\
    \  local _, m1 = table.unpack(count_chars(s1))\n  return m0 == m1\nend", "   \
    \ local c0 = {}\n    local c1 = {}\n    for i = 1, #s0 do\n        c0[s0:sub(i,\
    \ i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for i = 1, #s1 do\n        c1[s1:sub(i,\
    \ i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n    for k, v in pairs(c0) do\n \
    \       if v ~= c1[k] then\n            return false\n        end\n    end\n \
    \   return true\nend", "    local t0 = string_to_count_table(s0)\n    local t1\
    \ = string_to_count_table(s1)\n    for k, v in pairs(t0) do\n        if t1[k]\
    \ ~= v then\n            return false\n        end\n    end\n    for k, v in pairs(t1)\
    \ do\n        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend", "  local h0 = char_histogram(s0)\n  local h1 = char_histogram(s1)\n\
    \  return h0 == h1\nend", "    for c in s0:gmatch('.') do\n        if #s1:gsub(c,\
    \ '') == #s1 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    for _, c in ipairs(s0) do\n        if not s1:match(c) then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ t0 = {}\n  local t1 = {}\n  for c in s0:gmatch('.') do\n    t0[c] = (t0[c] or\
    \ 0) + 1\n  end\n  for c in s1:gmatch('.') do\n    t1[c] = (t1[c] or 0) + 1\n\
    \  end\n  for c, n in pairs(t0) do\n    if n > (t1[c] or 0) then\n      return\
    \ false\n    end\n  end\n  for c, n in pairs(t1) do\n    if n > (t0[c] or 0) then\n\
    \      return false\n    end\n  end\n  return true\nend", "\tlocal chars0 = {}\n\
    \tlocal chars1 = {}\n\tlocal cache0 = {}\n\tlocal cache1 = {}\n\tfor i = 1, #s0\
    \ do\n\t\tlocal c = s0:sub(i, i)\n\t\tlocal count = cache0[c] or 0\n\t\tcache0[c]\
    \ = count + 1\n\t\tchars0[#chars0 + 1] = { c, count + 1 }\n\tend\n\tfor i = 1,\
    \ #s1 do\n\t\tlocal c = s1:sub(i, i)\n\t\tlocal count = cache1[c] or 0\n\t\tcache1[c]\
    \ = count + 1\n\t\tchars1[#chars1 + 1] = { c, count + 1 }\n\tend\n\ttable.sort(chars0,\
    \ sort_pairs)\n\ttable.sort(chars1, sort_pairs)\n\treturn table.concat(chars0,\
    \ '') == table.concat(chars1, '')\nend", "\tlocal h = {}\n\t-- collect all the\
    \ characters\n\tfor i = 1, #s0 do\n\t\th[s0:sub(i, i)] = true\n\tend\n\tfor i\
    \ = 1, #s1 do\n\t\th[s1:sub(i, i)] = true\n\tend\n\t-- check if all the characters\
    \ in s0 are available in s1\n\tfor i = 1, #s0 do\n\t\tlocal char = s0:sub(i, i)\n\
    \t\tif not h[char] then\n\t\t\treturn false\n\t\tend\n\t\tlocal i0, i1 = s1:find(char)\n\
    \t\tif not i0 then\n\t\t\treturn false\n\t\tend\n\t\ts1 = s1:sub(1, i0 - 1) ..\
    \ s1:sub(i1 + 1)\n\tend\n\treturn true\nend", "    if #s0 ~= #s1 then\n      \
    \  return false\n    end\n    local count = {}\n    for i = 1, #s0 do\n      \
    \  local c = s0:sub(i, i)\n        count[c] = (count[c] or 0) + 1\n    end\n \
    \   for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        if not count[c]\
    \ then\n            return false\n        end\n        count[c] = count[c] - 1\n\
    \        if count[c] == 0 then\n            count[c] = nil\n        end\n    end\n\
    \    return true\nend", "\tassert(type(s0) == 'string')\n\tassert(type(s1) ==\
    \ 'string')\n\tlocal size0 = #s0\n\tlocal size1 = #s1\n\tlocal min_size = math.min(size0,\
    \ size1)\n\tif size0 > size1 then\n\t\ts0, s1 = s1, s0\n\tend\n\tlocal i = 1\n\
    \twhile i <= min_size do\n\t\tlocal finded = s1:find(s0:sub(i, i), 1, true)\n\t\
    \tif finded then\n\t\t\ts1 = s1:sub(1, finded - 1) .. s1:sub(finded + 1)\n\t\t\
    else\n\t\t\tbreak\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn i == size0 + 1\nend",
  "  local t0 = freq(s0)\n  local t1 = freq(s1)\n  for k, v in pairs(t0) do\n    if\
    \ t1[k] ~= v then\n      return false\n    end\n  end\n  for k, v in pairs(t1)\
    \ do\n    if t0[k] ~= v then\n      return false\n    end\n  end\n  return true\n\
    end", "  if #s0 ~= #s1 then return false end\n  for c in s0:gmatch('.') do\n \
    \   if not s1:find(c, 1, true) then return false end\n  end\n  return true\nend",
  "  local c0 = {}\n  local c1 = {}\n  for i = 1, #s0 do\n    c0[s0:sub(i, i)] = (c0[s0:sub(i,\
    \ i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n    c1[s1:sub(i, i)] = (c1[s1:sub(i,\
    \ i)] or 0) + 1\n  end\n  for k, v in pairs(c0) do\n    if not c1[k] or c1[k]\
    \ ~= v then\n      return false\n    end\n  end\n  for k, v in pairs(c1) do\n\
    \    if not c0[k] or c0[k] ~= v then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local c0 = count_chars(s0)\n  local c1 = count_chars(s1)\n  for\
    \ k, v in pairs(c0) do\n    if c1[k] ~= v then\n      return false\n    end\n\
    \  end\n  for k, v in pairs(c1) do\n    if c0[k] ~= v then\n      return false\n\
    \    end\n  end\n  return true\nend", "  return counts(s0) == counts(s1)\nend",
  "    local a0 = {}\n    local a1 = {}\n    for i = 1, #s0 do\n        a0[s0:sub(i,\
    \ i)] = (a0[s0:sub(i, i)] or 0) + 1\n    end\n    for i = 1, #s1 do\n        a1[s1:sub(i,\
    \ i)] = (a1[s1:sub(i, i)] or 0) + 1\n    end\n    for k, v in pairs(a0) do\n \
    \       if a1[k] ~= v then\n            return false\n        end\n    end\n \
    \   for k, v in pairs(a1) do\n        if a0[k] ~= v then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local c0 = charcount(s0)\n\
    \    local c1 = charcount(s1)\n    for k, v in pairs(c0) do\n        if c1[k]\
    \ ~= v then\n            return false\n        end\n    end\n    for k, v in pairs(c1)\
    \ do\n        if c0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend", "    if #s0 ~= #s1 then\n        return false\n    end\n\
    \    for _, c in ipairs(s0) do\n        if not s1:find(c, 1, true) then\n    \
    \        return false\n        end\n    end\n    return true\nend", "    local\
    \ chars0 = {}\n    local chars1 = {}\n    for c in s0:gmatch'.' do\n        chars0[c]\
    \ = (chars0[c] or 0) + 1\n    end\n    for c in s1:gmatch'.' do\n        chars1[c]\
    \ = (chars1[c] or 0) + 1\n    end\n    for c, n in pairs(chars0) do\n        if\
    \ n ~= chars1[c] then\n            return false\n        end\n    end\n    for\
    \ c, n in pairs(chars1) do\n        if n ~= chars0[c] then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  return tostring(s0:sort())\
    \ == tostring(s1:sort())\nend", "    if not s0 or not s1 then return false end\n\
    \    local dic = {}\n    for i = 1, #s0 do\n        local c = s0:sub(i, i)\n \
    \       dic[c] = (dic[c] or 0) + 1\n    end\n    for i = 1, #s1 do\n        local\
    \ c = s1:sub(i, i)\n        dic[c] = (dic[c] or 0) - 1\n    end\n    for _, v\
    \ in pairs(dic) do\n        if v ~= 0 then return false end\n    end\n    return\
    \ true\nend", "    -- Create a table with the character counts of s0 and s1.\n\
    \    local chars = {}\n    local function add_chars(s)\n        for c in s:gmatch\"\
    .\" do\n            chars[c] = (chars[c] or 0) + 1\n        end\n    end\n   \
    \ add_chars(s0)\n    add_chars(s1)\n    -- Verify that each character count is\
    \ either zero or equal.\n    for c, n in pairs(chars) do\n        if n ~= 0 and\
    \ n ~= s0:count(c) then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  local t0 = {}\n  local t1 = {}\n  for c in s0:gmatch('.') do\n\
    \    t0[c] = (t0[c] or 0) + 1\n  end\n  for c in s1:gmatch('.') do\n    t1[c]\
    \ = (t1[c] or 0) + 1\n  end\n  for c, v in pairs(t0) do\n    if t1[c] ~= v then\n\
    \      return false\n    end\n  end\n  for c, v in pairs(t1) do\n    if t0[c]\
    \ ~= v then\n      return false\n    end\n  end\n  return true\nend", "    if\
    \ #s0 ~= #s1 then\n        return false\n    end\n    local chs0 = char_counts(s0)\n\
    \    local chs1 = char_counts(s1)\n    for k, v in pairs(chs0) do\n        if\
    \ v ~= chs1[k] then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0 do\n \
    \       c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for i = 1,\
    \ #s1 do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n  \
    \  for k, _ in pairs(c0) do\n        if c0[k] ~= c1[k] then\n            return\
    \ false\n        end\n    end\n    for k, _ in pairs(c1) do\n        if c0[k]\
    \ ~= c1[k] then\n            return false\n        end\n    end\n    return true\n\
    end", "    local counts = {}\n    for i = 1, #s0 do\n        counts[s0:sub(i,\
    \ i)] = (counts[s0:sub(i, i)] or 0) + 1\n    end\n    for i = 1, #s1 do\n    \
    \    counts[s1:sub(i, i)] = (counts[s1:sub(i, i)] or 0) - 1\n    end\n    for\
    \ _, count in pairs(counts) do\n        if count ~= 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  local t0 = count_chars(s0)\n\
    \  local t1 = count_chars(s1)\n  for k, v in pairs(t0) do\n    if t1[k] ~= v then\n\
    \      return false\n    end\n  end\n  for k, v in pairs(t1) do\n    if t0[k]\
    \ ~= v then\n      return false\n    end\n  end\n  return true\nend", "\tlocal\
    \ chs0 = {}\n\tlocal chs1 = {}\n\tfor i = 1, string.len(s0) do\n\t\tchs0[string.sub(s0,\
    \ i, i)] = (chs0[string.sub(s0, i, i)] or 0) + 1\n\tend\n\tfor i = 1, string.len(s1)\
    \ do\n\t\tchs1[string.sub(s1, i, i)] = (chs1[string.sub(s1, i, i)] or 0) + 1\n\
    \tend\n\tfor k, v in pairs(chs0) do\n\t\tif chs1[k] ~= v then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\tfor k, v in pairs(chs1) do\n\t\tif chs0[k] ~= v then\n\t\t\t\
    return false\n\t\tend\n\tend\n\treturn true\nend", "  if #s0 ~= #s1 then return\
    \ false end\n  local c0, c1 = {}, {}\n  for i = 1, #s0 do\n    c0[s0:sub(i, i)]\
    \ = c0[s0:sub(i, i)] and c0[s0:sub(i, i)] + 1 or 1\n    c1[s1:sub(i, i)] = c1[s1:sub(i,\
    \ i)] and c1[s1:sub(i, i)] + 1 or 1\n  end\n  return _.is_equal(c0, c1)\nend",
  "    local a0 = {}\n    local a1 = {}\n    for c in s0:gmatch'.' do\n        if\
    \ a0[c] then\n            a0[c] = a0[c] + 1\n        else\n            a0[c] =\
    \ 1\n        end\n    end\n    for c in s1:gmatch'.' do\n        if a1[c] then\n\
    \            a1[c] = a1[c] + 1\n        else\n            a1[c] = 1\n        end\n\
    \    end\n    for c, v in pairs(a0) do\n        if a1[c] ~= v then\n         \
    \   return false\n        end\n    end\n    for c, v in pairs(a1) do\n       \
    \ if a0[c] ~= v then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  if s0 == s1 then return true end\n  if not s0 or not s1 then\
    \ return false end\n  local len0, len1 = string.len(s0), string.len(s1)\n  if\
    \ len0 ~= len1 then return false end\n  local char_map0, char_map1 = {}, {}\n\
    \  for i = 1, len0 do\n    local c0, c1 = string.sub(s0, i, i), string.sub(s1,\
    \ i, i)\n    char_map0[c0] = (char_map0[c0] or 0) + 1\n    char_map1[c1] = (char_map1[c1]\
    \ or 0) + 1\n  end\n  for k, v in pairs(char_map0) do\n    if char_map1[k] ~=\
    \ v then return false end\n  end\n  return true\nend", "  -- bitwise to avoid\
    \ reversing strings\n  local b0 = 0\n  local b1 = 0\n  for i = 1, s0:len() do\n\
    \    b0 = bit.lshift(b0, 1) + s0:byte(i)\n  end\n  for i = 1, s1:len() do\n  \
    \  b1 = bit.lshift(b1, 1) + s1:byte(i)\n  end\n  return b0 == b1\nend", "    if\
    \ #s0 == #s1 then\n        local count0 = count_chars(s0)\n        local count1\
    \ = count_chars(s1)\n        return count0 == count1\n    else\n        return\
    \ false\n    end\nend", "  local characters = {}\n  for i = 1,#s0 do\n    local\
    \ c = s0:sub(i,i)\n    characters[c] = (characters[c] or 0) + 1\n  end\n  for\
    \ i = 1,#s1 do\n    local c = s1:sub(i,i)\n    characters[c] = (characters[c]\
    \ or 0) - 1\n  end\n  for c,n in pairs(characters) do\n    if n ~= 0 then\n  \
    \    return false\n    end\n  end\n  return true\nend", "    local d0 = {}\n \
    \   local d1 = {}\n    for i = 1, #s0 do\n        d0[s0:sub(i, i)] = (d0[s0:sub(i,\
    \ i)] or 0) + 1\n    end\n    for i = 1, #s1 do\n        d1[s1:sub(i, i)] = (d1[s1:sub(i,\
    \ i)] or 0) + 1\n    end\n    for k, v in pairs(d0) do\n        if v ~= d1[k]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "  if #s0 ~= #s1 then return false end\n  local chars = {}\n  for i = 1, #s0 do\n\
    \    local c = s0:sub(i, i)\n    if chars[c] then\n      chars[c] = chars[c] +\
    \ 1\n    else\n      chars[c] = 1\n    end\n  end\n  for i = 1, #s1 do\n    local\
    \ c = s1:sub(i, i)\n    if chars[c] then\n      chars[c] = chars[c] - 1\n    else\n\
    \      return false\n    end\n  end\n  for _, v in pairs(chars) do\n    if v ~=\
    \ 0 then return false end\n  end\n  return true\nend", "    local t0 = char_table(s0)\n\
    \    local t1 = char_table(s1)\n    for k, v in pairs(t0) do\n        if t1[k]\
    \ ~= v then\n            return false\n        end\n    end\n    for k, v in pairs(t1)\
    \ do\n        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend", "  local s0, s1 = s0:lower(), s1:lower()\n  for c in s0:gmatch('.')\
    \ do\n    s1 = s1:gsub(c, '')\n  end\n  return #s1 == 0\nend", "    -- Make sure\
    \ s0 and s1 are sorted lists of letters.\n    s0 = sorted_chars(s0)\n    s1 =\
    \ sorted_chars(s1)\n    local i, j = 1, 1\n    local n, m = #s0, #s1\n    while\
    \ i <= n and j <= m do\n        local ci, cj = s0:sub(i, i), s1:sub(j, j)\n  \
    \      if ci == cj then\n            i, j = i + 1, j + 1\n        elseif ci <\
    \ cj then\n            return false\n        else\n            j = j + 1\n   \
    \     end\n    end\n    return i > n\nend", "    local a0 = word2sorted_arr(s0)\n\
    \    local a1 = word2sorted_arr(s1)\n    local len0 = #a0\n    local len1 = #a1\n\
    \    if len0 ~= len1 then\n        return false\n    end\n    for i = 1, len0\
    \ do\n        if a0[i] ~= a1[i] then\n            return false\n        end\n\
    \    end\n    return true\nend", "  local m0 = {}\n  local m1 = {}\n  for i =\
    \ 1, #s0 do\n    m0[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n    m1[s1:sub(i,\
    \ i)] = true\n  end\n  return same_keys(m0, m1)\nend", "    local map_s0 = map_chars(s0)\n\
    \    local map_s1 = map_chars(s1)\n    local map_union = {}\n    for k, v in pairs(map_s0)\
    \ do\n        map_union[k] = v\n    end\n    for k, v in pairs(map_s1) do\n  \
    \      if map_union[k] == nil then\n            map_union[k] = v\n        else\n\
    \            map_union[k] = map_union[k] + v\n        end\n    end\n    for k,\
    \ v in pairs(map_union) do\n        if map_s0[k] ~= map_s1[k] then\n         \
    \   return false\n        end\n    end\n    return true\nend", "    local used\
    \ = {}\n    for c in string.gmatch(s0, '.') do\n        used[c] = true\n    end\n\
    \    for c in string.gmatch(s1, '.') do\n        if not used[c] then\n       \
    \     return false\n        end\n    end\n    return true\nend", "    local counts0\
    \ = count_chars(s0)\n    local counts1 = count_chars(s1)\n    for k,v in pairs(counts0)\
    \ do\n        if counts1[k] ~= v then\n            return false\n        end\n\
    \    end\n    for k,v in pairs(counts1) do\n        if counts0[k] ~= v then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ count = {}\n  for char in s0:gmatch('.') do\n    count[char] = (count[char]\
    \ or 0) + 1\n  end\n  for char in s1:gmatch('.') do\n    count[char] = (count[char]\
    \ or 0) - 1\n  end\n  for char, n in pairs(count) do\n    if n ~= 0 then\n   \
    \   return false\n    end\n  end\n  return true\nend", "    local c0 = {}\n  \
    \  local c1 = {}\n    for char in s0:gmatch'.' do\n        c0[char] = (c0[char]\
    \ or 0) + 1\n    end\n    for char in s1:gmatch'.' do\n        c1[char] = (c1[char]\
    \ or 0) + 1\n    end\n    for char, count in pairs(c0) do\n        if count ~=\
    \ c1[char] then\n            return false\n        end\n    end\n    return true\n\
    end", "  for k,v in pairs(char_counts(s0)) do\n    if v ~= char_counts(s1)[k]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "\tlocal c =\
    \ {}\n\tfor i = 1, #s0 do\n\t\tc[s0:sub(i, i)] = (c[s0:sub(i, i)] or 0) + 1\n\t\
    end\n\tfor i = 1, #s1 do\n\t\tlocal ct = c[s1:sub(i, i)]\n\t\tif not ct then\n\
    \t\t\treturn false\n\t\tend\n\t\tc[s1:sub(i, i)] = ct - 1\n\tend\n\tfor k, v in\
    \ pairs(c) do\n\t\tif v ~= 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "    local chars = {}\n    for c in s0:gmatch\".\" do\n        chars[c]\
    \ = chars[c] and chars[c] + 1 or 1\n    end\n    for c in s1:gmatch\".\" do\n\
    \        chars[c] = chars[c] and chars[c] - 1 or -1\n    end\n    for c, v in\
    \ pairs(chars) do\n        if v ~= 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "  local c0 = count_chars(s0)\n  local c1 = count_chars(s1)\n\
    \  for k,v in pairs(c0) do\n    if c1[k] ~= v then\n      return false\n    end\n\
    \  end\n  for k,v in pairs(c1) do\n    if c0[k] ~= v then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local cnts0 = {}\n  local cnts1 = {}\n\
    \  for c in s0:gmatch('.') do\n    cnts0[c] = (cnts0[c] or 0) + 1\n  end\n  for\
    \ c in s1:gmatch('.') do\n    cnts1[c] = (cnts1[c] or 0) + 1\n  end\n  for c,\
    \ cnt in pairs(cnts0) do\n    if cnts1[c] ~= cnt then\n      return false\n  \
    \  end\n  end\n  for c, cnt in pairs(cnts1) do\n    if cnts0[c] ~= cnt then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local sc = { }\n\
    \  for i = 1, #s0 do\n    sc[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n\
    \    if not sc[s1:sub(i, i)] then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local t0 = {};\n    local t1 = {};\n    for c in string.gmatch(s0,\
    \ \".\") do\n        t0[c] = (t0[c] or 0) + 1;\n    end\n    for c in string.gmatch(s1,\
    \ \".\") do\n        t1[c] = (t1[c] or 0) + 1;\n    end\n    for c,v in pairs(t0)\
    \ do\n        if t1[c] ~= v then\n            return false;\n        end\n   \
    \ end\n    for c,v in pairs(t1) do\n        if t0[c] ~= v then\n            return\
    \ false;\n        end\n    end\n    return true;\nend", "  local t0 = char_counts(s0)\n\
    \  local t1 = char_counts(s1)\n  for k in pairs(t0) do\n    if t0[k] ~= t1[k]\
    \ then\n      return false\n    end\n  end\n  for k in pairs(t1) do\n    if t0[k]\
    \ ~= t1[k] then\n      return false\n    end\n  end\n  return true\nend", "  \
    \  if #s0 ~= #s1 then\n        return false\n    end\n    local w0 = word(s0)\n\
    \    local w1 = word(s1)\n    for _, v in pairs(w0) do\n        if v ~= w1[_]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    local c0 = {}\n    local c1 = {}\n    local i", "    local map0 = {}\n    local\
    \ map1 = {}\n    local i = 1\n    while i <= #s0 do\n        local c = s0:sub(i,\
    \ i)\n        map0[c] = (map0[c] or 0) + 1\n        i = i + 1\n    end\n    i\
    \ = 1\n    while i <= #s1 do\n        local c = s1:sub(i, i)\n        map1[c]\
    \ = (map1[c] or 0) + 1\n        i = i + 1\n    end\n    for k, v in pairs(map0)\
    \ do\n        if v ~= map1[k] then\n            return false\n        end\n  \
    \  end\n    for k, v in pairs(map1) do\n        if v ~= map0[k] then\n       \
    \     return false\n        end\n    end\n    return true\nend", "\tlocal chars0\
    \ = { }\n\tlocal chars1 = { }\n\tfor i = 1, #s0 do\n\t\tchars0[s0:sub(i, i)] =\
    \ true\n\tend\n\tfor i = 1, #s1 do\n\t\tchars1[s1:sub(i, i)] = true\n\tend\n\t\
    for c in pairs(chars0) do\n\t\tif not chars1[c] then\n\t\t\treturn false\n\t\t\
    end\n\tend\n\tfor c in pairs(chars1) do\n\t\tif not chars0[c] then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "  local counter = {}\n  for i =\
    \ 1, #s0 do\n    local c = s0:sub(i, i)\n    counter[c] = (counter[c] or 0) +\
    \ 1\n  end\n  for i = 1, #s1 do\n    local c = s1:sub(i, i)\n    counter[c] =\
    \ (counter[c] or 0) - 1\n  end\n  for _, v in pairs(counter) do\n    if v ~= 0\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  -- Check if\
    \ both words are the same length\n  if #s0 ~= #s1 then\n    return false\n  end",
  "    local d0 = dict.new()\n    for _, c in unicode.utf8_iterator(s0) do\n     \
    \   local n = d0[c]\n        d0[c] = (n and n + 1) or 1\n    end\n    local d1\
    \ = dict.new()\n    for _, c in unicode.utf8_iterator(s1) do\n        local n\
    \ = d1[c]\n        d1[c] = (n and n + 1) or 1\n    end\n    for k, v in pairs(d0)\
    \ do\n        if d1[k] ~= v then\n            return false\n        end\n    end\n\
    \    for k, v in pairs(d1) do\n        if d0[k] ~= v then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  local cs0 = {}\n  local\
    \ cs1 = {}\n  local c\n  for i = 1, #s0 do\n    c = s0:sub(i, i)\n    cs0[c] =\
    \ (cs0[c] or 0) + 1\n  end\n  for i = 1, #s1 do\n    c = s1:sub(i, i)\n    cs1[c]\
    \ = (cs1[c] or 0) + 1\n  end\n  for c, n in pairs(cs0) do\n    if not cs1[c] or\
    \ cs1[c] < n then\n      return false\n    end\n  end\n  for c, n in pairs(cs1)\
    \ do\n    if not cs0[c] or cs0[c] < n then\n      return false\n    end\n  end\n\
    \  return true\nend", "  if s0 == s1 then return true end\n  local counts = {}\n\
    \  for i = 1, string.len(s0) do\n    local ch = string.sub(s0, i, i)\n    counts[ch]\
    \ = (counts[ch] or 0) + 1\n  end\n  for i = 1, string.len(s1) do\n    local ch\
    \ = string.sub(s1, i, i)\n    counts[ch] = (counts[ch] or 0) - 1\n  end\n  for\
    \ _, count in pairs(counts) do\n    if count ~= 0 then return false end\n  end\n\
    \  return true\nend", "  local s0c = {}\n  local s1c = {}\n  for i = 1, #s0 do\n\
    \    s0c[s0:sub(i, i)] = (s0c[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1\
    \ do\n    s1c[s1:sub(i, i)] = (s1c[s1:sub(i, i)] or 0) + 1\n  end\n  for k, _\
    \ in pairs(s0c) do\n    if not s1c[k] or s1c[k] < s0c[k] then\n      return false\n\
    \    end\n  end\n  return true\nend", "    local h0 = char_hist(s0)\n    local\
    \ h1 = char_hist(s1)\n    for c, n in pairs(h0) do\n        if h1[c] ~= n then\n\
    \            return false\n        end\n    end\n    for c, n in pairs(h1) do\n\
    \        if h0[c] ~= n then\n            return false\n        end\n    end\n\
    \    return true\nend", "  local u0 = {}\n  local u1 = {}\n  for i = 1, #s0 do\n\
    \    u0[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n    u1[s1:sub(i, i)]\
    \ = true\n  end\n  for i = 1, #s0 do\n    if not u1[s0:sub(i, i)] then\n     \
    \ return false\n    end\n  end\n  for i = 1, #s1 do\n    if not u0[s1:sub(i, i)]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local counts0\
    \ = count_chars(s0)\n  local counts1 = count_chars(s1)\n  for k, v in pairs(counts0)\
    \ do\n    if v ~= counts1[k] then\n      return false\n    end\n  end\n  for k,\
    \ v in pairs(counts1) do\n    if v ~= counts0[k] then\n      return false\n  \
    \  end\n  end\n  return true\nend", "    local chars0 = {}\n    local chars1 =\
    \ {}\n    local i, c\n    for i = 1, #s0 do\n        c = s0:sub(i, i)\n      \
    \  chars0[c] = (chars0[c] or 0) + 1\n    end\n    for i = 1, #s1 do\n        c\
    \ = s1:sub(i, i)\n        chars1[c] = (chars1[c] or 0) + 1\n    end\n    for c,\
    \ v in pairs(chars0) do\n        if v ~= chars1[c] then\n            return false\n\
    \        end\n    end\n    for c, v in pairs(chars1) do\n        if v ~= chars0[c]\
    \ then\n            return false\n        end\n    end\n    return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
