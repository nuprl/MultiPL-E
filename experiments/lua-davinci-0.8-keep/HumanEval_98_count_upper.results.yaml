name: HumanEval_98_count_upper
language: lua
results:
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local n = 0\n    s:gsub('[AEIOU]', function(w) if #w % 2 == 0 then n = n\
    \ + 1 end end)\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6ukcwol.lua:15:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpu6ukcwol.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal n = 0\n\tfor i = 1, #s do\n\t\tif (i % 2 == 0) and s:sub(i, i):find('[AEIOU]')\
    \ then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzexg08wb.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpzexg08wb.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local n = 0\n    for i, c in ipairs(s) do\n        if i % 2 == 0 and c:find('[AEIOU]')\
    \ then\n            n = n + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0k_zv_a.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmph0k_zv_a.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local c = 0\n    for i = 1, #s do\n        if s:sub(i, i):find('[AEIOU]')\
    \ and i % 2 == 0 then\n            c = c + 1\n        end\n    end\n    return\
    \ c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjhov4ib2.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpjhov4ib2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    -- <your code here>\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg50sn51v.lua:13:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpg50sn51v.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and string.match(s:sub(i,\
    \ i), '[AEIOU]') then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatxxbvsz.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpatxxbvsz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n        if s:byte(i) >= 65 and s:byte(i)\
    \ <= 90 and (i-1) % 2 == 0 then\n            cnt = cnt + 1\n        end\n    end\n\
    \    return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8p9nv8au.lua:19:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8p9nv8au.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if string.match(s, \"[AEIOU]\"\
    ) and i % 2 == 0 then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24qoy6ev.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp24qoy6ev.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n  \
    \      if i % 2 == 0 and c:find('[AEIOU]') then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6r6zynp7.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp6r6zynp7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if (s:sub(i, i):find('[AEIOU]')\
    \ and i % 2 == 0) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqbk52lv.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpvqbk52lv.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        local char = s:sub(i, i)\n\
    \        if char:match('[AEIOU]') and i % 2 == 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb725ox5o.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpb725ox5o.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i=1,#s do\n        if i%2 == 0 and is_upper(s:sub(i,i))\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj8d4a1xc.lua:9:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmpj8d4a1xc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpj8d4a1xc.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if (i % 2 == 0) and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps21md6dx.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmps21md6dx.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n  \
    \      if c:match('[AEIOU]') and i % 2 == 0 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxtp3vfxn.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpxtp3vfxn.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and string.find(s,\
    \ s:sub(i, i), 1, true) then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpma06qfdf.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpma06qfdf.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i=1,#s do\n        if s:sub(i,i):match('[aeiou]')\
    \ and i%2 == 0 then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqaysotcc.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqaysotcc.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if (i % 2 == 0) and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptny3uqri.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmptny3uqri.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local c = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            c = c + 1\n        end\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5k4zy5q.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpg5k4zy5q.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local c = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            c = c + 1\n        end\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqcsy7k4.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpxqcsy7k4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    return select(2, s:gsub('([AEIOU])(.)',\n                            function(upper,\
    \ lower)\n                                return lower == upper:lower() and lower\
    \ or upper\n                            end\n                            ))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4h_iv8m.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmps4h_iv8m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i=1,#s do\n        if s:sub(i,i):match('[AEIOU]')\
    \ and i%2 == 0 then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmqhyggm.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmppmqhyggm.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal n = 0\n\tfor i=1, #s, 2 do\n\t\tlocal c = s:sub(i,i)\n\t\tif is_upper(c)\
    \ then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8auz2pvf.lua:10:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmp8auz2pvf.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp8auz2pvf.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local count = 0\n   for i=1, #s do\n      if i % 2 == 0 and s:sub(i,i):match('[AEIOU]')\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxnn9r3cy.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpxnn9r3cy.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local i = 0\n   local vowel = 0\n   while i < #s do\n      i = i + 2\n   \
    \   if is_upper(s, i) then\n         vowel = vowel + 1\n      end\n   end\n  \
    \ return vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj6mmq17g.lua:11:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmpj6mmq17g.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpj6mmq17g.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n  \
    \      if i % 2 == 0 and c:find('[AEIOU]') then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra3kamnd.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpra3kamnd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and is_vowel(s:sub(i,\
    \ i)) and s:sub(i, i):upper() == s:sub(i, i) then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfy8ivrjp.lua:9:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmpfy8ivrjp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpfy8ivrjp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local result = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:byte(i)\
    \ >= 65 and s:byte(i) <= 90 then\n            result = result + 1\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f7oj_fa.lua:21:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp7f7oj_fa.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    -- your code here\n    local count = 0\n    s = string.lower(s)\n    for\
    \ i=1, #s do\n        if (i % 2 == 0) and (string.find(s, s[i]) >= 1 and string.find(s,\
    \ s[i]) <= 5) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj4ilp79d.lua:11:\
    \ bad argument #2 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpj4ilp79d.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpj4ilp79d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  -- TODO: Implement me!\n  return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98_onkko.lua:14:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp98_onkko.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local c = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            c = c + 1\n        end\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1073swzw.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp1073swzw.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    local half = string.len(s) / 2\n    local a = half %\
    \ 2 == 0 and half or half + 1\n    for i = a, string.len(s), 2 do\n        if\
    \ string.find(s, string.sub(s, i, i), i, true) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ch2mbrw.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3ch2mbrw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    local s = s:lower()\n    for i = 1, #s do\n        if\
    \ i % 2 == 0 and is_upper(s[i]) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmq_jv_dl.lua:10:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmpmq_jv_dl.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpmq_jv_dl.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for k,v in pairs(string.gmatch(s, '%a')) do\n      \
    \  if k % 2 == 0 and v == string.upper(v) then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxp_uahor.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpxp_uahor.lua:8: in local 'candidate'\n\t/tmp/tmpxp_uahor.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal count = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p_d1v_6.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp9p_d1v_6.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  local is_even = false\n  for c in s:gmatch\".\" do\n   \
    \ if is_even and c:match\"[AEIOU]\" then\n      count = count + 1\n    end\n \
    \   is_even = not is_even\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnoapc3q5.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpnoapc3q5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   return s:gsub('[AEIOU]', ''):len()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo41xbuqh.lua:13:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmpo41xbuqh.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \t-- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphde3tpp4.lua:13:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmphde3tpp4.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if s:sub(i, i):match('[AEIOU]') and\
    \ i % 2 == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe7yd1kz.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmppe7yd1kz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local count = 0\n   for i=1,#s do\n      if i % 2 == 0 and string.match(s:sub(i,i),'[AEIOU]')\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0w1ozjb.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpp0w1ozjb.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local counter = 0\n    for i=1,string.len(s) do\n        local c = string.sub(s,i,i)\n\
    \        if i % 2 == 0 and c == string.upper(c) and string.find(c,\"[AEIOU]\"\
    ) then\n            counter = counter + 1\n        end\n    end\n    return counter\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6sumqcc3.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp6sumqcc3.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmo30gjk.lua:13:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpvmo30gjk.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and (s:sub(i,\
    \ i) == 'A' or s:sub(i, i) == 'E' or s:sub(i, i) == 'I' or s:sub(i, i) == 'O'\
    \ or s:sub(i, i) == 'U') then\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwovddyv8.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpwovddyv8.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n        if s:sub(i, i):find('[AEIOU]')\
    \ then\n            cnt = cnt + 1\n        end\n    end\n    return cnt\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpheo9gszl.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpheo9gszl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  -- Your code here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhq349ry.lua:13:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpwhq349ry.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 0\n  for i = 1,#s do\n    if i % 2 == 0 and s:sub(i,i):match('[AEIOU]')\
    \ then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6m_eykt.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpf6m_eykt.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local vowel_count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and string.find(string.upper(s),\
    \ string.sub(s, i, i)) then\n            vowel_count = vowel_count + 1\n     \
    \   end\n    end\n    return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp753cbmc7.lua:21:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp753cbmc7.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   s = s:gsub('[^aeiouAEIOU]', '')\n   s = s:gsub('(%a)', function(c) if c ==\
    \ c:upper() then return c end end)\n   return s:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffyblpv6.lua:15:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpffyblpv6.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n        if i % 2 == 0 and is_upper(s:sub(i,\
    \ i)) then\n            cnt = cnt + 1\n        end\n    end\n    return cnt\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi169z2f3.lua:9:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmpi169z2f3.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpi169z2f3.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    local len = #s\n    for i = 1, len, 2 do\n        local\
    \ c = s:sub(i, i)\n        if c == 'A' or c == 'E' or c == 'I' or c == 'O' or\
    \ c == 'U' then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal n = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and isupper(s, i) then\n\t\
    \t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkj3js7pv.lua:9:\
    \ attempt to call a nil value (global 'isupper')\nstack traceback:\n\t/tmp/tmpkj3js7pv.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkj3js7pv.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return count(s, function(c) return is_vowel(c) and c == c:upper() end, 2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplcs2nylc.lua:7:\
    \ attempt to call a nil value (global 'count')\nstack traceback:\n\t/tmp/tmplcs2nylc.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplcs2nylc.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local i, n = 1, 0\n  for k in s:gmatch('[AEIOU]') do\n    if (i % 2) == 0 then\n\
    \      n = n + 1\n    end\n    i = i + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0vtzzwq.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpa0vtzzwq.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return string.gsub(s, \"[AEIOUaeiou][^AEIOUaeiou]\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7_nfvj0.lua:13:\
    \ expected: 1, actual: \"Cd\"\nstack traceback:\n\t/tmp/tmpf7_nfvj0.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    -- TODO: Implement this.\n    return 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb17t7odq.lua:14:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpb17t7odq.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  local flag = 0\n  local vowels = { 'a', 'e', 'i', 'o', 'u'\
    \ }\n  local vowels_map = {}\n  for i, v in ipairs(vowels) do\n    vowels_map[v]\
    \ = true\n  end\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if vowels_map[c:lower()]\
    \ then\n      if flag == 0 then\n        count = count + 1\n      end\n      flag\
    \ = 1 - flag\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46iwbrvg.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp46iwbrvg.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 0\n  local i = 0\n  while i < #s do\n    i = i + 2\n    if is_upper(s,\
    \ i) then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgb7dsprn.lua:11:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmpgb7dsprn.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpgb7dsprn.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    local len = #s\n    for i = 2, len, 2 do\n        local\
    \ c = s:sub(i, i)\n        if c == 'A' or c == 'E' or c == 'I' or c == 'O' or\
    \ c == 'U' then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxzvp4xv.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpfxzvp4xv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s:sub(i, i):find('[AEIOU]')\
    \ and (i % 2 == 0) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3yp7dba.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpl3yp7dba.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local counter = 0\n   for i = 1, #s do\n      local c = s:sub(i, i)\n    \
    \  if is_vowel(c) and i % 2 == 0 then\n         counter = counter + 1\n      end\n\
    \   end\n   return counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq3aw7ktq.lua:10:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmpq3aw7ktq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpq3aw7ktq.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkm4zqoqv.lua:13:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpkm4zqoqv.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \t-- NOTE: Use a flag\n\t-- local result = 0\n\t-- for i = 1, #s do\n\t-- \tlocal\
    \ c = s:sub(i, i)\n\t-- \tlocal is_upper = c == c:upper()\n\t-- \tlocal is_vowel\
    \ = (c == 'A' or c == 'E' or c == 'I' or c == 'O' or c == 'U')\n\t-- \tlocal is_even\
    \ = (i % 2 == 0)\n\t-- \tif is_upper and is_vowel and is_even then\n\t-- \t\t\
    result = result + 1\n\t-- \tend\n\t-- end\n\t-- return result\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuul3p7mc.lua:32: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\n\
    print(count_upper('dBBE'))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "0\n0\n1\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjsvboh3t.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpjsvboh3t.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local n = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n      \
    \  if i % 2 == 0 and c:match('[AEIOU]') then\n            n = n + 1\n        end\n\
    \    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1uzoy0_7.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp1uzoy0_7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local vowels = 'AEIOU'\n  local count = 0\n  for i = 1, #s do\n    if vowels:find(s:sub(i,\
    \ i)) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2id6seci.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp2id6seci.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local counter = 0\n  for i = 1, #s do\n    if i % 2 == 0 and string.find(s,\
    \ string.upper(s), i, true) then\n      counter = counter + 1\n    end\n  end\n\
    \  return counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3mowzu0.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpz3mowzu0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  -- TODO: complete\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpge74ovu6.lua:13:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpge74ovu6.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n  \
    \      if c:find('[AEIOU]') and i % 2 == 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmfvd3nm.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmppmfvd3nm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   return s:gsub('(%a)(%u)(%a)', ''):len()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr0o31b_m.lua:13:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpr0o31b_m.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local n = 0\n    local even = true\n    for i = 1, #s do\n        if even\
    \ and s:sub(i, i):find('[AEIOU]') then\n            n = n + 1\n        end\n \
    \       even = not even\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmoseet2m.lua:13:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpmoseet2m.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    -- your code here\n    local count = 0\n    for i = 1, #s do\n        if\
    \ i % 2 == 0 and is_upper(s:sub(i, i)) then\n            count = count + 1\n \
    \       end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpazjl3apq.lua:10:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmpazjl3apq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpazjl3apq.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    local i = 1\n    while i <= #s do\n        local c =\
    \ s:sub(i, i)\n        if c == 'A' or c == 'E' or c == 'I' or c == 'O' or c ==\
    \ 'U' then\n            count = count + 1\n        end\n        i = i + 2\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local n = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            n = n + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppq93wj_f.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmppq93wj_f.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local v = {['A'] = true, ['E'] = true, ['I'] = true, ['O'] = true, ['U'] =\
    \ true}\n  local result = 0\n  for i = 1, #s do\n    if (i % 2 == 0) and v[s:sub(i,\
    \ i)] then\n      result = result + 1\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplulb4a28.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmplulb4a28.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local upper = 0\n    local count = 0\n    for i = 1, #s do\n        if (i\
    \ % 2 == 0) then\n            if s:sub(i, i):match(\"[AEIOU]\") then\n       \
    \         upper = upper + 1\n            end\n        end\n    end\n    return\
    \ upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcycewh46.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpcycewh46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, string.len(s) do\n        if ((i % 2) ==\
    \ 0) and (string.find(s:sub(i, i), \"[AEIOU]\") ~= nil) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdn_t9qog.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpdn_t9qog.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if math.fmod(i, 2) == 0 and\
    \ string.find(s, \"[AEIOU]\", i, true) then\n            count = count + 1\n \
    \       end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qfd7soa.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp7qfd7soa.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n  \
    \      if i % 2 == 0 and is_upper(c) and is_vowel(c) then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9bntupdj.lua:10:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmp9bntupdj.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp9bntupdj.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal c = 0\n\tfor i=1,string.len(s),2 do\n\t\tif string.match(s, \"[AEIOU]\"\
    , i) then\n\t\t\tc = c + 1\n\t\tend\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb11ao86.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpeb11ao86.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local counter = 0\n    for i = 1, #s do\n\
    \        if not (i % 2 == 0) and s:sub(i, i) ~= \"\" and vowels:find(s:sub(i,\
    \ i)) then\n            counter = counter + 1\n        end\n    end\n    return\
    \ counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxn3ti88.lua:20:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpcxn3ti88.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if (i % 2) == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsrgvsm8.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpzsrgvsm8.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local function is_upper(c)\n        if string.find(c, \"[AEIOU]\") then\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    local k = 0\n    for i = 1, #s do\n        if i % 2 == 0 and is_upper(s:sub(i,\
    \ i)) then\n            k = k + 1\n        end\n    end\n    return k\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibm4iapl.lua:26:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpibm4iapl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  -- YOUR CODE HERE!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99y63b0j.lua:13:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp99y63b0j.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal n = 0\n\tfor i = 1, #s do\n\t\tif (i % 2 == 0) and s:sub(i, i):match('^[AEIOU]$')\
    \ then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmdevllb.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpvmdevllb.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, string.len(s) do\n        if even(i) then\n\
    \            if is_upper_vowel(string.sub(s, i, i)) then\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_4tb84_i.lua:9:\
    \ attempt to call a nil value (global 'even')\nstack traceback:\n\t/tmp/tmp_4tb84_i.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_4tb84_i.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    local upper = { a=true, e=true, i=true, o=true, u=true\
    \ }\n    for i=1,#s,2 do\n        if upper[s:sub(i,i)] then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1cku153.lua:21:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpj1cku153.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \t-- TODO\n\tlocal count = 0\n\tfor i=1,#s do\n\t\tif i%2==0 and s:sub(i,i):find(\"\
    [AEIOU]\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7spzt0e9.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp7spzt0e9.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  -- TODO: Add your code here\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp10i1jyss.lua:15:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp10i1jyss.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal num_upper = 0\n\tfor i = 1, #s do\n\t\tlocal char = s:sub(i, i)\n\t\t\
    if (i % 2) == 0 and is_vowel(char) and char == char:upper() then\n\t\t\tnum_upper\
    \ = num_upper + 1\n\t\tend\n\tend\n\treturn num_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjcz6c9fa.lua:10:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmpjcz6c9fa.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpjcz6c9fa.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return reduce(\n    s,\n    function(acc, c)\n      if (c:match('[aeiou]')\
    \ and (c == c:upper())) then\n        return acc + 1\n      else\n        return\
    \ acc\n      end\n    end,\n    0\n  )\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp62p72la4.lua:7:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmp62p72la4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp62p72la4.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqahx_y5.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpbqahx_y5.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local even_pos_count = 0\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for\
    \ i = 1, #s do\n    if i % 2 == 0 then\n      -- check if s[i] is uppercase and\
    \ a vowel\n      if string.upper(s[i]) == s[i] and s[i] == vowels[1] or s[i] ==\
    \ vowels[2] or s[i] == vowels[3] or s[i] == vowels[4] or s[i] == vowels[5] then\n\
    \        even_pos_count = even_pos_count + 1\n      end\n    end\n  end\n  return\
    \ even_pos_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprlav3n27.lua:12:\
    \ bad argument #1 to 'upper' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmprlav3n27.lua:12: in local 'candidate'\n\t/tmp/tmprlav3n27.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local index = 0\n    local count = 0\n    for i = 1, #s do\n        index\
    \ = index + 1\n        if index % 2 == 0 then\n            if s:sub(i, i) == 'A'\
    \ or s:sub(i, i) == 'E' or s:sub(i, i) == 'I' or s:sub(i, i) == 'O' or s:sub(i,\
    \ i) == 'U' then\n                count = count + 1\n            end\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29rg47j9.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp29rg47j9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, string.len(s) do\n    local char = string.sub(s,\
    \ i, i)\n    if string.find(\"AEIOU\", char) and (i % 2 == 0) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpos072ivd.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpos072ivd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0buh4bf4.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp0buh4bf4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    return string.gsub(s, \"([aeiou])\", \"\"):gsub(\"[AEIOU]\", \"\"):len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppm1m90gj.lua:13:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmppm1m90gj.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal count = 0\n\tlocal is_even = false\n\tfor i = 1, #s do\n\t\tif is_even\
    \ then\n\t\t\tif s:sub(i, i):match('[AEIOU]') then\n\t\t\t\tcount = count + 1\n\
    \t\t\tend\n\t\tend\n\t\tis_even = not is_even\n\tend\n\treturn count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjqcd7yb.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpzjqcd7yb.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local vowels = {'A', 'E', 'I', 'O', 'U'}\n    local acc = 0\n    for i =\
    \ 1, #s do\n        if i % 2 == 0 and table.contains(vowels, s:sub(i, i)) then\n\
    \            acc = acc + 1\n        end\n    end\n    return acc\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpux02onsv.lua:10:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpux02onsv.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpux02onsv.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i=1, #s do\n        local ch = s:sub(i,i)\n    \
    \    if i % 2 == 0 and ch:match('[AEIOU]') then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpframap6_.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpframap6_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc694hdvb.lua:13:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpc694hdvb.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    local i = 0\n    while i < #s do\n        if is_upper(s,\
    \ i) then\n            count = count + 1\n        end\n        i = i + 2\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5gb5bfsq.lua:10:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmp5gb5bfsq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp5gb5bfsq.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    return select(2, s:gsub('[AEIOU]', '%1'))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg10kxbev.lua:15:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpg10kxbev.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and (string.find('AEIOU',\
    \ s:sub(i, i)) ~= nil) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpip185dt3.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpip185dt3.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal count = 0\n\tfor i = 1, #s do\n\t\tif (s:sub(i, i):upper() == s:sub(i,\
    \ i)) and ((i % 2) == 0) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42m9ptvt.lua:21:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp42m9ptvt.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzpjgti1m.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpzpjgti1m.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('^[AEIOU]$')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzxujhkw.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmplzxujhkw.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  -- Write code here\n  --return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppd4gd1x1.lua:14:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmppd4gd1x1.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i=1,#s do\n    if (i % 2) == 0 and s:sub(i,i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnq3rl8h8.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpnq3rl8h8.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local counter = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n      counter = counter + 1\n    end\n  end\n  return counter\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wt53vp1.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp6wt53vp1.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \t-- TODO: add code here\n\tcount = 0\n\tfor i = 1,string.len(s) do\n\t\tif string.sub(s,i,i)\
    \ == string.upper(string.sub(s,i,i)) and string.find(\"aeiou\",string.sub(s,i,i))\
    \ then\n\t\t\tif math.fmod(i,2) == 0 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_l9dc6gh.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_l9dc6gh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local count = 0\n   for i=1,#s do\n      if (i % 2) == 0 and s:sub(i,i):find('[AEIOU]')\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9uw3srjy.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp9uw3srjy.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local cnt = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\nend\nassert(count_upper('aBCdEf')\
    \ == 1)\nassert(count_upper('abcdefg') == 0)\nassert(count_upper('dBBE') == 0)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4izp1afs.lua:15: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp4izp1afs.lua:15: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  if s:len() < 2 then\n    return 0\n  end\n  local count = 0\n  for i=2, s:len(),\
    \ 2 do\n    local c = s:sub(i, i)\n    if c == 'A' or c == 'E' or c == 'I' or\
    \ c == 'O' or c == 'U' then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8tspbf1.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpi8tspbf1.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return s:gsub('([AEIOU])', function(c) return c:lower() end):gsub('[aeiou]',\
    \ ''):len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpodn5nxjf.lua:13:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpodn5nxjf.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoojbobpu.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpoojbobpu.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal uppers = 0\n\tfor i = 1, #s do\n\t\tif s:sub(i, i):match('^[AEIOU]$')\
    \ and math.fmod(i, 2) == 0 then\n\t\t\tuppers = uppers + 1\n\t\tend\n\tend\n\t\
    return uppers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjccbhl4n.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpjccbhl4n.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local n = 0\n  for i, char in ipairs(s) do\n    if string.match(char, \"[aeiou]\"\
    ) and i % 2 == 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3pb3m9c.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpa3pb3m9c.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal count = 0\n\tfor i = 1, #s do\n\t\tif (i % 2) == 0 and s:sub(i, i):find('^[AEIOU]$')\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpba8o_ohn.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpba8o_ohn.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal evens = even_indices(s)\n\tlocal num = 0\n\tfor i = 1, #evens do\n\t\t\
    if vowel(s:sub(evens[i], evens[i])) and (s:sub(evens[i], evens[i]) == s:sub(evens[i],\
    \ evens[i]):upper()) then\n\t\t\tnum = num + 1\n\t\tend\n\tend\n\treturn num\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp484i9z5x.lua:7:\
    \ attempt to call a nil value (global 'even_indices')\nstack traceback:\n\t/tmp/tmp484i9z5x.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp484i9z5x.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1,#s do\n        if is_upper(s:sub(i,i)) and\
    \ is_even(i) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6gkxj9v9.lua:9:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmp6gkxj9v9.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6gkxj9v9.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local even_upper = 0\n  local vowels = \"aeiouAEIOU\"\n  for idx = 1, #s, 2\
    \ do\n    local c = s:sub(idx, idx)\n    if string.find(vowels, c) then\n    \
    \  even_upper = even_upper + 1\n    end\n  end\n  return even_upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lanrs69.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp1lanrs69.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return count(even(upcase(vowels(s))))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5iv991b9.lua:7:\
    \ attempt to call a nil value (global 'vowels')\nstack traceback:\n\t/tmp/tmp5iv991b9.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5iv991b9.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \t-- TODO: your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgy8j3i3s.lua:13:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpgy8j3i3s.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local n = 0\n    for i = 1, #s do\n        local ch = s:sub(i, i)\n     \
    \   if 'AEIOU' :find(ch) then\n            n = n + 1\n        end\n    end\n \
    \   return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp34cwrqwz.lua:10: 'then' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    -- Implement me!\n    return s:gsub('%u[aeiou]',''):len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdabl65k3.lua:14:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmpdabl65k3.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    -- your code here\n    -- get length of string\n    local len = string.len(s)\n\
    \    -- set up counter\n    local count = 0\n    -- loop through each character\n\
    \    for i = 1, len do\n        -- check if the current character is uppercase\
    \ vowel\n        -- and in even indices\n        if string.match(s:sub(i, i),\
    \ \"[AEIOU]\") and i % 2 == 0 then\n            -- if so, increase the counter\n\
    \            count = count + 1\n        end\n    end\n    -- return the counter\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_t8fxg0w.lua:28:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_t8fxg0w.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local i = 0\n    local count = 0\n    for c in s:gmatch('%a') do\n      \
    \  if i % 2 == 0 and c:match('[AEIOU]') then\n            count = count + 1\n\
    \        end\n        i = i + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for k, v in pairs(s:gmatch('[aeiou]*')) do\n       \
    \ if k % 2 == 0 and v == v:upper() then\n            count = count + 1\n     \
    \   end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeh2b6zyz.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpeh2b6zyz.lua:8: in local 'candidate'\n\t/tmp/tmpeh2b6zyz.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local n = 0\n    local len = string.len(s)\n    for i = 1, len, 2 do\n  \
    \      if 'AEIOU'[s:sub(i, i)] then\n            n = n + 1\n        end\n    end\n\
    \    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt3nm6568.lua:10: 'then' expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s:sub(i, i):match('[AEIOU]')\
    \ and i % 2 == 0 then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra2894sp.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpra2894sp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i=1,#s do\n    local c = s:sub(i,i)\n    if ((i % 2\
    \ == 0) and (string.match(c,'[AEIOU]'))) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdron4b4.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpxdron4b4.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local n = 0\n    for i = 1,#s,2 do\n        local c = s:sub(i,i)\n      \
    \  if c == 'A' or c == 'E' or c == 'I' or c == 'O' or c == 'U' then\n        \
    \    n = n + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and is_upper(s:sub(i,\
    \ i)) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd_ndnxhz.lua:9:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmpd_ndnxhz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpd_ndnxhz.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  --[[\n  -- (When 'i' is even, it is the same as if it were divided by 2, and\
    \ if 'i' is odd,\n  -- it is the same as if it were divided by 2 and then rounded\
    \ up.)\n  -- 'i % 2' tests if 'i' is even\n  --]]\n  local even_uppers = 0\n \
    \ for i = 1, #s do\n    local c = s:sub(i, i)\n    if c:find('[AEIOU]') and i\
    \ % 2 == 0 then\n      even_uppers = even_uppers + 1\n    end\n  end\n  return\
    \ even_uppers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4xq82kz.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_4xq82kz.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if (i % 2 == 0) and s:match('[AEIOU]',\
    \ i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2pwpjzc.lua:19:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpo2pwpjzc.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return #s:gsub('[AEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxuf6fgf2.lua:13:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmpxuf6fgf2.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \t-- FILL IN YOUR CODE HERE\n\tlocal count = 0\n\tfor i = 1, #s do\n\t\tif math.fmod(i,\
    \ 2) == 0 and string.match(s:sub(i, i), '[AEIOU]') then\n\t\t\tcount = count +\
    \ 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpir92diy2.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpir92diy2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   if type(s) ~= 'string' then\n      return nil, 'expected a string'\n   end\n\
    \   local vowels = {a=true, e=true, i=true, o=true, u=true}\n   local count =\
    \ 0\n   for i = 1, #s, 2 do\n      if vowels[s:sub(i, i):lower()] then\n     \
    \    count = count + 1\n      end\n   end\n   return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2x_7hhkg.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp2x_7hhkg.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ijwrfh5.lua:13:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp2ijwrfh5.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local c = 0\n  for i=1,#s,2 do\n    if s:sub(i,i):match(\"[AEIOU]\") then\n\
    \      c = c + 1\n    end\n  end\n  return c\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  local len = #s\n  for i = 2, len, 2 do\n    if s:byte(i)\
    \ >= 65 and s:byte(i) <= 90 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64plhg41.lua:22:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp64plhg41.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local cnt = 0\n   for i = 1, #s do\n      if s:sub(i, i):match('[AEIOU]')\
    \ and i % 2 == 0 then\n         cnt = cnt + 1\n      end\n   end\n   return cnt\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_nn2yzyz.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_nn2yzyz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local i = 1\n    local count = 0\n    for c in string.gmatch(s, '.') do\n\
    \        if i % 2 == 0 and string.find(c, '[AEIOU]') then\n            count =\
    \ count + 1\n        end\n        i = i + 1\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp666vra3i.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp666vra3i.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal even_pos_table = find_even_pos(s)\n\tlocal count = 0\n\tfor pos, _ in\
    \ pairs(even_pos_table) do\n\t\tif is_vowel(s:sub(pos, pos)) then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmkenfh26.lua:7:\
    \ attempt to call a nil value (global 'find_even_pos')\nstack traceback:\n\t/tmp/tmpmkenfh26.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpmkenfh26.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local num = 0\n  for i = 1, #s do\n    if s:sub(i, i):match('[AEIOU]') then\n\
    \      num = num + 1\n    end\n  end\n  return num\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphupb0zbo.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmphupb0zbo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal cnt = 0\n\tfor i=1,#s,2 do\n\t\tlocal c = s:sub(i,i)\n\t\tif c == 'A'\
    \ or c == 'E' or c == 'I' or c == 'O' or c == 'U' then\n\t\t\tcnt = cnt + 1\n\t\
    \tend\n\tend\n\treturn cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \treturn select(2, s:gsub('[AEIOU]', ''))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lm7kzhm.lua:15:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp9lm7kzhm.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local i = 0\n    for c in s:gmatch(\"%u\") do\n        i = i + 1\n    end\n\
    \    return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rmp9787.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1rmp9787.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local t = string.gmatch(s, \".\")\n    local i = 0\n    local c = 0\n   \
    \ for _ in t do\n        i = i + 1\n        if i % 2 == 0 and string.match(string.upper(_),\
    \ \"[AEIOU]\") then\n            c = c + 1\n        end\n    end\n    return c\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvskj7rx6.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpvskj7rx6.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local function is_vowel(c)\n    return c == 'A' or c == 'E' or c == 'I' or\
    \ c == 'O' or c == 'U'\n  end\n  local cnt = 0\n  for i=1, #s, 2 do\n    if is_vowel(s:sub(i,\
    \ i)) then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal count = 0\n\ts:gsub('[AEIOU]', function(c)\n\t\tif c:upper() == c then\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend)\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3d289oj.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpi3d289oj.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local c = 0\n  for i=1,#s,2 do\n    if string.find(\"AEIOU\",string.sub(s,i,i))\
    \ then\n      c = c + 1\n    end\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  -- ..\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgsrhd11.lua:13:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmprgsrhd11.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    -- Implementation goes here\n    return #string.gsub(s, \"[AEIOU][^AEIOU]\"\
    , \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprjpee06_.lua:14:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmprjpee06_.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nassert(count_upper('aBCdEf')\
    \ == 1)\nassert(count_upper('abcdefg') == 0)\nassert(count_upper('dBBE') == 0)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpigzbpay5.lua:15: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpigzbpay5.lua:15: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    if type(s) ~= 'string' then\n        error('count_upper: string argument\
    \ required')\n    end\n    local count = 0\n    local vowels = {'A', 'E', 'I',\
    \ 'O', 'U'}\n    for i = 1, #s do\n        if i % 2 == 0 then\n            for\
    \ k, v in pairs(vowels) do\n                if v == s:sub(i, i) then\n       \
    \             count = count + 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzmh1x53.lua:27:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpjzmh1x53.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local count = 0\n   for i = 1, #s do\n      if (i % 2 == 0) and is_upper(s:sub(i,\
    \ i)) then\n         count = count + 1\n      end\n   end\n   return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphpaqs3q0.lua:9:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmphpaqs3q0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmphpaqs3q0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphak817zd.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmphak817zd.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i=1,#s do\n    if is_upper(s, i) and even(i) then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcq3hguy6.lua:9:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmpcq3hguy6.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpcq3hguy6.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return (string.gsub(s, \"[AEIOU]\", \"\"))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0tcxqyp.lua:13:\
    \ expected: 1, actual: \"aBCdf\"\nstack traceback:\n\t/tmp/tmpx0tcxqyp.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if is_vowel(s:sub(i, i)) and\
    \ i % 2 == 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnud02mt.lua:9:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmplnud02mt.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmplnud02mt.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal charMap = {}\n\tfor i = 1, #s do\n\t\tcharMap[i] = string.char(s:byte(i))\n\
    \tend\n\tlocal count = 0\n\tfor i = 1, #charMap do\n\t\tif i % 2 == 0 and charMap[i]\
    \ == string.upper(charMap[i]) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\t\
    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3mahmpfc.lua:25:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp3mahmpfc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal n = 0\n\tfor i = 1, #s do\n\t\tif s:sub(i, i):match('^[aeiou]$') then\n\
    \t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphg6jt441.lua:20:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmphg6jt441.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal counter = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n\t\t\tcounter = counter + 1\n\t\tend\n\tend\n\treturn counter\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpknqyg6zt.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpknqyg6zt.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i=1,#s do\n        if string.match(s:sub(i,i),'^[AEIOU]$')\
    \ then\n            if i%2==0 then\n                count = count + 1\n      \
    \      end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4o3a99b.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_4o3a99b.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9vzei4m.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpu9vzei4m.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local vowels = 'aeiouAEIOU'\n    local count = 0\n    for i=1, #s do\n  \
    \      if string.find(vowels, s:sub(i,i)) then\n            if i % 2 == 0 then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46p1q9l8.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp46p1q9l8.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal counter = 0\n\tfor i=1, #s do\n\t\tif (string.byte(s, i) >= 65 and string.byte(s,\
    \ i) <= 90) and (i % 2 == 0) then\n\t\t\tcounter = counter + 1\n\t\tend\n\tend\n\
    \treturn counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cu0wj8f.lua:21:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp3cu0wj8f.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9o729v_.lua:13:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmph9o729v_.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, string.len(s) do\n    local char = string.sub(s,\
    \ i, i)\n    if char:match(\"%a\") and char:match(\"%u\") and i % 2 == 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyv09art.lua:22:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpzyv09art.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local c = 0\n  for i = 1, string.len(s) do\n    if i % 2 == 0 and string.find(s,\
    \ \"[AEIOU]\", i, true) then\n      c = c + 1\n    end\n  end\n  return c\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2wqy7vj.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpz2wqy7vj.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    local x = 2\n    for c in s:gmatch'.' do\n        if\
    \ c:find'[AEIOU]' and (x % 2 == 0) then\n            count = count + 1\n     \
    \   end\n        x = x + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local num = 0\n    for i = 1, #s do\n        if (i % 2 == 0) and is_upper(s,\
    \ i) then\n            num = num + 1\n        end\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg6gcb9jg.lua:9:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmpg6gcb9jg.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpg6gcb9jg.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local sum = 0\n  for i=1,#s do\n    local c = s:sub(i,i)\n    if (i % 2 ==\
    \ 0) and (c:match(\"[AEIOU]\")) then\n      sum = sum + 1\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukspfxua.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpukspfxua.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if (i % 2 == 0) and (s:sub(i, i):match(\"\
    [AEIOU]\")) then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wykndb0.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp6wykndb0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local n = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n      \
    \  if c:find('[AEIOU]') and i % 2 == 0 then\n            n = n + 1\n        end\n\
    \    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_j_femc2.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_j_femc2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    if type(s) ~= 'string' then\n        return nil, \"Input string is not a\
    \ string\"\n    end\n    local n = 0\n    for i = 1, #s do\n        if i % 2 ==\
    \ 0 and s:sub(i, i):match('^[AEIOU]$') then\n            n = n + 1\n        end\n\
    \    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9heg8pd.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpg9heg8pd.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    return s:gsub('[AaEeIiOoUu]', ' '):gsub('(%S+)', ' '):len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvse3o7me.lua:13:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpvse3o7me.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile i <= #s do\n\t\tif uppers[s:sub(i,i)]\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9k15402g.lua:10:\
    \ attempt to index a nil value (global 'uppers')\nstack traceback:\n\t/tmp/tmp9k15402g.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp9k15402g.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmmtf_c4.lua:13:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpgmmtf_c4.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    local even = false\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:match('[AEIOU]') then\n            if even then\n\
    \                count = count + 1\n            end\n            even = not even\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghs4a15b.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpghs4a15b.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local l = string.len(s)\n    local c = 0\n    for i = 1, l, 2 do\n      \
    \  local b = string.byte(s, i)\n        if b >= 65 and b <= 90 then\n        \
    \    c = c + 1\n        end\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7aqja3ki.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp7aqja3ki.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if ((s:sub(i, i) == 'A') or (s:sub(i,\
    \ i) == 'E') or (s:sub(i, i) == 'I') or (s:sub(i, i) == 'O') or (s:sub(i, i) ==\
    \ 'U')) and (i % 2 == 0) then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4wbrqct.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpo4wbrqct.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return string.gsub(s, \"[AEIOU]\", \"\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9yetn_k.lua:13:\
    \ expected: 1, actual: \"aBCdf\"\nstack traceback:\n\t/tmp/tmpt9yetn_k.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local cnt = 0\n    local vowel = {A=true, E=true, I=true, O=true, U=true}\n\
    \    for i=1,#s,2 do\n        local c = s:sub(i,i)\n        if vowel[c] then\n\
    \            cnt = cnt + 1\n        end\n    end\n    return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return s:gsub(\"(%a)([AEIOU])(%a*)\", function(a, b, c)\n    if #c == 0 then\n\
    \      return a\n    else\n      return b\n    end\n  end):len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_fdhwhi.lua:19:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpl_fdhwhi.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if string.match(s, i, i) ~= string.lower(string.match(s,\
    \ i, i)) and (i%2 == 0) then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc0we9wlr.lua:9:\
    \ bad argument #1 to 'lower' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpc0we9wlr.lua:9: in local 'candidate'\n\t/tmp/tmpc0we9wlr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if math.fmod(i, 2) == 0 and\
    \ string.find(s, s:sub(i, i), 1, true) then\n            count = count + 1\n \
    \       end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvr4v_s3k.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpvr4v_s3k.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local vowel = 'AEIOU'\n  local count = 0\n  for i = 1, #s do\n    if i % 2\
    \ == 0 and vowel:find(s:sub(i, i)) then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpou9sshj0.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpou9sshj0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return count_helper(s, true, true)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa6pbkdn7.lua:7:\
    \ attempt to call a nil value (global 'count_helper')\nstack traceback:\n\t/tmp/tmpa6pbkdn7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpa6pbkdn7.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwkvicrn.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpjwkvicrn.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, string.len(s) do\n        if i % 2 == 0 and\
    \ string.sub(s, i, i) == string.upper(string.sub(s, i, i)) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cgi2s8o.lua:21:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp5cgi2s8o.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and string.find(s,\
    \ '%u') then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6x9k81bp.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp6x9k81bp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    -- First, turn the string into a table of characters.\n    local t = {}\n\
    \    for c in s:gmatch(\".\") do\n        table.insert(t, c)\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbkpx9xlx.lua:25: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and string.match(s,\
    \ \"%u\") then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqz428gn.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpxqz428gn.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \   local count = 0\n   for i = 1, #s do\n      if (i % 2 == 0) and (s:sub(i,\
    \ i):match(\"^[AEIOU]$\")) then\n         count = count + 1\n      end\n   end\n\
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrepx7s_.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpwrepx7s_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return #s:gsub(\"[aeiou]\",function(c) return c:upper() end):gsub(\"[^AEOIU]\"\
    ,\"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykfjnz1v.lua:13:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpykfjnz1v.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local i = 0\n    local count = 0\n    while i < #s do\n        i = i + 2\n\
    \        if is_upper(s:sub(i, i)) then\n            count = count + 1\n      \
    \  end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7qdjl_b2.lua:11:\
    \ attempt to call a nil value (global 'is_upper')\nstack traceback:\n\t/tmp/tmp7qdjl_b2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp7qdjl_b2.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local upper, count = 0, 0\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c:match('[AEIOU]') then\n            upper = upper + 1\n    \
    \    end\n        if upper % 2 == 0 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjionb5gs.lua:23:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpjionb5gs.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local vowel = \"aeiou\"\n  local counter = 0\n  for i = 1, string.len(s) do\n\
    \    if i % 2 == 0 and vowel:find(string.lower(s:sub(i, i))) then\n      counter\
    \ = counter + 1\n    end\n  end\n  return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuv1ijffg.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpuv1ijffg.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
