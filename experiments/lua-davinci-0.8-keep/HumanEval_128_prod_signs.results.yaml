name: HumanEval_128_prod_signs
language: lua
results:
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum, prod = 0, 1\n    for _, val in\
    \ ipairs(arr) do\n        sum = sum + math.abs(val)\n        prod = prod * (val\
    \ > 0 and 1 or val < 0 and -1 or 0)\n    end\n    return sum * prod\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ n = #arr\n  if n == 0 then return nil end\n  local sum = 0\n  local prod = 1\n\
    \  for i = 1, n do\n    local x = arr[i]\n    if x == 0 then\n      prod = 0\n\
    \      break\n    elseif x < 0 then\n      prod = -prod\n    end\n    sum = sum\
    \ + math.abs(x)\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ res = 1\n    local sum = 0\n    for i, v in ipairs(arr) do\n        local sign\
    \ = v > 0 and 1 or v < 0 and -1 or 0\n        sum = sum + math.abs(v)\n      \
    \  res = res * sign\n    end\n    return sum * res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprez7lbra.lua:26:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmprez7lbra.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v < 0 then\n            prod = prod * -1\n       \
    \ elseif v > 0 then\n            prod = prod * 1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22nuq7g3.lua:31:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp22nuq7g3.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoo14qxuf.lua:15:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmpoo14qxuf.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local result = 1\n    for _, v in ipairs(arr)\
    \ do\n        result = result * (v / math.abs(v))\n    end\n    return result\
    \ * sum(map(math.abs, arr))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfns69jnd.lua:15:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpfns69jnd.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpfns69jnd.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n\tlocal\
    \ result = 1\n\tlocal sign = 1\n\tfor i = 1, #arr do\n\t\tif arr[i] < 0 then\n\
    \t\t\tsign = -1\n\t\telseif arr[i] > 0 then\n\t\t\tsign = 1\n\t\telse\n\t\t\t\
    sign = 0\n\t\tend\n\t\tresult = result * sign\n\tend\n\tlocal sum = 0\n\tfor i\
    \ = 1, #arr do\n\t\tsum = sum + math.abs(arr[i])\n\tend\n\treturn result * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6h12_10e.lua:35:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp6h12_10e.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sgns = 1\n    local sums = 0\n    for\
    \ _,x in ipairs(arr) do\n        sgns = sgns * (x == 0 and 0 or (x > 0 and 1 or\
    \ -1))\n        sums = sums + math.abs(x)\n    end\n    return sgns * sums\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n\tif arr\
    \ == nil or #arr == 0 then\n\t\treturn nil\n\tend\n\t\n\tlocal prod = 1\n\tlocal\
    \ sum = 0\n\tfor _, a in ipairs(arr) do\n\t\tif a == 0 then\n\t\t\tprod = 0\n\t\
    \t\tbreak\n\t\telseif a > 0 then\n\t\t\tprod = prod * 1\n\t\telse\n\t\t\tprod\
    \ = prod * -1\n\t\tend\n\t\tsum = sum + math.abs(a)\n\tend\n\treturn prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ res = 1\n    local size = #arr\n    if size == 0 then\n        return nil\n\
    \    end\n    for i = 1, size do\n        local sign = arr[i]\n        if sign\
    \ == 0 then\n            res = 0\n            break\n        elseif sign < 0 then\n\
    \            res = res * -1\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9j5i0zho.lua:30:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmp9j5i0zho.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if not\
    \ arr then return end\n  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr)\
    \ do\n    prod = prod * sign(v)\n    sum = sum + math.abs(v)\n  end\n  return\
    \ prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmxi63380.lua:14:\
    \ attempt to call a nil value (global 'sign')\nstack traceback:\n\t/tmp/tmpmxi63380.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpmxi63380.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local res = 0\n    local sum = 0\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v < 0 then\n\
    \            res = res - 1\n        elseif v > 0 then\n            res = res +\
    \ 1\n        end\n    end\n    return res * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplfbz4lt6.lua:27:\
    \ expected: -9, actual: 18\nstack traceback:\n\t/tmp/tmplfbz4lt6.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ arr == nil or #arr == 0 then\n        return nil\n    end\n    local r = 0\n\
    \    local p = 1\n    for _, v in ipairs(arr) do\n        r = r + math.abs(v)\n\
    \        if v > 0 then\n            p = p * 1\n        elseif v < 0 then\n   \
    \         p = p * -1\n        else\n            p = p * 0\n        end\n    end\n\
    \    return r * p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    --\
    \ TODO: solution\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp407cf6st.lua:16:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmp407cf6st.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        local abs\
    \ = math.abs(v)\n        sum = sum + abs\n        prod = prod * sign(v)\n    end\n\
    \    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1m8ma0vl.lua:15:\
    \ attempt to call a nil value (global 'sign')\nstack traceback:\n\t/tmp/tmp1m8ma0vl.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp1m8ma0vl.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for i, v in ipairs(arr) do\n    local sign = 0\n\
    \    if v > 0 then\n      sign = 1\n    elseif v < 0 then\n      sign = -1\n \
    \   end\n    prod = prod * sign\n    sum = sum + math.abs(v)\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbq9kb2z9.lua:31:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpbq9kb2z9.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  -- \n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyi952uih.lua:16:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmpyi952uih.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ not arr or #arr == 0 then\n        return nil\n    end\n    local res = 0\n\
    \    local sign = 1\n    for _, v in ipairs(arr) do\n        if v < 0 then\n \
    \           sign = sign * -1\n        elseif v > 0 then\n            sign = sign\
    \ * 1\n        else\n            sign = 0\n            break\n        end\n  \
    \      res = res + math.abs(v)\n    end\n    return res * sign\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ arr == nil or #arr == 0 then\n        return nil\n    end\n    local s = 1\n\
    \    local p = 1\n    for _, v in ipairs(arr) do\n        local m = math.abs(v)\n\
    \        local sgn = math.sign(v)\n        s = s + m\n        p = p * sgn\n  \
    \  end\n    return s * p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphw2mse2w.lua:17:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmphw2mse2w.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmphw2mse2w.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if not\
    \ arr or #arr == 0 then return nil end\n  local prod = 1\n  local sum = 0\n  for\
    \ _, v in ipairs(arr) do\n    if v == 0 then\n      prod = 0\n    else\n     \
    \ prod = prod * v / math.abs(v)\n      sum = sum + math.abs(v)\n    end\n  end\n\
    \  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local mult, sum = 1, 0\n    for _, v in ipairs(arr)\
    \ do\n        if v ~= 0 then\n            mult = mult * ((v > 0) and 1 or -1)\n\
    \            sum = sum + math.abs(v)\n        end\n    end\n    return mult *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8xrmlh0.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf8xrmlh0.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sign_prod = 1\n  local sum = 0\n  for _, v\
    \ in ipairs(arr) do\n    if v > 0 then\n      sign_prod = sign_prod * 1\n    elseif\
    \ v < 0 then\n      sign_prod = sign_prod * -1\n    else\n      sign_prod = sign_prod\
    \ * 0\n    end\n    sum = sum + math.abs(v)\n  end\n  return sum * sign_prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local signs = 1\n    local sum = 0\n    for\
    \ _, num in ipairs(arr) do\n        if num == 0 then\n            return 0\n \
    \       elseif num > 0 then\n            sum = sum + num\n        else\n     \
    \       sum = sum - num\n            signs = signs * -1\n        end\n    end\n\
    \    return sum * signs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnu0118dm.lua:15:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmpnu0118dm.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for i = 1, #arr do\n        sum = sum + math.abs(arr[i])\n\
    \        if arr[i] > 0 then\n            prod = prod * 1\n        elseif arr[i]\
    \ < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy01yeob3.lua:31:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpy01yeob3.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if not\
    \ arr or #arr == 0 then return nil end\n  local signs = 1\n  local sum = 0\n \
    \ for _, v in ipairs(arr) do\n    if v == 0 then\n      signs = 0\n    else\n\
    \      signs = signs * (v / math.abs(v))\n      sum = sum + math.abs(v)\n    end\n\
    \  end\n  return sum * signs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ next(arr) == nil then\n        return nil\n    end\n    local prod = 1\n   \
    \ local sum = 0\n    for _, v in ipairs(arr) do\n        if v < 0 then\n     \
    \       prod = prod * -1\n        elseif v > 0 then\n            prod = prod *\
    \ 1\n        else\n            prod = prod * 0\n        end\n        sum = sum\
    \ + math.abs(v)\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ signs = table.map(function(x) return (x > 0 and 1) or ((x < 0 and -1) or 0)\
    \ end, arr)\n  return (table.reduce(signs, math.mul, 1) * table.reduce(arr, math.add,\
    \ 0))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7_ze_dtc.lua:10:\
    \ attempt to call a nil value (field 'map')\nstack traceback:\n\t/tmp/tmp7_ze_dtc.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp7_ze_dtc.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n\tlocal\
    \ product = 1\n\tlocal sum = 0\n\tfor i = 1, #arr do\n\t\tlocal sign = arr[i]\
    \ / math.abs(arr[i])\n\t\tproduct = product * sign\n\t\tsum = sum + math.abs(arr[i])\n\
    \tend\n\tif product == 0 then\n\t\treturn 0\n\telse\n\t\treturn product * sum\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1bmuj33s.lua:28:\
    \ expected: 0, actual: #NaN\nstack traceback:\n\t/tmp/tmp1bmuj33s.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ _result = 0\n  local _skip = false\n  for _, _a in ipairs(arr) do\n    if _a\
    \ == 0 then\n      _skip = true\n      break\n    end\n    _result = _result +\
    \ math.abs(_a)\n  end\n  return (_skip and nil) or _result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv02vx69w.lua:25:\
    \ expected: -9, actual: 9\nstack traceback:\n\t/tmp/tmpv02vx69w.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum, sign, product = 0, 1, 1\n    for _, num in ipairs(arr) do\n        if num\
    \ == 0 then\n            sign = 0\n        elseif num < 0 then\n            product\
    \ = product * -1\n        end\n        sum = sum + math.abs(num)\n    end\n  \
    \  return sign * product * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzl2zxq7.lua:28:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpjzl2zxq7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, x in ipairs(arr) do\n        prod =\
    \ prod * sign(x)\n        sum = sum + abs(x)\n    end\n    return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnnoi76gf.lua:13:\
    \ attempt to call a nil value (global 'sign')\nstack traceback:\n\t/tmp/tmpnnoi76gf.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpnnoi76gf.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local res = 0\n  local prod = 1\n  for i = 1, #arr\
    \ do\n    local x = arr[i]\n    if x > 0 then\n      res = res + x\n    elseif\
    \ x < 0 then\n      res = res - x\n      prod = prod * -1\n    end\n  end\n  return\
    \ res * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyx1blr8n.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpyx1blr8n.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod, sum = 1, 0\n    for _, i in ipairs(arr) do\n        sum = sum + math.abs(i)\n\
    \        prod = prod * (i == 0 and 1 or i / math.abs(i))\n    end\n    return\
    \ prod == 0 and nil or prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfsssu44g.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfsssu44g.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sum, prod = 0, 1\n  for _, v in ipairs(arr)\
    \ do\n    local sign = signum(v)\n    sum = sum + math.abs(v)\n    prod = prod\
    \ * sign\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3bzm6yt4.lua:13:\
    \ attempt to call a nil value (global 'signum')\nstack traceback:\n\t/tmp/tmp3bzm6yt4.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp3bzm6yt4.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum, prod = 0, 1\n    for _, i in ipairs(arr) do\n        sum = sum + math.abs(i)\n\
    \        prod = prod * math.sign(i)\n    end\n    return prod * sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgo6g2jd5.lua:13:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmpgo6g2jd5.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpgo6g2jd5.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ res = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n           \
    \ res = res * 1\n        elseif v < 0 then\n            res = res * -1\n     \
    \   else\n            res = res * 0\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7flxl2cb.lua:26:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmp7flxl2cb.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        prod =\
    \ prod * v\n        sum = sum + math.abs(v)\n    end\n    if prod ~= 0 then\n\
    \        return prod * sum\n    else\n        return nil\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps87g9jqk.lua:26:\
    \ expected: -9, actual: -144\nstack traceback:\n\t/tmp/tmps87g9jqk.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if\
    \ n > 0 then\n      prod = prod * 1\n    elseif n < 0 then\n      prod = prod\
    \ * -1\n    else\n      prod = prod * 0\n    end\n    sum = sum + math.abs(n)\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyl8jy7vu.lua:32:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpyl8jy7vu.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local signs = {[1] = 1, [-1] = -1, [0] =\
    \ 0}\n    local product = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n\
    \        product = product * signs[v]\n        sum = sum + math.abs(v)\n    end\n\
    \    return product * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9anlret7.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp9anlret7.lua:15: in local 'candidate'\n\t/tmp/tmp9anlret7.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ arr == nil or #arr == 0 then\n        return nil\n    end\n    local prod, sum\
    \ = 1, 0\n    for _, x in ipairs(arr) do\n        prod = prod * (x > 0 and 1 or\
    \ (x < 0 and -1 or 0))\n        sum = sum + math.abs(x)\n    end\n    return prod\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  if arr == nil or #arr == 0 then\n    return nil\n\
    \  end\n  for _,v in ipairs(arr) do\n    if v == 0 then\n      prod = 0\n    elseif\
    \ v > 0 then\n      prod = prod * 1\n    else\n      prod = prod * -1\n    end\n\
    \    sum = sum + math.abs(v)\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local res = 1\n  for _, x in ipairs(arr) do\n  \
    \  if x == 0 then return 0 end\n    if x < 0 then res = res * -1 end\n  end\n\
    \  return res * sum_magnitudes(arr)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyng7kc9d.lua:16:\
    \ attempt to call a nil value (global 'sum_magnitudes')\nstack traceback:\n\t\
    /tmp/tmpyng7kc9d.lua:16: in local 'candidate'\n\t/tmp/tmpyng7kc9d.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        local sign\
    \ = sign(v)\n        if sign then\n            prod = prod * sign\n          \
    \  sum = sum + math.abs(v)\n        end\n    end\n    return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1zzqjp92.lua:13:\
    \ attempt to call a nil value (global 'sign')\nstack traceback:\n\t/tmp/tmp1zzqjp92.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp1zzqjp92.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        prod =\
    \ prod * (v > 0 and 1 or (v < 0 and -1 or 0))\n        sum = sum + math.abs(v)\n\
    \    end\n    return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6fr68of3.lua:25:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp6fr68of3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n\tif arr\
    \ == nil or #arr == 0 then\n\t\treturn nil\n\tend\n\tlocal ret = 0\n\tlocal sign\
    \ = 1\n\tfor i = 1, #arr do\n\t\tif arr[i] > 0 then\n\t\t\tret = ret + arr[i]\n\
    \t\telseif arr[i] < 0 then\n\t\t\tret = ret - arr[i]\n\t\t\tsign = sign * -1\n\
    \t\tend\n\tend\n\treturn ret * sign\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphv8m6uq4.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmphv8m6uq4.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ summ = 0\n    local prod = 1\n    for _, num in ipairs(arr) do\n        summ\
    \ = summ + math.abs(num)\n        if num > 0 then\n            prod = prod * 1\n\
    \        elseif num < 0 then\n            prod = prod * -1\n        else\n   \
    \         prod = prod * 0\n        end\n    end\n    return summ * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12nw4qyj.lua:31:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp12nw4qyj.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ signs = {1, -1, 0}\n    if #arr == 0 then return nil end\n    local result =\
    \ 1\n    for i = 1, #arr do\n        local sign = arr[i] / math.abs(arr[i])\n\
    \        local magnitude = math.abs(arr[i])\n        result = result * sign *\
    \ magnitude\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw76vpfu4.lua:24:\
    \ expected: -9, actual: -16\nstack traceback:\n\t/tmp/tmpw76vpfu4.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum, prod = 0, 1\n    for _, v in ipairs(arr) do\n        local sign = v > 0\
    \ and 1 or v < 0 and -1 or 0\n        sum = sum + math.abs(v)\n        prod =\
    \ prod * sign\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11cv_ef_.lua:25:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp11cv_ef_.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum, prod = 0, 1\n    for i = 1, #arr do\n        local x = arr[i]\n       \
    \ if x > 0 then x = 1\n        elseif x < 0 then x = -1 end\n        sum = sum\
    \ + math.abs(arr[i])\n        prod = prod * x\n    end\n    return prod == 0 and\
    \ nil or sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpva2t3zip.lua:27:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpva2t3zip.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n\t-- your\
    \ code here\n\tlocal prod_of_signs = 0\n\tlocal sum_of_mag = 0\n\tfor k, v in\
    \ pairs(arr) do\n\t\tif v > 0 then\n\t\t\tprod_of_signs = prod_of_signs + 1\n\t\
    \telseif v < 0 then\n\t\t\tprod_of_signs = prod_of_signs - 1\n\t\tend\n\t\tsum_of_mag\
    \ = sum_of_mag + math.abs(v)\n\tend\n\tif #arr == 0 then\n\t\treturn\n\tend\n\t\
    return prod_of_signs * sum_of_mag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3sm1dv7.lua:30:\
    \ expected: -9, actual: 18\nstack traceback:\n\t/tmp/tmps3sm1dv7.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local prod = 1\n    local sum = 0\n    for\
    \ _, v in ipairs(arr) do\n        prod = prod * sign(v)\n        sum = sum + math.abs(v)\n\
    \    end\n    return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgmh5nt3x.lua:14:\
    \ attempt to call a nil value (global 'sign')\nstack traceback:\n\t/tmp/tmpgmh5nt3x.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpgmh5nt3x.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum, prod = 0, 1\n    for _, x in ipairs(arr) do\n        if x > 0 then prod\
    \ = prod * 1\n        elseif x < 0 then prod = prod * -1\n        else prod =\
    \ prod * 0 end\n        sum = sum + math.abs(x)\n    end\n    return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5jvtj9m.lua:26:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpt5jvtj9m.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local neg_count = 0\n\
    \    for _, v in ipairs(arr) do\n        if v < 0 then neg_count = neg_count +\
    \ 1 end\n        sum = sum + math.abs(v)\n    end\n    if neg_count % 2 == 0 then\
    \ return sum\n    else return -sum end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3iqumqu.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpa3iqumqu.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ not arr then return end\n    if #arr == 0 then return end\n    local prod =\
    \ 1\n    local sum = 0\n    for i = 1, #arr do\n        if arr[i] == 0 then\n\
    \            prod = prod * 0\n        elseif arr[i] > 0 then\n            prod\
    \ = prod * 1\n        else\n            prod = prod * -1\n        end\n      \
    \  sum = sum + math.abs(arr[i])\n    end\n    return prod * sum\nend\nassert(prod_signs({1,\
    \ 2, 2, -4}) == -9)\nassert(prod_signs({0, 1}) == 0)\nassert(prod_signs({}) ==\
    \ nil)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    --\
    \ your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyx87xkb.lua:16:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmpoyx87xkb.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local res = 0\n  local total = 1\n  for i, v in\
    \ ipairs(arr) do\n    if v == 0 then return 0 end\n    if v > 0 then\n      res\
    \ = res + v\n    else\n      res = res - v\n      total = total * -1\n    end\n\
    \  end\n  return res * total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if not\
    \ arr or #arr == 0 then return nil end\n  local product, sum = 1, 0\n  for _,\
    \ num in ipairs(arr) do\n    local sign = (num > 0 and 1) or (num < 0 and -1)\
    \ or 0\n    product = product * sign\n    sum = sum + math.abs(num)\n  end\n \
    \ return product * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, n in ipairs(arr) do\n        sum = sum\
    \ + math.abs(n)\n        if n < 0 then\n            prod = prod * -1\n       \
    \ elseif n == 0 then\n            prod = 0\n        end\n    end\n    return sum\
    \ * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxnt1u9f.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpnxnt1u9f.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  -- your\
    \ code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvf43d2j2.lua:16:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmpvf43d2j2.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for i, n in ipairs(arr) do\n    if n > 0 then\n\
    \      prod = prod * 1\n      sum = sum + n\n    elseif n < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + math.abs(n)\n    else\n      prod = prod * 0\n\
    \    end\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp422y1x3r.lua:32:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp422y1x3r.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, x in ipairs(arr) do\n    if x > 0 then\n\
    \      prod = prod * 1\n      sum = sum + x\n    elseif x < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + -x\n    else\n      sum = sum + x\n    end\n\
    \  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptduapwaw.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptduapwaw.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6n2nnzk6.lua:15:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmp6n2nnzk6.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ujm7ta4.lua:16:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmp5ujm7ta4.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrwz0t6t.lua:15:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmpbrwz0t6t.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local res = 1\n    for _, val in ipairs(arr)\
    \ do\n        if val > 0 then\n            res = res * 1\n        elseif val <\
    \ 0 then\n            res = res * -1\n        else\n            res = res * 0\n\
    \        end\n    end\n    local sum = 0\n    for _, val in ipairs(arr) do\n \
    \       sum = sum + math.abs(val)\n    end\n    return sum * res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ len = #arr\n  if len == 0 then return nil end\n  local result = 1\n  for i =\
    \ 1, len do\n    result = result * math.sign(arr[i])\n  end\n  local sum = 0\n\
    \  for i = 1, len do\n    sum = sum + math.abs(arr[i])\n  end\n  return result\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfgqbiv0b.lua:14:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmpfgqbiv0b.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpfgqbiv0b.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum, mul = 0, 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n   \
    \         sum = sum + v\n        elseif v < 0 then\n            sum = sum - v\n\
    \            mul = mul * -1\n        else\n            mul = 0\n        end\n\
    \    end\n    return sum * mul\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprs_4mqgm.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmprs_4mqgm.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local s, m = 1, 0\n    for _, v in ipairs(arr)\
    \ do\n        s = s * (v < 0 and -1 or v > 0 and 1 or 0)\n        m = m + math.abs(v)\n\
    \    end\n    return s * m\nend\n_G.prod_signs = prod_signs\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ res = 1\n    local sum = 0\n    for _,v in ipairs(arr) do\n        local sign\
    \ = math.sign(v)\n        if sign == 0 then\n            sum = sum + math.abs(v)\n\
    \        else\n            res = res * sign\n            sum = sum + math.abs(v)\n\
    \        end\n    end\n    return sum * res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl9p0uk4y.lua:13:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmpl9p0uk4y.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpl9p0uk4y.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ not arr then return end\n    local sum = 0\n    local prod = 1\n    for i =\
    \ 1, #arr do\n        if arr[i] == 0 then\n            return 0\n        elseif\
    \ arr[i] > 0 then\n            sum = sum + arr[i]\n        else\n            sum\
    \ = sum - arr[i]\n            prod = prod * -1\n        end\n    end\n    return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45tmsdll.lua:32:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp45tmsdll.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ res = 1\n    for _, i in ipairs(arr) do\n        if i > 0 then\n           \
    \ res = res * 1\n        elseif i < 0 then\n            res = res * -1\n     \
    \   else\n            res = res * 0\n        end\n    end\n    local res2 = 0\n\
    \    for _, i in ipairs(arr) do\n        res2 = res2 + math.abs(i)\n    end\n\
    \    return res * res2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_u6wwhdp.lua:33:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp_u6wwhdp.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local product = 1\n  for i = 1, #arr do\n    local item = arr[i]\n\
    \    if item > 0 then\n      sum = sum + item\n      product = product * 1\n \
    \   elseif item < 0 then\n      sum = sum + item * -1\n      product = product\
    \ * -1\n    else\n      product = product * 0\n    end\n  end\n  return sum *\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6r5rpv9.lua:33:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpa6r5rpv9.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local prod, sum = 1, 0\n    for _, num in\
    \ ipairs(arr) do\n        prod = prod * math.sign(num)\n        sum = sum + math.abs(num)\n\
    \    end\n    return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjszqgew3.lua:13:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmpjszqgew3.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpjszqgew3.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local prod, sum = 1, 0\n    for _, v in ipairs(arr)\
    \ do\n        prod = prod * (v >= 0 and 1 or -1)\n        sum = sum + math.abs(v)\n\
    \    end\n    return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4mthyul.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpy4mthyul.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ function sign(x)\n    if x > 0 then return 1\n    elseif x < 0 then return -1\n\
    \    else return 0 end\n  end\n  local product = 1\n  local sum = 0\n  for _,\
    \ x in ipairs(arr) do\n    product = product * sign(x)\n    sum = sum + math.abs(x)\n\
    \  end\n  return product * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gbbfja6.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp0gbbfja6.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ res = 0\n    local sign = 1\n    if not arr then return nil end\n    for i,\
    \ v in ipairs(arr) do\n        res = res + math.abs(v)\n        if v ~= 0 then\n\
    \            sign = sign * (v / math.abs(v))\n        end\n    end\n    return\
    \ res * sign\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1v8q5uc8.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp1v8q5uc8.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n\tlocal\
    \ sum = 0\n\tlocal mul = 1\n\tfor i = 1, #arr do\n\t\tlocal sign = math.sign(arr[i])\n\
    \t\tmul = mul * sign\n\t\tsum = sum + math.abs(arr[i])\n\tend\n\treturn mul ==\
    \ 0 and nil or sum * mul\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv0jubjxh.lua:13:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmpv0jubjxh.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpv0jubjxh.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  if not arr then return end\n  for i = 1, #arr do\n\
    \    if arr[i] < 0 then prod = prod * -1 end\n    sum = sum + math.abs(arr[i])\n\
    \  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rd1wq8v.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5rd1wq8v.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local ret = 0\n    local mult = 1\n    for\
    \ _, v in ipairs(arr) do\n        if v == 0 then\n            mult = 0\n     \
    \   else\n            ret = ret + math.abs(v)\n        end\n        mult = mult\
    \ * math.sign(v)\n    end\n    return ret * mult\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoddeccct.lua:19:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmpoddeccct.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpoddeccct.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ not arr then return nil end\n    local signs = { }\n    local magnitudes = {\
    \ }\n    for _, v in ipairs(arr) do\n        local magnitude = math.abs(v)\n \
    \       table.insert(magnitudes, magnitude)\n        local sign = 1\n        if\
    \ v == 0 then\n            sign = 0\n        elseif v < 0 then\n            sign\
    \ = -1\n        end\n        table.insert(signs, sign)\n    end\n    return sum(magnitudes)\
    \ * product(signs)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1468yj9u.lua:24:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp1468yj9u.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp1468yj9u.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ res, n = 1, #arr\n  if n == 0 then return nil end\n  for i = 1, n do\n    local\
    \ v = arr[i]\n    if v < 0 then\n      res = res * -1\n    elseif v == 0 then\n\
    \      return 0\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6aalc15n.lua:26:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmp6aalc15n.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ s = 0\n  for i = 1, #arr do\n    s = s + math.abs(arr[i]) * arr[i]\n  end\n\
    \  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzc6iyo9o.lua:20:\
    \ expected: -9, actual: -7\nstack traceback:\n\t/tmp/tmpzc6iyo9o.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for i = 1, #arr do\n        if arr[i] == 0\
    \ then\n            return nil\n        elseif arr[i] > 0 then\n            sum\
    \ = sum + arr[i]\n        else\n            sum = sum - arr[i]\n            prod\
    \ = prod * -1\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73q5ftrw.lua:29:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp73q5ftrw.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgi95fv5r.lua:15:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmpgi95fv5r.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ result = 0\n    local prod = 1\n    if #arr == 0 then\n        return nil\n\
    \    end\n    for i, v in ipairs(arr) do\n        if v > 0 then\n            prod\
    \ = prod * 1\n        elseif v < 0 then\n            prod = prod * -1\n      \
    \  else\n            prod = prod * 0\n        end\n        result = result + v\n\
    \    end\n    return result * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplfxijwfy.lua:31:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmplfxijwfy.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ < 1 then return nil end\n  local signs = {}\n  for _, n in ipairs(arr) do\n\
    \    table.insert(signs, (n > 0 and 1) or (n < 0 and -1) or 0)\n  end\n  local\
    \ sum = 0\n  for _, n in ipairs(arr) do\n    sum = sum + math.abs(n)\n  end\n\
    \  return sum * table.prod(signs)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp24s1dfks.lua:19:\
    \ attempt to call a nil value (field 'prod')\nstack traceback:\n\t/tmp/tmp24s1dfks.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp24s1dfks.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum, prod = 0, 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n  \
    \          sum = sum + v\n        elseif v < 0 then\n            sum = sum - v\n\
    \            prod = prod * -1\n        else\n            prod = 0\n        end\n\
    \    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_fnb3jj.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpl_fnb3jj.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local prod, sum = 1, 0\n    for _, v in ipairs(arr)\
    \ do\n        prod = prod * (v == 0 and 1 or v/math.abs(v))\n        sum = sum\
    \ + math.abs(v)\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3mx7hiqr.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3mx7hiqr.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local sign = 1\n  for i = 1, #arr do\n    local v = arr[i]\n    sum\
    \ = sum + math.abs(v)\n    if v < 0 then\n      sign = sign * -1\n    elseif v\
    \ == 0 then\n      sign = 0\n    end\n  end\n  return sum * sign\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe57_xm_c.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpe57_xm_c.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, i in ipairs(arr) do\n        prod =\
    \ prod * (i == 0 and 0 or i / math.abs(i))\n        sum = sum + math.abs(i)\n\
    \    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yxsbj0.lua:25:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpj6yxsbj0.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for i = 1, #arr do\n        local x = arr[i]\n\
    \        if x == 0 then\n            return 0\n        elseif x > 0 then\n   \
    \         prod = prod * 1\n        else\n            prod = prod * -1\n      \
    \  end\n        sum = sum + math.abs(x)\n    end\n    return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbpdorbkb.lua:32:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpbpdorbkb.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphp4ffp0r.lua:16:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmphp4ffp0r.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 0\n    for i, v in ipairs(arr) do\n        prod = prod + math.abs(v)\
    \ * (v > 0 and 1 or v < 0 and -1 or 0)\n    end\n    return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt72clya2.lua:20:\
    \ expected: -9, actual: 1\nstack traceback:\n\t/tmp/tmpt72clya2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8werxox9.lua:16:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmp8werxox9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum, product = 0, 1\n    for _, val in ipairs(arr) do\n        if val > 0 then\n\
    \            sum = sum + val\n        elseif val < 0 then\n            sum = sum\
    \ - val\n            product = product * (-1)\n        end\n    end\n    return\
    \ product * sum\nend\nassert(prod_signs({1, 2, 2, -4}) == -9)\nassert(prod_signs({0,\
    \ 1}) == 0)\nassert(prod_signs({}) == nil)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt06uvalc.lua:22: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpt06uvalc.lua:22: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if arr\
    \ == nil or #arr == 0 then return nil end\n  local sum, prod = 0, 1\n  for _,\
    \ x in ipairs(arr) do\n    local mod_x = math.abs(x)\n    local sign_x = x ==\
    \ 0 and 0 or x/mod_x\n    sum = sum + mod_x\n    prod = prod * sign_x\n  end\n\
    \  return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        local sign\
    \ = 1\n        if v < 0 then\n            sign = -1\n        elseif v == 0 then\n\
    \            sign = 0\n        end\n        sum = sum + math.abs(v)\n        prod\
    \ = prod * sign\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpva6fdppy.lua:31:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpva6fdppy.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sum, prod = 0, 1\n  for _, v in ipairs(arr)\
    \ do\n    sum = sum + math.abs(v)\n    prod = prod * (v == 0 and 1 or v / math.abs(v))\n\
    \  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqxinyro.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeqxinyro.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _,v in ipairs(arr) do\n        local sign\
    \ = v > 0 and 1 or v < 0 and -1 or 0\n        sum = sum + math.abs(v)\n      \
    \  prod = prod * sign\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnewo1rdw.lua:26:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpnewo1rdw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ product = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v\
    \ == 0 then\n            product = 0\n        elseif v > 0 then\n            product\
    \ = product * 1\n        else\n            product = product * -1\n        end\n\
    \        sum = sum + math.abs(v)\n    end\n    return product * sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hwkzqw8.lua:31:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp3hwkzqw8.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum, mul = 0, 1\n    for _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n\
    \        mul = mul * (v < 0 and -1 or v > 0 and 1 or 0)\n    end\n    return sum\
    \ * mul\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvigy1_li.lua:24:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpvigy1_li.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ res = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n           \
    \ res = res * 1\n        elseif v < 0 then\n            res = res * -1\n     \
    \   else\n            res = res * 0\n        end\n    end\n    local sum = 0\n\
    \    for _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n    end\n  \
    \  return sum * res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9nc0nlo0.lua:33:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp9nc0nlo0.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum, mul = 0, 1\n  for _, x in ipairs(arr) do\n    sum = sum + math.abs(x)\n\
    \    if x ~= 0 then\n      mul = mul * (x > 0 and 1 or -1)\n    end\n  end\n \
    \ return arr[1] and sum * mul or nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9uj_u8g.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpz9uj_u8g.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local p = 1\n    local s = 0\n    for _,\
    \ v in ipairs(arr) do\n        if v > 0 then\n            p = p * 1\n        \
    \    s = s + v\n        elseif v < 0 then\n            p = p * -1\n          \
    \  s = s - v\n        end\n    end\n    return p * s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobj5wv3q.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpobj5wv3q.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    --\
    \ Place your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7aei7vq.lua:16:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmpo7aei7vq.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local mult, sign, sum = 1, 1, 0\n  for i,v in ipairs(arr)\
    \ do\n    if v < 0 then sign = -1 end\n    if v > 0 then sign = 1 end\n    if\
    \ v == 0 then sign = 0 end\n    mult = mult * sign\n    sum = sum + math.abs(v)\n\
    \  end\n  return mult * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for i = 1, #arr do\n        sum = sum + math.abs(arr[i])\n\
    \        if arr[i] == 0 then\n            prod = 0\n        else\n           \
    \ prod = prod * arr[i] / math.abs(arr[i])\n        end\n    end\n    return sum\
    \ * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1iprdpp.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpb1iprdpp.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n\tlocal\
    \ sum = 0\n\tlocal prod = 1\n\tfor _, val in ipairs(arr) do\n\t\tsum = sum + math.abs(val)\n\
    \t\tif val == 0 then\n\t\t\tprod = 0\n\t\telse\n\t\t\tprod = prod * ((val > 0)\
    \ and 1 or -1)\n\t\tend\n\tend\n\treturn prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5z82651g.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp5z82651g.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ signs = table.map(arr, sign)\n    local mags = table.map(arr, abs)\n    local\
    \ product = table.reduce(signs, mul)\n    local sum = table.reduce(mags, add)\n\
    \    return sum * product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4znfsdr0.lua:10:\
    \ attempt to call a nil value (field 'map')\nstack traceback:\n\t/tmp/tmp4znfsdr0.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp4znfsdr0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ type(arr) ~= 'table' then\n        return nil\n    end\n    local muls = 1\n\
    \    local mag = 0\n    for _, v in ipairs(arr) do\n        if v == 0 then\n \
    \           muls = 0\n            break\n        elseif v > 0 then\n         \
    \   muls = muls * 1\n        else\n            muls = muls * -1\n        end\n\
    \        mag = mag + math.abs(v)\n    end\n    return muls * mag\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr83i_98_.lua:35:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpr83i_98_.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local ret = 0\n    local neg = 1\n    for\
    \ _, v in ipairs(arr) do\n        ret = ret + math.abs(v)\n        if v < 0 then\
    \ neg = neg * -1 end\n    end\n    return ret * neg\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxivn4ul8.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxivn4ul8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, val in ipairs(arr) do\n        local\
    \ sign = val >= 0 and 1 or -1\n        sum = sum + math.abs(val)\n        prod\
    \ = prod * sign\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3sspyqm.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpg3sspyqm.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  if #arr == 0 then return nil end\n  for _, n in\
    \ ipairs(arr) do\n    if n < 0 then\n      prod = prod * -1\n      sum = sum +\
    \ n * -1\n    elseif n > 0 then\n      sum = sum + n\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_qxw8u4.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpz_qxw8u4.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local product = 1\n  for i = 1, #arr do\n    local sign = math.sign(arr[i])\n\
    \    if sign ~= 0 then\n      sum = sum + math.abs(arr[i])\n      product = product\
    \ * sign\n    end\n  end\n  return sum * product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplx41lacm.lua:13:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmplx41lacm.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmplx41lacm.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sum, prod = 0, 1\n  for _, v in ipairs(arr)\
    \ do\n    sum = sum + math.abs(v)\n    prod = prod * (v > 0 and 1 or (v < 0 and\
    \ -1 or 0))\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ new_arr = {}\n    local i = 1\n    for k, v in pairs(arr) do\n        if v <\
    \ 0 then\n            v = -v\n        end\n        new_arr[i] = v\n        i =\
    \ i + 1\n    end\n    if next(new_arr) == nil then\n        return nil\n    end\n\
    \    local res = 1\n    for k, v in pairs(arr) do\n        if v > 0 then\n   \
    \         res = res * 1\n        elseif v < 0 then\n            res = res * -1\n\
    \        else\n            res = res * 0\n        end\n    end\n    local sum\
    \ = 0\n    for k, v in pairs(new_arr) do\n        sum = sum + v\n    end\n   \
    \ return sum * res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqa6aosos.lua:16:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmpqa6aosos.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  if #arr == 0 then return nil end\n  for i = 1,\
    \ #arr do\n    if arr[i] > 0 then\n      prod = prod * 1\n      sum = sum + arr[i]\n\
    \    elseif arr[i] < 0 then\n      prod = prod * -1\n      sum = sum + arr[i]\
    \ * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ product, sum = 1, 0\n  for _, i in ipairs(arr) do\n    if i > 0 then\n     \
    \ product = product * 1\n      sum = sum + i\n    elseif i < 0 then\n      product\
    \ = product * -1\n      sum = sum + math.abs(i)\n    else\n      product = product\
    \ * 0\n    end\n  end\n  return sum * product\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrtqke4l.lua:31:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpbrtqke4l.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ product = 1\n  local sum = 0\n  for i, v in ipairs(arr) do\n    if v == 0 then\n\
    \      product = product * 0\n    elseif v > 0 then\n      product = product *\
    \ 1\n      sum = sum + v\n    else\n      product = product * -1\n      sum =\
    \ sum + math.abs(v)\n    end\n  end\n  if #arr == 0 then\n    return nil\n  else\n\
    \    return product * sum\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ not arr or #arr == 0 then\n        return nil\n    end\n    local prod = 1\n\
    \    local sum = 0\n    for _, v in ipairs(arr) do\n        local sign = v > 0\
    \ and 1 or v < 0 and -1 or 0\n        sum = sum + math.abs(v)\n        prod =\
    \ prod * sign\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    local sign = get_sign(v)\n\
    \    if sign ~= 0 then\n      prod = prod * sign\n    end\n    sum = sum + math.abs(v)\n\
    \  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt0h7k9ve.lua:13:\
    \ attempt to call a nil value (global 'get_sign')\nstack traceback:\n\t/tmp/tmpt0h7k9ve.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpt0h7k9ve.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyn11mp7l.lua:16:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmpyn11mp7l.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sum = 0\n  local pr = 1\n  for i, v in ipairs(arr)\
    \ do\n    local c = v\n    if c < 0 then\n      c = -c\n      pr = -pr\n    elseif\
    \ c == 0 then\n      pr = 0\n    end\n    sum = sum + c\n  end\n  return sum *\
    \ pr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ function prod(a, b)\n        if not a then return b end\n        if not b then\
    \ return a end\n        return a * b\n    end\n    local res = 0\n    for _, v\
    \ in ipairs(arr) do\n        if v > 0 then\n            res = res + v\n      \
    \  elseif v < 0 then\n            res = res - v\n        end\n    end\n    local\
    \ prod_res = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n      \
    \      prod_res = prod(prod_res, 1)\n        elseif v < 0 then\n            prod_res\
    \ = prod(prod_res, -1)\n        else\n            prod_res = prod(prod_res, 0)\n\
    \        end\n    end\n    return res * prod_res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnvo70_fx.lua:42:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpnvo70_fx.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, n in ipairs(arr) do\n        prod =\
    \ prod * (n > 0 and 1 or n < 0 and -1 or 0)\n        sum = sum + math.abs(n)\n\
    \    end\n    return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dyrfeuf.lua:25:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp4dyrfeuf.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + v\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptb95_lhm.lua:29:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmptb95_lhm.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum, prod = 0, 1\n    for _, n in ipairs(arr) do\n        if n > 0 then prod\
    \ = prod * 1\n        elseif n < 0 then prod = prod * -1\n        else prod =\
    \ prod * 0 end\n        sum = sum + math.abs(n)\n    end\n    return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3iivc7j.lua:26:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpb3iivc7j.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local product = 1\n  for i = 1, #arr do\n    if arr[i] == 0 then\n\
    \      product = 0\n      break\n    elseif arr[i] > 0 then\n      product = product\
    \ * 1\n    else\n      product = product * -1\n    end\n    sum = sum + math.abs(arr[i])\n\
    \  end\n  return product * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprzvf2_rl.lua:32:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmprzvf2_rl.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod, sum = 1, 0\n  for i,v in ipairs(arr) do\n    prod = prod * v/math.abs(v)\n\
    \    sum = sum + math.abs(v)\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwoas4z_f.lua:22:\
    \ expected: 0, actual: #NaN\nstack traceback:\n\t/tmp/tmpwoas4z_f.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ p, s = 1, 0\n  for i, v in ipairs(arr) do\n    if v == 0 then\n      p = 0\n\
    \    else\n      p = p * (v > 0 and 1 or -1)\n      s = s + math.abs(v)\n    end\n\
    \  end\n  return p ~= 0 and p * s or nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6kqfwtz.lua:26:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpc6kqfwtz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n\tif #arr\
    \ == 0 then return nil end\n\tlocal res = 1\n\tfor _, n in ipairs(arr) do\n\t\t\
    if n > 0 then\n\t\t\tres = res * n\n\t\telseif n < 0 then\n\t\t\tres = res * -n\n\
    \t\telse\n\t\t\tres = 0\n\t\t\tbreak\n\t\tend\n\tend\n\treturn res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyaolwt_r.lua:28:\
    \ expected: -9, actual: 16\nstack traceback:\n\t/tmp/tmpyaolwt_r.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ product = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        local\
    \ sign = math.sign(v)\n        if sign == 0 then\n            product = 0\n  \
    \      else\n            product = product * sign\n        end\n        sum =\
    \ sum + math.abs(v)\n    end\n    return product * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcq10tdkd.lua:13:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmpcq10tdkd.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpcq10tdkd.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ signs = {}\n  local magnitudes = {}\n  for _, n in ipairs(arr) do\n    if n\
    \ > 0 then\n      signs[#signs + 1] = 1\n      magnitudes[#magnitudes + 1] = n\n\
    \    elseif n < 0 then\n      signs[#signs + 1] = -1\n      magnitudes[#magnitudes\
    \ + 1] = -n\n    end\n  end\n  if #signs == 0 then\n    return nil\n  end\n  local\
    \ sign_prod = 1\n  for _, s in ipairs(signs) do\n    sign_prod = sign_prod * s\n\
    \  end\n  local magnitude_sum = 0\n  for _, m in ipairs(magnitudes) do\n    magnitude_sum\
    \ = magnitude_sum + m\n  end\n  return sign_prod * magnitude_sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphufwm032.lua:39:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmphufwm032.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local prod = 1\n    local sum = 0\n    for\
    \ _, v in ipairs(arr) do\n        prod = prod * (v >= 0 and 1 or v < 0 and -1\
    \ or 0)\n        sum = sum + math.abs(v)\n    end\n    return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrb9xdke.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplrb9xdke.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ result = 1\n  for i = 1, #arr do\n    local x = arr[i]\n    if x == 0 then\n\
    \      return 0\n    elseif x < 0 then\n      result = result * -1\n    end\n\
    \  end\n  for i = 1, #arr do\n    result = result * math.abs(arr[i])\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuavy61eu.lua:28:\
    \ expected: -9, actual: -16\nstack traceback:\n\t/tmp/tmpuavy61eu.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ not arr then return end\n    local sum, prod = 0, 1\n    for _, v in ipairs(arr)\
    \ do\n        sum = sum + math.abs(v)\n        if v > 0 then prod = prod * 1\n\
    \        elseif v < 0 then prod = prod * -1\n        end\n    end\n    return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppwf6zaa1.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmppwf6zaa1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ signs = {}\n  local sig = 1\n  for i = 1, #arr do\n    if arr[i] == 0 then\n\
    \      return 0\n    elseif arr[i] < 0 then\n      sig = -1\n    else\n      sig\
    \ = 1\n    end\n    table.insert(signs, sig)\n  end\n  if #arr == 0 then\n   \
    \ return nil\n  end\n  local prod = 1\n  for i = 1, #signs do\n    prod = prod\
    \ * signs[i]\n  end\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + math.abs(arr[i])\n\
    \  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ res = 1\n  local mag = 0\n  if not arr or not next(arr) then return nil end\n\
    \  for i, v in ipairs(arr) do\n    if v > 0 then\n      res = res * 1\n    elseif\
    \ v < 0 then\n      res = res * -1\n    else\n      res = res * 0\n    end\n \
    \   mag = mag + math.abs(v)\n  end\n  return res * mag\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _,v in ipairs(arr) do\n        if v ==\
    \ 0 then\n            prod = 0\n        elseif v > 0 then\n            prod =\
    \ prod\n        else\n            prod = -prod\n        end\n        sum = sum\
    \ + math.abs(v)\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbgmc_my.lua:31:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmprbgmc_my.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local r = 1\n    for _,v in ipairs(arr) do\n\
    \        r = r * (v == 0 and 0 or v/math.abs(v))\n    end\n    local r1 = 0\n\
    \    for _,v in ipairs(arr) do\n        r1 = r1 + math.abs(v)\n    end\n    return\
    \ r * r1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ p = 1\n    local s = 0\n    if #arr == 0 then\n        return nil\n    end\n\
    \    for i = 1, #arr do\n        if arr[i] > 0 then\n            p = p * 1\n \
    \           s = s + arr[i]\n        elseif arr[i] < 0 then\n            p = p\
    \ * -1\n            s = s + arr[i]\n        else\n            p = p * 0\n    \
    \        s = s + 0\n        end\n    end\n    return p * s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxirj007v.lua:33:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpxirj007v.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local magnitudes = 0\n    for i, v in ipairs(arr) do\n       \
    \ if v < 0 then\n            prod = prod * -1\n        elseif v == 0 then\n  \
    \          prod = 0\n        end\n        magnitudes = magnitudes + math.abs(v)\n\
    \    end\n    return magnitudes * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mo104ur.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp7mo104ur.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 0\n    local res = 0\n    for i = 1, #arr do\n        if arr[i] < 0 then\n\
    \            prod = prod - 1\n        elseif arr[i] > 0 then\n            prod\
    \ = prod + 1\n        end\n        res = res + math.abs(arr[i])\n    end\n   \
    \ return res * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18n0fd6r.lua:26:\
    \ expected: -9, actual: 18\nstack traceback:\n\t/tmp/tmp18n0fd6r.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, n in ipairs(arr) do\n        if n <\
    \ 0 then\n            prod = prod * -1\n        elseif n > 0 then\n          \
    \  sum = sum + n\n        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpilgrj8u4.lua:25:\
    \ expected: -9, actual: -5\nstack traceback:\n\t/tmp/tmpilgrj8u4.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if not\
    \ arr then return nil end\n  if not next(arr) then return nil end\n  local sum\
    \ = 0\n  local prod = 1\n  for _, i in ipairs(arr) do\n    if i > 0 then\n   \
    \   sum = sum + i\n    elseif i < 0 then\n      sum = sum - i\n      prod = prod\
    \ * -1\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfcjqacq.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqfcjqacq.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ not arr or #arr == 0 then\n        return nil\n    end\n    local prod, sum\
    \ = 1, 0\n    for _, num in ipairs(arr) do\n        if num < 0 then\n        \
    \    prod = prod * -1\n        elseif num > 0 then\n            sum = sum + num\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxuyv774e.lua:27:\
    \ expected: -9, actual: -5\nstack traceback:\n\t/tmp/tmpxuyv774e.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ not arr then return nil end\n    local prod = 1\n    local sum = 0\n    for\
    \ _, v in ipairs(arr) do\n        prod = prod * sign(v)\n        sum = sum + abs(v)\n\
    \    end\n    return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv38hqzof.lua:14:\
    \ attempt to call a nil value (global 'sign')\nstack traceback:\n\t/tmp/tmpv38hqzof.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpv38hqzof.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ res = 1\n  local sum = 0\n  if not arr then return end\n  for _, v in ipairs(arr)\
    \ do\n    local sign = 1\n    if v < 0 then sign = -1 end\n    if v == 0 then\
    \ sign = 0 end\n    sum = sum + math.abs(v)\n    res = res * sign\n  end\n  return\
    \ res * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjaqs04us.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpjaqs04us.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local prod = 1\n  local sum = 0\n  for _,v in ipairs(arr)\
    \ do\n    prod = prod * sign(v)\n    sum = sum + abs(v)\n  end\n  return prod\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp239nzcqt.lua:14:\
    \ attempt to call a nil value (global 'sign')\nstack traceback:\n\t/tmp/tmp239nzcqt.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp239nzcqt.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ result = 1\n  local sum = 0\n  for i = 1, #arr do\n    if arr[i] < 0 then\n\
    \      result = result * -1\n    elseif arr[i] > 0 then\n      result = result\
    \ * 1\n    else\n      result = result * 0\n    end\n    sum = sum + math.abs(arr[i])\n\
    \  end\n  return sum * result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfitq039l.lua:31:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpfitq039l.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ signs = {[1] = 1, [-1] = -1, [0] = 0}\n    local signs_product = 1\n    local\
    \ magnitudes_sum = 0\n    for _, v in ipairs(arr) do\n        magnitudes_sum =\
    \ magnitudes_sum + math.abs(v)\n        signs_product = signs_product * signs[v]\n\
    \    end\n    return magnitudes_sum * signs_product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxvdv3yzj.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpxvdv3yzj.lua:15: in local 'candidate'\n\t/tmp/tmpxvdv3yzj.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local prod = 1\n    local sum = 0\n    for\
    \ _, val in ipairs(arr) do\n        prod = prod * (val == 0 and 1 or val/math.abs(val))\n\
    \        sum = sum + math.abs(val)\n    end\n    return prod * sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3k_zkmni.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3k_zkmni.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n\tlocal\
    \ sum = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsrpa_fxj.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local prod, sum = 1, 0\n    for _, v in ipairs(arr)\
    \ do\n        prod = prod * (v == 0 and 1 or (v < 0 and -1 or 1))\n        sum\
    \ = sum + math.abs(v)\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzhczsj1x.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzhczsj1x.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum, prod = 0, 1\n    for i, v in ipairs(arr) do\n        local sign = ((v >\
    \ 0) and 1) or (v < 0 and -1) or 0\n        sum = sum + math.abs(v)\n        prod\
    \ = prod * sign\n    end\n    return (prod == 0) and 0 or sum * prod\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkq_a49v3.lua:25:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpkq_a49v3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local product = 1\n  local sum = 0\n  for _, v in\
    \ ipairs(arr) do\n    if v == 0 then return 0 end\n    product = product * (v\
    \ / math.abs(v))\n    sum = sum + math.abs(v)\n  end\n  return sum * product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local prod, sum = 1, 0\n    for _, x in ipairs(arr)\
    \ do\n        local sign = x > 0 and 1 or x < 0 and -1 or 0\n        prod = prod\
    \ * sign\n        sum = sum + math.abs(x)\n    end\n    return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if not\
    \ arr then return end\n  local sum = 0\n  local prod = 1\n  for i, n in ipairs(arr)\
    \ do\n    sum = sum + math.abs(n)\n    prod = prod * ((n > 0 and 1) or (n < 0\
    \ and -1) or 0)\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25unhj2y.lua:26:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp25unhj2y.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local prod = 1\n  local sum = 0\n  for i, v in ipairs(arr)\
    \ do\n    prod = prod * (v < 0 and -1 or (v > 0 and 1 or 0))\n    sum = sum +\
    \ math.abs(v)\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ res = nil\n  for i = 1, #arr do\n    if arr[i] ~= 0 then\n      local prod =\
    \ prod_signs(arr, i)\n      if prod == nil then prod = 1 end\n      res = prod\
    \ * math.abs(arr[i])\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoa0b3ahh.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpoa0b3ahh.lua:13: in upvalue 'prod_signs'\n\
    \t/tmp/tmpoa0b3ahh.lua:13: in upvalue 'prod_signs'\n\t/tmp/tmpoa0b3ahh.lua:13:\
    \ in upvalue 'prod_signs'\n\t/tmp/tmpoa0b3ahh.lua:13: in upvalue 'prod_signs'\n\
    \t/tmp/tmpoa0b3ahh.lua:13: in upvalue 'prod_signs'\n\t/tmp/tmpoa0b3ahh.lua:13:\
    \ in upvalue 'prod_signs'\n\t/tmp/tmpoa0b3ahh.lua:13: in upvalue 'prod_signs'\n\
    \t/tmp/tmpoa0b3ahh.lua:13: in upvalue 'prod_signs'\n\t/tmp/tmpoa0b3ahh.lua:13:\
    \ in upvalue 'prod_signs'\n\t...\n\t/tmp/tmpoa0b3ahh.lua:13: in local 'candidate'\n\
    \t/tmp/tmpoa0b3ahh.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.060\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sign, sum = 1, 0\n    for _, v in ipairs(arr) do\n        local abs = math.abs(v)\n\
    \        sign = sign * ((v > 0) and 1 or (v < 0) and -1 or 0)\n        sum = sum\
    \ + abs\n    end\n    return sign * sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6hvjtali.lua:25:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp6hvjtali.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ function sign(x)\n    if x > 0 then return 1\n    elseif x < 0 then return -1\n\
    \    else return 0 end\n  end\n  if #arr == 0 then return nil end\n  local sum\
    \ = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n\
    \    prod = prod * sign(v)\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for i = 1, #arr do\n    sum = sum + math.abs(arr[i])\n\
    \    prod = prod * (arr[i] == 0 and 1 or arr[i] / math.abs(arr[i]))\n  end\n \
    \ return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7mp05nd.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpg7mp05nd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ product = 1\n  local sum = 0\n  for _, num in ipairs(arr) do\n    product =\
    \ product * sign(num)\n    sum = sum + math.abs(num)\n  end\n  return product\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpldhksc8i.lua:13:\
    \ attempt to call a nil value (global 'sign')\nstack traceback:\n\t/tmp/tmpldhksc8i.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpldhksc8i.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v ==\
    \ 0 then\n            return 0\n        elseif v > 0 then\n            sum = sum\
    \ + v\n        else\n            sum = sum - v\n            prod = prod * -1\n\
    \        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjf6ve5w.lua:31:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmphjf6ve5w.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum, prod = 0, 1\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n\
    \            sum = sum - v\n            prod = prod * -1\n        end\n    end\n\
    \    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo__d0l3u.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpo__d0l3u.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ ps = 1\n    local mag = 0\n    for _, n in ipairs(arr) do\n        if n > 0\
    \ then\n            ps = ps\n        elseif n < 0 then\n            ps = ps *\
    \ -1\n        else\n            ps = 0\n            break\n        end\n     \
    \   mag = mag + math.abs(n)\n    end\n    return mag * ps\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjc9kl77h.lua:32:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpjc9kl77h.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local mult = 1\n  local sum = 0\n  for i,v in ipairs(arr)\
    \ do\n    mult = mult * sgn(v)\n    sum = sum + math.abs(v)\n  end\n  return mult\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaii2ln15.lua:14:\
    \ attempt to call a nil value (global 'sgn')\nstack traceback:\n\t/tmp/tmpaii2ln15.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpaii2ln15.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local n = 0\n    local s = 1\n    for _,\
    \ i in ipairs(arr) do\n        if i == 0 then\n            n = n + 1\n       \
    \ else\n            s = s * i\n        end\n    end\n    return math.pow(-1, n)\
    \ * math.abs(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv69xypt5.lua:26:\
    \ expected: -9, actual: 16\nstack traceback:\n\t/tmp/tmpv69xypt5.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local s = 1\n  local n = 0\n  for _, v in ipairs(arr)\
    \ do\n    s = s * math.sign(v)\n    n = n + math.abs(v)\n  end\n  return s * n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8xxo3ty1.lua:14:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmp8xxo3ty1.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp8xxo3ty1.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod, sum = 1, 0\n    for _, v in ipairs(arr) do\n        prod = prod * (v <\
    \ 0 and -1 or v > 0 and 1 or 0)\n        sum = sum + math.abs(v)\n    end\n  \
    \  return prod * sum == 0 and nil or prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_xr1vxm.lua:24:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpo_xr1vxm.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sum = 0\n  local prod = 1\n  for i = 1, #arr\
    \ do\n    local a = arr[i]\n    local sign = 0\n    if a == 0 then\n      sign\
    \ = 0\n    elseif a > 0 then\n      sign = 1\n    else\n      sign = -1\n    end\n\
    \    sum = sum + math.abs(a)\n    prod = prod * sign\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ signs = {}\n  local magnitudes = {}\n  for _, x in ipairs(arr) do\n    table.insert(signs,\
    \ x < 0 and -1 or x > 0 and 1 or 0)\n    table.insert(magnitudes, math.abs(x))\n\
    \  end\n  local sign_prod = foldl(function(a, b) return a * b end, 1, signs)\n\
    \  local mag_sum = foldl(function(a, b) return a + b end, 0, magnitudes)\n  return\
    \ sign_prod * mag_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpptb8g5ud.lua:16:\
    \ attempt to call a nil value (global 'foldl')\nstack traceback:\n\t/tmp/tmpptb8g5ud.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpptb8g5ud.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ signs = {}\n    local magnitude = 0\n    for _, num in ipairs(arr) do\n    \
    \    local sign = 0\n        if num > 0 then\n            sign = 1\n        elseif\
    \ num < 0 then\n            sign = -1\n        end\n        table.insert(signs,\
    \ sign)\n        magnitude = magnitude + math.abs(num)\n    end\n    local prod\
    \ = 1\n    for _, sign in ipairs(signs) do\n        prod = prod * sign\n    end\n\
    \    if prod == 0 then\n        return nil\n    end\n    return prod * magnitude\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvf0v73ra.lua:36:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpvf0v73ra.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    if not arr then return nil end\n    for _,\
    \ x in ipairs(arr) do\n        if x == 0 then\n            prod = 0\n        elseif\
    \ x > 0 then\n            prod = prod * 1\n        else\n            prod = prod\
    \ * -1\n        end\n        sum = sum + math.abs(x)\n    end\n    return prod\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1p_7me6.lua:32:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpi1p_7me6.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ result = 1\n    for _, i in ipairs(arr) do\n        if i == 0 then\n       \
    \     result = 0\n            break\n        elseif i < 0 then\n            result\
    \ = result * -1\n        end\n    end\n    local sum = 0\n    for _, i in ipairs(arr)\
    \ do\n        sum = sum + math.abs(i)\n    end\n    return result * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzjg4vi6.lua:32:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpyzjg4vi6.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    if #arr == 0 then\n        return nil\n   \
    \ end\n    for _, v in ipairs(arr) do\n        local sign = v > 0 and 1 or (v\
    \ < 0 and -1 or 0)\n        prod = prod * sign\n        sum = sum + math.abs(v)\n\
    \    end\n    return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    if #arr == 0 then\n        return nil\n   \
    \ end\n    for _, i in ipairs(arr) do\n        local sign = 1\n        if i ==\
    \ 0 then\n            sign = 0\n        elseif i < 0 then\n            sign =\
    \ -1\n        end\n        prod = prod * sign\n        sum = sum + math.abs(i)\n\
    \    end\n    return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n\tlocal\
    \ prod, sum = 1, 0\n\tfor _, x in ipairs(arr) do\n\t\tprod = prod * (x > 0 and\
    \ 1 or x < 0 and -1 or 0)\n\t\tsum = sum + math.abs(x)\n\tend\n\treturn prod ==\
    \ 0 and nil or prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32lj7t_g.lua:24:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp32lj7t_g.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ product = 1\n  local total = 0\n  if #arr == 0 then return nil end\n  for i,v\
    \ in ipairs(arr) do\n    if v > 0 then\n      product = product * 1\n      total\
    \ = total + v\n    elseif v < 0 then\n      product = product * -1\n      total\
    \ = total + (v * -1)\n    else\n      product = product * 0\n    end\n  end\n\
    \  return product * total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local s = 1\n  local p = 1\n  for _,v in ipairs(arr)\
    \ do\n    s = s + v\n    p = p * (v > 0 and 1 or v < 0 and -1 or 0)\n  end\n \
    \ return s * p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpelgu2fxo.lua:23:\
    \ expected: -9, actual: -2\nstack traceback:\n\t/tmp/tmpelgu2fxo.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ result = 1\n  for _, val in ipairs(arr) do\n    local sign = (val == 0) and\
    \ 0 or val / math.abs(val)\n    result = result * sign\n  end\n  local sum = 0\n\
    \  for _, val in ipairs(arr) do\n    sum = sum + math.abs(val)\n  end\n  return\
    \ result * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7m9lj57x.lua:28:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp7m9lj57x.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ magnitude = function(n) return n >= 0 and n or -n end\n  local signs = function(arr)\n\
    \    local result = 1\n    for _, v in ipairs(arr) do\n      if v < 0 then result\
    \ = result * -1 end\n    end\n    return result\n  end\n  local magnitudes = function(arr)\n\
    \    local result = 0\n    for _, v in ipairs(arr) do\n      result = result +\
    \ magnitude(v)\n    end\n    return result\n  end\n  return arr[1] and magnitudes(arr)\
    \ * signs(arr) or nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz7nygk76.lua:32:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpz7nygk76.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local prod = 1\n    local sum = 0\n    for\
    \ i, num in ipairs(arr) do\n        prod = prod * (num > 0 and 1 or num < 0 and\
    \ -1 or 0)\n        sum = sum + math.abs(num)\n    end\n    return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local product = 1\n  \
    \  for _,v in ipairs(arr) do\n        local num = v\n        if num < 0 then\n\
    \            num = -num\n            product = product * -1\n        elseif num\
    \ == 0 then\n            product = 0\n        end\n        sum = sum + num\n \
    \   end\n    return sum * product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ res = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      res = res +\
    \ v\n    elseif v < 0 then\n      res = res - v\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbxzjm52.lua:24:\
    \ expected: -9, actual: 9\nstack traceback:\n\t/tmp/tmpzbxzjm52.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local product = 1\n    if not arr then return nil end\n    for\
    \ _, val in ipairs(arr) do\n        sum = sum + math.abs(val)\n        if val\
    \ > 0 then\n            product = product * 1\n        elseif val < 0 then\n \
    \           product = product * -1\n        else\n            product = product\
    \ * 0\n        end\n    end\n    return sum * product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpken1cm_r.lua:32:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpken1cm_r.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sign = 1\n  local mag = 0\n  for i = 1, #arr do\n    if arr[i] == 0 then return\
    \ 0 end\n    if arr[i] < 0 then sign = sign * -1 end\n    mag = mag + math.abs(arr[i])\n\
    \  end\n  return sign * mag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr55hj3kr.lua:26:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpr55hj3kr.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    --\
    \ insert your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgswfvb_.lua:16:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmpvgswfvb_.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    --\
    \ (1) add code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppor6p284.lua:16:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmppor6p284.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sum, prod = 0, 1\n  for _,v in ipairs(arr)\
    \ do\n    sum = sum + math.abs(v)\n    if v < 0 then prod = prod * -1 end\n  end\n\
    \  return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4svgpfvc.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4svgpfvc.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if\
    \ n > 0 then\n      prod = prod * 1\n    elseif n < 0 then\n      prod = prod\
    \ * -1\n    else\n      prod = prod * 0\n    end\n    sum = sum + math.abs(n)\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpj65s6_.lua:32:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpfpj65s6_.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ product = 1\n    local sum = 0\n    for _, x in ipairs(arr) do\n        if x\
    \ == 0 then\n            product = 0\n        elseif x > 0 then\n            product\
    \ = product * 1\n        else\n            product = product * -1\n        end\n\
    \        sum = sum + math.abs(x)\n    end\n    return product * sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpki7x1dx8.lua:31:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpki7x1dx8.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n\tlocal\
    \ p, s = 1, 0\n\tfor _, v in ipairs(arr) do\n\t\tif v > 0 then\n\t\t\tp = p *\
    \ 1\n\t\telseif v < 0 then\n\t\t\tp = p * -1\n\t\telse\n\t\t\tp = 0\n\t\tend\n\
    \t\ts = s + math.abs(v)\n\tend\n\treturn p * s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgwoy03p.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpsgwoy03p.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ pr = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v > 0\
    \ then\n            pr = pr * 1\n            sum = sum + v\n        elseif v <\
    \ 0 then\n            pr = pr * -1\n            sum = sum + v\n        else\n\
    \            pr = pr * 0\n        end\n    end\n    return sum * pr\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpax9hbboe.lua:29:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpax9hbboe.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ res = 1\n  for _, x in ipairs(arr) do\n    res = res * (x > 0 and 1 or x < 0\
    \ and -1 or 0)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvewiev4q.lua:20:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpvewiev4q.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n\t-- returns\
    \ sign of a number\n\tlocal function sign(x)\n\t\tif x > 0 then\n\t\t\treturn\
    \ 1\n\t\telseif x < 0 then\n\t\t\treturn -1\n\t\telse\n\t\t\treturn 0\n\t\tend\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzgj1f6sg.lua:34: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        prod = prod * (v > 0 and 1 or (v < 0 and -1 or 0))\n\
    \    end\n    return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppovyhgx6.lua:25:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmppovyhgx6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
