name: HumanEval_23_strlen
language: lua
prompt: "-- Return length of given string\n-- >>> strlen('')\n-- 0\n-- >>> strlen('abc')\n\
  -- 3\nlocal function strlen(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strlen\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('x'), 1)\n\
  \    lu.assertEquals(candidate('asdasnakj'), 9)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return string.len(string)\nend", "    return #string\nend", "  local\
    \ count = 0\n  for c in string:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\"\
    ) do\n    count = count + 1\n  end\n  return count\nend", "    return #string\n\
    end", "  return #string\nend", "    return #string\nend", "    local _, count\
    \ = string:gsub(\"[^\\128-\\193]\", \"\")\n    return count\nend", "    local\
    \ len = 0\n    while string do\n        local c = string:sub(1, 1)\n        if\
    \ c == '\\n' then\n            len = len + 1\n        elseif not c:find('%c')\
    \ then\n            len = len + 1\n        end\n        string = string:sub(2)\n\
    \    end\n    return len\nend", "  local count = 0\n  for i in string:gmatch('.')\
    \ do\n    count = count + 1\n  end\n  return count\nend", "    local str_index\
    \ = string:gmatch(\".\")\n    local index = 0\n    for _ in str_index do\n   \
    \     index = index + 1\n    end\n    return index\nend", "  local len = 0\n \
    \ for k, v in pairs(string) do\n    len = len + 1\n  end\n  return len\nend",
  "  local length = 0\n  for _ in string:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\\
    191]*\") do\n    length = length + 1\n  end\n  return length\nend", "  return\
    \ string.len(string)\nend", "  local _, count = string:gsub('.', '')\n  return\
    \ count\nend", "  return #string\nend", "  return (string.gsub(string, \"[^\\\
    128-\\193]\", \"\")):len()\nend", "    return #string\nend", "    return #string\n\
    end", "  return #string\nend", "    return #string\nend", "  local i = 0\n  for\
    \ _ in string:gmatch('') do\n    i = i + 1\n  end\n  return i\nend", "    local\
    \ i = 0\n    while string[i] do\n        i = i + 1\n    end\n    return i\nend",
  "  return #string\nend", "  return string:len()\nend", "    return string:len()\n\
    end", "  local length = 0\n  for _ in string:gmatch('') do\n    length = length\
    \ + 1\n  end\n  return length\nend", "    return #string\nend", "    local string\
    \ = string or ''\n    return #string\nend", "  return #string\nend", "  local\
    \ result = 0\n  for _ in string:gmatch('.') do\n    result = result + 1\n  end\n\
    \  return result\nend", "    return string.len(string)\nend", "    return #string\n\
    end", "  return #string\nend", "  return utf8len(string)\nend", "  return #string\n\
    end", "    return #string\nend", "  return #string\nend", "    return #string\n\
    end", "  return #string\nend", "  return string.len(string)\nend", "    return\
    \ #string\nend", "    if not string then return 0 end\n    return string.len(string)\n\
    end", "  return #string\nend", "  return #string\nend", "  local i = 0\n  while\
    \ string:sub(i+1, i+1) do\n    i = i + 1\n  end\n  return i\nend", "    return\
    \ string:len()\nend", "    local count = 0\n    for i in string:gmatch('.') do\n\
    \        count = count + 1\n    end\n    return count\nend", "  return string:len()\n\
    end", "    return string:len()\nend", "    local len = 0\n    for i = 1, #string\
    \ do\n        len = len + 1\n    end\n    return len\nend", "  return #string\n\
    end", "  return #string\nend", "  return string:len()\nend", "  local length =\
    \ 0\n  local t = type(string)\n  if t == 'string' or t == 'table' then\n    for\
    \ i = 1, 100 do\n      if string[i] == nil then\n        return length\n     \
    \ end\n      length = length + 1\n    end\n  end\n  return length\nend", "   \
    \ return select(2, utf8.find(string, '.*'))\nend", "  local i = 0\n  while string:sub(i+1,\
    \ i+1) do\n    i = i + 1\n  end\n  return i\nend", "  local length = 0\n  for\
    \ i = 1, #string do\n    length = length + 1\n  end\n  return length\nend", " \
    \   return #string\nend", "  local _, count = string:gsub('[^\\128-\\193]', '')\n\
    \  return count\nend", "  local count = 0\n  for _ in string:gmatch('.') do\n\
    \    count = count + 1\n  end\n  return count\nend", "    local len = #string\n\
    \    return len\nend", "    -- \u6CE8\u610F\uFF1A\u8BA1\u7B97\u5B57\u7B26\u4E32\
    \u957F\u5EA6\u4E0D\u662F strlen(str)\n    return #string\nend", "    return select(2,\
    \ string:gsub('()', ''))\nend", "    local _, count = string:gsub(\"[^\\128-\\\
    193]\", \"\")\n    return count\nend", "    return string:len()\nend", "  return\
    \ #string\nend", "  return #string\nend", "  if type(string) ~= 'string' then\n\
    \    error('invalid input: must be string')\n  end\n  local _, count = string:gsub('[^\\\
    128-\\193]', '')\n  return count\nend", "  return #string\nend", "    return #string\n\
    end", "  local len = 0\n  for i = 1, #string do\n    len = len + 1\n  end\n  return\
    \ len\nend", "    return #string\nend", "    local count = 0\n    for i = 1, string.len(string)\
    \ do\n        count = count + 1\n    end\n    return count\nend", "    local size\
    \ = 0\n    for i = 1, #string do\n        if string:sub(i, i) ~= '\\0' then\n\
    \            size = size + 1\n        end\n    end\n    return size\nend", " \
    \ if string == nil then\n    return 0\n  end\n  return string.len(string)\nend",
  "    return #string\nend", "    if string == nil then\n        return 0\n    end\n\
    \    return string.len(string)\nend", "  return string:len()\nend", "  local _,\
    \ count = string:gsub(\"[^\\128-\\193]\", \"\")\n  return count\nend", "  local\
    \ n = 0\n  for i = 1, #string do\n    n = n + 1\n  end\n  return n\nend", "  \
    \  local len = 0\n    for i = 1, #string do\n        len = len + 1\n    end\n\
    \    return len\nend", "    local length = 0\n    for _ in string:gmatch('.')\
    \ do\n        length = length + 1\n    end\n    return length\nend", "  local\
    \ _, count = string:gsub(\".\", \"\")\n  return count\nend", "    local _, length\
    \ = string:gsub('[^\\128-\\193]', '')\n    return length\nend", "  local pos =\
    \ 1\n  local bytes = string:len()\n  local length = 0", "    local i = 0\n   \
    \ for _ in string:gmatch('.') do\n        i = i + 1\n    end\n    return i\nend",
  "    return #string\nend", "    local _, length = string:gsub('[^\\128-\\193]',\
    \ '')\n    return length\nend", "  local _, length = string:gsub(\"[^\\128-\\\
    193]\", \"\")\n  return length\nend", "    return select(2, string:gsub('[^\\\
    0]+', ''))\nend", "  return #string\nend", "    local count = 0\n    for i = 1,\
    \ #string do\n        count = count + 1\n    end\n    return count\nend", "  local\
    \ count = 0\n  for i = 1, #string do\n    count = count + 1\n  end\n  return count\n\
    end", "  return string:len()\nend", "  if string == nil then\n    return 0\n \
    \ end\n  local _, count = string:gsub(\"[^\\128-\\193]\", \"\")\n  return count\n\
    end", "  return tostring(string):len()\nend", "  return #string\nend", "  return\
    \ #string\nend", "  local i = 0\n  for k in string:gmatch('.') do\n    i = i +\
    \ 1\n  end\n  return i\nend", "  return #string\nend", "    local length = 0\n\
    \    for _ in string:gmatch('[^\\z]') do\n        length = length + 1\n    end\n\
    \    return length\nend", "    return #string\nend", "    local length = 0\n \
    \   for _ in string:gmatch('[%z\\1-\\127\\194-\\244][\\128-\\191]*') do\n    \
    \    length = length + 1\n    end\n    return length\nend", "    local _, length\
    \ = string:gsub('[^\\128-\\193]', '')\n    return length\nend", "    return tostring(string):len()\n\
    end", "  return #string\nend", "  return string:len()\nend", "  return #string\n\
    end", "    local len = 0\n    for _ in string:gmatch('.') do\n        len = len\
    \ + 1\n    end\n    return len\nend", "    return #string\nend", "  return #string\n\
    end", "    local i = 0\n    while string[i + 1] do\n        i = i + 1\n    end\n\
    \    return i\nend", "    return #string\nend", "  return (string.gsub(string,\
    \ '.*', ''))\nend", "  return string.len(string)\nend", "  return #string\nend",
  "  return #string\nend", "  return #string\nend", "  return #string\nend", "   \
    \ return #string\nend", "    return strlen(string)\nend", "  return #string\n\
    end", "    local len = 0\n    while string do\n        len = len + 1\n       \
    \ string = string.sub(string, 2)\n    end\n    return len\nend", "    return #string\n\
    end", "  local _, count = string:gsub(\".\", \"\")\n  return count\nend", "  local\
    \ count = 0\n  while string:byte(count + 1) do\n    count = count + 1\n  end\n\
    \  return count\nend", "    return #string\nend", "  return #string\nend", " \
    \ local length = 0\n  for byte in string:gmatch('.') do\n    length = length +\
    \ 1\n  end\n  return length\nend", "  return #string\nend", "  return #string\n\
    end", "  local i = 0\n  while string:sub(i + 1, i + 1) do\n    i = i + 1\n  end\n\
    \  return i\nend", "    local rawlen = #string\n    local lentbl = {}\n    for\
    \ i = 1, rawlen do\n        lentbl[i] = string.byte(string, i)\n    end\n    return\
    \ #lentbl\nend", "  return #string\nend", "    return (string.len(string))\nend",
  "  return string.len(string)\nend\nM.strlen = strlen", "    return #string\nend",
  "  local _, length = string:gsub(\"[^\\128-\\193]\", \"\")\n  return length\nend",
  "  local count = 0\n  for i = 1, #string do\n    count = count + 1\n  end\n  return\
    \ count\nend", "    local _, length = string:gsub('[^\\128-\\193]', '')\n    return\
    \ length\nend", "    local size = 0\n    for _ in string:gmatch(\"[%z\\1-\\127\\\
    194-\\244][\\128-\\191]*\") do\n        size = size + 1\n    end\n    return size\n\
    end", "  local i = 0\n  for _ in string:gmatch('') do\n    i = i + 1\n  end\n\
    \  return i\nend", "    return #string\nend", "  local _, count = string:gsub('[^\\\
    128-\\193]', '')\n  return count\nend", "    local i = 0\n    for _ in string:gmatch('.')\
    \ do\n        i = i + 1\n    end\n    return i\nend", "  local i = 0\n  while\
    \ string[i] do\n    i = i + 1\n  end\n  return i\nend", "    local i = 0\n   \
    \ while string[i] do\n        i = i + 1\n    end\n    return i\nend", "  local\
    \ len = #string\n  local left = len % 4\n  local iterations = (len - left) / 4\n\
    \  local a, b, c, d = 0, 0, 0, 0\n  for i = 1, iterations do\n    a, b, c, d =\
    \ string:byte(i * 4 - 3, i * 4)\n    len = len + 1 - ((a * 8 + b) % 2 + (c * 8\
    \ + d) % 3)\n  end\n  if left == 3 then\n    a, b, c = string:byte(iterations\
    \ * 4 + 1, iterations * 4 + 3)\n    len = len + 1 - ((a * 8 + b) % 2 + c % 3)\n\
    \  elseif left == 2 then\n    a, b = string:byte(iterations * 4 + 1, iterations\
    \ * 4 + 2)\n    len = len + 1 - (a * 8 + b) % 2\n  elseif left == 1 then\n   \
    \ len = len + 1 - string:byte(iterations * 4 + 1) % 2\n  end\n  return len\nend",
  "    return #string\nend", "    return #string\nend", "    -- ensure input is a\
    \ string\n    local type = type(string)\n    if type ~= 'string' then\n      \
    \  error('Expected string, got ' .. type, 2)\n    end", "  return #string\nend",
  "    return #string\nend", "  return #string\nend", "  return #string\nend", " \
    \ return #string\nend", "  return #string\nend", "  local i = 0\n  while string[i\
    \ + 1] do\n    i = i + 1\n  end\n  return i\nend", "  local _, len = string:gsub(\"\
    [^\\128-\\193]\", \"\")\n  return len\nend", "  return string.len(string)\nend",
  "  local len = 0\n  for i = 1, #string do\n    len = len + 1\n  end\n  return len\n\
    end", "  return #string\nend", "    local _, length = string:gsub('[^\\128-\\\
    193]', '')\n    return length\nend", "  return #string\nend", "  return #string\n\
    end", "  return #string\nend", "    local len = 0\n    for i = 1, #string do\n\
    \        len = len + 1\n    end\n    return len\nend", "  local counter = 0\n\
    \  for i = 1, #string do\n    counter = counter + 1\n  end\n  return counter\n\
    end", "  local i = 0\n  for _ in string:gmatch('.') do\n    i = i + 1\n  end\n\
    \  return i\nend", "    return string.len(string)\nend", "  return #string\nend",
  "  return #string\nend", "  local len = 0\n  while string[len + 1] do\n    len =\
    \ len + 1\n  end\n  return len\nend", "  local _, count = string:gsub(\".\", \"\
    \")\n  return count\nend", "  return #string\nend", "  return string:len()\nend",
  "  return #string\nend", "  return #string\nend", "  if string then\n    return\
    \ string.len(string)\n  else\n    return 0\n  end\nend", "    local i = 0\n  \
    \  while string[i] do\n        i = i + 1\n    end\n    return i\nend", "  return\
    \ #string\nend", "    return #string\nend", "  local i = 0\n  while string[i]\
    \ do\n    i = i + 1\n  end\n  return i\nend", "    -- We use utf8 library to handle\
    \ unicode characters.\n    return utf8.len(string)\nend", "  local i = 0\n  for\
    \ _ in string:gmatch('.') do\n    i = i + 1\n  end\n  return i\nend", "  return\
    \ string.len(string)\nend", "    return #string\nend", "  return select(2, string:gsub(\"\
    [^\\128-\\193]\", \"\"))\nend", "    return #string\nend", "  return #string\n\
    end", "    local _, result = string.gsub(string, '[^\\128-\\193]', '')\n    return\
    \ result\nend", "    local len = 0\n    for _ in string:gmatch('.') do\n     \
    \   len = len + 1\n    end\n    return len\nend", "  return #string\nend", " \
    \   return #string\nend", "  return #string\nend", "    return #string\nend",
  "  return #string\nend", "    if type(string) ~= 'string' then\n        error('bad\
    \ argument #1 to strlen (string expected, got ' .. type(string) .. ')')\n    end\n\
    \    local _, count = string:gsub('[^\\128-\\193]', '')\n    return count\nend",
  "    return #string\nend", "    return #string\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
