name: HumanEval_86_anti_shuffle
language: lua
prompt: "-- Write a function that takes a string and returns an ordered version of\
  \ it.\n-- Ordered version of string, is a string where all words (separated by space)\n\
  -- are replaced by a new word where all the characters arranged in\n-- ascending\
  \ order based on ascii value.\n-- Note: You should keep the order of words and blank\
  \ spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi') returns 'Hi'\n\
  -- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello World!!!') returns\
  \ 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
  \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
  \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
  \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My name\
  \ is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local t = {}\n  for i = 1, #s do\n    local c = s:sub(i, i)\n   \
    \ if c == ' ' then\n      t[#t + 1] = ' '\n    else\n      if not t[#t] then\n\
    \        t[#t + 1] = c\n      else\n        local n = t[#t]\n        local nv\
    \ = n:byte()\n        local cv = c:byte()\n        if nv < cv then\n         \
    \ t[#t + 1] = c\n        else\n          table.insert(t, #t, c)\n        end\n\
    \      end\n    end\n  end\n  return table.concat(t)\nend", end, "  return s\n\
    end", "    local ss = {}\n    for w in s:gmatch('%S+') do\n        local ww =\
    \ {}\n        for c in w:gmatch('.') do\n            table.insert(ww, c)\n   \
    \     end\n        table.sort(ww)\n        table.insert(ss, table.concat(ww))\n\
    \    end\n    return table.concat(ss, ' ')\nend", "  -- body\nend", "    local\
    \ result = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(result,\
    \ word:gsub(\".\", function(char)\n            local sorted = {}\n           \
    \ for i=1, #word do\n                table.insert(sorted, word:sub(i, i))\n  \
    \          end\n            table.sort(sorted)\n            return table.concat(sorted)\n\
    \        end))\n    end\n    return table.concat(result, \" \")\nend", "  -- Implement\
    \ your solution here\nend", "    local result = {}\n    for word in s:gmatch('%S+')\
    \ do\n        local chars = {}\n        for char in word:gmatch('.') do\n    \
    \        table.insert(chars, char)\n        end\n        table.sort(chars)\n \
    \       table.insert(result, table.concat(chars))\n    end\n    return table.concat(result,\
    \ ' ')\nend", "    local result = \"\"\n    local arr = string.split(s, \" \"\
    )\n    for _, word in ipairs(arr) do\n        table.sort(word)\n        result\
    \ = result .. word\n    end\n    return result\nend", "  local ret_tbl = {}\n\
    \  local ret_str = ''\n  for word in s:gmatch('%w+') do\n    ret_tbl[#ret_tbl\
    \ + 1] = word:gsub('.', function(l) return ' ' .. l end)\n  end\n  for _, val\
    \ in ipairs(ret_tbl) do\n    ret_str = ret_str .. table.concat(t_sort(val:sub(2,\
    \ -1):gmatch('.')))\n  end\n  return ret_str\nend\nprint(anti_shuffle('Hello World!!!'))\
    \ -- Hello !!!Wdlor", "  local ordered = \"\"\n  local words = {}\n  for w in\
    \ s:gmatch(\"%S+\") do\n    local chars = {}\n    for c in w:gmatch(\".\") do\n\
    \      table.insert(chars, c)\n    end\n    table.sort(chars)\n    local sorted\
    \ = table.concat(chars)\n    table.insert(words, sorted)\n  end\n  ordered = table.concat(words,\
    \ \" \")\n  return ordered\nend", "    local t = {}\n    for word in s:gmatch('%S+')\
    \ do\n        local t_new = {}\n        for c in word:gmatch('.') do\n       \
    \     table.insert(t_new, c)\n        end\n        table.sort(t_new)\n       \
    \ table.insert(t, table.concat(t_new))\n    end\n    return table.concat(t, '\
    \ ')\nend", "  local words = {}\n  local word = {}\n  for i = 1, #s do\n    if\
    \ s:sub(i, i) == ' ' then\n      table.insert(words, table.concat(word))\n   \
    \   word = {}\n    else\n      table.insert(word, s:sub(i, i))\n    end\n  end\n\
    \  table.insert(words, table.concat(word))\n  word = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local chars = {}\n    for j = 1, #word do\n  \
    \    table.insert(chars, word:sub(j, j))\n    end\n    table.sort(chars)\n   \
    \ words[i] = table.concat(chars)\n  end\n  return table.concat(words)\nend", " \
    \   s = s:gsub(\"%w+\", function(w) return string.gsub(w, \"(.)\", function(char)\
    \ return char end) end)\n    return s\nend", "\tlocal words = {}\n\tfor i in string.gmatch(s,\
    \ \"%S+\") do table.insert(words, i) end\n\tlocal o = {}\n\tfor _, w in ipairs(words)\
    \ do\n\t\tlocal l = {}\n\t\tfor c in string.gmatch(w, \".\") do table.insert(l,\
    \ c) end\n\t\ttable.sort(l)\n\t\ttable.insert(o, table.concat(l))\n\tend\n\treturn\
    \ table.concat(o, \" \")\nend", "    assert(type(s) == 'string')\n    return s\n\
    end", "  local str = ''\n  for word in s:gmatch('%S+') do\n    str = str .. '\
    \ ' .. anti_shuffle_word(word)\n  end\n  return str:sub(2)\nend", "  local t =\
    \ {}\n  for word in s:gmatch(\"%S+\") do\n    local t2 = {}\n    for c in word:gmatch(\"\
    .\") do\n      table.insert(t2, c)\n    end\n    table.sort(t2)\n    table.insert(t,\
    \ table.concat(t2))\n  end\n  return table.concat(t, \" \")\nend", "  local function\
    \ sortString(w)\n    local t = {}\n    for i = 1, #w do\n      table.insert(t,\
    \ w:sub(i, i))\n    end\n    table.sort(t)\n    return table.concat(t)\n  end\n\
    \  local t = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(t, sortString(w))\n\
    \  end\n  for b in s:gmatch(\"%s+\") do\n    table.insert(t, b)\n  end\n  return\
    \ table.concat(t)\nend", "\t--[[\n\t\tAuxiliar functions\n\t--]]\n\t-- sort a\
    \ string, using ascii values\n\tlocal function sort(s)\n\t\t--[[\n\t\t\tAuxiliar\
    \ functions\n\t\t--]]\n\t\t-- Sorts a table of characters based on their ascii\
    \ value\n\t\tlocal function sort_table(t)\n\t\t\tfor j = 1, #t do\n\t\t\t\tfor\
    \ i = 1, #t - 1 do\n\t\t\t\t\tif t[i] > t[i + 1] then\n\t\t\t\t\t\tt[i], t[i +\
    \ 1] = t[i + 1], t[i]\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t--\
    \ end of auxiliar functions\n\t\tlocal t = {}\n\t\tlocal sorted = \"\"\n\t\tfor\
    \ i = 1, #s do\n\t\t\ttable.insert(t, s:sub(i, i))\n\t\tend\n\t\tsort_table(t)\n\
    \t\tfor i = 1, #t do\n\t\t\tsorted = sorted .. t[i]\n\t\tend\n\t\treturn sorted\n\
    \tend\n\t-- divides a string in words (separeted by spaces)\n\tlocal function\
    \ divide_words(s)\n\t\tlocal words = {}\n\t\tfor word in s:gmatch(\"%S+\") do\n\
    \t\t\ttable.insert(words, word)\n\t\tend\n\t\treturn words\n\tend\n\t-- end of\
    \ auxiliar functions\n\tlocal anti_shuffled = \"\"\n\tlocal words = divide_words(s)\n\
    \tfor i = 1, #words do\n\t\tanti_shuffled = anti_shuffled .. sort(words[i]) ..\
    \ \" \"\n\tend\n\treturn anti_shuffled:sub(1, #anti_shuffled - 1)\nend", end,
  "    if s == '' then\n        return ''\n    end\n    -- separate the string by\
    \ space and store them in a table\n    local words = split(s)\n    local result\
    \ = {}\n    for _, v in ipairs(words) do\n        -- add the new string to the\
    \ table\n        table.insert(result, sort_chars(v))\n    end\n    -- concatenate\
    \ all elements in table separated by space\n    return table.concat(result, '\
    \ ')\nend", "\tlocal table = s:split(\" \")\n\tfor k,v in pairs(table) do\n\t\t\
    table[k] = v:gsub(\"(.)\", function(c) return table.concat(c:match(\"(.)\"),\"\
    \",function(a,b) return a:byte() < b:byte() end) end)\n\tend\n\treturn table.concat(table,\"\
    \ \")\nend", "  local t = {}\n  local s2 = \"\"\n  -- write your code here\n \
    \ for w in string.gmatch(s, \"%S+\") do\n    table.insert(t, w)\n  end\n  for\
    \ i = 1, #t do\n    local str = t[i]\n    str = string.lower(str)\n    local t1\
    \ = {}\n    for c in string.gmatch(str, \"%a\") do\n      table.insert(t1, c)\n\
    \    end\n    table.sort(t1)\n    local str2 = table.concat(t1)\n    str2 = string.upper(str2)\n\
    \    s2 = s2 .. str2 .. \" \"\n  end\n  return s2\nend", "    return (s:gsub(\"\
    %w+\", function(word)\n        return table.concat(word:gmatch(\".\"):sort())\n\
    \    end))\nend", "\ts = s:gsub(\"%s\", \"  \")\n\ts = s:gsub(\"(%w+)\", function(n)\
    \ return n:gsub(\".\", \"%1\"):reverse() end)\n\treturn s\nend", "    -- your\
    \ code here\nend", "    local words = {}\n    local sorted = {}\n    for word\
    \ in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    for\
    \ i = 1, #words do\n        table.insert(sorted, table.concat(str_sort(words[i]),\
    \ \"\"))\n    end\n    return table.concat(sorted, \" \")\nend", "    return s\n\
    end", "  return s\nend", "  -- My code here\nend", "    -- write your code here\n\
    end", "  local result = \"\"\n  for word in s:gmatch(\"%S+\") do\n    local tmp\
    \ = \"\"\n    for c in word:gmatch(\".\") do\n      tmp = tmp .. c\n    end\n\
    \    table.sort(tmp)\n    result = result .. tmp\n  end\n  return result\nend",
  "  local words = {}\n  local sorted_words = {}\n  local index = 1\n  for word in\
    \ string.gmatch(s, \"%S+\") do\n    words[index] = word\n    index = index + 1\n\
    \  end\n  for i = 1, #words do\n    local chars = {}\n    local index = 1\n  \
    \  for char in string.gmatch(words[i], \".\") do\n      chars[index] = char\n\
    \      index = index + 1\n    end\n    table.sort(chars)\n    local sorted_word\
    \ = table.concat(chars)\n    sorted_words[i] = sorted_word\n  end\n  local final_string\
    \ = table.concat(sorted_words, \" \")\n  return final_string\nend", "    local\
    \ c = {}\n    local t = s:gmatch('%w+')\n    local r = ''\n    for i in t do\n\
    \        table.insert(c, i)\n    end\n    for k, v in pairs(c) do\n        table.sort(v:gmatch('.'))\n\
    \        for _, char in pairs(v:gmatch('.')) do\n            r = r .. char\n \
    \       end\n        r = r .. ' '\n    end\n    return r\nend", "  return table.concat(fun.map(function(w)\n\
    \    local t = fun.totable(w)\n    table.sort(t)\n    return table.concat(t)\n\
    \  end, fun.iter(s:gmatch('%S+'))), ' ')\nend", "  local arr = string.split(s,\
    \ \" \")\n  local ret = \"\"\n  for k, v in pairs(arr) do\n    ret = ret .. \"\
    \ \" .. char_sort(v)\n  end\n  return string.sub(ret, 2)\nend", "    local new_words\
    \ = {}\n    for word in s:gmatch(\"%S+\") do\n        local sorted_word = {}\n\
    \        for char in word:gmatch(\".\") do\n            sorted_word[#sorted_word\
    \ + 1] = char\n        end\n        table.sort(sorted_word)\n        new_words[#new_words\
    \ + 1] = table.concat(sorted_word)\n    end\n    return table.concat(new_words,\
    \ \" \")\nend", "  local function tbl_sort(tbl)\n    local a, b = {}, {}\n   \
    \ for _, v in ipairs(tbl) do\n      table.insert(a, v)\n    end\n    for i = 2,\
    \ #a do\n      local val = a[i]\n      j = i - 1\n      while j > 0 and a[j] >\
    \ val do\n        a[j + 1] = a[j]\n        j = j - 1\n      end\n      a[j + 1]\
    \ = val\n    end\n    return a\n  end\n  local result = ''\n  for word in s:gmatch('%w+')\
    \ do\n    local a = {}\n    for ch in word:gmatch('.') do\n      table.insert(a,\
    \ ch)\n    end\n    word = table.concat(tbl_sort(a))\n    result = result .. word\n\
    \  end\n  return result\nend", "  -- TODO: implement function\nend", "  if s ==\
    \ '' then return '' end\n  local r = {}\n  local d = {}\n  for w in s:gmatch(\"\
    %S+\") do\n    local t = {}\n    for c in w:gmatch(\".\") do\n      t[#t+1] =\
    \ c\n    end\n    table.sort(t)\n    d[#d+1] = table.concat(t)\n  end\n  for w\
    \ in s:gmatch(\"%S+\") do\n    r[#r+1] = d[1]\n    table.remove(d, 1)\n  end\n\
    \  for w in s:gmatch(\"%s+\") do\n    r[#r+1] = w\n  end\n  return table.concat(r)\n\
    end", "    -- Your code here\nend", "  -- TODO: Implement this function!\nend",
  end, "  -- You can use string.find, string.lower, string.match and string.sub here\n\
    \  -- string.find(s, pattern, init, plain)\n  -- string.lower(s)\n  -- string.match(s,\
    \ pattern, init)\n  -- string.sub(s, i, j)\n  -- Type \"man string\" for more\
    \ information\n  --return 'Hi'\n  --return 'ehllo'\n  --return 'Hello !!!Wdlor'\n\
    \  local res = \"\"\n  local idx = 1\n  while idx <= #s do\n    local nidx = string.find(s,\
    \ \"%s\", idx)\n    if nidx == nil then\n      res = res .. anti_shuffle_word(string.sub(s,\
    \ idx))\n      idx = #s + 1\n    else\n      res = res .. anti_shuffle_word(string.sub(s,\
    \ idx, nidx - 1)) .. \" \"\n      idx = nidx + 1\n    end\n  end\n  return res\n\
    end", "  -- TODO: Write code here\nend", "  local function ascii_sort(a, b)\n\
    \    return a:byte() < b:byte()\n  end\n  return s:gsub('%S+', function(w)\n \
    \   return table.concat(table.sort(utils.split(w, ''), ascii_sort))\n  end)\n\
    end", "  local s0 = s:gsub('%w+', function(word)\n    local chars = {}\n    for\
    \ char in word:gmatch('.') do\n      table.insert(chars, char)\n    end\n    table.sort(chars)\n\
    \    return table.concat(chars)\n  end)\n  return s0\nend", "  local words, ans\
    \ = {}, ''\n  for word in s:gmatch('%S+') do\n    table.insert(words, word)\n\
    \  end\n  for i = 1, #words do\n    local word = words[i]\n    local arr = {}\n\
    \    for j = 1, #word do\n      table.insert(arr, word:sub(j, j))\n    end\n \
    \   table.sort(arr)\n    ans = ans .. table.concat(arr)\n    if i ~= #words then\n\
    \      ans = ans .. ' '\n    end\n  end\n  return ans\nend", "  return s:gsub('%S+',\
    \ function(w) return w:gsub('.', function(c) return string.char(string.byte(c)\
    \ + 1) end) end)\nend", "  -- code here\nend", "  local sorted, words = {}, {};\n\
    \  for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word;\n  end\n  for\
    \ i, word in ipairs(words) do\n    local chars = {};\n    for i = 1, word:len()\
    \ do\n      chars[#chars + 1] = word:sub(i, i);\n    end\n    table.sort(chars);\n\
    \    sorted[#sorted + 1] = table.concat(chars);\n  end\n  return table.concat(sorted,\
    \ \" \");\nend", "  -- your code here\nend", "    local words = {}\n    local\
    \ str = ''\n    local len = 0\n    for w in s:gmatch('%S+') do\n        table.insert(words,\
    \ w)\n        len = len + 1\n    end\n    for i = 1, len do\n        local word\
    \ = words[i]\n        local char_table = {}\n        for c in word:gmatch('.')\
    \ do\n            table.insert(char_table, c)\n        end\n        table.sort(char_table)\n\
    \        local new_word = ''\n        for i = 1, #char_table do\n            new_word\
    \ = new_word .. char_table[i]\n        end\n        str = str .. new_word .. '\
    \ '\n    end\n    return str\nend", "    local words = string.split(s, ' ')\n\
    \    local result = {}\n    for i, v in ipairs(words) do\n        table.insert(result,\
    \ sort_by_ascii(v))\n    end\n    return table.concat(result, ' ')\nend", "  --\
    \ write your code here\nend", "    local str = {}\n    for w in s:gmatch('%S+')\
    \ do\n        local chars = {}\n        for c in w:gmatch('.') do\n          \
    \  chars[#chars + 1] = c\n        end\n        table.sort(chars)\n        str[#str\
    \ + 1] = table.concat(chars)\n    end\n    return table.concat(str, ' ')\nend",
  "\ts = string.gsub(s, \"%S+\",\n\t\tfunction(word)\n\t\t\tlocal chars = {}\n\t\t\
    \tfor i = 1, #word do\n\t\t\t\tchars[i] = word:sub(i, i)\n\t\t\tend\n\t\t\ttable.sort(chars)\n\
    \t\t\treturn table.concat(chars)\n\t\tend)\n\treturn s\nend", "  -- TODO: implement\
    \ this function\nend", "  return s:gsub(\"%w+\", function(s) return s:gsub(\"\
    .\", \"%1\"):sort() end)\nend", "    s = s:gsub(\"%a+\", function(word)\n    \
    \    local t = {}\n        for c in word:gmatch(\".\") do\n            table.insert(t,\
    \ c)\n        end\n        table.sort(t)\n        return table.concat(t)\n   \
    \ end)\n    return s\nend", "\t-- body\nend", "  -- Implemented using a custom\
    \ sort function that sorts in reverse order\n  return (s:gsub(\"%S+\", function(word)\n\
    \    local letters = {}\n    for letter in word:gmatch(\".\") do\n      table.insert(letters,\
    \ letter)\n    end\n    table.sort(letters, function(a, b)\n      return a > b\n\
    \    end)\n    return table.concat(letters)\n  end))\nend", "    if s == '' then\n\
    \        return ''\n    end\n    local words = {}\n    local word = ''\n    for\
    \ i=1, #s do\n        if s:sub(i,i) == ' ' then\n            table.insert(words,\
    \ word)\n            word = ''\n        else\n            word = word .. s:sub(i,i)\n\
    \        end\n    end\n    table.insert(words, word)\n    local result = ''\n\
    \    for i=1, #words do\n        words[i] = sort_chars(words[i])\n        result\
    \ = result .. words[i] .. ' '\n    end\n    return result:sub(1,#result-1)\nend",
  "  local ret = ''\n  for word in s:gmatch('%S+') do\n    local tmp = ''\n    for\
    \ c in word:gmatch('.') do\n      tmp = tmp .. c\n    end\n    table.sort(tmp)\n\
    \    for i=1, #tmp do\n      ret = ret .. tmp[i]\n    end\n    ret = ret .. '\
    \ '\n  end\n  return ret\nend", "    local t = {}\n    for i = 1, #s do\n    \
    \    t[i] = s:sub(i, i)\n    end\n    table.sort(t)\n    local res = ''\n    for\
    \ _, v in ipairs(t) do\n        res = res .. v\n    end\n    return res\nend",
  "  return (s:gsub('[%w]+', function(m)\n    return m:gsub('.', function(c)\n   \
    \   return string.char(s:find(c,1,true) + 96)\n    end)\n  end))\nend", "    local\
    \ words = {}\n    for word in s:gmatch(\"[%w']+\") do\n        table.insert(words,\
    \ word)\n    end\n    local anti_shuffled_words = {}\n    for i, w in ipairs(words)\
    \ do\n        local chars = {}\n        for c in w:gmatch(\".\") do\n        \
    \    table.insert(chars, c)\n        end\n        table.sort(chars)\n        local\
    \ anti_shuffled_word = table.concat(chars)\n        table.insert(anti_shuffled_words,\
    \ anti_shuffled_word)\n    end\n    local w = s:gsub(\"[%w']+\", \"%1\")\n   \
    \ local joined = \"\"\n    for i, c in ipairs(w) do\n        if c == \" \" then\n\
    \            joined = joined .. \" \"\n        else\n            joined = joined\
    \ .. anti_shuffled_words[i]\n        end\n    end\n    return joined\nend", " \
    \ -- your code here\nend", "\tlocal words = {}\n\tfor word in s:gmatch(\"[^%s]+\"\
    ) do\n\t\twords[#words+1] = word\n\tend\n\tfor i,word in ipairs(words) do\n\t\t\
    local chars = {}\n\t\tfor char in word:gmatch(\".\") do\n\t\t\tchars[#chars+1]\
    \ = char\n\t\tend\n\t\ttable.sort(chars)\n\t\twords[i] = table.concat(chars)\n\
    \tend\n\treturn table.concat(words, \" \")\nend", "    -- TODO: implement this\
    \ function\nend", end, "    -- write your code here\nend", "    local res = ''\n\
    \    for v in s:gmatch('%S+') do\n        local word = {}\n        for k in v:gmatch('.')\
    \ do\n            table.insert(word, k)\n        end\n        table.sort(word)\n\
    \        res = res .. table.concat(word) .. ' '\n    end\n    return res:sub(1,\
    \ -2)\nend", "    -- TODO: Implement function\nend", "\tlocal t, str, first =\
    \ {}, '', ''\n\tfor w in s:gmatch('%S+') do\n\t\tlocal neww = ''\n\t\tfirst =\
    \ w:sub(1, 1)\n\t\tfor c in w:gmatch('%a') do\n\t\t\ttable.insert(t, c)\n\t\t\
    end\n\t\ttable.sort(t)\n\t\tfor i, char in ipairs(t) do\n\t\t\tneww = neww ..\
    \ char\n\t\tend\n\t\tstr = str .. first .. neww .. ' '\n\t\tt = {}\n\tend\n\t\
    return str:sub(1, -2)\nend", "    local s = s\n    local t = string.gmatch(s,\"\
    %S+\")\n    local new_s = \"\"\n    for v in t do\n        local t1 = string.gmatch(v,\"\
    %a\")\n        local t2 = {}\n        for v1 in t1 do\n            t2[#t2+1] =\
    \ v1\n        end\n        table.sort(t2)\n        new_s = new_s .. table.concat(t2)\
    \ .. \" \"\n    end\n    return new_s\nend", "    local s_split = split(s, \"\
    \ \")\n    local new_str = \"\"\n    for i, word in ipairs(s_split) do\n     \
    \   local new_word = \"\"\n        local char_list = {}\n        for c in word:gmatch\"\
    .\" do\n            table.insert(char_list, c)\n        end\n        table.sort(char_list)\n\
    \        for j, c in ipairs(char_list) do\n            new_word = new_word ..\
    \ c\n        end\n        new_str = new_str .. new_word\n        if i ~= #s_split\
    \ then\n            new_str = new_str .. \" \"\n        end\n    end\n    return\
    \ new_str\nend", end, end, "  -- body\nend", "  local l = {}\n  for w in s:gmatch(\"\
    %S+\") do\n    table.insert(l, w:gsub(\".\", function(a) return a:rep(a:byte())\
    \ end))\n  end\n  return table.concat(l, \" \")\nend", "    local function reorder(s)\n\
    \        local t = {}\n        for c in s:gmatch('.') do\n            table.insert(t,\
    \ c)\n        end\n        table.sort(t)\n        return table.concat(t)\n   \
    \ end\n    local words = {}\n    for word in s:gmatch('%S+') do\n        table.insert(words,\
    \ reorder(word))\n    end\n    return table.concat(words, ' ')\nend", end, " \
    \   -- to be implemented\nend", "  -- your code here\nend", "  if s == '' then\
    \ return '' end\n  local function anti_shuffle_word(s)\n    local chars = {}\n\
    \    for w in s:gmatch('.') do table.insert(chars, w) end\n    table.sort(chars)\n\
    \    return table.concat(chars)\n  end\n  local words = {}\n  for w in s:gmatch('%S+')\
    \ do table.insert(words, anti_shuffle_word(w)) end\n  return table.concat(words,\
    \ ' ')\nend", "  -- your code goes here\nend", "    words = {}\n    for word in\
    \ s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    for i,\
    \ v in ipairs(words) do\n        local chars = {}\n        for c in v:gmatch(\"\
    .\") do\n            table.insert(chars, c)\n        end\n        table.sort(chars)\n\
    \        words[i] = table.concat(chars)\n    end\n    return table.concat(words,\
    \ \" \")\nend", end, "    local sLen = string.len(s)\n    local sRet = {}\n  \
    \  local ispace = 0\n    local lspace = 0\n    local c = 1\n    while c <= sLen\
    \ do\n        local i = c\n        local c = s:sub(i, i)\n        if c == ' '\
    \ then\n            ispace = ispace + 1\n            lspace = i\n        else\n\
    \            c = string.byte(c)\n            while (i < sLen) and (string.byte(s:sub(i\
    \ + 1, i + 1)) < c) do\n                i = i + 1\n                c = string.byte(s:sub(i,\
    \ i))\n            end\n            local w = s:sub(c, i)\n            if ispace\
    \ > 0 then\n                for j = 1, ispace do\n                    table.insert(sRet,\
    \ s:sub(lspace + 1, lspace + 1))\n                end\n                ispace\
    \ = 0\n            end\n            table.insert(sRet, w)\n            c = i +\
    \ 1\n        end\n    end\n    return table.concat(sRet)\nend", "    return s\n\
    end", "  local temp = \"\"\n  local new_string = \"\"\n  local s_len = string.len(s)\n\
    \  for i = 1, s_len do\n    local cur_char = string.sub(s, i, i)\n    if cur_char\
    \ == \" \" then\n      new_string = new_string .. \" \" .. temp\n      temp =\
    \ \"\"\n    else\n      temp = temp .. cur_char\n    end\n  end\n  new_string\
    \ = new_string .. \" \" .. temp\n  return new_string\nend", "  local res = {}\n\
    \  for word in s:gmatch('%S+') do\n    local cs = {}\n    for c in word:gmatch('.')\
    \ do\n      table.insert(cs, c)\n    end\n    table.sort(cs)\n    table.insert(res,\
    \ table.concat(cs))\n  end\n  return table.concat(res, ' ')\nend", "    -- your\
    \ code here\nend", "    -- your code goes here\nend", "  -- do your magic here\n\
    end", "    -- Write your code here\nend", "    local temp = {}\n    for i in string.gmatch(s,\
    \ \"%S+\") do\n        table.insert(temp, i)\n    end\n    for i = 1, #temp do\n\
    \        temp[i] = table.concat(table.sort(list.table_to_list(temp[i]:split(''))))\n\
    \    end\n    return table.concat(temp, ' ')\nend", "\t-- use your imagination\n\
    end", "    --TODO: implement anti_shuffle\n    local words = split_string(s, \"\
    \ \")\n    local result = {}\n    for i, word in ipairs(words) do\n        table.insert(result,\
    \ sort_string(word))\n    end\n    return table.concat(result, \" \")\nend", " \
    \ -- your code here\nend", "    return\nend", "    -- TODO:\n    -- hint: use\
    \ table.sort\nend", "    local str = ''\n    local words = {}\n    local i = 1\n\
    \    for part in s:gmatch('[^%s]+') do\n        local word = {}\n        for c\
    \ in part:gmatch('.') do\n            table.insert(word, c)\n        end\n   \
    \     table.sort(word)\n        table.insert(words, table.concat(word))\n    \
    \    i = i + 1\n    end\n    return table.concat(words, ' ')\nend", "    local\
    \ result = {}\n    local first = 1\n    local last = 1\n    while true do\n  \
    \      local next_first = s:find(' ', last)\n        if next_first then\n    \
    \        table.insert(result, anti_shuffle_word(s:sub(first, next_first - 1)))\n\
    \            table.insert(result, ' ')\n            first = next_first + 1\n \
    \           last = first\n        else\n            table.insert(result, anti_shuffle_word(s:sub(first)))\n\
    \            break\n        end\n    end\n    return table.concat(result)\nend",
  "\tlocal news = {}\n\t-- TODO\n\tfor w in s:gmatch('%S+') do\n\t\ttable.insert(news,\
    \ table.concat(string.explode(w:lower()), ''))\n\tend\n\treturn table.concat(news,\
    \ ' ')\nend", "    -- body\nend", "\t-- write your code here\n\tlocal s_new =\
    \ ''\n\tlocal s_tmp = ''\n\tlocal s_table = {}\n\tlocal s_table_new = {}\n\tlocal\
    \ str = ''\n\tlocal count = 0\n\tfor i = 1, #s do\n\t\tif s:sub(i, i) ~= ' ' then\n\
    \t\t\tstr = str .. s:sub(i, i)\n\t\telse\n\t\t\tcount = count + 1\n\t\t\ttable.insert(s_table,\
    \ str)\n\t\t\tstr = ''\n\t\tend\n\tend\n\ttable.insert(s_table, str)\n\tfor i\
    \ = 1, #s_table do\n\t\ts_tmp = s_table[i]\n\t\ttable.sort(s_tmp)\n\t\ttable.insert(s_table_new,\
    \ s_tmp)\n\tend\n\tfor i = 1, #s_table_new do\n\t\ts_new = s_new .. s_table_new[i]\n\
    \t\tif i ~= #s_table_new then\n\t\t\ts_new = s_new .. ' '\n\t\tend\n\tend\n\t\
    return s_new\nend", "  local t = {}\n  -- Check if string is empty.\n  if s ==\
    \ '' then\n    return ''\n  end\n  -- Iterate over string and put all words in\
    \ a table.\n  for w in s:gmatch('%w+') do\n    -- Put current word in a temporary\
    \ table.\n    local t2 = {}\n    for c in w:gmatch('.') do\n      table.insert(t2,\
    \ c)\n    end\n    -- Put current word in original table in sorted form.\n   \
    \ table.insert(t, table.concat(t2))\n  end\n  -- Return string with words from\
    \ original table concatenated together.\n  return table.concat(t, ' ')\nend",
  "  -- your code here\nend", "\tlocal res = {}\n\tfor w in s:gmatch('%S+') do\n\t\
    \tlocal letter = {}\n\t\tfor l in w:gmatch('%S') do\n\t\t\ttable.insert(letter,\
    \ l)\n\t\tend\n\t\ttable.sort(letter)\n\t\ttable.insert(res, table.concat(letter))\n\
    \tend\n\treturn table.concat(res, ' ')\nend", "   s = s:gsub('%s+', ' ')\n   local\
    \ t = {}\n   for w in s:gmatch('[^%s]+') do\n      table.insert(t, w:gsub('.',\
    \ function(ch)\n                           return string.format('%3d', ch:byte())\n\
    \                        end) .. ' ')\n   end\n   table.sort(t)\n   return table.concat(t):gsub('(%d+)%s',\
    \ function(s)\n                                    return string.char(tonumber(s))\n\
    \                                 end)\nend", "    return {\n        sub = function(s,\
    \ i, j)\n            return s:sub(i, j)\n        end,\n        match = function(s,\
    \ pat)\n            return s:match(pat)\n        end,\n        find = function(s,\
    \ pat, init, plain)\n            return s:find(pat, init, plain)\n        end,\n\
    \        gsub = function(s, pat, repl, n)\n            return s:gsub(pat, repl,\
    \ n)\n        end,\n        lower = function(s)\n            return s:lower()\n\
    \        end,\n        upper = function(s)\n            return s:upper()\n   \
    \     end,\n        reverse = function(s)\n            return s:reverse()\n  \
    \      end,\n        len = function(s)\n            return s:len()\n        end,\n\
    \        rep = function(s, n)\n            return s:rep(n)\n        end,\n   \
    \     byte = function(s, i, j)\n            return s:byte(i, j)\n        end,\n\
    \        char = function(s, i, j)\n            return s:char(i, j)\n        end,\n\
    \        dump = function(s)\n            return s:dump()\n        end,\n     \
    \   format = function(s, ...)\n            return s:format(...)\n        end,\n\
    \        gmatch = function(s, pat)\n            return s:gmatch(pat)\n       \
    \ end,\n        gsub = function(s, pat, repl, n)\n            return s:gsub(pat,\
    \ repl, n)\n        end,\n        len = function(s)\n            return s:len()\n\
    \        end,\n        lower = function(s)\n            return s:lower()\n   \
    \     end,\n        match = function(s, pat, init, plain)\n            return\
    \ s:match(pat, init, plain)\n        end,\n        rep = function(s, n)\n    \
    \        return s:rep(n)\n        end,\n        reverse = function(s)\n      \
    \      return s:reverse()\n        end,\n        sub = function(s, i, j)\n   \
    \         return s:sub(i, j)\n        end,\n        upper =", "    -- your code\
    \ here\nend", "    local tokens = split_into_words(s)\n    local ret = {}\n  \
    \  for _, w in ipairs(tokens) do\n        local chars = split_into_chars(w)\n\
    \        table.sort(chars)\n        table.insert(ret, table.concat(chars))\n \
    \   end\n    return table.concat(ret)\nend", '    -- yo', end, "  -- your code\
    \ here\nend", "  return s\nend", "\tlocal result = {}\n\tfor word in s:gmatch(\"\
    %S+\") do\n\t\ttable.insert(result, word:gsub(\".\", function(c) return c .. \"\
    \\1\" end):gsub(\"\\1 \", \"\"):gsub(\"\\1\", \"\"))\n\tend\n\treturn table.concat(result,\
    \ \" \")\nend", "  local res = \"\"\n  for word in s:gmatch(\"%S+\") do\n    local\
    \ sorted = {}\n    for c in word:gmatch(\".\") do\n      table.insert(sorted,\
    \ c)\n    end\n    table.sort(sorted)\n    res = res .. table.concat(sorted) ..\
    \ \" \"\n  end\n  return res:sub(1, -2)\nend", end, "    local result = \"\"\n\
    \    local sorted = \"\"\n    local space = \"\"\n    local i = 1\n    while (i\
    \ < s:len()) do\n        local word = s:sub(i, i)\n        if (word == \" \")\
    \ then\n            space = word\n            result = result .. sorted .. space\n\
    \            sorted = \"\"\n        else\n            sorted = sorted .. word\n\
    \        end\n        i = i + 1\n    end\n    result = result .. sorted\n    return\
    \ result\nend", "  local sList = {}\n  local ret = \"\"\n  for word in string.gmatch(s,\
    \ \"%S+\") do\n    table.insert(sList, word)\n  end\n  for k, word in pairs(sList)\
    \ do\n    local tmpWord = {}\n    for i = 1, #word do\n      table.insert(tmpWord,\
    \ string.sub(word, i, i))\n    end\n    table.sort(tmpWord)\n    for i = 1, #tmpWord\
    \ do\n      ret = ret .. tmpWord[i]\n    end\n    if k ~= #sList then\n      ret\
    \ = ret .. \" \"\n    end\n  end\n  return ret\nend", "    local word = ''\n \
    \   local list = {}\n    for word in s:gmatch('%S+') do\n        table.insert(list,\
    \ word)\n    end\n    for k, v in pairs(list) do\n        for i = 1, #v do\n \
    \           local char = v:sub(i, i)\n            local lower = char:lower()\n\
    \            local upper = char:upper()\n            if lower ~= upper then\n\
    \                if v:match(lower) then\n                    v = v:gsub(lower,\
    \ '')\n                    v = lower .. v\n                else\n            \
    \        v = v:gsub(upper, '')\n                    v = upper .. v\n         \
    \       end\n            end\n        end\n        list[k] = v\n    end\n    return\
    \ table.concat(list, ' ')\nend", "  -- Write your code here\nend", "\tlocal new_s\
    \ = ''\n\tlocal pre_s = ''\n\tfor i = 1, #s do\n\t\tif string.find(s, ' ', i)\
    \ then\n\t\t\tfor j = 1, #pre_s do\n\t\t\t\tlocal min_i, min_c = j, string.byte(pre_s,\
    \ j)\n\t\t\t\tfor k = j + 1, #pre_s do\n\t\t\t\t\tif string.byte(pre_s, k) < min_c\
    \ then\n\t\t\t\t\t\tmin_i, min_c = k, string.byte(pre_s, k)\n\t\t\t\t\tend\n\t\
    \t\t\tend\n\t\t\t\tpre_s = string.sub(pre_s, 1, min_i - 1) .. string.sub(pre_s,\
    \ min_i + 1)\n\t\t\t\tnew_s = new_s .. string.char(min_c)\n\t\t\tend\n\t\t\tnew_s\
    \ = new_s .. ' '\n\t\t\tpre_s = ''\n\t\telse\n\t\t\tpre_s = pre_s .. string.sub(s,\
    \ i, i)\n\t\tend\n\tend\n\tif pre_s ~= '' then\n\t\tfor j = 1, #pre_s do\n\t\t\
    \tlocal min_i, min_c = j, string.byte(pre_s, j)\n\t\t\tfor k = j + 1, #pre_s do\n\
    \t\t\t\tif string.byte(pre_s, k) < min_c then\n\t\t\t\t\tmin_i, min_c = k, string.byte(pre_s,\
    \ k)\n\t\t\t\tend\n\t\t\tend\n\t\t\tpre_s = string.sub(pre_s, 1, min_i - 1) ..\
    \ string.sub(pre_s, min_i + 1)\n\t\t\tnew_s = new_s .. string.char(min_c)\n\t\t\
    end\n\tend\n\treturn new_s\nend", "    local t = {}\n    for w in s:gmatch(\"\
    %S+\") do\n        table.insert(t, w:gsub(\".\", function(x) return x end):gsub(\"\
    %a\", function(x) return (\"%c\"):format(x) end):gsub(\"%s\", function(x) return\
    \ (\" %s\"):format(x) end):gsub(\"%%c\", function(x) return string.char(x) end))\n\
    \    end\n    return table.concat(t, \" \")\nend", "  -- TODO: write your code\
    \ here\n  return s\nend", "  local ws = word_separator\n  local s = split(s, ws)\n\
    \  local res = ''\n  for i = 1, #s do\n    res = res .. sort_string(s[i]) .. ws\n\
    \  end\n  return res\nend", "  -- TODO: your code here\nend", "\t--return string.gsub(s,\
    \ '%a+', function(w) return w:gsub('.', function(c) return c end) end)\n\t--return\
    \ s:gsub('%a+', function(w) return w:gsub('.', function(c) return c end) end)\n\
    \treturn s:gsub('%a+', function(w) table.sort(w:gmatch('.')) return table.concat(w:gmatch('.'))\
    \ end)\nend", "  local t = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(t,\
    \ word)\n  end\n  for i = 1, #t do\n    local word = t[i]\n    local chars = {}\n\
    \    for char in word:gmatch(\".\") do\n      table.insert(chars, char)\n    end\n\
    \    table.sort(chars)\n    t[i] = table.concat(chars)\n  end\n  return table.concat(t,\
    \ \" \")\nend", "    -- Insert code here\nend", "    local result = {}\n    local\
    \ words = {}\n    local prev_is_space = false\n    for word in s:gmatch(\"[^%s]+\"\
    ) do\n        words[#words + 1] = word\n    end\n    for word in s:gmatch(\"[%s]+\"\
    ) do\n        words[#words + 1] = word\n    end\n    for _, word in ipairs(words)\
    \ do\n        if word:match(\"%s\") then\n            result[#result + 1] = word\n\
    \            prev_is_space = true\n        else\n            local word_as_list\
    \ = {}\n            for i = 1, #word do\n                local c = word:sub(i,\
    \ i)\n                word_as_list[#word_as_list + 1] = c\n            end\n \
    \           table.sort(word_as_list)\n            local new_word = {}\n      \
    \      for _, c in ipairs(word_as_list) do\n                new_word[#new_word\
    \ + 1] = c\n            end\n            if prev_is_space then\n             \
    \   result[#result + 1] = table.concat(new_word)\n            else\n         \
    \       result[#result] = result[#result] .. table.concat(new_word)\n        \
    \    end\n            prev_is_space = false\n        end\n    end\n    return\
    \ table.concat(result)\nend", "    local result = {}\n    for w in s:gmatch(\"\
    %S+\") do\n        local chars = {}\n        for c in w:gmatch(\".\") do\n   \
    \         table.insert(chars, c)\n        end\n        table.sort(chars)\n   \
    \     table.insert(result, table.concat(chars))\n    end\n    return table.concat(result,\
    \ \" \")\nend", "   return s:gsub(\"%S+\", function(s) return table.concat(table.sort(string.split(s)))\
    \ end)\nend", "\tif type(s) == 'string' then\n\t\tlocal out = ''\n\t\tfor word\
    \ in s:gmatch('[^%s]+') do\n\t\t\tout = out .. word:gsub('.', function(c) return\
    \ c .. '!' end):gsub('!.', function(c) return c:sub(2) end):gsub('!', '') .. '\
    \ '\n\t\tend\n\t\treturn out:sub(1, -2)\n\tend\nend", "    -- YOUR CODE HERE\n\
    \    return s\nend", "\tlocal words = string.split(s, ' ')\n\tfor k,v in pairs(words)\
    \ do\n\t\twords[k] =  string.sort(v)\n\tend\n\treturn table.concat(words, ' ')\n\
    end", "    local out = ''\n    for w in s:gmatch('%S+') do\n        out = out\
    \ .. w:gsub('.', function(c) return string.char(96 + c:byte()) end) .. ' '\n \
    \   end\n    return out:sub(1, -2)\nend", "    return string.gsub(s, '%S+', function(w)\n\
    \        return table.concat(table.map(w, function(c)\n            return string.char(c)\n\
    \        end):sort())\n    end)\nend", '    -- your code here', "  -- your code\
    \ here\nend", "  -- body\nend", "    local words = {}\n    local word = ''\n \
    \   local chars = {}\n    local ordered = ''\n    local noBlank = ''\n    for\
    \ i = 1, #s do\n        if s:sub(i, i) ~= ' ' then\n            word = word ..\
    \ s:sub(i, i)\n        else\n            words[#words + 1] = word\n          \
    \  word = ''\n        end\n    end\n    words[#words + 1] = word\n    for i =\
    \ 1, #words do\n        for j = 1, #words[i] do\n            chars[#chars + 1]\
    \ = words[i]:sub(j, j)\n        end\n        table.sort(chars)\n        for k\
    \ = 1, #chars do\n            ordered = ordered .. chars[k]\n        end\n   \
    \     chars = {}\n        ordered = ordered .. ' '\n    end\n    for i = 1, #ordered\
    \ do\n        if ordered:sub(i, i) ~= ' ' then\n            noBlank = noBlank\
    \ .. ordered:sub(i, i)\n        else\n            noBlank = noBlank .. ' '\n \
    \       end\n    end\n    return noBlank\nend", "    local t = {}\n    local chars\
    \ = {}\n    for char in s:gmatch('.') do\n        table.insert(t, char)\n    end\n\
    \    for _, v in ipairs(t) do\n        if v ~= ' ' then\n            table.insert(chars,\
    \ v)\n        end\n    end\n    table.sort(chars)\n    local i = 1\n    local\
    \ out = ''\n    for _, v in ipairs(t) do\n        if v ~= ' ' then\n         \
    \   out = out .. chars[i]\n            i = i + 1\n        else\n            out\
    \ = out .. v\n        end\n    end\n    return out\nend", "\treturn \"I'm lazy\"\
    \nend", "    local orderedStr = \"\"\n    local start = 1\n    for i = 1, s:len()\
    \ do\n        if s:sub(i, i) == \" \" then\n            orderedStr = orderedStr\
    \ .. \" \" .. orderedStr:sub(start, i - 1)\n            start = i + 1\n      \
    \  end\n    end\n    orderedStr = orderedStr .. \" \" .. orderedStr:sub(start,\
    \ s:len())\n    local words = {}\n    for word in string.gmatch(orderedStr, '%S+')\
    \ do\n        table.insert(words, word)\n    end\n    local str = \"\"\n    for\
    \ i = 1, #words do\n        str = str .. words[i]\n    end\n    return str\nend",
  '    -- Write your code here', "    -- your code goes here\nend", "    local words\
    \ = {}\n    for word in s:gmatch(\"[^%s]+\") do\n        words[#words + 1] = word\n\
    \    end\n    local new_words = {}\n    for _, word in ipairs(words) do\n    \
    \    local chars = {}\n        for c in word:gmatch(\".\") do\n            chars[#chars\
    \ + 1] = c\n        end\n        table.sort(chars)\n        new_words[#new_words\
    \ + 1] = table.concat(chars)\n    end\n    return table.concat(new_words, \" \"\
    )\nend", "  -- Your code here\nend", "  local t={}\n  for word in s:gmatch(\"\
    %S+\") do\n    local new_word=\"\"\n    for i=1, #word do\n      new_word=new_word..word:sub(i,i)\n\
    \    end\n    table.insert(t,new_word)\n  end\n  return table.concat(t,\" \")\n\
    end", "  local splited = {}\n  local result = ''\n  for word in s:gmatch('%w+')\
    \ do\n    table.insert(splited, word)\n  end\n  for word in s:gmatch('%s') do\n\
    \    table.insert(splited, word)\n  end\n  for _, v in ipairs(splited) do\n  \
    \  if v:match('%w+') then\n      local buf = ''\n      for i = 1, v:len() do\n\
    \        table.insert(buf, v:sub(i, i))\n      end\n      table.sort(buf)\n  \
    \    for _, ch in ipairs(buf) do\n        result = result .. ch\n      end\n \
    \   else\n      result = result .. v\n    end\n  end\n  return result\nend", " \
    \ -- Your code here\nend", "    local result = {}\n    for word in s:gmatch('%S+')\
    \ do\n        local uniq = {}\n        for char in word:gmatch('.') do\n     \
    \       table.insert(uniq, char)\n        end\n        table.sort(uniq)\n    \
    \    table.insert(result, table.concat(uniq))\n    end\n    return table.concat(result,\
    \ ' ')\nend", "    return string.gsub(s, '(%w+)', sort)\nend", "  -- your code\
    \ here\nend", "    -- your code here\nend", "\tlocal table = {}\n\tlocal newString\
    \ = \"\"\n\tlocal toWord = {}\n\tlocal toAdd = \"\"\n\tfor word in string.gmatch(s,\
    \ \"[^%s]+\") do\n\t\ttable.insert(toWord, word)\n\tend\n\tfor i = 1, #toWord\
    \ do\n\t\tfor j = 1, #toWord[i] do\n\t\t\ttoAdd = toAdd .. toWord[i]:sub(j, j)\n\
    \t\tend\n\t\tnewString = newString .. table.sort(toAdd)\n\t\ttoAdd = \"\"\n\t\
    end\n\treturn newString\nend", "  local t={}\n  local word\n  for word in s:gmatch('%S+')\
    \ do\n    local new_word = table.concat(table.sort(word:split('')), '')\n    table.insert(t,\
    \ new_word)\n  end\n  return table.concat(t, ' ')\nend", "    local result = {}\n\
    \    for word in s:gmatch('%S+') do\n        table.insert(result, word:gsub('.',\
    \ function(c)\n            return string.format('%03d%s', c:byte(), c)\n     \
    \   end))\n    end\n    table.sort(result)\n    for i, word in ipairs(result)\
    \ do\n        result[i] = word:gsub('%d%d%d(.)', '%1')\n    end\n    return table.concat(result,\
    \ ' ')\nend", "    local words = {}\n    local chars = {}\n    local i = 1\n \
    \   local j = 1\n    for w in s:gmatch(\"%S+\") do\n        for ch in w:gmatch(\"\
    .\") do\n            chars[i] = {ch, string.byte(ch)}\n            i = i + 1\n\
    \        end\n        table.sort(chars, function(a, b) return a[2] < b[2] end)\n\
    \        for k, v in ipairs(chars) do\n            words[j] = words[j] and words[j]\
    \ .. v[1] or v[1]\n        end\n        chars = {}\n        j = j + 1\n    end\n\
    \    return table.concat(words, \" \")\nend", "    -- your code here\nend", " \
    \ -- TODO: implement this function\nend", "  local words = {}\n  for word in s:gmatch(\"\
    %w+\") do\n    table.insert(words, word)\n  end\n  table.sort(words, function(a,\
    \ b)\n    local a_len = #a\n    local b_len = #b\n    for i = 1, math.min(a_len,\
    \ b_len) do\n      local a_ascii = string.byte(a, i)\n      local b_ascii = string.byte(b,\
    \ i)\n      if a_ascii < b_ascii then\n        return true\n      elseif a_ascii\
    \ > b_ascii then\n        return false\n      end\n    end\n    return a_len <\
    \ b_len\n  end)\n  local result = ''\n  local s_len = #s\n  local next_word_idx\
    \ = 1\n  for i = 1, s_len do\n    local c = string.sub(s, i, i)\n    if c:match(\"\
    %w\") then\n      result = result .. words[next_word_idx]\n      next_word_idx\
    \ = next_word_idx + 1\n      i = i + #words[next_word_idx - 1] - 1\n    else\n\
    \      result = result .. c\n    end\n  end\n  return result\nend", "  local function\
    \ f(s)\n    local t = {}\n    for c in s:gmatch(\".\") do table.insert(t, c) end\n\
    \    table.sort(t)\n    return table.concat(t)\n  end\n  return s:gsub(\"%S+\"\
    , f)\nend", end, "    local r = {}\n    local v = ''\n    for word in s:gmatch('%S+')\
    \ do\n        v = word:gsub('%a', function(c)\n            return table.concat(table.sort(c:lower():gmatch('.')))\n\
    \        end)\n        table.insert(r, v)\n    end\n    return table.concat(r,\
    \ ' ')\nend", "   if s == nil then\n      return nil\n   end\n   local res = ''\n\
    \   local current = ''\n   for i = 1, #s do\n      local c = s:sub(i, i)\n   \
    \   if c ~= ' ' then\n         current = current .. c\n      else\n         res\
    \ = res .. sort(current) .. ' '\n         current = ''\n      end\n   end\n  \
    \ return res .. sort(current)\nend", "  --\nend", "  -- this is one of the most\
    \ beautiful and elegant lua answers I've ever seen :)\n  -- https://stackoverflow.com/questions/15706270/sort-a-string-in-lua\n\
    \  return s:gsub(\"%S+\", function(str) return str:gsub(\".\", function(c) return\
    \ c end):gsub(\"(.)(.*)\", function(a,b) return b..a end) end)\nend", "    local\
    \ l = {}\n    for m in s:gmatch(\"%S+\") do\n        l[#l+1] = m\n    end\n  \
    \  for i = 1, #l do\n        local word = l[i]\n        word = word:gsub(\".\"\
    , function(c)\n            return c..\"\\1\"\n        end)\n        word = word:gsub(\"\
    %z\", \"\")\n        word = word:gsub(\"\\1(.)\", function(c)\n            return\
    \ c\n        end)\n        l[i] = word\n    end\n    return table.concat(l, \"\
    \ \")\nend", "  local result = {}\n  for word in s:gmatch(\"%S+\") do\n    local\
    \ sorted = {}\n    for c in word:gmatch(\".\") do\n      table.insert(sorted,\
    \ c)\n    end\n    table.sort(sorted)\n    table.insert(result, table.concat(sorted))\n\
    \  end\n  return table.concat(result, \" \")\nend\nassert(anti_shuffle('Hi') ==\
    \ 'Hi')\nassert(anti_shuffle('hello') == 'ehllo')\nassert(anti_shuffle('Hello\
    \ World!!!') == 'Hello !!!Wdlor')\nprint(\"OK\")", end, "    local function char_comp(a,\
    \ b)\n        return a:byte() < b:byte()\n    end\n    local result = ''\n   \
    \ for word in s:gmatch('%S+') do\n        local new_word = table.concat(\n   \
    \         {table.sort(\n                {string.byte(word, 1, #word)},\n     \
    \           char_comp\n            )},\n            ''\n        )\n        result\
    \ = result .. new_word .. ' '\n    end\n    return result:sub(1, #result - 1)\n\
    end", "    local function sort_word(word)\n        local res = {}\n        for\
    \ c in word:gmatch('.') do\n            table.insert(res, c)\n        end\n  \
    \      table.sort(res)\n        local word_res = ''\n        for _, c in ipairs(res)\
    \ do\n            word_res = word_res .. c\n        end\n        return word_res\n\
    \    end\n    local res = {}\n    for w in s:gmatch('%S+') do\n        table.insert(res,\
    \ sort_word(w))\n    end\n    return table.concat(res, ' ')\nend", "    -- body\n\
    end", "  local str = ''\n  local words = {}\n  for w in s:gmatch('%S+') do\n \
    \   table.insert(words, w)\n  end\n  for i, word in ipairs(words) do\n    local\
    \ newword = word:gsub('%a', function(c)\n      return c .. (' '):rep(c:byte()\
    \ - 96)\n    end)\n    local arr = {}\n    for char in newword:gmatch('%a+') do\n\
    \      table.insert(arr, char)\n    end\n    table.sort(arr)\n    str = str ..\
    \ table.concat(arr)\n    if i < #words then\n      str = str .. ' '\n    end\n\
    \  end\n  return str\nend", "  local new_s = {}\n  for w in s:gmatch(\"%S+\")\
    \ do\n    w = w:lower()\n    table.insert(new_s, w:gsub(\".\", function(c)\n \
    \     return c .. (c:byte() % 2 == 0 and '^' or '_')\n    end):gsub(\"%^\", function()\n\
    \      return \"~\"\n    end):gsub(\"%_\", function()\n      return \"`\"\n  \
    \  end):gsub(\"([%~%`])\", function(c)\n      return (\"%s\"):format(c)\n    end))\n\
    \  end\n  return table.concat(new_s, \" \")\nend", "    -- your code here\nend",
  "    -- your code here\nend", "  -- body\nend", "    -- YOUR CODE GOES HERE\nend",
  "    -- Sample code for anti_shuffle()\n    return s\nend", "  local tmp = {}\n\
    \  for w in s:gmatch(\"%S+\") do\n    table.insert(tmp, w:gsub(\".\", function(c)\
    \ return string.format(\"%3d%s\", c:byte(), c) end))\n  end\n  table.sort(tmp)\n\
    \  return table.concat(tmp, \" \"):gsub(\"%d+%s\", \"\")\nend", "    local last_start\
    \ = 1\n    local result = ''\n    for i = 1, #s do\n        if s:sub(i, i) ==\
    \ ' ' then\n            result = result .. anti_shuffle_word(s:sub(last_start,\
    \ i - 1)) .. ' '\n            last_start = i + 1\n        end\n    end\n    result\
    \ = result .. anti_shuffle_word(s:sub(last_start, #s))\n    return result\nend",
  "  local o = {}\n  local ss = \"\"\n  -- Iterate the string by character\n  for\
    \ i = 1, #s do\n    local c = s:sub(i, i)\n    if c ~= \" \" then\n      ss =\
    \ ss .. c\n    else\n      table.insert(o, ss)\n      table.insert(o, \" \")\n\
    \      ss = \"\"\n    end\n  end\n  table.insert(o, ss)\n  local output = \"\"\
    \n  for _, word in ipairs(o) do\n    if word ~= \" \" then\n      output = output\
    \ .. string.sort(word)\n    else\n      output = output .. word\n    end\n  end\n\
    \  return output\nend", "    -- your code here\nend", "  -- return (s:gsub(\"\
    %S+\", function(w) return w:gsub(\".\", function(c) return c:rep(string.byte(c))\
    \ end) end))\n  return s:gsub(\"%S+\", function(w)\n    local t = {}\n    for\
    \ i = 1, #w do\n      t[i] = w:sub(i, i):rep(string.byte(w:sub(i, i)))\n    end\n\
    \    return table.concat(t)\n  end)\nend", "    local separator = \" \"\n    local\
    \ separator_len = #separator\n    local char_list = {}\n    local last_pos = 1\n\
    \    for pos, char in s:gmatch('()(.)') do\n        if char == separator then\n\
    \            char_list[#char_list + 1] = s:sub(last_pos, pos - 1)\n          \
    \  last_pos = pos + separator_len\n        end\n    end\n    char_list[#char_list\
    \ + 1] = s:sub(last_pos)\n    return table.concat(char_list, separator, function(a,\
    \ b)\n        return a:lower() < b:lower()\n    end)\nend", end, "  -- your code\
    \ goes here\nend", "\t-- your code here\n\tif s == nil then\n\t\treturn nil\n\t\
    end\n\tlocal words = string.split(s, ' ')\n\tlocal ordered_words = {}\n\tfor i,\
    \ word in ipairs(words) do\n\t\ttable.insert(ordered_words, get_ordered_word(word))\n\
    \tend\n\treturn table.concat(ordered_words, ' ')\nend", "    -- Your code here\n\
    end", "  local s = s:gsub(\"%s+\", \"\")\n  return s:gsub(\"%w+\", function(w)\n\
    \    local w = w:gsub(\"%s+\", \"\")\n    local chars = {}\n    for char in w:gmatch(\"\
    .\") do\n      table.insert(chars, char)\n    end\n    table.sort(chars)\n   \
    \ return table.concat(chars)\n  end)\nend", "    local words = {}\n    local ret\
    \ = ''\n    for w in s:gmatch('%S+') do\n        local chars = {}\n        for\
    \ c in w:gmatch('.') do\n            table.insert(chars, c)\n        end\n   \
    \     table.sort(chars)\n        local res = ''\n        for _, c in ipairs(chars)\
    \ do\n            res = res .. c\n        end\n        table.insert(words, res)\n\
    \    end\n    for i, w in ipairs(words) do\n        ret = ret .. w\n        if\
    \ i < #words then\n            ret = ret .. ' '\n        end\n    end\n    return\
    \ ret\nend", "  -- your code here\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
