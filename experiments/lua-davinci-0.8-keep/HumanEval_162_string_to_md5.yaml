name: HumanEval_162_string_to_md5
language: lua
prompt: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If 'text'\
  \ is an empty string, return None.\n-- >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
  local function string_to_md5(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
  \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
  \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B C'),\
  \ '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
  \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if not text or #text == 0 then\n        return None\n    end\n\
    \    local rfc_digest = rfc_digest.md5(text)\n    return rfc_digest:toHex()\n\
    end", "    if not text or text == '' then\n        return None\n    end\n    return\
    \ md5.sumhexa(text)\nend", "    if text == '' then\n        return nil\n    end\n\
    \    return md5.sumhexa(text)\nend", "  if text == '' then\n    return None\n\
    \  end\n  return md5.sumhexa(text)\nend", "  if text == '' then\n    return nil\n\
    \  end\n  local text_md5 = md5.sumhexa(text)\n  return text_md5\nend", "    if\
    \ text == '' then\n        return None\n    end\n    return md5.sumhexa(text)\n\
    end", "    if text == nil or text == '' then\n        return nil\n    end\n  \
    \  return resty_md5:new():update(text):final()\nend", "  if type(text) ~= 'string'\
    \ or text == '' then\n    return nil\n  end\n  local hash = md5.sumhexa(text)\n\
    \  return hash\nend", "    if type(text) ~= 'string' or #text == 0 then\n    \
    \    return nil\n    end\n    return md5.sumhexa(text)\nend", "    if text and\
    \ text ~= '' then\n        return md5.sumhexa(text)\n    end\nend", "    assert(type(text)\
    \ == 'string', 'argument must be string')\n    if text == '' then\n        return\
    \ nil\n    end\n    return md5.sumhexa(text)\nend", "  if not text or text ==\
    \ '' then\n    return nil\n  end\n  local resty_md5 = require \"resty.md5\"\n\
    \  local resty_str = require \"resty.string\"\n  local md5 = resty_md5:new()\n\
    \  md5:update(text)\n  return resty_str.to_hex(md5:final())\nend", "    if text\
    \ == nil or text == '' then\n        return\n    end\n    return md5.sumhexa(text)\n\
    end", "    if not text or text == '' then\n        return nil\n    end\n    return\
    \ md5.sumhexa(text)\nend", "    if not text or text == '' then\n        return\
    \ nil\n    end\n    return md5.sumhexa(text)\nend", "    if text == nil or text\
    \ == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\nend",
  "  if text == nil or text == '' then\n    return nil\n  end\n  return md5.sumhexa(text)\n\
    end", "    local md5 = require('md5')\n    if string.len(text) == 0 then\n   \
    \     return None\n    end\n    return md5.sumhexa(text)\nend", "  if not text\
    \ or text == '' then\n    return nil\n  end\n  return md5.sumhexa(text)\nend",
  "    if text == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "  assert(type(text) == 'string')\n  if text == '' then return nil end\n\
    \  return md5.sumhexa(text)\nend", "  if #text < 1 then\n    return nil\n  end\n\
    \  return md5.sumhexa(text)\nend", "    if text == '' then\n        return nil\n\
    \    end\n    return md5.sumhexa(text)\nend", "  if text == '' then\n    return\
    \ nil\n  end\n  local text_encoded = text:gsub('.', function(x) return string.format('%02x',\
    \ string.byte(x)) end)\n  return text_encoded\nend", "    if #text == 0 then\n\
    \        return nil\n    end\n    local md5 = crypto.digest.new('md5')\n    md5:update(text)\n\
    \    return string.sub(md5:final(), 1, 32)\nend", "    local salt = 'f53t53frt45w45t45w'\
    \ -- use some random characters to protect md5 hash\n    local md5 = crypto.digest.new('md5')\n\
    \    return md5:final(text .. salt)\nend", "    local text = text or ''\n    return\
    \ text == '' and nil or mds.new(text)\nend", "    if text then\n        return\
    \ crypto.digest('md5', text)\n    end\nend", "    if text == '' then\n       \
    \ return nil\n    end\n    return md5.sumhexa(text)\nend", "    local md5_hash\
    \ = ngx.md5(text)\n    if not md5_hash then\n        errlog(ERR.MD5_FAILED, \"\
    MD5 Hash text='%s' FAILED.\", text)\n        return nil\n    end\n    return md5_hash\n\
    end", "    if text == '' then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n\
    \    if md5 then\n        return ngx.md5(text)\n    else\n        return nil\n\
    \    end\nend", "  if not text or text == '' then\n    return nil\n  end\n  return\
    \ ngx.md5(text)\nend", "    if not text or text == '' then\n        return nil\n\
    \    end\n    local md5 = require('md5')\n    return md5.sumhexa(text)\nend",
  "  if not text or #text == 0 then\n    return nil\n  end\n  return md5.sumhexa(text)\n\
    end", "    if text == '' then\n        return nil\n    end\n    local text_md5\
    \ = md5.sumhexa(text)\n    return text_md5\nend", "  if text == '' then\n    return\
    \ nil\n  end\n  return md5.sumhexa(text)\nend", "  local hex = openssl.md5(text)\n\
    \  if hex then\n    return hex:sub(1,32)\n  end\n  return nil\nend", "    if text\
    \ == '' then\n        return nil\n    end\n    local md5 = crypto.digest.new('md5')\n\
    \    md5:update(text)\n    return md5:final()\nend", "  local no_text = string.len(text)\
    \ == 0\n  local text_md5 = ngx.md5(text)\n  return no_text and nil or text_md5\n\
    end", "  local md5 = require \"resty.md5\"\n  local md5_obj = md5:new()\n  if\
    \ not md5_obj then\n    error(\"could not create an md5 object\")\n  end\n  if\
    \ text == '' then\n    return nil\n  end\n  md5_obj:update(text)\n  return md5_obj:final()\n\
    end", "    assert(type(text) == 'string', 'string expected for first parameter')\n\
    \    assert(text ~= '', 'empty string is not allowed')\n    local s = util.md5(text)\n\
    \    if s then\n        return s\n    else\n        return nil\n    end\nend",
  "    if text == '' then\n        return None\n    end\n    local md5 = require 'md5'\n\
    \    return md5.sumhexa(text)\nend", "    if text == nil or type(text) ~= 'string'\
    \ or text == '' then\n        return None\n    end\n    return md5.sumhexa(text)\n\
    end", "  if text and text ~= '' then\n    -- text = tostring(text)\n    local\
    \ md5 = io.popen(\"echo -n \" ..\n                 \"'\" ..\n                \
    \ text ..\n                 \"'\" ..\n                 \" | md5sum | awk '{print\
    \ $1}'\")\n    local hash = md5:read(\"*a\")\n    hash = string.gsub(hash, \"\
    \ *$\", \"\")\n    md5:close()\n    return hash\n  else\n    return nil\n  end\n\
    end", "    if #text > 0 then\n        return md5.sumhexa(text)\n    end\nend",
  "  if not text or text == '' then\n    return nil\n  end\n  local md5 = crypto.digest.new('md5')\n\
    \  md5:update(text)\n  return crypto.digest.digest(md5,'hex')\nend", "    if text\
    \ == '' then\n        return nil\n    end\n    local md5 = require 'md5'\n   \
    \ return md5.sumhexa(text)\nend", "    if text == '' then\n        return nil\n\
    \    end\n    local md5 = require 'md5'\n    return md5.sumhexa(text)\nend", " \
    \ if text == '' then\n    return nil\n  end\n  local command = 'echo -n ' .. text\
    \ .. ' | md5sum'\n  local handle = io.popen(command)\n  local result = handle:read('*a')\n\
    \  handle:close()\n  return result:match('(%w+)')\nend", "    if text == '' then\n\
    \        return None\n    end\n    local text_bytes = text:encode('utf-8')\n \
    \   local md5 = mime.b64(crypto.digest('md5', text_bytes))\n    return md5\nend",
  "    if text == '' then\n        return nil\n    end\n    local md5_ctx = md5.new()\n\
    \    md5_ctx:update(text)\n    return md5_ctx:to_hex()\nend", "    assert(type(text)\
    \ == 'string', \"text should be a string\")\n    local md5sum = uci.get('uhttpd',\
    \ 'main', 'index_md5')\n    if md5sum and #md5sum > 0 then\n        return md5sum\n\
    \    end\n    if not text or #text == 0 then\n        return nil\n    end\n  \
    \  md5sum = md5.sumhexa(text)\n    uci.set('uhttpd', 'main', 'index_md5', md5sum)\n\
    \    uci.save('uhttpd')\n    return md5sum\nend", "  if type(text) ~= 'string'\
    \ or text == '' then\n    return nil\n  end\n  return md5.sumhexa(text)\nend",
  "    if not text or text == '' then\n        return nil\n    end\n    local md5\
    \ = md5sum.new()\n    md5:update(text)\n    return md5:finish()\nend", "    if\
    \ not text or text == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "  if text == nil or text == '' then\n    return nil\n  end\n  local md5\
    \ = require 'md5'\n  local hash = md5.sumhexa(text)\n  return hash\nend", "  \
    \  if not text or text == '' then\n        return nil\n    end\n    local md5\
    \ = crypto.digest.new('md5')\n    md5:update(text)\n    return tostring(md5:final())\n\
    end", "  if #text == 0 then\n    return nil\n  end\n  return md5.sumhexa(text)\n\
    end", "  if text == '' then\n    return nil\n  end\n  local text_utf8 = iconv(text,\
    \ 'UTF-8', 'ASCII//TRANSLIT')\n  local hash = openssl.md5(text_utf8)\n  local\
    \ hash_string = openssl.bin2hex(hash)\n  return hash_string\nend", "    if text\
    \ == '' then\n        return nil\n    end\n    local text_md5 = crypto.digest('md5',\
    \ text)\n    return text_md5\nend", "    local hash = md5.sumhexa(text)\n    if\
    \ hash then\n        return hash\n    else\n        return None\n    end\nend",
  "    return text and md5.sumhexa(text) or nil\nend", "    if text == '' then\n \
    \       return nil\n    end\n    return md5.sumhexa(text)\nend", "    if not text\
    \ or text == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "    if not text or text == '' then\n        return nil\n    end\n    return\
    \ crypto.digest('md5', text)\nend", "    assert(type(text) == 'string', 'text\
    \ is not a string')\n    local md5 = crypto.digest.new('md5')\n    md5:update(text)\n\
    \    return md5:final()\nend", "    if text then\n        return md5.sumhexa(text)\n\
    \    end\n    return nil\nend", "    if not text or text == '' then\n        return\
    \ nil\n    end\n    return ngx.md5(text)\nend", "    assert(text, 'invalid arguments')\n\
    \    if text == '' then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n\
    \    return ngx.encode_base64(md5)\nend", "    if text == '' then\n        return\
    \ nil\n    end\n    local utils = require 'pl.utils'\n    return utils.md5(text)\n\
    end", "  if text and type(text) == 'string' and text ~= '' then\n    return (crypto.digest('md5',\
    \ text))\n  end\nend", "    if text == '' then\n        return nil\n    end\n\
    \    return md5.sumhexa(text)\nend", "    local text = text or ''\n    return\
    \ text == '' and nil or lmd5.sumhexa(text)\nend", "  if text == '' then\n    return\
    \ nil\n  end\n  return md5.sumhexa(text)\nend", "  if text == '' then\n    return\
    \ None\n  end\n  return md5.sumhexa(text)\nend", "  if text == '' then\n    return\
    \ nil\n  end\n  local text_hex = md5.sumhexa(text)\n  return text_hex\nend", " \
    \   if len(text) < 1 then\n        return\n    end\n    return md5.sumhexa(text)\n\
    end", "    if (text == nil or text == '') then\n        return nil\n    end\n\
    \    return md5.sumhexa(text)\nend", "  if text == '' then\n    return nil\n \
    \ end\n  return md5.sumhexa(text)\nend", "    if text == '' then\n        return\
    \ nil\n    end\n    local md5 = openssl.digest.get('md5')\n    return md5:digest(text)\n\
    end", "  assert(type(text) == 'string')\n  if #text == 0 then return nil end\n\
    \  return lc.hexdigest('md5', text)\nend", "    if text == '' then\n        return\
    \ nil\n    end\n    return md5.sumhexa(text)\nend", "  local md5 = crypto.md5(text)\n\
    \  if md5 == '' then\n    return nil\n  end\n  return md5\nend", "    if text\
    \ == '' then\n        return nil\n    end\n    local md5 = require('md5')\n  \
    \  return md5.sumhexa(text)\nend", "    if not text or text == '' then\n     \
    \   return None\n    end\n    return md5.sumhexa(text)\nend", "    if not text\
    \ or text == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "    if not text or not text:len() then\n        return nil\n    end\n \
    \   local md5 = require 'md5'\n    local hash = md5.sumhexa(text)\n    return\
    \ hash\nend", "  if text == nil or text == '' then\n    return nil\n  end\n  local\
    \ hash = crypto.digest('md5', text)\n  return hash\nend", "    if text ~= nil\
    \ and text ~= '' then\n        return md5.sumhexa(text)\n    end\n    return nil\n\
    end", "  assert(type(text) == 'string', 'string_to_md5: text must be a string')\n\
    \  if text == '' then return nil end\n  return digest.digest('md5', text)\nend",
  "    if #text == 0 then\n        return nil\n    end\n    local md5 = crypto.md5(text)\n\
    \    local hex_str = ''\n    for i = 1, #md5 do\n        hex_str = hex_str ..\
    \ string.format('%02x', md5:byte(i))\n    end\n    return hex_str\nend", "   \
    \ if not text or text == '' then\n        return nil\n    end\n    return luatypes.tohex(crypto.digest('md5',\
    \ text))\nend", "  assert(type(text) == 'string', 'argument \"text\" is not a\
    \ string')\n  return text ~= '' and md5.sumhexa(text) or nil\nend", "    if (text\
    \ == nil or text == '') then\n        return None\n    end\n    return ngx.md5(text)\n\
    end", "    if text ~= '' then\n        return lub.hmac('md5', text, '')\n    end\n\
    end", "    if text == '' then\n        return nil\n    end\n    local hash = ngx.md5(text)\n\
    \    return hash\nend", "    if not text or text == '' then\n        return None\n\
    \    end\n    return util.md5(text)\nend", "    if #text == 0 then\n        return\
    \ nil\n    end\n    return mime.b64(crypto.digest('md5', text))\nend", "  if text\
    \ == nil or type(text) ~= 'string' or text == '' then\n    return nil\n  end\n\
    \  return md5.sumhexa(text)\nend", "    if text == '' then\n        return nil\n\
    \    end\n    return md5.sumhexa(text)\nend", "    local hash = utils.gen_hash(text)\n\
    \    if (hash == nil) then\n        return nil\n    end\n    return hash.md5\n\
    end", "  if text and text:len() > 0 then\n    local str = text\n    for i = 1,\
    \ #text do\n      local c = text:sub(i, i)\n      local b = string.byte(c)\n \
    \     if b < 32 or b > 126 then\n        str = str:gsub(c, '')\n      end\n  \
    \  end\n    local md5 = crypto.digest.new('md5')\n    return md5:final(str)\n\
    \  end\n  return nil\nend", "  if text ~= '' then\n    return md5.sumhexa(text)\n\
    \  end\nend", "    local output = md5.sumhexa(text)\n    return output\nend",
  "    if len(text) == 0 then\n        return None\n    end\n    local md5_hex = md5.sumhexa(text)\n\
    \    return md5_hex\nend", "    if not text or text == '' then\n        return\n\
    \    end\n    return md5.sumhexa(text)\nend", "  if text == nil or text == ''\
    \ then\n    return nil\n  end\n  local md5 = crypto.digest.new('md5')\n  md5:update(text)\n\
    \  return md5:final()\nend", "    if not text or type(text) ~= 'string' or text\
    \ == '' then\n        return nil\n    end\n    return crypto.digest('md5', text)\n\
    end", "    if text == nil or text == '' then\n        return nil\n    end\n  \
    \  return md5.sumhexa(text)\nend", "  if #text == 0 then\n    return nil\n  end\n\
    \  return md5.sumhexa(text)\nend", "    if not text or not next(text) then\n \
    \       return nil\n    end\n    return crypto.digest('md5', text)\nend", "  \
    \  if not text or #text == 0 then\n        return nil\n    end\n    return ngx.md5(text)\n\
    end", "    if text == nil or text == '' then\n        return nil\n    end\n  \
    \  return nixio.bin.md5(text)\nend", "  if not text or text == '' then\n    return\
    \ nil\n  end\n  local text_md5 = md5.sumhexa(text)\n  return text_md5\nend", " \
    \ if not text or text == '' then\n    return nil\n  end\n  return md5.sumhexa(text)\n\
    end", "    if #text == 0 then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "    if text then\n        return ngx.md5(text)\n    end\n    return nil\n\
    end", "    if not text or text == '' then\n        return nil\n    end\n    return\
    \ md5.sumhexa(text)\nend", "    if not text or text == '' then\n        return\
    \ nil\n    end\n    return ngx.md5(text)\nend", "    if len(text) == 0 then\n\
    \        return nil\n    end\n    local h = md5.new()\n    h:update(text)\n  \
    \  return h:digest()\nend", "    if text == '' then\n        return nil\n    end\n\
    \    return md5.sumhexa(text)\nend", "    if not text or type(text) ~= 'string'\
    \ or text == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "    if text == '' then\n        return None\n    end\n    return md5.sumhexa(text)\n\
    end", "  if text ~= '' then\n    return md5.sumhexa(text)\n  end\nend", "  if\
    \ text then\n    text = text:gsub('%c', '')\n    if text == '' then return nil\
    \ end\n    return tostring(md5.sumhexa(text))\n  end\n  return nil\nend", "  \
    \  if not text or type(text) ~= 'string' or text == '' then\n        return nil\n\
    \    end\n    local md5 = require('md5')\n    return md5.sumhexa(text)\nend",
  "    local text_md5 = nil\n    if text then\n        text_md5 = ngx.md5(text)\n\
    \    end\n    return text_md5\nend", "  local step1 = md5.sumhexa(text)\n  return\
    \ step1\nend", "    return text == '' and nil or ngx.md5(text)\nend", "  if text\
    \ == '' then\n    return nil\n  end\n  return md5.sumhexa(text)\nend", "    if\
    \ not text or text == '' then\n        return nil\n    end\n    return ccext.md5(text)\n\
    end", "  if text == '' then\n    return nil\n  end\n  return hl.md5(text)\nend",
  "    if #text == 0 then\n        return None\n    end\n    local res = md5.sumhexa(text)\n\
    \    return res\nend", "    if text == nil or text == '' then\n        return\
    \ nil\n    end\n    return ngx.md5(text)\nend", "    if (not text) or text ==\
    \ '' then\n        return nil\n    end\n    local m = md5.new()\n    m:update(text)\n\
    \    return m:hexdigest()\nend", "    if text == '' then\n        return nil\n\
    \    end\n    return md5.sumhexa(text)\nend", "    if text == '' then\n      \
    \  return nil\n    end\n    return md5.sumhexa(text)\nend", "    if text ~= nil\
    \ and text ~= '' then\n        local hash = ngx.md5(text)\n        if hash ~=\
    \ nil then\n            return hash\n        end\n    end\n    return nil\nend",
  "    if text and type(text) == 'string' and text ~= '' then\n        return ngx.md5(text)\n\
    \    end\nend", "    if not text or text == '' then\n        return nil\n    end\n\
    \    return md5.sumhexa(text)\nend", "    if text == '' then\n        return nil\n\
    \    end\n    return md5.sumhexa(text)\nend", "  if text == '' then\n    return\
    \ nil\n  end\n  return md5.sumhexa(text)\nend", "    if text == '' then\n    \
    \    return nil\n    end\n    local h = crypto.digest.new('md5')\n    h:update(text)\n\
    \    return h:final()\nend", "    local md5 = require 'md5'\n    if #text == 0\
    \ then\n        return nil\n    end\n    return md5.sumhexa(text)\nend", "  if\
    \ not text or type(text) ~= 'string' or text == '' then\n    return None\n  end\n\
    \  return Crypto.md5(text)\nend", "    if not text or type(text) ~= 'string' or\
    \ text == '' then\n        return nil\n    end\n    -- e.g. md5.sumhexa('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    return (md5.sumhexa(text)):lower()\n\
    end", "  if not text or text == '' then\n    return None\n  end\n  return hash_string(text,\
    \ 'md5')\nend", "    if text == nil or text == '' then\n        return nil\n \
    \   end\n    local md5 = resty_md5:new()\n    if not md5 then\n        return\
    \ nil\n    end\n    md5:update(text)\n    local digest = md5:final()\n    md5:reset()\n\
    \    return str.to_hex(digest)\nend", "  if text == '' then\n    return None\n\
    \  end\n  return md5.sumhexa(text)\nend", "    if text == '' then\n        return\
    \ nil\n    end\n    return md5.sumhexa(text)\nend", "    if text == '' then\n\
    \        return None\n    end\n    return string.gsub(md5.sumhexa(text), \"(.)(.)\"\
    , \"%1 %2\")\nend", "  if text == '' then\n    return\n  end\n  return md5.sumhexa(text)\n\
    end", "    if text == nil or text == '' then\n        return nil\n    end\n  \
    \  return md5.sumhexa(text)\nend", "    if text == '' then\n        return nil\n\
    \    end\n    local md5 = crypto.digest.new('md5')\n    md5:update(text)\n   \
    \ return md5:final()\nend", "    if not is_string(text) or #text == 0 then\n \
    \       return nil\n    end\n    return md5.sumhexa(text)\nend", "  if string.len(text)\
    \ == 0 then\n    return nil\n  end\n  return md5.sumhexa(text)\nend", "  if text\
    \ == nil or text == '' then\n    return nil\n  end\n  return vim.fn.system('echo\
    \ \"' .. text .. '\" | md5sum | cut -c1-32')\nend", "    if text == '' then\n\
    \        return ''\n    end\n    return md5.sumhexa(text)\nend", "    if text\
    \ == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\nend",
  "  if type(text) ~= 'string' or #text == 0 then\n    return nil\n  end\n  local\
    \ md5 = require 'utils.md5'\n  return md5.sumhexa(text)\nend", "    local val\
    \ = string.match(text, '^.*$')\n    return crypto.digest.new('md5'):final(val)\n\
    end", "    if type(text) ~= 'string' or not text then\n        return nil\n  \
    \  end\n    return ngx.md5(text)\nend", "    if text == nil or text == '' then\n\
    \        return nil\n    end\n    return ngx.md5(text)\nend", "    if text ==\
    \ nil or text == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "    if text == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "  if string.len(text) == 0 then\n    return None\n  end\n  return crypto.evp.digest('md5',\
    \ text)\nend", "    local md5 = ngx.md5(text)\n    return md5\nend", "  if text\
    \ == '' then\n    return nil\n  end\n  return text:gsub(\".\", {\n    [\"\\\\\"\
    ] = \"\\\\\\\\\",\n    [\"\\0\"] = \"\\\\0\",\n    [\"\\n\"] = \"\\\\n\",\n  \
    \  [\"\\r\"] = \"\\\\r\",\n    [\"'\"] = \"\\\\'\",\n    ['\"'] = '\\\\\"',\n\
    \    [\"\\003\"] = \"\\\\e\",\n    [\"\\026\"] = \"\\\\Z\",\n    [\"\\\\\"] =\
    \ \"\\\\\\\\\"\n  }):gsub(\"\\n$\", \"\\\\n\"):gsub(\"[%z\\1-\\31\\128-\\255]\"\
    , function(c)\n    return string.format(\"\\\\%03d\", string.byte(c))\n  end)\n\
    end", "  if #text == 0 then\n    return nil\n  end\n  return md5.sumhexa(text)\n\
    end", "    if not text or text == '' then\n        return nil\n    end\n    return\
    \ md5.sumhexa(text)\nend", "    local mininum_text_length = 5\n    local text_length\
    \ = #text\n    if text_length < mininum_text_length then\n        return None\n\
    \    end\n    local m = md5.new()\n    m:update(text)\n    return m:digest()\n\
    end", "    if text == '' then\n        return ''\n    end\n    return ngx.md5(text)\n\
    end", "    if text == nil or text == '' then\n        return nil\n    end\n  \
    \  local md5 = require('md5')\n    local m = md5.new()\n    m:update(text)\n \
    \   return m:hexdigest()\nend", "  if text then\n    return md5.sumhexa(text)\n\
    \  end\n  return nil\nend", "    if type(text) ~= 'string' or text == '' then\n\
    \        return nil\n    end\n    return md5.sumhexa(text)\nend", "    local text_as_bytes\
    \ = text:as_bytes()\n    local md5_hash = md5.sum(text_as_bytes)\n    return md5_hash:to_hex()\n\
    end", "  local buffer = crypto.digest('md5', text)\n  if buffer then\n    return\
    \ string.gsub( buffer:toHex(), '(..)', function(h) return string.char(tonumber(h,\
    \ 16)) end )\n  end\nend", "    assert(text and type(text) == 'string')\n    if\
    \ text == '' then return nil end\n    return md5.sumhexa(text)\nend", "  assert(type(text)\
    \ == 'string', 'text must be a string')\n  local md5 = mhash.MHASH_MD5:new()\n\
    \  md5:update(text)\n  return md5:to_hex()\nend", "    return text ~= '' and md5.sumhexa(text)\
    \ or nil\nend", "  if type(text) ~= 'string' or #text == 0 then\n    return nil\n\
    \  end\n  local result = md5.sumhexa(text)\n  return result\nend", "  if #text\
    \ == 0 then\n    return nil\n  end\n  local digest = md5.sumhexa(text)\n  return\
    \ digest\nend", "    if text == nil or text == '' then\n        return None\n\
    \    end\n    local md5 = require('md5')\n    local hash = md5.sumhexa(text)\n\
    \    return hash\nend", "    if text == '' then\n        return ''\n    end\n\
    \    local md5 = require('md5')\n    return md5.sumhexa(text)\nend", "    if #text\
    \ == 0 then\n        return nil\n    end\n    local digest = md5.sumhexa(text)\n\
    \    return digest\nend", "    if text then\n        return md5(text)\n    end\n\
    \    return None\nend", "    if text == '' then\n        return None\n    end\n\
    \    local md5_text = md5.sumhexa(text)\n    return md5_text\nend", "    return\n\
    \        select(2, text:gsub('.', function(x)\n            local r,_ = '',(x:byte()\
    \ % 0x10)\n            for i=8,1,-1 do r=r..(math.floor(_/2^i) % 2) end\n    \
    \        return r;\n        end))\n        :gsub('%d%d?%d?%d?%d?%d?%d?%d?', function(x)\n\
    \            if (#x ~= 8) then return '' end\n            local c=0\n        \
    \    for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end\n            return\
    \ string.char(c)\n        end)\nend", "    if text == '' then\n        return\
    \ None\n    end\n    return crypt.md5(text)\nend", "    if text == '' then\n \
    \       return\n    end\n    local md5 = require('md5')\n    return md5.sumhexa(text)\n\
    end", "    if not text or text == '' then\n        return nil\n    end\n    return\
    \ md5.sumhexa(text)\nend", "    if text == '' then\n        return nil\n    end\n\
    \    -- MD5 is available in Lua 5.2, but in Lua 5.1 and LuaJIT we need to use\
    \ it\n    -- from an external module.\n    local md5 = require('md5')\n    return\
    \ md5.sumhexa(text)\nend", "    if (text ~= '') then\n        return md5.sumhexa(text)\n\
    \    end\n    return ''\nend", "  if text == '' then\n    return nil\n  end\n\
    \  return md5.sumhexa(text)\nend", "    if text == nil or text == '' then\n  \
    \      return nil\n    end\n    return digest.md5(text)\nend", "    assert(type(text)\
    \ == 'string', '\"text\" must be a string.')\n    if text == '' then return nil\
    \ end\n    return md5.sumhexa(text)\nend", "    if text and #text > 0 then\n \
    \       return ngx.md5(text)\n    end\nend", "    if text == '' then\n       \
    \ return nil\n    end\n    local m = md5.new()\n    m:update(text)\n    return\
    \ m:hexdigest()\nend", "    if text == '' then\n        return nil\n    end\n\
    \    local md5 = require 'md5'\n    return md5.sumhexa(text)\nend", "    if text\
    \ == '' then\n        return nil\n    end\n    return luautil.md5(text):hexdigest()\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
