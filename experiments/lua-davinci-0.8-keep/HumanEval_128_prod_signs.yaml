name: HumanEval_128_prod_signs
language: lua
prompt: "-- You are given an array arr of integers and you need to return\n-- sum\
  \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
  \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
  -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1]) ==\
  \ 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
  \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
  \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
  \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
  \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
  \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if #arr == 0 then return nil end\n    local sum, prod = 0, 1\n\
    \    for _, val in ipairs(arr) do\n        sum = sum + math.abs(val)\n       \
    \ prod = prod * (val > 0 and 1 or val < 0 and -1 or 0)\n    end\n    return sum\
    \ * prod\nend", "  local n = #arr\n  if n == 0 then return nil end\n  local sum\
    \ = 0\n  local prod = 1\n  for i = 1, n do\n    local x = arr[i]\n    if x ==\
    \ 0 then\n      prod = 0\n      break\n    elseif x < 0 then\n      prod = -prod\n\
    \    end\n    sum = sum + math.abs(x)\n  end\n  return sum * prod\nend", "   \
    \ local res = 1\n    local sum = 0\n    for i, v in ipairs(arr) do\n        local\
    \ sign = v > 0 and 1 or v < 0 and -1 or 0\n        sum = sum + math.abs(v)\n \
    \       res = res * sign\n    end\n    return sum * res\nend", "    local sum\
    \ = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum +\
    \ math.abs(v)\n        if v < 0 then\n            prod = prod * -1\n        elseif\
    \ v > 0 then\n            prod = prod * 1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend", end, "    if #arr ==\
    \ 0 then return nil end\n    local result = 1\n    for _, v in ipairs(arr) do\n\
    \        result = result * (v / math.abs(v))\n    end\n    return result * sum(map(math.abs,\
    \ arr))\nend", "\tlocal result = 1\n\tlocal sign = 1\n\tfor i = 1, #arr do\n\t\
    \tif arr[i] < 0 then\n\t\t\tsign = -1\n\t\telseif arr[i] > 0 then\n\t\t\tsign\
    \ = 1\n\t\telse\n\t\t\tsign = 0\n\t\tend\n\t\tresult = result * sign\n\tend\n\t\
    local sum = 0\n\tfor i = 1, #arr do\n\t\tsum = sum + math.abs(arr[i])\n\tend\n\
    \treturn result * sum\nend", "    if #arr == 0 then return nil end\n    local\
    \ sgns = 1\n    local sums = 0\n    for _,x in ipairs(arr) do\n        sgns =\
    \ sgns * (x == 0 and 0 or (x > 0 and 1 or -1))\n        sums = sums + math.abs(x)\n\
    \    end\n    return sgns * sums\nend", "\tif arr == nil or #arr == 0 then\n\t\
    \treturn nil\n\tend\n\t\n\tlocal prod = 1\n\tlocal sum = 0\n\tfor _, a in ipairs(arr)\
    \ do\n\t\tif a == 0 then\n\t\t\tprod = 0\n\t\t\tbreak\n\t\telseif a > 0 then\n\
    \t\t\tprod = prod * 1\n\t\telse\n\t\t\tprod = prod * -1\n\t\tend\n\t\tsum = sum\
    \ + math.abs(a)\n\tend\n\treturn prod * sum\nend", "    local res = 1\n    local\
    \ size = #arr\n    if size == 0 then\n        return nil\n    end\n    for i =\
    \ 1, size do\n        local sign = arr[i]\n        if sign == 0 then\n       \
    \     res = 0\n            break\n        elseif sign < 0 then\n            res\
    \ = res * -1\n        end\n    end\n    return res\nend", "  if not arr then return\
    \ end\n  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    prod\
    \ = prod * sign(v)\n    sum = sum + math.abs(v)\n  end\n  return prod * sum\n\
    end", "    if #arr == 0 then return nil end\n    local res = 0\n    local sum\
    \ = 0\n    for _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n     \
    \   if v < 0 then\n            res = res - 1\n        elseif v > 0 then\n    \
    \        res = res + 1\n        end\n    end\n    return res * sum\nend", "  \
    \  if arr == nil or #arr == 0 then\n        return nil\n    end\n    local r =\
    \ 0\n    local p = 1\n    for _, v in ipairs(arr) do\n        r = r + math.abs(v)\n\
    \        if v > 0 then\n            p = p * 1\n        elseif v < 0 then\n   \
    \         p = p * -1\n        else\n            p = p * 0\n        end\n    end\n\
    \    return r * p\nend", "    -- TODO: solution\nend", "    local sum = 0\n  \
    \  local prod = 1\n    for _, v in ipairs(arr) do\n        local abs = math.abs(v)\n\
    \        sum = sum + abs\n        prod = prod * sign(v)\n    end\n    return sum\
    \ * prod\nend", "  local sum = 0\n  local prod = 1\n  for i, v in ipairs(arr)\
    \ do\n    local sign = 0\n    if v > 0 then\n      sign = 1\n    elseif v < 0\
    \ then\n      sign = -1\n    end\n    prod = prod * sign\n    sum = sum + math.abs(v)\n\
    \  end\n  return sum * prod\nend", "  -- \nend", "    if not arr or #arr == 0\
    \ then\n        return nil\n    end\n    local res = 0\n    local sign = 1\n \
    \   for _, v in ipairs(arr) do\n        if v < 0 then\n            sign = sign\
    \ * -1\n        elseif v > 0 then\n            sign = sign * 1\n        else\n\
    \            sign = 0\n            break\n        end\n        res = res + math.abs(v)\n\
    \    end\n    return res * sign\nend", "    if arr == nil or #arr == 0 then\n\
    \        return nil\n    end\n    local s = 1\n    local p = 1\n    for _, v in\
    \ ipairs(arr) do\n        local m = math.abs(v)\n        local sgn = math.sign(v)\n\
    \        s = s + m\n        p = p * sgn\n    end\n    return s * p\nend", "  if\
    \ not arr or #arr == 0 then return nil end\n  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v == 0 then\n      prod = 0\n    else\n\
    \      prod = prod * v / math.abs(v)\n      sum = sum + math.abs(v)\n    end\n\
    \  end\n  return prod * sum\nend", "    if #arr == 0 then return nil end\n   \
    \ local mult, sum = 1, 0\n    for _, v in ipairs(arr) do\n        if v ~= 0 then\n\
    \            mult = mult * ((v > 0) and 1 or -1)\n            sum = sum + math.abs(v)\n\
    \        end\n    end\n    return mult * sum\nend", "  if #arr == 0 then return\
    \ nil end\n  local sign_prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n\
    \    if v > 0 then\n      sign_prod = sign_prod * 1\n    elseif v < 0 then\n \
    \     sign_prod = sign_prod * -1\n    else\n      sign_prod = sign_prod * 0\n\
    \    end\n    sum = sum + math.abs(v)\n  end\n  return sum * sign_prod\nend",
  "    if #arr == 0 then return nil end\n    local signs = 1\n    local sum = 0\n\
    \    for _, num in ipairs(arr) do\n        if num == 0 then\n            return\
    \ 0\n        elseif num > 0 then\n            sum = sum + num\n        else\n\
    \            sum = sum - num\n            signs = signs * -1\n        end\n  \
    \  end\n    return sum * signs\nend", end, "    local sum = 0\n    local prod\
    \ = 1\n    for i = 1, #arr do\n        sum = sum + math.abs(arr[i])\n        if\
    \ arr[i] > 0 then\n            prod = prod * 1\n        elseif arr[i] < 0 then\n\
    \            prod = prod * -1\n        else\n            prod = prod * 0\n   \
    \     end\n    end\n    return prod * sum\nend", "  if not arr or #arr == 0 then\
    \ return nil end\n  local signs = 1\n  local sum = 0\n  for _, v in ipairs(arr)\
    \ do\n    if v == 0 then\n      signs = 0\n    else\n      signs = signs * (v\
    \ / math.abs(v))\n      sum = sum + math.abs(v)\n    end\n  end\n  return sum\
    \ * signs\nend", "    if next(arr) == nil then\n        return nil\n    end\n\
    \    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n     \
    \   if v < 0 then\n            prod = prod * -1\n        elseif v > 0 then\n \
    \           prod = prod * 1\n        else\n            prod = prod * 0\n     \
    \   end\n        sum = sum + math.abs(v)\n    end\n    return prod * sum\nend",
  "  local signs = table.map(function(x) return (x > 0 and 1) or ((x < 0 and -1) or\
    \ 0) end, arr)\n  return (table.reduce(signs, math.mul, 1) * table.reduce(arr,\
    \ math.add, 0))\nend", "\tlocal product = 1\n\tlocal sum = 0\n\tfor i = 1, #arr\
    \ do\n\t\tlocal sign = arr[i] / math.abs(arr[i])\n\t\tproduct = product * sign\n\
    \t\tsum = sum + math.abs(arr[i])\n\tend\n\tif product == 0 then\n\t\treturn 0\n\
    \telse\n\t\treturn product * sum\n\tend\nend", "  local _result = 0\n  local _skip\
    \ = false\n  for _, _a in ipairs(arr) do\n    if _a == 0 then\n      _skip = true\n\
    \      break\n    end\n    _result = _result + math.abs(_a)\n  end\n  return (_skip\
    \ and nil) or _result\nend", "    local sum, sign, product = 0, 1, 1\n    for\
    \ _, num in ipairs(arr) do\n        if num == 0 then\n            sign = 0\n \
    \       elseif num < 0 then\n            product = product * -1\n        end\n\
    \        sum = sum + math.abs(num)\n    end\n    return sign * product * sum\n\
    end", "    local prod = 1\n    local sum = 0\n    for _, x in ipairs(arr) do\n\
    \        prod = prod * sign(x)\n        sum = sum + abs(x)\n    end\n    return\
    \ prod * sum\nend", "  if #arr == 0 then return nil end\n  local res = 0\n  local\
    \ prod = 1\n  for i = 1, #arr do\n    local x = arr[i]\n    if x > 0 then\n  \
    \    res = res + x\n    elseif x < 0 then\n      res = res - x\n      prod = prod\
    \ * -1\n    end\n  end\n  return res * prod\nend", "    local prod, sum = 1, 0\n\
    \    for _, i in ipairs(arr) do\n        sum = sum + math.abs(i)\n        prod\
    \ = prod * (i == 0 and 1 or i / math.abs(i))\n    end\n    return prod == 0 and\
    \ nil or prod * sum\nend", "  if #arr == 0 then return nil end\n  local sum, prod\
    \ = 0, 1\n  for _, v in ipairs(arr) do\n    local sign = signum(v)\n    sum =\
    \ sum + math.abs(v)\n    prod = prod * sign\n  end\n  return sum * prod\nend",
  "    local sum, prod = 0, 1\n    for _, i in ipairs(arr) do\n        sum = sum +\
    \ math.abs(i)\n        prod = prod * math.sign(i)\n    end\n    return prod *\
    \ sum\nend", "    local res = 1\n    for _, v in ipairs(arr) do\n        if v\
    \ > 0 then\n            res = res * 1\n        elseif v < 0 then\n           \
    \ res = res * -1\n        else\n            res = res * 0\n        end\n    end\n\
    \    return res\nend", "    local prod = 1\n    local sum = 0\n    for _, v in\
    \ ipairs(arr) do\n        prod = prod * v\n        sum = sum + math.abs(v)\n \
    \   end\n    if prod ~= 0 then\n        return prod * sum\n    else\n        return\
    \ nil\n    end\nend", "  local prod = 1\n  local sum = 0\n  for i = 1, #arr do\n\
    \    local n = arr[i]\n    if n > 0 then\n      prod = prod * 1\n    elseif n\
    \ < 0 then\n      prod = prod * -1\n    else\n      prod = prod * 0\n    end\n\
    \    sum = sum + math.abs(n)\n  end\n  return prod * sum\nend", "    if #arr ==\
    \ 0 then return nil end\n    local signs = {[1] = 1, [-1] = -1, [0] = 0}\n   \
    \ local product = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n     \
    \   product = product * signs[v]\n        sum = sum + math.abs(v)\n    end\n \
    \   return product * sum\nend", "    if arr == nil or #arr == 0 then\n       \
    \ return nil\n    end\n    local prod, sum = 1, 0\n    for _, x in ipairs(arr)\
    \ do\n        prod = prod * (x > 0 and 1 or (x < 0 and -1 or 0))\n        sum\
    \ = sum + math.abs(x)\n    end\n    return prod * sum\nend", "  local prod = 1\n\
    \  local sum = 0\n  if arr == nil or #arr == 0 then\n    return nil\n  end\n \
    \ for _,v in ipairs(arr) do\n    if v == 0 then\n      prod = 0\n    elseif v\
    \ > 0 then\n      prod = prod * 1\n    else\n      prod = prod * -1\n    end\n\
    \    sum = sum + math.abs(v)\n  end\n  return prod * sum\nend", "  if #arr ==\
    \ 0 then return nil end\n  local res = 1\n  for _, x in ipairs(arr) do\n    if\
    \ x == 0 then return 0 end\n    if x < 0 then res = res * -1 end\n  end\n  return\
    \ res * sum_magnitudes(arr)\nend", "    local prod = 1\n    local sum = 0\n  \
    \  for _, v in ipairs(arr) do\n        local sign = sign(v)\n        if sign then\n\
    \            prod = prod * sign\n            sum = sum + math.abs(v)\n       \
    \ end\n    end\n    return prod * sum\nend", "    local prod = 1\n    local sum\
    \ = 0\n    for _, v in ipairs(arr) do\n        prod = prod * (v > 0 and 1 or (v\
    \ < 0 and -1 or 0))\n        sum = sum + math.abs(v)\n    end\n    return prod\
    \ * sum\nend", "\tif arr == nil or #arr == 0 then\n\t\treturn nil\n\tend\n\tlocal\
    \ ret = 0\n\tlocal sign = 1\n\tfor i = 1, #arr do\n\t\tif arr[i] > 0 then\n\t\t\
    \tret = ret + arr[i]\n\t\telseif arr[i] < 0 then\n\t\t\tret = ret - arr[i]\n\t\
    \t\tsign = sign * -1\n\t\tend\n\tend\n\treturn ret * sign\nend", "    local summ\
    \ = 0\n    local prod = 1\n    for _, num in ipairs(arr) do\n        summ = summ\
    \ + math.abs(num)\n        if num > 0 then\n            prod = prod * 1\n    \
    \    elseif num < 0 then\n            prod = prod * -1\n        else\n       \
    \     prod = prod * 0\n        end\n    end\n    return summ * prod\nend", " \
    \   local signs = {1, -1, 0}\n    if #arr == 0 then return nil end\n    local\
    \ result = 1\n    for i = 1, #arr do\n        local sign = arr[i] / math.abs(arr[i])\n\
    \        local magnitude = math.abs(arr[i])\n        result = result * sign *\
    \ magnitude\n    end\n    return result\nend", "    local sum, prod = 0, 1\n \
    \   for _, v in ipairs(arr) do\n        local sign = v > 0 and 1 or v < 0 and\
    \ -1 or 0\n        sum = sum + math.abs(v)\n        prod = prod * sign\n    end\n\
    \    return sum * prod\nend", "    local sum, prod = 0, 1\n    for i = 1, #arr\
    \ do\n        local x = arr[i]\n        if x > 0 then x = 1\n        elseif x\
    \ < 0 then x = -1 end\n        sum = sum + math.abs(arr[i])\n        prod = prod\
    \ * x\n    end\n    return prod == 0 and nil or sum * prod\nend", "\t-- your code\
    \ here\n\tlocal prod_of_signs = 0\n\tlocal sum_of_mag = 0\n\tfor k, v in pairs(arr)\
    \ do\n\t\tif v > 0 then\n\t\t\tprod_of_signs = prod_of_signs + 1\n\t\telseif v\
    \ < 0 then\n\t\t\tprod_of_signs = prod_of_signs - 1\n\t\tend\n\t\tsum_of_mag =\
    \ sum_of_mag + math.abs(v)\n\tend\n\tif #arr == 0 then\n\t\treturn\n\tend\n\t\
    return prod_of_signs * sum_of_mag\nend", "    if #arr == 0 then return nil end\n\
    \    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n     \
    \   prod = prod * sign(v)\n        sum = sum + math.abs(v)\n    end\n    return\
    \ prod * sum\nend", "    local sum, prod = 0, 1\n    for _, x in ipairs(arr) do\n\
    \        if x > 0 then prod = prod * 1\n        elseif x < 0 then prod = prod\
    \ * -1\n        else prod = prod * 0 end\n        sum = sum + math.abs(x)\n  \
    \  end\n    return sum * prod\nend", "    if #arr == 0 then return nil end\n \
    \   local sum = 0\n    local neg_count = 0\n    for _, v in ipairs(arr) do\n \
    \       if v < 0 then neg_count = neg_count + 1 end\n        sum = sum + math.abs(v)\n\
    \    end\n    if neg_count % 2 == 0 then return sum\n    else return -sum end\n\
    end", "    if not arr then return end\n    if #arr == 0 then return end\n    local\
    \ prod = 1\n    local sum = 0\n    for i = 1, #arr do\n        if arr[i] == 0\
    \ then\n            prod = prod * 0\n        elseif arr[i] > 0 then\n        \
    \    prod = prod * 1\n        else\n            prod = prod * -1\n        end\n\
    \        sum = sum + math.abs(arr[i])\n    end\n    return prod * sum\nend\nassert(prod_signs({1,\
    \ 2, 2, -4}) == -9)\nassert(prod_signs({0, 1}) == 0)\nassert(prod_signs({}) ==\
    \ nil)", "    -- your code goes here\nend", "  if #arr == 0 then return nil end\n\
    \  local res = 0\n  local total = 1\n  for i, v in ipairs(arr) do\n    if v ==\
    \ 0 then return 0 end\n    if v > 0 then\n      res = res + v\n    else\n    \
    \  res = res - v\n      total = total * -1\n    end\n  end\n  return res * total\n\
    end", "  if not arr or #arr == 0 then return nil end\n  local product, sum = 1,\
    \ 0\n  for _, num in ipairs(arr) do\n    local sign = (num > 0 and 1) or (num\
    \ < 0 and -1) or 0\n    product = product * sign\n    sum = sum + math.abs(num)\n\
    \  end\n  return product * sum\nend", "    local sum = 0\n    local prod = 1\n\
    \    for _, n in ipairs(arr) do\n        sum = sum + math.abs(n)\n        if n\
    \ < 0 then\n            prod = prod * -1\n        elseif n == 0 then\n       \
    \     prod = 0\n        end\n    end\n    return sum * prod\nend", "  -- your\
    \ code goes here\nend", "  local prod = 1\n  local sum = 0\n  for i, n in ipairs(arr)\
    \ do\n    if n > 0 then\n      prod = prod * 1\n      sum = sum + n\n    elseif\
    \ n < 0 then\n      prod = prod * -1\n      sum = sum + math.abs(n)\n    else\n\
    \      prod = prod * 0\n    end\n  end\n  return prod * sum\nend", "  local prod\
    \ = 1\n  local sum = 0\n  for _, x in ipairs(arr) do\n    if x > 0 then\n    \
    \  prod = prod * 1\n      sum = sum + x\n    elseif x < 0 then\n      prod = prod\
    \ * -1\n      sum = sum + -x\n    else\n      sum = sum + x\n    end\n  end\n\
    \  return sum * prod\nend", end, "    -- your code here\nend", end, "    if #arr\
    \ == 0 then return nil end\n    local res = 1\n    for _, val in ipairs(arr) do\n\
    \        if val > 0 then\n            res = res * 1\n        elseif val < 0 then\n\
    \            res = res * -1\n        else\n            res = res * 0\n       \
    \ end\n    end\n    local sum = 0\n    for _, val in ipairs(arr) do\n        sum\
    \ = sum + math.abs(val)\n    end\n    return sum * res\nend", "  local len = #arr\n\
    \  if len == 0 then return nil end\n  local result = 1\n  for i = 1, len do\n\
    \    result = result * math.sign(arr[i])\n  end\n  local sum = 0\n  for i = 1,\
    \ len do\n    sum = sum + math.abs(arr[i])\n  end\n  return result * sum\nend",
  "    local sum, mul = 0, 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n\
    \            sum = sum + v\n        elseif v < 0 then\n            sum = sum -\
    \ v\n            mul = mul * -1\n        else\n            mul = 0\n        end\n\
    \    end\n    return sum * mul\nend", "    if #arr == 0 then return nil end\n\
    \    local s, m = 1, 0\n    for _, v in ipairs(arr) do\n        s = s * (v < 0\
    \ and -1 or v > 0 and 1 or 0)\n        m = m + math.abs(v)\n    end\n    return\
    \ s * m\nend\n_G.prod_signs = prod_signs", "    local res = 1\n    local sum =\
    \ 0\n    for _,v in ipairs(arr) do\n        local sign = math.sign(v)\n      \
    \  if sign == 0 then\n            sum = sum + math.abs(v)\n        else\n    \
    \        res = res * sign\n            sum = sum + math.abs(v)\n        end\n\
    \    end\n    return sum * res\nend", "    if not arr then return end\n    local\
    \ sum = 0\n    local prod = 1\n    for i = 1, #arr do\n        if arr[i] == 0\
    \ then\n            return 0\n        elseif arr[i] > 0 then\n            sum\
    \ = sum + arr[i]\n        else\n            sum = sum - arr[i]\n            prod\
    \ = prod * -1\n        end\n    end\n    return sum * prod\nend", "    local res\
    \ = 1\n    for _, i in ipairs(arr) do\n        if i > 0 then\n            res\
    \ = res * 1\n        elseif i < 0 then\n            res = res * -1\n        else\n\
    \            res = res * 0\n        end\n    end\n    local res2 = 0\n    for\
    \ _, i in ipairs(arr) do\n        res2 = res2 + math.abs(i)\n    end\n    return\
    \ res * res2\nend", "  local sum = 0\n  local product = 1\n  for i = 1, #arr do\n\
    \    local item = arr[i]\n    if item > 0 then\n      sum = sum + item\n     \
    \ product = product * 1\n    elseif item < 0 then\n      sum = sum + item * -1\n\
    \      product = product * -1\n    else\n      product = product * 0\n    end\n\
    \  end\n  return sum * product\nend", "    if #arr == 0 then return nil end\n\
    \    local prod, sum = 1, 0\n    for _, num in ipairs(arr) do\n        prod =\
    \ prod * math.sign(num)\n        sum = sum + math.abs(num)\n    end\n    return\
    \ prod * sum\nend", "    if #arr == 0 then return nil end\n    local prod, sum\
    \ = 1, 0\n    for _, v in ipairs(arr) do\n        prod = prod * (v >= 0 and 1\
    \ or -1)\n        sum = sum + math.abs(v)\n    end\n    return prod * sum\nend",
  "  local function sign(x)\n    if x > 0 then return 1\n    elseif x < 0 then return\
    \ -1\n    else return 0 end\n  end\n  local product = 1\n  local sum = 0\n  for\
    \ _, x in ipairs(arr) do\n    product = product * sign(x)\n    sum = sum + math.abs(x)\n\
    \  end\n  return product * sum\nend", "    local res = 0\n    local sign = 1\n\
    \    if not arr then return nil end\n    for i, v in ipairs(arr) do\n        res\
    \ = res + math.abs(v)\n        if v ~= 0 then\n            sign = sign * (v /\
    \ math.abs(v))\n        end\n    end\n    return res * sign\nend", "\tlocal sum\
    \ = 0\n\tlocal mul = 1\n\tfor i = 1, #arr do\n\t\tlocal sign = math.sign(arr[i])\n\
    \t\tmul = mul * sign\n\t\tsum = sum + math.abs(arr[i])\n\tend\n\treturn mul ==\
    \ 0 and nil or sum * mul\nend", "  local sum = 0\n  local prod = 1\n  if not arr\
    \ then return end\n  for i = 1, #arr do\n    if arr[i] < 0 then prod = prod *\
    \ -1 end\n    sum = sum + math.abs(arr[i])\n  end\n  return sum * prod\nend",
  "    if #arr == 0 then return nil end\n    local ret = 0\n    local mult = 1\n \
    \   for _, v in ipairs(arr) do\n        if v == 0 then\n            mult = 0\n\
    \        else\n            ret = ret + math.abs(v)\n        end\n        mult\
    \ = mult * math.sign(v)\n    end\n    return ret * mult\nend", "    if not arr\
    \ then return nil end\n    local signs = { }\n    local magnitudes = { }\n   \
    \ for _, v in ipairs(arr) do\n        local magnitude = math.abs(v)\n        table.insert(magnitudes,\
    \ magnitude)\n        local sign = 1\n        if v == 0 then\n            sign\
    \ = 0\n        elseif v < 0 then\n            sign = -1\n        end\n       \
    \ table.insert(signs, sign)\n    end\n    return sum(magnitudes) * product(signs)\n\
    end", "  local res, n = 1, #arr\n  if n == 0 then return nil end\n  for i = 1,\
    \ n do\n    local v = arr[i]\n    if v < 0 then\n      res = res * -1\n    elseif\
    \ v == 0 then\n      return 0\n    end\n  end\n  return res\nend", "  local s\
    \ = 0\n  for i = 1, #arr do\n    s = s + math.abs(arr[i]) * arr[i]\n  end\n  return\
    \ s\nend", "    local sum = 0\n    local prod = 1\n    for i = 1, #arr do\n  \
    \      if arr[i] == 0 then\n            return nil\n        elseif arr[i] > 0\
    \ then\n            sum = sum + arr[i]\n        else\n            sum = sum -\
    \ arr[i]\n            prod = prod * -1\n        end\n    end\n    return sum *\
    \ prod\nend", end, "    local result = 0\n    local prod = 1\n    if #arr == 0\
    \ then\n        return nil\n    end\n    for i, v in ipairs(arr) do\n        if\
    \ v > 0 then\n            prod = prod * 1\n        elseif v < 0 then\n       \
    \     prod = prod * -1\n        else\n            prod = prod * 0\n        end\n\
    \        result = result + v\n    end\n    return result * prod\nend", "  if #arr\
    \ < 1 then return nil end\n  local signs = {}\n  for _, n in ipairs(arr) do\n\
    \    table.insert(signs, (n > 0 and 1) or (n < 0 and -1) or 0)\n  end\n  local\
    \ sum = 0\n  for _, n in ipairs(arr) do\n    sum = sum + math.abs(n)\n  end\n\
    \  return sum * table.prod(signs)\nend", "    local sum, prod = 0, 1\n    for\
    \ _, v in ipairs(arr) do\n        if v > 0 then\n            sum = sum + v\n \
    \       elseif v < 0 then\n            sum = sum - v\n            prod = prod\
    \ * -1\n        else\n            prod = 0\n        end\n    end\n    return sum\
    \ * prod\nend", "    if #arr == 0 then return nil end\n    local prod, sum = 1,\
    \ 0\n    for _, v in ipairs(arr) do\n        prod = prod * (v == 0 and 1 or v/math.abs(v))\n\
    \        sum = sum + math.abs(v)\n    end\n    return sum * prod\nend", "  local\
    \ sum = 0\n  local sign = 1\n  for i = 1, #arr do\n    local v = arr[i]\n    sum\
    \ = sum + math.abs(v)\n    if v < 0 then\n      sign = sign * -1\n    elseif v\
    \ == 0 then\n      sign = 0\n    end\n  end\n  return sum * sign\nend", "    local\
    \ prod = 1\n    local sum = 0\n    for _, i in ipairs(arr) do\n        prod =\
    \ prod * (i == 0 and 0 or i / math.abs(i))\n        sum = sum + math.abs(i)\n\
    \    end\n    return sum * prod\nend", "    local prod = 1\n    local sum = 0\n\
    \    for i = 1, #arr do\n        local x = arr[i]\n        if x == 0 then\n  \
    \          return 0\n        elseif x > 0 then\n            prod = prod * 1\n\
    \        else\n            prod = prod * -1\n        end\n        sum = sum +\
    \ math.abs(x)\n    end\n    return prod * sum\nend", "  -- your code here\nend",
  "    local prod = 0\n    for i, v in ipairs(arr) do\n        prod = prod + math.abs(v)\
    \ * (v > 0 and 1 or v < 0 and -1 or 0)\n    end\n    return prod\nend", "  --\
    \ your code here\nend", "    local sum, product = 0, 1\n    for _, val in ipairs(arr)\
    \ do\n        if val > 0 then\n            sum = sum + val\n        elseif val\
    \ < 0 then\n            sum = sum - val\n            product = product * (-1)\n\
    \        end\n    end\n    return product * sum\nend\nassert(prod_signs({1, 2,\
    \ 2, -4}) == -9)\nassert(prod_signs({0, 1}) == 0)\nassert(prod_signs({}) == nil)",
  "  if arr == nil or #arr == 0 then return nil end\n  local sum, prod = 0, 1\n  for\
    \ _, x in ipairs(arr) do\n    local mod_x = math.abs(x)\n    local sign_x = x\
    \ == 0 and 0 or x/mod_x\n    sum = sum + mod_x\n    prod = prod * sign_x\n  end\n\
    \  return sum * prod\nend", "    local sum = 0\n    local prod = 1\n    for _,\
    \ v in ipairs(arr) do\n        local sign = 1\n        if v < 0 then\n       \
    \     sign = -1\n        elseif v == 0 then\n            sign = 0\n        end\n\
    \        sum = sum + math.abs(v)\n        prod = prod * sign\n    end\n    return\
    \ prod * sum\nend", "  if #arr == 0 then return nil end\n  local sum, prod = 0,\
    \ 1\n  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n    prod = prod\
    \ * (v == 0 and 1 or v / math.abs(v))\n  end\n  return sum * prod\nend", "   \
    \ local sum = 0\n    local prod = 1\n    for _,v in ipairs(arr) do\n        local\
    \ sign = v > 0 and 1 or v < 0 and -1 or 0\n        sum = sum + math.abs(v)\n \
    \       prod = prod * sign\n    end\n    return sum * prod\nend", "    local product\
    \ = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v == 0 then\n\
    \            product = 0\n        elseif v > 0 then\n            product = product\
    \ * 1\n        else\n            product = product * -1\n        end\n       \
    \ sum = sum + math.abs(v)\n    end\n    return product * sum\nend", "    local\
    \ sum, mul = 0, 1\n    for _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n\
    \        mul = mul * (v < 0 and -1 or v > 0 and 1 or 0)\n    end\n    return sum\
    \ * mul\nend", "    local res = 1\n    for _, v in ipairs(arr) do\n        if\
    \ v > 0 then\n            res = res * 1\n        elseif v < 0 then\n         \
    \   res = res * -1\n        else\n            res = res * 0\n        end\n   \
    \ end\n    local sum = 0\n    for _, v in ipairs(arr) do\n        sum = sum +\
    \ math.abs(v)\n    end\n    return sum * res\nend", "  local sum, mul = 0, 1\n\
    \  for _, x in ipairs(arr) do\n    sum = sum + math.abs(x)\n    if x ~= 0 then\n\
    \      mul = mul * (x > 0 and 1 or -1)\n    end\n  end\n  return arr[1] and sum\
    \ * mul or nil\nend", "    if #arr == 0 then return nil end\n    local p = 1\n\
    \    local s = 0\n    for _, v in ipairs(arr) do\n        if v > 0 then\n    \
    \        p = p * 1\n            s = s + v\n        elseif v < 0 then\n       \
    \     p = p * -1\n            s = s - v\n        end\n    end\n    return p *\
    \ s\nend", "    -- Place your code here\nend", "  if #arr == 0 then return nil\
    \ end\n  local mult, sign, sum = 1, 1, 0\n  for i,v in ipairs(arr) do\n    if\
    \ v < 0 then sign = -1 end\n    if v > 0 then sign = 1 end\n    if v == 0 then\
    \ sign = 0 end\n    mult = mult * sign\n    sum = sum + math.abs(v)\n  end\n \
    \ return mult * sum\nend", "    local sum = 0\n    local prod = 1\n    for i =\
    \ 1, #arr do\n        sum = sum + math.abs(arr[i])\n        if arr[i] == 0 then\n\
    \            prod = 0\n        else\n            prod = prod * arr[i] / math.abs(arr[i])\n\
    \        end\n    end\n    return sum * prod\nend", "\tlocal sum = 0\n\tlocal\
    \ prod = 1\n\tfor _, val in ipairs(arr) do\n\t\tsum = sum + math.abs(val)\n\t\t\
    if val == 0 then\n\t\t\tprod = 0\n\t\telse\n\t\t\tprod = prod * ((val > 0) and\
    \ 1 or -1)\n\t\tend\n\tend\n\treturn prod * sum\nend", "    local signs = table.map(arr,\
    \ sign)\n    local mags = table.map(arr, abs)\n    local product = table.reduce(signs,\
    \ mul)\n    local sum = table.reduce(mags, add)\n    return sum * product\nend",
  "    if type(arr) ~= 'table' then\n        return nil\n    end\n    local muls =\
    \ 1\n    local mag = 0\n    for _, v in ipairs(arr) do\n        if v == 0 then\n\
    \            muls = 0\n            break\n        elseif v > 0 then\n        \
    \    muls = muls * 1\n        else\n            muls = muls * -1\n        end\n\
    \        mag = mag + math.abs(v)\n    end\n    return muls * mag\nend", "    if\
    \ #arr == 0 then return nil end\n    local ret = 0\n    local neg = 1\n    for\
    \ _, v in ipairs(arr) do\n        ret = ret + math.abs(v)\n        if v < 0 then\
    \ neg = neg * -1 end\n    end\n    return ret * neg\nend", "    local prod = 1\n\
    \    local sum = 0\n    for _, val in ipairs(arr) do\n        local sign = val\
    \ >= 0 and 1 or -1\n        sum = sum + math.abs(val)\n        prod = prod * sign\n\
    \    end\n    return prod * sum\nend", "  local sum = 0\n  local prod = 1\n  if\
    \ #arr == 0 then return nil end\n  for _, n in ipairs(arr) do\n    if n < 0 then\n\
    \      prod = prod * -1\n      sum = sum + n * -1\n    elseif n > 0 then\n   \
    \   sum = sum + n\n    end\n  end\n  return sum * prod\nend", "  local sum = 0\n\
    \  local product = 1\n  for i = 1, #arr do\n    local sign = math.sign(arr[i])\n\
    \    if sign ~= 0 then\n      sum = sum + math.abs(arr[i])\n      product = product\
    \ * sign\n    end\n  end\n  return sum * product\nend", "  if #arr == 0 then return\
    \ nil end\n  local sum, prod = 0, 1\n  for _, v in ipairs(arr) do\n    sum = sum\
    \ + math.abs(v)\n    prod = prod * (v > 0 and 1 or (v < 0 and -1 or 0))\n  end\n\
    \  return sum * prod\nend", "    local new_arr = {}\n    local i = 1\n    for\
    \ k, v in pairs(arr) do\n        if v < 0 then\n            v = -v\n        end\n\
    \        new_arr[i] = v\n        i = i + 1\n    end\n    if next(new_arr) == nil\
    \ then\n        return nil\n    end\n    local res = 1\n    for k, v in pairs(arr)\
    \ do\n        if v > 0 then\n            res = res * 1\n        elseif v < 0 then\n\
    \            res = res * -1\n        else\n            res = res * 0\n       \
    \ end\n    end\n    local sum = 0\n    for k, v in pairs(new_arr) do\n       \
    \ sum = sum + v\n    end\n    return sum * res\nend", "    -- your code here\n\
    end", "  local prod = 1\n  local sum = 0\n  if #arr == 0 then return nil end\n\
    \  for i = 1, #arr do\n    if arr[i] > 0 then\n      prod = prod * 1\n      sum\
    \ = sum + arr[i]\n    elseif arr[i] < 0 then\n      prod = prod * -1\n      sum\
    \ = sum + arr[i] * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ sum * prod\nend", "  local product, sum = 1, 0\n  for _, i in ipairs(arr) do\n\
    \    if i > 0 then\n      product = product * 1\n      sum = sum + i\n    elseif\
    \ i < 0 then\n      product = product * -1\n      sum = sum + math.abs(i)\n  \
    \  else\n      product = product * 0\n    end\n  end\n  return sum * product\n\
    end", "  local product = 1\n  local sum = 0\n  for i, v in ipairs(arr) do\n  \
    \  if v == 0 then\n      product = product * 0\n    elseif v > 0 then\n      product\
    \ = product * 1\n      sum = sum + v\n    else\n      product = product * -1\n\
    \      sum = sum + math.abs(v)\n    end\n  end\n  if #arr == 0 then\n    return\
    \ nil\n  else\n    return product * sum\n  end\nend", "    if not arr or #arr\
    \ == 0 then\n        return nil\n    end\n    local prod = 1\n    local sum =\
    \ 0\n    for _, v in ipairs(arr) do\n        local sign = v > 0 and 1 or v < 0\
    \ and -1 or 0\n        sum = sum + math.abs(v)\n        prod = prod * sign\n \
    \   end\n    return sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for\
    \ _, v in ipairs(arr) do\n    local sign = get_sign(v)\n    if sign ~= 0 then\n\
    \      prod = prod * sign\n    end\n    sum = sum + math.abs(v)\n  end\n  return\
    \ sum * prod\nend", "  -- your code here\nend", "  if #arr == 0 then return nil\
    \ end\n  local sum = 0\n  local pr = 1\n  for i, v in ipairs(arr) do\n    local\
    \ c = v\n    if c < 0 then\n      c = -c\n      pr = -pr\n    elseif c == 0 then\n\
    \      pr = 0\n    end\n    sum = sum + c\n  end\n  return sum * pr\nend", " \
    \   local function prod(a, b)\n        if not a then return b end\n        if\
    \ not b then return a end\n        return a * b\n    end\n    local res = 0\n\
    \    for _, v in ipairs(arr) do\n        if v > 0 then\n            res = res\
    \ + v\n        elseif v < 0 then\n            res = res - v\n        end\n   \
    \ end\n    local prod_res = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod_res = prod(prod_res, 1)\n        elseif v < 0 then\n\
    \            prod_res = prod(prod_res, -1)\n        else\n            prod_res\
    \ = prod(prod_res, 0)\n        end\n    end\n    return res * prod_res\nend",
  "    local prod = 1\n    local sum = 0\n    for _, n in ipairs(arr) do\n       \
    \ prod = prod * (n > 0 and 1 or n < 0 and -1 or 0)\n        sum = sum + math.abs(n)\n\
    \    end\n    return prod * sum\nend", "  local prod = 1\n  local sum = 0\n  for\
    \ _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n      sum\
    \ = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum +\
    \ v\n    else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\nend",
  "    local sum, prod = 0, 1\n    for _, n in ipairs(arr) do\n        if n > 0 then\
    \ prod = prod * 1\n        elseif n < 0 then prod = prod * -1\n        else prod\
    \ = prod * 0 end\n        sum = sum + math.abs(n)\n    end\n    return prod *\
    \ sum\nend", "  local sum = 0\n  local product = 1\n  for i = 1, #arr do\n   \
    \ if arr[i] == 0 then\n      product = 0\n      break\n    elseif arr[i] > 0 then\n\
    \      product = product * 1\n    else\n      product = product * -1\n    end\n\
    \    sum = sum + math.abs(arr[i])\n  end\n  return product * sum\nend", "  local\
    \ prod, sum = 1, 0\n  for i,v in ipairs(arr) do\n    prod = prod * v/math.abs(v)\n\
    \    sum = sum + math.abs(v)\n  end\n  return prod * sum\nend", "  local p, s\
    \ = 1, 0\n  for i, v in ipairs(arr) do\n    if v == 0 then\n      p = 0\n    else\n\
    \      p = p * (v > 0 and 1 or -1)\n      s = s + math.abs(v)\n    end\n  end\n\
    \  return p ~= 0 and p * s or nil\nend", "\tif #arr == 0 then return nil end\n\
    \tlocal res = 1\n\tfor _, n in ipairs(arr) do\n\t\tif n > 0 then\n\t\t\tres =\
    \ res * n\n\t\telseif n < 0 then\n\t\t\tres = res * -n\n\t\telse\n\t\t\tres =\
    \ 0\n\t\t\tbreak\n\t\tend\n\tend\n\treturn res\nend", "    local product = 1\n\
    \    local sum = 0\n    for _, v in ipairs(arr) do\n        local sign = math.sign(v)\n\
    \        if sign == 0 then\n            product = 0\n        else\n          \
    \  product = product * sign\n        end\n        sum = sum + math.abs(v)\n  \
    \  end\n    return product * sum\nend", "  local signs = {}\n  local magnitudes\
    \ = {}\n  for _, n in ipairs(arr) do\n    if n > 0 then\n      signs[#signs +\
    \ 1] = 1\n      magnitudes[#magnitudes + 1] = n\n    elseif n < 0 then\n     \
    \ signs[#signs + 1] = -1\n      magnitudes[#magnitudes + 1] = -n\n    end\n  end\n\
    \  if #signs == 0 then\n    return nil\n  end\n  local sign_prod = 1\n  for _,\
    \ s in ipairs(signs) do\n    sign_prod = sign_prod * s\n  end\n  local magnitude_sum\
    \ = 0\n  for _, m in ipairs(magnitudes) do\n    magnitude_sum = magnitude_sum\
    \ + m\n  end\n  return sign_prod * magnitude_sum\nend", "    if #arr == 0 then\
    \ return nil end\n    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr)\
    \ do\n        prod = prod * (v >= 0 and 1 or v < 0 and -1 or 0)\n        sum =\
    \ sum + math.abs(v)\n    end\n    return prod * sum\nend", "  local result = 1\n\
    \  for i = 1, #arr do\n    local x = arr[i]\n    if x == 0 then\n      return\
    \ 0\n    elseif x < 0 then\n      result = result * -1\n    end\n  end\n  for\
    \ i = 1, #arr do\n    result = result * math.abs(arr[i])\n  end\n  return result\n\
    end", "    if not arr then return end\n    local sum, prod = 0, 1\n    for _,\
    \ v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v > 0 then\
    \ prod = prod * 1\n        elseif v < 0 then prod = prod * -1\n        end\n \
    \   end\n    return sum * prod\nend", "  local signs = {}\n  local sig = 1\n \
    \ for i = 1, #arr do\n    if arr[i] == 0 then\n      return 0\n    elseif arr[i]\
    \ < 0 then\n      sig = -1\n    else\n      sig = 1\n    end\n    table.insert(signs,\
    \ sig)\n  end\n  if #arr == 0 then\n    return nil\n  end\n  local prod = 1\n\
    \  for i = 1, #signs do\n    prod = prod * signs[i]\n  end\n  local sum = 0\n\
    \  for i = 1, #arr do\n    sum = sum + math.abs(arr[i])\n  end\n  return sum *\
    \ prod\nend", "  local res = 1\n  local mag = 0\n  if not arr or not next(arr)\
    \ then return nil end\n  for i, v in ipairs(arr) do\n    if v > 0 then\n     \
    \ res = res * 1\n    elseif v < 0 then\n      res = res * -1\n    else\n     \
    \ res = res * 0\n    end\n    mag = mag + math.abs(v)\n  end\n  return res * mag\n\
    end", "    local prod = 1\n    local sum = 0\n    for _,v in ipairs(arr) do\n\
    \        if v == 0 then\n            prod = 0\n        elseif v > 0 then\n   \
    \         prod = prod\n        else\n            prod = -prod\n        end\n \
    \       sum = sum + math.abs(v)\n    end\n    return prod * sum\nend", "    if\
    \ #arr == 0 then return nil end\n    local r = 1\n    for _,v in ipairs(arr) do\n\
    \        r = r * (v == 0 and 0 or v/math.abs(v))\n    end\n    local r1 = 0\n\
    \    for _,v in ipairs(arr) do\n        r1 = r1 + math.abs(v)\n    end\n    return\
    \ r * r1\nend", "    local p = 1\n    local s = 0\n    if #arr == 0 then\n   \
    \     return nil\n    end\n    for i = 1, #arr do\n        if arr[i] > 0 then\n\
    \            p = p * 1\n            s = s + arr[i]\n        elseif arr[i] < 0\
    \ then\n            p = p * -1\n            s = s + arr[i]\n        else\n   \
    \         p = p * 0\n            s = s + 0\n        end\n    end\n    return p\
    \ * s\nend", "    local prod = 1\n    local magnitudes = 0\n    for i, v in ipairs(arr)\
    \ do\n        if v < 0 then\n            prod = prod * -1\n        elseif v ==\
    \ 0 then\n            prod = 0\n        end\n        magnitudes = magnitudes +\
    \ math.abs(v)\n    end\n    return magnitudes * prod\nend", "    local prod =\
    \ 0\n    local res = 0\n    for i = 1, #arr do\n        if arr[i] < 0 then\n \
    \           prod = prod - 1\n        elseif arr[i] > 0 then\n            prod\
    \ = prod + 1\n        end\n        res = res + math.abs(arr[i])\n    end\n   \
    \ return res * prod\nend", "    local prod = 1\n    local sum = 0\n    for _,\
    \ n in ipairs(arr) do\n        if n < 0 then\n            prod = prod * -1\n \
    \       elseif n > 0 then\n            sum = sum + n\n        end\n    end\n \
    \   return prod * sum\nend", "  if not arr then return nil end\n  if not next(arr)\
    \ then return nil end\n  local sum = 0\n  local prod = 1\n  for _, i in ipairs(arr)\
    \ do\n    if i > 0 then\n      sum = sum + i\n    elseif i < 0 then\n      sum\
    \ = sum - i\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "    if not arr or #arr == 0 then\n        return nil\n    end\n    local prod,\
    \ sum = 1, 0\n    for _, num in ipairs(arr) do\n        if num < 0 then\n    \
    \        prod = prod * -1\n        elseif num > 0 then\n            sum = sum\
    \ + num\n        end\n    end\n    return prod * sum\nend", "    if not arr then\
    \ return nil end\n    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr)\
    \ do\n        prod = prod * sign(v)\n        sum = sum + abs(v)\n    end\n   \
    \ return prod * sum\nend", "  local res = 1\n  local sum = 0\n  if not arr then\
    \ return end\n  for _, v in ipairs(arr) do\n    local sign = 1\n    if v < 0 then\
    \ sign = -1 end\n    if v == 0 then sign = 0 end\n    sum = sum + math.abs(v)\n\
    \    res = res * sign\n  end\n  return res * sum\nend", "  if #arr == 0 then return\
    \ nil end\n  local prod = 1\n  local sum = 0\n  for _,v in ipairs(arr) do\n  \
    \  prod = prod * sign(v)\n    sum = sum + abs(v)\n  end\n  return prod * sum\n\
    end", "  local result = 1\n  local sum = 0\n  for i = 1, #arr do\n    if arr[i]\
    \ < 0 then\n      result = result * -1\n    elseif arr[i] > 0 then\n      result\
    \ = result * 1\n    else\n      result = result * 0\n    end\n    sum = sum +\
    \ math.abs(arr[i])\n  end\n  return sum * result\nend", "    local signs = {[1]\
    \ = 1, [-1] = -1, [0] = 0}\n    local signs_product = 1\n    local magnitudes_sum\
    \ = 0\n    for _, v in ipairs(arr) do\n        magnitudes_sum = magnitudes_sum\
    \ + math.abs(v)\n        signs_product = signs_product * signs[v]\n    end\n \
    \   return magnitudes_sum * signs_product\nend", "    if #arr == 0 then return\
    \ nil end\n    local prod = 1\n    local sum = 0\n    for _, val in ipairs(arr)\
    \ do\n        prod = prod * (val == 0 and 1 or val/math.abs(val))\n        sum\
    \ = sum + math.abs(val)\n    end\n    return prod * sum\nend", "\tlocal sum =\
    \ 0", "    if #arr == 0 then return nil end\n    local prod, sum = 1, 0\n    for\
    \ _, v in ipairs(arr) do\n        prod = prod * (v == 0 and 1 or (v < 0 and -1\
    \ or 1))\n        sum = sum + math.abs(v)\n    end\n    return prod * sum\nend",
  "    local sum, prod = 0, 1\n    for i, v in ipairs(arr) do\n        local sign\
    \ = ((v > 0) and 1) or (v < 0 and -1) or 0\n        sum = sum + math.abs(v)\n\
    \        prod = prod * sign\n    end\n    return (prod == 0) and 0 or sum * prod\n\
    end", "  if #arr == 0 then return nil end\n  local product = 1\n  local sum =\
    \ 0\n  for _, v in ipairs(arr) do\n    if v == 0 then return 0 end\n    product\
    \ = product * (v / math.abs(v))\n    sum = sum + math.abs(v)\n  end\n  return\
    \ sum * product\nend", "    if #arr == 0 then return nil end\n    local prod,\
    \ sum = 1, 0\n    for _, x in ipairs(arr) do\n        local sign = x > 0 and 1\
    \ or x < 0 and -1 or 0\n        prod = prod * sign\n        sum = sum + math.abs(x)\n\
    \    end\n    return prod * sum\nend", "  if not arr then return end\n  local\
    \ sum = 0\n  local prod = 1\n  for i, n in ipairs(arr) do\n    sum = sum + math.abs(n)\n\
    \    prod = prod * ((n > 0 and 1) or (n < 0 and -1) or 0)\n  end\n  return sum\
    \ * prod\nend", "  if #arr == 0 then return nil end\n  local prod = 1\n  local\
    \ sum = 0\n  for i, v in ipairs(arr) do\n    prod = prod * (v < 0 and -1 or (v\
    \ > 0 and 1 or 0))\n    sum = sum + math.abs(v)\n  end\n  return prod * sum\n\
    end", "  local res = nil\n  for i = 1, #arr do\n    if arr[i] ~= 0 then\n    \
    \  local prod = prod_signs(arr, i)\n      if prod == nil then prod = 1 end\n \
    \     res = prod * math.abs(arr[i])\n    end\n  end\n  return res\nend", "   \
    \ local sign, sum = 1, 0\n    for _, v in ipairs(arr) do\n        local abs =\
    \ math.abs(v)\n        sign = sign * ((v > 0) and 1 or (v < 0) and -1 or 0)\n\
    \        sum = sum + abs\n    end\n    return sign * sum\nend", "  local function\
    \ sign(x)\n    if x > 0 then return 1\n    elseif x < 0 then return -1\n    else\
    \ return 0 end\n  end\n  if #arr == 0 then return nil end\n  local sum = 0\n \
    \ local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n\
    \    prod = prod * sign(v)\n  end\n  return sum * prod\nend", "  local sum = 0\n\
    \  local prod = 1\n  for i = 1, #arr do\n    sum = sum + math.abs(arr[i])\n  \
    \  prod = prod * (arr[i] == 0 and 1 or arr[i] / math.abs(arr[i]))\n  end\n  return\
    \ sum * prod\nend", "  local product = 1\n  local sum = 0\n  for _, num in ipairs(arr)\
    \ do\n    product = product * sign(num)\n    sum = sum + math.abs(num)\n  end\n\
    \  return product * sum\nend", "    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        if v == 0 then\n            return 0\n     \
    \   elseif v > 0 then\n            sum = sum + v\n        else\n            sum\
    \ = sum - v\n            prod = prod * -1\n        end\n    end\n    return sum\
    \ * prod\nend", "    if #arr == 0 then return nil end\n    local sum, prod = 0,\
    \ 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum =\
    \ sum + v\n        elseif v < 0 then\n            sum = sum - v\n            prod\
    \ = prod * -1\n        end\n    end\n    return sum * prod\nend", "    local ps\
    \ = 1\n    local mag = 0\n    for _, n in ipairs(arr) do\n        if n > 0 then\n\
    \            ps = ps\n        elseif n < 0 then\n            ps = ps * -1\n  \
    \      else\n            ps = 0\n            break\n        end\n        mag =\
    \ mag + math.abs(n)\n    end\n    return mag * ps\nend", "  if #arr == 0 then\
    \ return nil end\n  local mult = 1\n  local sum = 0\n  for i,v in ipairs(arr)\
    \ do\n    mult = mult * sgn(v)\n    sum = sum + math.abs(v)\n  end\n  return mult\
    \ * sum\nend", "    if #arr == 0 then return nil end\n    local n = 0\n    local\
    \ s = 1\n    for _, i in ipairs(arr) do\n        if i == 0 then\n            n\
    \ = n + 1\n        else\n            s = s * i\n        end\n    end\n    return\
    \ math.pow(-1, n) * math.abs(s)\nend", "  if #arr == 0 then return nil end\n \
    \ local s = 1\n  local n = 0\n  for _, v in ipairs(arr) do\n    s = s * math.sign(v)\n\
    \    n = n + math.abs(v)\n  end\n  return s * n\nend", "    local prod, sum =\
    \ 1, 0\n    for _, v in ipairs(arr) do\n        prod = prod * (v < 0 and -1 or\
    \ v > 0 and 1 or 0)\n        sum = sum + math.abs(v)\n    end\n    return prod\
    \ * sum == 0 and nil or prod * sum\nend", "  if #arr == 0 then return nil end\n\
    \  local sum = 0\n  local prod = 1\n  for i = 1, #arr do\n    local a = arr[i]\n\
    \    local sign = 0\n    if a == 0 then\n      sign = 0\n    elseif a > 0 then\n\
    \      sign = 1\n    else\n      sign = -1\n    end\n    sum = sum + math.abs(a)\n\
    \    prod = prod * sign\n  end\n  return sum * prod\nend", "  local signs = {}\n\
    \  local magnitudes = {}\n  for _, x in ipairs(arr) do\n    table.insert(signs,\
    \ x < 0 and -1 or x > 0 and 1 or 0)\n    table.insert(magnitudes, math.abs(x))\n\
    \  end\n  local sign_prod = foldl(function(a, b) return a * b end, 1, signs)\n\
    \  local mag_sum = foldl(function(a, b) return a + b end, 0, magnitudes)\n  return\
    \ sign_prod * mag_sum\nend", "    local signs = {}\n    local magnitude = 0\n\
    \    for _, num in ipairs(arr) do\n        local sign = 0\n        if num > 0\
    \ then\n            sign = 1\n        elseif num < 0 then\n            sign =\
    \ -1\n        end\n        table.insert(signs, sign)\n        magnitude = magnitude\
    \ + math.abs(num)\n    end\n    local prod = 1\n    for _, sign in ipairs(signs)\
    \ do\n        prod = prod * sign\n    end\n    if prod == 0 then\n        return\
    \ nil\n    end\n    return prod * magnitude\nend", "    local prod = 1\n    local\
    \ sum = 0\n    if not arr then return nil end\n    for _, x in ipairs(arr) do\n\
    \        if x == 0 then\n            prod = 0\n        elseif x > 0 then\n   \
    \         prod = prod * 1\n        else\n            prod = prod * -1\n      \
    \  end\n        sum = sum + math.abs(x)\n    end\n    return prod * sum\nend",
  "    local result = 1\n    for _, i in ipairs(arr) do\n        if i == 0 then\n\
    \            result = 0\n            break\n        elseif i < 0 then\n      \
    \      result = result * -1\n        end\n    end\n    local sum = 0\n    for\
    \ _, i in ipairs(arr) do\n        sum = sum + math.abs(i)\n    end\n    return\
    \ result * sum\nend", "    local prod = 1\n    local sum = 0\n    if #arr == 0\
    \ then\n        return nil\n    end\n    for _, v in ipairs(arr) do\n        local\
    \ sign = v > 0 and 1 or (v < 0 and -1 or 0)\n        prod = prod * sign\n    \
    \    sum = sum + math.abs(v)\n    end\n    return prod * sum\nend", "    local\
    \ prod = 1\n    local sum = 0\n    if #arr == 0 then\n        return nil\n   \
    \ end\n    for _, i in ipairs(arr) do\n        local sign = 1\n        if i ==\
    \ 0 then\n            sign = 0\n        elseif i < 0 then\n            sign =\
    \ -1\n        end\n        prod = prod * sign\n        sum = sum + math.abs(i)\n\
    \    end\n    return prod * sum\nend", "\tlocal prod, sum = 1, 0\n\tfor _, x in\
    \ ipairs(arr) do\n\t\tprod = prod * (x > 0 and 1 or x < 0 and -1 or 0)\n\t\tsum\
    \ = sum + math.abs(x)\n\tend\n\treturn prod == 0 and nil or prod * sum\nend",
  "  local product = 1\n  local total = 0\n  if #arr == 0 then return nil end\n  for\
    \ i,v in ipairs(arr) do\n    if v > 0 then\n      product = product * 1\n    \
    \  total = total + v\n    elseif v < 0 then\n      product = product * -1\n  \
    \    total = total + (v * -1)\n    else\n      product = product * 0\n    end\n\
    \  end\n  return product * total\nend", "  if #arr == 0 then return nil end\n\
    \  local s = 1\n  local p = 1\n  for _,v in ipairs(arr) do\n    s = s + v\n  \
    \  p = p * (v > 0 and 1 or v < 0 and -1 or 0)\n  end\n  return s * p\nend", " \
    \ local result = 1\n  for _, val in ipairs(arr) do\n    local sign = (val == 0)\
    \ and 0 or val / math.abs(val)\n    result = result * sign\n  end\n  local sum\
    \ = 0\n  for _, val in ipairs(arr) do\n    sum = sum + math.abs(val)\n  end\n\
    \  return result * sum\nend", "  local magnitude = function(n) return n >= 0 and\
    \ n or -n end\n  local signs = function(arr)\n    local result = 1\n    for _,\
    \ v in ipairs(arr) do\n      if v < 0 then result = result * -1 end\n    end\n\
    \    return result\n  end\n  local magnitudes = function(arr)\n    local result\
    \ = 0\n    for _, v in ipairs(arr) do\n      result = result + magnitude(v)\n\
    \    end\n    return result\n  end\n  return arr[1] and magnitudes(arr) * signs(arr)\
    \ or nil\nend", "    if #arr == 0 then return nil end\n    local prod = 1\n  \
    \  local sum = 0\n    for i, num in ipairs(arr) do\n        prod = prod * (num\
    \ > 0 and 1 or num < 0 and -1 or 0)\n        sum = sum + math.abs(num)\n    end\n\
    \    return prod * sum\nend", "    if #arr == 0 then return nil end\n    local\
    \ sum = 0\n    local product = 1\n    for _,v in ipairs(arr) do\n        local\
    \ num = v\n        if num < 0 then\n            num = -num\n            product\
    \ = product * -1\n        elseif num == 0 then\n            product = 0\n    \
    \    end\n        sum = sum + num\n    end\n    return sum * product\nend", " \
    \ local res = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      res =\
    \ res + v\n    elseif v < 0 then\n      res = res - v\n    end\n  end\n  return\
    \ res\nend", "    local sum = 0\n    local product = 1\n    if not arr then return\
    \ nil end\n    for _, val in ipairs(arr) do\n        sum = sum + math.abs(val)\n\
    \        if val > 0 then\n            product = product * 1\n        elseif val\
    \ < 0 then\n            product = product * -1\n        else\n            product\
    \ = product * 0\n        end\n    end\n    return sum * product\nend", "  local\
    \ sign = 1\n  local mag = 0\n  for i = 1, #arr do\n    if arr[i] == 0 then return\
    \ 0 end\n    if arr[i] < 0 then sign = sign * -1 end\n    mag = mag + math.abs(arr[i])\n\
    \  end\n  return sign * mag\nend", "    -- insert your code here\nend", "    --\
    \ (1) add code here\nend", "  if #arr == 0 then return nil end\n  local sum, prod\
    \ = 0, 1\n  for _,v in ipairs(arr) do\n    sum = sum + math.abs(v)\n    if v <\
    \ 0 then prod = prod * -1 end\n  end\n  return sum * prod\nend", "  local prod\
    \ = 1\n  local sum = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n >\
    \ 0 then\n      prod = prod * 1\n    elseif n < 0 then\n      prod = prod * -1\n\
    \    else\n      prod = prod * 0\n    end\n    sum = sum + math.abs(n)\n  end\n\
    \  return prod * sum\nend", "    local product = 1\n    local sum = 0\n    for\
    \ _, x in ipairs(arr) do\n        if x == 0 then\n            product = 0\n  \
    \      elseif x > 0 then\n            product = product * 1\n        else\n  \
    \          product = product * -1\n        end\n        sum = sum + math.abs(x)\n\
    \    end\n    return product * sum\nend", "\tlocal p, s = 1, 0\n\tfor _, v in\
    \ ipairs(arr) do\n\t\tif v > 0 then\n\t\t\tp = p * 1\n\t\telseif v < 0 then\n\t\
    \t\tp = p * -1\n\t\telse\n\t\t\tp = 0\n\t\tend\n\t\ts = s + math.abs(v)\n\tend\n\
    \treturn p * s\nend", "    local pr = 1\n    local sum = 0\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 then\n            pr = pr * 1\n            sum = sum +\
    \ v\n        elseif v < 0 then\n            pr = pr * -1\n            sum = sum\
    \ + v\n        else\n            pr = pr * 0\n        end\n    end\n    return\
    \ sum * pr\nend", "  local res = 1\n  for _, x in ipairs(arr) do\n    res = res\
    \ * (x > 0 and 1 or x < 0 and -1 or 0)\n  end\n  return res\nend", "\t-- returns\
    \ sign of a number\n\tlocal function sign(x)\n\t\tif x > 0 then\n\t\t\treturn\
    \ 1\n\t\telseif x < 0 then\n\t\t\treturn -1\n\t\telse\n\t\t\treturn 0\n\t\tend\n\
    \tend", "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n\
    \        sum = sum + math.abs(v)\n        prod = prod * (v > 0 and 1 or (v < 0\
    \ and -1 or 0))\n    end\n    return prod * sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
