name: HumanEval_114_minSubArraySum
language: lua
results:
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums < 1 then\n    return 0\n  end\n  local minSum = math.huge\n  local\
    \ currentSum = 0\n  for i = 1, #nums do\n    currentSum = currentSum + nums[i]\n\
    \    if currentSum < minSum then\n      minSum = currentSum\n    end\n    if currentSum\
    \ > 0 then\n      currentSum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local cur = nums[1]\n  for i = 2, #nums do\n    cur\
    \ = math.min(cur + nums[i], nums[i])\n    min = math.min(min, cur)\n  end\n  return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local function getSum(nums, n)\n    local sum = 0\n    for i = 1, n do\n  \
    \    sum = sum + nums[i]\n    end\n    return sum\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3brie4oo.lua:32: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local currentSum = 0\n  local minSum = math.huge\n  for i = 1, #nums do\n \
    \   local current = nums[i]\n    if current < minSum then\n      minSum = current\n\
    \    end\n    currentSum = currentSum + current\n    if currentSum < minSum then\n\
    \      minSum = currentSum\n    end\n    for j = i + 1, #nums do\n      currentSum\
    \ = currentSum + nums[j]\n      if currentSum < minSum then\n        minSum =\
    \ currentSum\n      end\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5kyrng3.lua:32:\
    \ expected: -6, actual: -14\nstack traceback:\n\t/tmp/tmpp5kyrng3.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local sum = math.huge\n    local cursum = 0\n    for _, val in ipairs(nums)\
    \ do\n        cursum = cursum + val\n        if cursum < sum then\n          \
    \  sum = cursum\n        end\n        if cursum > 0 then\n            cursum =\
    \ 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  local min = 2147483647\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz4t96urq.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = 10000000000\n    local sum = 0\n    for i = 1, #nums do\n\
    \        for j = i, #nums do\n            sum = sum + nums[j]\n            if\
    \ sum < minSum then\n                minSum = sum\n            end\n        end\n\
    \        sum = 0\n    end\n    return minSum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local t = {}\n  local l = #nums\n  for i = 1, l do\n    for j = i, l do\n \
    \     t[i] = t[i] or 0\n      t[i] = t[i] + nums[j]\n    end\n  end\n  local min\
    \ = math.huge\n  for i = 1, l do\n    if t[i] < min then\n      min = t[i]\n \
    \   end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23tmwsy4.lua:27:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmp23tmwsy4.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    -- find minimum sum of any sub-array\n    local smallest = nums[1]\n    local\
    \ sum = nums[1]\n    for i = 2, #nums do\n        sum = sum + nums[i]\n      \
    \  if sum < smallest then\n            smallest = sum\n        end\n    end\n\
    \    return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjiel1d69.lua:22:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjiel1d69.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local window_sum = 0\n  local min_sum = nums[1]\n  local window_start = 1\n\
    \  for window_end = 1, #nums do\n    window_sum = window_sum + nums[window_end]\n\
    \    min_sum = math.min(min_sum, window_sum)\n    if window_sum < 0 then\n   \
    \   window_sum = 0\n      window_start = window_end + 1\n    end\n  end\n  return\
    \ min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopp7uc3c.lua:24:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpopp7uc3c.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = nums[1]\n  local curr_sum = nums[1]\n  for i = 2, #nums do\n\
    \    curr_sum = math.min(nums[i], curr_sum + nums[i])\n    min_sum = math.min(min_sum,\
    \ curr_sum)\n  end\n  return min_sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = nums[1]\n    local currentSum = 0\n    for i = 1, #nums do\n\
    \        currentSum = currentSum + nums[i]\n        if currentSum < minSum then\n\
    \            minSum = currentSum\n        end\n        if currentSum > 0 then\n\
    \            currentSum = 0\n        end\n    end\n    return minSum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    if nums[i]\
    \ < min_sum then\n      min_sum = nums[i]\n    end\n    sum = sum + nums[i]\n\
    \    if sum < min_sum then\n      min_sum = sum\n    end\n    for j = i + 1, #nums\
    \ do\n      sum = sum + nums[j]\n      if sum < min_sum then\n        min_sum\
    \ = sum\n      end\n    end\n    sum = 0\n  end\n  return min_sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tlocal res = nums[1]\n\tlocal sum = 0\n\tfor i = 1, #nums do\n\t\tif sum > 0\
    \ then\n\t\t\tsum = nums[i]\n\t\telse\n\t\t\tsum = sum + nums[i]\n\t\tend\n\t\t\
    res = math.min(res, sum)\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local current = 0\n  for i = 1, #nums do\n    current\
    \ = current + nums[i]\n    if current < min then\n      min = current\n    end\n\
    \    if current > 0 then\n      current = 0\n    end\n  end\n  return min\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min_sum = nums[1]\n    local sum = 0\n    for i = 1, #nums do\n   \
    \     if sum < 0 then\n            sum = 0\n        end\n        sum = sum + nums[i]\n\
    \        min_sum = math.min(min_sum, sum)\n    end\n    return min_sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2fcb5612.lua:22:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp2fcb5612.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local curSum = 0\n  for i = 1, #nums do\n    curSum\
    \ = math.min(nums[i], curSum + nums[i])\n    minSum = math.min(minSum, curSum)\n\
    \  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local curSum = 0\n  for i = 1, #nums do\n    curSum\
    \ = math.min(curSum + nums[i], nums[i])\n    minSum = math.min(minSum, curSum)\n\
    \  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = nums[1]\n  for i = 2, #nums do\n    if sum\
    \ < 0 then\n      sum = nums[i]\n    else\n      sum = sum + nums[i]\n    end\n\
    \    if sum < min then\n      min = sum\n    end\n  end\n  return min\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8qc45zy.lua:25:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpw8qc45zy.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local total, min_sum = 0, nums[1]\n  for i = 1, #nums do\n    total = total\
    \ + nums[i]\n    if min_sum > total then\n      min_sum = total\n    end\n   \
    \ if total > 0 then\n      total = 0\n    end\n  end\n  return min_sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local length = #nums\n  local sums = {}\n  sums[0]\
    \ = 0\n  for i = 1, length do\n    sums[i] = sums[i - 1] + nums[i]\n  end\n  for\
    \ i = 1, length do\n    for j = i, length do\n      minSum = math.min(minSum,\
    \ sums[j] - sums[i - 1])\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    if #nums == 0 then\n        return 0\n    end\n    local ans = math.huge\n\
    \    local cur = 0\n    for i = 1, #nums do\n        cur = cur + nums[i]\n   \
    \     ans = math.min(ans, cur)\n        if cur > 0 then\n            cur = 0\n\
    \        end\n    end\n    return ans\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local result = math.huge\n    local sum = 0\n    for i = 1, #nums do\n  \
    \      sum = sum + nums[i]\n        result = math.min(result, sum)\n        if\
    \ sum > 0 then\n            sum = 0\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local m = math.huge\n  local c = 0\n  for i = 1, #nums do\n    c = c + nums[i]\n\
    \    if c < m then\n      m = c\n    end\n    if c > 0 then\n      c = 0\n   \
    \ end\n  end\n  return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local sum = 0\n    local min = nil\n    for _, n in ipairs(nums) do\n   \
    \     sum = sum + n\n        if min == nil or sum < min then\n            min\
    \ = sum\n        end\n        if sum > 0 then\n            sum = 0\n        end\n\
    \    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    if not nums or #nums == 0 then\n        return nil\n    end\n    local min\
    \ = nums[1]\n    local sum = 0\n    for i = 1, #nums do\n        sum = math.max(sum\
    \ + nums[i], nums[i])\n        min = math.min(min, sum)\n    end\n    return min\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zc4v_b7.lua:22:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4zc4v_b7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return nil\n  end\n  if #nums == 1 then\n    return\
    \ nums[1]\n  end\n  local min_so_far = nums[1]\n  local min_current = nums[1]\n\
    \  for i = 2, #nums do\n    min_current = math.min(nums[i], min_current + nums[i])\n\
    \    min_so_far = math.min(min_so_far, min_current)\n  end\n  return min_so_far\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return nil\n  end\n  if #nums == 1 then\n    return\
    \ nums[1]\n  end\n  local result = nums[1]\n  local sum = 0\n  for _, num in ipairs(nums)\
    \ do\n    sum = sum + num\n    if sum < result then\n      result = sum\n    end\n\
    \    if sum > 0 then\n      sum = 0\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min_sum = nums[1]\n    local sum = 0\n    for i = 1, #nums do\n   \
    \     sum = sum + nums[i]\n        if sum < min_sum then\n            min_sum\
    \ = sum\n        end\n        if sum > 0 then\n            sum = 0\n        end\n\
    \    end\n    return min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return nil\n  end\n  local min = nums[1]\n  local sum\
    \ = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n    if sum < min then\n\
    \      min = sum\n    end\n    if sum > 0 then\n      sum = 0\n    end\n  end\n\
    \  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min = math.huge\n    local sum = 0\n    for _, v in ipairs(nums) do\n\
    \        sum = sum + v\n        if sum < min then\n            min = sum\n   \
    \     end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8q0hoc0.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk8q0hoc0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local sums = {}\n    local min = 0\n    local minval = 0\n    for i = 1,\
    \ #nums do\n        if i == 1 then\n            sums[i] = nums[i]\n          \
    \  min = sums[i]\n            minval = sums[i]\n        else\n            sums[i]\
    \ = sums[i - 1] + nums[i]\n            if sums[i] < min then\n               \
    \ min = sums[i]\n                minval = sums[i]\n            end\n        end\n\
    \    end\n    for i = 1, #nums do\n        if sums[i] < minval then\n        \
    \    minval = sums[i]\n        end\n    end\n    for i = 1, #nums do\n       \
    \ for j = i + 1, #nums do\n            local s = sums[j] - sums[i - 1]\n     \
    \       if s < minval then\n                minval = s\n            end\n    \
    \    end\n    end\n    return minval\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7di_jr_e.lua:30:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp7di_jr_e.lua:30: in local 'candidate'\n\t/tmp/tmp7di_jr_e.lua:42: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ math.min(nums[i], sum + nums[i])\n    minSum = math.min(minSum, sum)\n  end\n\
    \  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min = 0\n    local sum = 0\n    for i = 1, #nums do\n        sum =\
    \ sum + nums[i]\n        if sum < min then\n            min = sum\n        end\n\
    \    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeesjg2j0.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpeesjg2j0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = nums[1]\n  for i = 2, #nums do\n    sum\
    \ = math.min(sum + nums[i], nums[i])\n    min = math.min(min, sum)\n  end\n  return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min_sum = nums[1]\n    local min_start, min_end = 1, 1\n    local cur_sum\
    \ = nums[1]\n    local cur_start, cur_end = 1, 1\n    while cur_end <= #nums do\n\
    \        if cur_sum < min_sum then\n            min_sum = cur_sum\n          \
    \  min_start, min_end = cur_start, cur_end\n        end\n        if cur_sum >\
    \ 0 then\n            cur_sum = nums[cur_end + 1]\n            cur_start = cur_end\
    \ + 1\n        else\n            cur_sum = cur_sum + nums[cur_end + 1]\n     \
    \   end\n        cur_end = cur_end + 1\n    end\n    return min_sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt6mw42j0.lua:20:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpt6mw42j0.lua:20: in local 'candidate'\n\t/tmp/tmpt6mw42j0.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSoFar = nums[1]\n  local minEndingHere = nums[1]\n  for i = 2, #nums\
    \ do\n    local x = nums[i]\n    if minEndingHere > 0 then\n      minEndingHere\
    \ = x\n    else\n      minEndingHere = minEndingHere + x\n    end\n    minSoFar\
    \ = math.min(minSoFar, minEndingHere)\n  end\n  return minSoFar\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local currentSum = 0\n  local minSum = math.huge\n  for i = 1, #nums do\n \
    \   currentSum = math.min(0, currentSum + nums[i])\n    minSum = math.min(minSum,\
    \ currentSum)\n  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jiyksgs.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp0jiyksgs.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min = nums[1]\n    local sum = 0\n    for i = 1, #nums do\n       \
    \ sum = sum + nums[i]\n        if sum < min then\n            min = sum\n    \
    \    end\n        if sum > 0 then\n            sum = 0\n        end\n    end\n\
    \    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local acc = nums[1]\n  for i = 2, #nums do\n    acc\
    \ = math.min(acc + nums[i], nums[i])\n    min = math.min(min, acc)\n  end\n  return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local sum = 0\n    local min = 0\n    for _, num in ipairs(nums) do\n   \
    \     sum = sum + num\n        if sum < min then\n            min = sum\n    \
    \    end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6xzser1.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpp6xzser1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local res = math.huge\n    local cur = 0\n    for i = 1, #nums do\n     \
    \   cur = cur + nums[i]\n        res = math.min(res, cur)\n        cur = math.max(cur,\
    \ 0)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9zakb2g3.lua:20:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9zakb2g3.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local left = 1\n  local sum = 0\n  local min = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpze98y7i0.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tif not nums then return end\n\tlocal s = 0\n\tlocal r = math.huge\n\tfor i =\
    \ 1, #nums do\n\t\ts = math.min(s + nums[i], nums[i])\n\t\tr = math.min(r, s)\n\
    \tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = 999999999999999999\n  local curr = 0\n  for i = 1, #nums do\n \
    \   curr = curr + nums[i]\n    if curr < min then\n      min = curr\n    end\n\
    \    if curr > 0 then\n      curr = 0\n    end\n  end\n  return min\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local currMin = math.huge\n  local currSum = 0\n  for i = 1, #nums do\n   \
    \ currSum = currSum + nums[i]\n    if currSum < currMin then\n      currMin =\
    \ currSum\n    end\n    if currSum > 0 then\n      currSum = 0\n    end\n  end\n\
    \  return currMin\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    -- init\n    local min_sum = 0\n    local sum = 0\n    -- find min\n    for\
    \ i = 1, #nums do\n        sum = sum + nums[i]\n        if sum < min_sum then\n\
    \            min_sum = sum\n        end\n    end\n    return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkyrrnko_.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpkyrrnko_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minsum = 0\n    local sum = 0\n    for _, v in ipairs(nums) do\n  \
    \      sum = sum + v\n        if sum > 0 then\n            sum = 0\n        elseif\
    \ sum < minsum then\n            minsum = sum\n        end\n    end\n    return\
    \ minsum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3ze940t.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpq3ze940t.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tlocal sum, minSum = 0, math.huge\n\tfor i, n in ipairs(nums) do\n\t\tsum = sum\
    \ + n\n\t\tif sum < minSum then\n\t\t\tminSum = sum\n\t\tend\n\t\tif sum > 0 then\n\
    \t\t\tsum = 0\n\t\tend\n\tend\n\treturn minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  local minSum = math.huge\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local curSum = 0\n  for i = 1, #nums do\n    curSum\
    \ = curSum + nums[i]\n    if minSum > curSum then\n      minSum = curSum\n   \
    \ end\n    if curSum > 0 then\n      curSum = 0\n    end\n  end\n  return minSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local currSum = nums[1]\n  local minSum = nums[1]\n  for i = 2, #nums do\n\
    \    currSum = math.min(nums[i], currSum + nums[i])\n    minSum = math.min(minSum,\
    \ currSum)\n  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum,minSum = 0, math.huge\n  for i = 1, #nums do\n    sum = sum + nums[i]\n\
    \    if sum < minSum then\n      minSum = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = nums[1]\n    local curSum = 0\n    for i = 1, #nums do\n \
    \       curSum = curSum + nums[i]\n        if curSum < minSum then\n         \
    \   minSum = curSum\n        end\n        if curSum > 0 then\n            curSum\
    \ = 0\n        end\n    end\n    return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min = math.huge\n    local runningSum = 0\n    local minStart = 1\n\
    \    local minEnd = 1\n    local start = 1\n    local end_ = 1\n    for _, n in\
    \ ipairs(nums) do\n        runningSum = runningSum + n\n        end_ = end_ +\
    \ 1\n        if runningSum < min then\n            min = runningSum\n        \
    \    minStart = start\n            minEnd = end_\n        end\n        if runningSum\
    \ > 0 then\n            runningSum = 0\n            start = end_ + 1\n       \
    \ end\n    end\n    return min, minStart, minEnd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  --local len = #nums\n  --local ret = math.huge\n  --\n  --for i = 1, len do\n\
    \  --  local sum = 0\n  --  for j = i, len do\n  --    sum = sum + nums[j]\n \
    \ --    ret = math.min(ret, sum)\n  --  end\n  --end\n  --\n  --return ret\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp128qcblx.lua:37: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    -- create variable to hold minimum value\n    local minValue = nums[1]\n\
    \    -- iterate through the array\n    for i = 1, #nums do\n        -- create\
    \ a variable to store the sum of the sub-array\n        local sum = 0\n      \
    \  -- iterate through the array starting at i\n        for j = i, #nums do\n \
    \           -- add the elements to the sum variable\n            sum = sum + nums[j]\n\
    \            -- update the minValue if necessary\n            if sum < minValue\
    \ then\n                minValue = sum\n            end\n        end\n    end\n\
    \    -- return the minValue\n    return minValue\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return 0\n  end\n  if #nums == 1 then\n    return nums[1]\n\
    \  end\n  local min = nums[1]\n  local sum = nums[1]\n  for i = 2, #nums do\n\
    \    sum = sum + nums[i]\n    if nums[i] < sum then\n      sum = nums[i]\n   \
    \ end\n    if sum < min then\n      min = sum\n    end\n  end\n  return min\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local len = #nums\n    local min_sum = nums[1]\n    local start, end_ = 1,\
    \ 1\n    local sum = nums[1]\n    while end_ <= len do\n        if sum >= 0 then\n\
    \            min_sum = min(min_sum, sum)\n            end_ = end_ + 1\n      \
    \      sum = sum + nums[end_]\n        else\n            sum = sum - nums[start]\n\
    \            start = start + 1\n        end\n    end\n    return min_sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdtaxedp1.lua:13:\
    \ attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpdtaxedp1.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpdtaxedp1.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local max = math.maxinteger\n  local currentSum = 0\n  local minSum = max\n\
    \  for i, v in ipairs(nums) do\n    currentSum = currentSum + v\n    if currentSum\
    \ < minSum then\n      minSum = currentSum\n    end\n    if currentSum > 0 then\n\
    \      currentSum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local cur = nums[1]\n  for i = 2, #nums do\n    if cur\
    \ < 0 then\n      cur = nums[i]\n    else\n      cur = cur + nums[i]\n    end\n\
    \    if cur < min then\n      min = cur\n    end\n  end\n  return min\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppm1w502u.lua:25:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmppm1w502u.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  local min = math.huge\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = 0\n    local sum = 0\n    for _, num in ipairs(nums) do\n\
    \        sum = sum + num\n        if sum < minSum then\n            minSum = sum\n\
    \        end\n    end\n    return minSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdp7nixy.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpzdp7nixy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return 0\n  end\n  local minSum = nums[1]\n  local\
    \ sum = nums[1]\n  for i = 2, #nums do\n    if sum > 0 then\n      sum = nums[i]\n\
    \    else\n      sum = sum + nums[i]\n    end\n    if sum < minSum then\n    \
    \  minSum = sum\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return nil\n  end\n  local res = nums[1]\n  local sum\
    \ = nums[1]\n  for i = 2, #nums do\n    sum = math.min(sum + nums[i], nums[i])\n\
    \    res = math.min(res, sum)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if nums == nil or #nums == 0 then\n    return 0\n  end\n  local minSum = math.huge\n\
    \  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n    if sum <\
    \ minSum then\n      minSum = sum\n    end\n    if sum > 0 then\n      sum = 0\n\
    \    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tlocal min, sum = math.huge, 0\n\tfor i, v in ipairs(nums) do\n\t\tsum = sum\
    \ + v\n\t\tif sum < min then\n\t\t\tmin = sum\n\t\tend\n\t\tif sum > 0 then\n\t\
    \t\tsum = 0\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local l = #nums\n    local min = nums[1]\n    local sum = 0\n    for i =\
    \ 1, l do\n        sum = sum + nums[i]\n        if min > sum then\n          \
    \  min = sum\n        end\n        if sum > 0 then\n            sum = 0\n    \
    \    end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = math.huge\n  local tmp = 0\n  for i = 1, #nums do\n    tmp = tmp\
    \ + nums[i]\n    if tmp < sum then\n      sum = tmp\n    end\n    if tmp > 0 then\n\
    \      tmp = 0\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local currentSum = 0\n  local minSum = nil\n  for _, v in ipairs(nums) do\n\
    \    currentSum = currentSum + v\n    if minSum == nil or currentSum < minSum\
    \ then\n      minSum = currentSum\n    end\n    if currentSum > 0 then\n     \
    \ currentSum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local currentSum = 0\n  for i = 1, #nums do\n   \
    \ currentSum = currentSum + nums[i]\n    if currentSum < minSum then\n      minSum\
    \ = currentSum\n    end\n    if currentSum > 0 then\n      currentSum = 0\n  \
    \  end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = 0\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n\
    \    if sum < min then\n      min = sum\n    end\n  end\n  return min\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5h7652qq.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp5h7652qq.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjqdlg10.lua:13:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpyjqdlg10.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local cum_sum = 0\n  local min_sum_start_index\
    \ = 0\n  local min_sum_end_index = 0\n  local start_index = 0\n  for end_index,\
    \ val in ipairs(nums) do\n    cum_sum = cum_sum + val\n    if cum_sum < min_sum\
    \ then\n      min_sum = cum_sum\n      min_sum_start_index = start_index\n   \
    \   min_sum_end_index = end_index\n    end\n    if cum_sum > 0 then\n      cum_sum\
    \ = 0\n      start_index = end_index + 1\n    end\n  end\n  return min_sum, min_sum_start_index,\
    \ min_sum_end_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdnd_jba4.lua:13:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpdnd_jba4.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local res = 0\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n\
    \    if res > sum then\n      res = sum\n    end\n    if sum > 0 then\n      sum\
    \ = 0\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5m_zj__.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpg5m_zj__.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = nums[1]\n  local sub_sum = nums[1]\n  for i = 2, #nums do\n\
    \    sub_sum = min(sub_sum + nums[i], nums[i])\n    min_sum = min(min_sum, sub_sum)\n\
    \  end\n  return min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgl4we6v7.lua:10:\
    \ attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpgl4we6v7.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpgl4we6v7.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \tlocal min, sum = math.huge, 0\n\tfor i, n in ipairs(nums) do\n\t\tsum = sum\
    \ + n\n\t\tif sum < min then\n\t\t\tmin = sum\n\t\tend\n\t\tif sum > 0 then\n\t\
    \t\tsum = 0\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local curSum = 0\n  for i = 1, #nums do\n    curSum\
    \ = curSum + nums[i]\n    if curSum < minSum then\n      minSum = curSum\n   \
    \ end\n    if curSum > 0 then\n      curSum = 0\n    end\n  end\n  return minSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local result = math.huge\n    local curr = 0\n    for i = 1, #nums do\n \
    \       curr = curr + nums[i]\n        result = math.min(result, curr)\n     \
    \   if curr > 0 then\n            curr = 0\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    if sum <\
    \ 0 then\n      sum = 0\n    end\n    sum = sum + nums[i]\n    min = math.min(min,\
    \ sum)\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg91illwj.lua:22:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpg91illwj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min_so_far = math.huge\n    local cur_min = 0\n    for _, n in ipairs(nums)\
    \ do\n        cur_min = math.min(cur_min + n, n)\n        min_so_far = math.min(min_so_far,\
    \ cur_min)\n    end\n    return min_so_far\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = 0\n  local sum = 0\n  for i = 1, #nums do\n    if sum < 0 then\n\
    \      sum = 0\n    end\n    sum = sum + nums[i]\n    if sum < minSum then\n \
    \     minSum = sum\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9shwz76h.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp9shwz76h.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local curr_sum = 0\n    local min_sum = math.huge\n    for i, v in ipairs(nums)\
    \ do\n        curr_sum = curr_sum + v\n        if curr_sum < min_sum then\n  \
    \          min_sum = curr_sum\n        end\n        if curr_sum > 0 then\n   \
    \         curr_sum = 0\n        end\n    end\n    return min_sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local curr_sum = 0\n  local min_sum = math.huge\n  for i, num in ipairs(nums)\
    \ do\n    curr_sum = curr_sum + num\n    if curr_sum < min_sum then\n      min_sum\
    \ = curr_sum\n    end\n    if curr_sum > 0 then\n      curr_sum = 0\n    end\n\
    \  end\n  return min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    if #nums == 0 then\n        return 0\n    end\n    local minSum = nums[1]\n\
    \    local dp = nums[1]\n    for i = 2, #nums do\n        dp = math.min(dp + nums[i],\
    \ nums[i])\n        minSum = math.min(minSum, dp)\n    end\n    return minSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq9ryw2lv.lua:26: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = math.huge\n    local sum = 0\n    for i = 1, #nums do\n  \
    \      sum = sum + nums[i]\n        if sum < minSum then\n            minSum =\
    \ sum\n        end\n        if sum > 0 then\n            sum = 0\n        end\n\
    \    end\n    return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local current = nums[1]\n  local min = current\n  for i = 2, #nums do\n   \
    \ current = math.min(current + nums[i], nums[i])\n    min = math.min(min, current)\n\
    \  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local curSum = 0\n  for i = 1, #nums do\n    curSum\
    \ = curSum + nums[i]\n    if curSum < min then\n      min = curSum\n    end\n\
    \    if curSum > 0 then\n      curSum = 0\n    end\n  end\n  return min\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = math.min(sum\
    \ + nums[i], nums[i])\n    min = math.min(min, sum)\n  end\n  return min\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    if sum\
    \ > 0 then\n      sum = nums[i]\n    else\n      sum = sum + nums[i]\n    end\n\
    \    minSum = math.min(minSum, sum)\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = math.huge\n    local currSum = 0\n    for i = 1, #nums do\n\
    \        currSum = currSum + nums[i]\n        if currSum < minSum then\n     \
    \       minSum = currSum\n        end\n        if currSum > 0 then\n         \
    \   currSum = 0\n        end\n    end\n    return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    -- grab the first value in the table\n    local subArray = nums[1]\n    local\
    \ min = subArray\n    -- loop through the table to find the min\n    for i = 2,\
    \ #nums do\n        -- check the value of the next value with the sum of the subArray\n\
    \        if subArray + nums[i] > nums[i] then\n            subArray = subArray\
    \ + nums[i]\n        else\n            subArray = nums[i]\n        end\n     \
    \   -- check to see if the value is the lowest value so far and\n        -- then\
    \ set it to min\n        if subArray < min then\n            min = subArray\n\
    \        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dwc4882.lua:30:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3dwc4882.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  local min_sum = math.huge\n  for i = 1, #nums do\n    sum\
    \ = math.min(sum + nums[i], nums[i])\n    min_sum = math.min(min_sum, sum)\n \
    \ end\n  return min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local current_min = math.huge\n  local current_sum = 0\n  for i = 1, #nums\
    \ do\n    current_sum = current_sum + nums[i]\n    if current_sum < current_min\
    \ then\n      current_min = current_sum\n    end\n    if current_sum > 0 then\n\
    \      current_sum = 0\n    end\n  end\n  return current_min\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min = 0\n    local sum = 0\n    for i = 1, #nums do\n        sum =\
    \ sum + nums[i]\n        if sum < min then\n            min = sum\n        end\n\
    \    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnb6dszmk.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpnb6dszmk.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = 0\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum +\
    \ nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n  end\n  return\
    \ min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ya1ulel.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp0ya1ulel.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return nil\n  end\n  if #nums == 1 then\n    return\
    \ nums[1]\n  end\n  local sums = {}\n  sums[1] = nums[1]\n  for i = 2, #nums do\n\
    \    sums[i] = sums[i - 1] + nums[i]\n  end\n  local min = sums[1]\n  for i =\
    \ 1, #sums do\n    for j = i + 1, #sums do\n      if sums[j] - sums[i] < min then\n\
    \        min = sums[j] - sums[i]\n      end\n    end\n  end\n  return min\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0dr4l0jr.lua:33:\
    \ expected: -6, actual: -5\nstack traceback:\n\t/tmp/tmp0dr4l0jr.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = 0\n    local sum = 0\n    for i = 1, #nums do\n        sum\
    \ = sum + nums[i]\n        if sum > 0 then\n            if minSum == 0 then\n\
    \                minSum = sum\n            else\n                minSum = math.min(minSum,\
    \ sum)\n            end\n            sum = 0\n        end\n    end\n    return\
    \ minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeazvdw2p.lua:27:\
    \ expected: -6, actual: 0\nstack traceback:\n\t/tmp/tmpeazvdw2p.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  local min = math.huge\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = math.max(sum\
    \ + nums[i], nums[i])\n    min = math.min(min, sum)\n  end\n  return min\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphasvt79b.lua:19:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphasvt79b.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local sum = 0\n    local minSum = nums[1]\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpierzq32r.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minimumSum = nums[1]\n  local curSum = 0\n  for i = 1, #nums do\n   \
    \ curSum = curSum + nums[i]\n    if curSum < minimumSum then\n      minimumSum\
    \ = curSum\n    end\n    if curSum > 0 then\n      curSum = 0\n    end\n  end\n\
    \  return minimumSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local sum_ = nums[1]\n    local min_ = nums[1]\n    for i = 2, #nums do\n\
    \        if sum_ > 0 then\n            sum_ = nums[i]\n        else\n        \
    \    sum_ = sum_ + nums[i]\n        end\n        if sum_ < min_ then\n       \
    \     min_ = sum_\n        end\n    end\n    return min_\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- min sum of every subarray from index i with length k\n  local sum = {}\n\
    \  for i = 1, #nums do\n    sum[i] = {}\n    sum[i][1] = nums[i]\n  end\n  for\
    \ k = 2, #nums do\n    for i = 1, #nums - k + 1 do\n      local j = i + k - 1\n\
    \      sum[i][k] = sum[i][k - 1] + nums[j]\n    end\n  end\n  local min = sum[1][#nums]\n\
    \  for i = 1, #nums do\n    for k = 1, #nums - i + 1 do\n      if sum[i][k] <\
    \ min then\n        min = sum[i][k]\n      end\n    end\n  end\n  return min\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local s = nums[1]\n  local m = s\n  for i = 2, #nums do\n    s = s + nums[i]\n\
    \    if nums[i] < s then\n      s = nums[i]\n    end\n    if s < m then\n    \
    \  m = s\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- TODO: implement minSubArraySum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbu1zmi.lua:13:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpflbu1zmi.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i, n in ipairs(nums) do\n\
    \    sum = sum + n\n    if sum < minSum then\n      minSum = sum\n    end\n  \
    \  if sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min_sum = math.huge\n    local sum = 0\n    for i = 1, #nums do\n \
    \       sum = sum + nums[i]\n        if sum < min_sum then\n            min_sum\
    \ = sum\n        end\n        if sum > 0 then\n            sum = 0\n        end\n\
    \    end\n    return min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = nums[1]\n  local sum = 0\n  for i, num in ipairs(nums) do\n\
    \    sum = sum + num\n    if sum < min_sum then\n      min_sum = sum\n    end\n\
    \    if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local sum = 0\n    local min = nums[1]\n    for i = 1, #nums do\n       \
    \ sum = sum + nums[i]\n        if sum < min then\n            min = sum\n    \
    \    end\n        if sum > 0 then\n            sum = 0\n        end\n    end\n\
    \    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n   \
    \ if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local res = 0\n  for i = 1, #nums do\n    res = res + nums[i]\n  end\n  local\
    \ sum = res\n  local min_sum = res\n  for i = #nums, 1, -1 do\n    sum = sum -\
    \ nums[i]\n    min_sum = math.min(min_sum, sum)\n  end\n  return min_sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohoju3gb.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpohoju3gb.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- First, create a vector from the numbers where each value is the sum of\n\
    \  -- itself and everything before it.\n  local sums = {}\n  local sum = 0\n \
    \ for i, v in ipairs(nums) do\n    sum = sum + v\n    sums[i] = sum\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1635wuh2.lua:33: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  local min = math.huge\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min_sum = nums[1]\n    local sum = 0\n    for i = 1, #nums do\n   \
    \     sum = sum + nums[i]\n        if sum < min_sum then\n            min_sum\
    \ = sum\n        end\n        if sum > 0 then\n            sum = 0\n        end\n\
    \    end\n    return min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local result = nums[1]\n  local current = nums[1]\n  for i = 2, #nums do\n\
    \    current = math.min(current + nums[i], nums[i])\n    result = math.min(result,\
    \ current)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min, sum = math.huge, 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n\
    \    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n      sum\
    \ = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if nums == nil or #nums == 0 then\n    return 0\n  end\n  local sum = nums[1]\n\
    \  local minSum = sum\n  for i = 2, #nums do\n    if sum < 0 then\n      sum =\
    \ nums[i]\n    else\n      sum = sum + nums[i]\n    end\n    if sum < minSum then\n\
    \      minSum = sum\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpce98b8hb.lua:28:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpce98b8hb.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  local minSum = 0\n  local startIndex = 1\n  local endIndex\
    \ = 1\n  for index, num in ipairs(nums) do\n    sum = sum + num\n    if minSum\
    \ > sum then\n      minSum = sum\n      startIndex = index\n    end\n    if sum\
    \ - minSum > minSum then\n      minSum = sum - minSum\n      endIndex = index\n\
    \    end\n  end\n  return minSum, startIndex, endIndex\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbqf1w3e.lua:28:\
    \ expected: 1, actual: 10\nstack traceback:\n\t/tmp/tmpgbqf1w3e.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local res = nums[1]\n  local curr = nums[1]\n  for i = 2, #nums do\n    curr\
    \ = math.min(curr + nums[i], nums[i])\n    res = math.min(res, curr)\n  end\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return 0\n  end\n  local min_sum = nums[1]\n  local\
    \ sum = nums[1]\n  for i = 2, #nums do\n    sum = sum + nums[i]\n    if nums[i]\
    \ < sum then\n      sum = nums[i]\n    end\n    if sum < min_sum then\n      min_sum\
    \ = sum\n    end\n  end\n  return min_sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return 0\n  end\n  if #nums == 1 then\n    return nums[1]\n\
    \  end\n  local currentSum = nums[1]\n  local minSum = currentSum\n  for i = 2,\
    \ #nums do\n    currentSum = math.min(currentSum + nums[i], nums[i])\n    minSum\
    \ = math.min(minSum, currentSum)\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum, min = 0, 1 / 0\n  for i = 1, #nums do\n    sum = math.min(sum +\
    \ nums[i], nums[i])\n    min = math.min(min, sum)\n  end\n  return min\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    if #nums < 1 then\n        return 0\n    end\n    local sum = 0\n    local\
    \ min = nums[1]\n    for _, n in ipairs(nums) do\n        sum = sum + n\n    \
    \    if sum < min then\n            min = sum\n        end\n    end\n    return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1gv7504.lua:24:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpo1gv7504.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local sum = 0\n    local min = math.huge\n    for i = 1, #nums do\n     \
    \   sum = sum + nums[i]\n        if sum < min then\n            min = sum\n  \
    \      end\n        if sum > 0 then\n            sum = 0\n        end\n    end\n\
    \    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum, ans = 0, math.huge\n  for i, v in ipairs(nums) do\n    sum = sum\
    \ + v\n    ans = math.min(ans, sum)\n    if sum > 0 then\n      sum = 0\n    end\n\
    \  end\n  return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = nums[1]\n  local min_sum_so_far = 0\n  for i = 1, #nums do\n\
    \    min_sum_so_far = math.min(min_sum_so_far + nums[i], nums[i])\n    min_sum\
    \ = math.min(min_sum, min_sum_so_far)\n  end\n  return min_sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local curSum = 0\n  for i = 1, #nums do\n    curSum\
    \ = math.min(nums[i], curSum + nums[i])\n    minSum = math.min(minSum, curSum)\n\
    \  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum, minSum = 0, math.huge\n  for i = 1, #nums do\n    sum = math.min(sum\
    \ + nums[i], nums[i])\n    minSum = math.min(minSum, sum)\n  end\n  return minSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local n = #nums\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplh8rkwzo.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local len = #nums\n    local sum = 0\n    local min = math.huge\n    for\
    \ i = 1, len do\n        sum = sum + nums[i]\n        if sum < min then\n    \
    \        min = sum\n        end\n        if sum > 0 then\n            sum = 0\n\
    \        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = 0\n  local sum = 0\n  for i, v in ipairs(nums) do\n    sum\
    \ = sum + v\n    if sum < min_sum then\n      min_sum = sum\n    end\n  end\n\
    \  return min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xz7qzci.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp1xz7qzci.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  local min = math.huge\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  local result = math.huge\n  local start = 1\n  local end_\
    \ = 1\n  while end_ <= #nums do\n    sum = sum + nums[end_]\n    while sum >=\
    \ 0 do\n      result = math.min(result, sum)\n      sum = sum - nums[start]\n\
    \      start = start + 1\n    end\n    end_ = end_ + 1\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdwtwokna.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpdwtwokna.lua:15: in local 'candidate'\n\t/tmp/tmpdwtwokna.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local current_sum = 0\n  for i, val in ipairs(nums)\
    \ do\n    current_sum = current_sum + val\n    if current_sum < min_sum then\n\
    \      min_sum = current_sum\n    end\n    if current_sum > 0 then\n      current_sum\
    \ = 0\n    end\n  end\n  return min_sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local result = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    result = math.min(result, sum)\n    if sum > 0 then\n   \
    \   sum = 0\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min = math.huge\n    local sum = 0\n    for i = 1, #nums do\n     \
    \   sum = sum + nums[i]\n        if sum < min then\n            min = sum\n  \
    \      end\n        if sum > 0 then\n            sum = 0\n        end\n    end\n\
    \    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min_sum = nums[1]\n    local running_sum = nums[1]\n    for i = 2,\
    \ #nums do\n        running_sum = math.min(running_sum + nums[i], nums[i])\n \
    \       min_sum = math.min(min_sum, running_sum)\n    end\n    return min_sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local currentSum = nums[1]\n  local minSum = nums[1]\n  for i = 2, #nums do\n\
    \    currentSum = math.min(currentSum + nums[i], nums[i])\n    minSum = math.min(minSum,\
    \ currentSum)\n  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local currentSum = 0\n    local minSum = nil\n    for _, n in ipairs(nums)\
    \ do\n        currentSum = currentSum + n\n        if minSum == nil or currentSum\
    \ < minSum then\n            minSum = currentSum\n        end\n        if currentSum\
    \ > 0 then\n            currentSum = 0\n        end\n    end\n    return minSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = nums[1]\n  local running_sum = nums[1]\n  for i = 2, #nums\
    \ do\n    running_sum = math.min(running_sum + nums[i], nums[i])\n    min_sum\
    \ = math.min(min_sum, running_sum)\n  end\n  return min_sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local curMin = nums[1]\n  local curSum = nums[1]\n  for i = 2, #nums do\n \
    \   curSum = math.min(curSum + nums[i], nums[i])\n    curMin = math.min(curMin,\
    \ curSum)\n  end\n  return curMin\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for _, num in ipairs(nums) do\n\
    \    sum = sum + num\n    minSum = math.min(minSum, sum)\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local current = nums[1]\n  local best = current\n  for i = 2, #nums do\n  \
    \  current = math.min(current + nums[i], nums[i])\n    best = math.min(best, current)\n\
    \  end\n  return best\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local prev = nums[1]\n    local curr = math.min(prev, 0)\n    local best\
    \ = prev\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3icceg8p.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local n = #nums\n  local minSum = 1e100\n  local curSum = 0\n  for i = 1, n\
    \ do\n    curSum = curSum + nums[i]\n    if curSum < minSum then\n      minSum\
    \ = curSum\n    end\n    if curSum > 0 then\n      curSum = 0\n    end\n  end\n\
    \  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local minSoFar = nums[1]\n  for i = 2, #nums do\n\
    \    minSoFar = math.min(nums[i], minSoFar + nums[i])\n    minSum = math.min(minSum,\
    \ minSoFar)\n  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if not nums then return nil end\n  local current_sum = nums[1]\n  local min_sum\
    \ = nums[1]\n  for i = 2, #nums do\n    current_sum = math.min(nums[i], current_sum\
    \ + nums[i])\n    min_sum = math.min(min_sum, current_sum)\n  end\n  return min_sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = nums[1]\n  local current_sum = nums[1]\n  for i = 2, #nums\
    \ do\n    if current_sum + nums[i] < nums[i] then\n      current_sum = current_sum\
    \ + nums[i]\n    else\n      current_sum = nums[i]\n    end\n    if current_sum\
    \ < min_sum then\n      min_sum = current_sum\n    end\n  end\n  return min_sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- check if input is valid\n  if type(nums) ~= \"table\" then\n    return\n\
    \  end\n  local min_sum = nums[1]\n  local curr_sum = 0\n  for _, num in ipairs(nums)\
    \ do\n    curr_sum = curr_sum + num\n    if curr_sum < min_sum then\n      min_sum\
    \ = curr_sum\n    end\n    if curr_sum > 0 then\n      curr_sum = 0\n    end\n\
    \  end\n  return min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = 0\n  local minSum = math.huge\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = 100000\n  local current_sum = 0\n  for index, value in ipairs(nums)\
    \ do\n    current_sum = current_sum + value\n    if current_sum < min_sum then\n\
    \      min_sum = current_sum\n    end\n    if current_sum > 0 then\n      current_sum\
    \ = 0\n    end\n  end\n  return min_sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local rv = nums[1]\n  local sum = nums[1]\n  for i = 2, #nums do\n    sum =\
    \ math.min(sum + nums[i], nums[i])\n    rv = math.min(rv, sum)\n  end\n  return\
    \ rv\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = math.huge\n  local prev = math.huge\n  for i = 1, #nums do\n  \
    \  if prev > nums[i] then\n      prev = nums[i]\n    end\n    local current =\
    \ 0\n    for j = i, #nums do\n      current = current + nums[j]\n      if current\
    \ < sum then\n        sum = current\n      end\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local len = #nums\n  local result = nums[1]\n  local sum = 0\n  for i = 1,\
    \ len do\n    sum = sum + nums[i]\n    if sum < result then\n      result = sum\n\
    \    end\n    if sum > 0 then\n      sum = 0\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local n = #nums\n  local ans = nums[1]\n  local cur = nums[1]\n  for i = 2,\
    \ n do\n    cur = math.min(cur + nums[i], nums[i])\n    ans = math.min(ans, cur)\n\
    \  end\n  return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local numsLen = #nums\n  if numsLen == 0 then\n    return 0\n  end\n  local\
    \ min = nums[1]\n  local sum = nums[1]\n  for i = 2, numsLen do\n    if sum <\
    \ 0 then\n      sum = nums[i]\n    else\n      sum = sum + nums[i]\n    end\n\
    \    if sum < min then\n      min = sum\n    end\n  end\n  return min\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0m4ercf.lua:29:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk0m4ercf.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = 0\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum +\
    \ nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n  end\n  return\
    \ min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75u6w77y.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp75u6w77y.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local sum = nums[1]\n    local minSum = sum\n    for i = 2, #nums do\n  \
    \      if sum < 0 then\n            sum = nums[i]\n        else\n            sum\
    \ = sum + nums[i]\n        end\n        if sum < minSum then\n            minSum\
    \ = sum\n        end\n    end\n    return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8pjbsvt.lua:25:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpr8pjbsvt.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local maxInt = math.maxinteger\n  local minSoFar = maxInt\n  local curMin =\
    \ 0\n  for _, n in ipairs(nums) do\n    curMin = math.min(curMin + n, n)\n   \
    \ minSoFar = math.min(minSoFar, curMin)\n  end\n  return minSoFar\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = nums[1]\n  local curr_sum = nums[1]\n  for i = 2, #nums do\n\
    \    curr_sum = math.min(nums[i], curr_sum + nums[i])\n    min_sum = math.min(min_sum,\
    \ curr_sum)\n  end\n  return min_sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = 0\n  local sum = 0\n  for i, v in ipairs(nums) do\n    if v\
    \ < min_sum then\n      min_sum = v\n    end\n    sum = sum + v\n    if sum <\
    \ min_sum then\n      min_sum = sum\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb6yjkag.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpxb6yjkag.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_so_far = 0\n  local min_ending_here = 0\n  for _, num in ipairs(nums)\
    \ do\n    min_ending_here = math.min(0, min_ending_here + num)\n    min_so_far\
    \ = math.min(min_so_far, min_ending_here)\n  end\n  return min_so_far\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp246n46dk.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp246n46dk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if not nums then return nil end\n  local n = #nums\n  if n < 1 then return\
    \ nil end\n  local min_sum = nums[1]\n  local sum = 0\n  for i = 1, n do\n   \
    \ sum = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n\
    \    if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minsum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minsum then\n      minsum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minsum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local sum = nums[1]\n  local minSum = nums[1]\n  for i = 2, #nums do\n    sum\
    \ = math.min(nums[i], sum + nums[i])\n    minSum = math.min(minSum, sum)\n  end\n\
    \  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min_sum = 0\n    local min_so_far = 0\n    for _, n in ipairs(nums)\
    \ do\n        min_so_far = math.min(min_so_far + n, 0)\n        min_sum = math.min(min_sum,\
    \ min_so_far)\n    end\n    return -min_sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6_sqznh.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmph6_sqznh.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- First, detect whether all elements are positive, negative or zero\n  local\
    \ type = \"mixed\"\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n\
    \    if nums[i] > 0 then\n      type = \"positive\"\n    elseif nums[i] < 0 then\n\
    \      type = \"negative\"\n    end\n  end\n  if type == \"positive\" then\n \
    \   return 0\n  elseif type == \"negative\" then\n    return sum\n  end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9wzqxubn.lua:41: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  if #nums == 0 then\n    return 0\n  end\n  local min = nums[1]\n  local cur\
    \ = nums[1]\n  for i = 2, #nums do\n    cur = math.min(cur + nums[i], nums[i])\n\
    \    min = math.min(min, cur)\n  end\n  return min\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local length = #nums\n    local minSum = nums[1]\n    local currentSum =\
    \ 0\n    for i = 1, length do\n        currentSum = currentSum + nums[i]\n   \
    \     if currentSum < minSum then\n            minSum = currentSum\n        end\n\
    \        if currentSum > 0 then\n            currentSum = 0\n        end\n   \
    \ end\n    return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local size = #nums\n  local sum = 0\n  local minimum = math.huge\n  local i\
    \ = 1\n  while i <= size do\n    sum = sum + nums[i]\n    minimum = math.min(minimum,\
    \ sum)\n    if sum > 0 then\n      sum = 0\n    end\n    i = i + 1\n  end\n  return\
    \ minimum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local min_idx = 0\n  local sum = 0\n  for i = 1, #nums\
    \ do\n    sum = sum + nums[i]\n    if sum < min then\n      min = sum\n      min_idx\
    \ = i\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cmk7w1v.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp1cmk7w1v.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = nums[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_fvwx9_o.lua:26: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqsl9s29.lua:13:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpyqsl9s29.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = nums[1]\n  for i = 2, #nums do\n    sum\
    \ = math.min(sum + nums[i], nums[i])\n    minSum = math.min(minSum, sum)\n  end\n\
    \  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local s = math.huge\n  local sum = 0\n  local left = 1\n  for i = 1, #nums\
    \ do\n    sum = sum + nums[i]\n    while sum >= s do\n      s = math.min(s, sum)\n\
    \      sum = sum - nums[left]\n      left = left + 1\n    end\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc_0ae_6.lua:24:\
    \ expected: 1, actual: #Inf\nstack traceback:\n\t/tmp/tmpsc_0ae_6.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local total = 0\n  local min_sum = 0\n  local min_sum_found = false\n  for\
    \ i = 1, #nums do\n    total = total + nums[i]\n    if total < min_sum or not\
    \ min_sum_found then\n      min_sum = total\n      min_sum_found = true\n    end\n\
    \  end\n  return min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgyd_au9.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjgyd_au9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local current_sum = 0\n  for i = 1, #nums do\n\
    \    current_sum = math.min(nums[i], current_sum + nums[i])\n    min_sum = math.min(min_sum,\
    \ current_sum)\n  end\n  return min_sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nil\n  local len = #nums\n  for i = 1, len do\n    local sum =\
    \ 0\n    for j = i, len do\n      sum = sum + nums[j]\n      if min == nil or\
    \ sum < min then\n        min = sum\n      end\n    end\n  end\n  return min\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = 0\n  local cur = 0\n  for i = 1, #nums do\n    cur = cur + nums[i]\n\
    \    if cur < min then\n      min = cur\n    end\n  end\n  return min\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_loxtoec.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_loxtoec.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  -- TODO: Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqh53pahw.lua:13:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpqh53pahw.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local curSum = 0\n    local curMin = 0\n    local minSum = math.huge\n  \
    \  for i, val in ipairs(nums) do\n        curSum = curSum + val\n        minSum\
    \ = math.min(minSum, curSum - curMin)\n        curMin = math.min(curMin, curSum)\n\
    \    end\n    return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxnvmtz1i.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpxnvmtz1i.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
