name: HumanEval_86_anti_shuffle
language: lua
results:
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ t = {}\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c == ' ' then\n\
    \      t[#t + 1] = ' '\n    else\n      if not t[#t] then\n        t[#t + 1] =\
    \ c\n      else\n        local n = t[#t]\n        local nv = n:byte()\n      \
    \  local cv = c:byte()\n        if nv < cv then\n          t[#t + 1] = c\n   \
    \     else\n          table.insert(t, #t, c)\n        end\n      end\n    end\n\
    \  end\n  return table.concat(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9e1xzwfs.lua:39:\
    \ expected: \"bemnru\"\nactual: \"nmberu\"\nstack traceback:\n\t/tmp/tmp9e1xzwfs.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmewou4zr.lua:16:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpmewou4zr.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp90fg8wgu.lua:18:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmp90fg8wgu.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ ss = {}\n    for w in s:gmatch('%S+') do\n        local ww = {}\n        for\
    \ c in w:gmatch('.') do\n            table.insert(ww, c)\n        end\n      \
    \  table.sort(ww)\n        table.insert(ss, table.concat(ww))\n    end\n    return\
    \ table.concat(ss, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- body\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxr0efpk.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpnxr0efpk.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ result = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(result,\
    \ word:gsub(\".\", function(char)\n            local sorted = {}\n           \
    \ for i=1, #word do\n                table.insert(sorted, word:sub(i, i))\n  \
    \          end\n            table.sort(sorted)\n            return table.concat(sorted)\n\
    \        end))\n    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc2j7h3jt.lua:13:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpc2j7h3jt.lua:13: in local 'candidate'\n\t/tmp/tmpc2j7h3jt.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Implement\
    \ your solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx420o_w7.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpx420o_w7.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ result = {}\n    for word in s:gmatch('%S+') do\n        local chars = {}\n\
    \        for char in word:gmatch('.') do\n            table.insert(chars, char)\n\
    \        end\n        table.sort(chars)\n        table.insert(result, table.concat(chars))\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ result = \"\"\n    local arr = string.split(s, \" \")\n    for _, word in ipairs(arr)\
    \ do\n        table.sort(word)\n        result = result .. word\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ss_0uwq.lua:12:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp4ss_0uwq.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp4ss_0uwq.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ ret_tbl = {}\n  local ret_str = ''\n  for word in s:gmatch('%w+') do\n    ret_tbl[#ret_tbl\
    \ + 1] = word:gsub('.', function(l) return ' ' .. l end)\n  end\n  for _, val\
    \ in ipairs(ret_tbl) do\n    ret_str = ret_str .. table.concat(t_sort(val:sub(2,\
    \ -1):gmatch('.')))\n  end\n  return ret_str\nend\nprint(anti_shuffle('Hello World!!!'))\
    \ -- Hello !!!Wdlor\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5r2acbo5.lua:17: attempt to call a nil value (global 't_sort')\n\
    stack traceback:\n\t/tmp/tmp5r2acbo5.lua:17: in local 'anti_shuffle'\n\t/tmp/tmp5r2acbo5.lua:21:\
    \ in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ ordered = \"\"\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    local\
    \ chars = {}\n    for c in w:gmatch(\".\") do\n      table.insert(chars, c)\n\
    \    end\n    table.sort(chars)\n    local sorted = table.concat(chars)\n    table.insert(words,\
    \ sorted)\n  end\n  ordered = table.concat(words, \" \")\n  return ordered\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ t = {}\n    for word in s:gmatch('%S+') do\n        local t_new = {}\n     \
    \   for c in word:gmatch('.') do\n            table.insert(t_new, c)\n       \
    \ end\n        table.sort(t_new)\n        table.insert(t, table.concat(t_new))\n\
    \    end\n    return table.concat(t, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  local word = {}\n  for i = 1, #s do\n    if s:sub(i, i) == ' '\
    \ then\n      table.insert(words, table.concat(word))\n      word = {}\n    else\n\
    \      table.insert(word, s:sub(i, i))\n    end\n  end\n  table.insert(words,\
    \ table.concat(word))\n  word = {}\n  for i = 1, #words do\n    local word = words[i]\n\
    \    local chars = {}\n    for j = 1, #word do\n      table.insert(chars, word:sub(j,\
    \ j))\n    end\n    table.sort(chars)\n    words[i] = table.concat(chars)\n  end\n\
    \  return table.concat(words)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn9v73t7.lua:42:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \"Hello!!!Wdlor\"\nstack traceback:\n\t\
    /tmp/tmpfn9v73t7.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    s =\
    \ s:gsub(\"%w+\", function(w) return string.gsub(w, \"(.)\", function(char) return\
    \ char end) end)\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpenma9zt9.lua:19:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpenma9zt9.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\tlocal\
    \ words = {}\n\tfor i in string.gmatch(s, \"%S+\") do table.insert(words, i) end\n\
    \tlocal o = {}\n\tfor _, w in ipairs(words) do\n\t\tlocal l = {}\n\t\tfor c in\
    \ string.gmatch(w, \".\") do table.insert(l, c) end\n\t\ttable.sort(l)\n\t\ttable.insert(o,\
    \ table.concat(l))\n\tend\n\treturn table.concat(o, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    assert(type(s)\
    \ == 'string')\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8ygzsc6.lua:19:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpx8ygzsc6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ str = ''\n  for word in s:gmatch('%S+') do\n    str = str .. ' ' .. anti_shuffle_word(word)\n\
    \  end\n  return str:sub(2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsaomx6_3.lua:13:\
    \ attempt to call a nil value (global 'anti_shuffle_word')\nstack traceback:\n\
    \t/tmp/tmpsaomx6_3.lua:13: in local 'candidate'\n\t/tmp/tmpsaomx6_3.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ t = {}\n  for word in s:gmatch(\"%S+\") do\n    local t2 = {}\n    for c in\
    \ word:gmatch(\".\") do\n      table.insert(t2, c)\n    end\n    table.sort(t2)\n\
    \    table.insert(t, table.concat(t2))\n  end\n  return table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ function sortString(w)\n    local t = {}\n    for i = 1, #w do\n      table.insert(t,\
    \ w:sub(i, i))\n    end\n    table.sort(t)\n    return table.concat(t)\n  end\n\
    \  local t = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(t, sortString(w))\n\
    \  end\n  for b in s:gmatch(\"%s+\") do\n    table.insert(t, b)\n  end\n  return\
    \ table.concat(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73zexuww.lua:36:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \"Hello!!!Wdlor \"\nstack traceback:\n\
    \t/tmp/tmp73zexuww.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\t--[[\n\
    \t\tAuxiliar functions\n\t--]]\n\t-- sort a string, using ascii values\n\tlocal\
    \ function sort(s)\n\t\t--[[\n\t\t\tAuxiliar functions\n\t\t--]]\n\t\t-- Sorts\
    \ a table of characters based on their ascii value\n\t\tlocal function sort_table(t)\n\
    \t\t\tfor j = 1, #t do\n\t\t\t\tfor i = 1, #t - 1 do\n\t\t\t\t\tif t[i] > t[i\
    \ + 1] then\n\t\t\t\t\t\tt[i], t[i + 1] = t[i + 1], t[i]\n\t\t\t\t\tend\n\t\t\t\
    \tend\n\t\t\tend\n\t\tend\n\t\t-- end of auxiliar functions\n\t\tlocal t = {}\n\
    \t\tlocal sorted = \"\"\n\t\tfor i = 1, #s do\n\t\t\ttable.insert(t, s:sub(i,\
    \ i))\n\t\tend\n\t\tsort_table(t)\n\t\tfor i = 1, #t do\n\t\t\tsorted = sorted\
    \ .. t[i]\n\t\tend\n\t\treturn sorted\n\tend\n\t-- divides a string in words (separeted\
    \ by spaces)\n\tlocal function divide_words(s)\n\t\tlocal words = {}\n\t\tfor\
    \ word in s:gmatch(\"%S+\") do\n\t\t\ttable.insert(words, word)\n\t\tend\n\t\t\
    return words\n\tend\n\t-- end of auxiliar functions\n\tlocal anti_shuffled = \"\
    \"\n\tlocal words = divide_words(s)\n\tfor i = 1, #words do\n\t\tanti_shuffled\
    \ = anti_shuffled .. sort(words[i]) .. \" \"\n\tend\n\treturn anti_shuffled:sub(1,\
    \ #anti_shuffled - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0mgduofl.lua:16:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp0mgduofl.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    if\
    \ s == '' then\n        return ''\n    end\n    -- separate the string by space\
    \ and store them in a table\n    local words = split(s)\n    local result = {}\n\
    \    for _, v in ipairs(words) do\n        -- add the new string to the table\n\
    \        table.insert(result, sort_chars(v))\n    end\n    -- concatenate all\
    \ elements in table separated by space\n    return table.concat(result, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpza6hkrri.lua:15:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpza6hkrri.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpza6hkrri.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\tlocal\
    \ table = s:split(\" \")\n\tfor k,v in pairs(table) do\n\t\ttable[k] = v:gsub(\"\
    (.)\", function(c) return table.concat(c:match(\"(.)\"),\"\",function(a,b) return\
    \ a:byte() < b:byte() end) end)\n\tend\n\treturn table.concat(table,\" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplugecrbj.lua:11:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmplugecrbj.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmplugecrbj.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ t = {}\n  local s2 = \"\"\n  -- write your code here\n  for w in string.gmatch(s,\
    \ \"%S+\") do\n    table.insert(t, w)\n  end\n  for i = 1, #t do\n    local str\
    \ = t[i]\n    str = string.lower(str)\n    local t1 = {}\n    for c in string.gmatch(str,\
    \ \"%a\") do\n      table.insert(t1, c)\n    end\n    table.sort(t1)\n    local\
    \ str2 = table.concat(t1)\n    str2 = string.upper(str2)\n    s2 = s2 .. str2\
    \ .. \" \"\n  end\n  return s2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22wzprvw.lua:35:\
    \ expected: \"Hi\"\nactual: \"HI \"\nstack traceback:\n\t/tmp/tmp22wzprvw.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    return\
    \ (s:gsub(\"%w+\", function(word)\n        return table.concat(word:gmatch(\"\
    .\"):sort())\n    end))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfa10l5az.lua:12:\
    \ attempt to index a function value\nstack traceback:\n\t/tmp/tmpfa10l5az.lua:12:\
    \ in function </tmp/tmpfa10l5az.lua:11>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpfa10l5az.lua:11: in local 'candidate'\n\t/tmp/tmpfa10l5az.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\ts = s:gsub(\"\
    %s\", \"  \")\n\ts = s:gsub(\"(%w+)\", function(n) return n:gsub(\".\", \"%1\"\
    ):reverse() end)\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2eom5tct.lua:19:\
    \ expected: \"Hi\"\nactual: \"iH\"\nstack traceback:\n\t/tmp/tmp2eom5tct.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplla0jy8x.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmplla0jy8x.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local sorted = {}\n    for word in s:gmatch(\"%S+\") do\n  \
    \      table.insert(words, word)\n    end\n    for i = 1, #words do\n        table.insert(sorted,\
    \ table.concat(str_sort(words[i]), \"\"))\n    end\n    return table.concat(sorted,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpphpznkb5.lua:17:\
    \ attempt to call a nil value (global 'str_sort')\nstack traceback:\n\t/tmp/tmpphpznkb5.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpphpznkb5.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9g_082n.lua:18:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpy9g_082n.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedt7pw3c.lua:18:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpedt7pw3c.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- My\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bw7jirs.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp6bw7jirs.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6fixu0sf.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp6fixu0sf.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ result = \"\"\n  for word in s:gmatch(\"%S+\") do\n    local tmp = \"\"\n  \
    \  for c in word:gmatch(\".\") do\n      tmp = tmp .. c\n    end\n    table.sort(tmp)\n\
    \    result = result .. tmp\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3ww6ko0.lua:17:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpo3ww6ko0.lua:17: in local 'candidate'\n\t/tmp/tmpo3ww6ko0.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  local sorted_words = {}\n  local index = 1\n  for word in string.gmatch(s,\
    \ \"%S+\") do\n    words[index] = word\n    index = index + 1\n  end\n  for i\
    \ = 1, #words do\n    local chars = {}\n    local index = 1\n    for char in string.gmatch(words[i],\
    \ \".\") do\n      chars[index] = char\n      index = index + 1\n    end\n   \
    \ table.sort(chars)\n    local sorted_word = table.concat(chars)\n    sorted_words[i]\
    \ = sorted_word\n  end\n  local final_string = table.concat(sorted_words, \" \"\
    )\n  return final_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ c = {}\n    local t = s:gmatch('%w+')\n    local r = ''\n    for i in t do\n\
    \        table.insert(c, i)\n    end\n    for k, v in pairs(c) do\n        table.sort(v:gmatch('.'))\n\
    \        for _, char in pairs(v:gmatch('.')) do\n            r = r .. char\n \
    \       end\n        r = r .. ' '\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4u35k44z.lua:18:\
    \ bad argument #1 to 'sort' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp4u35k44z.lua:18: in local 'candidate'\n\t/tmp/tmp4u35k44z.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  return\
    \ table.concat(fun.map(function(w)\n    local t = fun.totable(w)\n    table.sort(t)\n\
    \    return table.concat(t)\n  end, fun.iter(s:gmatch('%S+'))), ' ')\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxt0sw6wc.lua:11:\
    \ attempt to index a nil value (global 'fun')\nstack traceback:\n\t/tmp/tmpxt0sw6wc.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpxt0sw6wc.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ arr = string.split(s, \" \")\n  local ret = \"\"\n  for k, v in pairs(arr) do\n\
    \    ret = ret .. \" \" .. char_sort(v)\n  end\n  return string.sub(ret, 2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuv1zgwo3.lua:11:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpuv1zgwo3.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpuv1zgwo3.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ new_words = {}\n    for word in s:gmatch(\"%S+\") do\n        local sorted_word\
    \ = {}\n        for char in word:gmatch(\".\") do\n            sorted_word[#sorted_word\
    \ + 1] = char\n        end\n        table.sort(sorted_word)\n        new_words[#new_words\
    \ + 1] = table.concat(sorted_word)\n    end\n    return table.concat(new_words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ function tbl_sort(tbl)\n    local a, b = {}, {}\n    for _, v in ipairs(tbl)\
    \ do\n      table.insert(a, v)\n    end\n    for i = 2, #a do\n      local val\
    \ = a[i]\n      j = i - 1\n      while j > 0 and a[j] > val do\n        a[j +\
    \ 1] = a[j]\n        j = j - 1\n      end\n      a[j + 1] = val\n    end\n   \
    \ return a\n  end\n  local result = ''\n  for word in s:gmatch('%w+') do\n   \
    \ local a = {}\n    for ch in word:gmatch('.') do\n      table.insert(a, ch)\n\
    \    end\n    word = table.concat(tbl_sort(a))\n    result = result .. word\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbz04lisl.lua:46:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \"HelloWdlor\"\nstack traceback:\n\t/tmp/tmpbz04lisl.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_3jwawy.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmps_3jwawy.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  if s\
    \ == '' then return '' end\n  local r = {}\n  local d = {}\n  for w in s:gmatch(\"\
    %S+\") do\n    local t = {}\n    for c in w:gmatch(\".\") do\n      t[#t+1] =\
    \ c\n    end\n    table.sort(t)\n    d[#d+1] = table.concat(t)\n  end\n  for w\
    \ in s:gmatch(\"%S+\") do\n    r[#r+1] = d[1]\n    table.remove(d, 1)\n  end\n\
    \  for w in s:gmatch(\"%s+\") do\n    r[#r+1] = w\n  end\n  return table.concat(r)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbskv153.lua:39:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \"Hello!!!Wdlor \"\nstack traceback:\n\
    \t/tmp/tmpvbskv153.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0dji407t.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp0dji407t.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ Implement this function!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdj2cye6.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpzdj2cye6.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_3nq1kp.lua:16:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_3nq1kp.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- You\
    \ can use string.find, string.lower, string.match and string.sub here\n  -- string.find(s,\
    \ pattern, init, plain)\n  -- string.lower(s)\n  -- string.match(s, pattern, init)\n\
    \  -- string.sub(s, i, j)\n  -- Type \"man string\" for more information\n  --return\
    \ 'Hi'\n  --return 'ehllo'\n  --return 'Hello !!!Wdlor'\n  local res = \"\"\n\
    \  local idx = 1\n  while idx <= #s do\n    local nidx = string.find(s, \"%s\"\
    , idx)\n    if nidx == nil then\n      res = res .. anti_shuffle_word(string.sub(s,\
    \ idx))\n      idx = #s + 1\n    else\n      res = res .. anti_shuffle_word(string.sub(s,\
    \ idx, nidx - 1)) .. \" \"\n      idx = nidx + 1\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6qwowsr2.lua:25:\
    \ attempt to call a nil value (global 'anti_shuffle_word')\nstack traceback:\n\
    \t/tmp/tmp6qwowsr2.lua:25: in local 'candidate'\n\t/tmp/tmp6qwowsr2.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ Write code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5a6uivy3.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp5a6uivy3.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ function ascii_sort(a, b)\n    return a:byte() < b:byte()\n  end\n  return s:gsub('%S+',\
    \ function(w)\n    return table.concat(table.sort(utils.split(w, ''), ascii_sort))\n\
    \  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb5qcc17d.lua:15:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpb5qcc17d.lua:15:\
    \ in function </tmp/tmpb5qcc17d.lua:14>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpb5qcc17d.lua:14: in local 'candidate'\n\t/tmp/tmpb5qcc17d.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ s0 = s:gsub('%w+', function(word)\n    local chars = {}\n    for char in word:gmatch('.')\
    \ do\n      table.insert(chars, char)\n    end\n    table.sort(chars)\n    return\
    \ table.concat(chars)\n  end)\n  return s0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkli12cje.lua:29:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \"Hello Wdlor!!!\"\nstack traceback:\n\
    \t/tmp/tmpkli12cje.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words, ans = {}, ''\n  for word in s:gmatch('%S+') do\n    table.insert(words,\
    \ word)\n  end\n  for i = 1, #words do\n    local word = words[i]\n    local arr\
    \ = {}\n    for j = 1, #word do\n      table.insert(arr, word:sub(j, j))\n   \
    \ end\n    table.sort(arr)\n    ans = ans .. table.concat(arr)\n    if i ~= #words\
    \ then\n      ans = ans .. ' '\n    end\n  end\n  return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  return\
    \ s:gsub('%S+', function(w) return w:gsub('.', function(c) return string.char(string.byte(c)\
    \ + 1) end) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqx7c4xu.lua:17:\
    \ expected: \"Hi\"\nactual: \"Ij\"\nstack traceback:\n\t/tmp/tmpbqx7c4xu.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvm3n5mr3.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpvm3n5mr3.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ sorted, words = {}, {};\n  for word in s:gmatch(\"%S+\") do\n    words[#words\
    \ + 1] = word;\n  end\n  for i, word in ipairs(words) do\n    local chars = {};\n\
    \    for i = 1, word:len() do\n      chars[#chars + 1] = word:sub(i, i);\n   \
    \ end\n    table.sort(chars);\n    sorted[#sorted + 1] = table.concat(chars);\n\
    \  end\n  return table.concat(sorted, \" \");\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7q3vdc9r.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp7q3vdc9r.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local str = ''\n    local len = 0\n    for w in s:gmatch('%S+')\
    \ do\n        table.insert(words, w)\n        len = len + 1\n    end\n    for\
    \ i = 1, len do\n        local word = words[i]\n        local char_table = {}\n\
    \        for c in word:gmatch('.') do\n            table.insert(char_table, c)\n\
    \        end\n        table.sort(char_table)\n        local new_word = ''\n  \
    \      for i = 1, #char_table do\n            new_word = new_word .. char_table[i]\n\
    \        end\n        str = str .. new_word .. ' '\n    end\n    return str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuf0r1fm6.lua:37:\
    \ expected: \"Hi\"\nactual: \"Hi \"\nstack traceback:\n\t/tmp/tmpuf0r1fm6.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = string.split(s, ' ')\n    local result = {}\n    for i, v in ipairs(words)\
    \ do\n        table.insert(result, sort_by_ascii(v))\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8fd3hx7q.lua:11:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp8fd3hx7q.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp8fd3hx7q.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- write\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05pc1r11.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp05pc1r11.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ str = {}\n    for w in s:gmatch('%S+') do\n        local chars = {}\n      \
    \  for c in w:gmatch('.') do\n            chars[#chars + 1] = c\n        end\n\
    \        table.sort(chars)\n        str[#str + 1] = table.concat(chars)\n    end\n\
    \    return table.concat(str, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\ts = string.gsub(s,\
    \ \"%S+\",\n\t\tfunction(word)\n\t\t\tlocal chars = {}\n\t\t\tfor i = 1, #word\
    \ do\n\t\t\t\tchars[i] = word:sub(i, i)\n\t\t\tend\n\t\t\ttable.sort(chars)\n\t\
    \t\treturn table.concat(chars)\n\t\tend)\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwizr9b5y.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpwizr9b5y.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  return\
    \ s:gsub(\"%w+\", function(s) return s:gsub(\".\", \"%1\"):sort() end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7kellb0x.lua:11:\
    \ attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmp7kellb0x.lua:11:\
    \ in function </tmp/tmp7kellb0x.lua:11>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmp7kellb0x.lua:11: in local 'candidate'\n\t/tmp/tmp7kellb0x.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    s =\
    \ s:gsub(\"%a+\", function(word)\n        local t = {}\n        for c in word:gmatch(\"\
    .\") do\n            table.insert(t, c)\n        end\n        table.sort(t)\n\
    \        return table.concat(t)\n    end)\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpademodkr.lua:29:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \"Hello Wdlor!!!\"\nstack traceback:\n\
    \t/tmp/tmpademodkr.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\t-- body\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp880tgr9g.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp880tgr9g.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Implemented\
    \ using a custom sort function that sorts in reverse order\n  return (s:gsub(\"\
    %S+\", function(word)\n    local letters = {}\n    for letter in word:gmatch(\"\
    .\") do\n      table.insert(letters, letter)\n    end\n    table.sort(letters,\
    \ function(a, b)\n      return a > b\n    end)\n    return table.concat(letters)\n\
    \  end))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb0z3vjs.lua:27:\
    \ expected: \"Hi\"\nactual: \"iH\"\nstack traceback:\n\t/tmp/tmpxb0z3vjs.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    if\
    \ s == '' then\n        return ''\n    end\n    local words = {}\n    local word\
    \ = ''\n    for i=1, #s do\n        if s:sub(i,i) == ' ' then\n            table.insert(words,\
    \ word)\n            word = ''\n        else\n            word = word .. s:sub(i,i)\n\
    \        end\n    end\n    table.insert(words, word)\n    local result = ''\n\
    \    for i=1, #words do\n        words[i] = sort_chars(words[i])\n        result\
    \ = result .. words[i] .. ' '\n    end\n    return result:sub(1,#result-1)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmple4gnqjh.lua:27:\
    \ attempt to call a nil value (global 'sort_chars')\nstack traceback:\n\t/tmp/tmple4gnqjh.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmple4gnqjh.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ ret = ''\n  for word in s:gmatch('%S+') do\n    local tmp = ''\n    for c in\
    \ word:gmatch('.') do\n      tmp = tmp .. c\n    end\n    table.sort(tmp)\n  \
    \  for i=1, #tmp do\n      ret = ret .. tmp[i]\n    end\n    ret = ret .. ' '\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp06gpspy.lua:17:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpp06gpspy.lua:17: in local 'candidate'\n\t/tmp/tmpp06gpspy.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ t = {}\n    for i = 1, #s do\n        t[i] = s:sub(i, i)\n    end\n    table.sort(t)\n\
    \    local res = ''\n    for _, v in ipairs(t) do\n        res = res .. v\n  \
    \  end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsu5vyvv5.lua:30:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \" !!!HWdellloor\"\nstack traceback:\n\
    \t/tmp/tmpsu5vyvv5.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  return\
    \ (s:gsub('[%w]+', function(m)\n    return m:gsub('.', function(c)\n      return\
    \ string.char(s:find(c,1,true) + 96)\n    end)\n  end))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5uzh2vbi.lua:21:\
    \ expected: \"Hi\"\nactual: \"ab\"\nstack traceback:\n\t/tmp/tmp5uzh2vbi.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"[%w']+\") do\n        table.insert(words,\
    \ word)\n    end\n    local anti_shuffled_words = {}\n    for i, w in ipairs(words)\
    \ do\n        local chars = {}\n        for c in w:gmatch(\".\") do\n        \
    \    table.insert(chars, c)\n        end\n        table.sort(chars)\n        local\
    \ anti_shuffled_word = table.concat(chars)\n        table.insert(anti_shuffled_words,\
    \ anti_shuffled_word)\n    end\n    local w = s:gsub(\"[%w']+\", \"%1\")\n   \
    \ local joined = \"\"\n    for i, c in ipairs(w) do\n        if c == \" \" then\n\
    \            joined = joined .. \" \"\n        else\n            joined = joined\
    \ .. anti_shuffled_words[i]\n        end\n    end\n    return joined\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpofre1ad2.lua:40:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpofre1ad2.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9e41bli.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpk9e41bli.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\tlocal\
    \ words = {}\n\tfor word in s:gmatch(\"[^%s]+\") do\n\t\twords[#words+1] = word\n\
    \tend\n\tfor i,word in ipairs(words) do\n\t\tlocal chars = {}\n\t\tfor char in\
    \ word:gmatch(\".\") do\n\t\t\tchars[#chars+1] = char\n\t\tend\n\t\ttable.sort(chars)\n\
    \t\twords[i] = table.concat(chars)\n\tend\n\treturn table.concat(words, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpho8l2s3u.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpho8l2s3u.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jjo4fuj.lua:16:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp8jjo4fuj.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn7ma283u.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpn7ma283u.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ res = ''\n    for v in s:gmatch('%S+') do\n        local word = {}\n       \
    \ for k in v:gmatch('.') do\n            table.insert(word, k)\n        end\n\
    \        table.sort(word)\n        res = res .. table.concat(word) .. ' '\n  \
    \  end\n    return res:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO: Implement function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7bj4tqr9.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp7bj4tqr9.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\tlocal\
    \ t, str, first = {}, '', ''\n\tfor w in s:gmatch('%S+') do\n\t\tlocal neww =\
    \ ''\n\t\tfirst = w:sub(1, 1)\n\t\tfor c in w:gmatch('%a') do\n\t\t\ttable.insert(t,\
    \ c)\n\t\tend\n\t\ttable.sort(t)\n\t\tfor i, char in ipairs(t) do\n\t\t\tneww\
    \ = neww .. char\n\t\tend\n\t\tstr = str .. first .. neww .. ' '\n\t\tt = {}\n\
    \tend\n\treturn str:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpek_ixwej.lua:31:\
    \ expected: \"Hi\"\nactual: \"HHi\"\nstack traceback:\n\t/tmp/tmpek_ixwej.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ s = s\n    local t = string.gmatch(s,\"%S+\")\n    local new_s = \"\"\n    for\
    \ v in t do\n        local t1 = string.gmatch(v,\"%a\")\n        local t2 = {}\n\
    \        for v1 in t1 do\n            t2[#t2+1] = v1\n        end\n        table.sort(t2)\n\
    \        new_s = new_s .. table.concat(t2) .. \" \"\n    end\n    return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkrf2iyld.lua:29:\
    \ expected: \"Hi\"\nactual: \"Hi \"\nstack traceback:\n\t/tmp/tmpkrf2iyld.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ s_split = split(s, \" \")\n    local new_str = \"\"\n    for i, word in ipairs(s_split)\
    \ do\n        local new_word = \"\"\n        local char_list = {}\n        for\
    \ c in word:gmatch\".\" do\n            table.insert(char_list, c)\n        end\n\
    \        table.sort(char_list)\n        for j, c in ipairs(char_list) do\n   \
    \         new_word = new_word .. c\n        end\n        new_str = new_str ..\
    \ new_word\n        if i ~= #s_split then\n            new_str = new_str .. \"\
    \ \"\n        end\n    end\n    return new_str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp48z56797.lua:11:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp48z56797.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp48z56797.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjuncer1i.lua:16:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpjuncer1i.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcx8dsz3d.lua:16:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpcx8dsz3d.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- body\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33z0olb6.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp33z0olb6.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ l = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(l, w:gsub(\".\", function(a)\
    \ return a:rep(a:byte()) end))\n  end\n  return table.concat(l, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp38_43_vj.lua:13:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmp38_43_vj.lua:13: in local 'candidate'\n\t/tmp/tmp38_43_vj.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ function reorder(s)\n        local t = {}\n        for c in s:gmatch('.') do\n\
    \            table.insert(t, c)\n        end\n        table.sort(t)\n        return\
    \ table.concat(t)\n    end\n    local words = {}\n    for word in s:gmatch('%S+')\
    \ do\n        table.insert(words, reorder(word))\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplt4gsgsn.lua:16:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmplt4gsgsn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ to be implemented\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnpgrh23p.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpnpgrh23p.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4i85c9d3.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp4i85c9d3.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  if s\
    \ == '' then return '' end\n  local function anti_shuffle_word(s)\n    local chars\
    \ = {}\n    for w in s:gmatch('.') do table.insert(chars, w) end\n    table.sort(chars)\n\
    \    return table.concat(chars)\n  end\n  local words = {}\n  for w in s:gmatch('%S+')\
    \ do table.insert(words, anti_shuffle_word(w)) end\n  return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpudbtyr5s.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpudbtyr5s.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    words\
    \ = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n\
    \    end\n    for i, v in ipairs(words) do\n        local chars = {}\n       \
    \ for c in v:gmatch(\".\") do\n            table.insert(chars, c)\n        end\n\
    \        table.sort(chars)\n        words[i] = table.concat(chars)\n    end\n\
    \    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3z5o72n.lua:16:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmph3z5o72n.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ sLen = string.len(s)\n    local sRet = {}\n    local ispace = 0\n    local lspace\
    \ = 0\n    local c = 1\n    while c <= sLen do\n        local i = c\n        local\
    \ c = s:sub(i, i)\n        if c == ' ' then\n            ispace = ispace + 1\n\
    \            lspace = i\n        else\n            c = string.byte(c)\n      \
    \      while (i < sLen) and (string.byte(s:sub(i + 1, i + 1)) < c) do\n      \
    \          i = i + 1\n                c = string.byte(s:sub(i, i))\n         \
    \   end\n            local w = s:sub(c, i)\n            if ispace > 0 then\n \
    \               for j = 1, ispace do\n                    table.insert(sRet, s:sub(lspace\
    \ + 1, lspace + 1))\n                end\n                ispace = 0\n       \
    \     end\n            table.insert(sRet, w)\n            c = i + 1\n        end\n\
    \    end\n    return table.concat(sRet)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2g88n6h4.lua:18:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmp2g88n6h4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ temp = \"\"\n  local new_string = \"\"\n  local s_len = string.len(s)\n  for\
    \ i = 1, s_len do\n    local cur_char = string.sub(s, i, i)\n    if cur_char ==\
    \ \" \" then\n      new_string = new_string .. \" \" .. temp\n      temp = \"\"\
    \n    else\n      temp = temp .. cur_char\n    end\n  end\n  new_string = new_string\
    \ .. \" \" .. temp\n  return new_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpck7_lccc.lua:30:\
    \ expected: \"Hi\"\nactual: \" Hi\"\nstack traceback:\n\t/tmp/tmpck7_lccc.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ res = {}\n  for word in s:gmatch('%S+') do\n    local cs = {}\n    for c in\
    \ word:gmatch('.') do\n      table.insert(cs, c)\n    end\n    table.sort(cs)\n\
    \    table.insert(res, table.concat(cs))\n  end\n  return table.concat(res, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0x3419gr.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp0x3419gr.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51ok447o.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp51ok447o.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- do\
    \ your magic here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwe3w_djp.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpwe3w_djp.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ Write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4bye84_l.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp4bye84_l.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ temp = {}\n    for i in string.gmatch(s, \"%S+\") do\n        table.insert(temp,\
    \ i)\n    end\n    for i = 1, #temp do\n        temp[i] = table.concat(table.sort(list.table_to_list(temp[i]:split(''))))\n\
    \    end\n    return table.concat(temp, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1kzndblr.lua:16:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmp1kzndblr.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp1kzndblr.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\t-- use\
    \ your imagination\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07h8buog.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp07h8buog.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --TODO:\
    \ implement anti_shuffle\n    local words = split_string(s, \" \")\n    local\
    \ result = {}\n    for i, word in ipairs(words) do\n        table.insert(result,\
    \ sort_string(word))\n    end\n    return table.concat(result, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjqssv255.lua:12:\
    \ attempt to call a nil value (global 'split_string')\nstack traceback:\n\t/tmp/tmpjqssv255.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpjqssv255.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnlepamx0.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpnlepamx0.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    return\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpogjr6pdy.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpogjr6pdy.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ TODO:\n    -- hint: use table.sort\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7o_na7lf.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp7o_na7lf.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ str = ''\n    local words = {}\n    local i = 1\n    for part in s:gmatch('[^%s]+')\
    \ do\n        local word = {}\n        for c in part:gmatch('.') do\n        \
    \    table.insert(word, c)\n        end\n        table.sort(word)\n        table.insert(words,\
    \ table.concat(word))\n        i = i + 1\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ result = {}\n    local first = 1\n    local last = 1\n    while true do\n  \
    \      local next_first = s:find(' ', last)\n        if next_first then\n    \
    \        table.insert(result, anti_shuffle_word(s:sub(first, next_first - 1)))\n\
    \            table.insert(result, ' ')\n            first = next_first + 1\n \
    \           last = first\n        else\n            table.insert(result, anti_shuffle_word(s:sub(first)))\n\
    \            break\n        end\n    end\n    return table.concat(result)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptkhf6uki.lua:22:\
    \ attempt to call a nil value (global 'anti_shuffle_word')\nstack traceback:\n\
    \t/tmp/tmptkhf6uki.lua:22: in local 'candidate'\n\t/tmp/tmptkhf6uki.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\tlocal\
    \ news = {}\n\t-- TODO\n\tfor w in s:gmatch('%S+') do\n\t\ttable.insert(news,\
    \ table.concat(string.explode(w:lower()), ''))\n\tend\n\treturn table.concat(news,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdjbd_2u9.lua:14:\
    \ attempt to call a nil value (field 'explode')\nstack traceback:\n\t/tmp/tmpdjbd_2u9.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpdjbd_2u9.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8o_py53.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmph8o_py53.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\t-- write\
    \ your code here\n\tlocal s_new = ''\n\tlocal s_tmp = ''\n\tlocal s_table = {}\n\
    \tlocal s_table_new = {}\n\tlocal str = ''\n\tlocal count = 0\n\tfor i = 1, #s\
    \ do\n\t\tif s:sub(i, i) ~= ' ' then\n\t\t\tstr = str .. s:sub(i, i)\n\t\telse\n\
    \t\t\tcount = count + 1\n\t\t\ttable.insert(s_table, str)\n\t\t\tstr = ''\n\t\t\
    end\n\tend\n\ttable.insert(s_table, str)\n\tfor i = 1, #s_table do\n\t\ts_tmp\
    \ = s_table[i]\n\t\ttable.sort(s_tmp)\n\t\ttable.insert(s_table_new, s_tmp)\n\t\
    end\n\tfor i = 1, #s_table_new do\n\t\ts_new = s_new .. s_table_new[i]\n\t\tif\
    \ i ~= #s_table_new then\n\t\t\ts_new = s_new .. ' '\n\t\tend\n\tend\n\treturn\
    \ s_new\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplxur_nzh.lua:30:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmplxur_nzh.lua:30: in local 'candidate'\n\t/tmp/tmplxur_nzh.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ t = {}\n  -- Check if string is empty.\n  if s == '' then\n    return ''\n \
    \ end\n  -- Iterate over string and put all words in a table.\n  for w in s:gmatch('%w+')\
    \ do\n    -- Put current word in a temporary table.\n    local t2 = {}\n    for\
    \ c in w:gmatch('.') do\n      table.insert(t2, c)\n    end\n    -- Put current\
    \ word in original table in sorted form.\n    table.insert(t, table.concat(t2))\n\
    \  end\n  -- Return string with words from original table concatenated together.\n\
    \  return table.concat(t, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ud2a8zl.lua:34:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmp1ud2a8zl.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7kj8tdu7.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp7kj8tdu7.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\tlocal\
    \ res = {}\n\tfor w in s:gmatch('%S+') do\n\t\tlocal letter = {}\n\t\tfor l in\
    \ w:gmatch('%S') do\n\t\t\ttable.insert(letter, l)\n\t\tend\n\t\ttable.sort(letter)\n\
    \t\ttable.insert(res, table.concat(letter))\n\tend\n\treturn table.concat(res,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n   s =\
    \ s:gsub('%s+', ' ')\n   local t = {}\n   for w in s:gmatch('[^%s]+') do\n   \
    \   table.insert(t, w:gsub('.', function(ch)\n                           return\
    \ string.format('%3d', ch:byte())\n                        end) .. ' ')\n   end\n\
    \   table.sort(t)\n   return table.concat(t):gsub('(%d+)%s', function(s)\n   \
    \                                 return string.char(tonumber(s))\n          \
    \                       end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprub762u2.lua:20:\
    \ bad argument #1 to 'char' (value out of range)\nstack traceback:\n\t/tmp/tmprub762u2.lua:20:\
    \ in function </tmp/tmprub762u2.lua:19>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmprub762u2.lua:19: in local 'candidate'\n\t/tmp/tmprub762u2.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    return\
    \ {\n        sub = function(s, i, j)\n            return s:sub(i, j)\n       \
    \ end,\n        match = function(s, pat)\n            return s:match(pat)\n  \
    \      end,\n        find = function(s, pat, init, plain)\n            return\
    \ s:find(pat, init, plain)\n        end,\n        gsub = function(s, pat, repl,\
    \ n)\n            return s:gsub(pat, repl, n)\n        end,\n        lower = function(s)\n\
    \            return s:lower()\n        end,\n        upper = function(s)\n   \
    \         return s:upper()\n        end,\n        reverse = function(s)\n    \
    \        return s:reverse()\n        end,\n        len = function(s)\n       \
    \     return s:len()\n        end,\n        rep = function(s, n)\n           \
    \ return s:rep(n)\n        end,\n        byte = function(s, i, j)\n          \
    \  return s:byte(i, j)\n        end,\n        char = function(s, i, j)\n     \
    \       return s:char(i, j)\n        end,\n        dump = function(s)\n      \
    \      return s:dump()\n        end,\n        format = function(s, ...)\n    \
    \        return s:format(...)\n        end,\n        gmatch = function(s, pat)\n\
    \            return s:gmatch(pat)\n        end,\n        gsub = function(s, pat,\
    \ repl, n)\n            return s:gsub(pat, repl, n)\n        end,\n        len\
    \ = function(s)\n            return s:len()\n        end,\n        lower = function(s)\n\
    \            return s:lower()\n        end,\n        match = function(s, pat,\
    \ init, plain)\n            return s:match(pat, init, plain)\n        end,\n \
    \       rep = function(s, n)\n            return s:rep(n)\n        end,\n    \
    \    reverse = function(s)\n            return s:reverse()\n        end,\n   \
    \     sub = function(s, i, j)\n            return s:sub(i, j)\n        end,\n\
    \        upper =\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_6nb9va5.lua:76: '}' expected (to close '{' at line 11) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5q58ffs.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpn5q58ffs.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ tokens = split_into_words(s)\n    local ret = {}\n    for _, w in ipairs(tokens)\
    \ do\n        local chars = split_into_chars(w)\n        table.sort(chars)\n \
    \       table.insert(ret, table.concat(chars))\n    end\n    return table.concat(ret)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr2isfoab.lua:11:\
    \ attempt to call a nil value (global 'split_into_words')\nstack traceback:\n\t\
    /tmp/tmpr2isfoab.lua:11: in local 'candidate'\n\t/tmp/tmpr2isfoab.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ yo\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaeefs5h9.lua:25: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdit2f2ns.lua:16:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpdit2f2ns.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwsrngwrg.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpwsrngwrg.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82zfxlnw.lua:18:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmp82zfxlnw.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\tlocal\
    \ result = {}\n\tfor word in s:gmatch(\"%S+\") do\n\t\ttable.insert(result, word:gsub(\"\
    .\", function(c) return c .. \"\\1\" end):gsub(\"\\1 \", \"\"):gsub(\"\\1\", \"\
    \"))\n\tend\n\treturn table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3m7p9zzy.lua:13:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmp3m7p9zzy.lua:13: in local 'candidate'\n\t/tmp/tmp3m7p9zzy.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ res = \"\"\n  for word in s:gmatch(\"%S+\") do\n    local sorted = {}\n    for\
    \ c in word:gmatch(\".\") do\n      table.insert(sorted, c)\n    end\n    table.sort(sorted)\n\
    \    res = res .. table.concat(sorted) .. \" \"\n  end\n  return res:sub(1, -2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpummctuwj.lua:16:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpummctuwj.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ result = \"\"\n    local sorted = \"\"\n    local space = \"\"\n    local i\
    \ = 1\n    while (i < s:len()) do\n        local word = s:sub(i, i)\n        if\
    \ (word == \" \") then\n            space = word\n            result = result\
    \ .. sorted .. space\n            sorted = \"\"\n        else\n            sorted\
    \ = sorted .. word\n        end\n        i = i + 1\n    end\n    result = result\
    \ .. sorted\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplr7j7t1j.lua:33:\
    \ expected: \"Hi\"\nactual: \"H\"\nstack traceback:\n\t/tmp/tmplr7j7t1j.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ sList = {}\n  local ret = \"\"\n  for word in string.gmatch(s, \"%S+\") do\n\
    \    table.insert(sList, word)\n  end\n  for k, word in pairs(sList) do\n    local\
    \ tmpWord = {}\n    for i = 1, #word do\n      table.insert(tmpWord, string.sub(word,\
    \ i, i))\n    end\n    table.sort(tmpWord)\n    for i = 1, #tmpWord do\n     \
    \ ret = ret .. tmpWord[i]\n    end\n    if k ~= #sList then\n      ret = ret ..\
    \ \" \"\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ word = ''\n    local list = {}\n    for word in s:gmatch('%S+') do\n       \
    \ table.insert(list, word)\n    end\n    for k, v in pairs(list) do\n        for\
    \ i = 1, #v do\n            local char = v:sub(i, i)\n            local lower\
    \ = char:lower()\n            local upper = char:upper()\n            if lower\
    \ ~= upper then\n                if v:match(lower) then\n                    v\
    \ = v:gsub(lower, '')\n                    v = lower .. v\n                else\n\
    \                    v = v:gsub(upper, '')\n                    v = upper .. v\n\
    \                end\n            end\n        end\n        list[k] = v\n    end\n\
    \    return table.concat(list, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ht8cb51.lua:39:\
    \ expected: \"Hi\"\nactual: \"iH\"\nstack traceback:\n\t/tmp/tmp_ht8cb51.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cgractc.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp3cgractc.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\tlocal\
    \ new_s = ''\n\tlocal pre_s = ''\n\tfor i = 1, #s do\n\t\tif string.find(s, '\
    \ ', i) then\n\t\t\tfor j = 1, #pre_s do\n\t\t\t\tlocal min_i, min_c = j, string.byte(pre_s,\
    \ j)\n\t\t\t\tfor k = j + 1, #pre_s do\n\t\t\t\t\tif string.byte(pre_s, k) < min_c\
    \ then\n\t\t\t\t\t\tmin_i, min_c = k, string.byte(pre_s, k)\n\t\t\t\t\tend\n\t\
    \t\t\tend\n\t\t\t\tpre_s = string.sub(pre_s, 1, min_i - 1) .. string.sub(pre_s,\
    \ min_i + 1)\n\t\t\t\tnew_s = new_s .. string.char(min_c)\n\t\t\tend\n\t\t\tnew_s\
    \ = new_s .. ' '\n\t\t\tpre_s = ''\n\t\telse\n\t\t\tpre_s = pre_s .. string.sub(s,\
    \ i, i)\n\t\tend\n\tend\n\tif pre_s ~= '' then\n\t\tfor j = 1, #pre_s do\n\t\t\
    \tlocal min_i, min_c = j, string.byte(pre_s, j)\n\t\t\tfor k = j + 1, #pre_s do\n\
    \t\t\t\tif string.byte(pre_s, k) < min_c then\n\t\t\t\t\tmin_i, min_c = k, string.byte(pre_s,\
    \ k)\n\t\t\t\tend\n\t\t\tend\n\t\t\tpre_s = string.sub(pre_s, 1, min_i - 1) ..\
    \ string.sub(pre_s, min_i + 1)\n\t\t\tnew_s = new_s .. string.char(min_c)\n\t\t\
    end\n\tend\n\treturn new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjmxaqcaz.lua:40:\
    \ bad argument #1 to 'char' (number expected, got nil)\nstack traceback:\n\t/tmp/tmpjmxaqcaz.lua:40:\
    \ in local 'candidate'\n\t/tmp/tmpjmxaqcaz.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ t = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(t, w:gsub(\"\
    .\", function(x) return x end):gsub(\"%a\", function(x) return (\"%c\"):format(x)\
    \ end):gsub(\"%s\", function(x) return (\" %s\"):format(x) end):gsub(\"%%c\",\
    \ function(x) return string.char(x) end))\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ped503s.lua:13:\
    \ bad argument #1 to 'format' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmp6ped503s.lua:13: in function </tmp/tmp6ped503s.lua:13>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmp6ped503s.lua:13: in local 'candidate'\n\t/tmp/tmp6ped503s.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ write your code here\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3h7teu8i.lua:19:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmp3h7teu8i.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ ws = word_separator\n  local s = split(s, ws)\n  local res = ''\n  for i = 1,\
    \ #s do\n    res = res .. sort_string(s[i]) .. ws\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4lw_9737.lua:12:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp4lw_9737.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp4lw_9737.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplw17l461.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmplw17l461.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\t--return\
    \ string.gsub(s, '%a+', function(w) return w:gsub('.', function(c) return c end)\
    \ end)\n\t--return s:gsub('%a+', function(w) return w:gsub('.', function(c) return\
    \ c end) end)\n\treturn s:gsub('%a+', function(w) table.sort(w:gmatch('.')) return\
    \ table.concat(w:gmatch('.')) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3lh9t95j.lua:13:\
    \ bad argument #1 to 'sort' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp3lh9t95j.lua:13: in function </tmp/tmp3lh9t95j.lua:13>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmp3lh9t95j.lua:13: in local 'candidate'\n\t/tmp/tmp3lh9t95j.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ t = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(t, word)\n  end\n\
    \  for i = 1, #t do\n    local word = t[i]\n    local chars = {}\n    for char\
    \ in word:gmatch(\".\") do\n      table.insert(chars, char)\n    end\n    table.sort(chars)\n\
    \    t[i] = table.concat(chars)\n  end\n  return table.concat(t, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ Insert code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3_m7spb.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpz3_m7spb.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ result = {}\n    local words = {}\n    local prev_is_space = false\n    for\
    \ word in s:gmatch(\"[^%s]+\") do\n        words[#words + 1] = word\n    end\n\
    \    for word in s:gmatch(\"[%s]+\") do\n        words[#words + 1] = word\n  \
    \  end\n    for _, word in ipairs(words) do\n        if word:match(\"%s\") then\n\
    \            result[#result + 1] = word\n            prev_is_space = true\n  \
    \      else\n            local word_as_list = {}\n            for i = 1, #word\
    \ do\n                local c = word:sub(i, i)\n                word_as_list[#word_as_list\
    \ + 1] = c\n            end\n            table.sort(word_as_list)\n          \
    \  local new_word = {}\n            for _, c in ipairs(word_as_list) do\n    \
    \            new_word[#new_word + 1] = c\n            end\n            if prev_is_space\
    \ then\n                result[#result + 1] = table.concat(new_word)\n       \
    \     else\n                result[#result] = result[#result] .. table.concat(new_word)\n\
    \            end\n            prev_is_space = false\n        end\n    end\n  \
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiuslrbrn.lua:38:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpiuslrbrn.lua:38:\
    \ in local 'candidate'\n\t/tmp/tmpiuslrbrn.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ result = {}\n    for w in s:gmatch(\"%S+\") do\n        local chars = {}\n \
    \       for c in w:gmatch(\".\") do\n            table.insert(chars, c)\n    \
    \    end\n        table.sort(chars)\n        table.insert(result, table.concat(chars))\n\
    \    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n   return\
    \ s:gsub(\"%S+\", function(s) return table.concat(table.sort(string.split(s)))\
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr04zhg0p.lua:11:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpr04zhg0p.lua:11:\
    \ in function </tmp/tmpr04zhg0p.lua:11>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpr04zhg0p.lua:11: in local 'candidate'\n\t/tmp/tmpr04zhg0p.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\tif type(s)\
    \ == 'string' then\n\t\tlocal out = ''\n\t\tfor word in s:gmatch('[^%s]+') do\n\
    \t\t\tout = out .. word:gsub('.', function(c) return c .. '!' end):gsub('!.',\
    \ function(c) return c:sub(2) end):gsub('!', '') .. ' '\n\t\tend\n\t\treturn out:sub(1,\
    \ -2)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8mfqwaq.lua:24:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmps8mfqwaq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ YOUR CODE HERE\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb4boiusq.lua:19:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpb4boiusq.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\tlocal\
    \ words = string.split(s, ' ')\n\tfor k,v in pairs(words) do\n\t\twords[k] = \
    \ string.sort(v)\n\tend\n\treturn table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprdjgs8q2.lua:11:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmprdjgs8q2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmprdjgs8q2.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ out = ''\n    for w in s:gmatch('%S+') do\n        out = out .. w:gsub('.',\
    \ function(c) return string.char(96 + c:byte()) end) .. ' '\n    end\n    return\
    \ out:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ei5atom.lua:21:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp1ei5atom.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    return\
    \ string.gsub(s, '%S+', function(w)\n        return table.concat(table.map(w,\
    \ function(c)\n            return string.char(c)\n        end):sort())\n    end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpikqkz7kc.lua:12:\
    \ attempt to call a nil value (field 'map')\nstack traceback:\n\t/tmp/tmpikqkz7kc.lua:12:\
    \ in function </tmp/tmpikqkz7kc.lua:11>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpikqkz7kc.lua:11: in local 'candidate'\n\t/tmp/tmpikqkz7kc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnorz03w3.lua:25: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt75eomkv.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpt75eomkv.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- body\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tazz6kk.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp_tazz6kk.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local word = ''\n    local chars = {}\n    local ordered = ''\n\
    \    local noBlank = ''\n    for i = 1, #s do\n        if s:sub(i, i) ~= ' ' then\n\
    \            word = word .. s:sub(i, i)\n        else\n            words[#words\
    \ + 1] = word\n            word = ''\n        end\n    end\n    words[#words +\
    \ 1] = word\n    for i = 1, #words do\n        for j = 1, #words[i] do\n     \
    \       chars[#chars + 1] = words[i]:sub(j, j)\n        end\n        table.sort(chars)\n\
    \        for k = 1, #chars do\n            ordered = ordered .. chars[k]\n   \
    \     end\n        chars = {}\n        ordered = ordered .. ' '\n    end\n   \
    \ for i = 1, #ordered do\n        if ordered:sub(i, i) ~= ' ' then\n         \
    \   noBlank = noBlank .. ordered:sub(i, i)\n        else\n            noBlank\
    \ = noBlank .. ' '\n        end\n    end\n    return noBlank\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mi9krvj.lua:49:\
    \ expected: \"Hi\"\nactual: \"Hi \"\nstack traceback:\n\t/tmp/tmp8mi9krvj.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ t = {}\n    local chars = {}\n    for char in s:gmatch('.') do\n        table.insert(t,\
    \ char)\n    end\n    for _, v in ipairs(t) do\n        if v ~= ' ' then\n   \
    \         table.insert(chars, v)\n        end\n    end\n    table.sort(chars)\n\
    \    local i = 1\n    local out = ''\n    for _, v in ipairs(t) do\n        if\
    \ v ~= ' ' then\n            out = out .. chars[i]\n            i = i + 1\n  \
    \      else\n            out = out .. v\n        end\n    end\n    return out\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyspbj3pj.lua:42:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \"!!!HW dellloor\"\nstack traceback:\n\
    \t/tmp/tmpyspbj3pj.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\treturn\
    \ \"I'm lazy\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn3_xllet.lua:17:\
    \ expected: \"Hi\"\nactual: \"I'm lazy\"\nstack traceback:\n\t/tmp/tmpn3_xllet.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ orderedStr = \"\"\n    local start = 1\n    for i = 1, s:len() do\n        if\
    \ s:sub(i, i) == \" \" then\n            orderedStr = orderedStr .. \" \" .. orderedStr:sub(start,\
    \ i - 1)\n            start = i + 1\n        end\n    end\n    orderedStr = orderedStr\
    \ .. \" \" .. orderedStr:sub(start, s:len())\n    local words = {}\n    for word\
    \ in string.gmatch(orderedStr, '%S+') do\n        table.insert(words, word)\n\
    \    end\n    local str = \"\"\n    for i = 1, #words do\n        str = str ..\
    \ words[i]\n    end\n    return str\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp684l2jka.lua:34:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp684l2jka.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ Write your code here\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdozy_h0b.lua:25: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97zhdm_q.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp97zhdm_q.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    for word in s:gmatch(\"[^%s]+\") do\n        words[#words +\
    \ 1] = word\n    end\n    local new_words = {}\n    for _, word in ipairs(words)\
    \ do\n        local chars = {}\n        for c in word:gmatch(\".\") do\n     \
    \       chars[#chars + 1] = c\n        end\n        table.sort(chars)\n      \
    \  new_words[#new_words + 1] = table.concat(chars)\n    end\n    return table.concat(new_words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppzqosqn4.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmppzqosqn4.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ t={}\n  for word in s:gmatch(\"%S+\") do\n    local new_word=\"\"\n    for i=1,\
    \ #word do\n      new_word=new_word..word:sub(i,i)\n    end\n    table.insert(t,new_word)\n\
    \  end\n  return table.concat(t,\" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqdjd8zo.lua:26:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpkqdjd8zo.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ splited = {}\n  local result = ''\n  for word in s:gmatch('%w+') do\n    table.insert(splited,\
    \ word)\n  end\n  for word in s:gmatch('%s') do\n    table.insert(splited, word)\n\
    \  end\n  for _, v in ipairs(splited) do\n    if v:match('%w+') then\n      local\
    \ buf = ''\n      for i = 1, v:len() do\n        table.insert(buf, v:sub(i, i))\n\
    \      end\n      table.sort(buf)\n      for _, ch in ipairs(buf) do\n       \
    \ result = result .. ch\n      end\n    else\n      result = result .. v\n   \
    \ end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv3nxcujp.lua:23:\
    \ bad argument #1 to 'insert' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpv3nxcujp.lua:23: in local 'candidate'\n\t/tmp/tmpv3nxcujp.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65bv14so.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp65bv14so.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ result = {}\n    for word in s:gmatch('%S+') do\n        local uniq = {}\n \
    \       for char in word:gmatch('.') do\n            table.insert(uniq, char)\n\
    \        end\n        table.sort(uniq)\n        table.insert(result, table.concat(uniq))\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    return\
    \ string.gsub(s, '(%w+)', sort)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnv90g20m.lua:11:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpnv90g20m.lua:11: in local 'candidate'\n\t/tmp/tmpnv90g20m.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6fwu9se.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpg6fwu9se.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf274z4gp.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpf274z4gp.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\tlocal\
    \ table = {}\n\tlocal newString = \"\"\n\tlocal toWord = {}\n\tlocal toAdd = \"\
    \"\n\tfor word in string.gmatch(s, \"[^%s]+\") do\n\t\ttable.insert(toWord, word)\n\
    \tend\n\tfor i = 1, #toWord do\n\t\tfor j = 1, #toWord[i] do\n\t\t\ttoAdd = toAdd\
    \ .. toWord[i]:sub(j, j)\n\t\tend\n\t\tnewString = newString .. table.sort(toAdd)\n\
    \t\ttoAdd = \"\"\n\tend\n\treturn newString\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvf4klyf8.lua:16:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmpvf4klyf8.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpvf4klyf8.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ t={}\n  local word\n  for word in s:gmatch('%S+') do\n    local new_word = table.concat(table.sort(word:split('')),\
    \ '')\n    table.insert(t, new_word)\n  end\n  return table.concat(t, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpap2wpgr7.lua:14:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpap2wpgr7.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpap2wpgr7.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ result = {}\n    for word in s:gmatch('%S+') do\n        table.insert(result,\
    \ word:gsub('.', function(c)\n            return string.format('%03d%s', c:byte(),\
    \ c)\n        end))\n    end\n    table.sort(result)\n    for i, word in ipairs(result)\
    \ do\n        result[i] = word:gsub('%d%d%d(.)', '%1')\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzerpzogf.lua:13:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpzerpzogf.lua:13: in local 'candidate'\n\t/tmp/tmpzerpzogf.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local chars = {}\n    local i = 1\n    local j = 1\n    for\
    \ w in s:gmatch(\"%S+\") do\n        for ch in w:gmatch(\".\") do\n          \
    \  chars[i] = {ch, string.byte(ch)}\n            i = i + 1\n        end\n    \
    \    table.sort(chars, function(a, b) return a[2] < b[2] end)\n        for k,\
    \ v in ipairs(chars) do\n            words[j] = words[j] and words[j] .. v[1]\
    \ or v[1]\n        end\n        chars = {}\n        j = j + 1\n    end\n    return\
    \ table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgaxf7nt.lua:37:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \"Hello\"\nstack traceback:\n\t/tmp/tmphgaxf7nt.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9v_52cr2.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp9v_52cr2.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzh5naah.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpvzh5naah.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = {}\n  for word in s:gmatch(\"%w+\") do\n    table.insert(words, word)\n\
    \  end\n  table.sort(words, function(a, b)\n    local a_len = #a\n    local b_len\
    \ = #b\n    for i = 1, math.min(a_len, b_len) do\n      local a_ascii = string.byte(a,\
    \ i)\n      local b_ascii = string.byte(b, i)\n      if a_ascii < b_ascii then\n\
    \        return true\n      elseif a_ascii > b_ascii then\n        return false\n\
    \      end\n    end\n    return a_len < b_len\n  end)\n  local result = ''\n \
    \ local s_len = #s\n  local next_word_idx = 1\n  for i = 1, s_len do\n    local\
    \ c = string.sub(s, i, i)\n    if c:match(\"%w\") then\n      result = result\
    \ .. words[next_word_idx]\n      next_word_idx = next_word_idx + 1\n      i =\
    \ i + #words[next_word_idx - 1] - 1\n    else\n      result = result .. c\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmzk53e3r.lua:35:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpmzk53e3r.lua:35:\
    \ in local 'candidate'\n\t/tmp/tmpmzk53e3r.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ function f(s)\n    local t = {}\n    for c in s:gmatch(\".\") do table.insert(t,\
    \ c) end\n    table.sort(t)\n    return table.concat(t)\n  end\n  return s:gsub(\"\
    %S+\", f)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8zr489z.lua:16:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpc8zr489z.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ r = {}\n    local v = ''\n    for word in s:gmatch('%S+') do\n        v = word:gsub('%a',\
    \ function(c)\n            return table.concat(table.sort(c:lower():gmatch('.')))\n\
    \        end)\n        table.insert(r, v)\n    end\n    return table.concat(r,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiv5whr4o.lua:15:\
    \ bad argument #1 to 'sort' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpiv5whr4o.lua:15: in function </tmp/tmpiv5whr4o.lua:14>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmpiv5whr4o.lua:14: in local 'candidate'\n\t/tmp/tmpiv5whr4o.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n   if s\
    \ == nil then\n      return nil\n   end\n   local res = ''\n   local current =\
    \ ''\n   for i = 1, #s do\n      local c = s:sub(i, i)\n      if c ~= ' ' then\n\
    \         current = current .. c\n      else\n         res = res .. sort(current)\
    \ .. ' '\n         current = ''\n      end\n   end\n   return res .. sort(current)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv2i6or5x.lua:25:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpv2i6or5x.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpv2i6or5x.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  --\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdasuhye.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmppdasuhye.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- this\
    \ is one of the most beautiful and elegant lua answers I've ever seen :)\n  --\
    \ https://stackoverflow.com/questions/15706270/sort-a-string-in-lua\n  return\
    \ s:gsub(\"%S+\", function(str) return str:gsub(\".\", function(c) return c end):gsub(\"\
    (.)(.*)\", function(a,b) return b..a end) end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0pf2ivt_.lua:19:\
    \ expected: \"Hi\"\nactual: \"iH\"\nstack traceback:\n\t/tmp/tmp0pf2ivt_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ l = {}\n    for m in s:gmatch(\"%S+\") do\n        l[#l+1] = m\n    end\n  \
    \  for i = 1, #l do\n        local word = l[i]\n        word = word:gsub(\".\"\
    , function(c)\n            return c..\"\\1\"\n        end)\n        word = word:gsub(\"\
    %z\", \"\")\n        word = word:gsub(\"\\1(.)\", function(c)\n            return\
    \ c\n        end)\n        l[i] = word\n    end\n    return table.concat(l, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t8qa0_8.lua:32:\
    \ expected: \"Hi\"\nactual: \"Hi\x01\"\nstack traceback:\n\t/tmp/tmp9t8qa0_8.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ result = {}\n  for word in s:gmatch(\"%S+\") do\n    local sorted = {}\n   \
    \ for c in word:gmatch(\".\") do\n      table.insert(sorted, c)\n    end\n   \
    \ table.sort(sorted)\n    table.insert(result, table.concat(sorted))\n  end\n\
    \  return table.concat(result, \" \")\nend\nassert(anti_shuffle('Hi') == 'Hi')\n\
    assert(anti_shuffle('hello') == 'ehllo')\nassert(anti_shuffle('Hello World!!!')\
    \ == 'Hello !!!Wdlor')\nprint(\"OK\")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "OK\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeo8ievgv.lua:16:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpeo8ievgv.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ function char_comp(a, b)\n        return a:byte() < b:byte()\n    end\n    local\
    \ result = ''\n    for word in s:gmatch('%S+') do\n        local new_word = table.concat(\n\
    \            {table.sort(\n                {string.byte(word, 1, #word)},\n  \
    \              char_comp\n            )},\n            ''\n        )\n       \
    \ result = result .. new_word .. ' '\n    end\n    return result:sub(1, #result\
    \ - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuxqy8vno.lua:12:\
    \ attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpuxqy8vno.lua:12:\
    \ in function </tmp/tmpuxqy8vno.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpuxqy8vno.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpuxqy8vno.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ function sort_word(word)\n        local res = {}\n        for c in word:gmatch('.')\
    \ do\n            table.insert(res, c)\n        end\n        table.sort(res)\n\
    \        local word_res = ''\n        for _, c in ipairs(res) do\n           \
    \ word_res = word_res .. c\n        end\n        return word_res\n    end\n  \
    \  local res = {}\n    for w in s:gmatch('%S+') do\n        table.insert(res,\
    \ sort_word(w))\n    end\n    return table.concat(res, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bsb3nw_.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp9bsb3nw_.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ str = ''\n  local words = {}\n  for w in s:gmatch('%S+') do\n    table.insert(words,\
    \ w)\n  end\n  for i, word in ipairs(words) do\n    local newword = word:gsub('%a',\
    \ function(c)\n      return c .. (' '):rep(c:byte() - 96)\n    end)\n    local\
    \ arr = {}\n    for char in newword:gmatch('%a+') do\n      table.insert(arr,\
    \ char)\n    end\n    table.sort(arr)\n    str = str .. table.concat(arr)\n  \
    \  if i < #words then\n      str = str .. ' '\n    end\n  end\n  return str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp89dgrbq7.lua:40:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \"Hello Wodlr\"\nstack traceback:\n\t\
    /tmp/tmp89dgrbq7.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ new_s = {}\n  for w in s:gmatch(\"%S+\") do\n    w = w:lower()\n    table.insert(new_s,\
    \ w:gsub(\".\", function(c)\n      return c .. (c:byte() % 2 == 0 and '^' or '_')\n\
    \    end):gsub(\"%^\", function()\n      return \"~\"\n    end):gsub(\"%_\", function()\n\
    \      return \"`\"\n    end):gsub(\"([%~%`])\", function(c)\n      return (\"\
    %s\"):format(c)\n    end))\n  end\n  return table.concat(new_s, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2qvh8a4i.lua:14:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmp2qvh8a4i.lua:14: in local 'candidate'\n\t/tmp/tmp2qvh8a4i.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8_jjv1n.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpq8_jjv1n.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrxih2ql.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpqrxih2ql.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- body\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcvti57pi.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpcvti57pi.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ YOUR CODE GOES HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ya_ygrj.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp9ya_ygrj.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ Sample code for anti_shuffle()\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehb3ix87.lua:19:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpehb3ix87.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ tmp = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(tmp, w:gsub(\".\"\
    , function(c) return string.format(\"%3d%s\", c:byte(), c) end))\n  end\n  table.sort(tmp)\n\
    \  return table.concat(tmp, \" \"):gsub(\"%d+%s\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy5y6_i42.lua:13:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpy5y6_i42.lua:13: in local 'candidate'\n\t/tmp/tmpy5y6_i42.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ last_start = 1\n    local result = ''\n    for i = 1, #s do\n        if s:sub(i,\
    \ i) == ' ' then\n            result = result .. anti_shuffle_word(s:sub(last_start,\
    \ i - 1)) .. ' '\n            last_start = i + 1\n        end\n    end\n    result\
    \ = result .. anti_shuffle_word(s:sub(last_start, #s))\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxwfbsup_.lua:19:\
    \ attempt to call a nil value (global 'anti_shuffle_word')\nstack traceback:\n\
    \t/tmp/tmpxwfbsup_.lua:19: in local 'candidate'\n\t/tmp/tmpxwfbsup_.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ o = {}\n  local ss = \"\"\n  -- Iterate the string by character\n  for i = 1,\
    \ #s do\n    local c = s:sub(i, i)\n    if c ~= \" \" then\n      ss = ss .. c\n\
    \    else\n      table.insert(o, ss)\n      table.insert(o, \" \")\n      ss =\
    \ \"\"\n    end\n  end\n  table.insert(o, ss)\n  local output = \"\"\n  for _,\
    \ word in ipairs(o) do\n    if word ~= \" \" then\n      output = output .. string.sort(word)\n\
    \    else\n      output = output .. word\n    end\n  end\n  return output\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ek9i2pf.lua:28:\
    \ attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmp9ek9i2pf.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmp9ek9i2pf.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp02sveeo.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpp02sveeo.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- return\
    \ (s:gsub(\"%S+\", function(w) return w:gsub(\".\", function(c) return c:rep(string.byte(c))\
    \ end) end))\n  return s:gsub(\"%S+\", function(w)\n    local t = {}\n    for\
    \ i = 1, #w do\n      t[i] = w:sub(i, i):rep(string.byte(w:sub(i, i)))\n    end\n\
    \    return table.concat(t)\n  end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprh0m_uqp.lua:24:\
    \ expected: \"Hi\"\nactual: \"HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\"\
    \nstack traceback:\n\t/tmp/tmprh0m_uqp.lua:24: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ separator = \" \"\n    local separator_len = #separator\n    local char_list\
    \ = {}\n    local last_pos = 1\n    for pos, char in s:gmatch('()(.)') do\n  \
    \      if char == separator then\n            char_list[#char_list + 1] = s:sub(last_pos,\
    \ pos - 1)\n            last_pos = pos + separator_len\n        end\n    end\n\
    \    char_list[#char_list + 1] = s:sub(last_pos)\n    return table.concat(char_list,\
    \ separator, function(a, b)\n        return a:lower() < b:lower()\n    end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpphz_7njw.lua:22:\
    \ bad argument #3 to 'concat' (number expected, got function)\nstack traceback:\n\
    \t/tmp/tmpphz_7njw.lua:22: in local 'candidate'\n\t/tmp/tmpphz_7njw.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgv8wavbq.lua:16:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpgv8wavbq.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6kg4lw91.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp6kg4lw91.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n\t-- your\
    \ code here\n\tif s == nil then\n\t\treturn nil\n\tend\n\tlocal words = string.split(s,\
    \ ' ')\n\tlocal ordered_words = {}\n\tfor i, word in ipairs(words) do\n\t\ttable.insert(ordered_words,\
    \ get_ordered_word(word))\n\tend\n\treturn table.concat(ordered_words, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpona7ge4w.lua:15:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpona7ge4w.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpona7ge4w.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    --\
    \ Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3sigjr1b.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp3sigjr1b.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ s = s:gsub(\"%s+\", \"\")\n  return s:gsub(\"%w+\", function(w)\n    local w\
    \ = w:gsub(\"%s+\", \"\")\n    local chars = {}\n    for char in w:gmatch(\".\"\
    ) do\n      table.insert(chars, char)\n    end\n    table.sort(chars)\n    return\
    \ table.concat(chars)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrpb5kns.lua:30:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \"HWdellloor!!!\"\nstack traceback:\n\t\
    /tmp/tmpsrpb5kns.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n    local\
    \ words = {}\n    local ret = ''\n    for w in s:gmatch('%S+') do\n        local\
    \ chars = {}\n        for c in w:gmatch('.') do\n            table.insert(chars,\
    \ c)\n        end\n        table.sort(chars)\n        local res = ''\n       \
    \ for _, c in ipairs(chars) do\n            res = res .. c\n        end\n    \
    \    table.insert(words, res)\n    end\n    for i, w in ipairs(words) do\n   \
    \     ret = ret .. w\n        if i < #words then\n            ret = ret .. ' '\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbx2rp0dl.lua:17:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpbx2rp0dl.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
