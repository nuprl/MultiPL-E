name: HumanEval_22_filter_integers
language: lua
results:
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v) == v then\n\
    \      table.insert(result, v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return list.filter(values,\
    \ function(value)\n    return type(value) == 'number' and value % 1 == 0\n  end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqfdw9l64.lua:7:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmpqfdw9l64.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpqfdw9l64.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local filtered = {}\n  for\
    \ _, v in ipairs(values) do\n    if v == math.floor(v) then\n      table.insert(filtered,\
    \ v)\n    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk0t_ljpg.lua:9:\
    \ bad argument #1 to 'floor' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpk0t_ljpg.lua:9: in local 'candidate'\n\t/tmp/tmpk0t_ljpg.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    assert(is_array(values),\
    \ \"filter_integers: values must be an array\")\n    local result = {}\n    for\
    \ i, value in ipairs(values) do\n        if is_integer(value) then\n         \
    \   result[#result + 1] = value\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp721x0cw8.lua:7:\
    \ attempt to call a nil value (global 'is_array')\nstack traceback:\n\t/tmp/tmp721x0cw8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp721x0cw8.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local ret = {}\n    for i,\
    \ v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v) ==\
    \ v then\n            table.insert(ret, v)\n        end\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(function(x)\
    \ return type(x) == 'number' and math.floor(x) == x end, values)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8h5i8wed.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp8h5i8wed.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp8h5i8wed.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local new_values = {}\n \
    \   for _, val in ipairs(values) do\n        if is_integer(val) then\n       \
    \     table.insert(new_values, val)\n        end\n    end\n    return new_values\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8gz_p5fn.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmp8gz_p5fn.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8gz_p5fn.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(values, function(v)\
    \ return is_integer(v) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpph59xqy8.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpph59xqy8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpph59xqy8.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(item)\n\
    \        return item == math.floor(item)\n    end\n    return filter(values, is_integer)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg7pbgiy5.lua:10:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpg7pbgiy5.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpg7pbgiy5.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(values, function(value)\n\
    \        return (type(value) == 'number' and value == math.floor(value))\n   \
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0n3qiv1i.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp0n3qiv1i.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp0n3qiv1i.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(values, is_integer)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_aeo133.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpx_aeo133.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpx_aeo133.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(values, function(v)\
    \ return type(v) == 'number' and math.floor(v) == v end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp72zmstm1.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp72zmstm1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp72zmstm1.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ i,v in ipairs(values) do\n        if type(v) == 'number' and v % 1 == 0 then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local ints = {}\n    for\
    \ i, v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(ints, v)\n        end\n    end\n    return\
    \ ints\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local integers = {}\n   \
    \ for _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ % 1 == 0 then\n            table.insert(integers, value)\n        end\n    end\n\
    \    return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return util.filter(values,\
    \ function(x) return type(x) == 'number' and not x % 1 end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vapyt_v.lua:7:\
    \ attempt to index a nil value (global 'util')\nstack traceback:\n\t/tmp/tmp6vapyt_v.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6vapyt_v.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(values, is_integer)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpejytzgcb.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpejytzgcb.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpejytzgcb.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local t = {}\n    for k,\
    \ v in pairs(values) do\n        if type(v) == 'number' and math.floor(v) == v\
    \ then\n            table.insert(t, v)\n        end\n    end\n    return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local res = {}\n  for i, value\
    \ in ipairs(values) do\n    if type(value) == 'number' and value == math.floor(value)\
    \ then\n      table.insert(res, value)\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ i = 1, #values do\n        local v = values[i]\n        if type(v) == 'number'\
    \ and v % 1 == 0 then\n            result[#result + 1] = v\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return clist.filter(values,\
    \ function(v) return type(v) == 'number' end)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4bwwiyrm.lua:7:\
    \ attempt to index a nil value (global 'clist')\nstack traceback:\n\t/tmp/tmp4bwwiyrm.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp4bwwiyrm.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local res = {}\n    for _,\
    \ item in ipairs(values) do\n        if type(item) == 'number' and item % 1 ==\
    \ 0 then\n            res[#res + 1] = item\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, v in ipairs(values) do\n        if type(v) == 'number' and v % 1 == 0 then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(is_integer,\
    \ values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpos8g5gfa.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpos8g5gfa.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpos8g5gfa.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, val in ipairs(values) do\n        if type(val) == 'number' and math.floor(val)\
    \ == val then\n            table.insert(result, val)\n        end\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(is_integer,\
    \ values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm996wunu.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpm996wunu.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpm996wunu.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and math.floor(value)\
    \ == value then\n            table.insert(result, value)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if values == nil then\n   \
    \ return {}\n  end\n  return filter(function(v) return type(v) == 'number' and\
    \ math.floor(v) == v end, values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn9e47m8n.lua:10:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpn9e47m8n.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpn9e47m8n.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return List.filter(values,\
    \ function(v) return type(v) == 'number' end)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgxa4qsqs.lua:7:\
    \ attempt to index a nil value (global 'List')\nstack traceback:\n\t/tmp/tmpgxa4qsqs.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpgxa4qsqs.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local res = {}\n    for k,\
    \ v in pairs(values) do\n        if type(v) == 'number' and math.floor(v) == v\
    \ then\n            table.insert(res, v)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local res = {}\n    for _,\
    \ value in ipairs(values) do\n        if is_int(value) then\n            table.insert(res,\
    \ value)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp15pwfmab.lua:9:\
    \ attempt to call a nil value (global 'is_int')\nstack traceback:\n\t/tmp/tmp15pwfmab.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp15pwfmab.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ == floor(value) then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm7v76jyu.lua:9:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmpm7v76jyu.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpm7v76jyu.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ % 1 == 0 then\n            result[#result + 1] = value\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local integers = {}\n  for\
    \ _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v) == v\
    \ then\n      table.insert(integers, v)\n    end\n  end\n  return integers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ % 1 == 0 then\n            table.insert(result, value)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ k, v in pairs(values) do\n        if type(v) == 'number' and v % 1 == 0 then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and math.floor(value)\
    \ == value then\n            table.insert(result, value)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return map(values, function(x)\n\
    \        if type(x) == 'number' and x == math.floor(x) then\n            return\
    \ x\n        end\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx4upr3kb.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpx4upr3kb.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpx4upr3kb.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local ret = {}\n    for _,\
    \ v in ipairs(values) do\n        if type(v) == 'number' and v == math.floor(v)\
    \ then\n            table.insert(ret, v)\n        end\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local integers = {}\n  for\
    \ _, value in ipairs(values) do\n    if type(value) == 'number' and value % 1\
    \ == 0 then\n      table.insert(integers, value)\n    end\n  end\n  return integers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(values, is_integer)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9o_xqh1k.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp9o_xqh1k.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp9o_xqh1k.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local ret = {}\n    for i,v\
    \ in ipairs(values) do\n        if type(v) == 'number' and v % 1 == 0 then\n \
    \           table.insert(ret, v)\n        end\n    end\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local integers = {}\n   \
    \ for _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ % 1 == 0 then\n            table.insert(integers, value)\n        end\n    end\n\
    \    return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local res = {}\n    for i,\
    \ v in ipairs(values) do\n        if type(v) == 'number' and v == math.floor(v)\
    \ then\n            table.insert(res, v)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(values, is_integer)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxc4cw3sf.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpxc4cw3sf.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxc4cw3sf.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local ints = {}\n  for _, v\
    \ in ipairs(values) do\n    if type(v) == 'number' and floor(v) == v then\n  \
    \    ints[#ints + 1] = v\n    end\n  end\n  return ints\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4yaw8shp.lua:9:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmp4yaw8shp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4yaw8shp.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local res = {}\n    for _,\
    \ val in ipairs(values) do\n        if is_integer(val) then\n            table.insert(res,\
    \ val)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6i629_gk.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmp6i629_gk.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6i629_gk.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) == 'number' and math.floor(value)\
    \ == value then\n      table.insert(result, value)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) == 'number' and math.tointeger(value)\
    \ == value then\n      table.insert(result, value)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local filtered = {}\n  for\
    \ _, value in ipairs(values) do\n    if type(value) == 'number' and math.floor(value)\
    \ == value then\n      table.insert(filtered, value)\n    end\n  end\n  return\
    \ filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(function(v) return\
    \ type(v) == 'number' and v % 1 == 0 end, values)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvbfj_i1_.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpvbfj_i1_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpvbfj_i1_.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return _.filter(values, function(v)\
    \ return isinteger(v) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu7rgkk0r.lua:7:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmpu7rgkk0r.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpu7rgkk0r.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local filtered = {}\n   \
    \ for k,v in pairs(values) do\n        if (type(v) == 'number' and math.floor(v)\
    \ == v) then\n            table.insert(filtered, v)\n        end\n    end\n  \
    \  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ == math.floor(value) then\n            table.insert(result, value)\n       \
    \ end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local filter_fn = function(val)\n\
    \        return type(val) == 'number' and (math.floor(val) == val)\n    end\n\
    \    return filter(values, filter_fn)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqs3sr_y8.lua:10:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpqs3sr_y8.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpqs3sr_y8.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local integers = {}\n   \
    \ for i, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ == math.floor(value) then\n            table.insert(integers, value)\n     \
    \   end\n    end\n    return integers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local res = {}\n  for _, v\
    \ in ipairs(values) do\n    if type(v) == 'number' and v == floor(v) then\n  \
    \    table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu2ca0813.lua:9:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmpu2ca0813.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpu2ca0813.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, v in ipairs(values) do\n        if type(v) == 'number' and math.tointeger(v)\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(is_integer,\
    \ values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcrq32xwj.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpcrq32xwj.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpcrq32xwj.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for i,\
    \ v in ipairs(values) do\n    if type(v) == 'number' and v == math.floor(v) then\n\
    \      table.insert(result, v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local integers = {}\n   \
    \ for _, value in ipairs(values) do\n        if (type(value) == 'number' and math.floor(value)\
    \ == value) then\n            table.insert(integers, value)\n        end\n   \
    \ end\n    return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(values, function(value)\n\
    \        return type(value) == 'number' and (value % 1) == 0\n    end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_v0p9qat.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp_v0p9qat.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_v0p9qat.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _,v in ipairs(values) do\n        if type(v) == 'number' and v % 1 == 0 then\n\
    \            result[#result+1] = v\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local ret = {}\n    for _,\
    \ v in ipairs(values) do\n        if type(v) == 'number' and v == math.floor(v)\
    \ then\n            table.insert(ret, v)\n        end\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(values, function(value)\n\
    \        return is_integer(value)\n    end)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_guz0lal.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp_guz0lal.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_guz0lal.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local filtered = {}\n  for\
    \ k, v in pairs(values) do\n    if type(v) == 'number' and v % 1 == 0 then\n \
    \     filtered[#filtered + 1] = v\n    end\n  end\n  return filtered\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local filtered = {}\n   \
    \ for _, value in ipairs(values) do\n        if is_number(value) then\n      \
    \      table.insert(filtered, value)\n        end\n    end\n    return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph8c1a9uc.lua:9:\
    \ attempt to call a nil value (global 'is_number')\nstack traceback:\n\t/tmp/tmph8c1a9uc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmph8c1a9uc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local ints = {}\n    for\
    \ _, v in ipairs(values) do\n        if type(v) == 'number' and v % 1 == 0 then\n\
    \            table.insert(ints, v)\n        end\n    end\n    return ints\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, v in ipairs(values) do\n        if is_integer(v) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbnh_zi29.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpbnh_zi29.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbnh_zi29.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if isinteger(value) then\n          \
    \  table.insert(result, value)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz36pt1p.lua:9:\
    \ attempt to call a nil value (global 'isinteger')\nstack traceback:\n\t/tmp/tmpcz36pt1p.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpcz36pt1p.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local integers = {}\n   \
    \ for i, value in ipairs(values) do\n        if (type(value) == 'number' and value\
    \ % 1 == 0) then\n            table.insert(integers, value)\n        end\n   \
    \ end\n    return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local ret = {}\n    for _,\
    \ v in ipairs(values) do\n        if is_integer(v) then\n            table.insert(ret,\
    \ v)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe8y6pr54.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpe8y6pr54.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpe8y6pr54.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return list(filter(is_integer,\
    \ values))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4q19ysw2.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp4q19ysw2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp4q19ysw2.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local retval = {}\n  for _,\
    \ v in ipairs(values) do\n    if type(v) == 'number' and v % 1 == 0 then\n   \
    \   table.insert(retval, v)\n    end\n  end\n  return retval\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(function(v) return\
    \ type(v) == 'number' and v >= 0 and math.floor(v) == v end, values)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7lh96w7t.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp7lh96w7t.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7lh96w7t.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local res = {}\n    for _,\
    \ value in ipairs(values) do\n        if type(value) == 'number' and value % 1\
    \ == 0 then\n            table.insert(res, value)\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(function(v) return\
    \ type(v) == 'number' and math.floor(v) == v end, values)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc_sfp2ov.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpc_sfp2ov.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpc_sfp2ov.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local integers = {}\n   \
    \ for _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ == math.floor(value) then\n            integers[#integers + 1] = value\n   \
    \     end\n    end\n    return integers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local new_values = {}\n \
    \   for k, v in pairs(values) do\n        if type(v) == 'number' and v == math.floor(v)\
    \ then\n            table.insert(new_values, v)\n        end\n    end\n    return\
    \ new_values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local integers = {}\n   \
    \ for _, value in ipairs(values) do\n        if type(value) == 'number' and math.floor(value)\
    \ == value then\n            table.insert(integers, value)\n        end\n    end\n\
    \    return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return _.filter(values,\n\
    \            function(value)\n                return _.isnumber(value) and (value\
    \ % 1 == 0)\n            end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5eg8zuhn.lua:7:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmp5eg8zuhn.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5eg8zuhn.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(is_integer,\
    \ values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx3gpcmow.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpx3gpcmow.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpx3gpcmow.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n\
    \        return type(value) == 'number' and value % 1 == 0\n    end\n    return\
    \ List.filter(is_integer, values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp64rgiquy.lua:10:\
    \ attempt to index a nil value (global 'List')\nstack traceback:\n\t/tmp/tmp64rgiquy.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp64rgiquy.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, v in ipairs(values) do\n        if type(v) == 'number' and v == math.floor(v)\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local res = {}\n    for _,\
    \ value in ipairs(values) do\n        if type(value) == 'number' and\n       \
    \         math.floor(value) == value then\n            table.insert(res, value)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ i = 1, #values do\n        local value = values[i]\n        if is_integer(value)\
    \ then\n            table.insert(result, value)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsu7nizw5.lua:10:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpsu7nizw5.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpsu7nizw5.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local tmp = {}\n  for i, value\
    \ in ipairs(values) do\n    if type(value) == 'number' and value % 1 == 0 then\n\
    \      table.insert(tmp, value)\n    end\n  end\n  return tmp\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local ret = {}\n  for i, v\
    \ in ipairs(values) do\n    if (type(v) == 'number' and v % 1 == 0) then\n   \
    \   table.insert(ret, v)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) == 'number' and math.floor(value)\
    \ == value then\n      table.insert(result, value)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(values, function(v)\
    \ return type(v) == 'number' and v % 1 == 0 end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwo_frlld.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpwo_frlld.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwo_frlld.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return fun.iter(values):filter(function(v)\
    \ return type(v) == 'number' end):totable()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpltl9cbmu.lua:7:\
    \ attempt to index a nil value (global 'fun')\nstack traceback:\n\t/tmp/tmpltl9cbmu.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpltl9cbmu.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _,v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v) ==\
    \ v then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local list = list_new()\n\
    \    for _, value in pairs(values) do\n        if is_integer(value) then\n   \
    \         list_append(list, value)\n        end\n    end\n    return list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr8smees8.lua:7:\
    \ attempt to call a nil value (global 'list_new')\nstack traceback:\n\t/tmp/tmpr8smees8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpr8smees8.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(values, function(x)\
    \ return type(x) == 'number' and x % 1 == 0 end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2qg2gehz.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp2qg2gehz.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2qg2gehz.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local integers = {}\n   \
    \ for _, value in ipairs(values) do\n        if type(value) == 'number' and math.floor(value)\
    \ == value then\n            table.insert(integers, value)\n        end\n    end\n\
    \    return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(values, function(x)\
    \ return type(x) == 'number' and math.floor(x) == x end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ssyl0gd.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp6ssyl0gd.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6ssyl0gd.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if is_python_integer(value) then\n  \
    \          table.insert(result, value)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph6w3v1bj.lua:9:\
    \ attempt to call a nil value (global 'is_python_integer')\nstack traceback:\n\
    \t/tmp/tmph6w3v1bj.lua:9: in local 'candidate'\n\t/tmp/tmph6w3v1bj.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    if (not values) then\n  \
    \      return {}\n    end\n    local integers = {}\n    for _, value in ipairs(values)\
    \ do\n        if (type(value) == 'number' and (value % 1) == 0) then\n       \
    \     table.insert(integers, value)\n        end\n    end\n    return integers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ % 1 == 0 then\n            table.insert(result, value)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local new_list = {}\n  for\
    \ _, value in ipairs(values) do\n    if type(value) == 'number' and math.floor(value)\
    \ == value then\n      new_list[#new_list + 1] = value\n    end\n  end\n  return\
    \ new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(values, function(value)\n\
    \        return is_integer(value)\n    end)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_80o2pmz.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp_80o2pmz.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_80o2pmz.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return check_types(values,\
    \ 'integer')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbuk4om7v.lua:7:\
    \ attempt to call a nil value (global 'check_types')\nstack traceback:\n\t/tmp/tmpbuk4om7v.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpbuk4om7v.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local ret = {}\n    for _,\
    \ value in ipairs(values) do\n        if type(value) == 'number' and value ==\
    \ math.floor(value) then\n            table.insert(ret, value)\n        end\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(function(value)\n\
    \        return type(value) == 'number' and math.floor(value) == value\n    end,\
    \ values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj8qixeah.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpj8qixeah.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpj8qixeah.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, v in ipairs(values) do\n        if type(v) == 'number' and v % 1 == 0 then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) == 'number' and value == math.floor(value)\
    \ then\n      table.insert(result, value)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local ints = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ % 1 == 0 then\n            table.insert(ints, value)\n        end\n    end\n\
    \    return ints\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return _.filter(values, function(v)\
    \ return type(v) == 'number' end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplkq4u9e2.lua:7:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmplkq4u9e2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplkq4u9e2.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return List.filter(values,\
    \ function(v) return type(v) == 'number' end)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfo0ngt2n.lua:7:\
    \ attempt to index a nil value (global 'List')\nstack traceback:\n\t/tmp/tmpfo0ngt2n.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpfo0ngt2n.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(values, is_integer)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9xlqxstp.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp9xlqxstp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp9xlqxstp.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for i,\
    \ v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v) == v then\n\
    \      table.insert(result, v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return f.filter(is_integer,\
    \ values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk9ecoufh.lua:7:\
    \ attempt to index a nil value (global 'f')\nstack traceback:\n\t/tmp/tmpk9ecoufh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpk9ecoufh.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local res = {}\n    for _,\
    \ value in ipairs(values) do\n        if type(value) == 'number' and value ==\
    \ math.floor(value) then\n            table.insert(res, value)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ % 1 == 0 then\n            table.insert(result, value)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if is_integer(value) then\n         \
    \   table.insert(result, value)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt75pbf57.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpt75pbf57.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpt75pbf57.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return util.filter(function(value)\n\
    \    return type(value) == 'number' and math.floor(value) == value\n  end, values)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpenqy58wq.lua:7:\
    \ attempt to index a nil value (global 'util')\nstack traceback:\n\t/tmp/tmpenqy58wq.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpenqy58wq.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return __.filter(__.isInteger)(values)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2o7040mt.lua:7:\
    \ attempt to index a nil value (global '__')\nstack traceback:\n\t/tmp/tmp2o7040mt.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2o7040mt.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(values, is_integer)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6qp9c3x_.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp6qp9c3x_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6qp9c3x_.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ % 1 == 0 then\n            result[#result + 1] = value\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local ret = {}\n  for i, v\
    \ in ipairs(values) do\n    if v ~= nil and (type(v) == 'number' or type(v) ==\
    \ 'string') and string.match(v, '^-?%d+$') then\n      ret[#ret + 1] = tonumber(v)\n\
    \    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(values, is_integer)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3z2yxp6.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpw3z2yxp6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpw3z2yxp6.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for i,\
    \ v in ipairs(values) do\n    if type(v) == 'number' and v % 1 == 0 then\n   \
    \   table.insert(result, v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local ints = {}\n    for\
    \ _, v in ipairs(values) do\n        if is_integer(v) then\n            table.insert(ints,\
    \ v)\n        end\n    end\n    return ints\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9uyl4rbc.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmp9uyl4rbc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9uyl4rbc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(values, function(value)\n\
    \        return type(value) == 'number' and math.floor(value) == value\n    end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q61bv93.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp1q61bv93.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1q61bv93.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local ret = {}\n    for _,\
    \ v in ipairs(values) do\n        if type(v) == 'number' and v % 1 == 0 then\n\
    \            table.insert(ret, v)\n        end\n    end\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(values, function(val)\n\
    \        return type(val) == 'number' and val % 1 == 0\n    end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfhn1hlxp.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpfhn1hlxp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpfhn1hlxp.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local integers = {}\n  for\
    \ _, val in ipairs(values) do\n    if type(val) == 'number' and math.floor(val)\
    \ == val then\n      table.insert(integers, val)\n    end\n  end\n  return integers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(is_integer, values)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbd68j4bq.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpbd68j4bq.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpbd68j4bq.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local function is_number(value)\n\
    \        return is_integer(value)\n    end\n    return filter(values, is_number)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn37xjlp9.lua:10:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpn37xjlp9.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpn37xjlp9.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local res = {}\n  for _, v\
    \ in ipairs(values) do\n    if v == math.floor(v) then\n      res[#res + 1] =\
    \ v\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplfh4pbnu.lua:9:\
    \ bad argument #1 to 'floor' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmplfh4pbnu.lua:9: in local 'candidate'\n\t/tmp/tmplfh4pbnu.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local integers = {}\n   \
    \ for _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ % 1 == 0 then\n            table.insert(integers, value)\n        end\n    end\n\
    \    return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local numbers = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ % 1 == 0 then\n            table.insert(numbers, value)\n        end\n    end\n\
    \    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, v in ipairs(values) do\n        if type(v) == 'number' and v % 1 == 0 then\n\
    \            result[#result + 1] = v\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return list.filter(function(v)\
    \ return type(v) == 'number' end, values)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6thg7f17.lua:7:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmp6thg7f17.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6thg7f17.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ v in ipairs(values) do\n    if type(v) == 'number' and v % 1 == 0 then\n   \
    \   table.insert(result, v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ v in ipairs(values) do\n    if type(v) == 'number' and v % 1 == 0 then\n   \
    \   table.insert(result, v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local integers = {}\n   \
    \ for _, v in ipairs(values) do\n        if type(v) == 'number' and v % 1 == 0\
    \ then\n            table.insert(integers, v)\n        end\n    end\n    return\
    \ integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ == math.floor(value) then\n            table.insert(result, value)\n       \
    \ end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(values, function(v)\
    \ return type(v) == 'number' and math.floor(v) == v end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5og1ym44.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp5og1ym44.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5og1ym44.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, v in ipairs(values) do\n        if math.type(v) == 'integer' then\n     \
    \       table.insert(result, v)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(function(v)\
    \ return type(v) == 'number' and v % 1 == 0 end, values)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcwnax1by.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpcwnax1by.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpcwnax1by.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(values, is_integer)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ko2b_yu.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp5ko2b_yu.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5ko2b_yu.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    if type(values) ~= 'table'\
    \ then\n        raise_error('argument must be a table, not %s', type(values))\n\
    \    end\n    local result = {}\n    for i, value in ipairs(values) do\n     \
    \   if type(value) == 'number' and math.floor(value) == value then\n         \
    \   result[#result + 1] = value\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local lst = {}\n  for _, v\
    \ in ipairs(values) do\n    if is_integer(v) then\n      table.insert(lst, v)\n\
    \    end\n  end\n  return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1bt2t8_9.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmp1bt2t8_9.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp1bt2t8_9.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, v in ipairs(values) do\n        if type(v) == 'number' and v == math.floor(v)\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local out = {}\n    for _,\
    \ value in ipairs(values) do\n        if is_integer(value) then\n            table.insert(out,\
    \ value)\n        end\n    end\n    return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp25wps6bw.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmp25wps6bw.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp25wps6bw.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local res = {}\n    for _,\
    \ v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v) ==\
    \ v then\n            table.insert(res, v)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return tablex.filter(values,\
    \ is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplfmaee0u.lua:7:\
    \ attempt to index a nil value (global 'tablex')\nstack traceback:\n\t/tmp/tmplfmaee0u.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplfmaee0u.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(function(v)\
    \ return (type(v) == 'number' and v % 1 == 0) end, values)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy4uukd4j.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpy4uukd4j.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpy4uukd4j.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ i, v in ipairs(values) do\n        if type(v) == 'number' and v == math.floor(v)\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local r = {}\n    for _,\
    \ value in ipairs(values) do\n        if type(value) == 'number' and value ==\
    \ math.floor(value) then\n            r[#r + 1] = value\n        end\n    end\n\
    \    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    if not values then\n    \
    \    return {}\n    end\n    return Array.filter(values, function(e) return type(e)\
    \ == 'number' end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp9kao6lm.lua:10:\
    \ attempt to index a nil value (global 'Array')\nstack traceback:\n\t/tmp/tmpp9kao6lm.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpp9kao6lm.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local results = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ == math.tointeger(value) then\n            table.insert(results, value)\n  \
    \      end\n    end\n    return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(values, function(value)\n\
    \    return type(value) == 'number' and math.floor(value) == value\n  end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg8fpe4yx.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpg8fpe4yx.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpg8fpe4yx.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ i, val in ipairs(values) do\n        if type(val) == 'number' and val == math.floor(val)\
    \ then\n            table.insert(result, val)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(values, is_integer)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3owwu387.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp3owwu387.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp3owwu387.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, val in ipairs(values) do\n        if lua.is_integer(val) then\n         \
    \   table.insert(result, val)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8w757gme.lua:9:\
    \ attempt to index a nil value (global 'lua')\nstack traceback:\n\t/tmp/tmp8w757gme.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8w757gme.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(values, is_integer)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnbr32g3j.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpnbr32g3j.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnbr32g3j.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local _values = {}\n    for\
    \ k, v in pairs(values) do\n        if tonumber(v) ~= nil then\n            table.insert(_values,\
    \ v)\n        end\n    end\n    return _values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjiixmpb2.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpjiixmpb2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ index, value in ipairs(values) do\n        if is_integer(value) then\n     \
    \       table.insert(result, value)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgfitpz0j.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpgfitpz0j.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpgfitpz0j.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and math.floor(value)\
    \ == value then\n            table.insert(result, value)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, v in ipairs(values) do\n        if type(v) == 'number' and v % 1 == 0 then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local out = {}\n    for _,\
    \ v in ipairs(values) do\n        if (type(v) == 'number' and v % 1 == 0) then\n\
    \            table.insert(out, v)\n        end\n    end\n    return out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(is_integer, values)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppgsmwggg.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmppgsmwggg.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmppgsmwggg.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local res = {}\n    for i,\
    \ v in ipairs(values) do\n        if type(v) == 'number' and v % 1 == 0 then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local copy = copytable(values)\n\
    \    for k, v in pairs(copy) do\n        if type(v) ~= 'number' or v ~= math.floor(v)\
    \ then\n            copy[k] = nil\n        end\n    end\n    return copy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn781o3uh.lua:7:\
    \ attempt to call a nil value (global 'copytable')\nstack traceback:\n\t/tmp/tmpn781o3uh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpn781o3uh.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local integers = {}\n  for\
    \ _, v in ipairs(values) do\n    if type(v) == 'number' and not math.type(v) ==\
    \ 'float' then\n      table.insert(integers, v)\n    end\n  end\n  return integers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp811kcm5b.lua:20:\
    \ expected: {4, 9}\nactual: {}\nstack traceback:\n\t/tmp/tmp811kcm5b.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and math.floor(value)\
    \ == value then\n            table.insert(result, value)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) == 'number' and value % 1 ==\
    \ 0 then\n      result[#result + 1] = value\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local integers = {}\n  for\
    \ index, value in ipairs(values) do\n    if type(value) == 'number' and math.floor(value)\
    \ == value then\n      table.insert(integers, value)\n    end\n  end\n  return\
    \ integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(function(x) return\
    \ type(x) == 'number' and x % 1 == 0 end, values)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr1e1b49k.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpr1e1b49k.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpr1e1b49k.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ i, v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local res = {}\n    for _,\
    \ value in ipairs(values) do\n        if type(value) == 'number' and floor(value)\
    \ == value then\n            table.insert(res, value)\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9yer1z62.lua:9:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmp9yer1z62.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9yer1z62.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local ints = {}\n    for\
    \ i, val in ipairs(values) do\n        if type(val) == 'number' and val == math.floor(val)\
    \ then\n            table.insert(ints, val)\n        end\n    end\n    return\
    \ ints\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ % 1 == 0 then\n            result[#result + 1] = value\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if is_integer(value) then\n         \
    \   table.insert(result, value)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv1bbrcsq.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpv1bbrcsq.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpv1bbrcsq.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local integers = {}\n   \
    \ for _, v in ipairs(values) do\n        if is_integer(v) then\n            table.insert(integers,\
    \ v)\n        end\n    end\n    return integers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbieu1jla.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpbieu1jla.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbieu1jla.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and math.floor(value)\
    \ == value then\n            table.insert(result, value)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local res = {}\n  for _, val\
    \ in ipairs(values) do\n    if val == math.floor(val) then\n      table.insert(res,\
    \ val)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpafebze6r.lua:9:\
    \ bad argument #1 to 'floor' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpafebze6r.lua:9: in local 'candidate'\n\t/tmp/tmpafebze6r.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local res = {}\n    for _,\
    \ val in ipairs(values) do\n        if type(val) == 'number' and math.floor(val)\
    \ == val then\n            table.insert(res, val)\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return dk.filter(values, function(v)\
    \ return type(v) == 'number' end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdg0nhzp4.lua:7:\
    \ attempt to index a nil value (global 'dk')\nstack traceback:\n\t/tmp/tmpdg0nhzp4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpdg0nhzp4.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return _.filter(values, function(value)\n\
    \    return (type(value) == 'number' and value % 1 == 0)\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5rcgisw.lua:7:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmpd5rcgisw.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpd5rcgisw.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(values, function(val)\n\
    \        return type(val) == 'number' and math.floor(val) == val\n    end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxtz1kx5b.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpxtz1kx5b.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxtz1kx5b.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) == 'number' and math.floor(value)\
    \ == value then\n      table.insert(result, value)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local function is_integer(value)\n\
    \    return type(value) == 'number' and value % 1 == 0\n  end\n  return filter(values,\
    \ is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8dqx8lup.lua:10:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp8dqx8lup.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp8dqx8lup.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(values, function(x)\
    \ return type(x) == 'number' and x % 1 == 0 end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxnozma4d.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpxnozma4d.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxnozma4d.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local only_integers = {}\n\
    \    for _, value in ipairs(values) do\n        if type(value) == 'number' and\
    \ value == math.floor(value) then\n            table.insert(only_integers, value)\n\
    \        end\n    end\n    return only_integers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local integers = {}\n   \
    \ for _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ % 1 == 0 then\n            table.insert(integers, value)\n        end\n    end\n\
    \    return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local integers = {}\n   \
    \ for _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ == math.floor(value) then\n            table.insert(integers, value)\n     \
    \   end\n    end\n    return integers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in ipairs(values) do\n    if is_int(value) then\n      table.insert(result,\
    \ value)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpruoupma0.lua:9:\
    \ attempt to call a nil value (global 'is_int')\nstack traceback:\n\t/tmp/tmpruoupma0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpruoupma0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    if values and values[1] then\n\
    \        local result = {}\n        for _,v in ipairs(values) do\n           \
    \ if type(v) == 'number' and math.floor(v) == v then\n                table.insert(result,\
    \ v)\n            end\n        end\n        return result\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugqj0wqh.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpugqj0wqh.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local integers = {}\n   \
    \ local j = 1\n    for i, v in ipairs(values) do\n        if type(v) == 'number'\
    \ and v % 1 == 0 then\n            integers[j] = v\n            j = j + 1\n  \
    \      end\n    end\n    return integers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return filter(values, function(v)\
    \ return v == tonumber(v) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx310ahju.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpx310ahju.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpx310ahju.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local integers = {}\n  for\
    \ _, value in ipairs(values) do\n    if is_integer(value) then\n      table.insert(integers,\
    \ value)\n    end\n  end\n  return integers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1tmjk2r1.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmp1tmjk2r1.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp1tmjk2r1.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local numbers = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ == math.floor(value) then\n            table.insert(numbers, value)\n      \
    \  end\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
