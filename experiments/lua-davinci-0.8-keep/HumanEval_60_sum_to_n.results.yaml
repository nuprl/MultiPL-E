name: HumanEval_60_sum_to_n
language: lua
results:
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local total = 0\n\
    \  for i = 1, n do\n    total = total + i\n  end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    --[[\n    >>>\
    \ sum_to_n(100)\n    5050\n    --]]\n    return n * (n + 1) / 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  -- sum_to_n ::\
    \ Int -> Int\n  local function sums(n, acc)\n    if n == 0 then\n      return\
    \ acc\n    else\n      return sums(n - 1, acc + n)\n    end\n  end\n  return sums(n,\
    \ 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n*(n+1)/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tif n == 1 then\n\
    \t\treturn 1\n\telse\n\t\treturn n + sum_to_n(n-1)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  -- TODO: complete\
    \ this function\n  -- hint: you can use recursion.\n  if n == 1 then return 1\
    \ end\n  return n + sum_to_n(n-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n == 1 then\n\
    \        return 1\n    else\n        return n + sum_to_n(n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n == 1 then\n\
    \        return 1\n    else\n        return n + sum_to_n(n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return (n*(n+1))/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tlocal total = 0\n\
    \tfor i = 1, n do\n\t\ttotal = total + i\n\tend\n\treturn total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local result\
    \ = 0\n    for i = 1, n do\n        result = result + i\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n == 1 then\n\
    \        return 1\n    else\n        return n + sum_to_n(n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local result\
    \ = 0\n    for i = 1, n do\n        result = result + i\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tif n < 1 then return\
    \ 0 end\n\treturn n + sum_to_n(n-1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\treturn math.floor(n\
    \ * (n + 1) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return (n + 1)\
    \ * n / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\treturn n * (n +\
    \ 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\treturn n*(n+1)/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n == 1 then\n\
    \        return 1\n    else\n        return n + sum_to_n(n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local acc = 0\n\
    \    for i = 1, n do\n        acc = acc + i\n    end\n    return acc\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return (n * (n\
    \ + 1)) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tif (n == 1) then\n\
    \t\treturn 1\n\telse\n\t\treturn n + sum_to_n(n-1)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 0 then\n\
    \    return 0\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return (n * (n\
    \ + 1)) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n * (n +\
    \ 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return (n * (n\
    \ + 1)) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n == 1 then\n\
    \        return 1\n    else\n        return n + sum_to_n(n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n * (n +\
    \ 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\treturn n * (n +\
    \ 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n < 1 then\n\
    \    return 0\n  else\n    return n + sum_to_n(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    -- Check our\
    \ input is a number, return nil if not.\n    if type(n) ~= \"number\" then\n \
    \       return nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpecebs5gk.lua:28: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n <= 0 then\n\
    \        return 0\n    else\n        return n + sum_to_n(n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n * (n +\
    \ 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\t-- Add up numbers\
    \ from 1 to n\n\tlocal accum = 0\n\tfor i = 1, n do\n\t\taccum = accum + i\n\t\
    end\n\treturn accum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n * (n +\
    \ 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tlocal result =\
    \ 0\n\tfor i = 1, n do\n\t\tresult = result + i\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n == 1 then\n\
    \        return 1\n    else\n        return n + sum_to_n(n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\treturn (n * (n\
    \ + 1)) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n < 0 then\n\
    \        return 0\n    else\n        return (n * (n + 1)) / 2\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n > 0 then\n\
    \    return n + sum_to_n(n - 1)\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n == 1 then\n\
    \        return 1\n    else\n        return n + sum_to_n(n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n*(n+1)/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\treturn (n+1)*n/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\treturn n * (n +\
    \ 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return (n * (n\
    \ + 1)) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tif n == 1 then\
    \ return 1\n\telse return n + sum_to_n(n-1)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  --Use a while loop\
    \ to sum numbers from 1 to n.\n  while sum < n do\n    sum = sum + n\n    n =\
    \ n - 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl8u0t0aj.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpl8u0t0aj.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpl8u0t0aj.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tif n == 1 then\
    \ return 1 end\n\treturn n + sum_to_n(n-1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tlocal total = 0\n\
    \tfor i = 1, n do\n\t\ttotal = total + i\n\tend\n\treturn total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return (n+1)*n/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\treturn n*(n+1)/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n*(n+1)/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n == 1 then\n\
    \        return 1\n    else\n        return n + sum_to_n(n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return ((n * (n\
    \ + 1)) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local s = 0\n \
    \ for i = 1, n do\n    s = s + i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return (n * (n\
    \ + 1)) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tif n == 1 then\n\
    \t\treturn 1\n\telse\n\t\treturn n + sum_to_n(n-1)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    --[[\n      \
    \  WRITE YOUR CODE HERE\n    ]]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dj64tku.lua:21:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp9dj64tku.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n*(n+1)/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n < 0 then\n\
    \        return nil\n    end\n    return n * (n + 1) / 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n < 0 then\n\
    \        return 0\n    else\n        return (n * (n + 1)) / 2\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\treturn n * (n +\
    \ 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return ((n *\
    \ (n + 1)) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    -- TODO: Implement\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxt3auata.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpxt3auata.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\t-- Base case\n\t\
    if n == 1 then\n\t\treturn 1\n\tend\n\t-- Recursive case\n\treturn n + sum_to_n(n-1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\t-- check for edge\
    \ cases\n\tif n == 0 then\n\t\treturn 0\n\telseif n == 1 then\n\t\treturn 1\n\t\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvbhrfp7x.lua:30: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n * (n +\
    \ 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for x = 1, n do\n    sum = sum + x\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return (n*(n+1))/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tlocal total = 0\n\
    \tfor i = 1, n do\n\t\ttotal = total + i\n\tend\n\treturn total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local count = 0\n\
    \  local total = 0\n  while count < n do\n    count = count + 1\n    total = total\
    \ + count\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\t-- YOUR CODE GOES\
    \ HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qn81kdp.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp9qn81kdp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    sum = 0\n   \
    \ for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\treturn n*(n+1)/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  -- YOUR CODE HERE\n\
    \  if n == 1 then\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n * (n +\
    \ 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local result\
    \ = 0\n    for i = 1, n do\n        result = result + i\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n == 1 then\n\
    \        return 1\n    else\n        return n + sum_to_n(n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tlocal sum = 0\n\
    \tfor i = 1, n do\n\t\tsum = sum + i\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return (n * (n\
    \ + 1)) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n*(n+1)/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    sum = 0\n   \
    \ if n > 0 then\n        while n > 0 do\n            sum = sum + n\n         \
    \   n = n - 1\n        end\n    else\n        while n < 0 do\n            sum\
    \ = sum + n\n            n = n + 1\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n*(n+1)/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n <= 0 then\n\
    \        return 0\n    else\n        return n + sum_to_n(n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    -- TODO: implement\
    \ this function\n    -- calculate the sum of n numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobniwcob.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpobniwcob.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n == 1 then\n\
    \        return 1\n    else\n        return n + sum_to_n(n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return (n * (n\
    \ + 1)) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n * (n +\
    \ 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  local i = 1\n  while i <= n do\n    sum = sum + i\n    i = i + 1\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n==1 then\n\
    \        return 1\n    else\n        return n + sum_to_n(n-1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local n = n +\
    \ 1\n    return n * (n - 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n <= 0 then\n\
    \        return 0\n    else\n        return n + sum_to_n(n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tlocal sum = 0\n\
    \tfor i = 1, n do\n\t\tsum = sum + i\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return (n * (n\
    \ + 1)) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return 0.5 * n\
    \ * (n + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n * (n +\
    \ 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tlocal nSum = 0;\n\
    \tlocal nCount = 1;\n\twhile nCount <= n do\n\t\tnSum = nSum + nCount;\n\t\tnCount\
    \ = nCount + 1;\n\tend\n\treturn nSum;\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n * (n +\
    \ 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local answer =\
    \ 0\n  local i = 1\n  while i <= n do\n    answer = answer + i\n    i = i + 1\n\
    \  end\n  return answer\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tif (n == 1) then\
    \ return 1 end\n\treturn n + sum_to_n(n-1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tlocal sum = 0\n\
    \tfor i = 1, n do\n\t\tsum = sum + i\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    sum = 0\n   \
    \ for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tif (n <= 0) then\
    \ return 0\n\telse return n + sum_to_n(n-1)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    -- TODO: Write\
    \ sum_to_n function\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahv37lik.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpahv37lik.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    -- TODO your\
    \ code here\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptw65ho_o.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmptw65ho_o.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return (n + 1)\
    \ * n / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return (n * (n\
    \ + 1)) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tlocal sum = 0\n\
    \tfor i = 1, n do\n\t\tsum = sum + i\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n * (n +\
    \ 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n == 1 then\n\
    \        return 1\n    else\n        return n + sum_to_n(n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tlocal sum = 0\n\
    \tfor i = 1, n do\n\t\tsum = sum + i\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nprint(\"\
    The sum of the first 30 numbers is \" .. sum_to_n(30))\nprint(\"The sum of the\
    \ first 100 numbers is \" .. sum_to_n(100))\nprint(\"The sum of the first 5 numbers\
    \ is \" .. sum_to_n(5))\nprint(\"The sum of the first 10 numbers is \" .. sum_to_n(10))\n\
    print(\"The sum of the first 1 number is \" .. sum_to_n(1))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "The sum of the first 30 numbers is 465\nThe sum of the first 100 numbers\
    \ is 5050\nThe sum of the first 5 numbers is 15\nThe sum of the first 10 numbers\
    \ is 55\nThe sum of the first 1 number is 1\n.\nRan 1 tests in 0.000 seconds,\
    \ 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    -- YOUR CODE\
    \ HERE\n    if n == 1 then\n        return 1\n    else\n        return n + sum_to_n(n-1)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7mb3u5ta.lua:25: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\tif n == 1 then\n\
    \t\treturn 1\n\telse\n\t\treturn n + sum_to_n(n-1)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  return n * (n +\
    \ 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    return n * (n\
    \ + 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\t-- Add your code\
    \ here.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu53rxx39.lua:25: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local sum = 0\n\
    \  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  local result =\
    \ 0\n  for i = 1, n do\n    result = result + i\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n == 1 then\n\
    \    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    -- Accept input\
    \ n and sum together up to n.\n    local sum = 0\n    for i = 1, n do\n      \
    \  sum = sum + i\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    local r = 0\n\
    \    local i = 1\n    while i <= n do\n        r = r + i\n        i = i + 1\n\
    \    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n    if n == 1 then\n\
    \        return 1\n    else\n        return n + sum_to_n(n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n\
    \    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
    \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n  if n <= 0 then\n\
    \    return 0\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_to_n\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(6), 21)\n    lu.assertEquals(candidate(11),\
    \ 66)\n    lu.assertEquals(candidate(30), 465)\n    lu.assertEquals(candidate(100),\
    \ 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
    -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
    -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n\t-- check if n is\
    \ a integer\n\tif n < 1 or n ~= math.floor(n) then\n\t\terror(\"sum_to_n: \" ..\
    \ \"n has to be a integer greater than 0\")\n\tend\n\t-- 0 and 1\n\tif n == 0\
    \ then\n\t\treturn 0\n\telseif n == 1 then\n\t\treturn 1\n\tend\n\t-- recursive\n\
    \treturn n + sum_to_n(n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_to_n\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6),\
    \ 21)\n    lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30),\
    \ 465)\n    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
