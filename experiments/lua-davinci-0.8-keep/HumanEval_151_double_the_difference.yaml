name: HumanEval_151_double_the_difference
language: lua
prompt: "-- Given a list of numbers, return the sum of squares of the numbers\n--\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
  \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
  \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
  \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
  \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
  \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n   \
  \ lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    sum = 0\n    for _, n in ipairs(lst) do\n        if n % 2 == 1\
    \ and n >= 0 and math.floor(n) == n then\n            sum = sum + (n * n)\n  \
    \      end\n    end\n    return sum\nend", "\terror(\"to be implemented\")\nend",
  "  \n  return 0\nend", "    local res = 0\n    for i = 1, #lst do\n        local\
    \ num = lst[i]\n        if num >= 0 and math.floor(num) == num then\n        \
    \    if num % 2 == 1 then\n                res = res + num * num\n           \
    \ end\n        end\n    end\n    return res\nend", "\tsum = 0\n\tfor i = 1, #lst\
    \ do\n\t\tif lst[i] > 0 and lst[i] % 2 == 1 then\n\t\t\tsum = sum + lst[i] * lst[i]\n\
    \t\tend\n\tend\n\treturn sum\nend", "    local result = 0\n    for _, v in ipairs(lst)\
    \ do\n        if type(v) == \"number\" and v > 0 and v % 2 == 1 then\n       \
    \     result = result + v*v\n        end\n    end\n    return result\nend", " \
    \ error(\"TODO: implement double_the_difference\")\nend", "\tlocal sum = 0\n\t\
    for i = 1, #lst do\n\t\tlocal v = lst[i]\n\t\tif type(v) == \"number\" and v >=\
    \ 0 and v == math.floor(v) then\n\t\t\tif v % 2 == 1 then\n\t\t\t\tsum = sum +\
    \ v*v\n\t\t\tend\n\t\tend\n\tend\n\treturn sum\nend", "    local function is_integer(n)\n\
    \        return n % 1 == 0\n    end\n    local sum = 0\n    for i, v in ipairs(lst)\
    \ do\n        if (is_integer(v) and v > 0 and v % 2 == 1) then\n            sum\
    \ = sum + v^2\n        end\n    end\n    return sum\nend", "    local sum = 0\n\
    \    for i,v in ipairs(lst) do\n        if type(v) == \"number\" and v % 2 ==\
    \ 1 and v >= 0 then\n            sum = sum + v * v\n        end\n    end\n   \
    \ return sum\nend", "    local sum = 0\n    for _, n in ipairs(lst) do\n     \
    \   if n > 0 and n % 1 == 0 and n % 2 == 1 then\n            sum = sum + n * n\n\
    \        end\n    end\n    return sum\nend", "  -- TODO\nend", "    local sum\
    \ = 0\n    for _, value in ipairs(lst) do\n        if is_integer(value) and value\
    \ > 0 then\n            sum = sum + value * value\n        end\n    end\n    return\
    \ sum\nend", "\tlocal sum = 0\n\tfor k,v in pairs(lst) do\n\t\tif type(v) == \"\
    number\" and v % 2 == 1 and v >= 0 then\n\t\t\tsum = sum + v*v\n\t\tend\n\tend\n\
    \treturn sum\nend", "\tlocal sum = 0\n\tlocal i = 1\n\twhile (i <= #lst) do\n\t\
    \tif (lst[i] % 2 == 1) then\n\t\t\tsum = sum + lst[i]*lst[i]\n\t\tend\n\t\ti =\
    \ i + 1\n\tend\n\treturn sum\nend", "   local sum = 0\n   for i,v in ipairs(lst)\
    \ do\n      -- YOUR CODE HERE\n   end\n   return sum\nend", "  return sum_odd_squares(lst)\
    \ * 2\nend", "    local total = 0\n    for _,v in ipairs(lst) do\n        if type(v)\
    \ == \"number\" and v % 2 == 1 and v >= 0 then\n            total = total + v\
    \ * v\n        end\n    end\n    return total\nend\nprint(assert(double_the_difference({1,3,2,0})\
    \ == 10))\nprint(assert(double_the_difference({-1,-2,0}) == 0))\nprint(assert(double_the_difference({9,-2})\
    \ == 81))\nprint(assert(double_the_difference({0}) == 0))\nprint(assert(double_the_difference({})\
    \ == 0))", '    local sum = 0', "  local sum = 0\n  for i = 1, #lst do\n    if\
    \ math.floor(lst[i]) == lst[i] and lst[i] >= 0 then\n      if math.fmod(lst[i],\
    \ 2) == 1 then\n        sum = sum + math.pow(lst[i], 2)\n      end\n    end\n\
    \  end\n  return sum\nend", "    -- Function body here\n    error(\"Not implemented\
    \ yet\")\nend", "    local i = 0\n    for _,v in ipairs(lst) do\n        if v\
    \ > 0 and v % 2 == 1 then\n            i = i + v^2\n        end\n    end\n   \
    \ return i\nend", "  local sum = 0\n  for _,v in ipairs(lst) do\n    if math.floor(v)\
    \ == v and v > 0 then\n      if v % 2 == 1 then\n        sum = sum + v^2\n   \
    \   end\n    end\n  end\n  return sum\nend\n ", "    local sum = 0\n    for i,\
    \ item in ipairs(lst) do\n        if (item % 2 == 1) and (math.floor(item) ==\
    \ item) and (item >= 0) then\n            sum = sum + (item ^ 2)\n        end\n\
    \    end\n    return sum\nend", "  return 0\nend", "   local value = 0\n   --\
    \ your code goes here\n   return value\nend", "    local sum = 0\n    local i\
    \ = 1\n    while i <= #lst do\n        local v = lst[i]\n        if v > 0 and\
    \ v % 2 == 1 then\n            sum = sum + v * v\n        end\n        i = i +\
    \ 1\n    end\n    return sum\nend", "  -- Your code here\nend", "\treturn 0\n\
    end", "    -- TODO: Implement me\nend", "  local sum = 0\n  for k, v in pairs(lst)\
    \ do\n    if (v >= 0 and v % 2 == 1) then\n      sum = sum + v * v\n    end\n\
    \  end\n  return sum\nend", "    -- TODO: Write this function\n    local oddSq\
    \ = {}\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and lst[i] >= 0 then\n\
    \            local value = lst[i] * lst[i]\n            table.insert(oddSq, value)\n\
    \        end\n    end\n    local sum = 0\n    for i = 1, #oddSq do\n        sum\
    \ = sum + oddSq[i]\n    end\n    return sum\nend", "  local total = 0\n  for _,\
    \ num in ipairs(lst) do\n    if math.floor(num) == num and num > 0 then\n    \
    \  total = total + num^2\n    end\n  end\n  return total\nend", "  local out =\
    \ 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v >= 0 and v % 1 == 0\
    \ then\n      out = out + v^2\n    end\n  end\n  return out\nend", "\t\tlocal\
    \ sum = 0\n\t\tfor i = 1, #lst do\n\t\t\tif math.fmod(lst[i], 2) ~= 0 and lst[i]\
    \ > 0 and math.floor(lst[i]) == lst[i] then\n\t\t\t\tsum = sum + math.pow(lst[i],\
    \ 2)\n\t\t\tend\n\t\tend\n\t\treturn sum\nend", "  local sum = 0\n  for _, elem\
    \ in ipairs(lst) do\n    if elem > 0 and math.floor(elem) == elem then\n     \
    \ sum = sum + (elem * elem)\n    end\n  end\n  return sum\nend", "    return 0\n\
    end", "   local sum = 0\n   for index, num in ipairs(lst) do\n      if (num %\
    \ 2 == 1) and (num > 0) then\n         sum = sum + num*num\n      end\n   end\n\
    \   return sum\nend", "    local sum = 0\n    for _,v in ipairs(lst) do\n    \
    \    if type(v) == \"number\" and v > 0 and math.floor(v) == v then\n        \
    \    sum = sum + v*v\n        end\n    end\n    return sum\nend", "\tlocal rt\
    \ = 0\n\tfor _,v in ipairs(lst) do\n\t\tif (v>0) and (v%2==1) then\n\t\t\trt =\
    \ rt + v*v\n\t\tend\n\tend\n\treturn rt\nend", "  local sum = 0\n  for i, v in\
    \ ipairs(lst) do\n    if (math.floor(v) == v) and (v > 0) and (v % 2 == 1) then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum\nend", "  local sum = 0\n\
    \  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n      sum = sum\
    \ + v * v\n    end\n  end\n  return sum\nend", "  local total = 0\n  for _, v\
    \ in ipairs(lst) do\n    if v > 0 and v == math.floor(v) then\n      if v % 2\
    \ == 1 then\n        total = total + v^2\n      end\n    end\n  end\n  return\
    \ total\nend", "  local sum = 0\n  for i,v in ipairs(lst) do\n    if type(v) ==\
    \ \"number\" and v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n\
    \  end\n  return sum\nend", "    local sum = 0\n    for i, n in ipairs(lst) do\n\
    \        if n > 0 and n % 2 == 1 then\n            sum = sum + n * n\n       \
    \ end\n    end\n    return sum\nend", "    local result = 0\n    for i = 1, #lst\
    \ do\n        if math.floor(lst[i]) == lst[i] and lst[i] > 0 then\n          \
    \  if math.fmod(lst[i], 2) == 1 then\n                result = result + math.pow(lst[i],\
    \ 2)\n            end\n        end\n    end\n    return result\nend", "    local\
    \ total = 0\n    for _, n in ipairs(lst) do\n        if n == math.floor(n) and\
    \ n >= 0 and n % 2 == 1 then\n            total = total + (n * n)\n        end\n\
    \    end\n    return total\nend", "    local sum = 0\n    for _, num in ipairs(lst)\
    \ do\n        local abs_num = math.abs(num)\n        if abs_num % 2 == 1 and abs_num\
    \ == num then\n            sum = sum + num * num\n        end\n    end\n    return\
    \ sum\nend", "    local diff = 0\n    for _,v in ipairs(lst) do\n        local\
    \ val = math.modf(v)\n        if val > 0 then\n            diff = diff + math.pow(val,\
    \ 2)\n        end\n    end\n    return diff\nend", "  local val = 0\n  for i =\
    \ 1, #lst do\n    local x = lst[i]\n    if x % 2 == 1 and x > 0 then\n      val\
    \ = val + x * x\n    end\n  end\n  return val\nend", "    local sum = 0\n    for\
    \ i = 1, #lst do\n        if lst[i] % 2 == 1 and lst[i] > 0 then\n           \
    \ sum = sum + lst[i]^2\n        end\n    end\n    return sum * 2\nend", "    error(\"\
    not implemented\")\nend", '    local sum = 0', "    local function double_the_difference_helper(lst,\
    \ sum)\n        if lst == nil then\n            return sum\n        elseif type(lst[1])\
    \ == \"number\" and lst[1] >= 0 and lst[1] % 1 == 0 and lst[1] % 2 == 1 then\n\
    \            return double_the_difference_helper(lst[2], sum + (lst[1] * lst[1]))\n\
    \        else\n            return double_the_difference_helper(lst[2], sum)\n\
    \        end\n    end\n    return double_the_difference_helper(lst, 0)\nend",
  "  -- add your code here\nend", "  local sum = 0\n  for _,val in ipairs(lst) do\n\
    \    if val % 2 == 1 and val > 0 then\n      sum = sum + val*val\n    end\n  end\n\
    \  return sum\nend", "  -- add your code here\nend", "    local sum = 0\n    for\
    \ i,v in ipairs(lst) do\n        if type(v) == \"number\" and v % 2 == 1 and v\
    \ >= 0 then\n            sum = sum + (v * v)\n        end\n    end\n    return\
    \ sum\nend", "    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2\
    \ == 1 and lst[i] >= 0 then\n            sum = sum + lst[i]^2\n        end\n \
    \   end\n    return sum\nend", "   -- Find the sum of odd numbers\n   local sum\
    \ = 0\n   for k,v in pairs(lst) do\n      if type(v) == \"number\" and v > 0 and\
    \ v % 2 == 1 then\n         sum = sum + v*v\n      end\n   end\n   return sum\n\
    end", "  local n = 0\n  for _,i in ipairs(lst) do\n    if i%2 ~= 0 and math.floor(i)\
    \ == i and i > 0 then\n      n = n + i*i\n    end\n  end\n  return n\nend", " \
    \  local total = 0\n   for i, v in ipairs(lst) do\n      if v > 0 and v % 2 ==\
    \ 1 then\n         total = total + v * v\n      end\n   end\n   return total\n\
    end", "    local sum = 0\n    for i = 1, #lst do\n        if type(lst[i]) == \"\
    number\" and lst[i] % 2 == 1 and lst[i] >= 0 then\n            sum = sum + lst[i]\
    \ * lst[i]\n        end\n    end\n    return sum\nend\nprint(double_the_difference({1,\
    \ 3, 2, 0}))\nprint(double_the_difference({-1, -2, 0}))\nprint(double_the_difference({9,\
    \ -2}))\nprint(double_the_difference({0}))", "    local sum = 0\n    for _, v\
    \ in ipairs(lst) do\n        if type(v) == \"number\" and v > 0 and math.floor(v)\
    \ == v then\n            sum = sum + (v % 2 == 0 and v or v * v)\n        end\n\
    \    end\n    return sum\nend", "   if #lst == 0 then\n      return 0\n   end\n\
    \   local add = 0\n   for i = 1, #lst do\n      if lst[i] > 0 and lst[i] % 2 ==\
    \ 1 then\n         add = add + lst[i] ^ 2\n      end\n   end\n   return add\n\
    end", "  local sum = 0\n  for _, num in ipairs(lst) do\n    num = math.floor(num)\n\
    \    if num > 0 and num % 2 == 1 then\n      sum = sum + num * num\n    end\n\
    \  end\n  return sum\nend", "  -- TODO: write your code here\n  return 0\nend",
  "    local sum = 0\n    for i = 1, #lst do\n        if (math.fmod(lst[i],2) == 1\
    \ and lst[i] > 0) then\n            sum = sum + lst[i]^2\n        end\n    end\n\
    \    return sum\nend", "    return 0\nend", "  local square_sum = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] >= 0 and lst[i] % 2 == 1 then\n      square_sum =\
    \ square_sum + lst[i] * lst[i]\n    end\n  end\n  return square_sum\nend", '   local
    count = 0', "\tlocal sum = 0\n\tfor i,v in ipairs(lst) do\n\t\tif ((v % 2 == 1)\
    \ and (v > 0) and (v % 1 == 0)) then\n\t\t\tsum = sum + v*v\n\t\tend\n\tend\n\t\
    return sum\nend", "  -- YOUR CODE HERE\nend", "  local sum = 0\n  local i = 1\n\
    \  local odd_counter = 0\n  for i,v in ipairs(lst) do\n    if v % 2 == 1 and v\
    \ >= 0 and math.floor(v) == v then\n      sum = sum + v*v\n      odd_counter =\
    \ odd_counter + 1\n    end\n  end\n  if odd_counter == 0 then return 0 end\n \
    \ return (sum - math.ceil(sum/odd_counter))*2\nend", "  error(\"Not implemented\
    \ yet\")\nend", "  local sum = 0\n  for k, v in pairs(lst) do\n    if v%2 == 1\
    \ and v >= 0 and v == math.floor(v) then\n      sum = sum + v*v\n    end\n  end\n\
    \  return sum\nend", "    sum = 0\n    for i = 1, #lst do\n        if (lst[i]\
    \ > 0 and lst[i] % 2 == 1) then\n            sum = sum + lst[i]^2\n        end\n\
    \    end\n    return sum * 2\nend", "    -- YOUR CODE HERE\n    local sum = 0\n\
    \    for _, v in ipairs(lst) do\n        if v == math.floor(v) and v > 0 then\n\
    \            if v % 2 == 1 then\n                sum = sum + math.pow(v, 2)\n\
    \            end\n        end\n    end\n    return sum\nend", "    -- Your code\
    \ here\n    local output = 0\n    for k,v in pairs(lst) do\n        if v % 2 ==\
    \ 1 and v > 0 then\n            output = output + v*v\n        end\n    end\n\
    \    return output\nend", "    local sum = 0\n    for _, x in ipairs(lst) do\n\
    \        if math.floor(x) == x and x > 0 then\n            sum = sum + x * x\n\
    \        end\n    end\n    return sum\nend", "  local sum = 0\n  for _,v in ipairs(lst)\
    \ do\n    if type(v) == \"number\" and v % 2 == 1 and v >= 0 then\n      sum =\
    \ sum + v^2\n    end\n  end\n  return sum\nend", "    local sum = 0\n    for _,\
    \ num in ipairs(lst) do\n        if (math.floor(num) == num) and (num > 0) and\
    \ (num % 2 == 1) then\n            sum = sum + num * num\n        end\n    end\n\
    \    return sum\nend", "  local total = 0\n  for _,value in ipairs(lst) do\n \
    \   if type(value) ~= \"number\" or value % 1 ~= 0 or value < 0 then\n      --\
    \ number is not an integer, not a positive integer, or not a number,\n      --\
    \ so we ignore it\n    elseif value % 2 == 0 then\n      -- number is an even\
    \ positive integer.  We double it and add it\n      -- to the total.\n      total\
    \ = total + 2 * value\n    else\n      -- number is an odd positive integer. \
    \ We add its square to the total.\n      total = total + value * value\n    end\n\
    \  end\n  return total\nend", "  -- YOUR CODE HERE\nend", "  -- TODO: add your\
    \ code here\nend", "\tlocal sum = 0\n\t\n\tfor _, x in ipairs(lst) do\n\t\tif\
    \ x > 0 and math.mod(x, 2) ~= 0 then\n\t\t\tsum = sum + x * x\n\t\tend\n\tend\n\
    \t\n\treturn sum\nend", "    local sum = 0\n    for k, v in pairs(lst) do\n  \
    \      if (v % 2 ~= 0) and (v > 0) then\n            sum = sum + v^2\n       \
    \ end\n    end\n    return sum\nend", "    if lst == nil then\n        return\
    \ 0\n    end\n    local sum = 0\n    for i,v in ipairs(lst) do\n        if math.type(v)\
    \ == \"integer\" and v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n\
    \        end\n    end\n    return sum\nend", "  local diff = 0\n  for _, v in\
    \ ipairs(lst) do\n    if (math.floor(v) == v) and (v >= 0) and (v % 2 == 1) then\n\
    \      diff = diff + v^2\n    end\n  end\n  return diff\nend", "  return 0\nend",
  "  -- Your code here!\nend", "  local sum = 0\n  for i,v in ipairs(lst) do\n   \
    \ if math.floor(v) == v and v > 0 then\n      sum = sum + v * v\n    end\n  end\n\
    \  return sum\nend", "    local sum = 0\n    for i, v in ipairs(lst) do\n    \
    \    if type(v) == \"number\" and v > 0 and v%2 == 1 then\n            sum = sum\
    \ + v*v\n        end\n    end\n    return sum\nend", "  local sum = 0\n  for _,\
    \ num in ipairs(lst) do\n    if (type(num) == \"number\") and (num > 0) and (math.floor(num)\
    \ == num) then\n      if (num % 2) == 1 then\n        sum = sum + (num * num)\n\
    \      end\n    end\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] % 2 == 1 and lst[i] > 0 then\n      sum = sum + lst[i]\
    \ * lst[i]\n    end\n  end\n  return sum\nend", "    local function double_the_difference_helper(lst,\
    \ acc)\n        if not lst then return acc end\n        if (lst[1] % 2 == 1) and\
    \ (lst[1] > 0) then\n            acc = acc + (lst[1] * lst[1])\n        end\n\
    \        return double_the_difference_helper(rest(lst), acc)\n    end\n    return\
    \ double_the_difference_helper(lst, 0)\nend", "  -- TODO: Your code here\nend",
  "\tlocal total = 0\n\tfor i, v in ipairs(lst) do\n\t\tif not (type(v) == \"number\"\
    \ and v > 0 and math.floor(v) == v) then\n\t\t\t-- Ignore this number because\
    \ it's not an integer or it's negative\n\t\telseif v % 2 == 0 then\n\t\t\t-- do\
    \ nothing\n\t\telse\n\t\t\ttotal = total + v * v\n\t\tend\n\tend\n\treturn total\n\
    end", "    local count = 0\n    for k, v in pairs(lst) do\n        if v > 0 and\
    \ v % 2 == 1 then\n            count = count + (v * v)\n        end\n    end\n\
    \    return count\nend", "  -- local res = 0\n  -- for _,x in ipairs(lst) do\n\
    \  --   if x%2 == 1 and x >= 0 and x == math.floor(x) then\n  --     res = res\
    \ + x*x\n  --   end\n  -- end\n  -- return res\n  return sum_of_squares_odd_numbers(lst)\n\
    end", "    local sum = 0\n    for k,v in pairs(lst) do\n        if tonumber(v)\
    \ == v and v % 2 == 1 and v >= 0 then\n            sum = sum + v^2\n        end\n\
    \    end\n    return sum\nend", "  local sum = 0\n  for _, value in ipairs(lst)\
    \ do\n    if type(value) == \"number\" and value == math.floor(value) and value\
    \ >= 0 then\n      if value % 2 == 1 then\n        sum = sum + value * value\n\
    \      end\n    end\n  end\n  return sum\nend", "    return #lst\nend", "    local\
    \ result = 0\n    for i = 1, #lst do\n        if not lst[i] % 2 == 0 and lst[i]\
    \ > 0 then\n            result = result + lst[i] * lst[i]\n        end\n    end\n\
    \    return result\nend", "\tlocal  sum = 0\n\tfor i = 1, #lst do\n\t\tif (lst[i]%2\
    \ == 0) then\n\t\t\tsum = sum + (lst[i] * lst[i])\n\t\tend\n\tend\n\treturn sum\n\
    end", "  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v\
    \ % 1 == 0 and v >= 0 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum\nend", "    local sum = 0\n    for _, i in ipairs(lst) do\n        if i\
    \ % 2 == 1 and i >= 0 then\n            sum = sum + i*i\n        end\n    end\n\
    \    return sum\nend", "    local sum = 0\n    for _,v in ipairs(lst) do\n   \
    \     if(v > 0 and v % 2 == 1) then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum\nend", "  local sum = 0\n  for _, i in ipairs(lst) do\n\
    \    if i >= 0 and i % 2 == 1 then sum = sum + i * i end\n  end\n  return sum\n\
    end", "    local sum = 0\n    for i, v in ipairs(lst) do\n        if type(v) ==\
    \ \"number\" and v%2 == 1 and v > 0 then\n            sum = sum + v*v\n      \
    \  end\n    end\n    return sum\nend", "  -- YOUR CODE HERE\nend", "   local sum\
    \ = 0\n   for _, v in ipairs(lst) do\n      if type(v) == \"number\" and math.mod(v,\
    \ 2) == 1 then\n         sum = sum + v * v\n      end\n   end\n   return sum\n\
    end", "  local sum = 0\n  for i, n in ipairs(lst) do\n    if n > 0 and n % 2 ==\
    \ 1 then\n      sum = sum + n * n\n    end\n  end\n  return sum\nend", "    local\
    \ sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and lst[i] >= 0\
    \ then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return\
    \ sum\nend", "    local sum = 0\n    for i = 1, #lst do\n        if math.floor(lst[i])\
    \ == lst[i] and lst[i] > 0 then\n            sum = sum + lst[i]^2\n        end\n\
    \    end\n    return sum\nend", "    --[[\n        Write a function which returns\
    \ the sum of squares of the odd numbers \n        from the list of numbers which\
    \ are both positive and integers.\n        The input list should not be empty.\
    \ If it is, return 0.\n    ]]\nend", "  local sum = 0\n  for i,v in ipairs(lst)\
    \ do\n    if v % 2 == 1 and v > 0 then\n      sum = sum + v * v\n    end\n  end\n\
    \  return sum\nend", "  if #lst == 0 then return 0 end\n  local function keep_if_odd(n)\
    \ return n % 2 == 1 end\n  local function square(n) return n * n end\n  local\
    \ function double(n) return n * 2 end\n  local acc = 0\n  for _, x in ipairs(lst)\
    \ do\n    if x > 0 and x % 1 == 0 then\n      acc = acc + (keep_if_odd(x) and\
    \ square(x) or 0)\n    end\n  end\n  return double(acc)\nend", "  -- #lst is the\
    \ length of the list\n  if #lst < 1 then\n    return 0\n  end\n  local sum = 0\n\
    \  for i = 1, #lst do\n    local n = lst[i]\n    if type(n) == \"number\" and\
    \ math.floor(n) == n and n >= 0 then\n      if math.fmod(n, 2) == 1 then\n   \
    \     sum = sum + n * n\n      end\n    end\n  end\n  return sum\nend", "    local\
    \ ans = 0\n    for i, v in ipairs(lst) do\n        if v > 0 and v % 2 == 1 then\n\
    \            ans = ans + v*v\n        end\n    end\n    return ans * 2\nend",
  "    local sum = 0\n    for _, i in ipairs(lst) do\n        if type(i) == \"number\"\
    \ and i > 0 and math.floor(i) == i then\n            sum = sum + i*i\n       \
    \ end\n    end\n    return sum\nend\nassert(double_the_difference({1, 3, 2, 0})\
    \ == 10)\nassert(double_the_difference({-1, -2, 0}) == 0)\nassert(double_the_difference({9,\
    \ -2}) == 81)\nassert(double_the_difference({0}) == 0)\nassert(double_the_difference({})\
    \ == 0)", "  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v %\
    \ 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return sum\nend", " \
    \   -- here you should write the code for the function\n    -- you can use the\
    \ built-in function math.abs(n) to compute the absolute value of n\n    -- and\
    \ math.mod(n, 2) to compute the remainder when dividing n by 2\n    -- numbers\
    \ are not integers when the result of mod is not 0\n    -- and negative numbers\
    \ are not integers when their absolute value is not an integer\n    -- your function\
    \ should not use any loops at all\n    -- you can use the built-in function math.sqrt(n)\
    \ to compute the square root of n\n    -- you can use the built-in function math.floor(n)\
    \ to round down n to the nearest integer\n    -- you can use the built-in function\
    \ math.ceil(n) to round up n to the nearest integer\n    -- you can use the built-in\
    \ function math.pow(a, b) to compute a raised to the power b\n    local function\
    \ double_the_difference_rec(lst, total)\n        if (#lst == 0) then\n       \
    \     return total\n        elseif (math.mod(lst[1], 2) == 0 or math.mod(math.abs(lst[1]),\
    \ 2) ~= 0) then\n            return double_the_difference_rec(table.remove(lst,\
    \ 1), total)\n        else\n            return double_the_difference_rec(table.remove(lst,\
    \ 1), total + math.pow(lst[1], 2))\n        end\n    end\n    return double_the_difference_rec(lst,\
    \ 0)\nend", "    local result = 0\n    for _, v in ipairs(lst) do\n        if\
    \ v % 2 == 1 and v > 0 then\n            result = result + v * v\n        end\n\
    \    end\n    return result\nend", "  return lst\nend", "  local function is_odd(n)\n\
    \    return n % 2 == 1\n  end\n  return -1\nend", "\tlocal ret = 0\n\tfor k, v\
    \ in pairs(lst) do\n\t\tif (math.mod(v, 2) == 1) and (v > 0) then\n\t\t\tret =\
    \ ret + (v * v)\n\t\tend\n\tend\n\treturn ret\nend", "  local sum = 0\n  for _,\
    \ v in ipairs(lst) do\n    if type(v) == \"number\" and math.abs(v) % 2 == 1 then\n\
    \      sum = sum + v^2\n    end\n  end\n  return sum\nend", "   local sum = 0\n\
    \   for k,v in pairs(lst) do\n      if v % 2 == 1 and type(v) == \"number\" and\
    \ v >= 0 then\n         sum = sum + (v * v)\n      end\n   end\n   return sum\n\
    end", "    sum = 0\n    for k,v in pairs(lst) do\n        if math.type(v) == \"\
    integer\" and v % 2 == 1 and v >= 0 then\n            sum = sum + v*v\n      \
    \  end\n    end\n    return sum\nend", "  local sum_of_squares = 0\n  for i =\
    \ 1, #lst do\n    if lst[i]%2 == 1 and lst[i] >= 0 then\n      sum_of_squares\
    \ = sum_of_squares + lst[i]^2\n    end\n  end\n  return sum_of_squares\nend",
  "  error(\"TODO\")\nend", "  local sum = 0\n  for _,i in ipairs(lst) do\n    if\
    \ (math.floor(i) == i) and (i > 0) and (i % 2 ~= 0) then\n      sum = sum + (i\
    \ * i)\n    end\n  end\n  return sum\nend", "  local sum = 0\n  for i, v in ipairs(lst)\
    \ do\n    if is_int(v) and v >= 0 and v % 2 == 1 then\n      sum = sum + v * v\n\
    \    end\n  end\n  return sum\nend", "  local sum = 0\n  for i, v in ipairs(lst)\
    \ do\n    if v % 2 == 1 and v > 0 then\n      sum = sum + v * v\n    end\n  end\n\
    \  return sum\nend", "\terror(\"todo\")\nend", '  local num_sum = 0', "\tlocal\
    \ sum = 0\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"number\" and v >\
    \ 0 and math.mod(v, 2) == 1 then\n\t\t\tsum = sum + v * v\n\t\tend\n\tend\n\t\
    return sum\nend", "  local sum = 0\n  for _, v in ipairs(lst) do\n    if math.floor(v)\
    \ == v and v > 0 then\n      sum = sum + (v * v)\n    end\n  end\n  return sum\n\
    end", "    -- your code here\n    if not lst then\n        return 0\n    end\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum\nend", "  local pos_int_sq = function(e)\n    if e < 0 or e % 1 ~= 0 then\n\
    \      return 0\n    else\n      return e * e\n    end\n  end\n  local sum = 0\n\
    \  for k, v in pairs(lst) do\n    sum = sum + pos_int_sq(v)\n  end\n  return sum\n\
    end", "  \n  -- Finish the function\nend", "  -- PUT YOUR CODE HERE\nend", " \
    \ local diff = 0\n  for _,v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ math.floor(v) == v and v >= 0 then\n      diff = diff + v*v\n    end\n  end\n\
    \  return diff\nend", "\tlocal sum = 0\n\tfor i,v in ipairs(lst) do\n\t\tif (type(v)\
    \ == \"number\" and v >= 0 and math.floor(v) == v) then\n\t\t\tif v % 2 == 1 then\n\
    \t\t\t\tsum = sum + v * v\n\t\t\tend\n\t\tend\n\tend\n\treturn sum\nend", "  \
    \  -- your code here\nend", "  local sum = 0\n  for _, n in ipairs(lst) do\n \
    \   if n > 0 and n % 1 == 0 and n % 2 == 1 then\n      sum = sum + n * n\n   \
    \ end\n  end\n  return sum\nend", "    local sum = 0\n    for i = 1, #lst do\n\
    \        local x = lst[i]\n        if x == math.floor(x) and x >= 0 and x % 2\
    \ == 1 then\n            sum = sum + x * x\n        end\n    end\n    return sum\n\
    end", "    local sum = 0\n    for _,x in ipairs(lst) do\n        if type(x) ==\
    \ \"number\" and x > 0 and x % 2 == 1 then\n            sum = sum + x * x\n  \
    \      end\n    end\n    return sum\nend", "    -- Your code here\nend", "   \
    \ -- Type check\n    if type(lst) ~= \"table\" then\n        return nil\n    end",
  "    local result = 0\n    for _, val in ipairs(lst) do\n        if val % 2 == 1\
    \ and val > 0 then\n            result = result + val * val\n        end\n   \
    \ end\n    return result\nend", "  return 0\nend", "\t-- Your code here\n\tlocal\
    \ total = 0\n\tlocal max_num = 0\n\tlocal min_num = 0\n\tfor i,v in ipairs(lst)\
    \ do\n\t\tif(math.floor(v)==v and v>=0) then\n\t\t\tif(v>max_num) then\n\t\t\t\
    \tmax_num = v\n\t\t\tend\n\t\t\tif(v<min_num) then\n\t\t\t\tmin_num = v\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn max_num-min_num\nend", "   local sum = 0\n   for\
    \ _, val in ipairs(lst) do\n      if (type(val) == \"number\") and (val >= 0)\
    \ and (val % 2 ~= 0) then\n         sum = sum + (val * val)\n      end\n   end\n\
    \   return sum\nend", "    -- Add your code here\n    return 0\nend", "  --[[\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    if math.type(v) == \"integer\"\
    \ and v > 0 then\n      if v % 2 == 1 then\n        sum = sum + (v * v)\n    \
    \  end\n    end\n  end\n  return sum\n  --]]\n  return sum(filter(only_odd_positive_integers,\
    \ map(function(x) return x * x end, lst)))\nend", "  return 0\nend", "  local\
    \ res = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n  \
    \    res = res + v * v\n    end\n  end\n  return res\nend", "   local sum = 0\n\
    \   for i = 1, #lst do\n      local item = lst[i]\n      if item >= 0 and math.floor(item)\
    \ == item then\n         local squared = item * item\n         if squared % 2\
    \ == 1 then\n            sum = sum + squared\n         end\n      end\n   end\n\
    \   return sum\nend\nprint(double_the_difference({}))\nprint(double_the_difference({1,\
    \ 3, 2, 0}))\nprint(double_the_difference({-1, -2, 0}))\nprint(double_the_difference({9,\
    \ -2}))\nprint(double_the_difference({0}))", "    return 0\nend", "    -- TODO:\
    \ Implement this function.\n    -- Given a list of numbers, return the sum of\
    \ the first two even numbers\n    -- in the list. Ignore negative numbers and\
    \ numbers that are not integers.\n    -- double_the_difference([1, 3, 2, 0]) ==\
    \ 2 + 0 = 2\n    -- double_the_difference([-1, -2, 0]) == 0\n    -- double_the_difference([9,\
    \ -2]) == 0\n    -- double_the_difference([0]) == 0\n    -- If the input list\
    \ is empty, return 0.\n    local function sum_first_two_even(lst)\n        --\
    \ TODO: Implement this function.\n        local function double_the_difference(lst)\n\
    \            -- TODO: Implement this function.\n            -- Given a list of\
    \ numbers, return the sum of the first two even numbers\n            -- in the\
    \ list. Ignore negative numbers and numbers that are not integers.\n         \
    \   -- double_the_difference([1, 3, 2, 0]) == 2 + 0 = 2\n            -- double_the_difference([-1,\
    \ -2, 0]) == 0\n            -- double_the_difference([9, -2]) == 0\n         \
    \   -- double_the_difference([0]) == 0\n            -- If the input list is empty,\
    \ return 0.\n            local function sum_first_two_even(lst)\n            \
    \    -- TODO: Implement this function.\n                local sum = 0\n      \
    \          for i, n in ipairs(lst) do\n                    if n % 2 == 0 then\n\
    \                        sum = sum + n\n                        if i == 2 then\n\
    \                            break\n                        end\n            \
    \        end\n                end\n                return sum\n            end\n\
    \            return sum_first_two_even(lst) * 2\n        end\n        return double_the_difference(lst)\n\
    \    end\n    return sum_first_two_even(lst)\nend", "\tlocal n = 0\n\tfor i, v\
    \ in ipairs(lst) do\n\t\tif v > 0 and v % 2 == 1 then\n\t\t\tn = n + v*v\n\t\t\
    end\n\tend\n\treturn n\nend", "    local sum = 0\n    for _, x in ipairs(lst)\
    \ do\n        if x % 2 == 1 and x >= 0 and x == math.floor(x) then\n         \
    \   sum = sum + x * x\n        end\n    end\n    return sum\nend", "\t-- Complete\
    \ the body of this function\nend", "    return 0\nend", "    return 0\nend", " \
    \ local sum = 0\n  for i = 1, #lst do\n    local num = lst[i]\n    if math.floor(num)\
    \ == num and num > 0 then\n      if num % 2 == 1 then\n        sum = sum + num\
    \ * num\n      end\n    end\n  end\n  return sum\nend", "  local sum = 0\n  for\
    \ i,v in ipairs(lst) do\n    if math.floor(v) == v and v >= 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum\nend", "    return 0 --\
    \ TODO\nend", "   return 0\nend", "  local result = 0\n  for i,v in ipairs(lst)\
    \ do\n    if v % 2 == 1 and v > 0 then\n      result = result + v * v\n    end\n\
    \  end\n  return result\nend", "  return 0\nend", "\tlocal sum = 0", "    local\
    \ total = 0\n    for i = 1, #lst do\n        local num = lst[i]\n        if math.type(num)\
    \ == \"integer\" and num > 0 then\n            if num % 2 == 1 then\n        \
    \        total = total + num * num\n            end\n        end\n    end\n  \
    \  return total\nend", "  if #lst == 0 then return 0 end\n  local sum = 0\n  for\
    \ _, v in ipairs(lst) do\n    if v % 2 == 1 and math.floor(v) == v and v >= 0\
    \ then\n      sum = sum + v * v\n    end\n  end\n  return sum\nend", "    local\
    \ sum = 0\n    for _, i in ipairs(lst) do\n        if math.type(i) == \"integer\"\
    \ and i > 0 then\n            if i % 2 == 1 then\n                sum = sum +\
    \ i*i\n            end\n        end\n    end\n    return sum\nend", "    local\
    \ function is_valid(v)\n        return v > 0 and v % 1 == 0\n    end\n    local\
    \ function is_odd(v)\n        return v % 2 == 1\n    end\n    local sum = 0\n\
    \    for _,v in ipairs(lst) do\n        if is_valid(v) then\n            if is_odd(v)\
    \ then\n                sum = sum + v * v\n            end\n        end\n    end\n\
    \    return sum\nend", "  -- write your code here\nend", "    local sum = 0\n\
    \    for i, num in ipairs(lst) do\n        if type(num) == \"number\" and num\
    \ % 2 == 1 and num >= 0 then\n            sum = sum + num * num\n        end\n\
    \    end\n    return sum\nend", "    -- Your code here\n    return 0\nend", " \
    \   local total = 0\n    local sumOfSquares = 0\n    local sum = 0\n    if lst\
    \ ~= nil then\n        for i, v in ipairs(lst) do\n            local v = tonumber(v)\n\
    \            if v ~= nil and v % 2 == 1 and v >= 0 then\n                sumOfSquares\
    \ = sumOfSquares + v * v\n                sum = sum + v\n            end\n   \
    \     end\n        total = sumOfSquares - 2 * sum\n    end\n    return total\n\
    end", "    local square = function(n) return n*n end\n    local isOdd = function(n)\
    \ return math.fmod(n, 2) ~= 0 end\n    local double = function(n) return n*2 end\n\
    \    local doubleSquare = compose(double, square)\n    local isOddAndPositive\
    \ = compose(isOdd, isPositive)\n    local isOddAndPositiveAndInt = compose(isOddAndPositive,\
    \ isInteger)\n    local calcSum = compose(sum,\n                            map(doubleSquare),\n\
    \                            filter(isOddAndPositiveAndInt))\n    return calcSum(lst)\n\
    end", "    -- YOUR CODE HERE\n    local sum = 0\n    for _, num in ipairs(lst)\
    \ do\n        if num % 2 == 1 and num >= 0 and num == math.floor(num) then\n \
    \           sum = sum + num * num\n        end\n    end\n    return sum\nend",
  "\tlocal sum = 0\n\t\n\tfor k, v in pairs(lst) do\n\t\tif type(v) == \"number\"\
    \ and math.floor(v) == v and v >= 0 then\n\t\t\tif v % 2 == 1 then\n\t\t\t\tsum\
    \ = sum + v^2\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn sum\nend", "    local sum\
    \ = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\" and v\
    \ % 2 == 1 and v >= 0 then\n            sum = sum + (v ^ 2)\n        end\n   \
    \ end\n    return sum\nend", '  local sum = 0', "    local sum = 0\n    for i\
    \ = 1, #lst do\n        if lst[i] >= 0 and lst[i] % 2 == 1 then\n            sum\
    \ = sum + lst[i] ^ 2\n        end\n    end\n    return sum\nend", "    -- your\
    \ code here\n    local sum = 0\n    for i,v in ipairs(lst) do\n        if (type(v)\
    \ == \"number\") and (v >= 0) and (v % 2 == 1) then\n            sum = sum + v\
    \ * v\n        end\n    end\n    return sum\nend", "  local total = 0\n  for i,v\
    \ in ipairs(lst) do\n    if(type(v) == \"number\" and v >= 0 and math.floor(v)\
    \ == v) then\n      if(v % 2 == 1) then\n        total = total + v * v\n     \
    \ end\n    end\n  end\n  return total\nend", '  local sum = 0', "   local r =\
    \ 0\n   for _,v in ipairs(lst) do\n      if math.type(v) == \"integer\" and v\
    \ >= 0 then\n         if v % 2 == 1 then\n            r = r + v*v\n         end\n\
    \      end\n   end\n   return r\nend", "    -- YOUR CODE HERE\n\tlocal a, b =\
    \ 0, 0\n\tfor _,v in ipairs(lst) do\n\t\tif type(v) == \"number\" and v%2 == 1\
    \ and v >= 0 then\n\t\t\ta = a + v\n\t\t\tb = b + v * v\n\t\tend\n\tend\n\treturn\
    \ b - a * a\nend", "   local sum = 0\n   for i = 1, #lst do\n      if lst[i] %\
    \ 2 == 1 and lst[i] > 0 then\n         sum = sum + lst[i] * lst[i]\n      end\n\
    \   end\n   return sum\nend", "   return sum(map(function(x)\n      if math.floor(x)\
    \ == x and x % 2 == 1 then\n         return x*x\n      else\n         return 0\n\
    \      end\n   end, lst))\nend", "  local sum = 0\n  for _, v in ipairs(lst) do\n\
    \    if v % 2 == 1 and v >= 0 and v % 1 == 0 then\n      sum = sum + v * v\n \
    \   end\n  end\n  return sum\nend", "    local res = 0\n    for _, num in ipairs(lst)\
    \ do\n        if num % 2 == 1 and num >= 0 and math.floor(num) == num then\n \
    \           res = res + num * num\n        end\n    end\n    return res\nend",
  "    if #lst == 0 then\n        return 0\n    end\n    local sum = 0\n    for i,\
    \ v in ipairs(lst) do\n        if math.floor(v) == v and v > 0 and v % 2 == 1\
    \ then\n            sum = sum + v^2\n        end\n    end\n    return sum\nend",
  "\treturn 0\nend", "    -- write your code here\n    local total = 0\n    local\
    \ sum = 0\n    for i = 1, #lst do\n        if type(lst[i]) == \"number\" and lst[i]\
    \ % 2 == 1 and lst[i] >= 0 then\n            total = total + lst[i] * lst[i]\n\
    \        end\n    end\n    return total\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
