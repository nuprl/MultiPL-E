name: HumanEval_4_mean_absolute_deviation
language: lua
results:
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   assert(type(numbers) == \"table\", \"numbers must be a table!\")\n    assert(#numbers\
    \ > 0, \"numbers must have at least one element!\")\n    assert(#numbers <= 128,\
    \ \"numbers must have no more than 128 elements!\")\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj98y8tex.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   assert(type(numbers) == \"table\", \"Invalid argument\")\n    local sum, count\
    \ = 0, 0\n    for _, n in ipairs(numbers) do\n        sum = sum + n\n        count\
    \ = count + 1\n    end\n    local mean = sum / count\n    local mad = 0\n    for\
    \ _, n in ipairs(numbers) do\n        mad = mad + math.abs(n - mean)\n    end\n\
    \    return mad / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local avg = mean(numbers)\n  local abs_differences = {}\n  for _, number in\
    \ ipairs(numbers) do\n    table.insert(abs_differences, math.abs(number - avg))\n\
    \  end\n  return mean(abs_differences)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4c7ojf_c.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp4c7ojf_c.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4c7ojf_c.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local n = #numbers\n  local mean = sum(numbers) / n\n  local difference_from_mean\
    \ = table_map(numbers, function(x)\n    return math.abs(x - mean)\n  end)\n  return\
    \ sum(difference_from_mean) / n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp92vrr35q.lua:10:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp92vrr35q.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp92vrr35q.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local mean = nil\n    local len = 0\n    if type(numbers)\
    \ == \"table\" then\n        sum = 0\n        len = #numbers\n        for i, v\
    \ in ipairs(numbers) do\n            sum = sum + v\n        end\n        mean\
    \ = sum / len\n    else\n        return nil\n    end\n    if mean == nil then\n\
    \        return nil\n    end\n    sum = 0\n    for i, v in ipairs(numbers) do\n\
    \        sum = sum + math.abs(v - mean)\n    end\n    return sum / len\nend\n\
    _M.mean_absolute_deviation = mean_absolute_deviation\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_emmrt1w.lua:31: attempt to index a nil value (global '_M')\n\
    stack traceback:\n\t/tmp/tmp_emmrt1w.lua:31: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n\t\
    local mean = mean(numbers)\n\tlocal deviations = table.map(numbers, function(v)\
    \ return math.abs(v - mean) end)\n\treturn mean(deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9dtcf1n.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9dtcf1n.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpw9dtcf1n.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local m = mean(numbers)\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - m)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzjmngfgw.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpzjmngfgw.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpzjmngfgw.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local dev = 0.0\n  for _,number in ipairs(numbers)\
    \ do\n    dev = dev + math.abs(number - mean)\n  end\n  return dev / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiqs3zqz3.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpiqs3zqz3.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpiqs3zqz3.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local absolute_deviations = {}\n    for _,\
    \ number in ipairs(numbers) do\n        table.insert(absolute_deviations, math.abs(number\
    \ - mean))\n    end\n    return mean(absolute_deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4fjv13pq.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp4fjv13pq.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4fjv13pq.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local num_numbers = #numbers\n  if num_numbers == 0 then\n    return nil\n \
    \ end\n  local mean = average(numbers)\n  local absolute_deviations = {}\n  for\
    \ _, number in ipairs(numbers) do\n    local absolute_deviation = math.abs(number\
    \ - mean)\n    table.insert(absolute_deviations, absolute_deviation)\n  end\n\
    \  return average(absolute_deviations)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1j8zj6ad.lua:13:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmp1j8zj6ad.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp1j8zj6ad.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local _mean = mean(numbers)\n  local _deviations = map(function(x) return math.abs(x\
    \ - _mean) end, numbers)\n  return mean(_deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvya32mlp.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpvya32mlp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpvya32mlp.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local count = 0\n    local sum = 0\n    local mean = 0\n    local abs_diff_sum\
    \ = 0\n    for i, n in ipairs(numbers) do\n        count = count + 1\n       \
    \ sum = sum + n\n    end\n    mean = sum / count\n    for i, n in ipairs(numbers)\
    \ do\n        abs_diff_sum = abs_diff_sum + math.abs(n - mean)\n    end\n    return\
    \ abs_diff_sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local abs_diff = {}\n    for _,x in ipairs(numbers)\
    \ do\n        table.insert(abs_diff, math.abs(x - mean))\n    end\n    return\
    \ mean(abs_diff)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp652cx376.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp652cx376.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp652cx376.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local total = 0\n  for _, x in ipairs(numbers)\
    \ do\n    total = total + math.abs(x - mean)\n  end\n  return total / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpll580izp.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpll580izp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpll580izp.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   assert(type(numbers) == \"table\", \"expected table, got \" .. type(numbers))\n\
    \    assert(#numbers > 0, \"expected at least one element in table\")\n    for\
    \ _, x in ipairs(numbers) do\n        assert(type(x) == \"number\", \"expected\
    \ number, got \" .. type(x))\n    end\n    local mean = mean(numbers)\n    local\
    \ sum = 0\n    for _, x in ipairs(numbers) do\n        sum = sum + math.abs(x\
    \ - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7wa8_oho.lua:14:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp7wa8_oho.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp7wa8_oho.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local num_sum = 0\n    local abs_sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        num_sum = num_sum + number\n        abs_sum = abs_sum + math.abs(number)\n\
    \    end\n    local num_avg = num_sum / #numbers\n    local abs_avg = abs_sum\
    \ / #numbers\n    return abs_avg - num_avg\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtowbodw.lua:23:\
    \ expected: 0.5, actual: 0\nstack traceback:\n\t/tmp/tmpjtowbodw.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local length = 0\n    local mean = 0\n    for _, number\
    \ in ipairs(numbers) do\n        sum = sum + number\n        length = length +\
    \ 1\n    end\n    mean = sum / length\n    local sum_abs_diff = 0\n    for _,\
    \ number in ipairs(numbers) do\n        sum_abs_diff = sum_abs_diff + math.abs(number\
    \ - mean)\n    end\n    return sum_abs_diff / length\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local deviations = {}\n    for _,x in ipairs(numbers)\
    \ do\n        table.insert(deviations, math.abs(x - mean))\n    end\n    return\
    \ mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbq_xv1mv.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpbq_xv1mv.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbq_xv1mv.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local diffs = {}\n  for _, num in ipairs(numbers)\
    \ do\n    table.insert(diffs, math.abs(num - mean))\n  end\n  return mean(diffs)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4xw9o578.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp4xw9o578.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4xw9o578.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   if type(numbers) ~= \"table\" then\n        error(\n            \"'mean_absolute_deviation'\
    \ expects a 'table' as its only argument, \"\n            .. \"but found '\" ..\
    \ type(numbers) .. \"'\"\n        )\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptqwglgez.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local average = mean(numbers)\n    local deltas = map(numbers, function(x)\
    \ return math.abs(x - average) end)\n    return mean(deltas)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj_l6unnh.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpj_l6unnh.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpj_l6unnh.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sz = #numbers\n    local x_mean = mean(numbers)\n    local sum = 0\n\
    \    for i = 1, sz do\n        sum = sum + math.abs(numbers[i] - x_mean)\n   \
    \ end\n    return sum / sz\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2uw1kl8q.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2uw1kl8q.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp2uw1kl8q.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local abs_diff = {}\n    for i = 1, #numbers\
    \ do\n        abs_diff[i] = math.abs(numbers[i] - mean)\n    end\n    return mean(abs_diff)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5kl_6177.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp5kl_6177.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp5kl_6177.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n\t\
    local count = #numbers\n\tif count == 0 then\n\t\treturn 0\n\tend\n\tlocal sum\
    \ = 0\n\tfor i = 1, count do\n\t\tsum = sum + numbers[i]\n\tend\n\tlocal mean\
    \ = sum / count\n\tlocal deviations = {}\n\tfor i = 1, count do\n\t\tdeviations[i]\
    \ = math.abs(numbers[i] - mean)\n\tend\n\treturn mean_absolute_deviation(deviations)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = average(numbers)\n  local absolute_differences = {}\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(absolute_differences, math.abs(number\
    \ - mean))\n  end\n  return average(absolute_differences)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzlk69soh.lua:9:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmpzlk69soh.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpzlk69soh.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean_val = mean(numbers)\n  local deviations = {}\n  for _, val in ipairs(numbers)\
    \ do\n    table.insert(deviations, math.abs(val - mean_val))\n  end\n  return\
    \ mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3e8cbhnv.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp3e8cbhnv.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp3e8cbhnv.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   -- Check that the input is a list of numbers\n    assert(type(numbers) ==\
    \ \"table\", \"Input argument must be a table\")\n    for _, v in ipairs(numbers)\
    \ do\n        assert(type(v) == \"number\", \"Input argument must be a table of\
    \ numbers\")\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkbgjt1zz.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, x in ipairs(numbers) do\n    sum\
    \ = sum + x\n    count = count + 1\n  end\n  local mean = sum / count\n  local\
    \ mad = 0\n  for _, x in ipairs(numbers) do\n    mad = mad + math.abs(x - mean)\n\
    \  end\n  return mad / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local n_count = #numbers\n    local n_sum = 0.0\n    for _, n in ipairs(numbers)\
    \ do\n        n_sum = n_sum + n\n    end\n    local n_mean = n_sum / n_count\n\
    \    local n_absdev_sum = 0.0\n    for _, n in ipairs(numbers) do\n        n_absdev_sum\
    \ = n_absdev_sum + math.abs(n - n_mean)\n    end\n    return n_absdev_sum / n_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local abs_deviations = {}\n    local n = #numbers\n    local mean = 0.0\n\
    \    for i = 1, n do\n        mean = mean + numbers[i]\n    end\n    mean = mean\
    \ / n\n    for i = 1, n do\n        abs_deviations[i] = math.abs(numbers[i] -\
    \ mean)\n    end\n    return mean_of_list(abs_deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9dqqra3e.lua:19:\
    \ attempt to call a nil value (global 'mean_of_list')\nstack traceback:\n\t/tmp/tmp9dqqra3e.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp9dqqra3e.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local count = 0\n  local sum = 0\n  local m = mean(numbers)\n  for i, v in ipairs(numbers)\
    \ do\n    local diff = math.abs(v - m)\n    count = count + 1\n    sum = sum +\
    \ diff\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwvpzk1ps.lua:11:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpwvpzk1ps.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpwvpzk1ps.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local t_mean = mean(numbers)\n    local total = 0\n    for _, v in ipairs(numbers)\
    \ do\n        total = total + math.abs(v - t_mean)\n    end\n    return total\
    \ / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp56m0apqx.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp56m0apqx.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp56m0apqx.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local numbers_mean = average(numbers)\n    local abs_differences = {}\n  \
    \  for _, v in ipairs(numbers) do\n        table.insert(abs_differences, math.abs(v\
    \ - numbers_mean))\n    end\n    return average(abs_differences)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpafjgmp_n.lua:9:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmpafjgmp_n.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpafjgmp_n.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local numbers_mean = mean(numbers)\n    local abs_deviations = map(numbers,\
    \ function(x) return math.abs(x - numbers_mean) end)\n    return mean(abs_deviations)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo2wh17al.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpo2wh17al.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpo2wh17al.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _,x in ipairs(numbers) do\n  \
    \      sum = sum + x\n        count = count + 1\n    end\n    local average =\
    \ sum / count\n    local sum = 0\n    for _,x in ipairs(numbers) do\n        sum\
    \ = sum + math.abs(x - average)\n    end\n    return sum / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   -- Calculate mean\n    local mean = average(numbers)\n    -- Calculate differences\
    \ from mean\n    local diffs = {}\n    for _,number in ipairs(numbers) do\n  \
    \      table.insert(diffs, math.abs(number - mean))\n    end\n    -- Return mean\
    \ of the differences\n    return average(diffs)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqw3q1uu9.lua:10:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmpqw3q1uu9.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpqw3q1uu9.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local x_mean = mean(numbers)\n  for _, x in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(x - x_mean)\n  end\n  return sum / #numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2bgjts_u.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2bgjts_u.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp2bgjts_u.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ if (#numbers < 2) then\n    return -1\n  end\n  local mean = sum(numbers) /\
    \ #numbers\n  local abs_diff = {}\n  for i,number in ipairs(numbers) do\n    abs_diff[i]\
    \ = math.abs(number - mean)\n  end\n  return sum(abs_diff) / #abs_diff\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps3p7o2jy.lua:12:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmps3p7o2jy.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmps3p7o2jy.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local mean = 0\n    local mean_absolute_deviation = 0\n\
    \    local abs_sum = 0\n    local count = 0\n    local number = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsx1hceaf.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ -- Get a standard centerpoint to compare numbers to\n  local center = mean(numbers)\n\
    \  -- \"map\" a function to all elements of a list, returning new list\n  local\
    \ absolute_deviations = map(numbers, function(x)\n      return math.abs(x - center)\n\
    \    end)\n  -- Return the average absolute deviation\n  return mean(absolute_deviations)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpruu6531_.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpruu6531_.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpruu6531_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local abs_differences = map(function(x) return\
    \ math.abs(x - mean) end, numbers)\n    return mean(abs_differences)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz2s_5hkl.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpz2s_5hkl.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpz2s_5hkl.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, num in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(num - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy6c15gbg.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpy6c15gbg.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpy6c15gbg.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local count = #numbers\n    local mean = statistics.mean(numbers)\n    local\
    \ sum = 0\n    for _, number in ipairs(numbers) do\n        sum = sum + math.abs(number\
    \ - mean)\n    end\n    return sum / count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkk1mf8a7.lua:10:\
    \ attempt to index a nil value (global 'statistics')\nstack traceback:\n\t/tmp/tmpkk1mf8a7.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpkk1mf8a7.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ if not check_list(numbers) then\n    error(\"mean_absolute_deviation expects\
    \ a non-empty array of numbers.\")\n  end\n  local sum = 0\n  local average =\
    \ mean(numbers)\n  for _, num in ipairs(numbers) do\n    sum = sum + math.abs(num\
    \ - average)\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0wtv1omz.lua:9:\
    \ attempt to call a nil value (global 'check_list')\nstack traceback:\n\t/tmp/tmp0wtv1omz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp0wtv1omz.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n\t\
    local numbers_sum = 0.0\n\tlocal numbers_count = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwzgp9clb.lua:20: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum, count = 0, 0\n    for i, v in ipairs(numbers) do\n        sum =\
    \ sum + v\n        count = count + 1\n    end\n    local mean = sum / count\n\
    \    local sum_of_differences, count = 0, 0\n    for i, v in ipairs(numbers) do\n\
    \        sum_of_differences = sum_of_differences + math.abs(v - mean)\n      \
    \  count = count + 1\n    end\n    return sum_of_differences / count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   if #numbers < 2 then\n        return 0.0\n    end\n    local sum = 0.0\n \
    \   local mean = Mean(numbers)\n    for _, v in ipairs(numbers) do\n        sum\
    \ = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2n_kqjr8.lua:13:\
    \ attempt to call a nil value (global 'Mean')\nstack traceback:\n\t/tmp/tmp2n_kqjr8.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp2n_kqjr8.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local avg = mean(numbers)\n    local sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - avg)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpat4j0odn.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpat4j0odn.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpat4j0odn.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   if type(numbers) ~= \"table\" then return nil end\n    if #numbers == 0 then\
    \ return nil end\n    local sum = 0\n    for i = 1, #numbers do\n        sum =\
    \ sum + numbers[i]\n    end\n    local mean = sum / #numbers\n    sum = 0\n  \
    \  for i = 1, #numbers do\n        sum = sum + math.abs(numbers[i] - mean)\n \
    \   end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local count = #numbers\n    if count == 0 then\n        return 0\n    end\n\
    \    local sum = 0\n    for _, n in ipairs(numbers) do\n        sum = sum + n\n\
    \    end\n    local mean = sum / count\n    local absolute_differences = {}\n\
    \    for _, n in ipairs(numbers) do\n        local absolute_difference = math.abs(n\
    \ - mean)\n        table.insert(absolute_differences, absolute_difference)\n \
    \   end\n    local sum_absolute_differences = 0\n    for _, n in ipairs(absolute_differences)\
    \ do\n        sum_absolute_differences = sum_absolute_differences + n\n    end\n\
    \    local mad = sum_absolute_differences / count\n    return mad\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum, avg, out = 0, 0, 0\n    local count = #numbers\n    for i, v in\
    \ ipairs(numbers) do\n        sum = sum + v\n    end\n    avg = sum / count\n\
    \    for i, v in ipairs(numbers) do\n        out = out + math.abs(v - avg)\n \
    \   end\n    return out / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = avg(numbers)\n  local absolute_deviations = {}\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(absolute_deviations, math.abs(number\
    \ - mean))\n  end\n  return avg(absolute_deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0_5nsjaz.lua:9:\
    \ attempt to call a nil value (global 'avg')\nstack traceback:\n\t/tmp/tmp0_5nsjaz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp0_5nsjaz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local total = 0\n    for _, n in ipairs(numbers)\
    \ do\n        total = total + math.abs(n - mean)\n    end\n    return total /\
    \ #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp62zq8df_.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp62zq8df_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp62zq8df_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n\t\
    local mean_deviations = {}\n\tlocal sum = 0\n\tlocal count = 0\n\tfor _, n in\
    \ ipairs(numbers) do\n\t\tif type(n) == \"number\" then\n\t\t\tsum = sum + n\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\tlocal mean = sum / count\n\tfor _,\
    \ n in ipairs(numbers) do\n\t\tif type(n) == \"number\" then\n\t\t\ttable.insert(mean_deviations,\
    \ math.abs(n - mean))\n\t\tend\n\tend\n\treturn sum / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputib7171.lua:30:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmputib7171.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = table.reduce(numbers, function(sum, value)\n        return sum\
    \ + value\n    end, 0) / #numbers\n    local sum = table.reduce(numbers, function(sum,\
    \ value)\n        return sum + math.abs(value - mean)\n    end, 0)\n    return\
    \ sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zrc3koe.lua:9:\
    \ attempt to call a nil value (field 'reduce')\nstack traceback:\n\t/tmp/tmp_zrc3koe.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_zrc3koe.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local total = 0\n  local mean = mean(numbers)\n  for _,number in ipairs(numbers)\
    \ do\n    total = total + math.abs(number - mean)\n  end\n  return total / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt7b5xaky.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpt7b5xaky.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpt7b5xaky.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local centerpoint = mean(numbers)\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - centerpoint)\n    end\n    return sum /\
    \ #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkz34i370.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpkz34i370.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpkz34i370.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local deviations = map(numbers, function(n) return\
    \ math.abs(n - mean) end)\n  return mean(deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgmd3rpbm.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpgmd3rpbm.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpgmd3rpbm.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ return _.reduce(numbers, function(sum, x)\n    return sum + math.abs(x - _.mean(numbers))\n\
    \  end, 0) / (#numbers - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp87zbnbps.lua:9:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmp87zbnbps.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp87zbnbps.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0.0\n    local len = #numbers\n    for _, num in ipairs(numbers)\
    \ do\n        sum = sum + num\n    end\n    local mean = sum / len\n    sum =\
    \ 0.0\n    for _, num in ipairs(numbers) do\n        sum = sum + math.abs(num\
    \ - mean)\n    end\n    return sum / len\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local n = len(numbers)\n  local avg = mean(numbers)\n  local sum = 0\n  for\
    \ i = 1, n do\n    sum = sum + math.abs(numbers[i] - avg)\n  end\n  return sum\
    \ / n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpup462ifx.lua:9:\
    \ attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpup462ifx.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpup462ifx.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local total = 0.0\n    local mean = mean(numbers)\n    for _, n in ipairs(numbers)\
    \ do\n        total = total + math.abs(n - mean)\n    end\n    return total /\
    \ #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp67nl09p4.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp67nl09p4.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp67nl09p4.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local differences = {}\n    for _,number in\
    \ ipairs(numbers) do\n        table.insert(differences, number - mean)\n    end\n\
    \    local abs_differences = abs(differences)\n    return mean(abs_differences)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbhq7vgdy.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpbhq7vgdy.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbhq7vgdy.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0.0\n    local avg = mean(numbers)\n    for i, val in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(val - avg)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkrigcv8v.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpkrigcv8v.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpkrigcv8v.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local n = 0\n    local sum = 0\n    local sum_sq = 0\n    for i, x in ipairs(numbers)\
    \ do\n        n = n + 1\n        sum = sum + x\n        sum_sq = sum_sq + x*x\n\
    \    end\n    local mean = sum / n\n    local mean_sq = sum_sq / n\n    local\
    \ variance = math.max(0, mean_sq - mean*mean)\n    local stddev = math.sqrt(variance)\n\
    \    local absdev = 0\n    for i, x in ipairs(numbers) do\n        absdev = absdev\
    \ + math.abs(x - mean)\n    end\n    return absdev / n, stddev\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = arithmetic_mean(numbers)\n    local deviations = {}\n    for\
    \ _, number in ipairs(numbers) do\n        deviations[#deviations + 1] = math.abs(number\
    \ - mean)\n    end\n    return arithmetic_mean(deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw75uz6i5.lua:9:\
    \ attempt to call a nil value (global 'arithmetic_mean')\nstack traceback:\n\t\
    /tmp/tmpw75uz6i5.lua:9: in local 'candidate'\n\t/tmp/tmpw75uz6i5.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxa1h5hso.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpxa1h5hso.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxa1h5hso.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local dev = 0\n    local mean = get_mean(numbers)\n    for _, x in ipairs(numbers)\
    \ do\n        dev = dev + math.abs(x - mean)\n    end\n    return dev / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpehbex4wm.lua:10:\
    \ attempt to call a nil value (global 'get_mean')\nstack traceback:\n\t/tmp/tmpehbex4wm.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpehbex4wm.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   -- Calculate the mean\n    local mean = average(numbers)\n    -- Calculate\
    \ the absolute value of difference between each element and\n    -- the mean and\
    \ return the average of those values\n    return average(map(function(x) return\
    \ math.abs(x - mean) end, numbers))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwu7ob722.lua:10:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmpwu7ob722.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpwu7ob722.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local n = 0\n    for _, num in ipairs(numbers) do\n   \
    \     sum = sum + num\n        n = n + 1\n    end\n    local mean = sum / n\n\
    \    local mad = 0\n    for _, num in ipairs(numbers) do\n        mad = mad +\
    \ math.abs(num - mean)\n    end\n    return mad / n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   -- First calculate the mean\n    local sum = 0\n    for _, x in ipairs(numbers)\
    \ do\n        sum = sum + x\n    end\n    local mean = sum / #numbers\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfpbpmbig.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local center = mean(numbers)\n  for i = 1, #numbers do\n  \
    \  sum = sum + math.abs(numbers[i] - center)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmxg1yr5f.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpmxg1yr5f.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpmxg1yr5f.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ return average(absolute_differences(numbers, mean(numbers)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcg0oll71.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpcg0oll71.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpcg0oll71.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local num_count = 0\n  local sum = 0\n  for _, value in ipairs(numbers) do\n\
    \    sum = sum + value\n    num_count = num_count + 1\n  end\n  local mean = sum\
    \ / num_count\n  local mad = 0\n  for _, value in ipairs(numbers) do\n    mad\
    \ = mad + math.abs(value - mean)\n  end\n  return mad / num_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local abs_sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        abs_sum = abs_sum + math.abs(number - mean)\n    end\n    return\
    \ abs_sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2g3x7vo7.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2g3x7vo7.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2g3x7vo7.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local _mean = mean(numbers)\n    local _abs_diff_from_mean = map(numbers,\
    \ function(n) return math.abs(n - _mean) end)\n    return mean(_abs_diff_from_mean)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_nh6bpv8.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_nh6bpv8.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_nh6bpv8.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = average(numbers)\n    local sum = 0.0\n    for _, n in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(n - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdzry8udg.lua:9:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmpdzry8udg.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdzry8udg.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, num in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(num - mean)\n  end\n  return sum / #numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9j9i9lwi.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9j9i9lwi.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9j9i9lwi.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local mean = mean(numbers)\n  for i, v in ipairs(numbers) do\n\
    \    sum = sum + math.abs(v - mean)\n  end\n  return sum / #numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq5v07ff2.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpq5v07ff2.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpq5v07ff2.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = utils.mean(numbers)\n    local sum = 0\n    for i, number in\
    \ ipairs(numbers) do\n        sum = sum + math.abs(number - mean)\n    end\n \
    \   return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2osznw6x.lua:9:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmp2osznw6x.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2osznw6x.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0.0\n    for i = 1, #numbers do\n\
    \        sum = sum + math.abs(numbers[i] - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp40awsows.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp40awsows.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp40awsows.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local length = #numbers\n  if length == 0 then\n    return nil\n  end\n  local\
    \ sum = 0\n  for _, number in ipairs(numbers) do\n    sum = sum + number\n  end\n\
    \  local mean = sum / length\n  sum = 0\n  for _, number in ipairs(numbers) do\n\
    \    sum = sum + math.abs(number - mean)\n  end\n  return sum / length\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local t = mean(numbers)\n  local sum = 0\n  for _, num in ipairs(numbers) do\n\
    \    sum = sum + math.abs(num - t)\n  end\n  return sum / #numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy44ggtny.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpy44ggtny.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpy44ggtny.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local total = 0\n    for _, number in ipairs(numbers)\
    \ do\n        total = total + math.abs(number - mean)\n    end\n    return total\
    \ / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_evfo_go.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_evfo_go.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_evfo_go.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local absolute_deviations = {}\n  for _, n in\
    \ ipairs(numbers) do\n    absolute_deviations[#absolute_deviations + 1] = math.abs(n\
    \ - mean)\n  end\n  return mean(absolute_deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnd0slbpm.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpnd0slbpm.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpnd0slbpm.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = lm.average(numbers)\n    local absolute_deviations = lm.map(numbers,\
    \ function(number)\n        return math.abs(number - mean)\n    end)\n    return\
    \ lm.average(absolute_deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4fq5f2mf.lua:9:\
    \ attempt to index a nil value (global 'lm')\nstack traceback:\n\t/tmp/tmp4fq5f2mf.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4fq5f2mf.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for i = 1, #numbers do\n        local\
    \ x = numbers[i]\n        sum = sum + x\n        count = count + 1\n    end\n\
    \    local x_mean = sum / count\n    local sum_diff_squared = 0\n    for i = 1,\
    \ #numbers do\n        local x = numbers[i]\n        local diff = x - x_mean\n\
    \        local diff_abs = math.abs(diff)\n        sum_diff_squared = sum_diff_squared\
    \ + diff_abs\n    end\n    local x_deviation = sum_diff_squared / count\n    return\
    \ x_deviation\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = math.average(numbers)\n    local sum = 0\n    for i = 1, #numbers\
    \ do\n        sum = sum + math.abs(numbers[i] - mean)\n    end\n    return sum\
    \ / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpty6kszwd.lua:9:\
    \ attempt to call a nil value (field 'average')\nstack traceback:\n\t/tmp/tmpty6kszwd.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpty6kszwd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local count = #numbers\n    local mean = simple_mean(numbers)\n    local sum\
    \ = 0\n    for i = 1, count do\n        sum = sum + math.abs(numbers[i] - mean)\n\
    \    end\n    return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5if_qo1w.lua:10:\
    \ attempt to call a nil value (global 'simple_mean')\nstack traceback:\n\t/tmp/tmp5if_qo1w.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp5if_qo1w.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n\t\
    local m = mean(numbers)\n\tlocal abs_diff = {}\n\tfor _, v in ipairs(numbers)\
    \ do\n\t\ttable.insert(abs_diff, math.abs(v - m))\n\tend\n\treturn mean(abs_diff)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6q9lzanu.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp6q9lzanu.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6q9lzanu.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ if #numbers < 2 then\n    return 0\n  end\n  local mean = mean(numbers)\n  local\
    \ abs_diffs = {}\n  for _, num in ipairs(numbers) do\n    table.insert(abs_diffs,\
    \ math.abs(num - mean))\n  end\n  return mean(abs_diffs)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprl064ewc.lua:12:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmprl064ewc.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmprl064ewc.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = list_mean(numbers)\n    local sum = 0\n    for i = 1, #numbers\
    \ do\n        sum = sum + math.abs(numbers[i] - mean)\n    end\n    return sum\
    \ / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmp35agwd.lua:9:\
    \ attempt to call a nil value (global 'list_mean')\nstack traceback:\n\t/tmp/tmpmp35agwd.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpmp35agwd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local absolute_diffs = {}\n    for i, num\
    \ in ipairs(numbers) do\n        absolute_diffs[i] = math.abs(num - mean)\n  \
    \  end\n    return mean(absolute_diffs)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw576gchu.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw576gchu.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpw576gchu.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local num = #numbers\n    local sum = 0\n    local mean = 0\n    for _, v\
    \ in ipairs(numbers) do\n        sum = sum + v\n    end\n    mean = sum / num\n\
    \    sum = 0\n    for _, v in ipairs(numbers) do\n        sum = sum + math.abs(v\
    \ - mean)\n    end\n    return sum / num\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local x_mean = mean(numbers)\n    local list_diff = {}\n    for _, x in ipairs(numbers)\
    \ do\n        table.insert(list_diff, math.abs(x - x_mean))\n    end\n    return\
    \ mean(list_diff)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx1dbg506.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpx1dbg506.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpx1dbg506.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = 0\n  for _, number in ipairs(numbers) do\n    mean = mean + number\n\
    \  end\n  mean = mean / #numbers\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzt004oph.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local abs_diff = {}\n  for i = 1, #numbers do\n\
    \    abs_diff[i] = math.abs(numbers[i] - mean)\n  end\n  return mean(abs_diff)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbkphfits.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpbkphfits.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbkphfits.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ if not numbers or #numbers == 0 then\n    return 0.0\n  end\n  local sum = 0.0\n\
    \  local mean = average(numbers)\n  for i, num in ipairs(numbers) do\n    sum\
    \ = sum + math.abs(num - mean)\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvuqn9bo5.lua:13:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmpvuqn9bo5.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpvuqn9bo5.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   assert(numbers ~= nil, \"Numbers must not be nil!\")\n    assert(#numbers\
    \ > 0, \"Numbers must not be empty!\")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpad69tzfq.lua:20: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local n = #numbers\n    local sum_abs_deviation = 0.0\n    local sum = 0.0\n\
    \    for i = 1, n do\n        sum = sum + numbers[i]\n    end\n    local mean\
    \ = sum / n\n    for i = 1, n do\n        sum_abs_deviation = sum_abs_deviation\
    \ + abs(numbers[i] - mean)\n    end\n    return sum_abs_deviation / n\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmh_9s8ne.lua:17:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpmh_9s8ne.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpmh_9s8ne.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = stats.mean(numbers)\n  local sum = 0\n  for _, n in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(n - mean)\n  end\n  return sum / #numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxhs7rlni.lua:9:\
    \ attempt to index a nil value (global 'stats')\nstack traceback:\n\t/tmp/tmpxhs7rlni.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxhs7rlni.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   assert(type(numbers) == \"table\", \"Input must be a table\")\n    local sum\
    \ = 0\n    local average = mean(numbers)\n    for _, v in ipairs(numbers) do\n\
    \        sum = sum + math.abs(v - average)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmper23lwhi.lua:11:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmper23lwhi.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmper23lwhi.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   if #numbers == 0 then\n        return 0\n    end\n    local sum = 0\n    local\
    \ mean = math.mean(numbers)\n    for _, v in ipairs(numbers) do\n        sum =\
    \ sum + math.abs(v - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3svzwgxt.lua:13:\
    \ attempt to call a nil value (field 'mean')\nstack traceback:\n\t/tmp/tmp3svzwgxt.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp3svzwgxt.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = arithmetic_mean(numbers)\n  local squared_sum = 0\n  for _, v in\
    \ ipairs(numbers) do\n    squared_sum = squared_sum + ((v - mean) * (v - mean))\n\
    \  end\n  return math.sqrt(squared_sum / #numbers)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcmql76zk.lua:9:\
    \ attempt to call a nil value (global 'arithmetic_mean')\nstack traceback:\n\t\
    /tmp/tmpcmql76zk.lua:9: in local 'candidate'\n\t/tmp/tmpcmql76zk.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0.0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaur4geww.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpaur4geww.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpaur4geww.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers do\n\
    \        sum = sum + math.abs(numbers[i] - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0tsaksio.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp0tsaksio.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp0tsaksio.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local absolute_deviations = {}\n    for _,\
    \ v in ipairs(numbers) do\n        table.insert(absolute_deviations, math.abs(v\
    \ - mean))\n    end\n    return mean(absolute_deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfmoq5ek_.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpfmoq5ek_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpfmoq5ek_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local average = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - average)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdz7sdc6m.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpdz7sdc6m.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdz7sdc6m.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = math.mean(numbers)\n    local sum = 0\n    for i, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphk2x49vo.lua:9:\
    \ attempt to call a nil value (field 'mean')\nstack traceback:\n\t/tmp/tmphk2x49vo.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmphk2x49vo.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local deviations = {}\n    for _, number in\
    \ ipairs(numbers) do\n        table.insert(deviations, math.abs(number - mean))\n\
    \    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_dvyv_6.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmph_dvyv_6.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmph_dvyv_6.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = 0\n    for _, value in ipairs(numbers) do\n        mean = mean\
    \ + value\n    end\n    mean = mean / #numbers\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiorbh890.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local x_mean = mean(numbers)\n  for _, x in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(x - x_mean)\n  end\n  return sum / #numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqayqd_a.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpqqayqd_a.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpqqayqd_a.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   if #numbers == 0 then\n        return 0.0\n    end\n    local mean = mean(numbers)\n\
    \    local sum = 0.0\n    for _, v in ipairs(numbers) do\n        sum = sum +\
    \ math.abs(v - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsbp73es5.lua:12:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpsbp73es5.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpsbp73es5.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local mean = average(numbers)\n  for i = 1, #numbers do\n \
    \   sum = sum + math.abs(numbers[i] - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp71r7y57b.lua:10:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmp71r7y57b.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp71r7y57b.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local abs_differences = map(function(x) return\
    \ math.abs(x - mean) end, numbers)\n    return mean(abs_differences)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc65ld56w.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpc65ld56w.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpc65ld56w.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local x_mean = mean(numbers)\n  local abs_diff = function(elem) return math.abs(elem\
    \ - x_mean) end\n  return mean(map(abs_diff, numbers))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgkv_g1ut.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpgkv_g1ut.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpgkv_g1ut.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = arithmetic_mean(numbers)\n    local sum = 0\n    for _, n in\
    \ ipairs(numbers) do\n        sum = sum + math.abs(n - mean)\n    end\n    return\
    \ sum / (#numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp3spqfws.lua:9:\
    \ attempt to call a nil value (global 'arithmetic_mean')\nstack traceback:\n\t\
    /tmp/tmpp3spqfws.lua:9: in local 'candidate'\n\t/tmp/tmpp3spqfws.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = average(numbers)\n    local sum = 0\n    for _, n in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(n - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3lhzzrw6.lua:9:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmp3lhzzrw6.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp3lhzzrw6.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = 0\n    for _, number in ipairs(numbers) do\n        mean = mean\
    \ + number\n    end\n    mean = mean / #numbers\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv76vfgl8.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = average(numbers)\n    local sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / (#numbers)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp55jstqx6.lua:9:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmp55jstqx6.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp55jstqx6.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   if not numbers or #numbers == 0 then\n        return 0\n    end\n    local\
    \ mean = table.avg(numbers)\n    local diffs = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(diffs, math.abs(number - mean))\n    end\n    return\
    \ table.avg(diffs)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6tuuh3wi.lua:12:\
    \ attempt to call a nil value (field 'avg')\nstack traceback:\n\t/tmp/tmp6tuuh3wi.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp6tuuh3wi.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local n = #numbers\n    if n == 0 then\n        return 0\n    end\n    local\
    \ mean = mean(numbers)\n    local mad = 0\n    for _, x in ipairs(numbers) do\n\
    \        mad = mad + math.abs(x - mean)\n    end\n    return mad / n\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnfkc4es_.lua:13:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpnfkc4es_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpnfkc4es_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mad = 0.0\n    local sum = 0.0\n    local n = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyqpgt7_g.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = calculate_mean(numbers)\n    local abs_diffs = {}\n    for _,\
    \ num in ipairs(numbers) do\n        table.insert(abs_diffs, math.abs(num - mean))\n\
    \    end\n    return calculate_mean(abs_diffs)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjlyco5qm.lua:9:\
    \ attempt to call a nil value (global 'calculate_mean')\nstack traceback:\n\t\
    /tmp/tmpjlyco5qm.lua:9: in local 'candidate'\n\t/tmp/tmpjlyco5qm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _, v in ipairs(numbers) do\n \
    \       sum = sum + v\n        count = count + 1\n    end\n    local mean = sum\
    \ / count\n    sum = 0\n    for _, v in ipairs(numbers) do\n        sum = sum\
    \ + math.abs(v - mean)\n    end\n    return sum / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local sum_squares = 0\n    local count = 0\n    for _,\
    \ x in ipairs(numbers) do\n        count = count + 1\n        sum = sum + x\n\
    \        sum_squares = sum_squares + x * x\n    end\n    local mean = sum / count\n\
    \    local variance = (sum_squares / count) - (mean * mean)\n    local stddev\
    \ = math.sqrt(variance)\n    return stddev\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw3q3nhjj.lua:27:\
    \ expected: 1, actual: 1.1180339887499\nstack traceback:\n\t/tmp/tmpw3q3nhjj.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   if #numbers < 2 then\n        return 0.0\n    end\n    local numbers_sum =\
    \ 0.0\n    for _, number in ipairs(numbers) do\n        numbers_sum = numbers_sum\
    \ + number\n    end\n    local numbers_mean = numbers_sum / #numbers\n    local\
    \ deviation_sum = 0.0\n    for _, number in ipairs(numbers) do\n        deviation_sum\
    \ = deviation_sum + math.abs(number - numbers_mean)\n    end\n    return deviation_sum\
    \ / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local deviances = {}\n  for i = 1, #numbers do\n\
    \    deviances[i] = math.abs(numbers[i] - mean)\n  end\n  return mean(deviances)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0y8qyc9w.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp0y8qyc9w.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp0y8qyc9w.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local length = #numbers\n    local sum = 0\n    local mean = 0\n    for _,\
    \ v in ipairs(numbers) do\n        sum = sum + v\n    end\n    mean = sum / length\n\
    \    sum = 0\n    for _, v in ipairs(numbers) do\n        sum = sum + math.abs(v\
    \ - mean)\n    end\n    return sum / length\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ if #numbers == 0 then\n    return 0.0\n  end\n  local x_mean = stats.mean(numbers)\n\
    \  local deviations = {}\n  for _, x in ipairs(numbers) do\n    table.insert(deviations,\
    \ math.abs(x - x_mean))\n  end\n  return stats.mean(deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zzeq1fm.lua:12:\
    \ attempt to index a nil value (global 'stats')\nstack traceback:\n\t/tmp/tmp_zzeq1fm.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp_zzeq1fm.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n\t\
    local mean = sum(numbers) / #numbers\n\tlocal abs_diffs = map(function(num) return\
    \ math.abs(num - mean) end, numbers)\n\treturn sum(abs_diffs) / #abs_diffs\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkn5i_xjf.lua:9:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpkn5i_xjf.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkn5i_xjf.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local dev = {}\n    for _, e in ipairs(numbers)\
    \ do\n        table.insert(dev, math.abs(e - mean))\n    end\n    return mean(dev)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl8sf4lna.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpl8sf4lna.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpl8sf4lna.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local numbers_mean = mean(numbers)\n  local squares_deviation = {}\n  for _,\
    \ v in ipairs(numbers) do\n    table.insert(squares_deviation, math.abs(v - numbers_mean))\n\
    \  end\n  return mean(squares_deviation)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4709iwwr.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp4709iwwr.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4709iwwr.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, number in ipairs(numbers) do\n  \
    \  sum = sum + number\n    count = count + 1\n  end\n  local mean = sum / count\n\
    \  local sum = 0\n  for _, number in ipairs(numbers) do\n    sum = sum + math.abs(number\
    \ - mean)\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = 0.0\n    local sum = 0.0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + number\n    end\n    mean = sum / #numbers\n    local\
    \ mad = 0.0\n    sum = 0.0\n    for _, number in ipairs(numbers) do\n        sum\
    \ = sum + math.abs(number - mean)\n    end\n    mad = sum / #numbers\n    return\
    \ mad\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local abs_diffs = map(numbers, function(x)\
    \ return math.abs(x - mean) end)\n    return mean(abs_diffs)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjximvq6b.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpjximvq6b.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpjximvq6b.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, v in ipairs(numbers) do\n\
    \    sum = sum + math.abs(v - mean)\n  end\n  return sum / #numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyt1b5_e.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpkyt1b5_e.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkyt1b5_e.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = sum(numbers) / #numbers\n    local total = 0\n    for _, number\
    \ in ipairs(numbers) do\n        total = total + math.abs(number - mean)\n   \
    \ end\n    return total / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppjqvcb_a.lua:9:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmppjqvcb_a.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmppjqvcb_a.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n\t\
    assert(numbers ~= nil, \"numbers must not be nil\")\n\tassert(type(numbers) ==\
    \ \"table\", \"numbers must be a table\")\n\tassert(#numbers > 0, \"numbers must\
    \ not be empty\")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxmy34gp5.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local abs_distances = {}\n    for i, n in\
    \ ipairs(numbers) do\n        table.insert(abs_distances, math.abs(n - mean))\n\
    \    end\n    return mean(abs_distances)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9o1x_38b.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9o1x_38b.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9o1x_38b.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local mean = mean(numbers)\n  for _, num in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(num - mean)\n  end\n  return sum / #numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps3hxj6vq.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmps3hxj6vq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmps3hxj6vq.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxkfw0lor.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpxkfw0lor.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxkfw0lor.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mad = 0.0\n    local mean = 0.0\n    local n = #numbers\n    if n >\
    \ 0 then\n        mean = numbers:sum() / n\n        local tmp = 0.0\n        for\
    \ i = 1, n do\n            tmp = numbers[i] - mean\n            mad = mad + math.abs(tmp)\n\
    \        end\n        mad = mad / n\n    end\n    return mad\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaphdt0p7.lua:13:\
    \ attempt to call a nil value (method 'sum')\nstack traceback:\n\t/tmp/tmpaphdt0p7.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpaphdt0p7.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ if (#numbers == 0) then\n    return 0\n  end\n  local mean = sum(numbers) /\
    \ #numbers\n  local absolute_deviations = map(function(x) return math.abs(x -\
    \ mean) end, numbers)\n  return sum(absolute_deviations) / #absolute_deviations\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc5yz6d91.lua:12:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpc5yz6d91.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpc5yz6d91.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local deviations = {}\n    for _, number in\
    \ ipairs(numbers) do\n        deviations[#deviations + 1] = math.abs(number -\
    \ mean)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7dnnl6_o.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp7dnnl6_o.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp7dnnl6_o.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   assert(#numbers > 0, \"Empty list\")\n    local mean = mean(numbers)\n   \
    \ local abs_differences = table.map(numbers, function(number)\n        return\
    \ math.abs(number - mean)\n    end)\n    return mean(abs_differences)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfmkxil0j.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpfmkxil0j.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpfmkxil0j.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local abs_deviations = {}\n  for i, num in ipairs(numbers)\
    \ do\n    abs_deviations[i] = math.abs(num - mean)\n  end\n  return mean(abs_deviations)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcwjfpzeg.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpcwjfpzeg.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpcwjfpzeg.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = _.sum(numbers) / _.len(numbers)\n    local deviations = _.map(numbers,\
    \ function(x) return math.abs(x - mean) end)\n    return _.sum(deviations) / _.len(deviations)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqmzrszqs.lua:9:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmpqmzrszqs.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpqmzrszqs.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local numbers_sum = sum(numbers)\n  local mean = numbers_sum / #numbers\n  local\
    \ diffs = {}\n  for _, number in ipairs(numbers) do\n    diffs[#diffs + 1] = math.abs(number\
    \ - mean)\n  end\n  return sum(diffs) / #diffs\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp71r3nqdy.lua:9:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp71r3nqdy.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp71r3nqdy.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local numbers_count = #numbers\n    if numbers_count == 0 then\n        return\
    \ 0\n    end\n    local mean = mean(numbers)\n    local mad = 0\n    for _, x\
    \ in ipairs(numbers) do\n        mad = mad + math.abs(x - mean)\n    end\n   \
    \ return mad / numbers_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsilxqyuz.lua:13:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpsilxqyuz.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpsilxqyuz.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _, v in ipairs(numbers) do\n \
    \       sum = sum + v\n        count = count + 1\n    end\n    local mean = sum\
    \ / count\n    sum = 0\n    for _, v in ipairs(numbers) do\n        sum = sum\
    \ + math.abs(v - mean)\n    end\n    return sum / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   if #numbers < 2 then\n        error('mean_absolute_deviation: expected at\
    \ least 2 numbers')\n    end\n    local mean = table.avg(numbers)\n    local sum\
    \ = 0\n    for _, n in ipairs(numbers) do\n        sum = sum + math.abs(n - mean)\n\
    \    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbphshv8m.lua:12:\
    \ attempt to call a nil value (field 'avg')\nstack traceback:\n\t/tmp/tmpbphshv8m.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpbphshv8m.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   -- Calculate mean\n    local sum = 0\n    for i = 1, #numbers do\n       \
    \ sum = sum + numbers[i]\n    end\n    local mean = sum / #numbers\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzbf4erg6.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for i = 1, #numbers do\n    sum\
    \ = sum + math.abs(numbers[i] - mean)\n  end\n  return sum / #numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe_whbh2m.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpe_whbh2m.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpe_whbh2m.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   if type(numbers) ~= \"table\" then\n        return nil\n    end\n    local\
    \ sum = 0\n    local count = 0\n    for _, value in pairs(numbers) do\n      \
    \  if value ~= nil then\n            sum = sum + value\n            count = count\
    \ + 1\n        end\n    end\n    if count == 0 then\n        return nil\n    end\n\
    \    local mean = sum / count\n    local sum_abs_diff = 0\n    for _, value in\
    \ pairs(numbers) do\n        if value ~= nil then\n            sum_abs_diff =\
    \ sum_abs_diff + math.abs(value - mean)\n        end\n    end\n    return sum_abs_diff\
    \ / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ return mean(map(math.abs, distance_to_mean(numbers)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd3d7zefa.lua:9:\
    \ attempt to call a nil value (global 'distance_to_mean')\nstack traceback:\n\t\
    /tmp/tmpd3d7zefa.lua:9: in local 'candidate'\n\t/tmp/tmpd3d7zefa.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local absolute_differences = map(function(x)\
    \ return math.abs(x - mean) end, numbers)\n    return mean(absolute_differences)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ykq748n.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2ykq748n.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2ykq748n.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _,n in ipairs(numbers) do\n    sum =\
    \ sum + n\n    count = count + 1\n  end\n  local mean = sum / count\n  local sum_of_absolute_differences\
    \ = 0\n  for _,n in ipairs(numbers) do\n    sum_of_absolute_differences = sum_of_absolute_differences\
    \ + math.abs(n - mean)\n  end\n  return sum_of_absolute_differences / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local length = #numbers\n    local sum = 0.0\n    local mean = mean(numbers)\n\
    \    for _,v in ipairs(numbers) do\n        sum = sum + math.abs(v - mean)\n \
    \   end\n    return sum / length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5sbzpda1.lua:11:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp5sbzpda1.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5sbzpda1.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0.0\n    for i, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnkrmkseq.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpnkrmkseq.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpnkrmkseq.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _, num in ipairs(numbers) do\n\
    \        sum = sum + num\n        count = count + 1\n    end\n    local mean =\
    \ sum / count\n    local sum = 0\n    for _, num in ipairs(numbers) do\n     \
    \   sum = sum + math.abs(num - mean)\n    end\n    return sum / count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   if #numbers == 0 then\n        return 0\n    end\n    local mean = mean(numbers)\n\
    \    local deviations = {}\n    for _, n in ipairs(numbers) do\n        local\
    \ deviation = math.abs(n - mean)\n        table.insert(deviations, deviation)\n\
    \    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcgez788.lua:12:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpzcgez788.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpzcgez788.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = sum(numbers) / #numbers\n    local deviations = {}\n    for _,\
    \ x in ipairs(numbers) do\n        table.insert(deviations, math.abs(x - mean))\n\
    \    end\n    return sum(deviations) / #deviations\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjdjjn6io.lua:9:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpjdjjn6io.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpjdjjn6io.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local mean = mean(numbers)\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp79_s69g6.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp79_s69g6.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp79_s69g6.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ if #numbers == 0 then\n    return 0\n  end\n  local mean = sum(numbers) / #numbers\n\
    \  local deviations = {}\n  for i = 1, #numbers do\n    table.insert(deviations,\
    \ math.abs(numbers[i] - mean))\n  end\n  return sum(deviations) / #deviations\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr1sor6v6.lua:12:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpr1sor6v6.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpr1sor6v6.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = sum(numbers) / #numbers\n    local abs_deviations = {}\n    for\
    \ _, num in ipairs(numbers) do\n        table.insert(abs_deviations, math.abs(num\
    \ - mean))\n    end\n    return sum(abs_deviations) / #abs_deviations\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnug2jg34.lua:9:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpnug2jg34.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpnug2jg34.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local mean = mean(numbers)\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxe4n_8tb.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpxe4n_8tb.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpxe4n_8tb.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local mad = 0\n    for _, n in ipairs(numbers)\
    \ do\n        mad = mad + math.abs(n - mean)\n    end\n    return mad / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpho5azbv0.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpho5azbv0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpho5azbv0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = math.average(numbers)\n    local diffs = {}\n    for _, x in\
    \ ipairs(numbers) do\n        table.insert(diffs, math.abs(x - mean))\n    end\n\
    \    return math.average(diffs)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps5nho50p.lua:9:\
    \ attempt to call a nil value (field 'average')\nstack traceback:\n\t/tmp/tmps5nho50p.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmps5nho50p.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = math.average(numbers)\n    local absolute_differences = {}\n\
    \    for i, value in ipairs(numbers) do\n        table.insert(absolute_differences,\
    \ math.abs(value - mean))\n    end\n    return math.average(absolute_differences)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5sswkkex.lua:9:\
    \ attempt to call a nil value (field 'average')\nstack traceback:\n\t/tmp/tmp5sswkkex.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp5sswkkex.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local dev_sum = 0\n    local mean = mean(numbers)\n    for _, v in ipairs(numbers)\
    \ do\n        dev_sum = dev_sum + math.abs(v - mean)\n    end\n    return dev_sum\
    \ / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3po0ds1o.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp3po0ds1o.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3po0ds1o.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n\t\
    assert(numbers ~= nil, \"mean_absolute_deviation: numbers is nil\")\n\tlocal numbers_len\
    \ = #numbers\n\tassert(numbers_len > 0, \"mean_absolute_deviation: numbers is\
    \ empty\")\n\tlocal mean = average(numbers)\n\tlocal sum = 0\n\tfor i = 1, numbers_len\
    \ do\n\t\tsum = sum + math.abs(numbers[i] - mean)\n\tend\n\treturn sum / numbers_len\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdgem10b_.lua:12:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmpdgem10b_.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpdgem10b_.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local mean = average(numbers)\n  for _, x in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(x - mean)\n  end\n  return sum / #numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm7unsh7n.lua:10:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmpm7unsh7n.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpm7unsh7n.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local mad = 0.0\n    for _, number in ipairs(numbers)\
    \ do\n        mad = mad + math.abs(number - mean)\n    end\n    return mad / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8qrg6d97.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp8qrg6d97.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8qrg6d97.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local values_sum = sum(numbers)\n    local values_count = #numbers\n    local\
    \ values_mean = values_sum / values_count\n    local average_difference = 0\n\
    \    for _, v in ipairs(numbers) do\n        average_difference = average_difference\
    \ + math.abs(v - values_mean)\n    end\n    return average_difference / values_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_m3g_dec.lua:9:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp_m3g_dec.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_m3g_dec.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n\t\
    if not numbers or #numbers == 0 then\n\t\treturn 0.0\n\tend\n\tlocal mean = mean(numbers)\n\
    \tlocal diffs = {}\n\tfor _, number in ipairs(numbers) do\n\t\ttable.insert(diffs,\
    \ math.abs(number - mean))\n\tend\n\treturn mean(diffs)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6f9ppddb.lua:12:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp6f9ppddb.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp6f9ppddb.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   if #numbers == 0 then\n        return 0\n    end\n    local sum = 0\n    local\
    \ mean = mean(numbers)\n    for _, v in ipairs(numbers) do\n        sum = sum\
    \ + math.abs(v - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocflgx49.lua:13:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpocflgx49.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpocflgx49.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   assert(type(numbers) == \"table\", \"mean_absolute_deviation: numbers should\
    \ be a table\")\n    local sum = 0\n    local count = 0\n    for _, value in pairs(numbers)\
    \ do\n        if type(value) == \"number\" then\n            sum = sum + value\n\
    \            count = count + 1\n        end\n    end\n    if count == 0 then\n\
    \        return nil\n    end\n    local mean = sum / count\n    local dev_sum\
    \ = 0\n    for _, value in pairs(numbers) do\n        if type(value) == \"number\"\
    \ then\n            dev_sum = dev_sum + math.abs(value - mean)\n        end\n\
    \    end\n    return dev_sum / count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local deviation_sum = 0\n    local numbers_len = #numbers\n    local mean\
    \ = statistics.mean(numbers)\n    for _,v in ipairs(numbers) do\n        deviation_sum\
    \ = deviation_sum + math.abs(v - mean)\n    end\n    return deviation_sum / numbers_len\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3pqjzrpn.lua:11:\
    \ attempt to index a nil value (global 'statistics')\nstack traceback:\n\t/tmp/tmp3pqjzrpn.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp3pqjzrpn.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local n = #numbers\n    if n == 0 then\n        return -1.0\n    end\n   \
    \ local mean = mean(numbers)\n    local sum = 0.0\n    for i,v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3m71eg7w.lua:13:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp3m71eg7w.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp3m71eg7w.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local n = #numbers\n    if n == 0 then\n        return 0.0\n    end\n    local\
    \ sum_numbers = utils.sum(numbers)\n    local mean = sum_numbers / n\n    local\
    \ sum_diff_squares = 0.0\n    for _, x in ipairs(numbers) do\n        sum_diff_squares\
    \ = sum_diff_squares + ((x - mean) ^ 2)\n    end\n    return math.sqrt(sum_diff_squares\
    \ / n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnc0xu9jb.lua:13:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpnc0xu9jb.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpnc0xu9jb.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0.0\n    for i, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4coxmx0h.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp4coxmx0h.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4coxmx0h.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   -- find arithmetic mean\n    local sum = 0\n    for _, val in ipairs(numbers)\
    \ do\n        sum = sum + val\n    end\n    local mean = sum / #numbers\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3nesu46k.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local length = #numbers\n  if length == 0 then\n    return 0\n  end\n  local\
    \ mean = mean(numbers)\n  local sum = 0\n  for _, x in ipairs(numbers) do\n  \
    \  sum = sum + math.abs(x - mean)\n  end\n  return sum / length\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv7duv15l.lua:13:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpv7duv15l.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpv7duv15l.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local abs = math.abs\n    local len = 0\n\
    \    local sum = 0\n    for i = 1, #numbers do\n        sum = sum + abs(numbers[i]\
    \ - mean)\n        len = len + 1\n    end\n    return sum / len\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2t0znmlh.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2t0znmlh.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2t0znmlh.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in ipairs(numbers) do\n   \
    \ sum = sum + value\n    count = count + 1\n  end\n  local mean = sum / count\n\
    \  local sum_of_deviations = 0\n  for _, value in ipairs(numbers) do\n    sum_of_deviations\
    \ = sum_of_deviations + math.abs(value - mean)\n  end\n  return sum_of_deviations\
    \ / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, v in ipairs(numbers) do\n\
    \    sum = sum + math.abs(v - mean)\n  end\n  return sum / #numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpghdzkwab.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpghdzkwab.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpghdzkwab.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local result = {}\n  local sum = 0\n  local mean = 0\n  local abs = math.abs\n\
    \  for i = 1, #numbers do\n    sum = sum + numbers[i]\n  end\n  mean = sum / #numbers\n\
    \  local sum_abs = 0\n  for i = 1, #numbers do\n    sum_abs = sum_abs + abs(numbers[i]\
    \ - mean)\n  end\n  return sum_abs / #numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, x in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(x - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo1t1hnxa.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpo1t1hnxa.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpo1t1hnxa.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local mean = 0\n    for _, val in ipairs(numbers) do\n\
    \        sum = sum + val\n    end\n    mean = sum / #numbers\n    sum = 0\n  \
    \  for _, val in ipairs(numbers) do\n        sum = sum + math.abs(val - mean)\n\
    \    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   assert(type(numbers) == \"table\", \"numbers is not a table\")\n    assert(type(numbers[1])\
    \ == \"number\", \"list must have a number as an element\")\n    local mean =\
    \ list_mean(numbers)\n    local result = 0\n    for _,v in ipairs(numbers) do\n\
    \        result = result + math.abs(v - mean)\n    end\n    return result / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcar61g6m.lua:11:\
    \ attempt to call a nil value (global 'list_mean')\nstack traceback:\n\t/tmp/tmpcar61g6m.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpcar61g6m.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   -- Calculate average\n    local avg = average(numbers)\n    -- Calculate absolute\
    \ deviation for each number and sum it\n    local abs_sum = 0\n    for i,n in\
    \ ipairs(numbers) do\n        abs_sum = abs_sum + math.abs(n - avg)\n    end\n\
    \    -- Divide by total count to calculate mean\n    return abs_sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgx2669m8.lua:10:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmpgx2669m8.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpgx2669m8.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ -- Mean of given numbers\n  local mean = sum(numbers) / #numbers\n  -- Absolute\
    \ deviation of each element\n  local absolute_deviations = {}\n  for i,v in ipairs(numbers)\
    \ do\n    absolute_deviations[i] = math.abs(v - mean)\n  end\n  -- Return mean\
    \ of absolute deviations\n  return sum(absolute_deviations) / #absolute_deviations\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppv3vr7co.lua:10:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmppv3vr7co.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmppv3vr7co.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = stats.mean(numbers)\n  local absolute_deviations = {}\n  for _,\
    \ x in ipairs(numbers) do\n    absolute_deviations[#absolute_deviations + 1] =\
    \ math.abs(x - mean)\n  end\n  return stats.mean(absolute_deviations)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgnl540kb.lua:9:\
    \ attempt to index a nil value (global 'stats')\nstack traceback:\n\t/tmp/tmpgnl540kb.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpgnl540kb.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local t_mean = mean(numbers)\n    local abs_numbers = {}\n    for _,v in ipairs(numbers)\
    \ do\n        table.insert(abs_numbers, math.abs(v - t_mean))\n    end\n    return\
    \ mean(abs_numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgq7zpr7.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpzgq7zpr7.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpzgq7zpr7.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = average(numbers)\n  local total = 0\n  for _, number in ipairs(numbers)\
    \ do\n    total = total + math.abs(number - mean)\n  end\n  return total / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1peaxvla.lua:9:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmp1peaxvla.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp1peaxvla.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ return utils.mean(utils.map(function(x) return math.abs(x - utils.mean(numbers))\
    \ end, numbers))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjlicgcal.lua:9:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpjlicgcal.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpjlicgcal.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local total = 0\n    for i, v in ipairs(numbers)\
    \ do\n        total = total + math.abs(v - mean)\n    end\n    return total /\
    \ #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl5gkafam.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpl5gkafam.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpl5gkafam.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfde4eggf.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpfde4eggf.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpfde4eggf.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1vqn51ex.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1vqn51ex.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp1vqn51ex.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
