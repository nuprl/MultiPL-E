name: HumanEval_12_longest
language: lua
prompt: "-- Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n-- strings of the same length. Return None in case the input\
  \ list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n-- 'a'\n\
  -- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
  \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x', 'y',\
  \ 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk',\
  \ 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local longest_string\n  for _, string in ipairs(strings) do\n   \
    \ if not longest_string or #string > #longest_string then\n      longest_string\
    \ = string\n    end\n  end\n  return longest_string\nend", "  if #strings == 0\
    \ then\n    return nil\n  end\n  local longest_str = strings[1]\n  for _, str\
    \ in ipairs(strings) do\n    if string.len(str) > string.len(longest_str) then\n\
    \      longest_str = str\n    end\n  end\n  return longest_str\nend", "  local\
    \ max_string = ''\n  for _, s in ipairs(strings) do\n    if s:len() > max_string:len()\
    \ then\n      max_string = s\n    end\n  end\n  return max_string\nend", "   \
    \ if #strings == 0 then\n        return nil\n    end\n    local result = strings[1]\n\
    \    for i = 2, #strings do\n        if #strings[i] > #result then\n         \
    \   result = strings[i]\n        end\n    end\n    return result\nend", "    if\
    \ #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, value in ipairs(strings) do\n        if #value > #longest then\n \
    \           longest = value\n        end\n    end\n    return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local result = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] > #result then\n      result = strings[i]\n\
    \    end\n  end\n  return result\nend", "  local longest = \"\"\n  for _, str\
    \ in ipairs(strings) do\n    if str:len() > longest:len() then\n      longest\
    \ = str\n    end\n  end\n  return longest\nend", "   return foldl(function(acc,\
    \ x)\n         if #x > #acc then\n            return x\n         else\n      \
    \      return acc\n         end\n      end, nil, strings)\nend", "    if strings\
    \ then\n        local longest_string\n        local max_length = 0\n        for\
    \ _, s in ipairs(strings) do\n            if #s > max_length then\n          \
    \      max_length = #s\n                longest_string = s\n            end\n\
    \        end\n        return longest_string\n    end\nend", "    local max = 0\n\
    \    local max_str = nil\n    for i, str in ipairs(strings) do\n        if str:len()\
    \ > max then\n            max = str:len()\n            max_str = str\n       \
    \ end\n    end\n    return max_str\nend", "  local result = nil\n  for _, value\
    \ in ipairs(strings) do\n    if result == nil or #value > #result then\n     \
    \ result = value\n    end\n  end\n  return result\nend", "  if #strings > 0 then\n\
    \    local result = strings[1]\n    for _, s in ipairs(strings) do\n      if #s\
    \ > #result then\n        result = s\n      end\n    end\n    return result\n\
    \  end\nend", "    local longest_len = 0\n    local longest_string = nil\n   \
    \ for _, string in ipairs(strings) do\n        if #string > longest_len then\n\
    \            longest_len = #string\n            longest_string = string\n    \
    \    end\n    end\n    return longest_string\nend", "    if strings == nil or\
    \ #strings == 0 then\n        return nil\n    end\n    local max_len = 0\n   \
    \ local longest_str = nil\n    for _,str in ipairs(strings) do\n        if #str\
    \ > max_len then\n            max_len = #str\n            longest_str = str\n\
    \        end\n    end\n    return longest_str\nend", "  local length, longest_string\
    \ = 0, nil\n  for _, s in ipairs(strings) do\n    if #s > length then\n      length\
    \ = #s\n      longest_string = s\n    end\n  end\n  return longest_string\nend",
  "  local max = 0\n  local longest = nil\n  for _,s in ipairs(strings) do\n    if\
    \ s:len() > max then\n      max = s:len()\n      longest = s\n    end\n  end\n\
    \  return longest\nend", "    local ans = nil\n    local max_len = 0\n    for\
    \ _,s in ipairs(strings) do\n        if s:len() > max_len then\n            ans\
    \ = s\n            max_len = s:len()\n        end\n    end\n    return ans\nend",
  "  if strings == nil or #strings == 0 then\n    return nil\n  end\n  local result\
    \ = strings[1]\n  for i, str in ipairs(strings) do\n    if #str > #result then\n\
    \      result = str\n    end\n  end\n  return result\nend", "\tlocal max, max_string\
    \ = 0, nil\n\tfor _, string in ipairs(strings) do\n\t\tif #string > max then\n\
    \t\t\tmax, max_string = #string, string\n\t\tend\n\tend\n\treturn max_string\n\
    end", "  if not strings then return end\n  if not next(strings) then return end\n\
    \  local longest = strings[1]\n  for _, string in ipairs(strings) do\n    if #string\
    \ > #longest then\n      longest = string\n    end\n  end\n  return longest\n\
    end", "  local max_length = 0\n  local longest_str = nil\n  for _, str in ipairs(strings)\
    \ do\n    if str:len() > max_length then\n      max_length = str:len()\n     \
    \ longest_str = str\n    end\n  end\n  return longest_str\nend", "  if strings[1]\
    \ == nil then\n    return nil\n  end\n  local current_longest = strings[1]\n \
    \ for i = 2, #strings do\n    if #strings[i] > #current_longest then\n      current_longest\
    \ = strings[i]\n    end\n  end\n  return current_longest\nend", "    if #strings\
    \ == 0 then\n        return nil\n    end\n    local longest\n    local longest_len\
    \ = 0\n    for _, s in ipairs(strings) do\n        if #s > longest_len then\n\
    \            longest = s\n            longest_len = #s\n        end\n    end\n\
    \    return longest\nend", "\t-- TODO: your code here\nend", "\tlocal max_len\
    \ = 0\n\tlocal longest = \"\"\n\tfor _, s in ipairs(strings) do\n\t\tif #s > max_len\
    \ then\n\t\t\tmax_len = #s\n\t\t\tlongest = s\n\t\tend\n\tend\n\treturn longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local res = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #res then\n      res = s\n    end\n\
    \  end\n  return res\nend", "    if not strings then\n        return nil\n   \
    \ end\n    local max = -1\n    local max_i = -1\n    for i, v in ipairs(strings)\
    \ do\n        if #v > max then\n            max = #v\n            max_i = i\n\
    \        end\n    end\n    if max_i == -1 then\n        return nil\n    end\n\
    \    return strings[max_i]\nend", "  local current_max\n  for _, string in ipairs(strings)\
    \ do\n    if current_max == nil or #string > #current_max then\n      current_max\
    \ = string\n    end\n  end\n  return current_max\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for _, s in ipairs(strings)\
    \ do\n    if #s > #longest then\n      longest = s\n    end\n  end\n  return longest\n\
    end", "\tlocal longest = \"\"\n\tfor _,s in ipairs(strings) do\n\t\tif #s > #longest\
    \ then\n\t\t\tlongest = s\n\t\tend\n\tend\n\treturn longest\nend", "  if tablex.empty(strings)\
    \ then\n    return nil\n  end\n  return reduce(strings, function(i, j)\n    return\
    \ i:len() > j:len() and i or j\n  end)\nend", "\tif #strings == 0 then\n\t\treturn\
    \ nil\n\tend\n\tlocal longest_string = strings[1]\n\tfor _, str in ipairs(strings)\
    \ do\n\t\tif #str > #longest_string then\n\t\t\tlongest_string = str\n\t\tend\n\
    \tend\n\treturn longest_string\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local result = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ > #result then\n      result = strings[i]\n    end\n  end\n  return result\n\
    end", "    local longestString = ''\n    for _, str in ipairs(strings) do\n  \
    \      if str:len() > longestString:len() then\n            longestString = str\n\
    \        end\n    end\n    return longestString\nend", "\tlocal longest = nil\n\
    \tfor k, v in pairs(strings) do\n\t\tif longest == nil or string.len(v) > string.len(longest)\
    \ then\n\t\t\tlongest = v\n\t\tend\n\tend\n\treturn longest\nend", "    if #strings\
    \ == 0 then\n        return\n    end\n    local longest_str = strings[1]\n   \
    \ for _, str in ipairs(strings) do\n        if #str > #longest_str then\n    \
    \        longest_str = str\n        end\n    end\n    return longest_str\nend",
  "    if #strings == 0 then\n        return nil\n    end\n    local l = strings[1]\n\
    \    for i, s in ipairs(strings) do\n        if #s > #l then\n            l =\
    \ s\n        end\n    end\n    return l\nend", "    if #strings == 0 then\n  \
    \      return nil\n    end\n    local longest_string = strings[1]\n    for _,\
    \ s in ipairs(strings) do\n        if #s > #longest_string then\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend", "    local max_length\
    \ = 0\n    local max_length_strings = {}\n    for i, v in ipairs(strings) do\n\
    \        local length = string.len(v)\n        if length > max_length then\n \
    \           max_length = length\n            max_length_strings = {v}\n      \
    \  elseif length == max_length then\n            table.insert(max_length_strings,\
    \ v)\n        end\n    end\n    if #max_length_strings > 0 then\n        return\
    \ max_length_strings[1]\n    end\nend", "    -- This one is intentionally left\
    \ unimplemented.\n    return nil\nend", "    local bestString = nil\n    local\
    \ bestLength = 0\n    for _, s in ipairs(strings) do\n        local length = #s\n\
    \        if length > bestLength then\n            bestString = s\n           \
    \ bestLength = length\n        end\n    end\n    return bestString\nend", "  if\
    \ not strings then return end\n  if #strings == 0 then return end\n  local maxlen\
    \ = 0\n  local result = nil\n  for _, str in ipairs(strings) do\n    if #str >\
    \ maxlen then\n      maxlen = #str\n      result = str\n    end\n  end\n  return\
    \ result\nend", "    -- TODO: You need to implement this.\n    return nil\nend",
  "    if #strings == 0 then\n        return nil\n    end\n    local l = 0\n    local\
    \ ret = strings[1]\n    for i = 1, #strings do\n        if #strings[i] > l then\n\
    \            l = #strings[i]\n            ret = strings[i]\n        end\n    end\n\
    \    return ret\nend", "    if #strings == 0 then\n        return nil\n    end\n\
    \    local last_longest = 1\n    for i = 2, #strings do\n        if #strings[i]\
    \ > #strings[last_longest] then\n            last_longest = i\n        end\n \
    \   end\n    return strings[last_longest]\nend", "  return head(\n    reverse(\n\
    \      sort(\n        strings,\n        function(str1, str2)\n          return\
    \ #str1 > #str2\n        end\n      )\n    )\n  )\nend", "    local maxLength\
    \ = 0\n    local result = nil\n    for _, string in ipairs(strings) do\n     \
    \   if result == nil or #string > maxLength then\n            result = string\n\
    \            maxLength = #string\n        end\n    end\n    return result\nend",
  "  local longest_str = nil\n  local longest_len = -1\n  for _, str in ipairs(strings)\
    \ do\n    local len = str:len()\n    if len > longest_len then\n      longest_str\
    \ = str\n      longest_len = len\n    end\n  end\n  return longest_str\nend",
  "    if #strings == 0 then\n        return\n    end\n    local ret = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #ret then\n            ret\
    \ = s\n        end\n    end\n    return ret\nend", "  if not strings or #strings\
    \ == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n  for\
    \ _, str in ipairs(strings) do\n    if #str > #longest_string then\n      longest_string\
    \ = str\n    end\n  end\n  return longest_string\nend", "   -- We can't use 'fold'\
    \ here, since its order of arguments is non-optimal.\n   local longest = nil\n\
    \   for _, s in ipairs(strings) do\n      if longest == nil or #s > #longest then\n\
    \         longest = s\n      end\n   end\n   return longest\nend", "    if type(strings)\
    \ ~= 'table' then\n        error('function longest expects a table, got a ' ..\
    \ type(strings), 2)\n    end\n    local _, arg_max = argmax(strings, function(a,\
    \ b) return #a > #b end)\n    return arg_max\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local ret = strings[1]\n  for i = 2, #strings do\n \
    \   if #strings[i] > #ret then\n      ret = strings[i]\n    end\n  end\n  return\
    \ ret\nend", "  local l, r = 0, nil\n  for _, s in ipairs(strings) do\n    if\
    \ #s > l then\n      l = #s\n      r = s\n    end\n  end\n  return r\nend", " \
    \   if is_empty(strings) then\n        return nil\n    end\n    local longest_string\
    \ = head(strings)\n    for i = 2, #strings do\n        if #longest_string < #strings[i]\
    \ then\n            longest_string = strings[i]\n        end\n    end\n    return\
    \ longest_string\nend", "    -- TODO\nend", "    if not strings then\n       \
    \ return nil\n    end\n    local longest_string = strings[1]\n    for i = 2, #strings\
    \ do\n        if #strings[i] > #longest_string then\n            longest_string\
    \ = strings[i]\n        end\n    end\n    return longest_string\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local res = strings[1]\n  for i = 2, #strings\
    \ do\n    if #strings[i] > #res then\n      res = strings[i]\n    end\n  end\n\
    \  return res\nend", "    if not strings then\n        return nil\n    end\n \
    \   local lng = nil\n    for _, str in ipairs(strings) do\n        if not lng\
    \ or lng:len() < str:len() then\n            lng = str\n        end\n    end\n\
    \    return lng\nend", "\tlocal longest, length = nil, 0\n\tfor _, s in ipairs(strings)\
    \ do\n\t\tif #s > length then\n\t\t\tlongest, length = s, #s\n\t\tend\n\tend\n\
    \treturn longest\nend", "   local len, res = 0, nil\n   for _, s in ipairs(strings)\
    \ do\n      if #s > len then\n         len, res = #s, s\n      end\n   end\n \
    \  return res\nend", "  local max_len = 0\n  local longest_idx = nil\n  for idx,\
    \ str in ipairs(strings) do\n    if str:len() > max_len then\n      max_len =\
    \ str:len()\n      longest_idx = idx\n    end\n  end\n  return longest_idx and\
    \ strings[longest_idx]\nend", "    local longest = nil\n    local max_length =\
    \ 0\n    for _, s in ipairs(strings) do\n        if #s > max_length then\n   \
    \         longest = s\n            max_length = #s\n        end\n    end\n   \
    \ return longest\nend", "\tif strings == nil or #strings == 0 then\n\t\treturn\
    \ nil\n\tend\n\tlocal longest_string = strings[1]\n\tfor i = 2, #strings do\n\t\
    \tif #strings[i] > #longest_string then\n\t\t\tlongest_string = strings[i]\n\t\
    \tend\n\tend\n\treturn longest_string\nend", "  if not strings or not next(strings)\
    \ then\n    return nil\n  end\n  local longest_string\n  local max_length = 0\n\
    \  for i, s in ipairs(strings) do\n    if s and #s > max_length then\n      max_length\
    \ = #s\n      longest_string = s\n    end\n  end\n  return longest_string\nend",
  "    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, string in ipairs(strings) do\n        if #string > #longest then\n\
    \            longest = string\n        end\n    end\n    return longest\nend",
  "    local max_len, max_string\n    for _, s in ipairs(strings) do\n        if not\
    \ max_len or max_len < #s then\n            max_len = #s\n            max_string\
    \ = s\n        end\n    end\n    return max_string\nend", "  local longest = nil\n\
    \  for _, str in ipairs(strings) do\n    if not longest or #str > #longest then\n\
    \      longest = str\n    end\n  end\n  return longest\nend", "    if #strings\
    \ == 0 then\n        return nil\n    end\n    local longestStr = strings[1]\n\
    \    for _, v in ipairs(strings) do\n        if #v > #longestStr then\n      \
    \      longestStr = v\n        end\n    end\n    return longestStr\nend", "\t\
    local length, longest_str = 0, nil\n\tfor _, str in ipairs(strings) do\n\t\tif\
    \ str:len() > length then\n\t\t\tlength, longest_str = str:len(), str\n\t\tend\n\
    \tend\n\treturn longest_str\nend", "    if #strings == 0 then\n        return\n\
    \    end\n    local longest\n    for _, str in ipairs(strings) do\n        if\
    \ not longest or str:len() > longest:len() then\n            longest = str\n \
    \       end\n    end\n    return longest\nend", "    -- YOUR CODE HERE\n    if\
    \ strings == nil then return\n    else\n        local cL = \"\"\n        for k,v\
    \ in pairs(strings) do\n            if v ~= nil then\n                if string.len(v)\
    \ > string.len(cL) then\n                    cL = v\n                end\n   \
    \         end\n        end\n        return cL\n    end\nend", "  if #strings ==\
    \ 0 then\n    return\n  end\n  return table.sort(strings, function(a, b) return\
    \ #a > #b end)[1]\nend", "    if #strings == 0 then\n        return nil\n    end\n\
    \    local max_length = 0\n    local longest_str = strings[1]\n    for _, s in\
    \ ipairs(strings) do\n        if #s > max_length then\n            max_length\
    \ = #s\n            longest_str = s\n        end\n    end\n    return longest_str\n\
    end", "  if #strings == 0 then\n    return\n  end\n  local longest_string = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] > #longest_string then\n      longest_string\
    \ = strings[i]\n    end\n  end\n  return longest_string\nend", "   local max =\
    \ 0\n   local longest = nil\n   for _, s in ipairs(strings) do\n      if #s >\
    \ max then\n         max = #s\n         longest = s\n      end\n   end\n   return\
    \ longest\nend", "   local longest_str = nil\n   for _, str in ipairs(strings)\
    \ do\n      if longest_str == nil or longest_str:len() < str:len() then\n    \
    \     longest_str = str\n      end\n   end\n   return longest_str\nend", "   \
    \ local len = 0\n    local longest = nil\n    for _, s in ipairs(strings) do\n\
    \        if #s > len then\n            len = #s\n            longest = s\n   \
    \     end\n    end\n    return longest\nend", "    if #strings == 0 then\n   \
    \     return nil\n    end\n    local max_len = 0\n    local max_str = nil\n  \
    \  for _, s in ipairs(strings) do\n        if #s > max_len then\n            max_len\
    \ = #s\n            max_str = s\n        end\n    end\n    return max_str\nend",
  "    if #strings == 0 then\n        return nil\n    end\n    local maxlen = 0\n\
    \    local longest = strings[1]\n    for i, str in ipairs(strings) do\n      \
    \  if #str > maxlen then\n            maxlen = #str\n            longest = str\n\
    \        end\n    end\n    return longest\nend", "  if #strings == 0 then\n  \
    \  return nil\n  end\n  local longest_string = strings[1]\n  for _, s in ipairs(strings)\
    \ do\n    if #s > #longest_string then\n      longest_string = s\n    end\n  end\n\
    \  return longest_string\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local max = strings[1]\n  for _, str in ipairs(strings) do\n    if #str > #max\
    \ then\n      max = str\n    end\n  end\n  return max\nend", "    local res =\
    \ nil\n    for _, s in ipairs(strings) do\n        if res == nil or #s > #res\
    \ then\n            res = s\n        end\n    end\n    return res\nend", "  local\
    \ longest_string = strings[1]\n  for _, str in ipairs(strings) do\n    if string.len(str)\
    \ > string.len(longest_string) then\n      longest_string = str\n    end\n  end\n\
    \  return longest_string\nend", "    if #strings == 0 then\n        return\n \
    \   end\n    local result = strings[1]\n    for _, s in ipairs(strings) do\n \
    \       if #s > #result then\n            result = s\n        end\n    end\n \
    \   return result\nend", "    if #strings == 0 then\n        return\n    end\n\
    \    local len, l = 0, ''\n    for _, s in ipairs(strings) do\n        if #s >\
    \ len then\n            len, l = #s, s\n        end\n    end\n    return l\nend",
  "   local maxlen = 0\n   local longest_string = nil\n   for _, s in ipairs(strings)\
    \ do\n      if string.len(s) > maxlen then\n         maxlen = string.len(s)\n\
    \         longest_string = s\n      end\n   end\n   return longest_string\nend",
  "    local max = 0\n    local longest_string = nil\n    for _, s in ipairs(strings)\
    \ do\n        if #s > max then\n            max = #s\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend", "  local longest_string\
    \ = nil\n  for _, string in ipairs(strings) do\n    if longest_string == nil or\
    \ #string > #longest_string then\n      longest_string = string\n    end\n  end\n\
    \  return longest_string\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local max_string = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ > #max_string then\n      max_string = strings[i]\n    end\n  end\n  return\
    \ max_string\nend", "    local longest = nil\n    local len = 0\n    for _,s in\
    \ ipairs(strings) do\n        if s:len() > len then\n            longest = s\n\
    \            len = s:len()\n        end\n    end\n    return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest then\n      longest =\
    \ s\n    end\n  end\n  return longest\nend", "    if #strings == 0 then\n    \
    \    return nil\n    end\n    local longestString\n    local maxLength = 0\n \
    \   for _, s in ipairs(strings) do\n        if #s > maxLength then\n         \
    \   maxLength = #s\n            longestString = s\n        end\n    end\n    return\
    \ longestString\nend", "  if not strings then return end\n  if #strings == 0 then\
    \ return end\n  table.sort(strings, function(a, b) return #a > #b end)\n  return\
    \ strings[1]\nend", "\tlocal ret\n\tlocal max_length = 0\n\tfor _, v in ipairs(strings)\
    \ do\n\t\tif max_length < #v then\n\t\t\tret = v\n\t\t\tmax_length = #v\n\t\t\
    end\n\tend\n\treturn ret\nend", "    if #strings == 0 then\n        return nil\n\
    \    end\n    local longest = strings[1]\n    for _, str in ipairs(strings) do\n\
    \        if str:len() > longest:len() then\n            longest = str\n      \
    \  end\n    end\n    return longest\nend", "  local max_length, max_string\n \
    \ for _, string in ipairs(strings) do\n    local length = #string\n    if max_length\
    \ == nil or length > max_length then\n      max_length = length\n      max_string\
    \ = string\n    end\n  end\n  return max_string\nend", "    if #strings == 0 then\n\
    \        return\n    end\n    local longestString = strings[1]\n    for _, string\
    \ in ipairs(strings) do\n        if #string > #longestString then\n          \
    \  longestString = string\n        end\n    end\n    return longestString\nend",
  "    if #strings == 0 then\n        return nil\n    end\n    local max = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #max then\n            max\
    \ = s\n        end\n    end\n    return max\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local max_len = 0\n  local max_idx = 1\n  for i, str\
    \ in ipairs(strings) do\n    if #str > max_len then\n      max_len = #str\n  \
    \    max_idx = i\n    end\n  end\n  return strings[max_idx]\nend", "  if #strings\
    \ > 0 then\n    return table.reduce(strings, function(memo, s)\n      return #s\
    \ > #memo and s or memo\n    end, strings[1])\n  end\nend", "\tassert(type(strings)\
    \ == 'table')\n\tlocal max_len = 0\n\tlocal longest_string = nil\n\tfor _, str\
    \ in ipairs(strings) do\n\t\tassert(type(str) == 'string')\n\t\tif #str > max_len\
    \ then\n\t\t\tmax_len = #str\n\t\t\tlongest_string = str\n\t\tend\n\tend\n\treturn\
    \ longest_string\nend", "\tif #strings == 0 then\n\t\treturn\n\tend\n\tlocal max_len\
    \ = 0\n\tlocal longest_string\n\tfor _, s in ipairs(strings) do\n\t\tif #s > max_len\
    \ then\n\t\t\tmax_len = #s\n\t\t\tlongest_string = s\n\t\tend\n\tend\n\treturn\
    \ longest_string\nend", "  local max_len = 0\n  local longest = nil\n  for _,\
    \ str in ipairs(strings) do\n    if str:len() > max_len then\n      max_len =\
    \ str:len()\n      longest = str\n    end\n  end\n  return longest\nend", "  --\
    \ >>> your code here\nend", "    if #strings == 0 then\n        return nil\n \
    \   end\n    local longest_str = strings[1]\n    for i = 2, #strings do\n    \
    \    if #strings[i] > #longest_str then\n            longest_str = strings[i]\n\
    \        end\n    end\n    return longest_str\nend", "  if #strings == 0 then\n\
    \    return None\n  end\n  table.sort(strings, function(a, b) return #a > #b end)\n\
    \  return strings[1]\nend", "    if #strings == 0 then\n        return nil\n \
    \   end\n    table.sort(strings, function(a, b) return #a > #b end)\n    return\
    \ strings[1]\nend", "  return _(strings):max_by(string.len)\nend", "    local\
    \ longest = nil\n    for _,s in ipairs(strings) do\n        if longest == nil\
    \ or string.len(s) > string.len(longest) then\n            longest = s\n     \
    \   end\n    end\n    return longest\nend", "    local max_str = ''\n    for _,\
    \ s in ipairs(strings) do\n        if #s > #max_str then\n            max_str\
    \ = s\n        end\n    end\n    return max_str\nend", "  local max_len, max_str\n\
    \  for i, str in ipairs(strings) do\n    if not max_len or #str > max_len then\n\
    \      max_len = #str\n      max_str = str\n    end\n  end\n  return max_str\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local best_string = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] > #best_string then\n      best_string\
    \ = strings[i]\n    end\n  end\n  return best_string\nend", "    local max_len\
    \ = 0\n    local max_idx = 0\n    for i = 1, #strings do\n        local len =\
    \ #strings[i]\n        if len > max_len then\n            max_len = len\n    \
    \        max_idx = i\n        end\n    end\n    return max_idx > 0 and strings[max_idx]\
    \ or nil\nend", "    if #strings == 0 then\n        return nil\n    end\n    local\
    \ max_len = 0\n    local max_len_string = nil\n    for i, string in ipairs(strings)\
    \ do\n        if #string > max_len then\n            max_len = #string\n     \
    \       max_len_string = string\n        end\n    end\n    return max_len_string\n\
    end", "    local max = 0\n    local max_s = nil\n    for _, s in ipairs(strings)\
    \ do\n        if #s > max then\n            max = #s\n            max_s = s\n\
    \        end\n    end\n    return max_s\nend", "    local l = 0\n    local max\
    \ = nil\n    for _,s in ipairs(strings) do\n        if s:len() > l then\n    \
    \        l = s:len()\n            max = s\n        end\n    end\n    return max\n\
    end", "    local maxlen = 0\n    local best = nil\n    for _, str in ipairs(strings)\
    \ do\n        if #str > maxlen then\n            maxlen = #str\n            best\
    \ = str\n        end\n    end\n    return best\nend", "  local max_len = 0\n \
    \ local longest_str = nil\n  for _, s in ipairs(strings) do\n    if #s > max_len\
    \ then\n      max_len = #s\n      longest_str = s\n    end\n  end\n  return longest_str\n\
    end", "  local stringLengths = {}\n  local longestString\n  local longestLength\
    \ = 0", "    if strings == nil or #strings == 0 then\n        return nil\n   \
    \ end\n    local max_len = 0\n    local result = nil\n    for _, str in ipairs(strings)\
    \ do\n        if str:len() > max_len then\n            max_len = str:len()\n \
    \           result = str\n        end\n    end\n    return result\nend", "  local\
    \ longest = \"\"\n  for _, s in ipairs(strings) do\n    if #s > #longest then\n\
    \      longest = s\n    end\n  end\n  return longest\nend", "    if len(strings)\
    \ == 0 then\n        return\n    end\n    local lstring = strings[1]\n    for\
    \ i = 2, len(strings) do\n        if len(strings[i]) > len(lstring) then\n   \
    \         lstring = strings[i]\n        end\n    end\n    return lstring\nend",
  "  if type(strings) ~= 'table' then return nil end\n  local len, s, longest = 0\n\
    \  for _,v in ipairs(strings) do\n    s = tostring(v)\n    if len < #s then\n\
    \      len = #s\n      longest = s\n    end\n  end\n  return longest\nend", " \
    \ if not strings then return end\n  local length = 0\n  local index = 0\n  for\
    \ i, str in ipairs(strings) do\n    if #str > length then\n      length = #str\n\
    \      index = i\n    end\n  end\n  return strings[index]\nend", "    if #strings\
    \ == 0 then\n        return nil\n    end\n    local longest\n    local max_length\
    \ = 0\n    for _, str in ipairs(strings) do\n        if str:len() > max_length\
    \ then\n            longest = str\n            max_length = str:len()\n      \
    \  end\n    end\n    return longest\nend", "  if not strings or #strings == 0\
    \ then\n    return\n  end\n  local sorted = {}\n  for _, v in ipairs(strings)\
    \ do\n    table.insert(sorted, v)\n  end\n  table.sort(sorted, function(a, b)\
    \ return #a > #b end)\n  return sorted[1]\nend", "    -- Initialize length of\
    \ the longest string to -1, used to find the first longest string\n    local maxlen\
    \ = -1\n    local longest_string = nil\n    for _, s in ipairs(strings) do\n \
    \       local slen = #s\n        if slen > maxlen then\n            maxlen = slen\n\
    \            longest_string = s\n        end\n    end\n    return longest_string\n\
    end", "    if len(strings) == 0 then\n        return None\n    end\n    local\
    \ result = strings[1]\n    for _, value in ipairs(strings) do\n        if len(value)\
    \ > len(result) then\n            result = value\n        end\n    end\n    return\
    \ result\nend", "    if #strings == 0 then\n        return\n    end\n    local\
    \ long = strings[1]\n    for _, s in ipairs(strings) do\n        if s:len() >\
    \ long:len() then\n            long = s\n        end\n    end\n    return long\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longestStr = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longestStr then\n      longestStr\
    \ = s\n    end\n  end\n  return longestStr\nend", "   if #strings == 0 then\n\
    \      return nil\n   end\n   local maxstr = strings[1]\n   for i=2,#strings do\n\
    \      if #strings[i] > #maxstr then\n         maxstr = strings[i]\n      end\n\
    \   end\n   return maxstr\nend", "    if not strings or #strings == 0 then\n \
    \       return nil\n    end\n    table.sort(strings,\n               function(a,\
    \ b)\n                   return string.len(a) > string.len(b)\n              \
    \ end)\n    return strings[1]\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  table.sort(strings, function(a, b) return #a > #b end)\n  return strings[1]\n\
    end", "    if 0 == #strings then\n        return nil\n    end\n    local lstr\
    \ = strings[1]\n    for i, str in ipairs(strings) do\n        if #str > #lstr\
    \ then\n            lstr = str\n        end\n    end\n    return lstr\nend", " \
    \   if #strings == 0 then\n        return nil\n    end\n    local max = ''\n \
    \   for _, v in ipairs(strings) do\n        if #v > #max then\n            max\
    \ = v\n        end\n    end\n    return max\nend", "    local longest = nil\n\
    \    for i, v in ipairs(strings) do\n        if longest == nil or #v > #longest\
    \ then\n            longest = v\n        end\n    end\n    return longest\nend",
  "  local max_length, max_string = 0, nil\n  for _, s in ipairs(strings) do\n   \
    \ if not max_string or #s > max_length then\n      max_length, max_string = #s,\
    \ s\n    end\n  end\n  return max_string\nend", "  if #strings == 0 then\n   \
    \ return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] > #longest then\n      longest = strings[i]\n    end\n  end\n\
    \  return longest\nend", "    local n = #strings\n    if n == 0 then\n       \
    \ return nil\n    end\n    local longest_string, longest_length = strings[1],\
    \ #strings[1]\n    for i = 2, n do\n        local s = strings[i]\n        local\
    \ len = #s\n        if len > longest_length then\n            longest_string,\
    \ longest_length = s, len\n        end\n    end\n    return longest_string\nend",
  "    local max_length = 0\n    local longest_string = nil\n    for _, s in ipairs(strings)\
    \ do\n        if #s > max_length then\n            max_length = #s\n         \
    \   longest_string = s\n        end\n    end\n    return longest_string\nend",
  "    if not strings or #strings == 0 then\n        return nil\n    end\n    local\
    \ longest = strings[1]\n    for _,s in ipairs(strings) do\n        if #s > #longest\
    \ then\n            longest = s\n        end\n    end\n    return longest\nend",
  "  if #strings == 0 then\n    return nil\n  end\n  local maxlen = #strings[1]\n\
    \  local max_index = 1\n  for i, s in ipairs(strings) do\n    if #s > maxlen then\n\
    \      maxlen = #s\n      max_index = i\n    end\n  end\n  return strings[max_index]\n\
    end", "    if not strings then\n        return nil\n    end\n    local len = 0\n\
    \    local selected\n    for _, s in ipairs(strings) do\n        if string.len(s)\
    \ > len then\n            len = string.len(s)\n            selected = s\n    \
    \    end\n    end\n    return selected\nend", "    if #strings == 0 then\n   \
    \     return nil\n    end\n    local longest = strings[1]\n    for _, string in\
    \ ipairs(strings) do\n        if #string > #longest then\n            longest\
    \ = string\n        end\n    end\n    return longest\nend", "    local longest_len\
    \ = 0\n    local longest_str = nil\n    for _, str in ipairs(strings) do\n   \
    \     if #str > longest_len then\n            longest_len = #str\n           \
    \ longest_str = str\n        end\n    end\n    return longest_str\nend", "   \
    \ if #strings == 0 then\n        return\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if s:len() > longest:len() then\n\
    \            longest = s\n        end\n    end\n    return longest\nend", "  local\
    \ longest_string = \"\"\n  local longest_string_length = 0\n  for i, str in ipairs(strings)\
    \ do\n    if str:len() > longest_string_length then\n      longest_string = str\n\
    \      longest_string_length = str:len()\n    end\n  end\n  return longest_string\n\
    end", "   if #strings == 0 then\n      return None\n   end\n   local long = strings[1]\n\
    \   for i=2,#strings do\n      if #strings[i] > #long then\n         long = strings[i]\n\
    \      end\n   end\n   return long\nend", "  if strings and #strings > 0 then\n\
    \    local result = strings[1]\n    for _, v in ipairs(strings) do\n      if string.len(v)\
    \ > string.len(result) then\n        result = v\n      end\n    end\n    return\
    \ result\n  end\nend", "\tlocal length, current = 0, ''\n\tfor i, v in ipairs(strings)\
    \ do\n\t\tif #v > length then\n\t\t\tlength, current = #v, v\n\t\tend\n\tend\n\
    \treturn current\nend", "    local longest_len = 0\n    local longest_str = nil\n\
    \    for _, s in ipairs(strings) do\n        if #s > longest_len then\n      \
    \      longest_len = #s\n            longest_str = s\n        end\n    end\n \
    \   return longest_str\nend", "    if #strings == 0 then\n        return nil\n\
    \    end\n    local result = strings[1]\n    for i = 2, #strings do\n        if\
    \ #strings[i] > #result then\n            result = strings[i]\n        end\n \
    \   end\n    return result\nend", "  if #strings == 0 then\n    return None\n\
    \  end\n  return reduce(lambda 'x y: x if len(x) > len(y) else y', None, strings)\n\
    end", "    if #strings == 0 then\n        return nil\n    end\n    return table.sort(strings,\
    \ function(a, b) return #a > #b end)[1]\nend", "\tif #strings == 0 then\n\t\t\
    return nil\n\tend\n\tlocal longest_string = strings[1]\n\tfor i, s in ipairs(strings)\
    \ do\n\t\tif #s > #longest_string then\n\t\t\tlongest_string = s\n\t\tend\n\t\
    end\n\treturn longest_string\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  table.sort(strings, function(a, b) return #a > #b end)\n  return strings[1]\n\
    end", "    -- TODO\nend", "    if not is_list(strings) then\n        error('Function:\
    \ longest() expects a list of strings as input')\n    end\n    if is_empty(strings)\
    \ then\n        return nil\n    end\n    local longest_string = head(strings)\n\
    \    for i = 2,#strings do\n        if #strings[i] > #longest_string then\n  \
    \          longest_string = strings[i]\n        end\n    end\n    return longest_string\n\
    end", "    local max = 0\n    local ret = nil\n    for _, str in ipairs(strings)\
    \ do\n        if #str > max then\n            max = #str\n            ret = str\n\
    \        end\n    end\n    return ret\nend", "    if #strings == 0 then\n    \
    \    return nil\n    end\n    local longest = strings[1]\n    for _, s in ipairs(strings)\
    \ do\n        if #s > #longest then\n            longest = s\n        end\n  \
    \  end\n    return longest\nend", "  if #strings == 0 then\n    return nil\n \
    \ end\n  local result = strings[1]\n  for _, s in ipairs(strings) do\n    if #s\
    \ > #result then\n      result = s\n    end\n  end\n  return result\nend", " \
    \   if #strings == 0 then\n        return None\n    end\n    local max_length\
    \ = 0\n    local longest_string = None\n    for _, s in ipairs(strings) do\n \
    \       if #s > max_length then\n            max_length = #s\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend", "\tif #strings ==\
    \ 0 then\n\t\treturn nil\n\tend\n\tlocal longest_string = strings[1]\n\tfor i,v\
    \ in ipairs(strings) do\n\t\tif #v > #longest_string then\n\t\t\tlongest_string\
    \ = v\n\t\tend\n\tend\n\treturn longest_string\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for _, str in ipairs(strings)\
    \ do\n    if #str > #longest then\n      longest = str\n    end\n  end\n  return\
    \ longest\nend", "\tif #strings == 0 then\n\t\treturn nil\n\tend\n\tlocal result\
    \ = strings[1]\n\tfor i = 2, #strings do\n\t\tif #strings[i] > #result then\n\t\
    \t\tresult = strings[i]\n\t\tend\n\tend\n\treturn result\nend", "  local m = {}\n\
    \  for _, e in ipairs(strings) do\n    local cur = #e\n    if not m[cur] then\n\
    \      m[cur] = e\n    end\n  end\n  local keys = map.i2n(table.keys(m))\n  table.sort(keys)\n\
    \  return m[keys[#keys]]\nend", "    local max_len = 0\n    local max_str = nil\n\
    \    for _,str in ipairs(strings) do\n        if str:len() > max_len then\n  \
    \          max_len = str:len()\n            max_str = str\n        end\n    end\n\
    \    return max_str\nend", "    if #strings == 0 then\n        return nil\n  \
    \  end\n    local max_len = 0\n    local idx = 0\n    for i = 1, #strings do\n\
    \        if #strings[i] > max_len then\n            max_len = #strings[i]\n  \
    \          idx = i\n        end\n    end\n    return strings[idx]\nend", "   \
    \ local longest = nil\n    for _, s in ipairs(strings) do\n        if (longest\
    \ == nil) or (#s > #longest) then\n            longest = s\n        end\n    end\n\
    \    return longest\nend", "  local result = nil\n  local longest = -1\n  for\
    \ _, s in ipairs(strings) do\n    if #s > longest then\n      result = s\n   \
    \   longest = #s\n    end\n  end\n  return result\nend", "    if #strings == 0\
    \ then\n        return nil\n    end\n    return table.reduce(strings, function(acc,\
    \ x) return #x > #acc and x or acc end)\nend", "    if (#strings == 0) then\n\
    \        return nil\n    end\n    local result, length = strings[1], #strings[1]\n\
    \    for i = 2, #strings do\n        if (#strings[i] > length) then\n        \
    \    result, length = strings[i], #strings[i]\n        end\n    end\n    return\
    \ result\nend", "    if #strings == 0 then\n        return nil\n    end\n    local\
    \ longest = strings[1]\n    for _, v in ipairs(strings) do\n        if v:len()\
    \ > longest:len() then\n            longest = v\n        end\n    end\n    return\
    \ longest\nend", "    return strings[1]\nend", "    if type(strings) ~= 'table'\
    \ then\n        error('List of strings expected')\n    end\n    if #strings ==\
    \ 0 then\n        return nil\n    end\n    local longest_str = strings[1]\n  \
    \  for _, str in ipairs(strings) do\n        if #str > #longest_str then\n   \
    \         longest_str = str\n        end\n    end\n    return longest_str\nend",
  "    local current = strings[1]\n    for _, string in ipairs(strings) do\n     \
    \   if #string > #current then\n            current = string\n        end\n  \
    \  end\n    return current\nend", "  if not strings or #strings == 0 then\n  \
    \  return nil\n  end\n  local max_string = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] > #max_string then\n      max_string = strings[i]\n    end\n\
    \  end\n  return max_string\nend", "\tlocal longest_str = strings[1]\n\tfor _,\
    \ str in ipairs(strings) do\n\t\tif #str > #longest_str then\n\t\t\tlongest_str\
    \ = str\n\t\tend\n\tend\n\treturn longest_str\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local result = strings[1]\n  for _, s in ipairs(strings)\
    \ do\n    if #s > #result then\n      result = s\n    end\n  end\n  return result\n\
    end", "    if #strings == 0 then\n        return nil\n    end\n    local max_len\
    \ = 0\n    local max_string = nil\n    for _, str in ipairs(strings) do\n    \
    \    if #str > max_len then\n            max_len = #str\n            max_string\
    \ = str\n        end\n    end\n    return max_string\nend", "    if #strings ==\
    \ 0 then\n        return\n    end\n    local longest = strings[1]\n    for _,\
    \ s in ipairs(strings) do\n        if #s > #longest then\n            longest\
    \ = s\n        end\n    end\n    return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local max_len = 0\n  local longest_str = nil\n  for\
    \ _, str in ipairs(strings) do\n    if #str > max_len then\n      max_len = #str\n\
    \      longest_str = str\n    end\n  end\n  return longest_str\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  table.sort(strings, function(x, y) return\
    \ #x > #y end)\n  return strings[1]\nend", "  -- If the input list is empty, return\
    \ None.\n  if #strings == 0 then\n    return nil\n  end", "  if (strings and #strings\
    \ > 0) then\n    table.sort(strings, function(a, b) return #a > #b end)\n    return\
    \ strings[1]\n  end\nend", "    local longestString = nil\n    local longestLength\
    \ = 0\n    for i, s in ipairs(strings) do\n        if (string.len(s) > longestLength)\
    \ then\n            longestString = s\n            longestLength = string.len(s)\n\
    \        end\n    end\n    return longestString\nend", "  local longest_candidate\
    \ = ''\n  for _, s in ipairs(strings) do\n    if #s > #longest_candidate then\n\
    \      longest_candidate = s\n    end\n  end\n  return longest_candidate\nend",
  "  local longest_string = ''\n  for _, s in ipairs(strings) do\n    if #s > #longest_string\
    \ then\n      longest_string = s\n    end\n  end\n  return longest_string\nend",
  "    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend", "    local longest\n\
    \    local len = 0\n    for i = 1, #strings do\n        local s = strings[i]\n\
    \        if #s > len then\n            longest = s\n            len = #s\n   \
    \     end\n    end\n    return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local ret = strings[1]\n  for _, str in ipairs(strings) do\n \
    \   if #str > #ret then\n      ret = str\n    end\n  end\n  return ret\nend",
  "    if #strings == 0 then\n        return nil\n    end\n    local len = #strings[1]\n\
    \    local longest = strings[1]\n    for _, s in ipairs(strings) do\n        if\
    \ #s > len then\n            len = #s\n            longest = s\n        end\n\
    \    end\n    return longest\nend", "    if #strings > 0 then\n        local longest_string\
    \ = strings[1]\n        for _, v in ipairs(strings) do\n            if #v > #longest_string\
    \ then\n                longest_string = v\n            end\n        end\n   \
    \     return longest_string\n    end\nend", "    local index, length = nil, 0\n\
    \    for i, str in ipairs(strings) do\n        if #str > length then\n       \
    \     index, length = i, #str\n        end\n    end\n    return index and strings[index]\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for _,s in ipairs(strings) do\n    if #s > #longest then\n      longest = s\n\
    \    end\n  end\n  return longest\nend", "    local longest_length, longest_string\
    \ = 0, nil\n    for _, s in ipairs(strings) do\n        if #s > longest_length\
    \ then\n            longest_length, longest_string = #s, s\n        end\n    end\n\
    \    return longest_string\nend", "    if #strings == 0 then\n        return nil\n\
    \    end\n    table.sort(strings, function(a, b) return #a > #b end)\n    return\
    \ strings[1]\nend", "  local longest_string = \"\"\n  local max_length = 0\n \
    \ for _, s in ipairs(strings) do\n    if #s > max_length then\n      max_length\
    \ = #s\n      longest_string = s\n    end\n  end\n  return longest_string\nend",
  "    local longest = nil\n    for _, s in ipairs(strings) do\n        if longest\
    \ == nil or #s > #longest then\n            longest = s\n        end\n    end\n\
    \    return longest\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
