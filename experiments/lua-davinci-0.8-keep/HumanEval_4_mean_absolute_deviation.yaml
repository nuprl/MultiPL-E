name: HumanEval_4_mean_absolute_deviation
language: lua
prompt: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
  -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute\
  \ difference between each\n-- element and a centerpoint (mean in this case):\n--\
  \ MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
  -- 1.0\nlocal function mean_absolute_deviation(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
  \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
  \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    assert(type(numbers) == \"table\", \"numbers must be a table!\"\
    )\n    assert(#numbers > 0, \"numbers must have at least one element!\")\n   \
    \ assert(#numbers <= 128, \"numbers must have no more than 128 elements!\")",
  "    assert(type(numbers) == \"table\", \"Invalid argument\")\n    local sum, count\
    \ = 0, 0\n    for _, n in ipairs(numbers) do\n        sum = sum + n\n        count\
    \ = count + 1\n    end\n    local mean = sum / count\n    local mad = 0\n    for\
    \ _, n in ipairs(numbers) do\n        mad = mad + math.abs(n - mean)\n    end\n\
    \    return mad / count\nend", "  local avg = mean(numbers)\n  local abs_differences\
    \ = {}\n  for _, number in ipairs(numbers) do\n    table.insert(abs_differences,\
    \ math.abs(number - avg))\n  end\n  return mean(abs_differences)\nend", "  local\
    \ n = #numbers\n  local mean = sum(numbers) / n\n  local difference_from_mean\
    \ = table_map(numbers, function(x)\n    return math.abs(x - mean)\n  end)\n  return\
    \ sum(difference_from_mean) / n\nend", "    local sum = 0\n    local mean = nil\n\
    \    local len = 0\n    if type(numbers) == \"table\" then\n        sum = 0\n\
    \        len = #numbers\n        for i, v in ipairs(numbers) do\n            sum\
    \ = sum + v\n        end\n        mean = sum / len\n    else\n        return nil\n\
    \    end\n    if mean == nil then\n        return nil\n    end\n    sum = 0\n\
    \    for i, v in ipairs(numbers) do\n        sum = sum + math.abs(v - mean)\n\
    \    end\n    return sum / len\nend\n_M.mean_absolute_deviation = mean_absolute_deviation",
  "\tlocal mean = mean(numbers)\n\tlocal deviations = table.map(numbers, function(v)\
    \ return math.abs(v - mean) end)\n\treturn mean(deviations)\nend", "    local\
    \ sum = 0\n    local m = mean(numbers)\n    for _, number in ipairs(numbers) do\n\
    \        sum = sum + math.abs(number - m)\n    end\n    return sum / #numbers\n\
    end", "  local mean = mean(numbers)\n  local dev = 0.0\n  for _,number in ipairs(numbers)\
    \ do\n    dev = dev + math.abs(number - mean)\n  end\n  return dev / #numbers\n\
    end", "    local mean = mean(numbers)\n    local absolute_deviations = {}\n  \
    \  for _, number in ipairs(numbers) do\n        table.insert(absolute_deviations,\
    \ math.abs(number - mean))\n    end\n    return mean(absolute_deviations)\nend",
  "  local num_numbers = #numbers\n  if num_numbers == 0 then\n    return nil\n  end\n\
    \  local mean = average(numbers)\n  local absolute_deviations = {}\n  for _, number\
    \ in ipairs(numbers) do\n    local absolute_deviation = math.abs(number - mean)\n\
    \    table.insert(absolute_deviations, absolute_deviation)\n  end\n  return average(absolute_deviations)\n\
    end", "  local _mean = mean(numbers)\n  local _deviations = map(function(x) return\
    \ math.abs(x - _mean) end, numbers)\n  return mean(_deviations)\nend", "    local\
    \ count = 0\n    local sum = 0\n    local mean = 0\n    local abs_diff_sum = 0\n\
    \    for i, n in ipairs(numbers) do\n        count = count + 1\n        sum =\
    \ sum + n\n    end\n    mean = sum / count\n    for i, n in ipairs(numbers) do\n\
    \        abs_diff_sum = abs_diff_sum + math.abs(n - mean)\n    end\n    return\
    \ abs_diff_sum / count\nend", "    local mean = mean(numbers)\n    local abs_diff\
    \ = {}\n    for _,x in ipairs(numbers) do\n        table.insert(abs_diff, math.abs(x\
    \ - mean))\n    end\n    return mean(abs_diff)\nend", "  local mean = mean(numbers)\n\
    \  local total = 0\n  for _, x in ipairs(numbers) do\n    total = total + math.abs(x\
    \ - mean)\n  end\n  return total / #numbers\nend", "    assert(type(numbers) ==\
    \ \"table\", \"expected table, got \" .. type(numbers))\n    assert(#numbers >\
    \ 0, \"expected at least one element in table\")\n    for _, x in ipairs(numbers)\
    \ do\n        assert(type(x) == \"number\", \"expected number, got \" .. type(x))\n\
    \    end\n    local mean = mean(numbers)\n    local sum = 0\n    for _, x in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(x - mean)\n    end\n    return sum / #numbers\n\
    end", "    local num_sum = 0\n    local abs_sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        num_sum = num_sum + number\n        abs_sum = abs_sum + math.abs(number)\n\
    \    end\n    local num_avg = num_sum / #numbers\n    local abs_avg = abs_sum\
    \ / #numbers\n    return abs_avg - num_avg\nend", "    local sum = 0\n    local\
    \ length = 0\n    local mean = 0\n    for _, number in ipairs(numbers) do\n  \
    \      sum = sum + number\n        length = length + 1\n    end\n    mean = sum\
    \ / length\n    local sum_abs_diff = 0\n    for _, number in ipairs(numbers) do\n\
    \        sum_abs_diff = sum_abs_diff + math.abs(number - mean)\n    end\n    return\
    \ sum_abs_diff / length\nend", "    local mean = mean(numbers)\n    local deviations\
    \ = {}\n    for _,x in ipairs(numbers) do\n        table.insert(deviations, math.abs(x\
    \ - mean))\n    end\n    return mean(deviations)\nend", "  local mean = mean(numbers)\n\
    \  local diffs = {}\n  for _, num in ipairs(numbers) do\n    table.insert(diffs,\
    \ math.abs(num - mean))\n  end\n  return mean(diffs)\nend", "    if type(numbers)\
    \ ~= \"table\" then\n        error(\n            \"'mean_absolute_deviation' expects\
    \ a 'table' as its only argument, \"\n            .. \"but found '\" .. type(numbers)\
    \ .. \"'\"\n        )\n    end", "    local average = mean(numbers)\n    local\
    \ deltas = map(numbers, function(x) return math.abs(x - average) end)\n    return\
    \ mean(deltas)\nend", "    local sz = #numbers\n    local x_mean = mean(numbers)\n\
    \    local sum = 0\n    for i = 1, sz do\n        sum = sum + math.abs(numbers[i]\
    \ - x_mean)\n    end\n    return sum / sz\nend", "    local mean = mean(numbers)\n\
    \    local abs_diff = {}\n    for i = 1, #numbers do\n        abs_diff[i] = math.abs(numbers[i]\
    \ - mean)\n    end\n    return mean(abs_diff)\nend", "\tlocal count = #numbers\n\
    \tif count == 0 then\n\t\treturn 0\n\tend\n\tlocal sum = 0\n\tfor i = 1, count\
    \ do\n\t\tsum = sum + numbers[i]\n\tend\n\tlocal mean = sum / count\n\tlocal deviations\
    \ = {}\n\tfor i = 1, count do\n\t\tdeviations[i] = math.abs(numbers[i] - mean)\n\
    \tend\n\treturn mean_absolute_deviation(deviations)\nend", "  local mean = average(numbers)\n\
    \  local absolute_differences = {}\n  for _, number in ipairs(numbers) do\n  \
    \  table.insert(absolute_differences, math.abs(number - mean))\n  end\n  return\
    \ average(absolute_differences)\nend", "  local mean_val = mean(numbers)\n  local\
    \ deviations = {}\n  for _, val in ipairs(numbers) do\n    table.insert(deviations,\
    \ math.abs(val - mean_val))\n  end\n  return mean(deviations)\nend", "    -- Check\
    \ that the input is a list of numbers\n    assert(type(numbers) == \"table\",\
    \ \"Input argument must be a table\")\n    for _, v in ipairs(numbers) do\n  \
    \      assert(type(v) == \"number\", \"Input argument must be a table of numbers\"\
    )\n    end", "  local sum = 0\n  local count = 0\n  for _, x in ipairs(numbers)\
    \ do\n    sum = sum + x\n    count = count + 1\n  end\n  local mean = sum / count\n\
    \  local mad = 0\n  for _, x in ipairs(numbers) do\n    mad = mad + math.abs(x\
    \ - mean)\n  end\n  return mad / count\nend", "    local n_count = #numbers\n\
    \    local n_sum = 0.0\n    for _, n in ipairs(numbers) do\n        n_sum = n_sum\
    \ + n\n    end\n    local n_mean = n_sum / n_count\n    local n_absdev_sum = 0.0\n\
    \    for _, n in ipairs(numbers) do\n        n_absdev_sum = n_absdev_sum + math.abs(n\
    \ - n_mean)\n    end\n    return n_absdev_sum / n_count\nend", "    local abs_deviations\
    \ = {}\n    local n = #numbers\n    local mean = 0.0\n    for i = 1, n do\n  \
    \      mean = mean + numbers[i]\n    end\n    mean = mean / n\n    for i = 1,\
    \ n do\n        abs_deviations[i] = math.abs(numbers[i] - mean)\n    end\n   \
    \ return mean_of_list(abs_deviations)\nend", "  local count = 0\n  local sum =\
    \ 0\n  local m = mean(numbers)\n  for i, v in ipairs(numbers) do\n    local diff\
    \ = math.abs(v - m)\n    count = count + 1\n    sum = sum + diff\n  end\n  return\
    \ sum / count\nend", "    local t_mean = mean(numbers)\n    local total = 0\n\
    \    for _, v in ipairs(numbers) do\n        total = total + math.abs(v - t_mean)\n\
    \    end\n    return total / #numbers\nend", "    local numbers_mean = average(numbers)\n\
    \    local abs_differences = {}\n    for _, v in ipairs(numbers) do\n        table.insert(abs_differences,\
    \ math.abs(v - numbers_mean))\n    end\n    return average(abs_differences)\n\
    end", "    local numbers_mean = mean(numbers)\n    local abs_deviations = map(numbers,\
    \ function(x) return math.abs(x - numbers_mean) end)\n    return mean(abs_deviations)\n\
    end", "    local sum = 0\n    local count = 0\n    for _,x in ipairs(numbers)\
    \ do\n        sum = sum + x\n        count = count + 1\n    end\n    local average\
    \ = sum / count\n    local sum = 0\n    for _,x in ipairs(numbers) do\n      \
    \  sum = sum + math.abs(x - average)\n    end\n    return sum / count\nend", " \
    \   -- Calculate mean\n    local mean = average(numbers)\n    -- Calculate differences\
    \ from mean\n    local diffs = {}\n    for _,number in ipairs(numbers) do\n  \
    \      table.insert(diffs, math.abs(number - mean))\n    end\n    -- Return mean\
    \ of the differences\n    return average(diffs)\nend", "  local sum = 0\n  local\
    \ x_mean = mean(numbers)\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - x_mean)\n  end\n  return sum / #numbers\nend", "  if (#numbers < 2) then\n\
    \    return -1\n  end\n  local mean = sum(numbers) / #numbers\n  local abs_diff\
    \ = {}\n  for i,number in ipairs(numbers) do\n    abs_diff[i] = math.abs(number\
    \ - mean)\n  end\n  return sum(abs_diff) / #abs_diff\nend", "    local sum = 0\n\
    \    local mean = 0\n    local mean_absolute_deviation = 0\n    local abs_sum\
    \ = 0\n    local count = 0\n    local number = 0", "  -- Get a standard centerpoint\
    \ to compare numbers to\n  local center = mean(numbers)\n  -- \"map\" a function\
    \ to all elements of a list, returning new list\n  local absolute_deviations =\
    \ map(numbers, function(x)\n      return math.abs(x - center)\n    end)\n  --\
    \ Return the average absolute deviation\n  return mean(absolute_deviations)\n\
    end", "    local mean = mean(numbers)\n    local abs_differences = map(function(x)\
    \ return math.abs(x - mean) end, numbers)\n    return mean(abs_differences)\n\
    end", "    local mean = mean(numbers)\n    local sum = 0\n    for _, num in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(num - mean)\n    end\n    return sum / #numbers\n\
    end", "    local count = #numbers\n    local mean = statistics.mean(numbers)\n\
    \    local sum = 0\n    for _, number in ipairs(numbers) do\n        sum = sum\
    \ + math.abs(number - mean)\n    end\n    return sum / count\nend", "  if not\
    \ check_list(numbers) then\n    error(\"mean_absolute_deviation expects a non-empty\
    \ array of numbers.\")\n  end\n  local sum = 0\n  local average = mean(numbers)\n\
    \  for _, num in ipairs(numbers) do\n    sum = sum + math.abs(num - average)\n\
    \  end\n  return sum / #numbers\nend", "\tlocal numbers_sum = 0.0\n\tlocal numbers_count\
    \ = 0", "    local sum, count = 0, 0\n    for i, v in ipairs(numbers) do\n   \
    \     sum = sum + v\n        count = count + 1\n    end\n    local mean = sum\
    \ / count\n    local sum_of_differences, count = 0, 0\n    for i, v in ipairs(numbers)\
    \ do\n        sum_of_differences = sum_of_differences + math.abs(v - mean)\n \
    \       count = count + 1\n    end\n    return sum_of_differences / count\nend",
  "    if #numbers < 2 then\n        return 0.0\n    end\n    local sum = 0.0\n  \
    \  local mean = Mean(numbers)\n    for _, v in ipairs(numbers) do\n        sum\
    \ = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\nend", "    local\
    \ avg = mean(numbers)\n    local sum = 0\n    for _, v in ipairs(numbers) do\n\
    \        sum = sum + math.abs(v - avg)\n    end\n    return sum / #numbers\nend",
  "    if type(numbers) ~= \"table\" then return nil end\n    if #numbers == 0 then\
    \ return nil end\n    local sum = 0\n    for i = 1, #numbers do\n        sum =\
    \ sum + numbers[i]\n    end\n    local mean = sum / #numbers\n    sum = 0\n  \
    \  for i = 1, #numbers do\n        sum = sum + math.abs(numbers[i] - mean)\n \
    \   end\n    return sum / #numbers\nend", "    local count = #numbers\n    if\
    \ count == 0 then\n        return 0\n    end\n    local sum = 0\n    for _, n\
    \ in ipairs(numbers) do\n        sum = sum + n\n    end\n    local mean = sum\
    \ / count\n    local absolute_differences = {}\n    for _, n in ipairs(numbers)\
    \ do\n        local absolute_difference = math.abs(n - mean)\n        table.insert(absolute_differences,\
    \ absolute_difference)\n    end\n    local sum_absolute_differences = 0\n    for\
    \ _, n in ipairs(absolute_differences) do\n        sum_absolute_differences =\
    \ sum_absolute_differences + n\n    end\n    local mad = sum_absolute_differences\
    \ / count\n    return mad\nend", "    local sum, avg, out = 0, 0, 0\n    local\
    \ count = #numbers\n    for i, v in ipairs(numbers) do\n        sum = sum + v\n\
    \    end\n    avg = sum / count\n    for i, v in ipairs(numbers) do\n        out\
    \ = out + math.abs(v - avg)\n    end\n    return out / count\nend", "  local mean\
    \ = avg(numbers)\n  local absolute_deviations = {}\n  for _, number in ipairs(numbers)\
    \ do\n    table.insert(absolute_deviations, math.abs(number - mean))\n  end\n\
    \  return avg(absolute_deviations)\nend", "    local mean = mean(numbers)\n  \
    \  local total = 0\n    for _, n in ipairs(numbers) do\n        total = total\
    \ + math.abs(n - mean)\n    end\n    return total / #numbers\nend", "\tlocal mean_deviations\
    \ = {}\n\tlocal sum = 0\n\tlocal count = 0\n\tfor _, n in ipairs(numbers) do\n\
    \t\tif type(n) == \"number\" then\n\t\t\tsum = sum + n\n\t\t\tcount = count +\
    \ 1\n\t\tend\n\tend\n\tlocal mean = sum / count\n\tfor _, n in ipairs(numbers)\
    \ do\n\t\tif type(n) == \"number\" then\n\t\t\ttable.insert(mean_deviations, math.abs(n\
    \ - mean))\n\t\tend\n\tend\n\treturn sum / count\nend", "    local mean = table.reduce(numbers,\
    \ function(sum, value)\n        return sum + value\n    end, 0) / #numbers\n \
    \   local sum = table.reduce(numbers, function(sum, value)\n        return sum\
    \ + math.abs(value - mean)\n    end, 0)\n    return sum / #numbers\nend", "  local\
    \ total = 0\n  local mean = mean(numbers)\n  for _,number in ipairs(numbers) do\n\
    \    total = total + math.abs(number - mean)\n  end\n  return total / #numbers\n\
    end", "    local sum = 0\n    local centerpoint = mean(numbers)\n    for _, v\
    \ in ipairs(numbers) do\n        sum = sum + math.abs(v - centerpoint)\n    end\n\
    \    return sum / #numbers\nend", "  local mean = mean(numbers)\n  local deviations\
    \ = map(numbers, function(n) return math.abs(n - mean) end)\n  return mean(deviations)\n\
    end", "  return _.reduce(numbers, function(sum, x)\n    return sum + math.abs(x\
    \ - _.mean(numbers))\n  end, 0) / (#numbers - 1)\nend", "    local sum = 0.0\n\
    \    local len = #numbers\n    for _, num in ipairs(numbers) do\n        sum =\
    \ sum + num\n    end\n    local mean = sum / len\n    sum = 0.0\n    for _, num\
    \ in ipairs(numbers) do\n        sum = sum + math.abs(num - mean)\n    end\n \
    \   return sum / len\nend", "  local n = len(numbers)\n  local avg = mean(numbers)\n\
    \  local sum = 0\n  for i = 1, n do\n    sum = sum + math.abs(numbers[i] - avg)\n\
    \  end\n  return sum / n\nend", "    local total = 0.0\n    local mean = mean(numbers)\n\
    \    for _, n in ipairs(numbers) do\n        total = total + math.abs(n - mean)\n\
    \    end\n    return total / #numbers\nend", "    local mean = mean(numbers)\n\
    \    local differences = {}\n    for _,number in ipairs(numbers) do\n        table.insert(differences,\
    \ number - mean)\n    end\n    local abs_differences = abs(differences)\n    return\
    \ mean(abs_differences)\nend", "    local sum = 0.0\n    local avg = mean(numbers)\n\
    \    for i, val in ipairs(numbers) do\n        sum = sum + math.abs(val - avg)\n\
    \    end\n    return sum / #numbers\nend", "    local n = 0\n    local sum = 0\n\
    \    local sum_sq = 0\n    for i, x in ipairs(numbers) do\n        n = n + 1\n\
    \        sum = sum + x\n        sum_sq = sum_sq + x*x\n    end\n    local mean\
    \ = sum / n\n    local mean_sq = sum_sq / n\n    local variance = math.max(0,\
    \ mean_sq - mean*mean)\n    local stddev = math.sqrt(variance)\n    local absdev\
    \ = 0\n    for i, x in ipairs(numbers) do\n        absdev = absdev + math.abs(x\
    \ - mean)\n    end\n    return absdev / n, stddev\nend", "    local mean = arithmetic_mean(numbers)\n\
    \    local deviations = {}\n    for _, number in ipairs(numbers) do\n        deviations[#deviations\
    \ + 1] = math.abs(number - mean)\n    end\n    return arithmetic_mean(deviations)\n\
    end", "    local mean = mean(numbers)\n    local sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end", "    local dev = 0\n    local mean = get_mean(numbers)\n    for _, x in\
    \ ipairs(numbers) do\n        dev = dev + math.abs(x - mean)\n    end\n    return\
    \ dev / #numbers\nend", "    -- Calculate the mean\n    local mean = average(numbers)\n\
    \    -- Calculate the absolute value of difference between each element and\n\
    \    -- the mean and return the average of those values\n    return average(map(function(x)\
    \ return math.abs(x - mean) end, numbers))\nend", "    local sum = 0\n    local\
    \ n = 0\n    for _, num in ipairs(numbers) do\n        sum = sum + num\n     \
    \   n = n + 1\n    end\n    local mean = sum / n\n    local mad = 0\n    for _,\
    \ num in ipairs(numbers) do\n        mad = mad + math.abs(num - mean)\n    end\n\
    \    return mad / n\nend", "    -- First calculate the mean\n    local sum = 0\n\
    \    for _, x in ipairs(numbers) do\n        sum = sum + x\n    end\n    local\
    \ mean = sum / #numbers", "  local sum = 0\n  local center = mean(numbers)\n \
    \ for i = 1, #numbers do\n    sum = sum + math.abs(numbers[i] - center)\n  end\n\
    \  return sum / #numbers\nend", "  return average(absolute_differences(numbers,\
    \ mean(numbers)))\nend", "  local num_count = 0\n  local sum = 0\n  for _, value\
    \ in ipairs(numbers) do\n    sum = sum + value\n    num_count = num_count + 1\n\
    \  end\n  local mean = sum / num_count\n  local mad = 0\n  for _, value in ipairs(numbers)\
    \ do\n    mad = mad + math.abs(value - mean)\n  end\n  return mad / num_count\n\
    end", "    local mean = mean(numbers)\n    local abs_sum = 0\n    for _, number\
    \ in ipairs(numbers) do\n        abs_sum = abs_sum + math.abs(number - mean)\n\
    \    end\n    return abs_sum / #numbers\nend", "    local _mean = mean(numbers)\n\
    \    local _abs_diff_from_mean = map(numbers, function(n) return math.abs(n -\
    \ _mean) end)\n    return mean(_abs_diff_from_mean)\nend", "    local mean = average(numbers)\n\
    \    local sum = 0.0\n    for _, n in ipairs(numbers) do\n        sum = sum +\
    \ math.abs(n - mean)\n    end\n    return sum / #numbers\nend", "  local mean\
    \ = mean(numbers)\n  local sum = 0\n  for _, num in ipairs(numbers) do\n    sum\
    \ = sum + math.abs(num - mean)\n  end\n  return sum / #numbers\nend", "  local\
    \ sum = 0\n  local mean = mean(numbers)\n  for i, v in ipairs(numbers) do\n  \
    \  sum = sum + math.abs(v - mean)\n  end\n  return sum / #numbers\nend", "   \
    \ local mean = utils.mean(numbers)\n    local sum = 0\n    for i, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end", "    local mean = mean(numbers)\n    local sum = 0.0\n    for i = 1, #numbers\
    \ do\n        sum = sum + math.abs(numbers[i] - mean)\n    end\n    return sum\
    \ / #numbers\nend", "  local length = #numbers\n  if length == 0 then\n    return\
    \ nil\n  end\n  local sum = 0\n  for _, number in ipairs(numbers) do\n    sum\
    \ = sum + number\n  end\n  local mean = sum / length\n  sum = 0\n  for _, number\
    \ in ipairs(numbers) do\n    sum = sum + math.abs(number - mean)\n  end\n  return\
    \ sum / length\nend", "  local t = mean(numbers)\n  local sum = 0\n  for _, num\
    \ in ipairs(numbers) do\n    sum = sum + math.abs(num - t)\n  end\n  return sum\
    \ / #numbers\nend", "    local mean = mean(numbers)\n    local total = 0\n   \
    \ for _, number in ipairs(numbers) do\n        total = total + math.abs(number\
    \ - mean)\n    end\n    return total / #numbers\nend", "  local mean = mean(numbers)\n\
    \  local absolute_deviations = {}\n  for _, n in ipairs(numbers) do\n    absolute_deviations[#absolute_deviations\
    \ + 1] = math.abs(n - mean)\n  end\n  return mean(absolute_deviations)\nend",
  "    local mean = lm.average(numbers)\n    local absolute_deviations = lm.map(numbers,\
    \ function(number)\n        return math.abs(number - mean)\n    end)\n    return\
    \ lm.average(absolute_deviations)\nend", "    local sum = 0\n    local count =\
    \ 0\n    for i = 1, #numbers do\n        local x = numbers[i]\n        sum = sum\
    \ + x\n        count = count + 1\n    end\n    local x_mean = sum / count\n  \
    \  local sum_diff_squared = 0\n    for i = 1, #numbers do\n        local x = numbers[i]\n\
    \        local diff = x - x_mean\n        local diff_abs = math.abs(diff)\n  \
    \      sum_diff_squared = sum_diff_squared + diff_abs\n    end\n    local x_deviation\
    \ = sum_diff_squared / count\n    return x_deviation\nend", "    local mean =\
    \ math.average(numbers)\n    local sum = 0\n    for i = 1, #numbers do\n     \
    \   sum = sum + math.abs(numbers[i] - mean)\n    end\n    return sum / #numbers\n\
    end", "    local count = #numbers\n    local mean = simple_mean(numbers)\n   \
    \ local sum = 0\n    for i = 1, count do\n        sum = sum + math.abs(numbers[i]\
    \ - mean)\n    end\n    return sum / count\nend", "\tlocal m = mean(numbers)\n\
    \tlocal abs_diff = {}\n\tfor _, v in ipairs(numbers) do\n\t\ttable.insert(abs_diff,\
    \ math.abs(v - m))\n\tend\n\treturn mean(abs_diff)\nend", "  if #numbers < 2 then\n\
    \    return 0\n  end\n  local mean = mean(numbers)\n  local abs_diffs = {}\n \
    \ for _, num in ipairs(numbers) do\n    table.insert(abs_diffs, math.abs(num -\
    \ mean))\n  end\n  return mean(abs_diffs)\nend", "    local mean = list_mean(numbers)\n\
    \    local sum = 0\n    for i = 1, #numbers do\n        sum = sum + math.abs(numbers[i]\
    \ - mean)\n    end\n    return sum / #numbers\nend", "    local mean = mean(numbers)\n\
    \    local absolute_diffs = {}\n    for i, num in ipairs(numbers) do\n       \
    \ absolute_diffs[i] = math.abs(num - mean)\n    end\n    return mean(absolute_diffs)\n\
    end", "    local num = #numbers\n    local sum = 0\n    local mean = 0\n    for\
    \ _, v in ipairs(numbers) do\n        sum = sum + v\n    end\n    mean = sum /\
    \ num\n    sum = 0\n    for _, v in ipairs(numbers) do\n        sum = sum + math.abs(v\
    \ - mean)\n    end\n    return sum / num\nend", "    local x_mean = mean(numbers)\n\
    \    local list_diff = {}\n    for _, x in ipairs(numbers) do\n        table.insert(list_diff,\
    \ math.abs(x - x_mean))\n    end\n    return mean(list_diff)\nend", "  local mean\
    \ = 0\n  for _, number in ipairs(numbers) do\n    mean = mean + number\n  end\n\
    \  mean = mean / #numbers", "  local mean = mean(numbers)\n  local abs_diff =\
    \ {}\n  for i = 1, #numbers do\n    abs_diff[i] = math.abs(numbers[i] - mean)\n\
    \  end\n  return mean(abs_diff)\nend", "  if not numbers or #numbers == 0 then\n\
    \    return 0.0\n  end\n  local sum = 0.0\n  local mean = average(numbers)\n \
    \ for i, num in ipairs(numbers) do\n    sum = sum + math.abs(num - mean)\n  end\n\
    \  return sum / #numbers\nend", "    assert(numbers ~= nil, \"Numbers must not\
    \ be nil!\")\n    assert(#numbers > 0, \"Numbers must not be empty!\")", "   \
    \ local n = #numbers\n    local sum_abs_deviation = 0.0\n    local sum = 0.0\n\
    \    for i = 1, n do\n        sum = sum + numbers[i]\n    end\n    local mean\
    \ = sum / n\n    for i = 1, n do\n        sum_abs_deviation = sum_abs_deviation\
    \ + abs(numbers[i] - mean)\n    end\n    return sum_abs_deviation / n\nend", " \
    \ local mean = stats.mean(numbers)\n  local sum = 0\n  for _, n in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(n - mean)\n  end\n  return sum / #numbers\nend",
  "    assert(type(numbers) == \"table\", \"Input must be a table\")\n    local sum\
    \ = 0\n    local average = mean(numbers)\n    for _, v in ipairs(numbers) do\n\
    \        sum = sum + math.abs(v - average)\n    end\n    return sum / #numbers\n\
    end", "    if #numbers == 0 then\n        return 0\n    end\n    local sum = 0\n\
    \    local mean = math.mean(numbers)\n    for _, v in ipairs(numbers) do\n   \
    \     sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\nend",
  "  local mean = arithmetic_mean(numbers)\n  local squared_sum = 0\n  for _, v in\
    \ ipairs(numbers) do\n    squared_sum = squared_sum + ((v - mean) * (v - mean))\n\
    \  end\n  return math.sqrt(squared_sum / #numbers)\nend", "    local mean = mean(numbers)\n\
    \    local sum = 0.0\n    for _, v in ipairs(numbers) do\n        sum = sum +\
    \ math.abs(v - mean)\n    end\n    return sum / #numbers\nend", "    local mean\
    \ = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers do\n        sum\
    \ = sum + math.abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend",
  "    local mean = mean(numbers)\n    local absolute_deviations = {}\n    for _,\
    \ v in ipairs(numbers) do\n        table.insert(absolute_deviations, math.abs(v\
    \ - mean))\n    end\n    return mean(absolute_deviations)\nend", "  local average\
    \ = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers) do\n  \
    \  sum = sum + math.abs(number - average)\n  end\n  return sum / #numbers\nend",
  "    local mean = math.mean(numbers)\n    local sum = 0\n    for i, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end", "    local mean = mean(numbers)\n    local deviations = {}\n    for _, number\
    \ in ipairs(numbers) do\n        table.insert(deviations, math.abs(number - mean))\n\
    \    end\n    return mean(deviations)\nend", "    local mean = 0\n    for _, value\
    \ in ipairs(numbers) do\n        mean = mean + value\n    end\n    mean = mean\
    \ / #numbers", "  local sum = 0\n  local x_mean = mean(numbers)\n  for _, x in\
    \ ipairs(numbers) do\n    sum = sum + math.abs(x - x_mean)\n  end\n  return sum\
    \ / #numbers\nend", "    if #numbers == 0 then\n        return 0.0\n    end\n\
    \    local mean = mean(numbers)\n    local sum = 0.0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end", "  local sum = 0\n  local mean = average(numbers)\n  for i = 1, #numbers\
    \ do\n    sum = sum + math.abs(numbers[i] - mean)\n  end\n  return sum / #numbers\n\
    end", "    local mean = mean(numbers)\n    local abs_differences = map(function(x)\
    \ return math.abs(x - mean) end, numbers)\n    return mean(abs_differences)\n\
    end", "  local x_mean = mean(numbers)\n  local abs_diff = function(elem) return\
    \ math.abs(elem - x_mean) end\n  return mean(map(abs_diff, numbers))\nend", " \
    \   local mean = arithmetic_mean(numbers)\n    local sum = 0\n    for _, n in\
    \ ipairs(numbers) do\n        sum = sum + math.abs(n - mean)\n    end\n    return\
    \ sum / (#numbers)\nend", "    local mean = average(numbers)\n    local sum =\
    \ 0\n    for _, n in ipairs(numbers) do\n        sum = sum + math.abs(n - mean)\n\
    \    end\n    return sum / #numbers\nend", "    local mean = 0\n    for _, number\
    \ in ipairs(numbers) do\n        mean = mean + number\n    end\n    mean = mean\
    \ / #numbers", "    local mean = average(numbers)\n    local sum = 0\n    for\
    \ _, v in ipairs(numbers) do\n        sum = sum + math.abs(v - mean)\n    end\n\
    \    return sum / (#numbers)\nend", "    if not numbers or #numbers == 0 then\n\
    \        return 0\n    end\n    local mean = table.avg(numbers)\n    local diffs\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(diffs, math.abs(number\
    \ - mean))\n    end\n    return table.avg(diffs)\nend", "    local n = #numbers\n\
    \    if n == 0 then\n        return 0\n    end\n    local mean = mean(numbers)\n\
    \    local mad = 0\n    for _, x in ipairs(numbers) do\n        mad = mad + math.abs(x\
    \ - mean)\n    end\n    return mad / n\nend", "    local mad = 0.0\n    local\
    \ sum = 0.0\n    local n = 0", "    local mean = calculate_mean(numbers)\n   \
    \ local abs_diffs = {}\n    for _, num in ipairs(numbers) do\n        table.insert(abs_diffs,\
    \ math.abs(num - mean))\n    end\n    return calculate_mean(abs_diffs)\nend",
  "    local sum = 0\n    local count = 0\n    for _, v in ipairs(numbers) do\n  \
    \      sum = sum + v\n        count = count + 1\n    end\n    local mean = sum\
    \ / count\n    sum = 0\n    for _, v in ipairs(numbers) do\n        sum = sum\
    \ + math.abs(v - mean)\n    end\n    return sum / count\nend", "    local sum\
    \ = 0\n    local sum_squares = 0\n    local count = 0\n    for _, x in ipairs(numbers)\
    \ do\n        count = count + 1\n        sum = sum + x\n        sum_squares =\
    \ sum_squares + x * x\n    end\n    local mean = sum / count\n    local variance\
    \ = (sum_squares / count) - (mean * mean)\n    local stddev = math.sqrt(variance)\n\
    \    return stddev\nend", "    if #numbers < 2 then\n        return 0.0\n    end\n\
    \    local numbers_sum = 0.0\n    for _, number in ipairs(numbers) do\n      \
    \  numbers_sum = numbers_sum + number\n    end\n    local numbers_mean = numbers_sum\
    \ / #numbers\n    local deviation_sum = 0.0\n    for _, number in ipairs(numbers)\
    \ do\n        deviation_sum = deviation_sum + math.abs(number - numbers_mean)\n\
    \    end\n    return deviation_sum / #numbers\nend", "  local mean = mean(numbers)\n\
    \  local deviances = {}\n  for i = 1, #numbers do\n    deviances[i] = math.abs(numbers[i]\
    \ - mean)\n  end\n  return mean(deviances)\nend", "    local length = #numbers\n\
    \    local sum = 0\n    local mean = 0\n    for _, v in ipairs(numbers) do\n \
    \       sum = sum + v\n    end\n    mean = sum / length\n    sum = 0\n    for\
    \ _, v in ipairs(numbers) do\n        sum = sum + math.abs(v - mean)\n    end\n\
    \    return sum / length\nend", "  if #numbers == 0 then\n    return 0.0\n  end\n\
    \  local x_mean = stats.mean(numbers)\n  local deviations = {}\n  for _, x in\
    \ ipairs(numbers) do\n    table.insert(deviations, math.abs(x - x_mean))\n  end\n\
    \  return stats.mean(deviations)\nend", "\tlocal mean = sum(numbers) / #numbers\n\
    \tlocal abs_diffs = map(function(num) return math.abs(num - mean) end, numbers)\n\
    \treturn sum(abs_diffs) / #abs_diffs\nend", "    local mean = mean(numbers)\n\
    \    local dev = {}\n    for _, e in ipairs(numbers) do\n        table.insert(dev,\
    \ math.abs(e - mean))\n    end\n    return mean(dev)\nend", "  local numbers_mean\
    \ = mean(numbers)\n  local squares_deviation = {}\n  for _, v in ipairs(numbers)\
    \ do\n    table.insert(squares_deviation, math.abs(v - numbers_mean))\n  end\n\
    \  return mean(squares_deviation)\nend", "  local sum = 0\n  local count = 0\n\
    \  for _, number in ipairs(numbers) do\n    sum = sum + number\n    count = count\
    \ + 1\n  end\n  local mean = sum / count\n  local sum = 0\n  for _, number in\
    \ ipairs(numbers) do\n    sum = sum + math.abs(number - mean)\n  end\n  return\
    \ sum / count\nend", "    local mean = 0.0\n    local sum = 0.0\n    for _, number\
    \ in ipairs(numbers) do\n        sum = sum + number\n    end\n    mean = sum /\
    \ #numbers\n    local mad = 0.0\n    sum = 0.0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    mad = sum / #numbers\n\
    \    return mad\nend", "    local mean = mean(numbers)\n    local abs_diffs =\
    \ map(numbers, function(x) return math.abs(x - mean) end)\n    return mean(abs_diffs)\n\
    end", "  local mean = mean(numbers)\n  local sum = 0\n  for _, v in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(v - mean)\n  end\n  return sum / #numbers\nend",
  "    local mean = sum(numbers) / #numbers\n    local total = 0\n    for _, number\
    \ in ipairs(numbers) do\n        total = total + math.abs(number - mean)\n   \
    \ end\n    return total / #numbers\nend", "\tassert(numbers ~= nil, \"numbers\
    \ must not be nil\")\n\tassert(type(numbers) == \"table\", \"numbers must be a\
    \ table\")\n\tassert(#numbers > 0, \"numbers must not be empty\")", "    local\
    \ mean = mean(numbers)\n    local abs_distances = {}\n    for i, n in ipairs(numbers)\
    \ do\n        table.insert(abs_distances, math.abs(n - mean))\n    end\n    return\
    \ mean(abs_distances)\nend", "  local sum = 0\n  local mean = mean(numbers)\n\
    \  for _, num in ipairs(numbers) do\n    sum = sum + math.abs(num - mean)\n  end\n\
    \  return sum / #numbers\nend", "    local mean = mean(numbers)\n    local sum\
    \ = 0\n    for _, v in ipairs(numbers) do\n        sum = sum + math.abs(v - mean)\n\
    \    end\n    return sum / #numbers\nend", "    local mad = 0.0\n    local mean\
    \ = 0.0\n    local n = #numbers\n    if n > 0 then\n        mean = numbers:sum()\
    \ / n\n        local tmp = 0.0\n        for i = 1, n do\n            tmp = numbers[i]\
    \ - mean\n            mad = mad + math.abs(tmp)\n        end\n        mad = mad\
    \ / n\n    end\n    return mad\nend", "  if (#numbers == 0) then\n    return 0\n\
    \  end\n  local mean = sum(numbers) / #numbers\n  local absolute_deviations =\
    \ map(function(x) return math.abs(x - mean) end, numbers)\n  return sum(absolute_deviations)\
    \ / #absolute_deviations\nend", "    local mean = mean(numbers)\n    local deviations\
    \ = {}\n    for _, number in ipairs(numbers) do\n        deviations[#deviations\
    \ + 1] = math.abs(number - mean)\n    end\n    return mean(deviations)\nend",
  "    assert(#numbers > 0, \"Empty list\")\n    local mean = mean(numbers)\n    local\
    \ abs_differences = table.map(numbers, function(number)\n        return math.abs(number\
    \ - mean)\n    end)\n    return mean(abs_differences)\nend", "  local mean = mean(numbers)\n\
    \  local abs_deviations = {}\n  for i, num in ipairs(numbers) do\n    abs_deviations[i]\
    \ = math.abs(num - mean)\n  end\n  return mean(abs_deviations)\nend", "    local\
    \ mean = _.sum(numbers) / _.len(numbers)\n    local deviations = _.map(numbers,\
    \ function(x) return math.abs(x - mean) end)\n    return _.sum(deviations) / _.len(deviations)\n\
    end", "  local numbers_sum = sum(numbers)\n  local mean = numbers_sum / #numbers\n\
    \  local diffs = {}\n  for _, number in ipairs(numbers) do\n    diffs[#diffs +\
    \ 1] = math.abs(number - mean)\n  end\n  return sum(diffs) / #diffs\nend", " \
    \   local numbers_count = #numbers\n    if numbers_count == 0 then\n        return\
    \ 0\n    end\n    local mean = mean(numbers)\n    local mad = 0\n    for _, x\
    \ in ipairs(numbers) do\n        mad = mad + math.abs(x - mean)\n    end\n   \
    \ return mad / numbers_count\nend", "    local sum = 0\n    local count = 0\n\
    \    for _, v in ipairs(numbers) do\n        sum = sum + v\n        count = count\
    \ + 1\n    end\n    local mean = sum / count\n    sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / count\n\
    end", "    if #numbers < 2 then\n        error('mean_absolute_deviation: expected\
    \ at least 2 numbers')\n    end\n    local mean = table.avg(numbers)\n    local\
    \ sum = 0\n    for _, n in ipairs(numbers) do\n        sum = sum + math.abs(n\
    \ - mean)\n    end\n    return sum / #numbers\nend", "    -- Calculate mean\n\
    \    local sum = 0\n    for i = 1, #numbers do\n        sum = sum + numbers[i]\n\
    \    end\n    local mean = sum / #numbers", "  local mean = mean(numbers)\n  local\
    \ sum = 0\n  for i = 1, #numbers do\n    sum = sum + math.abs(numbers[i] - mean)\n\
    \  end\n  return sum / #numbers\nend", "    if type(numbers) ~= \"table\" then\n\
    \        return nil\n    end\n    local sum = 0\n    local count = 0\n    for\
    \ _, value in pairs(numbers) do\n        if value ~= nil then\n            sum\
    \ = sum + value\n            count = count + 1\n        end\n    end\n    if count\
    \ == 0 then\n        return nil\n    end\n    local mean = sum / count\n    local\
    \ sum_abs_diff = 0\n    for _, value in pairs(numbers) do\n        if value ~=\
    \ nil then\n            sum_abs_diff = sum_abs_diff + math.abs(value - mean)\n\
    \        end\n    end\n    return sum_abs_diff / count\nend", "  return mean(map(math.abs,\
    \ distance_to_mean(numbers)))\nend", "    local mean = mean(numbers)\n    local\
    \ absolute_differences = map(function(x) return math.abs(x - mean) end, numbers)\n\
    \    return mean(absolute_differences)\nend", "  local sum = 0\n  local count\
    \ = 0\n  for _,n in ipairs(numbers) do\n    sum = sum + n\n    count = count +\
    \ 1\n  end\n  local mean = sum / count\n  local sum_of_absolute_differences =\
    \ 0\n  for _,n in ipairs(numbers) do\n    sum_of_absolute_differences = sum_of_absolute_differences\
    \ + math.abs(n - mean)\n  end\n  return sum_of_absolute_differences / count\n\
    end", "    local length = #numbers\n    local sum = 0.0\n    local mean = mean(numbers)\n\
    \    for _,v in ipairs(numbers) do\n        sum = sum + math.abs(v - mean)\n \
    \   end\n    return sum / length\nend", "    local mean = mean(numbers)\n    local\
    \ sum = 0.0\n    for i, v in ipairs(numbers) do\n        sum = sum + math.abs(v\
    \ - mean)\n    end\n    return sum / #numbers\nend", "    local sum = 0\n    local\
    \ count = 0\n    for _, num in ipairs(numbers) do\n        sum = sum + num\n \
    \       count = count + 1\n    end\n    local mean = sum / count\n    local sum\
    \ = 0\n    for _, num in ipairs(numbers) do\n        sum = sum + math.abs(num\
    \ - mean)\n    end\n    return sum / count\nend", "    if #numbers == 0 then\n\
    \        return 0\n    end\n    local mean = mean(numbers)\n    local deviations\
    \ = {}\n    for _, n in ipairs(numbers) do\n        local deviation = math.abs(n\
    \ - mean)\n        table.insert(deviations, deviation)\n    end\n    return mean(deviations)\n\
    end", "    local mean = sum(numbers) / #numbers\n    local deviations = {}\n \
    \   for _, x in ipairs(numbers) do\n        table.insert(deviations, math.abs(x\
    \ - mean))\n    end\n    return sum(deviations) / #deviations\nend", "  local\
    \ sum = 0\n  local mean = mean(numbers)\n  for _, number in ipairs(numbers) do\n\
    \    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\nend",
  "  if #numbers == 0 then\n    return 0\n  end\n  local mean = sum(numbers) / #numbers\n\
    \  local deviations = {}\n  for i = 1, #numbers do\n    table.insert(deviations,\
    \ math.abs(numbers[i] - mean))\n  end\n  return sum(deviations) / #deviations\n\
    end", "    local mean = sum(numbers) / #numbers\n    local abs_deviations = {}\n\
    \    for _, num in ipairs(numbers) do\n        table.insert(abs_deviations, math.abs(num\
    \ - mean))\n    end\n    return sum(abs_deviations) / #abs_deviations\nend", " \
    \ local sum = 0\n  local mean = mean(numbers)\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end", "    local mean = mean(numbers)\n    local mad = 0\n    for _, n in ipairs(numbers)\
    \ do\n        mad = mad + math.abs(n - mean)\n    end\n    return mad / #numbers\n\
    end", "    local mean = math.average(numbers)\n    local diffs = {}\n    for _,\
    \ x in ipairs(numbers) do\n        table.insert(diffs, math.abs(x - mean))\n \
    \   end\n    return math.average(diffs)\nend", "    local mean = math.average(numbers)\n\
    \    local absolute_differences = {}\n    for i, value in ipairs(numbers) do\n\
    \        table.insert(absolute_differences, math.abs(value - mean))\n    end\n\
    \    return math.average(absolute_differences)\nend", "    local dev_sum = 0\n\
    \    local mean = mean(numbers)\n    for _, v in ipairs(numbers) do\n        dev_sum\
    \ = dev_sum + math.abs(v - mean)\n    end\n    return dev_sum / #numbers\nend",
  "\tassert(numbers ~= nil, \"mean_absolute_deviation: numbers is nil\")\n\tlocal\
    \ numbers_len = #numbers\n\tassert(numbers_len > 0, \"mean_absolute_deviation:\
    \ numbers is empty\")\n\tlocal mean = average(numbers)\n\tlocal sum = 0\n\tfor\
    \ i = 1, numbers_len do\n\t\tsum = sum + math.abs(numbers[i] - mean)\n\tend\n\t\
    return sum / numbers_len\nend", "  local sum = 0\n  local mean = average(numbers)\n\
    \  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x - mean)\n  end\n\
    \  return sum / #numbers\nend", "    local mean = mean(numbers)\n    local mad\
    \ = 0.0\n    for _, number in ipairs(numbers) do\n        mad = mad + math.abs(number\
    \ - mean)\n    end\n    return mad / #numbers\nend", "    local values_sum = sum(numbers)\n\
    \    local values_count = #numbers\n    local values_mean = values_sum / values_count\n\
    \    local average_difference = 0\n    for _, v in ipairs(numbers) do\n      \
    \  average_difference = average_difference + math.abs(v - values_mean)\n    end\n\
    \    return average_difference / values_count\nend", "\tif not numbers or #numbers\
    \ == 0 then\n\t\treturn 0.0\n\tend\n\tlocal mean = mean(numbers)\n\tlocal diffs\
    \ = {}\n\tfor _, number in ipairs(numbers) do\n\t\ttable.insert(diffs, math.abs(number\
    \ - mean))\n\tend\n\treturn mean(diffs)\nend", "    if #numbers == 0 then\n  \
    \      return 0\n    end\n    local sum = 0\n    local mean = mean(numbers)\n\
    \    for _, v in ipairs(numbers) do\n        sum = sum + math.abs(v - mean)\n\
    \    end\n    return sum / #numbers\nend", "    assert(type(numbers) == \"table\"\
    , \"mean_absolute_deviation: numbers should be a table\")\n    local sum = 0\n\
    \    local count = 0\n    for _, value in pairs(numbers) do\n        if type(value)\
    \ == \"number\" then\n            sum = sum + value\n            count = count\
    \ + 1\n        end\n    end\n    if count == 0 then\n        return nil\n    end\n\
    \    local mean = sum / count\n    local dev_sum = 0\n    for _, value in pairs(numbers)\
    \ do\n        if type(value) == \"number\" then\n            dev_sum = dev_sum\
    \ + math.abs(value - mean)\n        end\n    end\n    return dev_sum / count\n\
    end", "    local deviation_sum = 0\n    local numbers_len = #numbers\n    local\
    \ mean = statistics.mean(numbers)\n    for _,v in ipairs(numbers) do\n       \
    \ deviation_sum = deviation_sum + math.abs(v - mean)\n    end\n    return deviation_sum\
    \ / numbers_len\nend", "    local n = #numbers\n    if n == 0 then\n        return\
    \ -1.0\n    end\n    local mean = mean(numbers)\n    local sum = 0.0\n    for\
    \ i,v in ipairs(numbers) do\n        sum = sum + math.abs(v - mean)\n    end\n\
    \    return sum / n\nend", "    local n = #numbers\n    if n == 0 then\n     \
    \   return 0.0\n    end\n    local sum_numbers = utils.sum(numbers)\n    local\
    \ mean = sum_numbers / n\n    local sum_diff_squares = 0.0\n    for _, x in ipairs(numbers)\
    \ do\n        sum_diff_squares = sum_diff_squares + ((x - mean) ^ 2)\n    end\n\
    \    return math.sqrt(sum_diff_squares / n)\nend", "    local mean = mean(numbers)\n\
    \    local sum = 0.0\n    for i, number in ipairs(numbers) do\n        sum = sum\
    \ + math.abs(number - mean)\n    end\n    return sum / #numbers\nend", "    --\
    \ find arithmetic mean\n    local sum = 0\n    for _, val in ipairs(numbers) do\n\
    \        sum = sum + val\n    end\n    local mean = sum / #numbers", "  local\
    \ length = #numbers\n  if length == 0 then\n    return 0\n  end\n  local mean\
    \ = mean(numbers)\n  local sum = 0\n  for _, x in ipairs(numbers) do\n    sum\
    \ = sum + math.abs(x - mean)\n  end\n  return sum / length\nend", "    local mean\
    \ = mean(numbers)\n    local abs = math.abs\n    local len = 0\n    local sum\
    \ = 0\n    for i = 1, #numbers do\n        sum = sum + abs(numbers[i] - mean)\n\
    \        len = len + 1\n    end\n    return sum / len\nend", "  local sum = 0\n\
    \  local count = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + value\n\
    \    count = count + 1\n  end\n  local mean = sum / count\n  local sum_of_deviations\
    \ = 0\n  for _, value in ipairs(numbers) do\n    sum_of_deviations = sum_of_deviations\
    \ + math.abs(value - mean)\n  end\n  return sum_of_deviations / count\nend", " \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, v in ipairs(numbers) do\n\
    \    sum = sum + math.abs(v - mean)\n  end\n  return sum / #numbers\nend", " \
    \ local result = {}\n  local sum = 0\n  local mean = 0\n  local abs = math.abs\n\
    \  for i = 1, #numbers do\n    sum = sum + numbers[i]\n  end\n  mean = sum / #numbers\n\
    \  local sum_abs = 0\n  for i = 1, #numbers do\n    sum_abs = sum_abs + abs(numbers[i]\
    \ - mean)\n  end\n  return sum_abs / #numbers\nend", "    local mean = mean(numbers)\n\
    \    local sum = 0\n    for _, x in ipairs(numbers) do\n        sum = sum + math.abs(x\
    \ - mean)\n    end\n    return sum / #numbers\nend", "    local sum = 0\n    local\
    \ mean = 0\n    for _, val in ipairs(numbers) do\n        sum = sum + val\n  \
    \  end\n    mean = sum / #numbers\n    sum = 0\n    for _, val in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(val - mean)\n    end\n    return sum / #numbers\n\
    end", "    assert(type(numbers) == \"table\", \"numbers is not a table\")\n  \
    \  assert(type(numbers[1]) == \"number\", \"list must have a number as an element\"\
    )\n    local mean = list_mean(numbers)\n    local result = 0\n    for _,v in ipairs(numbers)\
    \ do\n        result = result + math.abs(v - mean)\n    end\n    return result\
    \ / #numbers\nend", "    -- Calculate average\n    local avg = average(numbers)\n\
    \    -- Calculate absolute deviation for each number and sum it\n    local abs_sum\
    \ = 0\n    for i,n in ipairs(numbers) do\n        abs_sum = abs_sum + math.abs(n\
    \ - avg)\n    end\n    -- Divide by total count to calculate mean\n    return\
    \ abs_sum / #numbers\nend", "  -- Mean of given numbers\n  local mean = sum(numbers)\
    \ / #numbers\n  -- Absolute deviation of each element\n  local absolute_deviations\
    \ = {}\n  for i,v in ipairs(numbers) do\n    absolute_deviations[i] = math.abs(v\
    \ - mean)\n  end\n  -- Return mean of absolute deviations\n  return sum(absolute_deviations)\
    \ / #absolute_deviations\nend", "  local mean = stats.mean(numbers)\n  local absolute_deviations\
    \ = {}\n  for _, x in ipairs(numbers) do\n    absolute_deviations[#absolute_deviations\
    \ + 1] = math.abs(x - mean)\n  end\n  return stats.mean(absolute_deviations)\n\
    end", "    local t_mean = mean(numbers)\n    local abs_numbers = {}\n    for _,v\
    \ in ipairs(numbers) do\n        table.insert(abs_numbers, math.abs(v - t_mean))\n\
    \    end\n    return mean(abs_numbers)\nend", "  local mean = average(numbers)\n\
    \  local total = 0\n  for _, number in ipairs(numbers) do\n    total = total +\
    \ math.abs(number - mean)\n  end\n  return total / #numbers\nend", "  return utils.mean(utils.map(function(x)\
    \ return math.abs(x - utils.mean(numbers)) end, numbers))\nend", "    local mean\
    \ = mean(numbers)\n    local total = 0\n    for i, v in ipairs(numbers) do\n \
    \       total = total + math.abs(v - mean)\n    end\n    return total / #numbers\n\
    end", "    local mean = mean(numbers)\n    local sum = 0\n    for _, number in\
    \ ipairs(numbers) do\n        sum = sum + math.abs(number - mean)\n    end\n \
    \   return sum / #numbers\nend", "    local mean = mean(numbers)\n    local sum\
    \ = 0\n    for _, number in ipairs(numbers) do\n        sum = sum + math.abs(number\
    \ - mean)\n    end\n    return sum / #numbers\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
