name: HumanEval_132_is_nested
language: lua
results:
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  return string:find(\"%[%[\") ~= nil\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6f89pj6.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu6f89pj6.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count_left = 0\n    local count_right\
    \ = 0\n    for s in string:gmatch\".\" do\n        if s == \"[\" then count_left\
    \ = count_left + 1\n        elseif s == \"]\" then count_right = count_right +\
    \ 1 end\n    end\n    if count_left == 0 and count_right == 0 then return false\
    \ end\n    return count_left == count_right\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ov2a4pb.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_ov2a4pb.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, string.len(string)\
    \ do\n    local char = string.sub(string, i, i)\n    if char == '[' then\n   \
    \   table.insert(stack, 1, char)\n    elseif char == ']' then\n      if #stack\
    \ > 0 then\n        table.remove(stack, 1)\n      else\n        return false\n\
    \      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8slu8gaj.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8slu8gaj.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- body\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqseu77uu.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpqseu77uu.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i=1,#string do\n    if\
    \ string:sub(i,i) == '[' then\n      table.insert(stack, 'l')\n    elseif string:sub(i,i)\
    \ == ']' then\n      if #stack == 0 then\n        return false\n      else\n \
    \       table.remove(stack)\n      end\n    end\n  end\n  return #stack == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44z19b7d.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp44z19b7d.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local last_position = string:len()\n    local\
    \ count = 0\n    for i = 1, last_position do\n        count = string:sub(i, i)\
    \ == '[' and count + 1 or count - 1\n        if count < 0 then\n            return\
    \ false\n        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6hulf7i7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6hulf7i7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\treturn false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2sqwag72.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2sqwag72.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local bracket_status = 0\n    for i=1,#string\
    \ do\n        if string:sub(i,i) == '[' then\n            bracket_status = bracket_status\
    \ + 1\n        elseif string:sub(i,i) == ']' then\n            bracket_status\
    \ = bracket_status - 1\n        end\n        if bracket_status < 0 then\n    \
    \        return false\n        end\n    end\n    return bracket_status > 0\nend\n\
    print(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\n\
    print(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))\n\
    print(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\n\
    print(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "false\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\n\
    true\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeoyvcoyj.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpeoyvcoyj.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local depth = 0\n    for char in string:gmatch('.')\
    \ do\n        if char == '[' then\n            depth = depth + 1\n        elseif\
    \ char == ']' then\n            depth = depth - 1\n        end\n        if depth\
    \ < 0 then\n            return false\n        end\n    end\n    return depth >\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsk_7c2_4.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsk_7c2_4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- body\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykbblkji.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpykbblkji.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    if not string:match(\"[[]]\") then\n       \
    \ return false\n    end\n    local string_new = string:gsub(\"%[%]\", \"\")\n\
    \    while string_new ~= string do\n        string = string_new\n        string_new\
    \ = string:gsub(\"%[%]\", \"\")\n    end\n    return string == \"\"\nend\nprint(is_nested(\"\
    [[]]\"))\nprint(is_nested(\"[]]]]]]][[[[[]\"))\nprint(is_nested(\"[][]\"))\nprint(is_nested(\"\
    []\"))\nprint(is_nested(\"[[][]]\"))\nprint(is_nested(\"[[]][[\"))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmp14gsgoi3.lua:33: expected: false, actual: true\nstack\
    \ traceback:\n\t/tmp/tmp14gsgoi3.lua:33: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  if #string < 2 then return false end\n  local\
    \ last = 0\n  local first = string:find(']')\n  while first do\n    last = string:find(']',\
    \ first + 1)\n    first = string:find('[', last or 1)\n  end\n  return last and\
    \ last > 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgxgko0ei.lua:16:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpgxgko0ei.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpgxgko0ei.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    string = string:gsub(']%[', '')\n    local temp_string\
    \ = string\n    while true do\n        temp_string = temp_string:gsub('%[%]',\
    \ '')\n        if #temp_string == 0 then\n            return true\n        elseif\
    \ #temp_string == #string then\n            return false\n        end\n      \
    \  string = temp_string\n    end\nend\nassert(is_nested('[[]]'))\nassert(not is_nested('[]]]]]]][[[[[]'))\n\
    assert(not is_nested('[][]'))\nassert(not is_nested('[]'))\nassert(is_nested('[[][]]'))\n\
    assert(is_nested('[[]][['))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9kl9vq1d.lua:25: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp9kl9vq1d.lua:25: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i=1,#string do\n    local\
    \ c = string:sub(i,i)\n    if c == '[' then\n      table.insert(stack,c)\n   \
    \ elseif c == ']' then\n      if stack[#stack] == '[' then\n        table.remove(stack)\n\
    \      else\n        return false\n      end\n    end\n  end\n  return #stack\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp656755cz.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp656755cz.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- body\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvaf56fac.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpvaf56fac.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\treturn string:match('%[+%[+%[+') or string:match('%[+%[+%[+%[+')\
    \ or string:match('%[+%[+%[+%[+%[+')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphwrpdgko.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmphwrpdgko.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local open = {[\"[\"] = 1}\n    local close\
    \ = {[\"]\"] = -1}\n    local count = 0\n    for i=1,#string do\n        count\
    \ = count + (open[string:sub(i,i)] or close[string:sub(i,i)] or 0)\n        if\
    \ count < 0 then return false end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h6tk9om.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4h6tk9om.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  while string ~= string:gsub('%[%]', '') do\n \
    \   string = string:gsub('%[%]', '')\n  end\n  return string == ''\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1vpdy49.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy1vpdy49.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal stack = {}\n\tfor i=1, #string do\n\t\t\
    if string[i] == '[' then\n\t\t\ttable.insert(stack, '(')\n\t\telseif string[i]\
    \ == ']' then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\telse\n\t\
    \t\t\ttable.remove(stack)\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcmfjj8mw.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcmfjj8mw.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal previous_element = nil\n\tlocal stack =\
    \ Stack.new()\n\tfor i = 1, #string do\n\t\tlocal current_element = string:sub(i,\
    \ i)\n\t\tif current_element == \"[\" then\n\t\t\tif previous_element == \"[\"\
    \ then\n\t\t\t\tstack:push(previous_element)\n\t\t\tend\n\t\t\tprevious_element\
    \ = current_element\n\t\telseif current_element == \"]\" then\n\t\t\tprevious_element\
    \ = current_element\n\t\t\tif stack:is_empty() then\n\t\t\t\treturn false\n\t\t\
    \telse\n\t\t\t\tstack:pop()\n\t\t\tend\n\t\tend\n\tend\n\treturn stack:is_empty()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa95uilsw.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpa95uilsw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpa95uilsw.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5ztk9zl.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpy5ztk9zl.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local arr = split(string, '')\n    local count\
    \ = 0\n    for i = 1, #arr do\n        if arr[i] == '[' then\n            count\
    \ = count + 1\n        elseif arr[i] == ']' then\n            count = count -\
    \ 1\n        end\n        if count < 0 then\n            return false\n      \
    \  end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi7ozkos1.lua:11:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpi7ozkos1.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpi7ozkos1.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal matches = 0\n\tfor i = 1, #string do\n\t\
    \tif string:sub(i, i) == '[' then\n\t\t\tmatches = matches + 1\n\t\telseif string:sub(i,\
    \ i) == ']' then\n\t\t\tmatches = matches - 1\n\t\tend\n\t\tif matches < 0 then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn matches > 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufgm7uz1.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpufgm7uz1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxd7ygez.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpoxd7ygez.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local valid = {[\"[\"] = \"]\"}\n    local stack\
    \ = {}\n    for _, char in ipairs(string) do\n        if valid[char] then\n  \
    \          table.insert(stack, char)\n        elseif #stack > 0 and valid[stack[#stack]]\
    \ == char then\n            table.remove(stack)\n        else\n            return\
    \ false\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4j6noe88.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4j6noe88.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxd1clqpf.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpxd1clqpf.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local open_brackets = 0\n  local closed_brackets\
    \ = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '[' then\n      open_brackets\
    \ = open_brackets + 1\n    elseif string:sub(i, i) == ']' then\n      closed_brackets\
    \ = closed_brackets + 1\n    end\n  end\n  if open_brackets == 0 and closed_brackets\
    \ == 0 then\n    return false\n  elseif open_brackets == closed_brackets then\n\
    \    return false\n  else\n    return true\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemdsxsjk.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpemdsxsjk.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local c = 0\n  for _,v in pairs({string.match(string,\
    \ '[]]')}) do\n    if #v > 0 then\n      c = c + 1\n    end\n  end\n  return c\
    \ > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfszz9ck_.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfszz9ck_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack > 0 then\n                table.remove(stack)\n            else\n   \
    \             return false\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4xuiua8.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa4xuiua8.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local open, close = 0, 0\n    for i = 1, #string\
    \ do\n        if string:sub(i, i) == '[' then\n            open = open + 1\n \
    \       else\n            close = close + 1\n        end\n        if close > open\
    \ then\n            return false\n        end\n    end\n    return open > close\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjvvsfmyt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjvvsfmyt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local leftSquareBracket = 0\n  local rightSquareBracket\
    \ = 0\n  for i=1, #string do\n    if string:sub(i,i) == '[' then\n      leftSquareBracket\
    \ = leftSquareBracket + 1\n    elseif string:sub(i,i) == ']' then\n      rightSquareBracket\
    \ = rightSquareBracket + 1\n    end\n  end\n  return leftSquareBracket == rightSquareBracket\
    \ and leftSquareBracket > 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87cc5a9.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt87cc5a9.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal nest_count = 0\n\tfor i = 1, string.len(string)\
    \ do\n\t\tif string.sub(string, i, i) == \"[\" then\n\t\t\tnest_count = nest_count\
    \ + 1\n\t\telseif string.sub(string, i, i) == \"]\" then\n\t\t\tnest_count = nest_count\
    \ - 1\n\t\tend\n\t\tif nest_count < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn nest_count > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7fzdw9u8.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7fzdw9u8.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  if string:match(\"%b[]\") == string then\n   \
    \ return true\n  else\n    return false\n  end\nend\nprint(is_nested('[[]]'))\n\
    print(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\n\
    print(is_nested('[[][]]'))\nprint(is_nested('[[]][['))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "true\nfalse\nfalse\ntrue\ntrue\nfalse\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmpbmcckxhv.lua:30: expected: false, actual: true\nstack\
    \ traceback:\n\t/tmp/tmpbmcckxhv.lua:30: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gcqnkko.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp3gcqnkko.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count_open = 0\n    local count_close\
    \ = 0\n    for i=1, #string do\n        if string:sub(i,i) == '[' then\n     \
    \       count_open = count_open + 1\n        elseif string:sub(i,i) == ']' then\n\
    \            count_close = count_close + 1\n        end\n    end\n    return count_open\
    \ < count_close\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc33cyejo.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc33cyejo.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  return string:find('%[%[') and true or false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_ljx1u3.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy_ljx1u3.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for idx = 1, string.len(string)\
    \ do\n        if string.sub(string, idx, idx) == '[' then\n            table.insert(stack,\
    \ ']')\n        else\n            if #stack == 0 then\n                return\
    \ false\n            else\n                table.remove(stack)\n            end\n\
    \        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfezygoqa.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfezygoqa.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local is_nested = false\n    local prev_close\
    \ = 0\n    for i = 1, #string do\n        if string:sub(i, i) == '[' then\n  \
    \          is_nested = true\n        elseif string:sub(i, i) == ']' then\n   \
    \         if i < prev_close then\n                is_nested = false\n        \
    \    end\n            prev_close = i\n        end\n    end\n    return is_nested\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3h6qhjk.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpe3h6qhjk.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal count = 0\n\tlocal end_count = 0\n\tfor\
    \ i = 1, #string do\n\t\tif string:sub(i, i) == '[' then\n\t\t\tcount = count\
    \ + 1\n\t\telseif string:sub(i, i) == ']' then\n\t\t\tend_count = end_count +\
    \ 1\n\t\tend\n\tend\n\tif end_count > count then\n\t\treturn false\n\telseif count\
    \ - end_count == 1 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7nwi9dvx.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7nwi9dvx.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpswp98onj.lua:32: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local left = {}\n    local last_left = 0\n \
    \   for c in string:gmatch('[%[%]?]') do\n        if c == '[' then\n         \
    \   last_left = last_left + 1\n            left[last_left] = true\n        elseif\
    \ c == ']' then\n            if last_left == 0 then\n                return false\n\
    \            end\n            last_left = last_left - 1\n        end\n    end\n\
    \    return last_left == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsv8qaxd.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvsv8qaxd.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local s,e,b,i,c=1,#string,0,0,0\n    local t={}\n\
    \    for i=s,e do\n        if string:sub(i,i)=='[' then\n            table.insert(t,1)\n\
    \            b=b+1\n        elseif string:sub(i,i)==']' then\n            table.insert(t,2)\n\
    \            b=b-1\n        end\n        if b<0 then\n            break\n    \
    \    end\n    end\n    if b==0 then\n        for i=1,#t-1 do\n            if t[i]==1\
    \ and t[i+1]==2 then\n                c=c+1\n            end\n        end\n  \
    \      if c>0 then\n            return true\n        else\n            return\
    \ false\n        end\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpknk4ys86.lua:46:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpknk4ys86.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local right_count = 0\n    local left_count\
    \ = 0\n    for i = 1, #string do\n        if string:sub(i, i) == '[' then\n  \
    \          left_count = left_count + 1\n        elseif string:sub(i, i) == ']'\
    \ then\n            right_count = right_count + 1\n        end\n    end\n    if\
    \ right_count < left_count then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7xg69jg.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc7xg69jg.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local counter = 0\n  for i = 1, #string do\n \
    \   if string:sub(i, i) == '[' then\n      counter = counter + 1\n    elseif string:sub(i,\
    \ i) == ']' then\n      counter = counter - 1\n    end\n    if counter < 0 then\n\
    \      return false\n    end\n  end\n  return counter == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4x5hlrt.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu4x5hlrt.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local parens = 0\n    for i = 1, string.len(string)\
    \ do\n        local char = string.sub(string, i, i)\n        if char == '[' then\n\
    \            parens = parens + 1\n        elseif char == ']' then\n          \
    \  parens = parens - 1\n        end\n        if parens < 0 then\n            return\
    \ false\n        end\n    end\n    return parens == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8zzvfnt.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt8zzvfnt.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local input = string:gsub('%[%]', '')\n    while\
    \ input:find('%[%[') ~= nil do\n        input = input:gsub('%[%[', '')\n    end\n\
    \    if input == '' then\n        return true\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb82ya6hs.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb82ya6hs.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  return string:find('%[%[')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpar24k4cx.lua:17:\
    \ expected: true, actual: 1\nstack traceback:\n\t/tmp/tmpar24k4cx.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for c in string:gmatch('.')\
    \ do\n        if c == '[' then\n            table.insert(stack, c)\n        elseif\
    \ c == ']' then\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvin3j980.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvin3j980.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  if #string % 2 ~= 0 then\n    return false\n \
    \ end\n  local counter = 0\n  for i = 1, #string do\n    if string:sub(i, i) ==\
    \ '[' then\n      counter = counter + 1\n    else\n      counter = counter - 1\n\
    \    end\n    if counter < 0 then\n      return false\n    end\n  end\n  return\
    \ counter > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppaivlb51.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppaivlb51.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    if string:find(']') then\n        string = string:gsub(']%[','')\n\
    \        return is_nested(string)\n    else\n        return string:find('%[')\
    \ == nil\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\n\
    print(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\n\
    print(is_nested('[[]][['))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmpjq_wxaso.lua:38: expected: false, actual: true\nstack\
    \ traceback:\n\t/tmp/tmpjq_wxaso.lua:38: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count = 0\n    for i = 1, string.len(string)\
    \ do\n        if string.sub(string, i, i) == '[' then\n            count = count\
    \ + 1\n        elseif string.sub(string, i, i) == ']' then\n            count\
    \ = count - 1\n        end\n        if count < 0 then\n            return false\n\
    \        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmp8kza96.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmp8kza96.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- local count = 0\n    -- for i = 1, string.len(string)\
    \ do\n    --     if string.sub(string, i, i) == '[' then\n    --         count\
    \ = count + 1\n    --     elseif string.sub(string, i, i) == ']' then\n    --\
    \         count = count - 1\n    --     end\n    --     if count < 0 then\n  \
    \  --         return false\n    --     end\n    -- end\n    -- return count ==\
    \ 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzxkdjscc.lua:43: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local brackets = {['['] = true, [']'] = true}\n\
    \    for i = 1, string.len(string) do\n        if brackets[string:sub(i, i)] then\n\
    \            local last_open = string:find('%[', i)\n            local first_close\
    \ = string:find('%]', i)\n            if last_open and first_close and last_open\
    \ < first_close then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w_ykmdu.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5w_ykmdu.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- find all \"[[]]\"\n    -- string.gsub(str,\
    \ \"(pattern)\", replace)\n    local res = string.gsub(string, \"%[%[%]%]\", \"\
    \")\n    if #res ~= #string then\n        return true\n    end\n    return false\n\
    end\nprint(is_nested(\"[][]\"))\nprint(is_nested(\"[[]]\"))\nprint(is_nested(\"\
    [[]][[]\"))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "false\ntrue\ntrue\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmp4xbxicls.lua:36: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4xbxicls.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local bracket_stack = {}\n  for i=1, #string do\n\
    \    local char = string:sub(i,i)\n    if char == '[' then\n      table.insert(bracket_stack,\
    \ char)\n    elseif char == ']' then\n      if #bracket_stack > 0 then\n     \
    \   table.remove(bracket_stack)\n      else\n        return false\n      end\n\
    \    end\n  end\n  return #bracket_stack == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcnedk3uc.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcnedk3uc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    return string:match('%[%[%]]') or string:match('%[%[]%][%[%]]')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbtbyeae.lua:17:\
    \ expected: true, actual: \"[[]]\"\nstack traceback:\n\t/tmp/tmpvbtbyeae.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = Stack:new()\n  for idx = 1, #string\
    \ do\n    local char = string:sub(idx, idx)\n    if char == '[' then\n      stack:push(char)\n\
    \    elseif char == ']' then\n      if stack:size() == 0 then\n        return\
    \ false\n      else\n        stack:pop()\n      end\n    end\n  end\n  return\
    \ stack:size() == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm43gph0m.lua:11:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpm43gph0m.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpm43gph0m.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, string.len(string)\
    \ do\n        local char = string.sub(string, i, i)\n        if char == '[' then\n\
    \            table.insert(stack, 1, char)\n        elseif char == ']' then\n \
    \           if #stack > 0 then\n                table.remove(stack, 1)\n     \
    \       else\n                return false\n            end\n        end\n   \
    \ end\n    return (#stack == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70c51g8b.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp70c51g8b.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local index = 1\n  local current = 1\n  local\
    \ max = 1\n  local count = 0\n  for i = 1, #string do\n    if string.sub(string,\
    \ i, i) == '[' then\n      index = index + 1\n      if current > max then\n  \
    \      max = current\n      end\n      current = 1\n    else\n      current =\
    \ current + 1\n    end\n  end\n  if max == 1 then\n    count = 0\n  else\n   \
    \ count = max - 1\n  end\n  return index > count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4bzb1fq.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv4bzb1fq.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- body\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9_0peyk.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpd9_0peyk.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local bracket_open_no_closed = 0\n    local\
    \ bracket_closed_no_open = 0\n    for _, char in string:gmatch(char) do\n    \
    \    if char == '[' then\n            bracket_open_no_closed = bracket_open_no_closed\
    \ + 1\n        elseif char == ']' then\n            bracket_closed_no_open = bracket_closed_no_open\
    \ + 1\n        end\n    end\n    return bracket_open_no_closed > 0 and bracket_closed_no_open\
    \ > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_khbtz83.lua:13:\
    \ bad argument #1 to 'gmatch' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmp_khbtz83.lua:13: in local 'candidate'\n\t/tmp/tmp_khbtz83.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local left = 0\n    local right = 0\n    for\
    \ i = 1, #string do\n        if (string.sub(string, i, i) == '[') then\n     \
    \       left = left + 1\n        elseif (string.sub(string, i, i) == ']') then\n\
    \            right = right + 1\n        end\n    end\n    if (left > right) then\n\
    \        return true\n    else \n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ap3v8xi.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4ap3v8xi.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxyfs_6bs.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpxyfs_6bs.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  \n  -- write your code here\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqq53avjk.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqq53avjk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  if string:match(\"%[%]\") then\n    return true\n\
    \  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4gnikf3.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa4gnikf3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    return string:match(\"^%[%[]%[%]%]$\") or string:match(\"\
    ^%[%[]%[%[%[%]%]%]%]$\") or string:match(\"^%[%[]%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp92iawoch.lua:11: unfinished string near '\"^%[%[]%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%['\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    for i = 1, string.len(string) do\n        if\
    \ string.sub(string, i, i) == '[' and string.sub(string, i + 1, i + 1) == ']'\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    print(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\n\
    print(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "false\nfalse\nfalse\nfalse\nfalse\nfalse\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmpuf4invkz.lua:28: expected: true, actual: false\nstack\
    \ traceback:\n\t/tmp/tmpuf4invkz.lua:28: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  if string[i] == '[' then\n      table.insert(stack, '[[')\n    elseif string[i]\
    \ == ']' then\n      if stack[#stack] == '[[]' then\n        return true\n   \
    \   else\n        table.remove(stack)\n      end\n    end\n  end\n  return false\n\
    end\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\n\
    print(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "false\nfalse\nfalse\nfalse\nfalse\nfalse\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmpzrka4l7r.lua:35: expected: true, actual: false\nstack\
    \ traceback:\n\t/tmp/tmpzrka4l7r.lua:35: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for _, char in ipairs(string)\
    \ do\n    if char == '[' then\n      table.insert(stack, char)\n    elseif char\
    \ == ']' then\n      table.remove(stack)\n    end\n  end\n  return #stack > 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4uaqg4p.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe4uaqg4p.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    return (string:match(\"^%[%[%[%[%]]%]]%]]\"\
    )) or (string:match(\"^%[%[%[]%[%[%[%]]%]]%]]\")) or (string:match(\"^%[%[%[%[%[%]]%]]%]]%[%[%[%]]%]]\"\
    )) or (string:match(\"^%[%[%[%[%[%]]%]]%]]%[%[%[%[%]]%]]\")) or (string:match(\"\
    ^%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]\")) or (string:match(\"^%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%[%]]%]]\"\
    )) or (string:match(\"^%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%[%[%]]%]]\"\
    )) or (string:match(\"^%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]\"\
    )) or (string:match(\"^%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%[%]]%]]\"\
    )) or (string:match(\"^%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%[%[%]]%]]\"\
    )) or (string:match(\"^%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeqo1oo8a.lua:11: unfinished string near '\"^%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  if string:sub(i, i) == '[' then\n      table.insert(stack, '(')\n    else\n\
    \      if #stack == 0 then\n        return false\n      else\n        table.remove(stack)\n\
    \      end\n    end\n  end\n  return #stack > 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprae68zyw.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprae68zyw.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if stack[#stack] == '[' then\n\
    \                table.remove(stack)\n            else\n                return\
    \ false\n            end\n        end\n    end\n    return #stack == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7xam6dk.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt7xam6dk.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local brackets = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpniidz_xc.lua:32: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  if string == nil then return false end\n  local\
    \ f, i = 0, 1\n  while i <= #string do\n    local c = string:sub(i, i)\n    if\
    \ c == '[' then\n      f = f + 1\n    elseif c == ']' then\n      f = f - 1\n\
    \    end\n    if f < 0 then\n      return false\n    end\n    i = i + 1\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoz_io03s.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoz_io03s.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal stack = {}\n\tfor i = 1, #string do\n\t\t\
    local current_char = string:sub(i, i)\n\t\tif current_char == '[' then\n\t\t\t\
    table.insert(stack, current_char)\n\t\telseif current_char == ']' then\n\t\t\t\
    local previous_char = table.remove(stack)\n\t\t\tif previous_char ~= '[' then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1bz49mn4.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1bz49mn4.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal leftBracket, rightBracket = 0, 0\n\tfor\
    \ i=1, #string do\n\t\tif string:sub(i,i) == '[' then\n\t\t\tleftBracket = leftBracket\
    \ + 1\n\t\telse\n\t\t\trightBracket = rightBracket + 1\n\t\tend\n\tend\n\tif leftBracket\
    \ > rightBracket then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9ivsmp2.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph9ivsmp2.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count = 0\n    for i = 1, string.len(string)\
    \ do\n        if string.sub(string, i, i) == '[' then\n            count = count\
    \ + 1\n        elseif string.sub(string, i, i) == ']' then\n            count\
    \ = count - 1\n        end\n        if count < 0 then return false end\n    end\n\
    \    return count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_d8u2lv7.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_d8u2lv7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, string.len(string)\
    \ do\n        local current = string.sub(string, i, i)\n        if current ==\
    \ '[' then\n            table.insert(stack, current)\n        elseif current ==\
    \ ']' then\n            if #stack == 0 then\n                return false\n  \
    \          else\n                table.remove(stack)\n            end\n      \
    \  end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpya8keb6y.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpya8keb6y.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local state = 0\n    for i = 1, string.len(string)\
    \ do\n        if string.sub(string, i, i) == '[' then\n            state = state\
    \ + 1\n        else\n            state = state - 1\n        end\n        if state\
    \ < 0 then\n            return false\n        end\n    end\n    return state >\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp78t640kl.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp78t640kl.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local count = 0\n  for i = 1, #string do\n   \
    \ if count < 0 then\n      return false\n    end\n    if string:sub(i, i) == '['\
    \ then\n      count = count + 1\n    else\n      count = count - 1\n    end\n\
    \  end\n  return count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpro4aa7lr.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpro4aa7lr.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local brackets, valid_brackets = string:gsub('%[%]',''),\
    \ string:gsub('%[%]','')\n  return brackets ~= valid_brackets, valid_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8cq9fham.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8cq9fham.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local prev = ' '\n    for _,v in ipairs(string)\
    \ do\n        if v == '[' and prev == '[' then\n            return true\n    \
    \    end\n        prev = v\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dmjz9ga.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3dmjz9ga.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local current = string:sub(i, i)\n    if current == '[' then\n      table.insert(stack,\
    \ 1, current)\n    elseif current == ']' then\n      if stack[1] == '[' then\n\
    \        table.remove(stack, 1)\n      else\n        return false\n      end\n\
    \    end\n  end\n  return (#stack == 0)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphetg0su3.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphetg0su3.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local initialBrackets = 0\n    local finalBrackets\
    \ = 0\n    for i = 1, string.len(string) do\n        if string.sub(string, i,\
    \ i) == '[' then\n            initialBrackets = initialBrackets + 1\n        elseif\
    \ string.sub(string, i, i) == ']' then\n            finalBrackets = finalBrackets\
    \ + 1\n        end\n    end\n    if initialBrackets == finalBrackets then\n  \
    \      return false\n    else\n        return true\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwu9dmywf.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwu9dmywf.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local s = ''\n    for _, v in ipairs(string)\
    \ do\n        if v == '[' then\n            s = s .. v\n        elseif v == ']'\
    \ then\n            if s == '' then\n                return false\n          \
    \  else\n                s = s:sub(1, -2)\n            end\n        end\n    end\n\
    \    return s == ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjekg1es0.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjekg1es0.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for _, char in ipairs(string)\
    \ do\n        if char == '[' then table.insert(stack, char)\n        elseif char\
    \ == ']' then table.remove(stack) end\n    end\n    return #stack == 0\nend\n\
    assert(is_nested('[[]]') == true)\nassert(is_nested('[]]]]]]][[[[[]') == false)\n\
    assert(is_nested('[][]') == false)\nassert(is_nested('[]') == false)\nassert(is_nested('[[][]]')\
    \ == true)\nassert(is_nested('[[]][[') == true)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpocb_smq1.lua:19: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpocb_smq1.lua:19: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local open = 0\n    local closed = 0\n    for\
    \ c in string:gmatch('.') do\n        if c == '[' then\n            open = open\
    \ + 1\n        elseif c == ']' then\n            closed = closed + 1\n       \
    \ end\n    end\n    if open == closed then\n        return open ~= 0\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn3m7iw07.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn3m7iw07.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count = 0\n    for i = 1, string.len(string)\
    \ do\n        if string.sub(string, i, i) == '[' then\n            count = count\
    \ + 1\n        elseif string.sub(string, i, i) == ']' then\n            count\
    \ = count - 1\n        end\n        if count < 0 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14d3u4fa.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp14d3u4fa.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local len = string.len(string)\n    local left\
    \ = 0\n    local right = 0\n    for i = 1, len do\n        local char = string.sub(string,\
    \ i, i)\n        if char == '[' then\n            left = left + 1\n        elseif\
    \ char == ']' then\n            right = right + 1\n        end\n    end\n    return\
    \ (left > 0 and right > 0)\nend\nreturn is_nested\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2f3w_9jz.lua:25: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- Check if string is empty\n  if string == \"\
    \" then\n    return false\n  end\n  -- Remove outer brackets until string is empty\
    \ or has only one character left\n  while string:sub(1,1) == '[' and string:sub(-1,-1)\
    \ == ']' and #string > 1 do\n    string = string:sub(2,-2)\n  end\n  return #string\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2oth99pk.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2oth99pk.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  while true do\n    local is = string:find('][')\n\
    \    if is == nil then\n      break\n    end\n    string = string:sub(1, is-1)\
    \ .. string:sub(is+2)\n  end\n  return string:len() > 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgeaig39r.lua:12:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpgeaig39r.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpgeaig39r.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    return string:match('.*%[%[.+%]%].*') and true\
    \ or false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfb7gvfdi.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfb7gvfdi.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i=1, #string do\n\
    \        local c = string:sub(i,i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizmfu6ph.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpizmfu6ph.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local c = string:sub(i, i)\n    if c == '[' then\n      table.insert(stack,\
    \ c)\n    elseif c == ']' then\n      if #stack == 0 then\n        return false\n\
    \      else\n        table.remove(stack)\n      end\n    end\n  end\n  return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgvab2z1y.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgvab2z1y.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local count = 0\n  for i = 1, string.len(string)\
    \ do\n    if string.sub(string, i, i) == '[' then\n      count = count + 1\n \
    \   elseif string.sub(string, i, i) == ']' then\n      count = count - 1\n   \
    \ end\n    if count < 0 then return false end\n  end\n  return count == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwuw7y724.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwuw7y724.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    if string:match('[[]]') or string:match('[][]')\
    \ then\n        return true\n    else\n        return false\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdr4wvcn.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqdr4wvcn.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            local c2 = table.remove(stack)\n\
    \            if c2 ~= '[' then\n                return false\n            end\n\
    \        end\n    end\n    return stack[1] == nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2i0vmcvp.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2i0vmcvp.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- SOLUTION:\n  -- return #string ~= string:gsub('%[%[',''):gsub('%[%]',''):len()\n\
    \  -- \n  -- -- ALTERNATIVE:\n  -- return string:find('%[%[') and string:find('%[%]')\
    \ or false\n  -- \n  -- -- ALTERNATIVE:\n  -- return string:match('%[%[') and\
    \ string:match('%[%]') or false\n  -- \n  -- -- ALTERNATIVE:\n  -- for i=1,#string\
    \ do\n  --   if string:find('%[%[',i) and string:find('%[%]',i) then\n  --   \
    \  return true\n  --   end\n  -- end\n  -- return false\n  -- \n  -- -- ALTERNATIVE:\n\
    \  -- for i=1,#string do\n  --   if string:match('%[%[',i) and string:match('%[%]',i)\
    \ then\n  --     return true\n  --   end\n  -- end\n  -- return false\n  -- \n\
    \  -- -- ALTERNATIVE:\n  -- return not not string:match('%[%[') and not not string:match('%[%]')\n\
    \  -- \n  -- -- ALTERNATIVE:\n  -- local last_index = 0\n  -- for i=1,#string\
    \ do\n  --   if string:find('%[%[',i) then\n  --     for ii=i,#string do\n  --\
    \       if string:find('%[%]',ii) then\n  --         last_index = ii\n  --   \
    \      return true\n  --       end\n  --     end\n  --   end\n  -- end\n  -- return\
    \ false\n  -- \n  -- -- ALTERNATIVE:\n  -- local last_index = 0\n  -- for i=1,#string\
    \ do\n  --   if string:match('%[%[',i) then\n  --     for ii=i,#string do\n  --\
    \       if string:match('%[%]',ii) then\n  --         last_index = ii\n  --  \
    \       return true\n  --       end\n  --     end\n  --   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpajjft4n6.lua:84: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoc5sllu3.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpoc5sllu3.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  return string:match('%[%[+%].-%]%[+%]') and true\
    \ or false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdak6era.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmdak6era.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local open_brackets = 0\n  local closed_brackets\
    \ = 0\n  for c in string:gmatch\".\" do\n    if c == '[' then open_brackets =\
    \ open_brackets + 1 end\n    if c == ']' then closed_brackets = closed_brackets\
    \ + 1 end\n    if closed_brackets > open_brackets then return false end\n  end\n\
    \  return closed_brackets > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7ozv_rc.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj7ozv_rc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- local bracket_pairs = {\n    --     ['[']\
    \ = ']',\n    --     ['{'] = '}',\n    --     ['('] = ')'\n    -- }\n    local\
    \ bracket_pairs = {\n        [']'] = '[',\n        ['}'] = '{',\n        [')']\
    \ = '('\n    }\n    local bracket_stack = {}\n    for i=1,#string do\n       \
    \ local bracket = string:sub(i,i)\n        if bracket_pairs[bracket] then\n  \
    \          if bracket_stack[#bracket_stack] == bracket_pairs[bracket] then\n \
    \               table.remove(bracket_stack)\n            else\n              \
    \  return false\n            end\n        else\n            table.insert(bracket_stack,\
    \ bracket)\n        end\n    end\n    return #bracket_stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmopy_5d6.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmopy_5d6.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  return string:match('%[%[.*%]%]') ~= nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    if string == \"\" then return false end\n  \
    \  local open = 0\n    local close = 0\n    for i = 1, string.len(string) do\n\
    \        if string.sub(string, i, i) == \"[\" then\n            open = open +\
    \ 1\n        elseif string.sub(string, i, i) == \"]\" then\n            close\
    \ = close + 1\n        end\n    end\n    return open > 0 and close > 0 and open\
    \ < close\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30do3tn7.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp30do3tn7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local sum = 0\n    for i = 1, #string do\n \
    \       if string:sub(i, i) == '[' then\n            sum = sum + 1\n        else\n\
    \            sum = sum - 1\n        end\n        if sum < 0 then\n           \
    \ return false\n        end\n    end\n    return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvcwg12d3.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvcwg12d3.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local c = string:sub(i, i)\n    if (c == '[') then table.insert(stack, c)\n\
    \    elseif (c == ']') then\n      if (#stack == 0) then return false end\n  \
    \    table.remove(stack)\n    end\n  end\n  return (#stack == 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxz0irw0.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnxz0irw0.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal open_brackets = 0\n\tlocal closed_brackets\
    \ = 0\n\tfor i = 1, string.len(string) do\n\t\tif string.sub(string, i, i) ==\
    \ '[' then\n\t\t\topen_brackets = open_brackets + 1\n\t\telseif string.sub(string,\
    \ i, i) == ']' then\n\t\t\tclosed_brackets = closed_brackets + 1\n\t\tend\n\t\
    end\n\tif closed_brackets > open_brackets then\n\t\treturn false\n\telseif closed_brackets\
    \ == open_brackets then\n\t\treturn false\n\telse\n\t\treturn true\n\tend\nend\n\
    print(is_nested('[][][][[]'))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "true\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoiaaz8uh.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoiaaz8uh.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local char = string:sub(i, i)\n    if char == '[' then\n      table.insert(stack,\
    \ char)\n    elseif char == ']' then\n      if #stack > 0 then\n        table.remove(stack)\n\
    \      else\n        return false\n      end\n    end\n  end\n  return #stack\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqw2w4yiz.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqw2w4yiz.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqifpwyv.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpkqifpwyv.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  \n  local count = 0\n  for i = 1, #string do\n\
    \    if string[i] == '[' then\n      count = count + 1\n    elseif string[i] ==\
    \ ']' then\n      count = count - 1\n    end\n    if count < 0 then return false\
    \ end\n  end\n  return true\nend\nprint(is_nested('[[][]]'))\nprint(is_nested('[[][][]]'))\n\
    print(is_nested('[[]][[]]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\n\
    print(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[[]][['))\n\
    print(is_nested('[[][]]'))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nF\nFailed tests:\n\
    -------------\n1) test_humaneval\n/tmp/tmp4kzm9q2r.lua:37: expected: false, actual:\
    \ true\nstack traceback:\n\t/tmp/tmp4kzm9q2r.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  for i=1,#string do\n    if string:sub(i,i) ==\
    \ \"[\" then\n      for j=i+1,#string do\n        if string:sub(j,j) == \"]\"\
    \ then\n          return true\n        end\n      end\n    end\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwm8eds1c.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwm8eds1c.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local c = 0\n  for i = 1, #string do\n    local\
    \ v = string:sub(i, i)\n    if v == '[' then\n      c = c + 1\n    elseif v ==\
    \ ']' then\n      c = c - 1\n    end\n    if c < 0 then\n      return false\n\
    \    end\n  end\n  return c == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2712hg4.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc2712hg4.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjntzv1pp.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpjntzv1pp.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = 0\n  for i = 1, #string do\n   \
    \ if string:sub(i, i) == '[' then\n      stack = stack + 1\n    else\n      stack\
    \ = stack - 1\n    end\n    if stack < 0 then\n      return false\n    end\n \
    \ end\n  return stack > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9i50x36.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl9i50x36.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local bracket_count = 0\n    for _, char in\
    \ ipairs(string) do\n        if char == '[' then\n            bracket_count =\
    \ bracket_count + 1\n        elseif char == ']' then\n            bracket_count\
    \ = bracket_count - 1\n        end\n        if bracket_count < 0 then\n      \
    \      return false\n        end\n    end\n    return bracket_count > 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ljrbnwo.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0ljrbnwo.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local has_nested = false\n    local stack =\
    \ Stack()\n    for c in string:gmatch(\".\") do\n        if c == \"[\" then\n\
    \            stack:push(c)\n        elseif c == \"]\" then\n            if stack:peek()\
    \ == \"[\" then\n                stack:pop()\n                has_nested = true\n\
    \            else\n                stack:push(c)\n            end\n        end\n\
    \    end\n    return has_nested and stack:empty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ysb_ntt.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp6ysb_ntt.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp6ysb_ntt.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local open, close = 0, 0\n    for _, char in\
    \ ipairs(string) do\n        if char == '[' then\n            open = open + 1\n\
    \        elseif char == ']' then\n            close = close + 1\n        end\n\
    \    end\n    return open > close\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzaoj_771.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzaoj_771.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local pre1 = string:gsub('%[%]', '')\n  local\
    \ pre2 = pre1:gsub('%[[%]%]', '')\n  local pre3 = pre2:gsub('%[[%[%]%]%]', '')\n\
    \  local pre4 = pre3:gsub('%[[%[%[%]%]%]%]', '')\n  local pre5 = pre4:gsub('%[[%[%[%[%]%]%]%]%]',\
    \ '')\n  local pre6 = pre5:gsub('%[[%[%[%[%[%]%]%]%]%]%]', '')\n  local pre7 =\
    \ pre6:gsub('%[[%[%[%[%[%[%]%]%]%]%]%]%]', '')\n  local pre8 = pre7:gsub('%[[%[%[%[%[%[%[%]%]%]%]%]%]%]%]',\
    \ '')\n  local pre9 = pre8:gsub('%[[%[%[%[%[%[%[%[%]%]%]%]%]%]%]%]%]', '')\n \
    \ local pre10 = pre9:gsub('%[[%[%[%[%[%[%[%[%[%]%]%]%]%]%]%]%]%]%]', '')\n  if\
    \ pre10 == '' then\n    return true\n  else\n    return false\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd508loq7.lua:12:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpd508loq7.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpd508loq7.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack, new_string = {}, \"\"\n    for\
    \ i=1,#string do\n        local char = string:sub(i,i)\n        if char == \"\
    [\" then\n            table.insert(stack, \"[\")\n        elseif char == \"]\"\
    \ then\n            table.remove(stack)\n        end\n        new_string = new_string\
    \ .. char\n        if #stack == 0 then\n            break\n        end\n    end\n\
    \    local reverse_string = string.reverse(new_string)\n    local open_count,\
    \ close_count = 0, 0\n    for i=1,#reverse_string do\n        local char = reverse_string:sub(i,i)\n\
    \        if char == \"[\" then\n            open_count = open_count + 1\n    \
    \    elseif char == \"]\" then\n            close_count = close_count + 1\n  \
    \      end\n        if open_count > 0 and close_count > 0 then\n            return\
    \ true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_k33qm1v.lua:44:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_k33qm1v.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local brackets = { ['['] = ']', [']'] = '[' }\n\
    \  local s_len, buffer = string.len(string), {}\n  local bracket, match\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptzv9c1ps.lua:34: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- number of opening brackets\n    local open\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp01a8hjzq.lua:33: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    stack = Stack.new()\n    for i = 1, #string\
    \ do\n        local char = string:sub(i, i)\n        if char == '[' then\n   \
    \         stack:push(char)\n        elseif char == ']' then\n            if stack:is_empty()\
    \ then\n                return false\n            else\n                stack:pop()\n\
    \            end\n        end\n    end\n    return stack:is_empty()\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcn2l9kxp.lua:11:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpcn2l9kxp.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpcn2l9kxp.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal count = 0\n\tfor i = 1, #string do\n\t\t\
    if string:sub(i, i) == '[' then\n\t\t\tcount = count + 1\n\t\telseif string:sub(i,\
    \ i) == ']' then\n\t\t\tcount = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\
    \treturn false\n\t\tend\n\tend\n\treturn count > 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6nersr1u.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6nersr1u.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local results = { [\"{\"] = \"}\", [\"[\"] = \"\
    ]\", [\"(\"] = \")\" }\n  local left, right = {}, {}\n  for i = 1, #string do\n\
    \    if string.sub(string, i, i) == \"{\" or string.sub(string, i, i) == \"[\"\
    \ or string.sub(string, i, i) == \"(\" then\n      table.insert(left, string.sub(string,\
    \ i, i))\n    elseif string.sub(string, i, i) == \"}\" or string.sub(string, i,\
    \ i) == \"]\" or string.sub(string, i, i) == \")\" then\n      table.insert(right,\
    \ string.sub(string, i, i))\n    end\n  end\n  local left_count, right_count =\
    \ 0, 0\n  for i = 1, #left do\n    if results[left[i]] == right[i] then\n    \
    \  left_count = left_count + 1\n    end\n  end\n  for i = 1, #right do\n    if\
    \ results[left[i]] == right[i] then\n      right_count = right_count + 1\n   \
    \ end\n  end\n  if left_count > 0 and right_count > 0 then\n    return true\n\
    \  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0otrrhze.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0otrrhze.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  return string:find('%[%]')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxbm9j4z.lua:17:\
    \ expected: true, actual: 2\nstack traceback:\n\t/tmp/tmpfxbm9j4z.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local right_brackets = {[\"}\"] = \"{\"; [\"\
    ]\"] = \"[\"; [\")\"] = \"(\"}\n    local stack = {}\n    for i = 1, #string do\n\
    \        local ch = string:sub(i, i)\n        if ch == \"(\" or ch == \"[\" or\
    \ ch == \"{\" then\n            table.insert(stack, ch)\n        elseif ch ==\
    \ \")\" or ch == \"]\" or ch == \"}\" then\n            if #stack > 0 and stack[#stack]\
    \ == right_brackets[ch] then\n                table.remove(stack)\n          \
    \  else\n                return false\n            end\n        end\n    end\n\
    \    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjz3v6loq.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjz3v6loq.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local length = string.len(string)\n  local output\
    \ = false\n  local currentCharacter\n  local buffer = ''\n  for i = 1, length\
    \ do\n    currentCharacter = string.sub(string, i, i)\n    if currentCharacter\
    \ == '[' then\n      buffer = buffer .. currentCharacter\n    elseif currentCharacter\
    \ == ']' then\n      buffer = buffer .. currentCharacter\n      if buffer == '[]'\
    \ then\n        output = true\n        break\n      end\n    end\n  end\n  return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptuudr3mm.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptuudr3mm.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local counter = 0\n    for i=1,#string do\n\
    \        if string:sub(i,i) == '[' then\n            counter = counter + 1\n \
    \       elseif string:sub(i,i) == ']' then\n            counter = counter - 1\n\
    \        end\n        if counter < 0 then\n            return false\n        end\n\
    \    end\n    return counter == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpent7j_uq.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpent7j_uq.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count = 0\n    for i = 1, #string do\n\
    \        if count < 0 then return false end\n        if string:sub(i, i) == '['\
    \ then\n            count = count + 1\n        else\n            count = count\
    \ - 1\n        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sgdqhpn.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4sgdqhpn.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local balance = 0\n    for i = 1, #string do\n\
    \        if string[i] == '[' then\n            balance = balance + 1\n       \
    \ else\n            balance = balance - 1\n        end\n        if balance < 0\
    \ then\n            return false\n        end\n    end\n    return balance > 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpymkjx1aa.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpymkjx1aa.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    for i = 1, #string do\n        if string:find('[]')\
    \ or string:find('[[][]]') then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwxze9g3e.lua:12:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpwxze9g3e.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpwxze9g3e.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    return string:match(\".[[]\") or string:match(\"\
    [[].\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0bgzglv0.lua:17:\
    \ expected: true, actual: \"[[\"\nstack traceback:\n\t/tmp/tmp0bgzglv0.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbnv70mg.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpgbnv70mg.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local patterns = {'\\\\[\\\\[\\\\]\\\\]', '\\\\\
    [\\\\[\\\\]', '\\\\]\\\\]\\\\[\\\\[', '\\\\]\\\\]\\\\[', '\\\\[\\\\]\\\\]\\\\\
    [', '\\\\[\\\\]\\\\]', '\\\\[\\\\]\\\\[\\\\]', '\\\\[\\\\]\\\\[', '\\\\]\\\\[\\\
    \\]\\\\]'}\n  for i, pattern in ipairs(patterns) do\n    string = string:gsub(pattern,\
    \ '')\n  end\n  return #string == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7x9r7fcs.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7x9r7fcs.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local depth = 0\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    depth = depth + 1\n        elseif char == ']' then\n            depth = depth\
    \ - 1\n        end\n        if depth < 0 then\n            return false\n    \
    \    end\n    end\n    return depth > 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuk3pzuym.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuk3pzuym.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tif string == '' then return false end\n\tif string:match('%[%]')\
    \ then return true end\n\tlocal function nest( string )\n\t\tif string:match('%[%]')\
    \ then return true end\n\t\tif string:match('^%[%]') then return nest(string:sub(3))\
    \ end\n\t\tif string:match('%[%]$') then return nest(string:sub(1,-3)) end\n\t\
    \tif string:match('%[%]') then return nest(string:gsub('%[%]','')) end\n\t\treturn\
    \ false\n\tend\n\treturn nest(string)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpce9ko4xx.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpce9ko4xx.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local num = 0\n    for i = 1, #string do\n \
    \       if string[i] == '[' then\n            num = num + 1\n        else\n  \
    \          num = num - 1\n        end\n        if num < 0 then\n            return\
    \ false\n        end\n    end\n    return num == 0\nend\nprint(is_nested('[[]]'))\n\
    print(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\n\
    print(is_nested('[[][]]'))\nprint(is_nested('[[]][['))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "false\nfalse\nfalse\nfalse\nfalse\nfalse\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmpp81sj5cq.lua:34: expected: true, actual: false\nstack\
    \ traceback:\n\t/tmp/tmpp81sj5cq.lua:34: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local even = 0\n    local odd = 0\n    for i\
    \ = 1, #string do\n        if i % 2 == 0 then\n            if string.sub(string,\
    \ i, i) == '[' then\n                even = even + 1\n            end\n      \
    \  else\n            if string.sub(string, i, i) == ']' then\n               \
    \ odd = odd + 1\n            end\n        end\n    end\n    if even == odd then\n\
    \        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gxeln23.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9gxeln23.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count = 0\n    for i = 1, #string do\n\
    \        if string:sub(i, i) == '[' then\n            count = count + 1\n    \
    \    elseif string:sub(i, i) == ']' then\n            count = count - 1\n    \
    \    end\n        if count < 0 then\n            return false\n        end\n \
    \   end\n    return count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzylsezze.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzylsezze.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe03nbmbx.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpe03nbmbx.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeit38ind.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpeit38ind.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    return string:match('(%[%])%1*') and true or\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafykjq7l.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpafykjq7l.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  \n  local str_table = {}\n  for i = 1, string.len(string)\
    \ do\n    if (string.sub(string, i, i) == '[') then\n      table.insert(str_table,\
    \ '[')\n    elseif (string.sub(string, i, i) == ']') then\n      table.remove(str_table)\n\
    \    end\n  end\n  \n  return #str_table == 0, #str_table\n  \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0cwq8knp.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0cwq8knp.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  if string:match('[^%[%]]') then return false end\n\
    \  while string:match('%[%[') or string:match('%]%]') do\n    string = string:gsub('%[%[',''):gsub('%]%]','')\n\
    \  end\n  return string:len() < 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxle2uqrg.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxle2uqrg.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for c in string:gmatch\
    \ '.' do\n        if c == '[' then\n            table.insert(stack, c)\n     \
    \   elseif c == ']' then\n            if #stack == 0 then\n                return\
    \ false\n            else\n                table.remove(stack)\n            end\n\
    \        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbcjzi1td.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbcjzi1td.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  if string:match(\".*%[%[.*%]%].*\") then\n   \
    \ return true\n  else\n    return false\n  end\nend\nprint(is_nested('[[]]'))\n\
    print(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\n\
    print(is_nested('[[][]]'))\nprint(is_nested('[[]][['))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "true\nfalse\nfalse\nfalse\ntrue\ntrue\n.\nRan 1 tests in 0.000 seconds,\
    \ 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local list = {}\n    for _, c in pairs(string)\
    \ do\n        if c == '[' then\n            table.insert(list, 1, c)\n       \
    \ elseif c == ']' then\n            if #list == 0 then\n                return\
    \ false\n            else\n                table.remove(list, 1)\n           \
    \ end\n        end\n    end\n    return #list == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpavipqfz0.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpavipqfz0.lua:12: in local 'candidate'\n\t/tmp/tmpavipqfz0.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal seq = {};\n\tfor i = 1, string.len(string)\
    \ do\n\t\tlocal char = string.sub(string, i, i);\n\t\tif char == '[' then\n\t\t\
    \ttable.insert(seq, char);\n\t\telseif char == ']' then\n\t\t\tif table.remove(seq)\
    \ ~= '[' then\n\t\t\t\treturn false;\n\t\t\tend\n\t\tend\n\tend\n\treturn #seq\
    \ == 0;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6k3mkv7.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps6k3mkv7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local open = {}\n  for _, c in ipairs({string.byte(string,\
    \ 1, #string)}) do\n    if c == 91 then\n      table.insert(open, c)\n    elseif\
    \ c == 93 then\n      if #open == 0 then\n        return false\n      else\n \
    \       table.remove(open)\n      end\n    end\n  end\n  return #open == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj89y_oxc.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj89y_oxc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  if type(string) ~= \"string\" then return end\n\
    \  local stack = {}\n  for i=1,#string do\n    local char = string:sub(i,i)\n\
    \    if char == \"[\" then\n      table.insert(stack, \"]\")\n    elseif char\
    \ == \"]\" then\n      if stack[#stack] == \"]\" then\n        table.remove(stack)\n\
    \      else\n        return false\n      end\n    end\n  end\n  return #stack\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d887w18.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9d887w18.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local nesting = 0\n  for i = 1, #string do\n \
    \   if string[i] == '[' then\n      nesting = nesting + 1\n    else\n      nesting\
    \ = nesting - 1\n    end\n    if nesting < 0 then\n      return false\n    end\n\
    \  end\n  return nesting == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprc26d44n.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprc26d44n.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  if (string[i] == '[') then\n      table.insert(stack, '[')\n    elseif (string[i]\
    \ == ']') then\n      if (#stack == 0) then\n        return false\n      else\n\
    \        table.remove(stack)\n      end\n    end\n  end\n  return (#stack == 0)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5j3k1sd.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpi5j3k1sd.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\treturn string:match('%[%[.-%]%]')\nend\nassert(is_nested('[[]]')\
    \ == true)\nassert(is_nested('[]]]]]]][[[[[]') == false)\nassert(is_nested('[][]')\
    \ == false)\nassert(is_nested('[]') == false)\nassert(is_nested('[[][]]') == true)\n\
    assert(is_nested('[[]][[') == true)\nassert(is_nested('[][][][]') == false)\n\
    assert(is_nested('[][][[[]]]') == true)\nassert(is_nested('[][][][]') == false)\n\
    assert(is_nested('[][][[]]') == true)\nassert(is_nested('[][[][][]]') == true)\n\
    assert(is_nested('[][[[][][]]]') == true)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpidc8in9u.lua:13: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpidc8in9u.lua:13: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local count = 0\n  for i = 1, #string do\n   \
    \ if count < 0 then\n      return false\n    end\n    if string:sub(i, i) == '['\
    \ then\n      count = count + 1\n    else\n      count = count - 1\n    end\n\
    \  end\n  return count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1h3lymn.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpf1h3lymn.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- ...\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklsmldlg.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpklsmldlg.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tstring = string:gsub('[^%[%]]', '')\n\tlocal len\
    \ = string:len()\n\tfor i = 1, len do\n\t\tstring = string:gsub('%[%]', '')\n\t\
    end\n\treturn len ~= string:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgsoodlo.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjgsoodlo.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\n\
    print(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\n\
    print(is_nested('[[]][['))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmpgwe9bw56.lua:38: expected: false, actual: true\nstack\
    \ traceback:\n\t/tmp/tmpgwe9bw56.lua:38: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count = 0\n    for i = 1, string.len(string)\
    \ do\n        if string.sub(string, i, i) == '[' then\n            count = count\
    \ + 1\n        elseif string.sub(string, i, i) == ']' then\n            count\
    \ = count - 1\n        end\n        if count < 0 then\n            return false\n\
    \        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0bi74k2.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpe0bi74k2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local n = string:len()\n    local depth = 0\n\
    \    for i = 1, n do\n        local ch = string:sub(i, i)\n        if ch == '['\
    \ then\n            depth = depth + 1\n        elseif ch == ']' then\n       \
    \     depth = depth - 1\n        end\n        if depth < 0 then\n            return\
    \ false\n        end\n    end\n    return depth == 0\nend\nassert(is_nested('[[]]')\
    \ == true)\nassert(is_nested('[]]]]]]][[[[[]') == false)\nassert(is_nested('[][]')\
    \ == false)\nassert(is_nested('[]') == false)\nassert(is_nested('[[][]]') == true)\n\
    assert(is_nested('[[]][[') == true)\nassert(is_nested('[[') == false)\nassert(is_nested(']]')\
    \ == false)\nassert(is_nested('[[[]]') == false)\nassert(is_nested('[[[[[[[]]]]]]]')\
    \ == true)\nassert(is_nested('[[][]]]') == false)\nassert(is_nested('[]]]') ==\
    \ false)\nassert(is_nested('[[[]]]]') == false)\nassert(is_nested(']][[') == false)\n\
    assert(is_nested('[[][[') == false)\nassert(is_nested('][[[') == false)\nassert(is_nested('][]')\
    \ == false)\nassert(is_nested('[]][[]') == false)\nassert(is_nested('[]][') ==\
    \ false)\nassert(is_nested('][') == false)\nassert(is_nested('[][') == false)\n\
    assert(is_nested(']][') == false)\nassert(is_nested('[]]') == false)\nassert(is_nested('[[][')\
    \ == false)\nassert(is_nested('[[[[[[[[[]]]]]]]]]') == true)\nassert(is_nested('[][]]]')\
    \ == false)\nassert(is_nested('[][][]') == false)\nassert(is_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptewb966r.lua:54: ')' expected (to close '(' at line 53) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  for i = 1, string.len(string) do\n    for j =\
    \ i, string.len(string) do\n      local p = string.sub(string, i, j)\n      if\
    \ string.match(p, \"%[%]\") then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6t5ik5rv.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6t5ik5rv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local nested = false\n    local lvl = 0\n  \
    \  for i = 1, string.len(string) do\n        if string.sub(string, i, i) == '['\
    \ then\n            lvl = lvl + 1\n        elseif string.sub(string, i, i) ==\
    \ ']' then\n            lvl = lvl - 1\n        end\n        if lvl > 1 then\n\
    \            nested = true\n        end\n    end\n    return nested\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4a7c9boe.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4a7c9boe.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    string:gsub('[^[]', '')\n    if string:find('[[')\
    \ == nil then return false end\n    if string:find(']]') == nil then return false\
    \ end\n    if string:find('[[') > string:find(']]') then return false end\n  \
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp300_qwik.lua:12:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmp300_qwik.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp300_qwik.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50qgz2yh.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp50qgz2yh.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, 1, char)\n        elseif char == ']' then\n         \
    \   if #stack > 0 then\n                table.remove(stack, 1)\n            else\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjegqio55.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjegqio55.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = 0\n  for i = 1, #string do\n   \
    \ if string:sub(i, i) == '[' then\n      stack = stack + 1\n    else\n      stack\
    \ = stack - 1\n    end\n    if stack < 0 then\n      return false\n    end\n \
    \ end\n  return stack > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiphk0got.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiphk0got.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local seq = 0\n  for i = 1, #string do\n    if\
    \ string:sub(i, i) == '[' then\n      seq = seq + 1\n    else\n      seq = seq\
    \ - 1\n    end\n    if seq < 0 then\n      return false\n    end\n  end\n  return\
    \ seq == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppd5a6ive.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppd5a6ive.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local sum = 0\n    for i = 1, #string do\n \
    \       if string[i] == '[' then\n            sum = sum + 1\n        else\n  \
    \          sum = sum - 1\n        end\n        if sum < 0 then\n            return\
    \ false\n        end\n    end\n    return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_m1n_ghr.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_m1n_ghr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    return string:find(\"%[%[\") and string:find(\"\
    %]%]\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpse5glu.lua:17:\
    \ expected: true, actual: 3\nstack traceback:\n\t/tmp/tmpqpse5glu.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local s = string:gsub('%[%[%]%]', '')\n    return\
    \ #s == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mj3nw7z.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4mj3nw7z.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal stack = {}\n\tfor i = 1, #string do\n\t\t\
    local char = string:sub(i, i)\n\t\tif (char == \"[\") then\n\t\t\ttable.insert(stack,\
    \ char)\n\t\telseif (#stack > 0) then\n\t\t\ttable.remove(stack)\n\t\telse\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn (#stack == 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizq4mprj.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpizq4mprj.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7snk9025.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp7snk9025.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local length = #string\n    local brackets =\
    \ {}\n    local i = 1\n    while i <= length do\n        if string:sub(i, i) ==\
    \ '[' then\n            table.insert(brackets, string:sub(i, i))\n        elseif\
    \ string:sub(i, i) == ']' then\n            if #brackets == 0 then\n         \
    \       return false\n            else\n                table.remove(brackets)\n\
    \            end\n        end\n        i = i + 1\n    end\n    return #brackets\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u2dam8d.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0u2dam8d.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count = 0\n    for i = 1, #string do\n\
    \        if string:sub(i, i) == '[' then\n            count = count + 1\n    \
    \    elseif string:sub(i, i) == ']' then\n            count = count - 1\n    \
    \    end\n        if count < 0 then\n            return false\n        end\n \
    \   end\n    return count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxa7jolhu.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxa7jolhu.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- if ends don't match, return false\n    if\
    \ string:sub(1,1) == ']' or string:sub(-1) == '[' then\n        return false\n\
    \    end\n    -- iterate through string and return false if it sees \n    -- a\
    \ closing before an opening\n    for i = 1, #string - 1 do\n        if string:sub(i,i)\
    \ == ']' and string:sub(i+1,i+1) == '[' then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5kkidt_.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps5kkidt_.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal count = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppuoo2teg.lua:32: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local num = 0\n  for i = 1, #string do\n    if\
    \ string:sub(i, i) == '[' then\n      num = num + 1\n    else\n      num = num\
    \ - 1\n    end\n    if num < 0 then\n      return false\n    end\n  end\n  return\
    \ num == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71hd208_.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp71hd208_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal level = 0\n\tlocal has_open = false\n\t\
    for i = 1, string.len(string) do\n\t\tif string.sub(string, i, i) == '[' then\n\
    \t\t\tlevel = level + 1\n\t\t\thas_open = true\n\t\telse\n\t\t\tlevel = level\
    \ - 1\n\t\tend\n\t\tif level < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    return has_open and level == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8qxm2wfy.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8qxm2wfy.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, string.len(string)\
    \ do\n        local ch = string.sub(string, i, i)\n        if ch == '[' then\n\
    \            table.insert(stack, ch)\n        elseif ch == ']' then\n        \
    \    if #stack == 0 then\n                return false\n            else\n   \
    \             table.remove(stack)\n            end\n        end\n    end\n   \
    \ return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbr7mvziz.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbr7mvziz.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu4hi0ht.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbu4hi0ht.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- First, get the amount of bracket pairs found\
    \ in the string.\n    local i = string:gsub('%[%]', '')\n    if i == 0 then return\
    \ false end\n    -- Next, check if the brackets are in place.\n    local j = string:match('%[%]')\n\
    \    if j == nil then return false end\n    -- Finally, remove all bracket pairs,\
    \ and if there are any left, return false.\n    local k = string:gsub('%[%]',\
    \ '')\n    if k == '' then return true else return false end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaa30hm69.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaa30hm69.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local char = string:sub(i, i)\n    if char == '[' then\n      table.insert(stack,\
    \ char)\n    elseif char == ']' then\n      if #stack == 0 then\n        return\
    \ false\n      else\n        table.remove(stack)\n      end\n    end\n  end\n\
    \  return #stack > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxycc0k3j.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxycc0k3j.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    while string:find('[]') do\n        string =\
    \ string:gsub('[]', '')\n    end\n    return string == ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdl93fghg.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpdl93fghg.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpdl93fghg.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count=0\n    for i=1,#string do\n    \
    \    if string:sub(i,i)=='[' then\n            count=count+1\n        elseif string:sub(i,i)==']'\
    \ then\n            count=count-1\n        end\n        if count<0 then\n    \
    \        return false\n        end\n    end\n    return count>0\nend\nassert(is_nested('[[]]')==true)\n\
    assert(is_nested('[]]]]]]][[[[[]')==false)\nassert(is_nested('[][]')==false)\n\
    assert(is_nested('[]')==false)\nassert(is_nested('[[][]]')==true)\nassert(is_nested('[[]][[')==true)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsni1z1yt.lua:24: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpsni1z1yt.lua:24: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal stack = {}\n\tlocal lookup = {\n\t\t[\"\
    [\"] = \"]\",\n\t\t[\"{\"] = \"}\",\n\t\t[\"(\"] = \")\"\n\t}\n\tfor _, val in\
    \ ipairs(string:split(\"\")) do\n\t\tif lookup[val] then\n\t\t\ttable.insert(stack,\
    \ val)\n\t\telseif #stack > 0 and lookup[stack[#stack]] == val then\n\t\t\ttable.remove(stack)\n\
    \t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn #stack == 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc52s719o.lua:17:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpc52s719o.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpc52s719o.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for _, char in ipairs(string)\
    \ do\n    if char == '[' then\n      table.insert(stack, char)\n    elseif char\
    \ == ']' then\n      table.remove(stack)\n    end\n  end\n  return #stack > 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnul612lv.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnul612lv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    assert(type(string) == \"string\")\n    local\
    \ list = {}\n    for i=1, #string do\n        local c = string:sub(i,i)\n    \
    \    if c == \"[\" then\n            table.insert(list, 1, c)\n        elseif\
    \ c == \"]\" then\n            table.remove(list, 1)\n        end\n    end\n \
    \   return #list == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwgmtkzss.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwgmtkzss.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal stack = {}\n\tfor i = 1, #string do\n\t\t\
    local char = string:sub(i, i)\n\t\tif char == '[' then\n\t\t\ttable.insert(stack,\
    \ char)\n\t\telseif char == ']' then\n\t\t\tif #stack > 0 then\n\t\t\t\ttable.remove(stack)\n\
    \t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbiz9mpf6.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbiz9mpf6.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local left_brackets = {}\n    local right_brackets\
    \ = {}\n    for i=1, #string do\n        if string:sub(i,i) == '[' then\n    \
    \        table.insert(left_brackets, i)\n        else\n            table.insert(right_brackets,\
    \ i)\n        end\n    end\n    if #left_brackets == 0 and #right_brackets ==\
    \ 0 then\n        return false\n    end\n    for i=1, #left_brackets do\n    \
    \    if left_brackets[i] > right_brackets[i] then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqjc73iy.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqqjc73iy.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal open=0\n\tlocal close=0\n\tfor c in string:gmatch(\"\
    .\") do\n\t\tif c==\"[\" then\n\t\t\topen=open+1\n\t\telseif c==\"]\" then\n\t\
    \t\tclose=close+1\n\t\tend\n\tend\n\tif open==close then\n\t\treturn false\n\t\
    else\n\t\treturn true\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwby1xsob.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwby1xsob.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = Stack()\n    for c in string:gmatch(\"\
    .\") do\n        if c == \"[\" then\n            stack:push(\"x\")\n        elseif\
    \ c == \"]\" then\n            if stack:empty() then\n                return false\n\
    \            else\n                stack:pop()\n            end\n        end\n\
    \    end\n    return stack:empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpquq7p9uc.lua:11:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpquq7p9uc.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpquq7p9uc.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, string.len(string)\
    \ do\n        if string.sub(string, i, i) == '[' then\n            table.insert(stack,\
    \ 1, i)\n        elseif string.sub(string, i, i) == ']' then\n            table.remove(stack,\
    \ 1)\n        end\n    end\n    return next(stack) == nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa7n1242.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsa7n1242.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local brackets = {\n    ['['] = true,\n    [']']\
    \ = true\n  }\n  local stack = {}\n  for index, char in ipairs(string) do\n  \
    \  if brackets[char] then\n      stack[#stack + 1] = char\n    end\n  end\n  if\
    \ #stack % 2 ~= 0 then\n    return false\n  end\n  local parentheses = 0\n  for\
    \ _, char in ipairs(stack) do\n    if char == '[' then\n      parentheses = parentheses\
    \ + 1\n    else\n      parentheses = parentheses - 1\n    end\n    if parentheses\
    \ < 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx564mvxv.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx564mvxv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal seq = {}\n\tlocal seq_start = 0\n\tlocal\
    \ function is_pair(a, b)\n\t\tif (a == \"[\" and b == \"]\") then\n\t\t\treturn\
    \ true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\tfor i = 1, string.len(string)\
    \ do\n\t\tlocal char = string.sub(string, i, i)\n\t\tif (is_pair(char, seq[seq_start]))\
    \ then\n\t\t\tseq_start = seq_start - 1\n\t\telse\n\t\t\tseq_start = seq_start\
    \ + 1\n\t\t\tseq[seq_start] = char\n\t\tend\n\tend\n\tif (seq_start == 0) then\n\
    \t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nprint(is_nested(\"[[]]\"\
    ))\nprint(is_nested(\"[]]]]]]][[[[[]\"))\nprint(is_nested(\"[][]\"))\nprint(is_nested(\"\
    []\"))\nprint(is_nested(\"[[][]]\"))\nprint(is_nested(\"[[]][[\"))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "false\nfalse\nfalse\nfalse\nfalse\nfalse\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmpnesyramk.lua:45: expected: true, actual: false\nstack\
    \ traceback:\n\t/tmp/tmpnesyramk.lua:45: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    --local brackets = {\"[\", \"]\"}\n    local\
    \ left = 0\n    local right = 0\n    local i = 1\n    while i <= #string do\n\
    \        if string.sub(string, i, i) == \"[\" then\n            left = left +\
    \ 1\n        elseif string.sub(string, i, i) == \"]\" then\n            right\
    \ = right + 1\n        end\n        i = i + 1\n    end\n    if left == right then\n\
    \        return false\n    else\n        return true\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpruzq33ww.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpruzq33ww.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local len = string.len(string)\n  local s = 0\n\
    \  for i = 1, len do\n    if (string.sub(string, i, i) == '[') then\n      s =\
    \ s + 1\n    else\n      s = s - 1\n    end\n    if (s < 0) then\n      return\
    \ false\n    end\n  end\n  return s == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfgseyy7k.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfgseyy7k.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count = 0\n    for i = 1, #string do\n\
    \        if string:sub(i, i) == '[' then\n            count = count + 1\n    \
    \    elseif string:sub(i, i) == ']' then\n            count = count - 1\n    \
    \    end\n        if count < 0 then\n            return false\n        end\n \
    \   end\n    return count > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq67is00y.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq67is00y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local l, r = 0, 0\n  for _, v in ipairs(string)\
    \ do\n    if v == '[' then l = l + 1\n    elseif v == ']' then r = r + 1 end\n\
    \    if r > l then return false end\n  end\n  return l > 0 and l == r\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2p8idqn2.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2p8idqn2.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count = 0\n    for i = 1, #string do\n\
    \        local bracket = string:sub(i, i)\n        if bracket == '[' then\n  \
    \          count = count + 1\n        elseif bracket == ']' then\n           \
    \ count = count - 1\n        end\n        if count < 0 then\n            return\
    \ false\n        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9dtv0ex.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr9dtv0ex.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  --\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpul4j2xod.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpul4j2xod.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
