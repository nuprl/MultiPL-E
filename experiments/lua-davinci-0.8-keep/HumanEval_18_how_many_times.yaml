name: HumanEval_18_how_many_times
language: lua
prompt: "-- Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>> how_many_times('aaa',\
  \ 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\nlocal function how_many_times(string,\
  \ substring)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
  \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
  \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
  \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal x, y = 0, 0\n\tlocal len = #substring\n\twhile true do\n\t\t\
    x = string.find(string, substring, y + 1, true)\n\t\tif not x then\n\t\t\treturn\
    \ y\n\t\tend\n\t\ty = y + 1\n\tend\nend", "    local count = 0\n    local sub_len\
    \ = substring:len()\n    for i = 1, string:len() do\n        if string:sub(i,\
    \ i + sub_len - 1) == substring then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    if not string or not substring then\n \
    \       return 0\n    end\n    if string == '' or substring == '' then\n     \
    \   return 0\n    end\n    local string_len = string.len(string)\n    local substring_len\
    \ = string.len(substring)\n    local count = 0\n    local k = 1\n    while k <=\
    \ string_len do\n        local res, end_index = string.find(string, substring,\
    \ k, true)\n        if res then\n            count = count + 1\n            k\
    \ = end_index + 1\n        else\n            k = string_len + 1\n        end\n\
    \    end\n    return count\nend", "  if string == '' or substring == '' then return\
    \ 0 end\n  return ((string:gsub(substring, ''))):len() + 1\nend", "  if #substring\
    \ == 0 then return 1 end\n  if #string == 0 then return 0 end\n  local count =\
    \ 0\n  local subpos = 0\n  for _, ch in ipairs(string) do\n    if ch == substring:sub(subpos\
    \ + 1, subpos + 1) then\n      subpos = subpos + 1\n      if subpos == #substring\
    \ then\n        count = count + 1\n        subpos = 0\n      end\n    else\n \
    \     subpos = 0\n    end\n  end\n  return count\nend", "  local count = 0\n \
    \ local i = 0\n  local j = 0\n  while i < string.len(string) do\n    if string.sub(string,\
    \ i, i + string.len(substring) - 1) == substring then\n      j = i + string.len(substring)\n\
    \      count = count + 1\n    end\n    i = i + 1\n  end\n  return count\nend",
  "    local count = 0\n    local index = 0\n    while true do\n        index = string.find(string,\
    \ substring, index + 1, true)\n        if index == nil then\n            break\n\
    \        end\n        count = count + 1\n    end\n    return count\nend", "  \
    \  local count = 0\n    local pos = 0\n    while true do\n        local nxt_pos\
    \ = string:find(substring, pos, true)\n        if not nxt_pos then\n         \
    \   break\n        end\n        count = count + 1\n        pos = nxt_pos + 1\n\
    \    end\n    return count\nend", "    local c = 0\n    local i = 0\n    while\
    \ true do\n        i = string.find(string, substring, i+1, true)\n        if not\
    \ i then\n            break\n        end\n        c = c + 1\n    end\n    return\
    \ c\nend", "  local count = 0\n  local index = 1\n  repeat\n    index = string.find(string,\
    \ substring, index, true)\n    if index ~= nil then\n      count = count + 1\n\
    \      index = index + 1\n    end\n  until index == nil\n  return count\nend",
  "\tlocal count = 0\n\tfor match in string:gmatch(substring) do\n\t\tcount = count\
    \ + 1\n\tend\n\treturn count\nend", "    local count = 0\n    for i = 1, #string\
    \ - #substring + 1 do\n        if string:sub(i, i + #substring - 1) == substring\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local index = string:find(substring, 0, true)\n    if index == nil\
    \ then\n        return 0\n    end\n    return 1 + how_many_times(string:sub(index\
    \ + 1), substring)\nend", "    local how_many = 0\n    local pos = 0\n    while\
    \ true do\n        pos = string:find(substring, pos + 1, true)\n        if not\
    \ pos then break end\n        how_many = how_many + 1\n    end\n    return how_many\n\
    end", "  local last_index = 0\n  local count = 0\n  repeat\n    last_index = string.find(string,\
    \ substring, last_index + 1, true)\n    if last_index then\n      count = count\
    \ + 1\n    end\n  until not last_index\n  return count\nend", "  local how_many\
    \ = 0\n  local last_pos = 1\n  while true do\n    local _, pos = string:find(substring,\
    \ last_pos)\n    if pos then\n      how_many = how_many + 1\n      last_pos =\
    \ pos + 1\n    else\n      break\n    end\n  end\n  return how_many\nend", " \
    \   return string:gsub(substring, '')\nend", "  local count = 0\n  local index\
    \ = 1\n  local last_find = 0\n  while index do\n    index = string.find(string,\
    \ substring, index)\n    if index then\n      count = count + 1\n      last_find\
    \ = index\n      index = index + 1\n    end\n  end\n  return count, last_find\n\
    end", "    if string == '' or substring == '' then\n        return 0\n    end\n\
    \    local t = {}\n    for i = 1, #string - #substring + 1 do\n        local a\
    \ = string:sub(i, i + #substring - 1)\n        if a == substring then\n      \
    \      t[#t + 1] = i\n        end\n    end\n    return #t\nend", "  local _,count\
    \ = string:gsub(substring, '')\n  return count\nend", "    if substring == ''\
    \ then\n        return 0\n    end\n    local number_of_times = 1\n    local start\
    \ = string.find(string, substring)\n    if start == nil then\n        return 0\n\
    \    end\n    while true do\n        start = string.find(string, substring, start\
    \ + 1)\n        if start == nil then\n            break\n        end\n       \
    \ number_of_times = number_of_times + 1\n    end\n    return number_of_times\n\
    end", "    local m = 1\n    local count = 0\n    while true do\n        m = string.find(string,\
    \ substring, m, true)\n        if m == nil then\n            break\n        end\n\
    \        count = count + 1\n        m = m + 1\n    end\n    return count\nend",
  "    local count = 0\n    local k = 0\n    local index = 0\n    while true do\n\
    \        index = string.find(string, substring, index + 1)\n        if index ~=\
    \ nil then\n            count = count + 1\n        else\n            break\n \
    \       end\n    end\n    return count\nend", "  local times = 0\n  local osubstring\
    \ = substring\n  while true do\n    substring = string.match(string, osubstring)\n\
    \    if substring == nil then break end\n    times = times + 1\n    string = string.sub(string,\
    \ #substring + 1)\n  end\n  return times\nend", "    if string:len() < substring:len()\
    \ then\n        return 0\n    end\n    local count = 0\n    for i = 1, string:len()\
    \ do\n        if string:sub(i, i + substring:len() - 1) == substring then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend", " \
    \   local count = 0\n    local i = 1\n    while i <= #string do\n        local\
    \ j = string.find(string, substring, i, true)\n        if j == nil then\n    \
    \        break\n        end\n        count = count + 1\n        i = j + 1\n  \
    \  end\n    return count\nend", "    local last_index = 0\n    local count = 0\n\
    \    for _ in string:gmatch(substring) do\n        last_index = string:find(substring,\
    \ last_index + 1)\n        count = count + 1\n    end\n    return count\nend",
  "\tlocal _, count = string:gsub(substring, substring)\n\treturn count\nend", "\t\
    local count = 0\n\tfor i = 1, #string do\n\t\tif string:sub(i, i + #substring\
    \ - 1) == substring then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "    local count = 0\n    local i = 0\n    local length = string.len(string)\n\
    \    local sublength = string.len(substring)\n    while i < length do\n      \
    \  i = string.find(string, substring, i + 1, true)\n        if i then\n      \
    \      count = count + 1\n        else\n            break\n        end\n    end\n\
    \    return count\nend", "\t-- create a function to iterate over our string\n\t\
    local function iter(i)\n\t\ti = i + 1\n\t\tlocal index = string.find(string, substring,\
    \ i, true)\n\t\tif index then\n\t\t\treturn index\n\t\tend\n\tend", "    local\
    \ cnt = 0\n    local i = 1\n    while true do\n        i = string.find(string,\
    \ substring, i, true)\n        if i == nil then\n            break\n        end\n\
    \        cnt = cnt + 1\n        i = i + 1\n    end\n    return cnt\nend", "\t\
    if substring == '' then return 0 end\n\tlocal _, count = string:gsub(substring,\
    \ '')\n\treturn count\nend", "    local function aux(string, substring, count)\n\
    \        local f = string.find(string, substring)\n        if f == nil then\n\
    \            return count\n        else\n            count = count + 1\n     \
    \       return aux(string.sub(string, f + #substring), substring, count)\n   \
    \     end\n    end\n    return aux(string, substring, 0)\nend", "  if string ==\
    \ '' or substring == '' then\n    return 0\n  end\n  local last_substring_index\
    \ = string.len(string) - string.len(substring) + 1\n  local count = 0\n  for i\
    \ = 1, last_substring_index do\n    if string.sub(string, i, i + string.len(substring)\
    \ - 1) == substring then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  if string == '' or substring == '' then\n    return 0\n  end\n  local\
    \ found = 0\n  local pos = 1\n  local positions = { }\n  while true do\n    local\
    \ s, e = string.find(string, substring, pos)\n    if not s then\n      break\n\
    \    end\n    positions[s] = e\n    pos = e + 1\n    found = found + 1\n  end\n\
    \  return found, positions\nend", "\tlocal count = 0\n\tlocal pos = string.find(string,\
    \ substring, 1, true)\n\twhile pos do\n\t\tcount = count + 1\n\t\tpos = string.find(string,\
    \ substring, pos + 1, true)\n\tend\n\treturn count\nend", "\tlocal _, substring_count\
    \ = string:gsub(substring, \"\")\n\treturn substring_count\nend", "  local times\
    \ = 0\n  local substring_size = #substring\n  local i = 0\n  while true do\n \
    \   i = string.find(string, substring, i + 1, true)\n    if i == nil then break\
    \ end\n    times = times + 1\n  end\n  return times\nend", "  return string.gsub(string,\
    \ substring, '')\nend", "  local result = 0\n  local i = 1\n  while true do\n\
    \    local start_pos, end_pos = string.find(string, substring, i)\n    if start_pos\
    \ then\n      result = result + 1\n      i = end_pos + 1\n    else\n      break\n\
    \    end\n  end\n  return result\nend", "  local counter = 0\n  local next_position\
    \ = 0\n  local position = nil\n  while true do\n    position = string.find(string,\
    \ substring, next_position, true)\n    if position then\n      counter = counter\
    \ + 1\n      next_position = position + 1\n    else\n      break\n    end\n  end\n\
    \  return counter\nend", "  if string == '' or substring == '' then\n    return\
    \ 0\n  end\n  local times = 0\n  local s_length = string.len(string)\n  local\
    \ sub_length = string.len(substring)\n  for i = 1, s_length do\n    if string.sub(string,\
    \ i, i + sub_length - 1) == substring then\n      times = times + 1\n    end\n\
    \  end\n  return times\nend", "    local count = 0\n    local last_match_index\
    \ = 1\n    repeat\n        local match_index = string.find(string, substring,\
    \ last_match_index)\n        if match_index then\n            count = count +\
    \ 1\n            last_match_index = match_index + 1\n        end\n    until not\
    \ match_index\n    return count\nend", "    if #substring == 0 then\n        return\
    \ 0\n    end\n    local total = 0\n    local current_index = 1\n    while true\
    \ do\n        local found_index = string.find(string, substring, current_index,\
    \ true)\n        if found_index == nil then\n            break\n        end\n\
    \        total = total + 1\n        current_index = found_index + 1\n    end\n\
    \    return total\nend", "\tif #substring == 0 then\n\t\treturn 0\n\tend\n\tlocal\
    \ first_char = substring:sub(1, 1)\n\tlocal times = 0\n\tlocal last_found = 0\n\
    \trepeat\n\t\tlast_found = string:find(first_char, last_found + 1)\n\t\tif last_found\
    \ and string:sub(last_found, last_found + #substring - 1) == substring then\n\t\
    \t\ttimes = times + 1\n\t\tend\n\tuntil not last_found\n\treturn times\nend",
  "    if not substring or not string then\n        return 0\n    end\n    local index,\
    \ times = 1, 0\n    repeat\n        index = string.find(string, substring, index,\
    \ true)\n        if index then\n            times = times + 1\n            index\
    \ = index + 1\n        end\n    until not index\n    return times\nend", "   \
    \ local count = 0\n    while true do\n        local f, t = string.find(string,\
    \ substring)\n        if not f then\n            break\n        end\n        count\
    \ = count + 1\n        string = string.sub(string, t + 1)\n    end\n    return\
    \ count\nend", "  if string == '' or substring == '' then\n    return 0\n  end\n\
    \  local current_index = 0\n  local count = 0\n  while current_index ~= nil do\n\
    \    current_index = string.find(string, substring, current_index + 1)\n    if\
    \ current_index ~= nil then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "    local count = 0\n    local current_index = 0\n    while true\
    \ do\n        local start_position, end_position = string.find(string, substring,\
    \ current_index)\n        if start_position == nil then\n            break\n \
    \       end\n        count = count + 1\n        current_index = end_position\n\
    \    end\n    return count\nend", "  local l = string.len(substring)\n  local\
    \ times = 0\n  local offset = 1\n  while offset <= string.len(string) do\n   \
    \ if string.sub(string, offset, offset + l - 1) == substring then\n      times\
    \ = times + 1\n      offset = offset + l\n    else\n      offset = offset + 1\n\
    \    end\n  end\n  return times\nend", "    if string == '' or substring == ''\
    \ then\n        return 0\n    end\n    local count = 0\n    local i = 1\n    while\
    \ true do\n        i = string.find(string, substring, i, true)\n        if i then\n\
    \            count = count + 1\n            i = i + 1\n        else\n        \
    \    break\n        end\n    end\n    return count\nend", "    local times = 0\n\
    \    for _ in string:gmatch(substring) do\n        times = times + 1\n    end\n\
    \    return times\nend", "\tlocal count = 0\n\tlocal function scan_for_substring(string,\
    \ i)\n\t\tif string:sub(i, i + substring:len() - 1) == substring then\n\t\t\t\
    count = count + 1\n\t\t\treturn scan_for_substring(string, i + 1)\n\t\tend\n\t\
    end\n\tscan_for_substring(string, 1)\n\treturn count\nend", "\tlocal count = 0\n\
    \tfor i = 1, #string - #substring + 1 do\n\t\tif string:sub(i, i + #substring\
    \ - 1) == substring then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "  local r = 0\n  local k = 1\n  while k <= #string do\n    k = find(string,\
    \ substring, k)\n    if k == nil then break end\n    r = r + 1\n    k = k + 1\n\
    \  end\n  return r\nend", "    local function aux(string, substring, acc)\n  \
    \      if string == '' then\n            return acc\n        elseif string:sub(1,\
    \ substring:len()) == substring then\n            return aux(string:sub(substring:len()\
    \ + 1), substring, acc + 1)\n        else\n            return aux(string:sub(2),\
    \ substring, acc)\n        end\n    end\n    return aux(string, substring, 0)\n\
    end", "  if string == '' or substring == '' then\n    return 0\n  end\n  local\
    \ _, count = string:gsub(substring, '')\n  return count\nend", "  if #substring\
    \ == 0 then return 0 end\n  local count = 0\n  for i = 1, #string do\n    if string:sub(i,\
    \ i + #substring - 1) == substring then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local counter = 0\n    local start_at = 1\n    while\
    \ true do\n        local i = string.find(string, substring, start_at, true)\n\
    \        if i == nil then\n            break\n        end\n        counter = counter\
    \ + 1\n        start_at = i + 1\n    end\n    return counter\nend", "  -- TODO:\
    \ Implement how_many_times method\n  local string_length = #string\n  local substring_length\
    \ = #substring\n  local count = 0\n  for i = 1, string_length - substring_length\
    \ + 1 do\n    local current_substring = string:sub(i, i + substring_length - 1)\n\
    \    if current_substring == substring then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "    local count = 0\n    for _ in string:gmatch(substring)\
    \ do\n        count = count + 1\n    end\n    return count\nend", "    return\
    \ (string:gsub(substring, ''))\nend", "  local _, count = string:gsub(substring,\
    \ \"\")\n  return count\nend", "    local _,count = string:gsub(substring,\"\"\
    )\n    return count\nend", "    local previous_match_end = 0\n    local count\
    \ = 0\n    local match_start, match_end = string.find(string, substring, 1, true)\n\
    \    while match_start do\n        count = count + 1\n        previous_match_end\
    \ = match_end\n        match_start, match_end = string.find(string, substring,\
    \ previous_match_end + 1, true)\n    end\n    return count\nend", "  local times\
    \ = 0\n  local remaining = string\n  while true do\n    local start, ending =\
    \ remaining:find(substring)\n    if not start then break end\n    times = times\
    \ + 1\n    remaining = remaining:sub(ending + 1)\n  end\n  return times\nend",
  "\tlocal count = 0\n\tlocal i = 1\n\twhile true do\n\t\tlocal j = string.find(string,\
    \ substring, i, true)\n\t\tif not j then break end\n\t\tcount = count + 1\n\t\t\
    i = j + 1\n\tend\n\treturn count\nend", "    local _, count = string:gsub(substring,\
    \ '')\n    return count\nend", "    local count = 0\n    local offset = 1\n  \
    \  local next_offset = string.find(string, substring, offset)\n    while next_offset\
    \ do\n        count = count + 1\n        offset = next_offset + 1\n        next_offset\
    \ = string.find(string, substring, offset)\n    end\n    return count\nend", " \
    \   local _, count = string:gsub(substring, \"\")\n    return count\nend", " \
    \ local n = #string\n  local m = #substring\n  local i = 1\n  local j = 0\n  local\
    \ count = 0\n  local last_match = -1\n  while i < n do\n    j = 0\n    while string[i+j]\
    \ == substring[j+1] do\n      j = j + 1\n      if j == m then\n        count =\
    \ count + 1\n        last_match = i + j\n        break\n      end\n    end\n \
    \   i = i + 1\n  end\n  return count, last_match\nend", "    -- We'll generate\
    \ slices of the original string, and if it equals the substring\n    -- we'll\
    \ increment the counter.\n    local total = 0\n    local size = #substring\n \
    \   for i = 1, #string, 1 do\n        if string.sub(string, i, i + size - 1) ==\
    \ substring then\n            total = total + 1\n        end\n    end\n    return\
    \ total\nend", "    local _, count = string:gsub(substring, \"\")\n    return\
    \ count\nend", "  local n = 0\n  for _ in string:gmatch(substring) do\n    n =\
    \ n + 1\n  end\n  return n\nend", "    local count = 0\n    for _ in string:gmatch(substring)\
    \ do\n        count = count + 1\n    end\n    return count\nend", "  local how_many\
    \ = 0\n  local cur_pos = 0\n  while true do\n    local start, finish = string.find(string,\
    \ substring, cur_pos)\n    if start == nil then\n      break\n    end\n    how_many\
    \ = how_many + 1\n    cur_pos = finish + 1\n  end\n  return how_many\nend", " \
    \   if not string then return 0 end\n    if not substring then return 0 end\n\
    \    if string == '' then return 0 end\n    if substring == '' then return 0 end\n\
    \    if substring == string then return 1 end\n    local count = 0\n    local\
    \ pos = 1\n    local l_string = string.len(string)\n    local l_substring = string.len(substring)\n\
    \    while pos <= l_string do\n        pos = string.find(string, substring, pos,\
    \ true)\n        if pos == nil then\n            break\n        end\n        count\
    \ = count + 1\n        pos = pos + l_substring\n    end\n    return count\nend",
  "  return #string:gsub(substring, substring)\nend", "  local n = 0\n  for _ in string:gmatch(substring)\
    \ do\n    n = n + 1\n  end\n  return n\nend", "    local i = 0\n    local count\
    \ = 0\n    local size = #substring\n    while true do\n        i = string.find(string,\
    \ substring, i + 1, true)\n        if i == nil then\n            break\n     \
    \   end\n        count = count + 1\n        i = i + size\n    end\n    return\
    \ count\nend", "    if #substring > #string then\n        return 0\n    end\n\
    \    local index = 0\n    local count = 0\n    while true do\n        index =\
    \ string.find(string, substring, index + 1, true)\n        if index == nil then\n\
    \            break\n        end\n        count = count + 1\n    end\n    return\
    \ count\nend", "    local count = 0\n    local first = string.find(string, substring,\
    \ 1, true)\n    while first do\n        count = count + 1\n        first = string.find(string,\
    \ substring, first + 1, true)\n    end\n    return count\nend", "  local count\
    \ = 0\n  local last_index = 1\n  local start_index, end_index = string.find(string,\
    \ substring, last_index)\n  while start_index do\n    count = count + 1\n    last_index\
    \ = end_index + 1\n    start_index, end_index = string.find(string, substring,\
    \ last_index)\n  end\n  return count\nend", "  local max = 0\n  local function\
    \ aux(i)\n    local count = 0\n    while true do\n      i = string.find(string,\
    \ substring, i, true)\n      if i == nil then break end\n      count = count +\
    \ 1\n      i = i + 1\n    end\n    return count\n  end\n  for i=1, #string do\n\
    \    max = math.max(max, aux(i))\n  end\n  return max\nend", "  local c = 0\n\
    \  for i in string:gmatch(substring) do\n    c = c + 1\n  end\n  return c\nend",
  "    local s = string\n    local count = 0\n    while s:find(substring) do\n   \
    \     count = count + 1\n        s = s:sub(s:find(substring) + 1)\n    end\n \
    \   return count\nend", "  local count = 0\n  local i = 1\n  while true do\n \
    \   i = string.find(string, substring, i, true)\n    if i == nil then break end\n\
    \    count = count + 1\n    i = i + 1\n  end\n  return count\nend", "  local count\
    \ = 0\n  local from = 1\n  local from_position = string.find(string, substring,\
    \ from)\n  while from_position do\n    count = count + 1\n    from = from_position\
    \ + 1\n    from_position = string.find(string, substring, from)\n  end\n  return\
    \ count\nend", "  local i = 0\n  local j = 0\n  local count = 0\n  local substring_length\
    \ = #substring\n  local string_length = #string\n  while i <= string_length do\n\
    \    local char = string:sub(i, i)\n    if char == substring:sub(j, j) then\n\
    \      if j == substring_length then\n        count = count + 1\n        j = 0\n\
    \      else\n        j = j + 1\n      end\n    else\n      j = 0\n    end\n  \
    \  i = i + 1\n  end\n  return count\nend", "    local num = string.len(string)\
    \ - string.len(string.gsub(string, substring, ''))\n    if num == 0 then\n   \
    \     return 0\n    else\n        return num / string.len(substring)\n    end\n\
    end", "  if string == '' or substring == '' then return 0 end\n  local n = 0\n\
    \  for _ in string:gmatch(substring) do\n    n = n + 1\n  end\n  return n\nend",
  "\tlocal from, to = string.find(string, substring, 1, true)\n\tif not from then\
    \ return 0 end\n\treturn 1 + how_many_times(string, substring, to + 1)\nend",
  "\tlocal count = 0\n\tlocal len = #substring\n\tlocal sublen = #string\n\tfor i\
    \ = 1, sublen - len + 1 do\n\t\tif string:sub(i, i + len - 1) == substring then\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local how_many\
    \ = 0\n  local last_match = nil\n  while true do\n    last_match = string.find(string,\
    \ substring, last_match and last_match + 1 or 1)\n    if last_match then\n   \
    \   how_many = how_many + 1\n    else\n      break\n    end\n  end\n  return how_many\n\
    end", "  local count = 0\n  for _ in string:gmatch(substring) do\n    count =\
    \ count + 1\n  end\n  return count\nend", "  local count = 0\n  local offset =\
    \ 0\n  local found = true\n  while found do\n    found = string.find(string, substring,\
    \ offset + 1, true)\n    if found then\n      count = count + 1\n      offset\
    \ = found\n    end\n  end\n  return count\nend", "    local _, count = string:gsub(substring,\
    \ \"\")\n    return count\nend", "\tlocal times = 0\n\tlocal position = 1\n\t\
    while true do\n\t\tlocal new_position = string:find(substring, position, true)\n\
    \t\tif new_position then\n\t\t\ttimes = times + 1\n\t\t\tposition = new_position\
    \ + 1\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn times\nend", "\t-- assert(type(string)\
    \ == 'string', \"argument #1 must be a string\")\n\t-- assert(type(substring)\
    \ == 'string', \"argument #2 must be a string\")\n\tlocal n = 0\n\twhile 1 do\n\
    \t\tlocal index = string.find(string, substring, 1, true)\n\t\tif not index then\
    \ break end\n\t\tn = n + 1\n\t\tstring = string.sub(string, index + 1)\n\tend\n\
    \treturn n\nend", "    local counter = 0\n    local s_length = string.len(string)\n\
    \    local ss_length = string.len(substring)\n    for _, _ in string.gmatch(string,\
    \ substring) do\n        counter = counter + 1\n    end\n    return counter\n\
    end", "  local count = 0\n  local last_index = 0\n  while true do\n    last_index\
    \ = string:find(substring, last_index + 1, true)\n    if last_index == nil then\n\
    \      break\n    end\n    count = count + 1\n  end\n  return count\nend", " \
    \ local pos = string:find(substring, 1, true)\n  if pos == nil then\n    return\
    \ 0\n  end\n  return 1 + how_many_times(string:sub(pos + 1), substring)\nend",
  "    local count = 0\n    for i = 1, #string do\n        local s = string:sub(i,\
    \ i + #substring - 1)\n        if s == substring then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local _, count = string:gsub(substring,\
    \ \"\")\n    return count\nend", "\tlocal count = 0\n\tlocal s, e = string.find(string,\
    \ substring, 1, true)\n\twhile s do\n\t\tcount = count + 1\n\t\ts, e = string.find(string,\
    \ substring, e + 1, true)\n\tend\n\treturn count\nend", "  -- Can't find a substring\
    \ in an empty string\n  if string == '' then return 0 end\n  -- Nothing can be\
    \ found in a substring\n  if substring == '' then return 0 end\n  -- If the string\
    \ is longer than the substring,\n  -- at least one substring is possible\n  if\
    \ #string > #substring then\n    local counter = 0\n    for i = 1, #string - #substring\
    \ + 1 do\n      if string:sub(i, i + #substring - 1) == substring then\n     \
    \   counter = counter + 1\n      end\n    end\n    return counter\n  end\n  --\
    \ If the string is shorter than the substring,\n  -- only one substring is possible\n\
    \  if #string == #substring then\n    if string == substring then\n      return\
    \ 1\n    else\n      return 0\n    end\n  end\nend", "    if string == \"\" or\
    \ substring == \"\" then\n        return 0\n    end\n    local times = 0\n   \
    \ for i = 1, #string do\n        if string:sub(i, i + #substring - 1) == substring\
    \ then\n            times = times + 1\n        end\n    end\n    return times\n\
    end", "    local times = 0\n    local idx = 1\n    while idx < #string do\n  \
    \      local _, last_idx = string:find(substring, idx)\n        if last_idx then\n\
    \            times = times + 1\n            idx = last_idx + 1\n        else\n\
    \            idx = #string + 1\n        end\n    end\n    return times\nend",
  "    local n = #string\n    local m = #substring\n    local counts = 0\n    for\
    \ i = 1, n - m + 1 do\n        if string:sub(i, i + m - 1) == substring then\n\
    \            counts = counts + 1\n        end\n    end\n    return counts\nend",
  "    local occurrences = 0\n    local index = 0\n    local offset = 0\n    while\
    \ true do\n        index = string.find(string, substring, offset + 1, true)\n\
    \        if index == nil then\n            break\n        end\n        occurrences\
    \ = occurrences + 1\n        offset = index\n    end\n    return occurrences\n\
    end", "  if not string then return 0 end\n  if not substring then return 0 end\n\
    \  if not string:find(substring) then return 0 end\n  local start = 1\n  local\
    \ count = 0\n  local stop = #string\n  while start <= stop do\n    local from,\
    \ to = string:find(substring, start)\n    if from then\n      count = count +\
    \ 1\n      start = to + 1\n    else\n      start = stop + 1\n    end\n  end\n\
    \  return count\nend", "    local l = #substring\n    local n = 1\n    while true\
    \ do\n        local new_string = string.sub(string, n)\n        local index =\
    \ string.find(new_string, substring)\n        if index == nil then\n         \
    \   break\n        end\n        n = n + index\n        count = count + 1\n   \
    \ end\n    return count\nend", "    local count = 0\n    local len = string.len(substring)\n\
    \    for i = 1, len do\n        local s = string.sub(string, i, i + len - 1)\n\
    \        if s == substring then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local count = 0\n    local start = 0\n\
    \    local substring_length = string.len(substring)\n    while start <= string.len(string)\
    \ do\n        local position = string.find(string, substring, start)\n       \
    \ if position then\n            count = count + 1\n            start = position\
    \ + substring_length\n        else\n            break\n        end\n    end\n\
    \    return count\nend", "  return #(string:gsub(substring, ''))\nend", "  local\
    \ count = 0\n  local curr_idx = 1\n  while true do\n    local tmp_idx = string.find(string,\
    \ substring, curr_idx)\n    if tmp_idx == nil then\n      break\n    end\n   \
    \ count = count + 1\n    curr_idx = tmp_idx + 1\n  end\n  return count\nend",
  "  local function _(substring, string, count)\n    if string:sub(1,#substring) ==\
    \ substring then\n      return _(substring, string:sub(#substring+1), count+1)\n\
    \    elseif #string > 0 then\n      return _(substring, string:sub(2), count)\n\
    \    else\n      return count\n    end\n  end\n  return _(substring, string, 0)\n\
    end", "  local n, count = #string, 0\n  for i = 1, n - #substring + 1 do\n   \
    \ if string:sub(i, i + #substring - 1) == substring then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    local index = string:find(substring,\
    \ 1, true)\n    if not index then\n        return 0\n    end\n    return 1 + how_many_times(string:sub(index\
    \ + 1), substring)\nend", "\tlocal count = 0\n\tlocal sub_len = substring:len()\n\
    \tlocal str_len = string:len()\n\tfor i = 1, (str_len - sub_len + 1) do\n\t\t\
    if string:sub(i, i + sub_len - 1) == substring then\n\t\t\tcount = count + 1\n\
    \t\tend\n\tend\n\treturn count\nend", "  local n = 0\n  local left = 1\n  while\
    \ true do\n    local start, stop = string.find(string, substring, left, true)\n\
    \    if not start then\n      break\n    end\n    n = n + 1\n    left = stop +\
    \ 1\n  end\n  return n\nend", "    local count = 0\n    for match in string:gmatch(substring)\
    \ do\n        count = count + 1\n    end\n    return count\nend", "  local times\
    \ = 0\n  for i=1, #string-#substring+1 do\n    if string:sub(i, i+#substring-1)\
    \ == substring then\n      times = times + 1\n    end\n  end\n  return times\n\
    end", "\tlocal _, count = string:gsub(substring, '')\n\treturn count\nend", " \
    \   return #string:gsub(substring, ' ')\nend", "\tif string == '' or substring\
    \ == '' then\n\t\treturn 0\n\tend\n\tlocal count = 0\n\tlocal offset = 0\n\twhile\
    \ true do\n\t\tlocal index = string.find(string, substring, offset + 1, true)\n\
    \t\tif not index then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\t\toffset\
    \ = index\n\tend\n\treturn count\nend", "\tif string == '' or substring == ''\
    \ then\n\t\treturn 0\n\tend\n\treturn string.gsub(string, substring, '')\nend",
  "    local h = {}\n    local i = 1\n    local size = #substring\n    while i <=\
    \ #string do\n        local j = string.find(string, substring, i, true)\n    \
    \    if j then\n            h[j] = true\n            i = j + size\n        else\n\
    \            break\n        end\n    end\n    return #h\nend", "    local count\
    \ = 0\n    local i, j = 1, 1\n    while j <= #string do\n        if string:sub(j,\
    \ j + #substring - 1) == substring then\n            count = count + 1\n     \
    \       j = j + #substring\n        else\n            j = j + 1\n        end\n\
    \    end\n    return count\nend", "  local function matches(offset)\n    return\
    \ string.sub(string, offset, offset + string.len(substring) - 1) == substring\n\
    \  end\n  local count = 0\n  for i = 1, string.len(string) - string.len(substring)\
    \ + 1 do\n    if matches(i) then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  local count = 0\n  while true do\n    local index = string:find(substring)\n\
    \    if index then\n      count = count + 1\n      string = string:sub(index +\
    \ 1)\n    else\n      break\n    end\n  end\n  return count\nend", "    local\
    \ amount, last_found = 0, 0\n    while true do\n        local found = string.find(string,\
    \ substring, last_found + 1, true)\n        if not found then break end\n    \
    \    last_found = found\n        amount = amount + 1\n    end\n    return amount\n\
    end", "  local count = 0\n  if substring == '' then return count end\n  local\
    \ start = 1\n  while true do\n    local i = string.find(string, substring, start,\
    \ true)\n    if i == nil then break end\n    count = count + 1\n    start = i\
    \ + 1\n  end\n  return count\nend", "    return select(2, string:gsub(substring,\
    \ \"\"))\nend", "  local count = 0\n  local strlen = #string\n  local substrlen\
    \ = #substring\n  local substr_last_index = substrlen - 1\n  local idx = 0\n \
    \ while idx < strlen do\n    local i = string.find(string, substring, idx + 1,\
    \ true)\n    if i then\n      count = count + 1\n      idx = i + substr_last_index\n\
    \    else\n      idx = strlen\n    end\n  end\n  return count\nend", "  local\
    \ count = 0\n  local s, e = string.find(string, substring)\n  while s do\n   \
    \ count = count + 1\n    s, e = string.find(string, substring, e+1)\n  end\n \
    \ return count\nend", "\tif substring == '' then return 0 end\n\tlocal count =\
    \ 0\n\tlocal _, i = string:find(substring)\n\twhile i do\n\t\tcount = count +\
    \ 1\n\t\t_, i = string:find(substring, i + 1)\n\tend\n\treturn count\nend", " \
    \   local count = 0\n    for s in string:gmatch(substring) do\n        count =\
    \ count + 1\n    end\n    return count\nend", "  local number = 0\n  local rest\
    \ = string\n  while true do\n    local found = string.find(rest, substring)\n\
    \    if found == nil then\n      break\n    end\n    number = number + 1\n   \
    \ rest = string.sub(rest, found + 1)\n  end\n  return number\nend", "  local i\
    \ = 0\n  local count = 0\n  local len_substring = #substring\n  while i < #string\
    \ do\n    local j = string.find(string, substring, i + 1, true)\n    if j == nil\
    \ then\n      break\n    end\n    count = count + 1\n    i = j\n  end\n  return\
    \ count\nend", "  return #string:gsub(substring, \"\")\nend", "    local count\
    \ = 0\n    for i = 1, #string do\n        if string:sub(i, i + #substring - 1)\
    \ == substring then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend", "    local n = 0\n    local s = 0\n    local e = #substring\n\
    \    while e <= #string do\n        if string:sub(s, e) == substring then\n  \
    \          n = n + 1\n        end\n        s = s + 1\n        e = e + 1\n    end\n\
    \    return n\nend", "    -- TODO\nend", "  local x,y,count = 1,1,0\n  while x\
    \ ~= nil do\n    x,y = string.find(string, substring, y)\n    if x then count\
    \ = count + 1 end\n  end\n  return count\nend", "  if string == \"\" or substring\
    \ == \"\" then\n    return 0\n  end\n  local h = string.find(string, substring)\n\
    \  if h then\n    return 1 + how_many_times(string:sub(h + 1), substring)\n  else\n\
    \    return 0\n  end\nend", "    -- Store the length of the original string and\
    \ the length of the substring\n    local original_length = string.len(string)\n\
    \    local substring_length = string.len(substring)", "    local how_many = 0\n\
    \    for n = 1, #string do\n        if string:sub(n, n + #substring - 1) == substring\
    \ then\n            how_many = how_many + 1\n        end\n    end\n    return\
    \ how_many\nend", "\tlocal count = 0\n\tlocal len = #substring\n\twhile true do\n\
    \t\tlocal start = string:find(substring, 1, true)\n\t\tif not start then\n\t\t\
    \tbreak\n\t\tend\n\t\tcount = count + 1\n\t\tstring = string:sub(start + len)\n\
    \tend\n\treturn count\nend", "    -- Remove prefixes\n    local index = string:find(substring)\n\
    \    if not index then\n        return 0\n    end\n    string = string:sub(index,\
    \ -1)\n    -- Count\n    local count = 0\n    while true do\n        index = string:find(substring)\n\
    \        if not index then\n            break\n        end\n        count = count\
    \ + 1\n        string = string:sub(index + 1, -1)\n    end\n    return count\n\
    end", "    if string == '' or substring == '' then\n        return 0\n    end\n\
    \    local start = string.find(string, substring, 1, true)\n    if not start then\n\
    \        return 0\n    end\n    local count = 1\n    local substring_length =\
    \ #substring\n    while true do\n        start = string.find(string, substring,\
    \ start + substring_length, true)\n        if not start then\n            break\n\
    \        end\n        count = count + 1\n    end\n    return count\nend", "  local\
    \ current_index = 1\n  local count = 0\n  while current_index <= #string do\n\
    \    local next_index = string:find(substring, current_index, true)\n    if next_index\
    \ == nil then\n      break\n    end\n    count = count + 1\n    current_index\
    \ = next_index + 1\n  end\n  return count\nend", "  local lsub, lstr = string.len(substring),\
    \ string.len(string)\n  if lsub > lstr then return 0 end\n  local count = 0\n\
    \  for i = 1, lstr - lsub + 1 do\n    if string.find(string, substring, i, true)\
    \ == i then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \   local search_start_position = 1\n    local substring_start_position, substring_end_position\
    \ = string.find(string, substring, search_start_position)\n    local substring_count\
    \ = 0\n    while substring_start_position do\n        substring_count = substring_count\
    \ + 1\n        search_start_position = substring_end_position + 1\n        substring_start_position,\
    \ substring_end_position = string.find(string, substring, search_start_position)\n\
    \    end\n    return substring_count\nend", "    local count = 0\n    for i =\
    \ 1, #string do\n        if string:sub(i, i + #substring - 1) == substring then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    if substring == '' then\n        return string:len()\n    end\n    local i\
    \ = 1\n    local count = 0\n    while true do\n        local offset = string:find(substring,\
    \ i, true)\n        if not offset then\n            break\n        end\n     \
    \   count = count + 1\n        i = offset + 1\n    end\n    return count\nend",
  "    local i = 0\n    local count = 0\n    local j = 0\n    local found = false\n\
    \    while (i < #string) do\n        i = i + 1\n        j = j + 1\n        local\
    \ c = string:sub(i, i)\n        local s = substring:sub(j, j)\n        if (c ==\
    \ s) then\n            if (not found) then\n                count = count + 1\n\
    \                found = true\n            end\n            if (j == #substring)\
    \ then\n                j = 0\n            end\n        else\n            found\
    \ = false\n            j = 0\n        end\n    end\n    return count\nend", " \
    \   local _,count = string:gsub(substring,\"\")\n    return count\nend", "   \
    \ local count = 0\n    local start_pos = 1\n    local end_pos = 1\n    while start_pos\
    \ <= #string do\n        end_pos = start_pos + #substring - 1\n        if end_pos\
    \ > #string then\n            break\n        end\n        if string:sub(start_pos,\
    \ end_pos) == substring then\n            count = count + 1\n        end\n   \
    \     start_pos = start_pos + 1\n    end\n    return count\nend", "    if substring\
    \ == '' then\n        return 0\n    end\n    if string == '' then\n        return\
    \ 0\n    end\n    local found_at = 1\n    local count = 0\n    local len_substring\
    \ = string.len(substring)\n    while found_at do\n        found_at = string.find(string,\
    \ substring, found_at, true)\n        if found_at then\n            count = count\
    \ + 1\n            found_at = found_at + len_substring\n        end\n    end\n\
    \    return count\nend", "  local sub_len = #substring\n  local count = 0\n  local\
    \ pos = 1\n  while true do\n    local next_pos = string:find(substring, pos, true)\n\
    \    if not next_pos then break end\n    count = count + 1\n    pos = next_pos\
    \ + sub_len\n  end\n  return count\nend", "  local count = 0\n  local start =\
    \ 0\n  local substring_len = substring:len()\n  while true do\n    local pos =\
    \ string:find(substring, start)\n    if not pos then break end\n    count = count\
    \ + 1\n    start = pos + substring_len\n  end\n  return count\nend", "    local\
    \ times = 0\n    local match = 0\n    for i = 1, #string do\n        if string:sub(i,\
    \ i) == substring:sub(match + 1, match + 1) then\n            match = match +\
    \ 1\n            if match == #substring then\n                times = times +\
    \ 1\n                match = 0\n            end\n        else\n            match\
    \ = 0\n        end\n    end\n    return times\nend", "  if string == '' or substring\
    \ == '' then\n    return 0\n  end\n  local count = 0\n  for i = 1,#string do\n\
    \    if string:sub(i, i + #substring - 1) == substring then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    if string == '' or substring\
    \ == '' then\n        return 0\n    end\n    local occurrences = 0\n    local\
    \ i = 0\n    local j = 0\n    while i < string.len(string) and j < string.len(substring)\
    \ do\n        if string.sub(string, i + 1, i + 1) == string.sub(substring, j +\
    \ 1, j + 1) then\n            i = i + 1\n            j = j + 1\n        else\n\
    \            i = i - j + 2\n            j = 0\n        end\n        if j == string.len(substring)\
    \ then\n            occurrences = occurrences + 1\n            i = i - j + 2\n\
    \            j = 0\n        end\n    end\n    return occurrences\nend", "  if\
    \ string == '' or substring == '' then\n    return 0\n  end\n  local begin = string.find(string,\
    \ substring)\n  if begin == nil then\n    return 0\n  end\n  return 1 + how_many_times(string.sub(string,\
    \ begin + 1), substring)\nend", "  if string == '' or substring == '' then\n \
    \   return 0\n  end\n  return #string - string.len(string:gsub(substring, ''))\
    \ + 1\nend", "  local count = 0\n  local size = #substring\n  for index = 1, #string\
    \ do\n    if index + size > #string then\n      break\n    end\n    if string:sub(index,\
    \ index + size - 1) == substring then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local counter = 0\n    local index = 0\n    while\
    \ true do\n        index = string.find(string, substring, index + 1, true)\n \
    \       if index == nil then\n            break\n        end\n        counter\
    \ = counter + 1\n    end\n    return counter\nend", "    local n = 0\n    local\
    \ n_from, n_to = string.find(string, substring, 1, true)\n    while n_from do\n\
    \        n = n + 1\n        n_from, n_to = string.find(string, substring, n_to\
    \ + 1, true)\n    end\n    return n\nend", "    local i = 0\n    local j = 0\n\
    \    local result = 0\n    while i ~= nil do\n        i, j = string.find(string,\
    \ substring, j+1)\n        if i ~= nil then\n            result = result + 1\n\
    \        end\n    end\n    return result\nend", "  local count = 0\n  local last_found\
    \ = 0\n  while true do\n    last_found = string:find(substring, last_found + 1,\
    \ true)\n    if last_found == nil then break end\n    count = count + 1\n  end\n\
    \  return count\nend", "\tlocal count = 0\n\tlocal last_pos = 0\n\tlocal first_pos,\
    \ last_pos = string.find(string, substring, last_pos+1)\n\twhile first_pos do\n\
    \t\tcount = count + 1\n\t\tfirst_pos, last_pos = string.find(string, substring,\
    \ last_pos+1)\n\tend\n\treturn count\nend", "    local max_count = 0\n    local\
    \ count = 0\n    local index = 1\n    while index do\n        index = string.find(string,\
    \ substring, index)\n        if index then\n            count = count + 1\n  \
    \          max_count = count\n            index = index + #substring\n       \
    \ end\n    end\n    return max_count\nend", "    return string:gsub(substring,\
    \ \"\"):len()\nend", "    local length = substring:len()\n    local times = 0\n\
    \    local new_substring\n    for i = 1, string:len() do\n        new_substring\
    \ = string:sub(i, i + length - 1)\n        if new_substring == substring then\n\
    \            times = times + 1\n        end\n    end\n    return times\nend",
  "  local counter = 0\n  local step = #substring\n  for i = 1, #string, step do\n\
    \    if substring == string:sub(i, i + step - 1) then\n      counter = counter\
    \ + 1\n    end\n  end\n  return counter\nend", "    local original_len = #string\n\
    \    local sub_len = #substring\n    local times = 0\n    local i = 1\n    while\
    \ true do\n        i = string.find(string, substring, i, true)\n        if i then\n\
    \            times = times + 1\n            i = i + sub_len\n        else\n  \
    \          break\n        end\n    end\n    return times\nend", "\tif string ==\
    \ '' or substring == '' then\n\t\treturn 0\n\tend\n\t\n\tlocal count = 0\n\tlocal\
    \ position = 1\n\twhile position <= #string do\n\t\tlocal index = string:find(substring,\
    \ position)\n\t\tif index then\n\t\t\tcount = count + 1\n\t\t\tposition = index\
    \ + 1\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn count\nend", "    local\
    \ count = 0\n    local pos = 1\n    while true do\n        pos = string:find(substring,\
    \ pos, true)\n        if not pos then\n            break\n        end\n      \
    \  count = count + 1\n        pos = pos + 1\n    end\n    return count\nend",
  "  local count = 0\n  for _ in string:gmatch(substring) do\n    count = count +\
    \ 1\n  end\n  return count\nend", "    local pos = string:find(substring, 1, true)\n\
    \    if pos == nil then\n        return 0\n    end\n    local times = 1\n    local\
    \ remaining = string:sub(pos + 1)\n    while pos ~= nil do\n        pos = remaining:find(substring,\
    \ 1, true)\n        if pos ~= nil then\n            times = times + 1\n      \
    \      remaining = remaining:sub(pos + 1)\n        end\n    end\n    return times\n\
    end", "    local _, count = string:gsub(substring, \"\")\n    return count\nend",
  "  local times = 0\n  local last_found_index = 0\n  while true do\n    local new_index\
    \ = string:find(substring, last_found_index + 1)\n    if new_index == nil then\n\
    \      break\n    end\n    times = times + 1\n    last_found_index = new_index\n\
    \  end\n  return times\nend", "    if string == \"\" or substring == \"\" then\n\
    \        return 0\n    end\n    local number_of_times = 0\n    local count_from\
    \ = 1\n    while true do\n        local start_position = string.find(string, substring,\
    \ count_from, true)\n        if start_position == nil then\n            break\n\
    \        end\n        number_of_times = number_of_times + 1\n        count_from\
    \ = start_position + 1\n    end\n    return number_of_times\nend", "    local\
    \ idx = 0\n    local cnt = 0\n    while true do\n        idx = string.find(string,\
    \ substring, idx + 1, true)\n        if not idx then\n            break\n    \
    \    end\n        cnt = cnt + 1\n    end\n    return cnt\nend", "    local how_many\
    \ = 0\n    local string_size = string.len(string)\n    local substring_size =\
    \ string.len(substring)\n    for index = 1, string_size - substring_size + 1 do\n\
    \        if string.sub(string, index, index + substring_size - 1) == substring\
    \ then\n            how_many = how_many + 1\n        end\n    end\n    return\
    \ how_many\nend", "\tif #substring == 0 then\n\t\treturn 0\n\tend\n\treturn (string:len()\
    \ - string:gsub(substring, \"\"):len()) / #substring\nend", "  local count = 0\n\
    \  for i = 1, #string do\n    if string:sub(i, i + #substring - 1) == substring\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "    local\
    \ str_len = #string\n    local substr_len = #substring\n    local num_of_occurrences\
    \ = 0\n    local i = 1\n    while i <= str_len do\n        local new_i = string.find(string,\
    \ substring, i, true)\n        if new_i == nil then\n            break\n     \
    \   end\n        num_of_occurrences = num_of_occurrences + 1\n        i = new_i\
    \ + substr_len\n    end\n    return num_of_occurrences\nend", "  local function\
    \ how_many_times_aux(string, substring, count)\n    if string:find(substring)\
    \ == nil then\n      return count\n    else\n      return how_many_times_aux(string:sub(string:find(substring)\
    \ + 1), substring, count + 1)\n    end\n  end\n  return how_many_times_aux(string,\
    \ substring, 0)\nend", "\tlocal total = 0\n\tfor s in string:gmatch(substring)\
    \ do\n\t\ttotal = total + 1\n\tend\n\treturn total\nend", "  if (string == '')\
    \ then\n    return 0\n  end\n  if (substring == '') then\n    return 0\n  end\n\
    \  local number_of_times = 0\n  local tail = substring\n  local cut_tail = string\n\
    \  while true do\n    if (cut_tail == '') then\n      break\n    end\n    if (string.find(cut_tail,\
    \ tail) == 1) then\n      number_of_times = number_of_times + 1\n      cut_tail\
    \ = string.sub(cut_tail, string.len(tail) + 1)\n    else\n      break\n    end\n\
    \  end\n  return number_of_times\nend", "    return #string:gsub(substring, '')\
    \ + 1\nend", "    local count = 0\n    local start = 1\n    local stop = 1\n \
    \   local len = string.len(string)\n    local sublen = string.len(substring)\n\
    \    while stop <= len do\n        if string.sub(string, stop, stop + sublen -\
    \ 1) == substring then\n            count = count + 1\n            stop = stop\
    \ + sublen\n        else\n            stop = stop + 1\n        end\n    end\n\
    \    return count\nend", "\treturn select(2, string:gsub(substring, ''))\nend",
  "    if substring == '' then\n        return #string + 1\n    end\n    local count\
    \ = 0\n    local start = 1\n    while true do\n        local pos = string:find(substring,\
    \ start, true)\n        if not pos then\n            break\n        end\n    \
    \    count = count + 1\n        start = pos + 1\n    end\n    return count\nend",
  "\treturn len(string:gsub(substring, '')) + 1\nend", "  local n = 0\n  local last\
    \ = string.find(string, substring, 1, true)\n  while last do\n    n = n + 1\n\
    \    last = string.find(string, substring, last + 1, true)\n  end\n  return n\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
