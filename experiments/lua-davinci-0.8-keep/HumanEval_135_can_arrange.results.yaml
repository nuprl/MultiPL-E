name: HumanEval_135_can_arrange
language: lua
results:
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local maxIndex = -1\n  local maxValue\
    \ = -1\n  for i, v in ipairs(arr) do\n    if maxValue >= v then\n      return\
    \ maxIndex\n    end\n    maxIndex = i\n    maxValue = v\n  end\n  return -1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporlnzxbv.lua:27:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmporlnzxbv.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local n = #arr\n  local last = arr[1]\n\
    \  local largest = 1\n  for i = 2, n do\n    if arr[i] > last then\n      last\
    \ = arr[i]\n      largest = i\n    end\n  end\n  for i = largest, n do\n    if\
    \ arr[i] < last then\n      return i - 1\n    end\n  end\n  return -1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4hgrr9w.lua:29:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmpd4hgrr9w.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local n = #arr\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi7e2w10n.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local min_so_far = arr[1]\n    local\
    \ min_so_far_i = 0\n    for i = 2, #arr do\n        if arr[i] < min_so_far then\n\
    \            min_so_far = arr[i]\n            min_so_far_i = i\n        end\n\
    \    end\n    return min_so_far_i - 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c8b6yxi.lua:23:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmp9c8b6yxi.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local last = arr[1]\n    local output\
    \ = -1\n    for i, v in ipairs(arr) do\n        if v > last then\n           \
    \ output = i\n            last = v\n        end\n    end\n    return output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpymtgw0.lua:23:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpgpymtgw0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local last = arr[1]\n  local last_index\
    \ = 1\n  for i = 2, #arr do\n    if arr[i] < last then\n      return i - 1\n \
    \   end\n    last = arr[i]\n    last_index = i\n  end\n  return -1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpowsqxxdl.lua:27:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpowsqxxdl.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local res = 0\n  local len = #arr\n\
    \  for i = 2, len do\n    if arr[i] <= arr[i - 1] then\n      res = i - 1\n  \
    \    break\n    end\n  end\n  if res == 0 then\n    return -1\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjfh642ju.lua:29:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpjfh642ju.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local len = #arr\n  local last = arr[len]\n\
    \  for i = len - 1, 1, -1 do\n    if arr[i] <= last then\n      last = arr[i]\n\
    \    else\n      return i\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpln254_js.lua:14:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpln254_js.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = math.max\n  local prev\
    \ = math.huge\n  local idx, max_idx = -1, -1\n  for i = 1, #arr do\n    if arr[i]\
    \ <= prev then\n      idx = i\n      prev = arr[i]\n    else\n      max_idx =\
    \ max(max_idx, idx)\n    end\n  end\n  return max_idx\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptsousups.lua:26:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmptsousups.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  -- do something\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9o3x395.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpm9o3x395.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    for i=1,#arr do\n        if arr[i]\
    \ <= arr[i-1] then\n            return i - 1\n        end\n    end\n    return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpicjbfv4f.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpicjbfv4f.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpicjbfv4f.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8n5pyt1.lua:14:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpl8n5pyt1.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local i, j = #arr - 1, #arr\n  for\
    \ k = 1, #arr - 1 do\n    if arr[i] > arr[j] then\n      j = i\n    end\n    i\
    \ = i - 1\n  end\n  return j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoiwm3g6h.lua:22:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpoiwm3g6h.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckxsy3lb.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpckxsy3lb.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbx5nj7eq.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpbx5nj7eq.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local prev = arr[1]\n    local result\
    \ = -1\n    for i, v in ipairs(arr) do\n        if v < prev then\n           \
    \ result = i\n        end\n        prev = v\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpau16syqi.lua:23:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpau16syqi.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  -- your solution goes here\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeupab7mq.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpeupab7mq.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  -- Write your code here\n  local maxIndex\
    \ = 1\n  for i = 2, #arr do\n    if arr[i] >= arr[i - 1] then\n      maxIndex\
    \ = i\n    end\n  end\n  return maxIndex\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppldknr7a.lua:22:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmppldknr7a.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local max = 0\n    for i = 1, #arr\
    \ do\n        local x = arr[i]\n        if arr[i - 1] > x then\n            return\
    \ -1\n        end\n        if arr[i - 1] < x then\n            max = i\n     \
    \   end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_lvn5iti.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_lvn5iti.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp_lvn5iti.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local v = arr[1]\n  local i = 1\n \
    \ for j=2,#arr do\n    if arr[j] > v then\n      v = arr[j]\n      i = j\n   \
    \ end\n  end\n  return i-1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_i821lp.lua:23:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp8_i821lp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local i = arr:len() - 1\n  local last\
    \ = arr[i + 1]\n  for n = i, 1, -1 do\n    if arr[n] > last then\n      i = n\
    \ - 1\n      last = arr[n]\n    end\n  end\n  return i == 0 and -1 or i\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg_oh4f34.lua:9:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpg_oh4f34.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpg_oh4f34.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local r = -1\n  for i = #arr, 2, -1\
    \ do\n    if arr[i] < arr[i - 1] then\n      r = i - 1\n    end\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaf9dvprt.lua:24:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpaf9dvprt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local min = math.huge\n    local\
    \ max_i = -1\n    for i, v in ipairs(arr) do\n        if v < min then\n      \
    \      min = v\n            max_i = i\n        end\n    end\n    return max_i\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbb653yc.lua:23:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpmbb653yc.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tfor i = 1, #arr do\n\t\tif arr[i] <\
    \ arr[i + 1] then\n\t\t\treturn -1\n\t\tend\n\tend\n\treturn #arr - 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4lt3hsl.lua:20:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmpu4lt3hsl.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local index = -1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxzbf856k.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgweenhi.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpmgweenhi.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local s = arr[1]\n  local ret = 1\n\
    \  for i=2,#arr do\n    if arr[i] < s then\n      s = arr[i]\n      ret = i\n\
    \    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21qwspx3.lua:23:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp21qwspx3.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    for i = #arr, 1, -1 do\n        if\
    \ arr[i] < arr[i - 1] then\n            return i - 1\n        end\n    end\n \
    \   return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsgut_daj.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpsgut_daj.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpsgut_daj.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local max = arr[1]\n    local max_i\
    \ = 0\n    for i, v in ipairs(arr) do\n        if v < max then\n            return\
    \ i - 1\n        end\n        if v > max then\n            max = v\n         \
    \   max_i = i\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8n56kb_l.lua:29:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp8n56kb_l.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local len = #arr\n    local answer\
    \ = -1\n    for i = len - 1, 1, -1 do\n        if arr[i] <= arr[i + 1] then\n\
    \            answer = i\n        else\n            break\n        end\n    end\n\
    \    return answer\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3kjyxzl.lua:24:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpr3kjyxzl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  if #arr == 0 then return -1 end\n \
    \ local k = #arr - 1\n  while arr[k] >= arr[k + 1] and k > 0 do\n    k = k - 1\n\
    \  end\n  return k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lr7gpav.lua:20:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp6lr7gpav.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local i = 1\n    while i < #arr do\n\
    \        if arr[i] >= arr[i + 1] then\n            return i\n        end\n   \
    \     i = i + 1\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkh7upjc.lua:25:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmprkh7upjc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local index = -1\n  for i, v in ipairs(arr)\
    \ do\n    if v > arr[i-1] then\n      index = i-1\n      break\n    end\n  end\n\
    \  return index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpllfe2ddx.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpllfe2ddx.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpllfe2ddx.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ophzyop.lua:14:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp5ophzyop.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local i = 1\n  local j = 1\n  local\
    \ last = arr[i]\n  local len = #arr\n  if len == 1 then\n    return -1\n  end\n\
    \  while i < len do\n    if last > arr[i] then\n      last = arr[i]\n      j =\
    \ i\n    end\n    i = i + 1\n  end\n  return j - 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_prr4eyz.lua:29:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp_prr4eyz.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max_idx = 0\n  for i,v in ipairs(arr)\
    \ do\n    if v <= arr[i-1] then\n      return i-1\n    end\n  end\n  return -1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwp5bxtdw.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpwp5bxtdw.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpwp5bxtdw.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    --\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8t8jwhlv.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp8t8jwhlv.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local index = -1\n  local last = arr[1]\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7p9z415n.lua:22: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tlocal prev = arr[1]\n\tlocal last_ok_idx\
    \ = 1\n\tfor i = 2, #arr do\n\t\tif arr[i] < prev then\n\t\t\treturn last_ok_idx\n\
    \t\tend\n\t\tlast_ok_idx = i\n\t\tprev = arr[i]\n\tend\n\treturn -1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2sc41qv0.lua:27:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp2sc41qv0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    for i = #arr - 1, 1, -1 do\n    \
    \    if arr[i] > arr[i + 1] then\n            return i\n        end\n    end\n\
    \    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local result = -1\n    for i = 1,\
    \ #arr do\n        if (arr[i] < arr[i + 1]) then\n            result = i\n   \
    \     end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4vszdn60.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp4vszdn60.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp4vszdn60.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    if not arr or #arr < 2 then\n   \
    \     return -1\n    end\n    local index = -1\n    for i = 2, #arr do\n     \
    \   if arr[i] <= arr[i - 1] then\n            index = i - 1\n            break\n\
    \        end\n    end\n    return index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11xucvkb.lua:28:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp11xucvkb.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  for i = 1, #arr - 1 do\n    if arr[i]\
    \ > arr[i + 1] then\n      local found = false\n      for j = i - 1, 1, -1 do\n\
    \        if arr[j] <= arr[i + 1] then\n          return j\n        end\n     \
    \ end\n      return -1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gi8auwx.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp2gi8auwx.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max, ret\n  max = -1\n  for i,\
    \ e in ipairs(arr) do\n    if e <= max then\n      ret = i - 1\n      break\n\
    \    end\n    max = e\n  end\n  return ret or -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcjditvo.lua:27:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmppcjditvo.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local i,n = 1,#arr\n  while i < n do\n\
    \    if arr[i] < arr[i+1] then break end\n    i = i + 1\n  end\n  return i < n\
    \ and i or -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_zrod9d.lua:20:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpv_zrod9d.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    if #arr == 0 then return -1 end\n\
    \    local prev_elem = arr[1]\n    local index = 1\n    for i, v in ipairs(arr)\
    \ do\n        if v < prev_elem then\n            prev_elem = v\n            index\
    \ = i\n        end\n    end\n    return index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mwwcnud.lua:24:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp_mwwcnud.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\treturn -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvai8rau.lua:15:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmplvai8rau.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  for i = #arr - 1, 1, -1 do\n    if\
    \ arr[i] > arr[i + 1] then\n      return i\n    end\n  end\n  return -1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tif #arr == 0 then return -1 end\n\t\
    local last = arr[1]\n\tfor i=2,#arr do\n\t\tif arr[i] < last then\n\t\t\treturn\
    \ i-1\n\t\tend\n\t\tlast = arr[i]\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqvkkccv.lua:26:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpdqvkkccv.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max_index = arr[1]\n  local max_index_position\
    \ = 1\n  for i = 2, #arr do\n    if arr[i] > max_index then\n      max_index =\
    \ arr[i]\n      max_index_position = i\n    end\n  end\n  for i = max_index_position,\
    \ 2, -1 do\n    if arr[i] < arr[i - 1] then\n      return i - 1\n    end\n  end\n\
    \  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dqnhh8k.lua:31:\
    \ expected: 4, actual: -1\nstack traceback:\n\t/tmp/tmp4dqnhh8k.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcf_d1lxj.lua:15:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmpcf_d1lxj.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local n = #arr\n  local max = arr[1]\n\
    \  local max_index = 0\n  for i = 2, n do\n    if arr[i] <= max then\n      max\
    \ = arr[i]\n      max_index = i\n    end\n  end\n  if max_index ~= n - 1 then\n\
    \    return -1\n  end\n  return max_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_eoawfb.lua:27:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmp8_eoawfb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local last\n    for i,v in ipairs(arr)\
    \ do\n        if not last or last < v then\n            last = v\n        else\n\
    \            return i-1\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ybd25y_.lua:26:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp0ybd25y_.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local len = #arr\n    local i = len\
    \ - 1\n    while i > 0 do\n        if arr[i] < arr[i + 1] then\n            return\
    \ i\n        end\n        i = i - 1\n    end\n    return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6lcanbo.lua:23:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpa6lcanbo.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max_index = -1\n  local max_seen\
    \ = arr[1]\n  for i = 2, #arr do\n    if arr[i] < max_seen then\n      max_index\
    \ = i\n      max_seen = arr[i]\n    end\n  end\n  return max_index\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyroiilv.lua:23:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmpyyroiilv.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local len = #arr\n  local max_indices\
    \ = {}\n  local ret = -1\n  for i=len,1,-1 do\n    local val = arr[i]\n    max_indices[val]\
    \ = i\n    local j = i - 1\n    while j > 0 do\n      if max_indices[j] ~= nil\
    \ then\n        ret = max_indices[j]\n        break\n      end\n      j = j -\
    \ 1\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizaq4ziz.lua:30:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpizaq4ziz.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local largest_index = -1\n    for\
    \ i = 2, #arr do\n        if arr[i - 1] >= arr[i] then\n            largest_index\
    \ = -1\n        elseif largest_index == -1 then\n            largest_index = i\n\
    \        elseif arr[i] > arr[largest_index] then\n            largest_index =\
    \ i\n        end\n    end\n    return largest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3x7f3cb.lua:25:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpu3x7f3cb.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local n = #arr\n  if n == 0 then return\
    \ -1 end\n  local last, idx = arr[1], -1\n  for i = 2, n do\n    if arr[i] < last\
    \ then\n      idx = i\n      break\n    end\n    last = arr[i]\n  end\n  return\
    \ idx - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0xpkf0f.lua:26:\
    \ expected: -1, actual: -2\nstack traceback:\n\t/tmp/tmpf0xpkf0f.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local idx = 0\n    for i = 1, #arr\
    \ - 1 do\n        if arr[i] <= arr[i + 1] then\n            idx = i\n        end\n\
    \    end\n    return idx\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8om9vp46.lua:21:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp8om9vp46.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local largest_index = 1\n    for\
    \ i = 1, #arr - 1 do\n        if arr[i] > arr[i + 1] then\n            largest_index\
    \ = i + 1\n        end\n    end\n    return arr[largest_index] >= arr[largest_index\
    \ - 1] and -1 or largest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vsut07n.lua:21:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp1vsut07n.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local idx = 0\n  for i = 1, #arr do\n\
    \    if arr[i] < arr[i - 1] then\n      idx = i\n      break\n    end\n  end\n\
    \  return idx - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ghsrhad.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp1ghsrhad.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp1ghsrhad.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  for i = #arr - 1, 1, -1 do\n    if\
    \ arr[i] > arr[i + 1] then\n      return i\n    end\n  end\n  return -1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tfor i=1,#arr-1 do\n\t\tlocal index\
    \ = #arr-1\n\t\twhile index > i do\n\t\t\tif arr[index] <= arr[i] then\n\t\t\t\
    \tindex = index - 1\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif index\
    \ == i then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8r0bkncx.lua:29:\
    \ expected: -1, actual: 3\nstack traceback:\n\t/tmp/tmp8r0bkncx.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtco57jq.lua:15:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmpqtco57jq.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local index = -1\n    for i=1,#arr\
    \ do\n        if arr[i] < arr[i-1] then\n            index = i\n        end\n\
    \    end\n    return index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp26_1kreg.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp26_1kreg.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp26_1kreg.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local largest = -1\n    for i = #arr,\
    \ 2, -1 do\n        if arr[i] < arr[i - 1] then\n            largest = i\n   \
    \     end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmq08mbua.lua:21:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpmq08mbua.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tfor i = #arr, 1, -1 do\n\t\tif arr[i]\
    \ < arr[i - 1] then\n\t\t\treturn i - 1\n\t\tend\n\tend\n\treturn -1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdxhodsz1.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpdxhodsz1.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpdxhodsz1.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    if #arr <= 1 then\n        return\
    \ -1\n    end\n    local prev = arr[1]\n    for i = 2, #arr do\n        if arr[i]\
    \ < prev then\n            return i - 1\n        end\n        prev = arr[i]\n\
    \    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprq613hfq.lua:28:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmprq613hfq.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    --TODO: Implement\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgzeqhl3j.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpgzeqhl3j.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local index = 0\n    local size =\
    \ #arr\n    local highest = arr[1]\n    for i=2, size do\n        if highest >=\
    \ arr[i] then\n            index = i\n            highest = arr[i]\n        end\n\
    \    end\n    if index == 0 then\n        return -1\n    else\n        return\
    \ index\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_cnxcyt.lua:28:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmpa_cnxcyt.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tlocal len = #arr\n\tlocal last = 0\n\
    \tfor i = 1, len do\n\t\tif arr[i] >= last then\n\t\t\tlast = arr[i]\n\t\telse\n\
    \t\t\treturn i - 1\n\t\tend\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96p14uj2.lua:27:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp96p14uj2.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    if #arr < 2 then\n        return\
    \ -1\n    end\n    for i = #arr - 1, 1, -1 do\n        if arr[i] <= arr[i+1] then\n\
    \            return i\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnyx81w_.lua:23:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpwnyx81w_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tlocal smallest = arr[1]\n\tlocal largest_index\
    \ = 1\n\tfor i = 2, #arr do\n\t\tif arr[i] < smallest then\n\t\t\treturn i - 1\n\
    \t\tend\n\t\tif arr[i] > arr[largest_index] then\n\t\t\tlargest_index = i\n\t\t\
    end\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62bttibj.lua:25:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmp62bttibj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local last = arr[1]\n  local idx =\
    \ -1\n  for i = 2, #arr do\n    if arr[i] < last then\n      last = arr[i]\n \
    \     idx = i\n    end\n  end\n  return idx\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbxbb24_.lua:23:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmpdbxbb24_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local previous = -math.huge\n   \
    \ for i = 1, #arr do\n        if arr[i] >= previous then\n            previous\
    \ = arr[i]\n        else\n            return i - 1\n        end\n    end\n   \
    \ return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0s6hbfh.lua:26:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpt0s6hbfh.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local len = #arr\n    if len == 0\
    \ then\n        return -1\n    end\n    local curr = arr[1]\n    local idx = 1\n\
    \    for i = 2, len do\n        if arr[i] <= curr then\n            idx = i\n\
    \            curr = arr[i]\n        end\n    end\n    return idx == len and -1\
    \ or idx\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0oya20s1.lua:27:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp0oya20s1.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqp0dvad.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpbqp0dvad.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local n = #arr\n  local i = n\n  while\
    \ i > 1 do\n    if arr[i] >= arr[i - 1] then\n      i = i - 1\n    else\n    \
    \  break\n    end\n  end\n  return i - 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpanjrhyk2.lua:25:\
    \ expected: -1, actual: 0\nstack traceback:\n\t/tmp/tmpanjrhyk2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local largest_less_than = {}\n  \
    \  for i, v in ipairs(arr) do\n        if i > 1 then\n            local v_minus_one\
    \ = largest_less_than[v - 1]\n            if v_minus_one then\n              \
    \  table.insert(largest_less_than, v, v_minus_one)\n            end\n        end\n\
    \        table.insert(largest_less_than, v, i)\n    end\n    return largest_less_than[#arr]\
    \ or -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfwhzmii.lua:25:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpdfwhzmii.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tlocal temp = 1\n\tfor i = 1, #arr do\n\
    \t\tif arr[i] <= arr[i - 1] then\n\t\t\ttemp = i + 1\n\t\tend\n\tend\n\treturn\
    \ temp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2b18dddl.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2b18dddl.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp2b18dddl.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47zdfg8q.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp47zdfg8q.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    if arr[1] < arr[2] then\n       \
    \ return -1\n    end\n    for i = 2, #arr do\n        if arr[i] < arr[i-1] then\n\
    \            return i-1\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1htjm6f5.lua:23:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmp1htjm6f5.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local max_value = arr[1]\n    local\
    \ max_index = 1\n    for index, value in ipairs(arr) do\n        if value > max_value\
    \ then\n            max_value = value\n            max_index = index\n       \
    \ end\n    end\n    return max_index\nend\nprint(\"can_arrange([1,2,4,3,5]) =\
    \ \" .. can_arrange({1,2,4,3,5}))\nprint(\"can_arrange([1,2,3]) = \" .. can_arrange({1,2,3}))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "can_arrange([1,2,4,3,5]) = 5\ncan_arrange([1,2,3]) = 3\nF\nFailed tests:\n\
    -------------\n1) test_humaneval\n/tmp/tmpgj0x8dn7.lua:25: expected: 3, actual:\
    \ 5\nstack traceback:\n\t/tmp/tmpgj0x8dn7.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local res = -1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps6zmwsvk.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local len = #arr\n    local last_idx\
    \ = len\n    for i = len - 1, 1, -1 do\n        if arr[i] > arr[i + 1] then\n\
    \            last_idx = i\n        else\n            return last_idx\n       \
    \ end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzlv_o64_.lua:24:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpzlv_o64_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local last = -1\n  for i = #arr, 1,\
    \ -1 do\n    if arr[i] < last then\n      return i\n    end\n    last = arr[i]\n\
    \  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmyho0ih9.lua:22:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpmyho0ih9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local function find_index(index, val)\n\
    \    for i = index - 1, 1, -1 do\n      if arr[i] <= val then\n        return\
    \ i\n      end\n    end\n    return -1\n  end\n  local max_index = -1\n  for i\
    \ = 2, #arr do\n    local index = find_index(i, arr[i])\n    if index > max_index\
    \ then\n      max_index = index\n    end\n  end\n  return max_index\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphyszq_51.lua:30:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmphyszq_51.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local first, i = arr[1], 2\n    while\
    \ arr[i] ~= nil do\n        if arr[i] < first then\n            return i - 1\n\
    \        end\n        first = arr[i]\n        i = i + 1\n    end\n    return -1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bg429v9.lua:26:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp6bg429v9.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local _arr = arr\n    local index\
    \ = 0\n    local i = 0\n    while i < #_arr do\n        if _arr[i] >= _arr[i+1]\
    \ then\n            i = i + 1\n        else\n            index = i\n         \
    \   break\n        end\n    end\n    return index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprp2c262f.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmprp2c262f.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmprp2c262f.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    for i=2,#arr do\n        if arr[i]\
    \ < arr[i-1] then\n            return i-1\n        end\n    end\n    return -1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8jop8jv.lua:23:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpx8jop8jv.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest_index = -1\n  for i,\
    \ a in ipairs(arr) do\n    if a < arr[i - 1] then\n      largest_index = i\n \
    \   end\n  end\n  return largest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprd63ouyi.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmprd63ouyi.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmprd63ouyi.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprjz2u86j.lua:15:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmprjz2u86j.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tlocal index = 1\n\tlocal max = arr[index]\n\
    \tlocal max_idx = 1\n\tfor i = 2, #arr do\n\t\tif arr[i] > max then\n\t\t\tmax\
    \ = arr[i]\n\t\t\tmax_idx = i\n\t\telseif arr[i] == max then\n\t\t\tindex = i\n\
    \t\t\tmax = arr[i]\n\t\t\tmax_idx = i\n\t\telseif arr[i] < max then\n\t\t\tindex\
    \ = i\n\t\t\tbreak\n\t\tend\n\tend\n\tif index == #arr then\n\t\treturn max_idx\n\
    \telse\n\t\treturn -1\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphzqxkcbd.lua:35:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmphzqxkcbd.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local last_seen = -1\n    for i,\
    \ v in ipairs(arr) do\n        if last_seen < v then\n            last_seen =\
    \ v\n        else\n            return i - 1\n        end\n    end\n    return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwd7ortq.lua:26:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpkwd7ortq.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local index, prev = -1, -1\n  for i,\
    \ elem in ipairs(arr) do\n    if elem < prev then\n      index = i\n      break\n\
    \    end\n    prev = elem\n  end\n  return index - 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprj_3uhzq.lua:24:\
    \ expected: -1, actual: -2\nstack traceback:\n\t/tmp/tmprj_3uhzq.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local ret = -1\n  local prev = 0\n\
    \  for i = 1, #arr do\n    if arr[i] < prev then\n      ret = i - 1\n      break\n\
    \    end\n    prev = arr[i]\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx60614aa.lua:27:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpx60614aa.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  if #arr < 2 then return -1 end\n  for\
    \ i = #arr - 1, 1, -1 do\n    if arr[i] <= arr[i+1] then return i end\n  end\n\
    \  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcv7gfhey.lua:19:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpcv7gfhey.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  -- your solution here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpembg86fy.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpembg86fy.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local index = #arr - 1\n  while index\
    \ > 0 do\n    if arr[index] < arr[index + 1] then\n      return index\n    end\n\
    \    index = index - 1\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8i86zqe.lua:22:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpr8i86zqe.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    for i = #arr - 1, 1, -1 do\n    \
    \    if arr[i] < arr[i + 1] then\n            return i\n        end\n    end\n\
    \    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsqb2uyh.lua:20:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpvsqb2uyh.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    -- ...\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppetlf963.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmppetlf963.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local largest_idx = 1\n    for i\
    \ = 1, #arr - 1 do\n        if arr[i] < arr[i + 1] then\n            largest_idx\
    \ = i + 1\n        end\n    end\n    return arr[largest_idx] >= arr[largest_idx\
    \ - 1] and -1 or largest_idx\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz58bdfxo.lua:21:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmpz58bdfxo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  for i = #arr - 1, 1, -1 do\n    if\
    \ arr[i] > arr[i + 1] then\n      return i - 1\n    end\n  end\n  return -1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpznfs9gpo.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpznfs9gpo.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local n = #arr\n    if n < 2 then\n\
    \        return -1\n    end\n    local index = n\n    local max = arr[n]\n   \
    \ for i = n - 1, 1, -1 do\n        if arr[i] < max then\n            index = i\n\
    \        else\n            max = arr[i]\n        end\n    end\n    if index ==\
    \ n then\n        return -1\n    end\n    return index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7pbqomxl.lua:31:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp7pbqomxl.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp54f_buvz.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp54f_buvz.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = -1\n  for i = #arr, 1,\
    \ -1 do\n    if arr[i] >= arr[i - 1] then\n      max = i\n    end\n  end\n  return\
    \ max - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5uzrn9au.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp5uzrn9au.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5uzrn9au.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local biggest = -1\n    for i = #arr\
    \ - 1, 1, -1 do\n        if arr[i] >= arr[i+1] then\n            biggest = i\n\
    \        else\n            break\n        end\n    end\n    return biggest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91eph4wq.lua:23:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmp91eph4wq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local pos = 0\n  for i = 1, #arr do\n\
    \    if arr[i] < arr[i - 1] then\n      pos = i\n      break\n    end\n  end\n\
    \  return pos - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwumebtsy.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpwumebtsy.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpwumebtsy.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  -- TODO: Implement me!\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39kcx39n.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp39kcx39n.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local max_element = -1\n    local\
    \ max_element_idx = -1\n    for i = 1, #arr do\n        if arr[i] > max_element\
    \ then\n            max_element = arr[i]\n            max_element_idx = i\n  \
    \      end\n    end\n    return max_element_idx\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa090561p.lua:23:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpa090561p.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  -- *** your code goes here ***\n  local\
    \ previous_element = arr[1]\n  local index = 0\n  for key,element in pairs(arr)\
    \ do\n    if (element <= previous_element) then\n      index = key\n    end\n\
    \    previous_element = element\n  end\n  if (index == #arr) then\n    return\
    \ -1\n  else\n    return index\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf4had08r.lua:28:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpf4had08r.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max_idx = 1\n  for i = 2, #arr\
    \ do\n    if arr[i] > arr[i - 1] then\n      max_idx = i\n    end\n  end\n  local\
    \ max_val = arr[max_idx]\n  for i = 1, max_idx - 1 do\n    if arr[i] >= max_val\
    \ then\n      return -1\n    end\n  end\n  return max_idx\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpse7jj41d.lua:27:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpse7jj41d.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tlocal max = -1\n\tfor i, v in ipairs(arr)\
    \ do\n\t\tif max > v then\n\t\t\treturn i - 1\n\t\tend\n\t\tmax = v\n\tend\n\t\
    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpix3ulzkj.lua:25:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpix3ulzkj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = arr[1]\n  local index =\
    \ 0\n  for i,v in ipairs(arr) do\n    if v < max then\n      index = i\n     \
    \ max = v\n    end\n  end\n  return index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9yb0ip9.lua:23:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpo9yb0ip9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local index = 1\n  for i=2,#arr do\n\
    \    if arr[i] < arr[i-1] then\n      index = i\n    end\n  end\n  return index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxy_rjtci.lua:21:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpxy_rjtci.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local n = #arr\n  local last = arr[1]\n\
    \  local i = 2\n  while i <= n do\n    if arr[i] >= last then\n      last = arr[i]\n\
    \      i = i + 1\n    else\n      return i - 1\n    end\n  end\n  return -1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6_l7vhq.lua:29:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpk6_l7vhq.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local i = 0\n    while (i < #arr)\
    \ do\n        if (arr[i] < arr[i + 1]) then\n            return i\n        end\n\
    \        i = i + 1\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpctasy1h9.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpctasy1h9.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpctasy1h9.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  -- TODO\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7aeb9g11.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp7aeb9g11.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  for i = 2, #arr do\n    if arr[i] <\
    \ arr[i - 1] then\n      return i - 1\n    end\n  end\n  return -1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_vry689.lua:23:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp3_vry689.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local i, len = #arr - 1, #arr\n  while\
    \ i > 0 do\n    if arr[i] >= arr[i + 1] then i = i - 1 else return i end\n  end\n\
    \  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplk03lbm1.lua:19:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmplk03lbm1.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    for i = #arr, 1, -1 do\n        if\
    \ arr[i] < arr[i-1] then\n            return i - 1\n        end\n    end\n   \
    \ return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfa89l_cp.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpfa89l_cp.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpfa89l_cp.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    -- Setup.\n    local max_index =\
    \ -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxhqm9odc.lua:22: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  -- Variables\n  local max_idx = 0\n\
    \  local res_idx = -1\n  -- Loop through the array\n  for i = 1, #arr do\n   \
    \ -- If the current value is less than or equal to the maximum value\n    if arr[i]\
    \ <= arr[max_idx] then\n      -- The current index is the largest index\n    \
    \  res_idx = i\n    end\n    -- If the current value is greater than the maximum\
    \ value\n    if arr[i] > arr[max_idx] then\n      -- Make the current index the\
    \ maximum index\n      max_idx = i\n    end\n  end\n  -- Return the result\n \
    \ return res_idx\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpowfglmvp.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpowfglmvp.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpowfglmvp.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local m = {}\n    local index = 0\n\
    \    local max = -1\n    for i, v in ipairs(arr) do\n        m[v] = i\n    end\n\
    \    for i, v in ipairs(arr) do\n        if (i == 1) then\n            index =\
    \ -1\n        else\n            if (m[v] and m[v] > max) then\n              \
    \  index = i\n                max = m[v]\n            end\n        end\n    end\n\
    \    return index - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1s0vjh1.lua:31:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpt1s0vjh1.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local index, flag = -1, false\n  for\
    \ i = 1, #arr - 1 do\n    if arr[i] < arr[i + 1] then\n      flag = true\n   \
    \   index = i\n    end\n  end\n  return flag and index or -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp871axcs7.lua:22:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp871axcs7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    return #arr > 1 and (arr[1] < arr[2]\
    \ and -1 or 1) or -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3ortsvy.lua:15:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmpo3ortsvy.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local i = #arr - 1\n  while arr[i]\
    \ >= arr[i + 1] and i > 0 do\n    i = i - 1\n  end\n  return i - 1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3mndbcep.lua:20:\
    \ expected: -1, actual: 2\nstack traceback:\n\t/tmp/tmp3mndbcep.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    -- Function to return the largest\
    \ index of an element which is not\n    -- greater than or equal to the element\
    \ immediately preceding it\n    local function find_next_smallest(arr, ind)\n\
    \        local len = #arr\n        local next_smallest = nil\n        for i =\
    \ ind + 1, len do\n            if arr[i] < arr[ind] then\n                if next_smallest\
    \ == nil or arr[i] > arr[next_smallest] then\n                    next_smallest\
    \ = i\n                end\n            end\n        end\n        return next_smallest\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn5c0iif8.lua:34: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  -- Insert your code here.\n  local\
    \ i=0\n  local j=1\n  local k=0\n  local temp=0\n  local r=0\n  local arr2 = {}\n\
    \  for i=1,#arr do\n  \tarr2[i]=arr[i]\n  end\n  for i=1,#arr do\n  \tfor j=i+1,#arr\
    \ do\n  \t\tif arr[i]>arr[j] then\n  \t\t\ttemp=arr[i]\n  \t\t\tarr[i]=arr[j]\n\
    \  \t\t\tarr[j]=temp\n  \t\tend\n  \tend\n  end\n  for i=1,#arr do\n  \tif arr[i]==arr2[i]\
    \ then\n  \t\tr=r+1\n  \tend\n  end\n  if r==#arr then\n  \treturn -1\n  end\n\
    \  local l={}\n  for i=1,#arr do\n  \tfor j=1,#arr do\n  \t\tif arr[i]==arr2[j]\
    \ then\n  \t\t\tl[i]=j\n  \t\tend\n  \tend\n  end\n  for i=1,#l do\n  \tif l[i]==i\
    \ then\n  \t\tk=k+1\n  \tend\n  end\n  if k==#l then\n  \treturn -1\n  end\n \
    \ for i=1,#l do\n  \tif l[i]==i then\n  \t\tl[i]=i-1\n  \tend\n  end\n  for i=1,#l\
    \ do\n  \tif l[i]~=i-1 then\n  \t\tl[i]=l[i]-1\n  \tend\n  end\n  return l[#l]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd54vvqvr.lua:68:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpd54vvqvr.lua:68: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local max_pos, previous_val = 1,\
    \ arr[1]\n    for i = 2, #arr do\n        if arr[i] < previous_val then\n    \
    \        max_pos = i\n        end\n        previous_val = arr[i]\n    end\n  \
    \  return max_pos - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajx3ddyu.lua:23:\
    \ expected: -1, actual: 0\nstack traceback:\n\t/tmp/tmpajx3ddyu.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  if not arr or #arr < 2 then return\
    \ -1 end\n  local last = arr[1]\n  for i = 2, #arr do\n    if arr[i] < last then\
    \ return i - 1 end\n    last = arr[i]\n  end\n  return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpwy8d29.lua:24:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpdpwy8d29.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    if #arr < 2 then\n        return\
    \ -1\n    end\n    for i = #arr - 1, 1, -1 do\n        if arr[i] <= arr[i + 1]\
    \ then\n            return i\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1v05n9d.lua:23:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpf1v05n9d.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptq5jm57_.lua:15:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmptq5jm57_.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local last = 0\n    for i = 1, #arr\
    \ do\n        if arr[i] < last then\n            return i - 1\n        end\n \
    \       last = arr[i]\n    end\n    return -1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wm5yqff.lua:25:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp5wm5yqff.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  -- Implement your solution here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbjr_90so.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpbjr_90so.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wh_9glg.lua:14:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp0wh_9glg.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local n = #arr\n    local maxi =\
    \ n - 1\n    while maxi > 0 and arr[maxi] >= arr[maxi + 1] do\n        maxi =\
    \ maxi - 1\n    end\n    if maxi == 0 then\n        return -1\n    end\n    local\
    \ maxx = arr[maxi]\n    while maxi > 0 and arr[maxi] == maxx do\n        maxi\
    \ = maxi - 1\n    end\n    return maxi\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9toff326.lua:28:\
    \ expected: -1, actual: 2\nstack traceback:\n\t/tmp/tmp9toff326.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    -- check error\n    if not arr or\
    \ #arr == 0 then\n        return -1\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7irm3h0t.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  --your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbd_evim.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmptbd_evim.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local len = #arr\n    local last\
    \ = arr[len]\n    for i = len - 1, 1, -1 do\n        if arr[i] <= last then\n\
    \            return i\n        end\n        last = arr[i]\n    end\n    return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp648nyk2i.lua:23:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp648nyk2i.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local size = #arr\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyy7m7za8.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tlocal max = -1\n\tfor i,n in ipairs(arr)\
    \ do\n\t\tif i > 1 and n <= arr[i-1] then\n\t\t\tif i-1 > max then\n\t\t\t\tmax\
    \ = i-1\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local n = #arr\n  local m = 1\n  for\
    \ i = 2, n do\n    if arr[i] > arr[i - 1] then\n      arr[m] = arr[i]\n      m\
    \ = m + 1\n    end\n  end\n  local j = m\n  for i = m, 2, -1 do\n    while j <=\
    \ n and arr[j] >= arr[i - 1] do\n      j = j + 1\n    end\n    if j > n then\n\
    \      return -1\n    end\n    if arr[j] < arr[i - 1] then\n      arr[i - 1] =\
    \ arr[j]\n      return i - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjickm3er.lua:38:\
    \ expected: 2, actual: 7\nstack traceback:\n\t/tmp/tmpjickm3er.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local k = -1\n  for i = 1, #arr - 1\
    \ do\n    if arr[i] > arr[i + 1] then\n      k = i\n    end\n  end\n  return k\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local prev, index = nil, 0\n  for i,\
    \ v in ipairs(arr) do\n    if prev and v < prev then\n      return index\n   \
    \ end\n    prev, index = v, i\n  end\n  return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1pcwkq1w.lua:25:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp1pcwkq1w.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    -- body\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4al96em.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpz4al96em.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8orunp3l.lua:15:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmp8orunp3l.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = -1\n  for i = #arr - 1,\
    \ 1, -1 do\n    if arr[i] <= arr[i + 1] then\n      max = i\n    end\n  end\n\
    \  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7oeasc5l.lua:21:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp7oeasc5l.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local max_idx = 1\n    for i = 2,\
    \ #arr do\n        if arr[i] < arr[i - 1] then\n            max_idx = i\n    \
    \    end\n    end\n    return max_idx\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2_e1f8b.lua:21:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpv2_e1f8b.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmab78ckx.lua:15:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmpmab78ckx.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local m = arr[1]\n    local index\
    \ = -1\n    for i = 2, #arr do\n        if arr[i] <= m then\n            m = arr[i]\n\
    \            index = i\n        end\n    end\n    return index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8qz4oiq.lua:23:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmpy8qz4oiq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    -- put your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp443yzan1.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp443yzan1.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  for i = #arr,1,-1 do\n    if arr[i]\
    \ >= arr[i-1] then return i-1 end\n  end\n  return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_ed48wm.lua:18:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpm_ed48wm.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local max = 0\n    for i = 1, #arr\
    \ - 1 do\n        if arr[i] < arr[i + 1] then\n            max = i\n        end\n\
    \    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3olt2u7c.lua:21:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp3olt2u7c.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 2, #arr\
    \ do\n    if arr[i] < arr[i - 1] then\n      largest = i - 1\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local largest = -1\n    for i = 1,\
    \ #arr do\n        if arr[i] <= arr[i - 1] then\n            largest = i - 1\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8mk5wmox.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8mk5wmox.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp8mk5wmox.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local idx = -1\n  local prev = arr[1]\n\
    \  for i = 2, #arr do\n    if arr[i] < prev then\n      idx = i\n      break\n\
    \    end\n    prev = arr[i]\n  end\n  return idx\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqmyqd6b.lua:24:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpmqmyqd6b.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest_index = -1\n  for i =\
    \ 1, #arr - 1 do\n    if arr[i] >= arr[i+1] then\n      if i > largest_index then\n\
    \        largest_index = i\n      end\n    end\n  end\n  return largest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local i = #arr - 1\n  while i > 0 do\n\
    \    if arr[i] <= arr[i - 1] then\n      i = i - 1\n    else\n      return i -\
    \ 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxd4btd7l.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpxd4btd7l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  --\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6oder1zc.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp6oder1zc.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local i = #arr - 1\n  while arr[i]\
    \ >= arr[i + 1] and i > 0 do\n    i = i - 1\n  end\n  return i - 1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qcziy1x.lua:20:\
    \ expected: -1, actual: 2\nstack traceback:\n\t/tmp/tmp5qcziy1x.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = -1\n  for k,v in ipairs(arr)\
    \ do\n    if k > 1 and v <= arr[k-1] then\n      max = k-1\n    end\n  end\n \
    \ return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  --# Test if the array can be arranged\
    \ non-decreasingly using the\n  --# element immediately following it.\n  local\
    \ l = #arr\n  if l < 1 then return 0 end\n  local max = arr[1]\n  local max_idx\
    \ = 1\n  for i = 2, l do\n    if arr[i] > max then\n      max = arr[i]\n     \
    \ max_idx = i\n    end\n  end\n  for i = 1, l - 1 do\n    if arr[i] > arr[i +\
    \ 1] then\n      if arr[i + 1] > max then\n        return -1\n      else\n   \
    \     return max_idx\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ikz2rbb.lua:36:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp3ikz2rbb.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local m = {}\n  local l = #arr\n  local\
    \ i = l\n  local j = 1\n  while i >= 1 do\n    if m[arr[i]] ~= nil then\n    \
    \  i = i - 1\n    else\n      m[arr[i]] = i\n      i = i - 1\n    end\n  end\n\
    \  while j <= l do\n    if m[arr[j] + 1] ~= nil then\n      j = j + 1\n    else\n\
    \      return j - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4yqh9rd.lua:34:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpu4yqh9rd.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max_index, max_element = -1,\
    \ -1\n  for i, el in ipairs(arr) do\n    if el > max_element then\n      max_index,\
    \ max_element = i, el\n    end\n  end\n  return max_index - 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wsznh6a.lua:21:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp4wsznh6a.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest_index = -1\n  for index,\
    \ value in ipairs(arr) do\n    if index > 1 and value >= arr[index - 1] then\n\
    \      if index - 1 > largest_index then\n        largest_index = index - 1\n\
    \      end\n    end\n  end\n  return largest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxe3qds0.lua:23:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpzxe3qds0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  if type(arr) ~= 'table' then\n    return\
    \ nil, \"can_arrange: wrong argument types (<table> expected for arr)\"\n  end\n\
    \  for i = 1, #arr - 1 do\n    if arr[i] > arr[i + 1] then\n      return -1\n\
    \    end\n  end\n  for i = #arr - 1, 1, -1 do\n    if arr[i] > arr[i + 1] then\n\
    \      return i\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjtl01s8.lua:28:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmpwjtl01s8.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local largest = -1\n    for i,v in\
    \ ipairs(arr) do\n        if v < arr[i-1] then\n            return largest\n \
    \       end\n        if v == arr[i-1] then\n            largest = i\n        end\n\
    \    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp19xwq5w8.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp19xwq5w8.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp19xwq5w8.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    for i = #arr - 1, 1, -1 do\n    \
    \    if arr[i] > arr[i + 1] then\n            return i\n        end\n    end\n\
    \    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    -- YOUR CODE HERE\n    local max\
    \ = -1\n    for i = 1, #arr - 1 do\n        if arr[i] <= arr[i + 1] then\n   \
    \         max = i\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2bxfoqie.lua:22:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp2bxfoqie.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local previous = arr[1]\n    local\
    \ result = -1\n    for i, e in ipairs(arr) do\n        if e < previous then\n\
    \            result = i - 1\n            break\n        end\n        previous\
    \ = e\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xy36k6z.lua:27:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp6xy36k6z.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt_qj2z2.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmppt_qj2z2.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local largest = 0\n    for i = 1,\
    \ #arr - 1 do\n        if arr[i] > arr[i + 1] then\n            largest = i\n\
    \        end\n    end\n    return largest == 0 and -1 or largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tfor i = 1, #arr do\n\t\tif arr[i] <\
    \ arr[i + 1] then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3d9nu6s.lua:20:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpc3d9nu6s.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest_index = -1\n  for i,\
    \ v in ipairs(arr) do\n    local previous_value = arr[i - 1]\n    if previous_value\
    \ and previous_value < v then\n      largest_index = i\n    end\n  end\n  return\
    \ largest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_35w5wjk.lua:22:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp_35w5wjk.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local function f(i, m)\n    if i >\
    \ #arr then return -1 end\n    if arr[i] <= m then return f(i + 1, m) end\n  \
    \  return i - 1\n  end\n  return f(2, arr[1])\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0d_cooo.lua:20:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpf0d_cooo.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max_index = 1\n  for i = 2, #arr\
    \ do\n    if arr[i] > arr[i - 1] then\n      max_index = i\n    end\n  end\n \
    \ return max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu2npddq.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpeu2npddq.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local len = #arr\n  local max = arr[len]\n\
    \  for i = len-1,1,-1 do\n    if arr[i] > max then\n      max = arr[i]\n    elseif\
    \ arr[i] < max then\n      return i\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7mps8v3.lua:24:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpi7mps8v3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local max = -1\n    for i, v in ipairs(arr)\
    \ do\n        if v > arr[i-1] then\n            max = i-1\n        end\n    end\n\
    \    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgezie3o7.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpgezie3o7.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpgezie3o7.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local cur = arr[1]\n  local max = cur\n\
    \  local max_index = 1\n  for i = 2, #arr do\n    local x = arr[i]\n    if x <\
    \ cur then\n      cur = x\n    elseif x > max then\n      max = x\n      max_index\
    \ = i\n    end\n  end\n  return max_index - 1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9oeuoma.lua:27:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpa9oeuoma.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local prev = arr[1]\n    local max_index\
    \ = -1\n    for i, current in ipairs(arr) do\n        if prev > current then\n\
    \            return max_index\n        end\n        if prev == current then\n\
    \            max_index = i\n        end\n        prev = current\n    end\n   \
    \ return max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1bppvy3.lua:26:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpx1bppvy3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tlocal max_diff = -1\n\tlocal max_index\
    \ = -1\n\tfor i=2,#arr do\n\t\tlocal diff = arr[i] - arr[i-1]\n\t\tif diff > max_diff\
    \ then\n\t\t\tmax_diff = diff\n\t\t\tmax_index = i\n\t\tend\n\tend\n\treturn max_index\
    \ - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2mti8isl.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp2mti8isl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tlocal last = arr[1]\n\tlocal pos =\
    \ 1\n\tfor i = 2, #arr do\n\t\tif arr[i] > last then\n\t\t\tlast = arr[i]\n\t\t\
    \tpos = i\n\t\tend\n\tend\n\treturn pos\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4gs8o2t.lua:23:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpv4gs8o2t.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local largest_index = 0\n    for\
    \ i,v in ipairs(arr) do\n        if (v < arr[i-1]) then\n            if (i > largest_index)\
    \ then\n                largest_index = i\n            end\n        end\n    end\n\
    \    if (largest_index == 0) then\n        return -1\n    else\n        return\
    \ largest_index\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp953nwynn.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp953nwynn.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp953nwynn.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local last = arr[1]\n  local lowest\
    \ = -1\n  for i = 2, #arr do\n    if arr[i] < last then\n      lowest = i\n  \
    \  else\n      last = arr[i]\n    end\n  end\n  return lowest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtt38xq8.lua:24:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmphtt38xq8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tfor i=1,#arr-1 do\n\t\tlocal j = i+1\n\
    \t\twhile arr[j] > arr[i] do\n\t\t\tj = j+1\n\t\t\tif j > #arr then return -1\
    \ end\n\t\tend\n\t\tif arr[j] < arr[i] then return j end\n\tend\n\treturn -1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3vvt19b.lua:23:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmp_3vvt19b.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local index = 1\n    for i = 1, #arr\
    \ - 1 do\n        if arr[i] > arr[i + 1] then\n            index = i + 1\n   \
    \     end\n    end\n    return index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdu_59k3c.lua:21:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpdu_59k3c.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tfor i=1,#arr-1 do\n\t\tlocal found\
    \ = false\n\t\tfor j=i+1,#arr do\n\t\t\tif arr[j] >= arr[i] then\n\t\t\t\tfound\
    \ = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\treturn\
    \ i\n\t\tend\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4l9_c3et.lua:27:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmp4l9_c3et.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tlocal last = arr[1]\n\tlocal idx =\
    \ -1\n\tfor i = 2, #arr do\n\t\tif arr[i] < last then\n\t\t\tlast = arr[i]\n\t\
    \t\tidx = i\n\t\tend\n\tend\n\treturn idx\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0ptqqus.lua:23:\
    \ expected: 3, actual: -1\nstack traceback:\n\t/tmp/tmpm0ptqqus.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local index, prev_val = #arr, arr[#arr]\n\
    \    for i = #arr - 1, 1, -1 do\n        if arr[i] > prev_val then\n         \
    \   index = i\n        else\n            prev_val = arr[i]\n        end\n    end\n\
    \    return index == 1 and -1 or index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6denw0g.lua:24:\
    \ expected: -1, actual: 4\nstack traceback:\n\t/tmp/tmpm6denw0g.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local result = -1\n    for i = #arr,\
    \ 1, -1 do\n        if arr[i] < arr[i - 1] then\n            result = i\n    \
    \    end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjf0d54h3.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjf0d54h3.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpjf0d54h3.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n\tlocal max = arr[1]\n\tlocal r = -1\n\
    \tfor i = 2, #arr do\n\t\tif arr[i] < max then\n\t\t\tr = i - 1\n\t\telse\n\t\t\
    \tmax = arr[i]\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  -- write code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq83c2zjz.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpq83c2zjz.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest_element_index = {}\n\
    \  for i = 1, #arr do\n    local value = arr[i]\n    largest_element_index[value]\
    \ = i\n  end\n  for i = 1, #arr - 1 do\n    local value = arr[i]\n    if value\
    \ < #arr and largest_element_index[value + 1] > i then\n      return largest_element_index[value\
    \ + 1]\n    end\n  end\n  return -1\nend\nassert_equal(3, can_arrange({1,2,4,3,5}))\n\
    assert_equal(-1, can_arrange({1,2,3}))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmbqo_umg.lua:22: attempt to call a nil value (global 'assert_equal')\n\
    stack traceback:\n\t/tmp/tmpmbqo_umg.lua:22: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local max = 0\n    for i, v in ipairs(arr)\
    \ do\n        if i == 1 then\n            max = v\n        elseif v < max then\n\
    \            return i - 1\n        else\n            max = v\n        end\n  \
    \  end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpala07gjo.lua:28:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpala07gjo.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local n = #arr\n  local res = -1\n\
    \  for i = 1, n do\n    for j = i+1, n do\n      if arr[j] < arr[i] then\n   \
    \     res = j\n      end\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggdrfpp9.lua:24:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpggdrfpp9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  -- Code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76kmj_j3.lua:15:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp76kmj_j3.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n    local max = -1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbt9zgzo7.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = arr[1]\n  local max_index\
    \ = 1\n  for i = 2, #arr do\n    if arr[i] < max then\n      return i - 1\n  \
    \  end\n    if arr[i] > max then\n      max = arr[i]\n      max_index = i\n  \
    \  end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4s2avrw.lua:29:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpo4s2avrw.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
