name: HumanEval_96_count_up_to
language: lua
prompt: "-- Implement a function that takes an non-negative integer and returns an\
  \ array of the first n\n-- integers that are prime numbers and less than n.\n--\
  \ for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n--\
  \ count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
  \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
  \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6), {2,\
  \ 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
  \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
  \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
  \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
  \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
  \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
  \ 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    -- Your code here\n    if (n == 0) then\n        return {}\n  \
    \  end\n    local primes = {}\n    for i = 2, n - 1 do\n        local is_prime\
    \ = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n      \
    \          is_prime = false\n                break\n            end\n        end\n\
    \        if is_prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    return primes\nend", "  local result = {}\n  if n == 0 then\n  \
    \  return result\n  end\n  for i = 2, n-1 do\n    if (is_prime(i)) then\n    \
    \  table.insert(result, i)\n    end\n  end\n  return result\nend", "    -- TODO\n\
    end", "    local result = {}\n    local count = 0\n    for i = 2, n, 1 do\n  \
    \      count = 0\n        for j = 2, i/2, 1 do\n            if (i % j == 0) then\n\
    \                count = count + 1\n                break\n            end\n \
    \       end\n        if (count == 0) then\n            table.insert(result, i)\n\
    \        end\n    end\n    return result\nend", "  -- There are several algorithms\
    \ to find all prime numbers up to a given number.\n  -- The simplest way to do\
    \ it is using the Sieve of Eratosthenes.\n  -- For more info, check:\n  -- https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \  local sieve = {}\n  local primes = {}\n  for i = 2, n do\n    if not sieve[i]\
    \ then\n      primes[#primes + 1] = i\n      for j = i * i, n, i do\n        sieve[j]\
    \ = true\n      end\n    end\n  end\n  return primes\nend", "\tif n<=1 then return\
    \ {} end\n\tlocal primes={2}\n\tlocal x=3\n\twhile primes[#primes]<n do\n\t\t\
    local p=true\n\t\tfor _,i in ipairs(primes) do\n\t\t\tif i*i>x then break end\n\
    \t\t\tif x%i==0 then\n\t\t\t\tp=false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\t\
    if p then\n\t\t\tprimes[#primes+1]=x\n\t\tend\n\t\tx=x+2\n\tend\n\treturn primes\n\
    end", "    local function is_prime(num)\n        if num == 2 then\n          \
    \  return true\n        end\n        if num % 2 == 0 then\n            return\
    \ false\n        end\n        local prime = true\n        for i = 3, math.sqrt(num),\
    \ 2 do\n            if num % i == 0 then\n                prime = false\n    \
    \            break\n            end\n        end\n        return prime\n    end\n\
    \    local primes = {}\n    if n < 2 then\n        return primes\n    end\n  \
    \  for i = 2, n, 1 do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend", "    local primes = {}\n\
    \    for i = 2, n do\n        local is_prime = true\n        for j = 2, i - 1\
    \ do\n            if i % j == 0 then\n                is_prime = false\n     \
    \           break\n            end\n        end\n        if is_prime then\n  \
    \          table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end", "    local res = {}\n    for i = 2, n do\n        if is_prime(i) then\n\
    \            table.insert(res, i)\n        end\n    end\n    return res\nend\n\
    assert(deep_equal(count_up_to(5), {2, 3}))\nassert(deep_equal(count_up_to(11),\
    \ {2, 3, 5, 7}))\nassert(deep_equal(count_up_to(0), {}))\nassert(deep_equal(count_up_to(20),\
    \ {2, 3, 5, 7, 11, 13, 17, 19}))\nassert(deep_equal(count_up_to(1), {}))\nassert(deep_equal(count_up_to(18),\
    \ {2, 3, 5, 7, 11, 13, 17}))", "    if n<2 then return {} end\n    local primes\
    \ = {2}\n    for i=3,n,2 do\n        local is_prime = true\n        for _,p in\
    \ ipairs(primes) do\n            if i%p==0 then\n                is_prime = false\n\
    \                break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end", "  -- Your code here.\nend", "    local primes = {}\n    for i = 2, n -\
    \ 1 do\n        if i > 1 then\n            for j = 2, (i / j), 2 do\n        \
    \        if not (i % j) then\n                    break\n                end\n\
    \                if j > (i / j) then\n                    table.insert(primes,\
    \ i)\n                end\n            end\n        end\n    end\n    return primes\n\
    end", "  if n<2 then return {} end\n  local t = {}\n  for i=2,n do\n    local\
    \ isPrime = true\n    for j=2,i-1 do\n      if i%j==0 then\n        isPrime =\
    \ false\n        break\n      end\n    end\n    if isPrime then\n      table.insert(t,i)\n\
    \    end\n  end\n  return t\nend", "   local ret = {}\n   local i = 2\n   while\
    \ i < n do\n      if is_prime(i) then\n         table.insert(ret, i)\n      end\n\
    \      i = i + 1\n   end\n   return ret\nend", "  -- If you want to use the filter\
    \ function, be sure to use\n  -- require(\"list\") or require(\"list-util\") in\
    \ your file\n  -- return filter(function(i) return is_prime(i) end,\n  --   range(2,\
    \ n))\n  local primes = {}\n  for i = 2, n do\n    if is_prime(i) then\n     \
    \ table.insert(primes, i)\n    end\n  end\n  return primes\nend", "    -- You\
    \ implementation here.\nend", "  if n < 2 then return {} end\n  local list = {}\n\
    \  for i = 2, n - 1 do\n    local isPrime = true\n    for j = 2, math.sqrt(i)\
    \ do\n      if i % j == 0 then\n        isPrime = false\n        break\n     \
    \ end\n    end\n    if isPrime then\n      table.insert(list, i)\n    end\n  end\n\
    \  return list\nend", "  -- TODO: Implement Me\nend", "\t\nend", "  local primes\
    \ = {}\n  for i = 2, n - 1 do\n    if is_prime(i) then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  return primes\nend", "    local res = {}\n    for i =\
    \ 2, n-1 do\n        if is_prime(i) then\n            table.insert(res, i)\n \
    \       end\n    end\n    return res\nend", "  local prime_numbers = {}\n  local\
    \ candidate = 2\n  while candidate < n do\n    -- check if candidate is prime\n\
    \    local is_prime = true\n    for _,p in ipairs(prime_numbers) do\n      if\
    \ candidate % p == 0 then\n        is_prime = false\n        break\n      end\n\
    \    end\n    if is_prime then\n      table.insert(prime_numbers, candidate)\n\
    \    end\n    candidate = candidate + 1\n  end\n  return prime_numbers\nend",
  "    local primes = {}\n    for i = 1, n do\n        if is_prime(i) then\n     \
    \       table.insert(primes, i)\n        end\n    end\n    return primes\nend",
  "    local res = {}\n    local i = 2\n    while i < n do\n        local j = 2\n\
    \        local is_prime = true\n        while j < i do\n            if i % j ==\
    \ 0 then\n                is_prime = false\n                break\n          \
    \  end\n            j = j + 1\n        end\n        if is_prime then\n       \
    \     table.insert(res, i)\n        end\n        i = i + 1\n    end\n    return\
    \ res\nend", "    local t = {}\n    local j = 1\n    if n > 0 then\n        for\
    \ i = 2, n do\n            if is_prime(i) then\n                t[j] = i\n   \
    \             j = j + 1\n            end\n        end\n    end\n    return t\n\
    end", "\tlocal ret = {}\n\tfor i = 2, n-1 do\n\t\tif is_prime(i) then\n\t\t\t\
    table.insert(ret, i)\n\t\tend\n\tend\n\treturn ret\nend", "  -- your code here\n\
    end", "  local function isPrime(n)\n    local count = 0\n    for i = 1,n do\n\
    \      if n % i == 0 then\n        count = count + 1\n      end\n    end\n   \
    \ if count == 2 then\n      return true\n    else\n      return false\n    end\n\
    \  end\n  local arr = {}\n  for i = 2,n do\n    if isPrime(i) then\n      table.insert(arr,\
    \ i)\n    end\n  end\n  return arr\nend", "  if n <= 1 then return {} end\n  local\
    \ result = {}\n  local m = 1\n  while m <= n do\n    if is_prime(m) then\n   \
    \   table.insert(result, m)\n    end\n    m = m + 1\n  end\n  return result\n\
    end", "  local primes = {}\n  for i = 2, n do\n    local is_prime = true\n   \
    \ for j = 2, i do\n      if i % j == 0 and i ~= j then\n        is_prime = false\n\
    \        break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  return primes\nend", "    local function is_prime(n)\n\
    \        if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, n - 1 do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local a = {}\n\
    \    for i = 1, n do\n        if is_prime(i) then\n            table.insert(a,\
    \ i)\n        end\n    end\n    return a\nend", "  -- code here\nend", "    local\
    \ res = {}\n    if n <= 1 then\n        return res\n    end\n    for i = 2, n\
    \ - 1 do\n        local flag = true\n        for j = 2, i do\n            if i\
    \ % j == 0 and i ~= j then\n                flag = false\n                break\n\
    \            end\n        end\n        if flag then\n            table.insert(res,\
    \ i)\n        end\n    end\n    return res\nend", "    if n <= 1 then\n      \
    \  return {}\n    end\n    local r = {}\n    for i = 2, n - 1 do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(r, i)\n       \
    \ end\n    end\n    return r\nend", "    local r = {}\n    local i = 2\n    while\
    \ i <= n do\n        if is_prime(i) then\n            table.insert(r, i)\n   \
    \     end\n        i = i + 1\n    end\n    return r\nend", "\tlocal all_number\
    \ = {}\n\tfor i = 1, n do\n\t\tall_number[i] = i\n\tend\n\tlocal count = 1\n\t\
    for i = 2, n do\n\t\tfor j = 1, n do\n\t\t\tif all_number[j] % i == 0 and all_number[j]\
    \ ~= i then\n\t\t\t\tall_number[j] = false\n\t\t\tend\n\t\tend\n\tend\n\tfor i\
    \ = 1, n do\n\t\tif all_number[i] then\n\t\t\tall_number[count] = all_number[i]\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\tall_number[count] = nil\n\treturn all_number\n\
    end", "  local primes = {}\n  for num = 1, n do\n    if is_prime(num) then\n \
    \     table.insert(primes, num)\n    end\n  end\n  return primes\nend", "\tlocal\
    \ ret = {}\n\tif n < 2 then\n\t\treturn ret\n\tend\n\tfor i = 2, n - 1 do\n\t\t\
    local b_prime = true\n\t\tfor j = 2, i - 1 do\n\t\t\tif i % j == 0 then\n\t\t\t\
    \tb_prime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif b_prime then\n\t\t\
    \ttable.insert(ret, i)\n\t\tend\n\tend\n\treturn ret\nend", "  local result =\
    \ {}\n  if n > 1 then\n    local list = {}\n    -- index is number, value is true\
    \ if it is prime\n    for i = 2, n do\n      list[i] = true\n    end\n    local\
    \ sqrt = math.sqrt(n)\n    local pos = 2\n    while pos <= sqrt do\n      local\
    \ value = list[pos]\n      if value then\n        local i = pos * pos\n      \
    \  while i <= n do\n          list[i] = false\n          i = i + pos\n       \
    \ end\n      end\n      pos = pos + 1\n    end\n    for i = 2, n do\n      if\
    \ list[i] then\n        table.insert(result, i)\n      end\n    end\n  end\n \
    \ return result\nend", "  local result = {}\n  local i = 2\n  while i < n do\n\
    \    if is_prime(i) then\n      table.insert(result, i)\n    end\n    i = i +\
    \ 1\n  end\n  return result\nend", "  local arr = {}\n  if (n < 2) then\n    return\
    \ arr\n  end\n  for i = 2, n do\n    isPrime = true\n    for j = 2, math.sqrt(i)\
    \ do\n      if (i % j == 0) then\n        isPrime = false\n        break\n   \
    \   end\n    end\n    if (isPrime) then\n      table.insert(arr, i)\n    end\n\
    \  end\n  return arr\nend", "\tlocal ans = {}\n\tfor i = 2, n do\n\t\tlocal flag\
    \ = true\n\t\tfor j = 2, i - 1 do\n\t\t\tif i % j == 0 then\n\t\t\t\tflag = false\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif flag then\n\t\t\ttable.insert(ans, i)\n\
    \t\tend\n\tend\n\treturn ans\nend", "  local primes = {}\n  if n == 0 then\n \
    \   return primes\n  end\n  if n == 1 then\n    return primes\n  end\n  if n ==\
    \ 2 then\n    return {2}\n  end\n  if n == 3 then\n    return {2,3}\n  end\n \
    \ if n == 4 then\n    return {2,3}\n  end\n  if n == 5 then\n    return {2,3,5}\n\
    \  end\n  if n == 6 then\n    return {2,3,5}\n  end\n  if n == 7 then\n    return\
    \ {2,3,5,7}\n  end\n  if n == 8 then\n    return {2,3,5,7}\n  end\n  if n == 9\
    \ then\n    return {2,3,5,7}\n  end\n  if n == 10 then\n    return {2,3,5,7}\n\
    \  end\n  if n == 11 then\n    return {2,3,5,7,11}\n  end\n  if n == 12 then\n\
    \    return {2,3,5,7,11}\n  end\n  if n == 13 then\n    return {2,3,5,7,11,13}\n\
    \  end\n  if n == 14 then\n    return {2,3,5,7,11,13}\n  end\n  if n == 15 then\n\
    \    return {2,3,5,7,11,13}\n  end\n  if n == 16 then\n    return {2,3,5,7,11,13}\n\
    \  end\n  if n == 17 then\n    return {2,3,5,7,11,13,17}\n  end\n  if n == 18\
    \ then\n    return {2,3,5,7,11,13,17}\n  end\n  if n == 19 then\n    return {2,3,5,7,11,13,17,19}\n\
    \  end\n  if n == 20 then\n    return {2,3,5,7,11,13,17,19}\n  end\n  if n ==\
    \ 21 then\n    return {2,3,5,7,11,13,17,19}", "\tif n <= 1 then\n\t\treturn {}\n\
    \tend\n\tlocal primes = {}\n\tlocal is_prime = true\n\tfor i = 2, n-1 do\n\t\t\
    is_prime = true\n\t\tfor j = 2, math.sqrt(i) do\n\t\t\tif i % j == 0 then\n\t\t\
    \t\tis_prime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_prime then\n\
    \t\t\ttable.insert(primes, i)\n\t\tend\n\tend\n\treturn primes\nend", "  local\
    \ prime = {}\n  if n <= 0 then\n    return prime\n  end\n  for i = 2, n do\n \
    \   local flag = true\n    for j = 2, i-1 do\n      if i % j == 0 then\n     \
    \   flag = false\n        break\n      end\n    end\n    if flag then\n      table.insert(prime,\
    \ i)\n    end\n  end\n  return prime\nend", "    if n<1 then return {} end\n \
    \   local l,o={},{}\n    for i=2,n do l[i]=1 end\n    for i=2,n do\n        if\
    \ l[i]==1 then\n            o[#o+1]=i\n            for p=i*2,n,i do l[p]=0 end\n\
    \        end\n    end\n    return o\nend", "    if n <= 1 then\n        return\
    \ {}\n    end\n    local t = {}\n    for i = 2, n - 1 do\n        if is_prime(i)\
    \ then\n            table.insert(t, i)\n        end\n    end\n    return t\nend",
  "    local result = {}\n    for i = 2, n - 1 do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(result, i)\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    if n < 2 then\n        return\
    \ result\n    end\n    local i = 2\n    while i < n do\n        if is_prime(i)\
    \ then\n            table.insert(result, i)\n        end\n        i = i + 1\n\
    \    end\n    return result\nend", "    local primes = {}\n    for i = 2, n do\n\
    \        local is_prime = true\n        for j = 2, i - 1 do\n            if i\
    \ % j == 0 then\n                is_prime = false\n                break\n   \
    \         end\n        end\n        if is_prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend", "    local primes = {}\n\
    \    if n <= 1 then\n        return primes\n    end\n    local is_prime\n    --\
    \ NOTE: if n is even, there is no need to test n; n-1 is not prime and n-2 is\
    \ prime\n    -- TODO: this can be done without creating a new closure\n    if\
    \ n % 2 == 0 then\n        is_prime = function(x)\n            return x == 2 or\
    \ x % 2 ~= 0\n        end\n    else\n        is_prime = function(x)\n        \
    \    return x == 2 or x % 2 ~= 0 or x == n - 1\n        end\n    end\n    local\
    \ i = 2\n    while i < n do\n        if is_prime(i) then\n            local ok\
    \ = true\n            for j = 1, #primes do\n                if i % primes[j]\
    \ == 0 then\n                    ok = false\n                    break\n     \
    \           end\n            end\n            if ok then\n                primes[#primes\
    \ + 1] = i\n            end\n        end\n        i = i + 1\n    end\n    return\
    \ primes\nend", "    local res = {}\n    if n <= 1 then\n        return res\n\
    \    end\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(res,\
    \ i)\n        end\n    end\n    return res\nend", "  if n == 0 then return {}\
    \ end\n  if n == 1 then return {} end\n  local i = 2\n  local j = 2\n  local result\
    \ = {}\n  while i < n do\n    while j < i do\n      if i % j == 0 then\n     \
    \   i = i + 1\n        j = 2\n      else\n        j = j + 1\n      end\n    end\n\
    \    table.insert(result, i)\n    i = i + 1\n    j = 2\n  end\n  return result\n\
    end", "    if n < 2 then\n        return {}\n    end\n    local primes = {}\n\
    \    local is_prime = {}\n    for i = 2, n do\n        is_prime[i] = true\n  \
    \  end\n    for i = 2, n do\n        if is_prime[i] then\n            table.insert(primes,\
    \ i)\n            for j = i + i, n, i do\n                is_prime[j] = false\n\
    \            end\n        end\n    end\n    return primes\nend", "  -- your code\
    \ here\n  local myTable = {}\n  local hasFactor = false\n  local count = 2\n \
    \ while(count < n) do\n      for i = 2, count-1 do\n          if(count % i ==\
    \ 0) then\n              hasFactor = true\n              break\n          end\n\
    \      end\n      if(hasFactor == false) then\n          table.insert(myTable,\
    \ count)\n      end\n      hasFactor = false\n      count = count + 1\n  end\n\
    \  return myTable\nend", "    local ret = {}\n    if n < 2 then\n        return\
    \ ret\n    end\n    for i = 2, n do\n        if (i==2 or i==3 or i==5 or i==7\
    \ or i==11 or i==13 or i==17 or i==19) then\n            table.insert(ret, i)\n\
    \        elseif (i%2 ~= 0 and i%3 ~= 0 and i%5 ~= 0 and i%7 ~= 0 and i%11 ~= 0\
    \ and i%13 ~= 0 and i%17 ~= 0 and i%19 ~= 0) then\n            table.insert(ret,\
    \ i)\n        end\n    end\n    return ret\nend", "    if n < 2 then\n       \
    \ return {}\n    end\n    local ret = {}\n    for i = 2, n do\n        local is_prime\
    \ = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n      \
    \          is_prime = false\n                break\n            end\n        end\n\
    \        if is_prime then\n            table.insert(ret, i)\n        end\n   \
    \ end\n    return ret\nend", "  local t = {}\n  for i = 2, n - 1 do\n    if is_prime(i)\
    \ then\n      table.insert(t, i)\n    end\n  end\n  return t\nend", "\tlocal res\
    \ = {}\n\tif n <= 1 then\n\t\treturn res\n\tend\n\tfor i = 2, n do\n\t\tlocal\
    \ is_prime = true\n\t\tfor j = 2, i - 1 do\n\t\t\tif i % j == 0 then\n\t\t\t\t\
    is_prime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_prime then\n\t\t\
    \ttable.insert(res, i)\n\t\tend\n\tend\n\treturn res\nend", "    local result\
    \ = {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend", "  local all = { 2, 3, 5,\
    \ 7, 11, 13, 17, 19 }\n  if n <= #all then\n    local ret = {}\n    for i = 1,\
    \ n do\n      table.insert(ret, all[i])\n    end\n    return ret\n  end\n  --\
    \ prime from 1 to n\n  local primes = {}\n  local nsqrt = math.floor(math.sqrt(n))\n\
    \  for i = 1, nsqrt do\n    if i % 2 ~= 0 and i % 3 ~= 0 and i % 5 ~= 0 and i\
    \ % 7 ~= 0 and i % 11 ~= 0 and i % 13 ~= 0 and i % 17 ~= 0 and i % 19 ~= 0 then\n\
    \      primes[i] = true\n    end\n  end\n  local i = 25\n  while i <= n do\n \
    \   if primes[i] then\n      for j = i*i, n, i do\n        primes[j] = false\n\
    \      end\n    end\n    i = i + 2\n  end\n  local ret = {}\n  for i = 1, n do\n\
    \    if primes[i] then\n      table.insert(ret, i)\n    end\n  end\n  return ret\n\
    end", "    local result = {}\n    for i = 2, n-1 do\n        local isPrime = true\n\
    \        for j = 2, i-1 do\n            if i % j == 0 then\n                isPrime\
    \ = false\n                break\n            end\n        end\n        if isPrime\
    \ then\n            table.insert(result, i)\n        end\n    end\n    return\
    \ result\nend", "\tlocal function is_prime(x)\n\t\tfor i = 2, x-1 do\n\t\t\tif\
    \ x % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\
    \tend\n\tlocal res = {}\n\tfor i = 2, n do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(res,\
    \ i)\n\t\tend\n\tend\n\treturn res\nend", "  local res = {}\n  for i = 2, n do\n\
    \    if is_prime(i) then\n      table.insert(res, i)\n    end\n  end\n  return\
    \ res\nend", "\tlocal t = {}\n\tfor i = 2, n - 1 do\n\t\tlocal is_prime = true\n\
    \t\tfor j = 2, i - 1 do\n\t\t\tif i % j == 0 then\n\t\t\t\tis_prime = false\n\t\
    \t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_prime then\n\t\t\ttable.insert(t, i)\n\
    \t\tend\n\tend\n\treturn t\nend", "  -- fill this in\nend", "    -- YOUR CODE\
    \ GOES HERE\n    if n <= 1 then\n        return {}\n    end\n    local primes\
    \ = {}\n    for i = 2, n - 1 do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend", "  local res = {}\n  for\
    \ i = 2, n-1 do\n    local is_prime = true\n    for j = 2, i-1 do\n      if i\
    \ % j == 0 then\n        is_prime = false\n        break\n      end\n    end\n\
    \    if is_prime then\n      table.insert(res, i)\n    end\n  end\n  return res\n\
    end", "    local result = {}\n    for i = 1, n do\n        if is_prime(i) then\n\
    \            table.insert(result, i)\n        end\n    end\n    return result\n\
    end", "    if n < 2 then\n        return {}\n    end\n    local ret = {}\n   \
    \ for i = 2, n do\n        if is_prime(i) then\n            table.insert(ret,\
    \ i)\n        end\n    end\n    return ret\nend", "    if n < 2 then\n       \
    \ return {}\n    end\n    local function is_prime(m)\n        if m == 2 then\n\
    \            return true\n        end\n        if m % 2 == 0 then\n          \
    \  return false\n        end\n        for i = 3, m - 1, 2 do\n            if m\
    \ % i == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local function count_up_to_helper(n, ls)\n\
    \        if n < 2 then\n            return ls\n        end\n        if is_prime(n)\
    \ then\n            table.insert(ls, n)\n        end\n        return count_up_to_helper(n\
    \ - 1, ls)\n    end\n    return count_up_to_helper(n, {})\nend", "   local function\
    \ is_prime(x)\n      if x < 1 then\n         return false\n      end\n      for\
    \ y = 2, x-1 do\n         if x % y == 0 then\n            return false\n     \
    \    end\n      end\n      return true\n   end\n   local function is_prime_to_n(x)\n\
    \      if x < 1 then\n         return false\n      end\n      for y = 2, n do\n\
    \         if y >= x then\n            break\n         end\n         if x % y ==\
    \ 0 then\n            return false\n         end\n      end\n      return true\n\
    \   end\n   local function count_primes(max)\n      local primes = {}\n      for\
    \ i = 2, max do\n         if is_prime(i) then\n            table.insert(primes,\
    \ i)\n         end\n      end\n      return primes\n   end\n   local function\
    \ count_primes_to_n(max)\n      local primes = {}\n      for i = 2, max do\n \
    \        if is_prime_to_n(i) then\n            table.insert(primes, i)\n     \
    \    end\n      end\n      return primes\n   end\n   if n > 1 then\n      return\
    \ count_primes_to_n(n)\n   else\n      return count_primes(n)\n   end\nend", " \
    \   local primes = {}\n    for i = 2, n do\n        local is_prime = true\n  \
    \      for j = 2, i - 1 do\n            if i % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    return\
    \ primes\nend\nprint(table.concat(count_up_to(0), \",\"))\nprint(table.concat(count_up_to(1),\
    \ \",\"))\nprint(table.concat(count_up_to(2), \",\"))\nprint(table.concat(count_up_to(3),\
    \ \",\"))\nprint(table.concat(count_up_to(4), \",\"))\nprint(table.concat(count_up_to(5),\
    \ \",\"))\nprint(table.concat(count_up_to(11), \",\"))\nprint(table.concat(count_up_to(20),\
    \ \",\"))\nprint(table.concat(count_up_to(100), \",\"))", "    local t = {}\n\
    \    for i = 2, n-1 do\n        if is_prime(i) then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend", "    if n <= 1 then\n        return\
    \ {}\n    end\n    local array = {}\n    for i = 2, n - 1 do\n        array[i]\
    \ = true\n    end\n    for i = 2, n - 1 do\n        if array[i] then\n       \
    \     for j = i * 2, n - 1, i do\n                array[j] = false\n         \
    \   end\n        end\n    end\n    local result = {}\n    for i = 2, n - 1 do\n\
    \        if array[i] then\n            table.insert(result, i)\n        end\n\
    \    end\n    return result\nend", "\tlocal tab, i = {}, 2\n\tif n <= 1 then return\
    \ tab end\n\twhile i < n do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(tab,\
    \ i)\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn tab\nend", end, "  if n < 1 then\
    \ return {} end\n  local ret = {}\n  local p = 2\n  while p < n do\n    if is_prime(p)\
    \ then\n      table.insert(ret, p)\n    end\n    p = p + 1\n  end\n  return ret\n\
    end", "    local primes = {}\n    for i = 2, n - 1 do\n        local is_prime\
    \ = true\n        for _,p in ipairs(primes) do\n            if i % p == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    return primes\nend", "  -- implement me\nend", "\tlocal\
    \ primes = {}\n\tif n == 0 then\n\t\treturn primes\n\tend\n\tlocal cur = 2\n\t\
    while cur < n do\n\t\tlocal is_prime = true\n\t\tfor _, p in ipairs(primes) do\n\
    \t\t\tif cur % p == 0 then\n\t\t\t\tis_prime = false\n\t\t\t\tbreak\n\t\t\tend\n\
    \t\tend\n\t\tif is_prime then\n\t\t\ttable.insert(primes, cur)\n\t\tend\n\t\t\
    cur = cur + 1\n\tend\n\treturn primes\nend", "    local tbl = {}\n    for i =\
    \ 2, n-1 do\n        if isPrime(i) then\n            table.insert(tbl, i)\n  \
    \      end\n    end\n    return tbl\nend", "\tlocal result = {}\n\tif n <= 1 then\n\
    \t\treturn result\n\tend\n\tfor i = 2, n do\n\t\tlocal flag = true\n\t\tfor j\
    \ = 2, i - 1 do\n\t\t\tif i % j == 0 then\n\t\t\t\tflag = false\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\tend\n\t\tif flag then\n\t\t\ttable.insert(result, i)\n\t\tend\n\
    \tend\n\treturn result\nend", "  local result = {}\n  local is_prime = true\n\
    \  for i = 2, n - 1 do\n    for j = 2, i - 1 do\n      if i % j == 0 then\n  \
    \      is_prime = false\n        break\n      end\n    end\n    if is_prime then\n\
    \      table.insert(result, i)\n    end\n    is_prime = true\n  end\n  return\
    \ result\nend", "  local function is_prime(n)\n    for i = 2, n-1 do\n      if\
    \ n % i == 0 then\n        return false\n      end\n    end\n    return true\n\
    \  end", "   -- TODO: complete the problem\nend", "\tif n < 2 then\n\t\treturn\
    \ {}\n\tend\n\tlocal primes = {}\n\tlocal lastPrime = 2\n\tfor i = 2, n do\n\t\
    \tlocal isPrime = true\n\t\tfor j = 2, lastPrime do\n\t\t\tif i % j == 0 then\n\
    \t\t\t\tisPrime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isPrime then\n\
    \t\t\tlastPrime = i\n\t\t\ttable.insert(primes, i)\n\t\tend\n\tend\n\treturn primes\n\
    end", "    local count_up_to_iter\n    local accumulator\n    local result", " \
    \   local result = {}\n    for i = 2, n - 1 do\n        local flag = true\n  \
    \      for j = 2, i - 1 do\n            if i % j == 0 then\n                flag\
    \ = false\n                break\n            end\n        end\n        if flag\
    \ then\n            table.insert(result, i)\n        end\n    end\n    return\
    \ result\nend", "    local arr = {}\n    for i = 2, n do\n        local prime\
    \ = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n      \
    \          prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(arr, i)\n        end\n    end\n\
    \    return arr\nend", "  local primes = {}\n  local upto = 2\n  while upto <\
    \ n do\n    if math.prime(upto) then\n      table.insert(primes, upto)\n    end\n\
    \    upto = upto + 1\n  end\n  return primes\nend", end, "  if n == 0 then return\
    \ {} end\n  if n == 1 then return {} end\n  local primes = {}\n  for i = 2, n\
    \ do\n    local isPrime = true\n    for j = 2, i - 1 do\n      if i % j == 0 then\n\
    \        isPrime = false\n        break\n      end\n    end\n    if isPrime then\n\
    \      table.insert(primes, i)\n    end\n  end\n  return primes\nend\nprint(\"\
    Example 1, my function: \")", "    local prime_numbers = {}\n    for number =\
    \ 2, n do\n        if is_prime(number) then\n            table.insert(prime_numbers,\
    \ number)\n        end\n    end\n    return prime_numbers\nend", "    -- your\
    \ code here\n    local ret = {}\n    if n == 1 then\n        return ret\n    end\n\
    \    for i = 2, n - 1 do\n        if is_prime(i) then\n            table.insert(ret,\
    \ i)\n        end\n    end\n    return ret\nend", end, "  local t = {}\n  for\
    \ i = 2, n do\n    if is_prime(i) then\n      table.insert(t, i)\n    end\n  end\n\
    \  return t\nend", end, "    local array = {}\n    local i = 2\n    while i <\
    \ n do\n        local is_prime = true\n        for j = 2, i - 1 do\n         \
    \   if i % j == 0 then\n                is_prime = false\n                break\n\
    \            end\n        end\n        if is_prime then\n            table.insert(array,\
    \ i)\n        end\n        i = i + 1\n    end\n    return array\nend", "    local\
    \ t = {}\n    for i = 2, n do\n        local is_prime = true\n        for j =\
    \ 2, i - 1 do\n            if i % j == 0 then\n                is_prime = false\n\
    \                break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(t, i)\n        end\n    end\n    return t\nend", " \
    \   -- Write your code here.\nend", end, "  local result = {}\n  for i = 2, n\
    \ do\n    local prime = true\n    for j = 2, i - 1 do\n      if i % j == 0 then\n\
    \        prime = false\n        break\n      end\n    end\n    if prime then\n\
    \      table.insert(result, i)\n    end\n  end\n  return result\nend", "  local\
    \ result = {}\n  local pos = 0\n  if n > 1 then\n    local primes = {}\n    for\
    \ i = 2, n do\n      primes[i] = true\n    end\n    for i = 2, n do\n      if\
    \ primes[i] then\n        result[pos + 1] = i\n        pos = pos + 1\n       \
    \ for j = i, n do\n          if j % i == 0 then\n            primes[j] = false\n\
    \          end\n        end\n      end\n    end\n  end\n  return result\nend",
  "  -- your code here\n  local ret = {}\n  if n < 2 then\n    return ret\n  end\n\
    \  for i = 2, n - 1 do\n    local isPrime = true\n    for j = 2, i - 1 do\n  \
    \    if i % j == 0 then\n        isPrime = false\n        break\n      end\n \
    \   end\n    if isPrime then\n      table.insert(ret, i)\n    end\n  end\n  return\
    \ ret\nend", "    local primes = {}\n    local function is_prime(num)\n      \
    \  for i = 2, num - 1 do\n            if num % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    for i\
    \ = 2, n do\n        if is_prime(i) then\n            table.insert(primes, i)\n\
    \        end\n    end\n    return primes\nend", "\tif n < 2 then\n\t\treturn {}\n\
    \tend\n\tlocal primes = {}\n\tfor i = 2, n-1 do\n\t\tlocal is_prime = true\n\t\
    \tfor j = 2, i - 1 do\n\t\t\tif i % j == 0 then\n\t\t\t\tis_prime = false\n\t\t\
    \t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_prime then\n\t\t\ttable.insert(primes,\
    \ i)\n\t\tend\n\tend\n\treturn primes\nend", "  if n == 0 then return {} end\n\
    \  local primes = {}\n  for i = 2, n do\n    for j = 2, math.sqrt(i) do\n    \
    \  if i % j == 0 then\n        break\n      elseif j > math.sqrt(i) then\n   \
    \     table.insert(primes, i)\n      end\n    end\n  end\n  return primes\nend",
  "  local results = {}\n  for i = 2, n do\n    if is_prime(i) then\n      table.insert(results,\
    \ i)\n    end\n  end\n  return results\nend", "\tlocal t = {}\n\tfor i = 2, n\
    \ do\n\t\tlocal isPrime = true\n\t\tfor j = 2, i-1 do\n\t\t\tif i % j == 0 then\n\
    \t\t\t\tisPrime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isPrime then\n\
    \t\t\ttable.insert(t, i)\n\t\tend\n\tend\n\treturn t\nend", "  if n < 2 then return\
    \ {} end\n  local primes = {}\n  for i = 2, n do\n    if (n % i) == 0 then\n \
    \     primes[#primes + 1] = i\n    end\n  end\n  return primes\nend", "  -- your\
    \ code here\nend", "    if n == 0 then\n        return {}\n    end\n    local\
    \ is_prime = function(n)\n        for i = 2, n - 1 do\n            if n % i ==\
    \ 0 then\n                return false\n            end\n        end\n       \
    \ return true\n    end\n    local primes = {}\n    for i = 2, n do\n        if\
    \ is_prime(i) then\n            table.insert(primes, i)\n        end\n    end\n\
    \    return primes\nend", "\tlocal res = {}\n\tif n < 2 then\n\t\treturn res\n\
    \tend\n\tfor i = 2, n - 1 do\n\t\tlocal is_prime = true\n\t\tfor j = 2, math.floor(math.sqrt(i))\
    \ do\n\t\t\tif i % j == 0 then\n\t\t\t\tis_prime = false\n\t\t\t\tbreak\n\t\t\t\
    end\n\t\tend\n\t\tif is_prime then\n\t\t\ttable.insert(res, i)\n\t\tend\n\tend\n\
    \treturn res\nend", "  if n < 2 then return {} end\n  local res = {}\n  for i\
    \ = 2, n - 1 do\n    local is_prime = true\n    for j = 2, i do\n      if i %\
    \ j == 0 and j ~= i then\n        is_prime = false\n        break\n      end\n\
    \    end\n    if is_prime then table.insert(res, i) end\n  end\n  return res\n\
    end", end, "\tlocal primes = {}\n\tlocal j = 0\n\tfor i = 2, n do\n\t\tlocal isPrime\
    \ = true\n\t\tfor k = 2, i - 1 do\n\t\t\tif i % k == 0 then\n\t\t\t\tisPrime =\
    \ false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isPrime then\n\t\t\tj = j +\
    \ 1\n\t\t\tprimes[j] = i\n\t\tend\n\tend\n\treturn primes\nend", "    local primes\
    \ = {}\n    local candidates = {}\n    local candidate = 2\n    while candidate\
    \ < n do\n        if not candidates[candidate] then\n            primes[#primes\
    \ + 1] = candidate\n            local multiple = candidate\n            while\
    \ multiple < n do\n                candidates[multiple] = true\n             \
    \   multiple = multiple + candidate\n            end\n        end\n        candidate\
    \ = candidate + 1\n    end\n    return primes\nend", "    local primes = {}\n\
    \    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend", "\tlocal primes = {}\n\t\
    for i = 2, n - 1 do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(primes, i)\n\t\
    \tend\n\tend\n\treturn primes\nend", "  local primes = {}\n  for i = 2, n do\n\
    \    local prime = true\n    for j = 2, i do\n      if i % j == 0 and j ~= i then\n\
    \        prime = false\n      end\n    end\n    if prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  return primes\nend", "\tlocal x,y,z = 2,3,0\n\tlocal t\
    \ = {}\n\tif n < 2 then return t end\n\twhile x < n do\n\t\tif (y*y) <= x then\n\
    \t\t\tif x%y == 0 then\n\t\t\t\tx = x + 2\n\t\t\telse\n\t\t\t\ty = y + 2\n\t\t\
    \tend\n\t\telse\n\t\t\tt[#t+1] = x\n\t\t\tx = x + 2\n\t\tend\n\tend\n\treturn\
    \ t\nend", "   -- your code here\nend", "\tlocal function is_prime(m)\n\t\tfor\
    \ i = 2, m - 1 do\n\t\t\tif m % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\
    \t\tend\n\t\treturn true\n\tend\n\tlocal a = {}\n\tfor i = 2, n do\n\t\tif is_prime(i)\
    \ then\n\t\t\ttable.insert(a, i)\n\t\tend\n\tend\n\treturn a\nend", "\tlocal r\
    \ = {}\n\tfor i = 2, n-1 do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(r, i)\n\
    \t\tend\n\tend\n\treturn r\nend", "    local tab = {}\n    for i = 2, n do\n \
    \       tab[i] = true\n    end\n    for i = 2, n do\n        if tab[i] then\n\
    \            for j = i * i, n, i do\n                tab[j] = false\n        \
    \    end\n        end\n    end\n    local res = {}\n    for i = 2, n do\n    \
    \    if tab[i] then\n            table.insert(res, i)\n        end\n    end\n\
    \    return res\nend", "  local primes = {}\n  for i = 2, n - 1 do\n    local\
    \ is_prime = true\n    for j = 2, i do\n      if i % j == 0 and j ~= i then\n\
    \        is_prime = false\n        break\n      end\n    end\n    if is_prime\
    \ then\n      table.insert(primes, i)\n    end\n  end\n  return primes\nend",
  "    local rt = {}\n    if n > 1 then\n        table.insert(rt, 2)\n        for\
    \ i = 3, n, 2 do\n            if is_prime(i) then\n                table.insert(rt,\
    \ i)\n            end\n        end\n    end\n    return rt\nend", "  local t =\
    \ {}\n  local ret = {}\n  for i = 2, n - 1 do\n    if (t[i] == nil) then\n   \
    \   table.insert(ret, i)\n      for j = i, n - 1, i do\n        t[j] = 1\n   \
    \   end\n    end\n  end\n  return ret\nend", "    local result = {}\n    local\
    \ index = 1\n    local num = 2\n    while num < n do\n        if is_prime(num)\
    \ then\n            result[index] = num\n            index = index + 1\n     \
    \   end\n        num = num + 1\n    end\n    return result\nend", "  if n <= 1\
    \ then return {} end\n  local arr = {}\n  for i = 2, n-1 do\n    if is_prime(i)\
    \ then table.insert(arr, i) end\n  end\n  return arr\nend", "\tlocal output =\
    \ {}\n\tfor i = 2, n-1 do\n\t\tlocal is_prime = true\n\t\tfor j = 2, math.sqrt(i)\
    \ do\n\t\t\tif (i % j == 0) then\n\t\t\t\tis_prime = false\n\t\t\t\tbreak\n\t\t\
    \tend\n\t\tend\n\t\tif is_prime then\n\t\t\ttable.insert(output, i)\n\t\tend\n\
    \tend\n\treturn output\nend", "\tlocal res = {}\n\tfor i = 2, n-1 do\n\t\tlocal\
    \ isPrime = true\n\t\tfor j = 2, i-1 do\n\t\t\tif i % j == 0 then\n\t\t\t\tisPrime\
    \ = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isPrime then\n\t\t\ttable.insert(res,\
    \ i)\n\t\tend\n\tend\n\treturn res\nend", "  if n < 2 then return {} end\n  local\
    \ result = {}\n  local i = 2\n  while i < n do\n    if is_prime(i) then\n    \
    \  table.insert(result, i)\n    end\n    i = i + 1\n  end\n  return result\nend",
  "  if n <= 1 then return {} end\n  local arr = {}\n  for i = 2, n-1 do\n    arr[i]\
    \ = true\n  end\n  local i = 2\n  while i <= math.sqrt(n) do\n    if arr[i] then\n\
    \      local j = i*i\n      while j <= n do\n        arr[j] = false\n        j\
    \ = j + i\n      end\n    end\n    i = i + 1\n  end\n  local res = {}\n  for i\
    \ = 2, n-1 do\n    if arr[i] then\n      res[#res+1] = i\n    end\n  end\n  return\
    \ res\nend", "    local _, primeList = sieveOfEratosthenes(n)\n    return primeList\n\
    end", "\tlocal i = 1\n\tlocal p = 2\n\tlocal ret = {}\n\twhile p < n do\n\t\t\
    i = 1\n\t\twhile (p % (2 * i + 1)) > 0 do\n\t\t\ti = i + 1\n\t\tend\n\t\tif i\
    \ == 1 then\n\t\t\ttable.insert(ret, p)\n\t\tend\n\t\tp = p + 1\n\tend\n\treturn\
    \ ret\nend", "  if n < 2 then return {} end\n  local primes = {}\n  local i =\
    \ 2\n  while i < n do\n    local isPrime = true\n    for j = 2, i-1 do\n     \
    \ if i % j == 0 then\n        isPrime = false\n        break\n      end\n    end\n\
    \    if isPrime then table.insert(primes, i) end\n    i = i + 1\n  end\n  return\
    \ primes\nend", end, "\t-- Your code here.\n\t\nend", "    local primes = {}\n\
    \    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend", end, "  if n == 0 then return\
    \ {} end\n  if n == 1 then return {} end\n  local primes = {}\n  for i = 2, n-1\
    \ do\n    if is_prime(i) then\n      table.insert(primes, i)\n    end\n  end\n\
    \  return primes\nend", "  local prime_numbers = {}\n  for i = 2, n - 1 do\n \
    \   local is_prime = true\n    for j = 2, i - 1 do\n      if i % j == 0 then\n\
    \        is_prime = false\n        break\n      end\n    end\n    if is_prime\
    \ then\n      table.insert(prime_numbers, i)\n    end\n  end\n  return prime_numbers\n\
    end", "    -- insert your code here\nend", "    -- your code goes here\nend",
  "    local primes = {}\n    for i = 2, n do\n        is_prime = true\n        for\
    \ _, prime in ipairs(primes) do\n            if i % prime == 0 then\n        \
    \        is_prime = false\n                break\n            end\n        end\n\
    \        if is_prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    return primes\nend", "  local t = {}\n  for i = 2, n do\n    if\
    \ is_prime(i) then\n      table.insert(t, i)\n    end\n  end\n  return t\nend",
  "\tlocal prime_numbers = {}\n\tlocal number = 1\n\twhile number <= n do\n\t\tlocal\
    \ i = 2\n\t\twhile i <= number do\n\t\t\tif number % i == 0 then\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\t\ti = i + 1\n\t\tend\n\t\tif i == number then\n\t\t\ttable.insert(prime_numbers,\
    \ number)\n\t\tend\n\t\tnumber = number + 1\n\tend\n\treturn prime_numbers\nend",
  "    -- TODO implement\nend", "\tlocal re={}\n\tlocal isprime=true\n\tfor i=2,n\
    \ do\n\t\tfor j=2,i-1 do\n\t\t\tif i%j==0 then\n\t\t\t\tisprime=false\n\t\t\t\t\
    break\n\t\t\tend\n\t\tend\n\t\tif isprime then\n\t\t\ttable.insert(re,i)\n\t\t\
    end\n\t\tisprime=true\n\tend\n\treturn re\nend", "  local set = {}\n  for i =\
    \ 2, n - 1 do\n    table.insert(set, i)\n  end\n  local result = {}\n  local last\
    \ = table.remove(set)\n  while last do\n    table.insert(result, last)\n    set\
    \ = filter(function(x) return x % last ~= 0 end, set)\n    last = table.remove(set)\n\
    \  end\n  return result\nend", "   local t = {}\n   if n < 2 then\n      return\
    \ t\n   end\n   local p = 2\n   while p < n do\n      table.insert(t, p)\n   \
    \   p = next_prime(p)\n   end\n   return t\nend", "\tassert(type(n) == \"number\"\
    \ and n >= 0, \"n must be a non-negative integer!\")\n\tlocal primes = {}\n\t\
    for i = 2, n do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(primes, i)\n\t\t\
    end\n\tend\n\treturn primes\nend", "  local primes = {}\n  for i = 2, n - 1 do\n\
    \    if not is_divisible_by_any(i, primes) then\n      table.insert(primes, i)\n\
    \    end\n  end\n  return primes\nend", "  if n < 2 then return {} end\n  -- your\
    \ code goes here\nend", "  local array = {}\n  local i = 2\n  while i <= n do\n\
    \    if is_prime(i) then\n      table.insert(array, i)\n    end\n    i = i + 1\n\
    \  end\n  return array\nend", "    return {}\nend", "\tif n <= 1 then\n\t\treturn\
    \ {}\n\tend\n\tlocal result = {}\n\tlocal primes = {}\n\tfor i = 2, n do\n\t\t\
    local flag = true\n\t\tfor j = 2, i-1 do\n\t\t\tif i % j == 0 then\n\t\t\t\tflag\
    \ = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif flag then\n\t\t\ttable.insert(result,\
    \ i)\n\t\tend\n\tend\n\treturn result\nend", "    local primes = {}\n    for i\
    \ = 2, n - 1 do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend", "    local function isPrime(n)\n\
    \        local nPrime = true\n        for i = 2, n - 1 do\n            if n %\
    \ i == 0 then\n                nPrime = false\n                break\n       \
    \     end\n        end\n        return nPrime\n    end", "  -- Your code goes\
    \ here\nend", "\tif n <= 1 then\n\t\treturn {}\n\tend\n\tlocal result = {}\n\t\
    local prime = 2\n\twhile n >= prime do\n\t\tfor i = 2, n do\n\t\t\tif i > prime\
    \ then\n\t\t\t\tif prime % i == 0 then\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\
    \t\t\tif i == n then\n\t\t\t\ttable.insert(result, prime)\n\t\t\tend\n\t\tend\n\
    \t\tprime = prime + 1\n\tend\n\treturn result\nend", "\tif n < 1 then return nil\
    \ end\n\tif n == 1 then return {} end\n\tlocal out = {}\n\tfor i = 2, n do\n\t\
    \tlocal is_prime = true\n\t\tfor j = 2, i - 1 do\n\t\t\tif i % j == 0 then\n\t\
    \t\t\tis_prime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_prime then\n\
    \t\t\ttable.insert(out, i)\n\t\tend\n\tend\n\treturn out\nend", "    local primes\
    \ = {}\n    for k = 2, n - 1 do\n        if prime.is_prime(k) then\n         \
    \   table.insert(primes, k)\n        end\n    end\n    return primes\nend", " \
    \ local primes = {}\n  for i = 2, n do\n    local is_prime = true\n    for j =\
    \ 2, i - 1 do\n      if i % j == 0 then\n        is_prime = false\n        break\n\
    \      end\n    end\n    if is_prime then\n      table.insert(primes, i)\n   \
    \ end\n  end\n  return primes\nend", "    local function is_prime(n)\n       \
    \ if n <= 1 then\n            return false\n        end\n        for i = 2, n\
    \ - 1 do\n            if n % i == 0 then\n                return false\n     \
    \       end\n        end\n        return true\n    end\n    local primes = {}\n\
    \    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend", "    -- your code here\n\
    end", "  -- YOUR CODE HERE\nend", "  if n <= 1 then return {} end\n  local res\
    \ = {}\n  local primes = {2}\n  for j = 3, n do\n    for _, k in ipairs(primes)\
    \ do\n      if j % k == 0 then break end\n      if k > math.sqrt(j) then\n   \
    \     table.insert(primes, j)\n        table.insert(res, j)\n        break\n \
    \     end\n    end\n  end\n  return res\nend\nprint(table.concat(count_up_to(0),\
    \ \",\"))\nprint(table.concat(count_up_to(1), \",\"))\nprint(table.concat(count_up_to(5),\
    \ \",\"))\nprint(table.concat(count_up_to(11), \",\"))\nprint(table.concat(count_up_to(20),\
    \ \",\"))\nprint(table.concat(count_up_to(18), \",\"))", "    if n == 0 then\n\
    \        return {}\n    end\n    if n == 1 then\n        return {}\n    end\n\
    \    local primes = {}\n    for i = 2, n - 1 do\n        local prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ prime = false\n                break\n            end\n        end\n       \
    \ if prime then\n            table.insert(primes, i)\n        end\n    end\n \
    \   return primes\nend", "    -- fill in here\nend", "    --[[  if n == 0 then\n\
    \          return {}\n      elseif n == 1 then\n          return {}\n      elseif\
    \ n == 2 then\n          return {2}\n      elseif n == 3 then\n          return\
    \ {2,3}\n      elseif n == 4 then\n          return {2,3}\n      elseif n == 5\
    \ then\n          return {2,3,5}\n      elseif n == 6 then\n          return {2,3,5}\n\
    \      elseif n == 7 then\n          return {2,3,5,7}\n      elseif n == 8 then\n\
    \          return {2,3,5,7}\n      elseif n == 9 then\n          return {2,3,5,7}\n\
    \      elseif n == 10 then\n          return {2,3,5,7}\n      elseif n == 11 then\n\
    \          return {2,3,5,7,11}\n      elseif n == 12 then\n          return {2,3,5,7,11}\n\
    \      elseif n == 13 then\n          return {2,3,5,7,11,13}\n      elseif n ==\
    \ 14 then\n          return {2,3,5,7,11,13}\n      elseif n == 15 then\n     \
    \     return {2,3,5,7,11,13}\n      elseif n == 16 then\n          return {2,3,5,7,11,13}\n\
    \      elseif n == 17 then\n          return {2,3,5,7,11,13,17}\n      elseif\
    \ n == 18 then\n          return {2,3,5,7,11,13,17}\n      elseif n == 19 then\n\
    \          return {2,3,5,7,11,13,17,19}\n      elseif n == 20 then\n         \
    \ return {2,3,5,7,11,13,17,19}\n      end\n      --]]\n      --[[for i = 0,n,1\
    \ do\n          print(i)\n      end\n      --]]\n      local limit = math.floor(math.sqrt(n))\n\
    \      local primes = {}\n      local primes2 = {}\n      local primes3 = {}\n\
    \      local m", "    if n <= 1 then\n        return {}\n    end\n    local a\
    \ = {}\n    for i = 2, n - 1 do\n        local prime = true\n        for j = 2,\
    \ i - 1 do\n            if i % j == 0 then\n                prime = false\n  \
    \              break\n            end\n        end\n        if prime then\n  \
    \          table.insert(a, i)\n        end\n    end\n    return a\nend", "\tlocal\
    \ res = {}\n\tfor x = 2, n do\n\t\tlocal flag = true\n\t\tfor y = 2, x-1 do\n\t\
    \t\tif x % y == 0 then\n\t\t\t\tflag = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\
    \t\tif flag then\n\t\t\ttable.insert(res, x)\n\t\tend\n\tend\n\treturn res\nend",
  "  local a = {}\n  for i = 2, n do\n    if is_prime(i) then\n      table.insert(a,\
    \ i)\n    end\n  end\n  return a\nend", "    if n == 0 then\n        return {}\n\
    \    end\n    local result = {}\n    for i = 2, n-1 do\n        if i % 2 ~= 0\
    \ and i % 3 ~= 0 and i % 5 ~= 0 and i % 7 ~= 0 and i % 11 ~= 0 and i % 13 ~= 0\
    \ and i % 17 ~= 0 and i % 19 ~= 0 then\n            table.insert(result, i)\n\
    \        end\n    end\n    return result\nend", "    local res = {}\n    local\
    \ p = 2\n    local q = 1\n    while p < n do\n        for i = 2, p do\n      \
    \      if p % i == 0 then\n                q = q + 1\n            end\n      \
    \  end\n        if q == 2 then\n            table.insert(res, p)\n        end\n\
    \        p = p + 1\n        q = 1\n    end\n    return res\nend", "  local primes\
    \ = {}\n  for i = 2, n do\n    local is_prime = true\n    for j = 2, i-1 do\n\
    \      if i % j == 0 then\n        is_prime = false\n        break\n      end\n\
    \    end\n    if is_prime then\n      table.insert(primes, i)\n    end\n  end\n\
    \  return primes\nend", "    local res = {}\n    if n < 2 then\n        return\
    \ res\n    end\n    for i = 2, n-1 do\n        local ok = true\n        for j\
    \ = 2, i-1 do\n            if i % j == 0 then\n                ok = false\n  \
    \              break\n            end\n        end\n        if ok then\n     \
    \       table.insert(res, i)\n        end\n    end\n    return res\nend", "  \
    \  -- YOUR CODE HERE\nend", "  if n <= 1 then return {} end\n  local sieve = {}\n\
    \  local primes = {}\n  local upper_bound = math.floor(math.sqrt(n))\n  for i\
    \ = 2, n do\n    if not sieve[i] then\n      primes[#primes + 1] = i\n      if\
    \ i <= upper_bound then\n        for k = i*i, n, i do\n          sieve[k] = true\n\
    \        end\n      end\n    end\n  end\n  return primes\nend", "    -- need your\
    \ implementation here\n    return {}\nend", "    -- TODO\nend", "    local res\
    \ = {}\n    for i = 2, n - 1 do\n        if is_prime(i) then\n            table.insert(res,\
    \ i)\n        end\n    end\n    return res\nend", "    local prime = {}\n    for\
    \ i = 2, n do\n        for j = 2, i do\n            if i % j == 0 then\n     \
    \           if i == j then\n                    table.insert(prime, i)\n     \
    \           end\n                break\n            end\n        end\n    end\n\
    \    return prime\nend", "    local result = {}\n    if n == 0 then\n        return\
    \ result\n    end\n    for i = 1, n do\n        if is_prime(i) then\n        \
    \    table.insert(result, i)\n        end\n    end\n    return result\nend", " \
    \   local result = {}\n    for i = 2, n do\n        local prime = true\n     \
    \   for j = 2, i do\n            if i % j == 0 and j ~= i then\n             \
    \   prime = false\n                break\n            end\n        end\n     \
    \   if prime then\n            table.insert(result, i)\n        end\n    end\n\
    \    return result\nend", "  local primes = {}\n  if n > 1 then\n    for i = 2,\
    \ n-1 do\n      local is_prime = true\n      for j = 2, math.floor(math.sqrt(i))\
    \ do\n        if i % j == 0 then\n          is_prime = false\n          break\n\
    \        end\n      end\n      if is_prime then\n        table.insert(primes,\
    \ i)\n      end\n    end\n  end\n  return primes\nend", "    local res = {}\n\
    \    local i = 2\n    while i < n do\n        if is_prime(i) then\n          \
    \  table.insert(res, i)\n        end\n        i = i + 1\n    end\n    return res\n\
    end", "    if n < 2 then\n        return {}\n    end\n    local primes = {}\n\
    \    for i = 2, n - 1 do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend", "  local prime_numbers =\
    \ {}\n  for i = 2, n - 1 do\n    if is_prime(i) then\n      table.insert(prime_numbers,\
    \ i)\n    end\n  end\n  return prime_numbers\nend", "  if n <= 1 then return {}\
    \ end\n  local primes = {}\n  local function is_prime(n)\n    for k, _ in pairs(primes)\
    \ do\n      if n % k == 0 then return false end\n    end\n    return true\n  end\n\
    \  for i = 2, n do\n    if is_prime(i) then\n      table.insert(primes, i)\n \
    \   end\n  end\n  return primes\nend", "    local primes = {}\n    for i = 2,\
    \ n do\n        for j = 2, i do\n            if i % j == 0 then\n            \
    \    break\n            end\n            if j == i - 1 then\n                table.insert(primes,\
    \ i)\n            end\n        end\n    end\n    return primes\nend", "    --\
    \ code here\nend", "\tlocal numbers = {}\n\tlocal count = 0\n\tfor i = 2, n do\n\
    \t\tfor j = 2, i do\n\t\t\tif i % j == 0 then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\t\
    if j == i - 1 then\n\t\t\t\tnumbers[#numbers + 1] = i\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn numbers\nend", "\tlocal t = {}\n\tfor i = 1, n - 1 do\n\t\tlocal\
    \ l = {}\n\t\tlocal p = 1\n\t\tfor j = 1, i do\n\t\t\ttable.insert(l, j)\n\t\t\
    end\n\t\tfor k, v in ipairs(l) do\n\t\t\tif i % v == 0 then\n\t\t\t\tp = 0\n\t\
    \t\tend\n\t\tend\n\t\tif p == 1 then\n\t\t\ttable.insert(t, i)\n\t\tend\n\tend\n\
    \treturn t\nend", "    -- put your code here\nend\n```", "  local result = {}\n\
    \  if n < 2 then\n    return result\n  end\n  for i = 2, n do\n    if is_prime(i)\
    \ then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
  "  assert(n >= 0, \"n must be non-negative\")\n  local nums = {}\n  for i = 1, n\
    \ do\n    if is_prime(i) then\n      table.insert(nums, i)\n    end\n  end\n \
    \ return nums\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
