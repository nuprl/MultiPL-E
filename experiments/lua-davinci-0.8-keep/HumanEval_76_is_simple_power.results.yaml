name: HumanEval_76_is_simple_power
language: lua
results:
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x == 1 then return true end\n    local i = 1\n\
    \    while true do\n        local tmp = n ^ i\n        if tmp == x then return\
    \ true end\n        if tmp > x then return false end\n        i = i + 1\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return math.log(x) / math.log(n) % 1 == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipl_ib1b.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpipl_ib1b.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return math.sqrt(x) % 1 == 0 and math.log(x) / math.log(n)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxnu7y56w.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxnu7y56w.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7kcqlsv.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq7kcqlsv.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x ~= 1 and math.log(x, n) % 1 == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ey5245g.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4ey5245g.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local y = math.log(x, n)\n    return y % 1 == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxutsc73.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgxutsc73.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  for i = 2, x do\n\
    \    if i^x == n then return true end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ped40kl.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2ped40kl.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_muub0ff.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_muub0ff.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local result = false\n  local i = 0\n  while n^i <\
    \ x do\n    i = i + 1\n  end\n  if n^i == x then\n    result = true\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local result = true\n    if x == 1 then\n       \
    \ return true\n    end\n    if x == 0 then\n        return false\n    end\n  \
    \  for i = 2, x, 1 do\n        if math.floor(x ^ (1 / i)) == n then\n        \
    \    return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38gtxifx.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp38gtxifx.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.040 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local res = math.sqrt(x)\n  if res % 1 == 0 then\n\
    \    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local power = n\n    while power < x do\n       \
    \ power = power * n\n    end\n    return power == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpal36l8sf.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpal36l8sf.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return x^(1/n) == math.floor(x^(1/n))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2tocrh00.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2tocrh00.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  for i = 1, x do\n    if n^i == x then\n      return\
    \ true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxu4r5ix_.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxu4r5ix_.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x == 1 then return true end\n    for i = 2, x\
    \ do\n        if i*i == x then return true end\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x%math.log(x,n) == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0rv1jyip.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0rv1jyip.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local power = 0\n    for i = 1, 20 do\n        if\
    \ n ^ i == x then\n            power = i\n            break\n        end\n   \
    \ end\n    return power ~= 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ir3bbk3.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6ir3bbk3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local root = math.sqrt(x)\n    if root ~= math.floor(root)\
    \ then\n        return false\n    end\n    return math.pow(n, root) == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpasyo4pdb.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpasyo4pdb.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local x = tostring(x)\n  local n = tostring(n)\n  local\
    \ p = x:gsub(n, \"\")\n  if p == \"\" then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s6xiqan.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1s6xiqan.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqptqt7ag.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpqptqt7ag.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x == math.floor(x ^ (1 / n)) ^ n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxh2cmwz3.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxh2cmwz3.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    for i = 0, x do\n        if x == math.pow(n, i) then\n\
    \            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  local i = 2\n  while\
    \ n ^ i <= x do\n    if n ^ i == x then return true end\n    i = i + 1\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x == 1 or x == n or (x % n == 0 and is_simple_power(x\
    \ / n, n))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 0 then return n == 0 end\n  local b, r = x/n,\
    \ x%n\n  if r == 0 then\n    return is_simple_power(b, n)\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpowa22nlh.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpowa22nlh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return math.floor(math.log(x, n)) == math.log(x,\
    \ n)\nend\nreturn is_simple_power\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0mckqj74.lua:15: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  for i = 1, math.huge do\n    if x == math.pow(n, i)\
    \ then\n      return true\n    end\n    if x < math.pow(n, i) then\n      return\
    \ false\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqpp1vlb.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzqpp1vlb.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjn4swq4.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpyjn4swq4.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x == n^math.floor(math.log(x)/math.log(n))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcce_jtp0.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpcce_jtp0.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunjxid7i.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpunjxid7i.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local max_n = x^(1/n)\n    for i = 0, max_n do\n\
    \        if n^i == x then\n            return true\n        end\n    end\n   \
    \ return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    for i = 0, math.huge do\n        if n ^ i == x then\n\
    \            return true\n        end\n        if n ^ i > x then\n           \
    \ return false\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x > 0 and (x % n) == 0 and math.log(x) / math.log(n)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpult_2nk8.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpult_2nk8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\tif x == 1 then return true end\n\tif x%n ~= 0 then\
    \ return false end\n\treturn is_simple_power(x/n, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg8acqwe7.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpg8acqwe7.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x > 0 and math.log(x, n) % 1 == 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4o3epk0v.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4o3epk0v.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return x == n ^ (x:to_number() .. \"\"):match(\"\
    ^%d+\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2szj6xi1.lua:12:\
    \ attempt to index a number value (local 'x')\nstack traceback:\n\t/tmp/tmp2szj6xi1.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp2szj6xi1.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  for i = 0, x do\n    if math.pow(n, i) == x then\n\
    \      return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplp1mcobk.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmplp1mcobk.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return x == n ^ (math.log(x)/math.log(n))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmum4ng0.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzmum4ng0.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local i = 1\n  local res = n\n  while res < x do\n\
    \    i = i + 1\n    res = n^i\n  end\n  return res == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiu6g9uyv.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiu6g9uyv.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  local pow = n\n \
    \ while pow < x do\n    pow = pow * n\n  end\n  return pow == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x < 1 or n < 1 then return false end\n    if x\
    \ == 1 then return true end\n    local power = 1\n    for i = 1, 20 do\n     \
    \   power = power * n\n        if power == x then return true end\n    end\n \
    \   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\tlocal y = 1\n\twhile n^y <= x do\n\t\tif n^y == x then\n\
    \t\t\treturn true\n\t\tend\n\t\ty = y + 1\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpby1rc4bz.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpby1rc4bz.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return (x % (n ^ math.floor(math.log(x) / math.log(n)))\
    \ == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8we5tbt.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps8we5tbt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code goes here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o7garec.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp3o7garec.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then return x == 1 end\n  while n > 1 do\n\
    \    if n % x == 0 then\n      n = n / x\n    else\n      return false\n    end\n\
    \  end\n  return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscos2ieg.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscos2ieg.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local res = x ^ (1 / n)\n  local actual = math.floor(res)\n\
    \  return actual == res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0a0fcfz_.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0a0fcfz_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x == math.floor(math.log(x, n)) ^ n\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs31115.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4gs31115.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x == n ^ math.floor(math.log(x) / math.log(n))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8d26sj8.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpx8d26sj8.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return x == 1 or math.log(x, n) % 1 == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- body\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84t3m721.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp84t3m721.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local i = 1\n    while n^i < x do\n        i = i\
    \ + 1\n    end\n    return x == n^i\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmx0bfhrr.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmx0bfhrr.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x ~= 0 and n ~= 0 and math.log(x, n) % 1 ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppx9zl6kv.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppx9zl6kv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return math.log(x) / math.log(n) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsroircn1.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsroircn1.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  local xn = n\n  repeat\n\
    \    if xn == x then return true end\n    xn = xn * n\n  until xn > x\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local ans = math.log(x) / math.log(n)\n    return\
    \ (math.floor(ans) == ans)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphh7gfp2v.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphh7gfp2v.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x == n ^ (math.log(x) / math.log(n))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvi1hnhyi.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvi1hnhyi.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\treturn x == math.floor(x) and n == math.floor(n) and\
    \ math.log(x, n) == math.floor(math.log(x, n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuq2ey8j7.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuq2ey8j7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return math.log(x, n) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5g1qah3.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5g1qah3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local p = math.log(x) / math.log(n)\n  return math.floor(p)\
    \ == p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7235wzk.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpp7235wzk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local r = 1\n    for i = 1, x do\n        r = r *\
    \ n\n        if r == x then\n            return true\n        end\n    end\n \
    \   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvu2yv9v.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbvu2yv9v.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  local i = 1\n  while\
    \ true do\n    if n ^ i == x then return true\n    elseif n ^ i > x then return\
    \ false end\n    i = i + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 and x == 1 then return true end\n  local\
    \ power = n\n  while power <= x do\n    if power == x then return true end\n \
    \   power = power * n\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmor35sl.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvmor35sl.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local nn = math.log(x) / math.log(n)\n  return math.floor(nn)\
    \ == nn\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqse9ube.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjqse9ube.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x < 1 or n < 1 then return false end\n  local pow\
    \ = n\n  repeat\n    if pow == x then return true end\n    pow = pow * n\n  until\
    \ pow > x\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8ngcukc.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_8ngcukc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local a = math.log(x) / math.log(n)\n  if a % 1 ==\
    \ 0 then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekcl06w6.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpekcl06w6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Write your code here.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51zh0isn.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp51zh0isn.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  for i = 2, x do\n    if n^i == x then\n      return\
    \ true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4ir3739.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc4ir3739.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x == 1 or (x ~= 0 and x % n == 0 and is_simple_power(x\
    \ / n, n))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x == 1 then return true end\n    local i = 1\n\
    \    while i <= x do\n        if i == x then return true end\n        i = i *\
    \ n\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  if x == 0 then return\
    \ false end\n  return math.log(x, n) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return (math.sqrt(x) == n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvl1m9i1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqvl1m9i1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 and n == 1 then return true end\n  local\
    \ res = 0\n  for i = 0, 100 do\n    res = n ^ i\n    if res == x then return true\
    \ end\n    if res > x then return false end\n  end\n  return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x < 0 or n < 0 then return false end\n  if x ==\
    \ 0 and n == 0 then return false end\n  if x == 1 then return true end\n  local\
    \ y = 1\n  while y <= x do\n    if x == y then return true end\n    y = y * n\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiel0y7p1.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpiel0y7p1.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx697ccxa.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpx697ccxa.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local power = 0\n  local temp = x\n  if temp == 1 and\
    \ n == 1 then\n    return true\n  end\n  while temp > 1 do\n    if temp % n ==\
    \ 0 then\n      temp = temp / n\n      power = power + 1\n    else\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x == n ^ math.floor(math.log(x) / math.log(n))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local int = math.log(x) / math.log(n)\n  if math.floor(int)\
    \ == int then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6l8lq_21.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6l8lq_21.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x < n then return false end\n    while x > n do\n\
    \        x = x / n\n    end\n    return x == n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_xw27shz.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_xw27shz.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code goes here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1slux8ks.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1slux8ks.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vpbmeuj.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1vpbmeuj.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local n_log = math.log(x) / math.log(n)\n  return n_log\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglyjoj1g.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpglyjoj1g.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if (x == 1) then\n    return true\n  end\n  if (x <\
    \ 1) then\n    return false\n  end\n  while (x % n == 0) do\n    x = x / n\n \
    \ end\n  return x == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x == n ^ math.floor(math.log(x)/math.log(n))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 and n == 1 then return true end\n  if n ==\
    \ 1 then return false end\n  local y = n\n  while y < x do\n    y = y * n\n  end\n\
    \  return y == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmd5tsil.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgmd5tsil.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- if x is 1 or x is n\n  if x == 1 or x == n then\n\
    \    return true\n  end\n  -- if x is larger than n, divide x by n\n  while x\
    \ > n do\n    x = x / n\n  end\n  -- if x is equal to n, return true\n  if x ==\
    \ n then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return x == math.pow(n, math.log(x) / math.log(n))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfoyoryr7.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfoyoryr7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  local remainder =\
    \ x\n  while remainder > 1 do\n    remainder = remainder / n\n    if remainder\
    \ == 1 then return true end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 and n == 1 then return true end\n  for i\
    \ = 0, x do\n    if n ^ i == x then return true end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local x1 = math.log(x, n)\n    return math.floor(x1)\
    \ == x1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxn74agni.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxn74agni.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x==1 then return true end\n    if n==1 or n==0\
    \ then return false end\n    if x<n then return false end\n    while x>1 do\n\
    \        if x%n~=0 then return false end\n        x=x/n\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local y = math.log(x, n)\n  local z = math.floor(y)\n\
    \  return y == z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rwttibk.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5rwttibk.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  for i = 0, x, 1 do\n    if math.pow(n, i) == x then\n\
    \      return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 and n ~= 1 then return false end\n  local\
    \ int = x\n  while int > 1 do\n    if int%n == 0 then\n      int = int/n\n   \
    \ else\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5z91xg0.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg5z91xg0.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x == 1 then return true end\n    local i = 0\n\
    \    while x%n == 0 do\n        x = x/n\n        i = i + 1\n    end\n    return\
    \ x == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr05y9pj7.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpr05y9pj7.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\treturn x^(1/n) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5uc0czur.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5uc0czur.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return (math.log(x)/math.log(n))%1 == 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhv1pv5g.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnhv1pv5g.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x == 0 then return false end\n    local a = math.log(x)\
    \ / math.log(n)\n    return a == math.floor(a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvul50m7s.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvul50m7s.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1xrc8ri.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpw1xrc8ri.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then return x == 1 end\n  local pow = n\n\
    \  while pow < x do\n    pow = pow * n\n  end\n  return pow == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxxv2bbc.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppxxv2bbc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local a = 1\n  while a <= x do\n    if a == x then\n\
    \      return true\n    end\n    a = a * n\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  for i = 1, x do\n    if x == math.pow(n, i) then\n\
    \      return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgwer66e.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvgwer66e.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x / n ^ (math.log(x) / math.log(n)) == 1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kmkfu38.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3kmkfu38.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  local tmp = 1\n \
    \ while tmp < x do\n    tmp = tmp * n\n    if tmp == x then return true end\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local exp = 1\n  while true do\n    local res = n ^\
    \ exp\n    if res == x then\n      return true\n    elseif res > x then\n    \
    \  return false\n    end\n    exp = exp + 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswhfasyo.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpswhfasyo.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Good luck!\n  if x == 1 then return true end\n \
    \ if n < 1 then return false end\n  local i = 1\n  while n^i <= x do\n    if n^i\
    \ == x then return true end\n    i = i + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpknpb5o_r.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpknpb5o_r.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local a = n ^ x\n  return a == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpek8b57n1.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpek8b57n1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local pow = 1\n    for i = 1, 20 do\n        pow\
    \ = pow * n\n        if pow == x then\n            return true\n        end\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47k4bqph.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp47k4bqph.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x == 0 then return false end\n    local y = 1\n\
    \    while y < x do\n        y = y * n\n    end\n    return y == x\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5_a3w3r.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpl5_a3w3r.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x ~= 1 and (x == n or is_simple_power(x / n,\
    \ n))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi1_euz7p.lua:12:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpi1_euz7p.lua:12: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpi1_euz7p.lua:12: in upvalue 'is_simple_power'\n\t/tmp/tmpi1_euz7p.lua:12:\
    \ in upvalue 'is_simple_power'\n\t/tmp/tmpi1_euz7p.lua:12: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpi1_euz7p.lua:12: in upvalue 'is_simple_power'\n\t/tmp/tmpi1_euz7p.lua:12:\
    \ in upvalue 'is_simple_power'\n\t/tmp/tmpi1_euz7p.lua:12: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpi1_euz7p.lua:12: in upvalue 'is_simple_power'\n\t/tmp/tmpi1_euz7p.lua:12:\
    \ in upvalue 'is_simple_power'\n\t...\n\t/tmp/tmpi1_euz7p.lua:12: in local 'candidate'\n\
    \t/tmp/tmpi1_euz7p.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.150\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local is_simple_power = false\n    while x >= 1 do\n\
    \        if x == 1 then\n            is_simple_power = true\n            break\n\
    \        end\n        if x % n ~= 0 then\n            break\n        end\n   \
    \     x = x / n\n    end\n    return is_simple_power\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local res = false\n  while n < x do\n    n = n * n\n\
    \  end\n  return n == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpya9pcc9p.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpya9pcc9p.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then return false end\n  local r = x/n\n\
    \  if r%1 == 0 then\n    return is_simple_power(r, n)\n  else\n    return r ==\
    \ 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpob6eo_cq.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpob6eo_cq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local function log_b(val, base)\n    return math.log(val)\
    \ / math.log(base)\n  end\n  return math.floor(log_b(x, n)) == log_b(x, n)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaezu60wp.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaezu60wp.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local p = 1\n  while p < x do\n    p = p * n\n  end\n\
    \  return p == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphzt3_lc5.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmphzt3_lc5.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_nqywpw.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpw_nqywpw.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local p = math.pow(n, math.floor(math.log(x)/math.log(n)))\n\
    \  return p == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  for i = 1, x do\n    if x == n ^ i then\n      return\
    \ true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yqmlmt2.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0yqmlmt2.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local y = math.floor(math.log(x) / math.log(n))\n \
    \ return x == n ^ y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x == math.pow(n, math.log(x) / math.log(n))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3cxqu19.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph3cxqu19.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local m = n\n  while m * n < x do\n    m = m * n\n\
    \  end\n  return m == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3erkdb7z.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3erkdb7z.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5a6agvfp.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp5a6agvfp.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\tlocal solution = n^math.log(x)/math.log(n)\n\tif x\
    \ == solution then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrq7ozms.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwrq7ozms.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local max = x\n  while max > 1 do\n    if x == max\
    \ then\n      return true\n    end\n    max = max / n\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvw3verj.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwvw3verj.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x == 1 then return true end\n    if n == 1 then\
    \ return x == 1 end\n    local ret = x % n == 0\n    if ret then return is_simple_power(x\
    \ / n, n) end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x == n^(math.floor(math.log(x)/math.log(n)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x < 1 or n < 1 then return false end\n  if x ==\
    \ 1 and n == 1 then return true end\n  if x == 1 then return false end\n  if n\
    \ == 1 then return true end\n  local i = 1\n  while i <= x do\n    if i == x then\
    \ return true end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ont3d1_.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3ont3d1_.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x%n == 0 and x ~= 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmii8ywl.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppmii8ywl.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return x == n ^ math.floor(math.log(x) / math.log(n))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\t-- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyt1skfcy.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpyt1skfcy.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1ho32av.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpa1ho32av.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzh6bxbo.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplzh6bxbo.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    for i = 0, x, 1 do\n        if x == n^i then\n  \
    \          return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    for i = 2, x do\n        if n ^ i == x then\n   \
    \         return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa9pvu9g.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsa9pvu9g.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x == 0 then return n == 0 end\n    return x %\
    \ n == 0 and x == n^(math.log(x)/math.log(n))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwem6iexu.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwem6iexu.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x == 1 then return true end\n    if n == 1 then\
    \ return false end\n    local count = 2\n    local result = n * n\n    while result\
    \ <= x do\n        if result == x then return true end\n        result = result\
    \ * n\n        count = count + 1\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return math.log(x, n) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8qevh4r.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpp8qevh4r.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    for i = 0, x do\n        if n ^ i == x then\n   \
    \         return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\tfor i = 0, x do\n\t\tif x == n ^ i then\n\t\t\treturn\
    \ true\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvl785eua.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpvl785eua.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_ywjh4d.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpw_ywjh4d.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x == 1 then return true end\n    if x % n ~= 0\
    \ then return false end\n    return is_simple_power(x / n, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcldzia5.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmppcldzia5.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local y = math.log(x) / math.log(n)\n  local i, f =\
    \ math.modf(y)\n  return f == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxm71hlcl.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxm71hlcl.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local power = 0\n  while true do\n    if n ^ power\
    \ == x then\n      return true\n    elseif n ^ power > x then\n      return false\n\
    \    end\n    power = power + 1\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  for i = 1, 10 do\n    if n ^ i == x then\n      return\
    \ true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr57fpdty.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr57fpdty.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5sftppz.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmps5sftppz.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x < 1 or n < 1 then return false end\n  while true\
    \ do\n    if x == 1 then return true end\n    if x % n ~= 0 then return false\
    \ end\n    x = x / n\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x == math.pow(n, math.floor(math.log(x) / math.log(n)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x == math.floor(x / n) * n and x / n == math.floor(x\
    \ / n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6qfkh1u.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo6qfkh1u.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local power = n\n  while power < x do\n    power =\
    \ power * n\n  end\n  return power == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdccu3et0.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdccu3et0.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return math.log(x) / math.log(n) % 1 == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvbua_rl.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqvbua_rl.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x==1 then return true end\n    for i=1,math.log(x)/math.log(n)\
    \ do\n        if n^i==x then return true end\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local powered_n = n\n    while powered_n < x do\n\
    \        powered_n = powered_n * n\n    end\n    return powered_n == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkr0uh3e.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwkr0uh3e.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local r = (math.log(x) / math.log(n))\n  return math.floor(r)\
    \ == r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaoq6s9tl.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaoq6s9tl.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppp2j0ba9.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmppp2j0ba9.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\tif x == 1 then return true end\n\tif x == 0 then return\
    \ false end\n\tif x % n ~= 0 then return false end\n\tlocal nn = n\n\twhile nn\
    \ < x do\n\t\tnn = nn * n\n\tend\n\treturn nn == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x == 1 then return true end\n    while x % n ==\
    \ 0 do\n        x = x / n\n    end\n    return x == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local k = math.log(x) / math.log(n)\n    return k\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7ek21xq.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy7ek21xq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return (n ~= 0 and n ~= 1 and x > 0 and math.log(x)\
    \ / math.log(n) % 1 == 0) or (x == 1 and n == 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwtkuywop.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpwtkuywop.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local exp = 1\n  while exp <= math.log(x) / math.log(n)\
    \ do\n    if n ^ exp == x then\n      return true\n    end\n    exp = exp + 1\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbucauaug.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbucauaug.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\tlocal i = 0\n\twhile true do\n\t\tif n^i == x then\n\
    \t\t\treturn true\n\t\telseif n^i > x then\n\t\t\treturn false\n\t\tend\n\t\t\
    i = i + 1\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local i = 0\n  while true do\n    local result = math.pow(n,\
    \ i)\n    if x == result then\n      return true\n    elseif result > x then\n\
    \      return false\n    end\n    i = i + 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpez12r0ro.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpez12r0ro.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local q = x/n\n    if math.floor(q)==q then\n   \
    \     if q<=1 then\n            return true\n        else\n            return\
    \ is_simple_power(q, n)\n        end\n    else\n        return false\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wyp9aht.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8wyp9aht.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if (x == 1) then\n    return true\n  end\n  return\
    \ x % n == 0 and is_simple_power(x / n, n)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return x%math.log(x, n)==0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h8rpiuc.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4h8rpiuc.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gwtd4fs.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp0gwtd4fs.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n == 0 and x == 1 then return true end\n    if\
    \ n == 0 and x ~= 1 then return false end\n    if n < 0 then n = n * -1 end\n\
    \    local i = 1\n    local tmp = n\n    while i <= x do\n        if tmp == x\
    \ then return true end\n        if tmp > x then return false end\n        tmp\
    \ = tmp * n\n        i = i + 1\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxibusk7q.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxibusk7q.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local n1 = math.log(x) / math.log(n)\n    return\
    \ math.ceil(n1) == math.floor(n1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8944j_c.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu8944j_c.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if x == 0 then return false end\n    local y = n^(math.log(x)/math.log(n))\n\
    \    return y % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzltj1wb.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqzltj1wb.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6k5jtpst.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp6k5jtpst.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    if n == 1 then\n        return x == 1\n    end\n\
    \    if x == n then\n        return true\n    end\n    if n > x then\n       \
    \ return false\n    end\n    local r = x / n\n    return r == math.floor(r) and\
    \ is_simple_power(r, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpygf0e2py.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpygf0e2py.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local i = 1\n  while x >= n do\n    if x == n then\n\
    \      return true\n    end\n    x = x / n\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4dtpyod.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw4dtpyod.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n\treturn x==1 or (x % (n ^ math.floor(math.log(x)/math.log(n)))\
    \ == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptsqao4iy.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptsqao4iy.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local i = 1\n  while x > 1 do\n    x = x / n\n    if\
    \ x == 1 then\n      return true\n    end\n    if x % 1 ~= 0 then\n      return\
    \ false\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpody6xvgv.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpody6xvgv.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x == math.huge and n ~= 1 and n < 0 or n ~=\
    \ 0 and x ~= 0 and x == n ^ (math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5nww4rn.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq5nww4rn.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  for i = 1, x do\n    if math.pow(n, i) == x then\n\
    \      return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4yl2s8v.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz4yl2s8v.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    --your code here\n    if x == n ^ math.log(x) / math.log(n)\
    \ then\n      return true\n    else\n      return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipui229g.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpipui229g.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    local z = n\n    while z < x do\n        z = z *\
    \ n\n    end\n    return z == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8v79j2db.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8v79j2db.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  for i = 0, x do\n    if n ^ i == x then\n      return\
    \ true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    -- some code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp69ym0j_j.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp69ym0j_j.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    for i = 1, x do\n        if n ^ i == x then\n   \
    \         return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ynxh6pb.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4ynxh6pb.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return x ~= 1 and n ~= 1 and x % n == 0 and x % (n\
    \ ^ 2) ~= 0 and x / n == n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd89k2gck.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd89k2gck.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return x == math.pow(n, math.floor(math.log(x) /\
    \ math.log(n)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if (x < 0) then\n    x = x * -1\n  end\n  local i =\
    \ 0\n  local nx = n^i\n  while (nx <= x) do\n    if (nx == x) then\n      return\
    \ true\n    end\n    i = i + 1\n    nx = n^i\n  end\n  return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local xn = n\n  while xn < x do\n    xn = xn * n\n\
    \  end\n  return xn == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzt4fswhk.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzt4fswhk.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x < 1 or n < 1 then return false end\n  local i\
    \ = 0\n  while true do\n    local p = n ^ i\n    if p == x then return true end\n\
    \    if p > x then return false end\n    i = i + 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return x == 1 or x == n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0miaay13.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0miaay13.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n    return (x == n ^ (math.log(x) / math.log(n))) and\
    \ (x ~= 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkcb8eio.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkkcb8eio.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  local k = math.log(x) / math.log(n)\n  return math.floor(k)\
    \ == k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8g5w5js1.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8g5w5js1.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
