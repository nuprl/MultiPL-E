name: HumanEval_161_solve
language: lua
prompt: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string\
  \ contains no letters, reverse the string.\n-- The function should return the resulted\
  \ string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"ab\") = \"AB\"\
  \n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
  \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
  \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
  \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
  \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
  \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if #s == 0 then return s end\n    local r = \"\"\n    for i = 1,\
    \ #s do\n        local a = s:sub(i, i)\n        if a:match(\"%a\") then\n    \
    \        if a == a:upper() then r = r .. a:lower() else r = r .. a:upper() end\n\
    \        else\n            r = r .. a\n        end\n    end\n    return r\nend",
  "    local letters = {}\n    local non_letters = {}\n    local idx = 1\n    local\
    \ i = 1\n    while i <= #s do\n        local c = s:sub(i, i)\n        if c:match(\"\
    %a\") then\n            letters[idx] = c\n            idx = idx + 1\n        else\n\
    \            non_letters[#non_letters + 1] = c\n        end\n        i = i + 1\n\
    \    end\n    local pos = 1\n    idx = 1\n    if #letters > 0 then\n        while\
    \ idx <= #letters do\n            local c = letters[idx]\n            local uc\
    \ = c:upper()\n            local lc = c:lower()\n            if c == uc then\n\
    \                s = s:sub(1, pos - 1) .. lc .. s:sub(pos + 1)\n            else\n\
    \                s = s:sub(1, pos - 1) .. uc .. s:sub(pos + 1)\n            end\n\
    \            pos = pos + 1\n            idx = idx + 1\n        end\n    else\n\
    \        s = s:reverse()\n    end\n    return s\nend", "    return (s:gsub(\"\
    [%a]\", {[\"a\"] = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\", [\"d\"] = \"D\", [\"\
    e\"] = \"E\", [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"] = \"H\", [\"i\"] = \"\
    I\", [\"j\"] = \"J\", [\"k\"] = \"K\", [\"l\"] = \"L\", [\"m\"] = \"M\", [\"n\"\
    ] = \"N\", [\"o\"] = \"O\", [\"p\"] = \"P\", [\"q\"] = \"Q\", [\"r\"] = \"R\"\
    , [\"s\"] = \"S\", [\"t\"] = \"T\", [\"u\"] = \"U\", [\"v\"] = \"V\", [\"w\"]\
    \ = \"W\", [\"x\"] = \"X\", [\"y\"] = \"Y\", [\"z\"] = \"Z\", [\"A\"] = \"a\"\
    , [\"B\"] = \"b\", [\"C\"] = \"c\", [\"D\"] = \"d\", [\"E\"] = \"e\", [\"F\"]\
    \ = \"f\", [\"G\"] = \"g\", [\"H\"] = \"h\", [\"I\"] = \"i\", [\"J\"] = \"j\"\
    , [\"K\"] = \"k\", [\"L\"] = \"l\", [\"M\"] = \"m\", [\"N\"] = \"n\", [\"O\"]\
    \ = \"o\", [\"P\"] = \"p\", [\"Q\"] = \"q\", [\"R\"] = \"r\", [\"S\"] = \"s\"\
    , [\"T\"] = \"t\", [\"U\"] = \"u\", [\"V\"] = \"v\", [\"W\"] = \"w\", [\"X\"]\
    \ = \"x\", [\"Y\"] = \"y\", [\"Z\"] = \"z\" }))\nend", "  return (string.gsub(s,\
    \ \"[%a]\", {a = \"A\", b = \"B\", c = \"C\", d = \"D\", e = \"E\", f = \"F\"\
    , g = \"G\", h = \"H\", i = \"I\", j = \"J\", k = \"K\", l = \"L\", m = \"M\"\
    , n = \"N\", o = \"O\", p = \"P\", q = \"Q\", r = \"R\", s = \"S\", t = \"T\"\
    , u = \"U\", v = \"V\", w = \"W\", x = \"X\", y = \"Y\", z = \"Z\", A = \"a\"\
    , B = \"b\", C = \"c\", D = \"d\", E = \"e\", F = \"f\", G = \"g\", H = \"h\"\
    , I = \"i\", J = \"j\", K = \"k\", L = \"l\", M = \"m\", N = \"n\", O = \"o\"\
    , P = \"p\", Q = \"q\", R = \"r\", S = \"s\", T = \"t\", U = \"u\", V = \"v\"\
    , W = \"w\", X = \"x\", Y = \"y\", Z = \"z\"}))\nend", "    local ss = {}\n  \
    \  for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match(\"%a\"\
    ) then\n            if c:match(\"%u\") then\n                c = c:lower()\n \
    \           else\n                c = c:upper()\n            end\n        end\n\
    \        ss[#ss + 1] = c\n    end\n    if #ss > 0 then\n        return table.concat(ss)\n\
    \    else\n        return s:reverse()\n    end\nend", "  local c = {}\n  for i\
    \ = 1, #s do\n    local ci = s:sub(i, i)\n    if ci:match(\"%a\") then\n     \
    \ c[i] = ci:lower() == ci and ci:upper() or ci:lower()\n    else\n      c[i] =\
    \ ci\n    end\n  end\n  return #c > 0 and table.concat(c) or s:reverse()\nend",
  "  local t = {}\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c:match(\"\
    %a\") then\n      c = c:lower() == c and c:upper() or c:lower()\n    end\n   \
    \ t[#t + 1] = c\n  end\n  return #t > 0 and table.concat(t) or s:reverse()\nend",
  "\tlocal t, s2, s3 = {}, \"\", \"\"\n\tfor i = 1, string.len(s) do\n\t\tif string.match(s[i],\
    \ \"%l\") then\n\t\t\tt[#t + 1] = string.lower(s[i])\n\t\tend\n\tend\n\tif #t\
    \ == 0 then \n\t\tfor i = 1, string.len(s) do\n\t\t\tt[#t + 1] = s[i]\n\t\tend\n\
    \tend\n\tfor i = #t, 1, -1 do\n\t\ts2 = s2 .. t[i]\n\tend\n\tfor i = 1, string.len(s)\
    \ do\n\t\tif string.match(s[i], \"%l\") then\n\t\t\ts3 = s3 .. s2[i]\n\t\telse\n\
    \t\t\ts3 = s3 .. s[i]\n\t\tend\n\tend\n\treturn s3\nend", "    local new_s = \"\
    \"\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == c:upper()\
    \ then\n            new_s = new_s .. c:lower()\n        elseif c == c:lower()\
    \ then\n            new_s = new_s .. c:upper()\n        else\n            new_s\
    \ = new_s .. c\n        end\n    end\n    return #new_s > 0 and new_s or s:reverse()\n\
    end", "  return s:gsub('[a-zA-Z]',function(c) return c:lower() == c and c:upper()\
    \ or c:lower() end)\nend", "  return s:gsub(\"%a\",function(c) return c:lower()==c\
    \ and c:upper() or c:lower() end)\nend", "\treturn (s:gsub(\"%a\", {[\"a\"]=\"\
    A\",[\"b\"]=\"B\",[\"c\"]=\"C\",[\"d\"]=\"D\",[\"e\"]=\"E\",[\"f\"]=\"F\",[\"\
    g\"]=\"G\",[\"h\"]=\"H\",[\"i\"]=\"I\",[\"j\"]=\"J\",[\"k\"]=\"K\",[\"l\"]=\"\
    L\",[\"m\"]=\"M\",[\"n\"]=\"N\",[\"o\"]=\"O\",[\"p\"]=\"P\",[\"q\"]=\"Q\",[\"\
    r\"]=\"R\",[\"s\"]=\"S\",[\"t\"]=\"T\",[\"u\"]=\"U\",[\"v\"]=\"V\",[\"w\"]=\"\
    W\",[\"x\"]=\"X\",[\"y\"]=\"Y\",[\"z\"]=\"Z\",[\"A\"]=\"a\",[\"B\"]=\"b\",[\"\
    C\"]=\"c\",[\"D\"]=\"d\",[\"E\"]=\"e\",[\"F\"]=\"f\",[\"G\"]=\"g\",[\"H\"]=\"\
    h\",[\"I\"]=\"i\",[\"J\"]=\"j\",[\"K\"]=\"k\",[\"L\"]=\"l\",[\"M\"]=\"m\",[\"\
    N\"]=\"n\",[\"O\"]=\"o\",[\"P\"]=\"p\",[\"Q\"]=\"q\",[\"R\"]=\"r\",[\"S\"]=\"\
    s\",[\"T\"]=\"t\",[\"U\"]=\"u\",[\"V\"]=\"v\",[\"W\"]=\"w\",[\"X\"]=\"x\",[\"\
    Y\"]=\"y\",[\"Z\"]=\"z\"}))\nend", "  if s:match(\"%a\") then\n    return s:gsub(\"\
    %a\",\n    function(ch)\n      return ch:upper() == ch and ch:lower() or ch:upper()\n\
    \    end)\n  else\n    return s:reverse()\n  end\nend", "    local r = s:gsub(\"\
    %a\",\n        function(c)\n            if c:upper() == c then\n             \
    \   return c:lower()\n            else\n                return c:upper()\n   \
    \         end\n        end)\n    if r == s then\n        return r:reverse()\n\
    \    else\n        return r\n    end\nend", "  return s:gsub('%a', function(c)\
    \ return c == c:upper() and c:lower() or c:upper() end)\nend", "    local res\
    \ = {}\n    for k, v in ipairs(s:lower():gmatch(\"[a-z]\")) do\n        res[k]\
    \ = s:find(v) and (v:match(\"%u\") and v:lower() or v:upper()) or v\n    end\n\
    \    return #res > 0 and table.concat(res) or s:reverse()\nend", "  return s:gsub(\"\
    [a-zA-Z]\", function(c) return c:lower() == c and c:upper() or c:lower() end)\n\
    end", "    s = string.gsub(s, \"%a\", function(c) return c:lower() == c and c:upper()\
    \ or c:lower() end)\n    return s:reverse()\nend", "  return string.gsub(s,\"\
    %a\",function(x) return x == x:upper() and x:lower() or x:upper() end)\nend",
  "  if s:match('%a') then\n    for c in s:gmatch('.') do\n      if c:match('%a')\
    \ then\n        s = s:gsub(c, c:lower() == c and c:upper() or c:lower())\n   \
    \   end\n    end\n  else\n    s = s:reverse()\n  end\n  return s\nend", "    --\
    \ your code goes here\n    -- using string.reverse()\n    local str_list = {}\n\
    \    for i=1,#s do\n        if s:sub(i,i):find(\"%a\") ~= nil then\n         \
    \   if s:sub(i,i):lower() == s:sub(i,i) then\n                str_list[#str_list+1]\
    \ = s:sub(i,i):upper()\n            else\n                str_list[#str_list+1]\
    \ = s:sub(i,i):lower()\n            end\n        else\n            str_list[#str_list+1]\
    \ = s:sub(i,i)\n        end\n    end\n    str_list = table.concat(str_list, \"\
    \")\n    return str_list:reverse()\nend", "  local replace = {['a'] = 'A', ['b']\
    \ = 'B', ['c'] = 'C', ['d'] = 'D', ['e'] = 'E', ['f'] = 'F', ['g'] = 'G', ['h']\
    \ = 'H', ['i'] = 'I', ['j'] = 'J', ['k'] = 'K', ['l'] = 'L', ['m'] = 'M', ['n']\
    \ = 'N', ['o'] = 'O', ['p'] = 'P', ['q'] = 'Q', ['r'] = 'R', ['s'] = 'S', ['t']\
    \ = 'T', ['u'] = 'U', ['v'] = 'V', ['w'] = 'W', ['x'] = 'X', ['y'] = 'Y', ['z']\
    \ = 'Z', ['A'] = 'a', ['B'] = 'b', ['C'] = 'c', ['D'] = 'd', ['E'] = 'e', ['F']\
    \ = 'f', ['G'] = 'g', ['H'] = 'h', ['I'] = 'i', ['J'] = 'j', ['K'] = 'k', ['L']\
    \ = 'l', ['M'] = 'm', ['N'] = 'n', ['O'] = 'o', ['P'] = 'p', ['Q'] = 'q', ['R']\
    \ = 'r', ['S'] = 's', ['T'] = 't', ['U'] = 'u', ['V'] = 'v', ['W'] = 'w', ['X']\
    \ = 'x', ['Y'] = 'y', ['Z'] = 'z'}\n  local res = ''\n  for i = 1, #s do\n   \
    \ if replace[s:sub(i, i)] then\n      res = res .. replace[s:sub(i, i)]\n    else\n\
    \      res = res .. s:sub(i, i)\n    end\n  end\n  return res\nend", "    local\
    \ res = {}\n    for i = 1, #s do\n        if string.match(s[i], \"%l\") then\n\
    \            if string.lower(s[i]) == s[i] then\n                res[i] = string.upper(s[i])\n\
    \            else\n                res[i] = string.lower(s[i])\n            end\n\
    \        else\n            res[i] = s[i]\n        end\n    end\n    return table.concat(res)\n\
    end", "    local ans = {}\n    local count = 0\n    for ch in s:gmatch\".\" do\n\
    \        if ch:match\"%a\" then\n            count = count + 1\n            ans[#ans+1]\
    \ = ch:upper() == ch and ch:lower() or ch:upper()\n        else\n            ans[#ans+1]\
    \ = ch\n        end\n    end\n    return count == 0 and s:reverse() or table.concat(ans)\n\
    end", "\tlocal res\n\tif string.match(s, \"%l\") then\n\t\tres = string.gsub(s,\
    \ \"%l\", function(x)\n\t\t\treturn string.upper(x)\n\t\tend)\n\t\tres = string.gsub(res,\
    \ \"%u\", function(x)\n\t\t\treturn string.lower(x)\n\t\tend)\n\telse\n\t\tres\
    \ = string.reverse(s)\n\tend\n\treturn res\nend", "  if not s:match(\"%l\") then\n\
    \    return s:reverse()\n  end\n  return s:gsub(\"(%a)\", function(c) return c\
    \ == c:upper() and c:lower() or c:upper() end)\nend", "  return s:gsub(\"%l\"\
    ,function(c)\n    return c:upper()==c and c:lower() or c:upper()\n  end)\nend",
  "  if string.find(s, \"[%a]\") then\n    local new_s = \"\"\n    for c in s:gmatch(\"\
    .\") do\n      if c:match(\"%l\") then\n        new_s = new_s .. c:upper()\n \
    \     elseif c:match(\"%u\") then\n        new_s = new_s .. c:lower()\n      else\n\
    \        new_s = new_s .. c\n      end\n    end\n    return new_s\n  else\n  \
    \  return s:reverse()\n  end\nend", "    local count = 0\n    local n = #s\n \
    \   local res = ''\n    for i = 1, n do\n        local c = s:sub(i, i)\n     \
    \   if c:match('%a') then\n            count = count + 1\n            if c:match('%u')\
    \ then\n                res = res .. c:lower()\n            else\n           \
    \     res = res .. c:upper()\n            end\n        else\n            res =\
    \ res .. c\n        end\n    end\n    if count == 0 then\n        res = s:reverse()\n\
    \    end\n    return res\nend", "  return (s:gsub(\"%a\", function(ch)\n    if\
    \ ch:lower() == ch then\n      return ch:upper()\n    else\n      return ch:lower()\n\
    \    end\n  end))\nend", "\treturn (string.gsub(s, \"%a\", \n\t\tfunction(c)\n\
    \t\t\tif string.match(c, \"%a\") then\n\t\t\t\tif string.match(c, \"%l\") then\n\
    \t\t\t\t\treturn string.upper(c)\n\t\t\t\telse\n\t\t\t\t\treturn string.lower(c)\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\t))\nend", "  local t = {}\n  for i = 1, #s\
    \ do\n    local c = s:sub(i, i)\n    if c:match('%a') then\n      if c:match('%u')\
    \ then\n        c = c:lower()\n      else\n        c = c:upper()\n      end\n\
    \    end\n    t[#t + 1] = c\n  end\n  return #t == 0 and s:reverse() or table.concat(t)\n\
    end", "\tlocal str = {}\n\tlocal res = {}\n\tfor v in s:gmatch(\"%a\") do table.insert(str,\
    \ v) end\n\tif #str == 0 then\n\t\tfor v in s:gmatch(\"%S\") do table.insert(res,\
    \ v) end\n\t\treturn table.concat(res):reverse()\n\tend\n\tfor v in s:gmatch(\"\
    %S\") do table.insert(res, v) end\n\tfor i = 1, #res do\n\t\tfor k, v in pairs(str)\
    \ do\n\t\t\tif res[i] == v then res[i] = res[i]:upper() end\n\t\t\tif res[i] ==\
    \ v:upper() then res[i] = res[i]:lower() end\n\t\tend\n\tend\n\treturn table.concat(res)\n\
    end", "    return (s:gsub(\"%a\",function(x)\n        return x == x:upper() and\
    \ x:lower() or x:upper() end))\nend", "  local bool = {}\n  for i=1, string.len(s)\
    \ do\n    if string.find(s, \"%a\") then\n      bool[i] = true\n    else\n   \
    \   bool[i] = false\n    end\n  end\n  local new = \"\"\n  for i=1, string.len(s)\
    \ do\n    if bool[i] then\n      new = new .. string.char(string.byte(s[i])^32)\n\
    \    else\n      new = new .. s[i]\n    end\n  end\n  return new\nend", "    s\
    \ = s:gsub(\"([%a])\", function(c)\n        if c:lower() == c then\n         \
    \   return c:upper()\n        else\n            return c:lower()\n        end\n\
    \    end)\n    if s:lower() == s then\n        return s:reverse()\n    end\n \
    \   return s\nend", "  local str = \"\"\n  for i = #s, 1, -1 do\n    local ch\
    \ = s:sub(i, i)\n    if ch:match(\"%a\") then\n      str = str .. ch:reverse()\n\
    \    else\n      str = str .. ch\n    end\n  end\n  return str\nend", "  if not\
    \ s:match(\"%a\") then\n    return s:reverse()\n  end\n  return s:gsub(\"[a-zA-Z]\"\
    , function(x)\n    return x:lower() == x and x:upper() or x:lower()\n  end)\n\
    end", "    local t, r = {}, ''\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == c:upper() then\n            t[i] = c:lower()\n        elseif\
    \ c == c:lower() then\n            t[i] = c:upper()\n        else\n          \
    \  t[i] = c\n        end\n    end\n    for i = #t, 1, -1 do\n        r = r ..\
    \ t[i]\n    end\n    return r\nend", "    local r = {}\n    for c in s:gmatch('.')\
    \ do\n        if c:match('%a') then\n            if c:match('%l') then r[#r+1]\
    \ = c:upper()\n            else r[#r+1] = c:lower() end\n        else r[#r+1]\
    \ = c end\n    end\n    return #r>0 and table.concat(r) or s:reverse()\nend",
  "    local t = {}\n    for c in s:gmatch(\"%a\") do\n        t[#t+1] = c:lower()\
    \ == c and c:upper() or c:lower()\n    end\n    local t2 = {}\n    for i = #t,\
    \ 1, -1 do\n        t2[#t2+1] = t[i]\n    end\n    return #t == 0 and s:reverse()\
    \ or table.concat(t2)\nend", "    local t = {}\n    for i = 1, #s do\n       \
    \ local c = s:sub(i, i)\n        if c:match(\"%a\") then\n            t[#t + 1]\
    \ = c:lower() == c and c:upper() or c:lower()\n        else\n            t[#t\
    \ + 1] = c\n        end\n    end\n    return #t == 0 and s:reverse() or table.concat(t)\n\
    end", "    local s2 = \"\"\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        if c == c:upper() then\n            s2 = s2 .. c:lower()\n        elseif\
    \ c == c:lower() then\n            s2 = s2 .. c:upper()\n        else\n      \
    \      s2 = s2 .. c\n        end\n    end\n    if #s2 == #s then\n        return\
    \ s2\n    else\n        return s:reverse()\n    end\nend", "    -- TODO: Write\
    \ your code here\n    if(string.find(s,\"%l\")) then\n        local pattern =\
    \ \"(%l)\"\n        local p = string.gsub(s,pattern,string.upper)\n        return\
    \ string.gsub(p,pattern,string.lower)\n    else\n        return string.reverse(s)\n\
    \    end\nend", "\tif s:match(\"%a\") then\n\t\treturn s:gsub(\"(%a)\", {[\"a\"\
    ] = \"A\", [\"A\"] = \"a\", [\"b\"] = \"B\", [\"B\"] = \"b\", [\"c\"] = \"C\"\
    , [\"C\"] = \"c\", [\"d\"] = \"D\", [\"D\"] = \"d\", [\"e\"] = \"E\", [\"E\"]\
    \ = \"e\", [\"f\"] = \"F\", [\"F\"] = \"f\", [\"g\"] = \"G\", [\"G\"] = \"g\"\
    , [\"h\"] = \"H\", [\"H\"] = \"h\", [\"i\"] = \"I\", [\"I\"] = \"i\", [\"j\"]\
    \ = \"J\", [\"J\"] = \"j\", [\"k\"] = \"K\", [\"K\"] = \"k\", [\"l\"] = \"L\"\
    , [\"L\"] = \"l\", [\"m\"] = \"M\", [\"M\"] = \"m\", [\"n\"] = \"N\", [\"N\"]\
    \ = \"n\", [\"o\"] = \"O\", [\"O\"] = \"o\", [\"p\"] = \"P\", [\"P\"] = \"p\"\
    , [\"q\"] = \"Q\", [\"Q\"] = \"q\", [\"r\"] = \"R\", [\"R\"] = \"r\", [\"s\"]\
    \ = \"S\", [\"S\"] = \"s\", [\"t\"] = \"T\", [\"T\"] = \"t\", [\"u\"] = \"U\"\
    , [\"U\"] = \"u\", [\"v\"] = \"V\", [\"V\"] = \"v\", [\"w\"] = \"W\", [\"W\"]\
    \ = \"w\", [\"x\"] = \"X\", [\"X\"] = \"x\", [\"y\"] = \"Y\", [\"Y\"] = \"y\"\
    , [\"z\"] = \"Z\", [\"Z\"] = \"z\"})\n\telse\n\t\treturn s:reverse()\n\tend\n\
    end", "    local t = {}\n    for i = 1, #s do\n        t[i] = s:sub(i, i)\n  \
    \  end\n    local newt = {}\n    for i = 1, #t do\n        if t[i]:match(\"%l\"\
    ) then\n            newt[i] = t[i]:upper()\n        elseif t[i]:match(\"%u\")\
    \ then\n            newt[i] = t[i]:lower()\n        else\n            newt[i]\
    \ = t[i]\n        end\n    end\n    return #newt > 0 and table.concat(newt) or\
    \ s:reverse()\nend", "  s = s:gsub(\"%l\", function(c)\n    return c:upper() ==\
    \ c and c:lower() or c:upper()\n  end)\n  return s:reverse()\nend", "    local\
    \ t = {}\n    for v in s:gmatch('.') do\n        if v:match('%a') then\n     \
    \       t[#t+1] = v:lower() == v and v:upper() or v:lower()\n        else\n  \
    \          t[#t+1] = v\n        end\n    end\n    return #t > 0 and table.concat(t)\
    \ or s:reverse()\nend", "    local final_string = \"\"\n    local new_char\n \
    \   for i=1, string.len(s) do\n        local char = string.sub(s, i, i)\n    \
    \    local lowercase = string.lower(char)\n        if char == lowercase then\n\
    \            new_char = string.upper(char)\n        else\n            new_char\
    \ = string.lower(char)\n        end\n        final_string = final_string .. new_char\n\
    \    end\n    return final_string\nend", "    local t = \"\"\n    for i = 1, #s\
    \ do\n        local c = s:sub(i, i)\n        if c:match(\"%a\") then\n       \
    \     c = c:lower() == c and c:upper() or c:lower()\n        end\n        t =\
    \ t .. c\n    end\n    return t\nend", "    local str = \"\"\n    for i = #s,\
    \ 1, -1 do\n        if string.match(s[i], \"%l\") then\n            str = str\
    \ .. string.lower(s[i])\n        elseif string.match(s[i], \"%u\") then\n    \
    \        str = str .. string.upper(s[i])\n        else\n            str = str\
    \ .. s[i]\n        end\n    end\n    return str\nend", "    return string.gsub(s,\
    \ \"(%a)\", function(c) return string.lower(c) == c and string.upper(c) or string.lower(c)\
    \ end)\nend", "    if not s:find(\"%a\") then\n        return s:reverse()\n  \
    \  end\n    return s:gsub(\"%a\", function(c)\n        return c:lower() == c and\
    \ c:upper() or c:lower()\n    end)\nend", "    s = s:gsub(\"[a-z]\", function(c)\n\
    \        if string.lower(c) == c then\n            return string.upper(c)\n  \
    \      else\n            return string.lower(c)\n        end\n    end)\n    return\
    \ s\nend", "\tlocal res = {}\n\tlocal letters = {}\n\tif not s:match('%a') then\n\
    \t\treturn s:reverse()\n\tend\n\tfor i = 1, #s do\n\t\tif s:sub(i, i):match('%a')\
    \ then\n\t\t\tlocal letter = s:sub(i, i)\n\t\t\tif letter == letter:upper() then\n\
    \t\t\t\ttable.insert(letters, letter:lower())\n\t\t\telse\n\t\t\t\ttable.insert(letters,\
    \ letter:upper())\n\t\t\tend\n\t\telse\n\t\t\ttable.insert(res, s:sub(i, i))\n\
    \t\tend\n\tend\n\tfor i = 1, #letters do\n\t\ttable.insert(res, letters[i])\n\t\
    end\n\treturn table.concat(res)\nend\nreturn solve", "  local str = ''\n  local\
    \ t = {}\n  for w in s:gmatch(\".\") do\n    t[#t+1] = w\n  end\n  for i = #t,\
    \ 1, -1 do\n    if t[i]:match(\"%w\") then\n      if t[i] == t[i]:upper() then\n\
    \        str = str .. t[i]:lower()\n      else\n        str = str .. t[i]:upper()\n\
    \      end\n    else\n      str = str .. t[i]\n    end\n  end\n  return str\n\
    end", "    local result, letter = {}, \"abcdefghijklmnopqrstuvwxyz\"\n    for\
    \ i = #s, 1, -1 do\n        local letter_upper = letter:upper()\n        local\
    \ current_char = s:sub(i, i)\n        if letter:find(current_char) or letter_upper:find(current_char)\
    \ then\n            local upper_char = current_char:upper()\n            if upper_char\
    \ == current_char then\n                current_char = current_char:lower()\n\
    \            else\n                current_char = upper_char\n            end\n\
    \        end\n        table.insert(result, current_char)\n    end\n    return\
    \ table.concat(result)\nend", "    local str = \"\"\n    for i = 1, #s do\n  \
    \      local c = s:sub(i, i)\n        if c:match(\"%a\") then\n            str\
    \ = str .. c:gsub(\"%l\", string.upper):gsub(\"%u\", string.lower)\n        else\n\
    \            str = str .. c\n        end\n    end\n    return str\nend", "   \
    \ local new_s = ''\n    for i = 1, #s do\n        if s[i]:match('%l') then\n \
    \           new_s = new_s .. s[i]:upper()\n        elseif s[i]:match('%L') then\n\
    \            new_s = new_s .. s[i]:lower()\n        else\n            new_s =\
    \ new_s .. s[i]\n        end\n    end\n    return #new_s > 0 and new_s or s:reverse()\n\
    end", "  local res = \"\"\n  for i = 1, #s do\n    if s[i]:match(\"%a\") then\n\
    \      res = res .. s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()\n  \
    \  else\n      res = res .. s[i]\n    end\n  end\n  return res\nend", "    --\
    \ your code here\n    local reverseStr = ''\n    local switchTable = {\n     \
    \   ['a'] = 'A',\n        ['b'] = 'B',\n        ['c'] = 'C',\n        ['d'] =\
    \ 'D',\n        ['e'] = 'E',\n        ['f'] = 'F',\n        ['g'] = 'G',\n   \
    \     ['h'] = 'H',\n        ['i'] = 'I',\n        ['j'] = 'J',\n        ['k']\
    \ = 'K',\n        ['l'] = 'L',\n        ['m'] = 'M',\n        ['n'] = 'N',\n \
    \       ['o'] = 'O',\n        ['p'] = 'P',\n        ['q'] = 'Q',\n        ['r']\
    \ = 'R',\n        ['s'] = 'S',\n        ['t'] = 'T',\n        ['u'] = 'U',\n \
    \       ['v'] = 'V',\n        ['w'] = 'W',\n        ['x'] = 'X',\n        ['y']\
    \ = 'Y',\n        ['z'] = 'Z',\n        ['A'] = 'a',\n        ['B'] = 'b',\n \
    \       ['C'] = 'c',\n        ['D'] = 'd',\n        ['E'] = 'e',\n        ['F']\
    \ = 'f',\n        ['G'] = 'g',\n        ['H'] = 'h',\n        ['I'] = 'i',\n \
    \       ['J'] = 'j',\n        ['K'] = 'k',\n        ['L'] = 'l',\n        ['M']\
    \ = 'm',\n        ['N'] = 'n',\n        ['O'] = 'o',\n        ['P'] = 'p',\n \
    \       ['Q'] = 'q',\n        ['R'] = 'r',\n        ['S'] = 's',\n        ['T']\
    \ = 't',\n        ['U'] = 'u',\n        ['V'] = 'v',\n        ['W'] = 'w',\n \
    \       ['X'] = 'x',\n        ['Y'] = 'y',\n        ['Z'] = 'z',\n    }\n    for\
    \ i = 1, #s do\n        local code = string.byte(s,", "  if not string.match(s,\
    \ '%a') then return string.reverse(s) end\n  return string.gsub(s, '%a', function(c)\n\
    \      if string.match(c, '%l') then return string.upper(c)\n      else return\
    \ string.lower(c) end\n    end)\nend\nreturn solve", "  if #s == 0 then\n    return\
    \ \"\"\n  end\n  s = s:gsub('.', {['A'] = 'a', ['B'] = 'b', ['C'] = 'c', ['D']\
    \ = 'd', ['E'] = 'e', ['F'] = 'f', ['G'] = 'g', ['H'] = 'h', ['I'] = 'i', ['J']\
    \ = 'j', ['K'] = 'k', ['L'] = 'l', ['M'] = 'm', ['N'] = 'n', ['O'] = 'o', ['P']\
    \ = 'p', ['Q'] = 'q', ['R'] = 'r', ['S'] = 's', ['T'] = 't', ['U'] = 'u', ['V']\
    \ = 'v', ['W'] = 'w', ['X'] = 'x', ['Y'] = 'y', ['Z'] = 'z', ['a'] = 'A', ['b']\
    \ = 'B', ['c'] = 'C', ['d'] = 'D', ['e'] = 'E', ['f'] = 'F', ['g'] = 'G', ['h']\
    \ = 'H', ['i'] = 'I', ['j'] = 'J', ['k'] = 'K', ['l'] = 'L', ['m'] = 'M', ['n']\
    \ = 'N', ['o'] = 'O', ['p'] = 'P', ['q'] = 'Q', ['r'] = 'R', ['s'] = 'S', ['t']\
    \ = 'T', ['u'] = 'U', ['v'] = 'V', ['w'] = 'W', ['x'] = 'X', ['y'] = 'Y', ['z']\
    \ = 'Z'})\n  return s\nend", "    local str = ''\n    for c in s:gmatch('.') do\n\
    \        if c:match('%a') then\n            if c:match('%l') then\n          \
    \      str = str .. c:upper()\n            else\n                str = str ..\
    \ c:lower()\n            end\n        else\n            str = str .. c\n     \
    \   end\n    end\n    return (str == '') and s:reverse() or str\nend", "    local\
    \ num = 0\n    for i = 1, string.len(s) do\n        if string.match(s, \"%a\"\
    ) then\n            num = num + 1\n        end\n    end\n    if num == 0 then\n\
    \        return string.reverse(s)\n    end\n    local s2 = \"\"\n    for i = 1,\
    \ string.len(s) do\n        if string.match(s, \"%a\") then\n            s2 =\
    \ s2 .. string.lower(string.sub(s, i, i))\n        else\n            s2 = s2 ..\
    \ string.sub(s, i, i)\n        end\n    end\n    local s3 = \"\"\n    for i =\
    \ 1, string.len(s) do\n        if string.match(s, \"%a\") then\n            if\
    \ string.lower(string.sub(s, i, i)) == string.sub(s2, i, i) then\n           \
    \     s3 = s3 .. string.upper(string.sub(s, i, i))\n            else\n       \
    \         s3 = s3 .. string.lower(string.sub(s, i, i))\n            end\n    \
    \    else\n            s3 = s3 .. string.sub(s, i, i)\n        end\n    end\n\
    \    return s3\nend", "    -- Write your code here\n    local n = #s\n    local\
    \ result\n    if n == 0 then\n        result = s\n    else\n        result = {}\n\
    \        for i = 1, n do\n            local c = s:sub(i, i)\n            local\
    \ _, num = string.find(c, \"%a\")\n            if num then\n                result[i]\
    \ = c:lower() == c and c:upper() or c:lower()\n            else\n            \
    \    result[i] = c\n            end\n        end\n        result = table.concat(result)\n\
    \    end\n    return result\nend", "  local res = \"\"\n  local sLen = #s\n  if\
    \ sLen > 0 then\n    for i = 1, sLen do\n      local c = s:sub(i, i)\n      local\
    \ cCase = c:lower()\n      if c ~= cCase then\n        res = res .. cCase\n  \
    \    else\n        res = res .. c:upper()\n      end\n    end\n  else\n    res\
    \ = s\n  end\n  return res\nend", "    local t = {}\n    for i = 1, #s do\n  \
    \      local c = s:sub(i, i)\n        if c == c:upper() then\n            t[#t\
    \ + 1] = c:lower()\n        elseif c == c:lower() then\n            t[#t + 1]\
    \ = c:upper()\n        else\n            t[#t + 1] = c\n        end\n    end\n\
    \    return #t == 0 and s or table.concat(t)\nend", "    local result = \"\"\n\
    \    for char in s:gmatch(\".\") do\n        local ascii = string.byte(char)\n\
    \        if ascii >= 97 and ascii <= 122 then\n            result = result ..\
    \ string.char(ascii - 32)\n        elseif ascii >= 65 and ascii <= 90 then\n \
    \           result = result .. string.char(ascii + 32)\n        else\n       \
    \     result = result .. char\n        end\n    end\n    return result\nend",
  "    local res = ''\n    for i = 1, #s do\n        if string.match(s[i], '[a-zA-Z]')\
    \ then\n            res = res .. string.reverse(s[i])\n        else\n        \
    \    res = res .. s[i]\n        end\n    end\n    return res\nend", "    return\
    \ s:gsub('%a',function(c)return c==c:upper()and c:lower()or c:upper()end)\nend",
  "    return s:gsub(\"%a\", {[\"a\"] = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\", [\"\
    d\"] = \"D\", [\"e\"] = \"E\", [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"] = \"\
    H\", [\"i\"] = \"I\", [\"j\"] = \"J\", [\"k\"] = \"K\", [\"l\"] = \"L\", [\"m\"\
    ] = \"M\", [\"n\"] = \"N\", [\"o\"] = \"O\", [\"p\"] = \"P\", [\"q\"] = \"Q\"\
    , [\"r\"] = \"R\", [\"s\"] = \"S\", [\"t\"] = \"T\", [\"u\"] = \"U\", [\"v\"]\
    \ = \"V\", [\"w\"] = \"W\", [\"x\"] = \"X\", [\"y\"] = \"Y\", [\"z\"] = \"Z\"\
    , [\"A\"] = \"a\", [\"B\"] = \"b\", [\"C\"] = \"c\", [\"D\"] = \"d\", [\"E\"]\
    \ = \"e\", [\"F\"] = \"f\", [\"G\"] = \"g\", [\"H\"] = \"h\", [\"I\"] = \"i\"\
    , [\"J\"] = \"j\", [\"K\"] = \"k\", [\"L\"] = \"l\", [\"M\"] = \"m\", [\"N\"]\
    \ = \"n\", [\"O\"] = \"o\", [\"P\"] = \"p\", [\"Q\"] = \"q\", [\"R\"] = \"r\"\
    , [\"S\"] = \"s\", [\"T\"] = \"t\", [\"U\"] = \"u\", [\"V\"] = \"v\", [\"W\"]\
    \ = \"w\", [\"X\"] = \"x\", [\"Y\"] = \"y\", [\"Z\"] = \"z\"})\nend", "  -- check\
    \ if the string has any letters\n  local hasLetters = false\n  for i = 1, #s do\n\
    \    if s:find(\"%a\") then\n      hasLetters = true\n      break\n    end\n \
    \ end\n  if not hasLetters then return s:reverse() end\n  local res = \"\"\n \
    \ for i = 1, #s do\n    local s_i = s:sub(i, i)\n    if s_i:find(\"%a\") then\n\
    \      if s_i:find(\"%l\") then\n        res = res .. s_i:upper()\n      else\n\
    \        res = res .. s_i:lower()\n      end\n    else\n      res = res .. s_i\n\
    \    end\n  end\n  return res\nend", "  local a = {}\n  for c in s:gmatch'.' do\n\
    \    if c:match'%l' then\n      a[#a+1] = c:upper()\n    elseif c:match'%u' then\n\
    \      a[#a+1] = c:lower()\n    else\n      a[#a+1] = c\n    end\n  end\n  return\
    \ #a>0 and table.concat(a) or s:reverse()\nend", "    local function rev(c)\n\
    \        return (c:match(\"%a\") and c:lower() or c:upper())\n    end\n    return\
    \ s:gsub(\"%a\", rev)\nend", "  local res = {}\n  for c in s:gmatch(\".\") do\n\
    \    if c:match(\"%a\") then\n      if c:match(\"%u\") then\n        table.insert(res,\
    \ c:lower())\n      else\n        table.insert(res, c:upper())\n      end\n  \
    \  else\n      table.insert(res, c)\n    end\n  end\n  return #res == 0 and s\
    \ or table.concat(res)\nend", "    if string.match(s, '%a') then\n        return\
    \ string.gsub(s, '%a', function(c)\n            if c:upper() == c then return\
    \ c:lower() else return c:upper() end\n        end)\n    else\n        return\
    \ string.reverse(s)\n    end\nend", "    local res = ''\n    for i = 1, #s do\n\
    \        local c = s:sub(i, i)\n        if c:match('%a') then\n            if\
    \ c:match('%l') then res = res .. c:upper() else res = res .. c:lower() end\n\
    \        else\n            res = res .. c\n        end\n    end\n    return res\n\
    end", "    return s:gsub(\"[a-zA-Z]\", {[\"a\"] = \"A\", [\"b\"] = \"B\", [\"\
    c\"] = \"C\", [\"d\"] = \"D\", [\"e\"] = \"E\", [\"f\"] = \"F\", [\"g\"] = \"\
    G\", [\"h\"] = \"H\", [\"i\"] = \"I\", [\"j\"] = \"J\", [\"k\"] = \"K\", [\"l\"\
    ] = \"L\", [\"m\"] = \"M\", [\"n\"] = \"N\", [\"o\"] = \"O\", [\"p\"] = \"P\"\
    , [\"q\"] = \"Q\", [\"r\"] = \"R\", [\"s\"] = \"S\", [\"t\"] = \"T\", [\"u\"]\
    \ = \"U\", [\"v\"] = \"V\", [\"w\"] = \"W\", [\"x\"] = \"X\", [\"y\"] = \"Y\"\
    , [\"z\"] = \"Z\", [\"A\"] = \"a\", [\"B\"] = \"b\", [\"C\"] = \"c\", [\"D\"]\
    \ = \"d\", [\"E\"] = \"e\", [\"F\"] = \"f\", [\"G\"] = \"g\", [\"H\"] = \"h\"\
    , [\"I\"] = \"i\", [\"J\"] = \"j\", [\"K\"] = \"k\", [\"L\"] = \"l\", [\"M\"]\
    \ = \"m\", [\"N\"] = \"n\", [\"O\"] = \"o\", [\"P\"] = \"p\", [\"Q\"] = \"q\"\
    , [\"R\"] = \"r\", [\"S\"] = \"s\", [\"T\"] = \"t\", [\"U\"] = \"u\", [\"V\"]\
    \ = \"v\", [\"W\"] = \"w\", [\"X\"] = \"x\", [\"Y\"] = \"y\", [\"Z\"] = \"z\"\
    })\nend", "  local newStr = ''\n  local isLetterPresent = false\n  for i = 1,\
    \ s:len() do\n    local c = s:sub(i, i)\n    if c:find('%a') then\n      isLetterPresent\
    \ = true\n      newStr = newStr .. c:lower() == c and c:upper() or c:lower()\n\
    \    else\n      newStr = newStr .. c\n    end\n  end\n  return isLetterPresent\
    \ and newStr or newStr:reverse()\nend", "\tlocal revS = \"\"\n\tif s:match(\"\
    %l\") then\n\t\tfor i=1, #s do\n\t\t\tif s:sub(i,i):match(\"%a\") then\n\t\t\t\
    \tif s:sub(i,i):lower() == s:sub(i,i) then\n\t\t\t\t\trevS = revS .. s:sub(i,i):upper()\n\
    \t\t\t\telse\n\t\t\t\t\trevS = revS .. s:sub(i,i):lower()\n\t\t\t\tend\n\t\t\t\
    else\n\t\t\t\trevS = revS .. s:sub(i,i)\n\t\t\tend\n\t\tend\n\telse\n\t\trevS\
    \ = s:reverse()\n\tend\n\treturn revS\nend", "  return s:gsub('.', function(c)\n\
    \    return c:lower() == c and c:upper() or c:lower()\n  end)\nend", "    local\
    \ len = #s\n    local letters, t = {}, {}\n    for i = 1, len do\n        table.insert(t,\
    \ s:sub(i, i))\n    end\n    local j = 0\n    for i = 1, len do\n        if t[i]:match(\"\
    %a\") then\n            j = j + 1\n            table.insert(letters, t[i])\n \
    \       end\n    end\n    if j == 0 then return s:reverse() end\n    for i = 1,\
    \ len do\n        if t[i]:match(\"%a\") then\n            t[i] = letters[j]\n\
    \            j = j - 1\n        end\n    end\n    return table.concat(t)\nend",
  "  local res = {}\n  for c in s:gmatch(\".\") do\n    if c:match(\"%a\") then\n\
    \      if c:match(\"%u\") then\n        table.insert(res, c:lower())\n      else\n\
    \        table.insert(res, c:upper())\n      end\n    else\n      table.insert(res,\
    \ c)\n    end\n  end\n  return #res == 0 and s or table.concat(res)\nend", " \
    \ if (s:match('%a')) then\n    return s:gsub('%a', function(c) return c:lower()\
    \ == c and c:upper() or c:lower() end)\n  else\n    return s:reverse()\n  end\n\
    end", "    local result = {}\n    for i = 1, #s do\n        if s[i]:match(\"%l\"\
    ) then\n            table.insert(result, s[i]:upper())\n        elseif s[i]:match(\"\
    %u\") then\n            table.insert(result, s[i]:lower())\n        else\n   \
    \         table.insert(result, s[i])\n        end\n    end\n    return #result\
    \ > 0 and table.concat(result) or s:reverse()\nend", "    return s:gsub(\"(%w)\"\
    , {a = \"A\", b = \"B\", c = \"C\", d = \"D\", e = \"E\", f = \"F\", g = \"G\"\
    , h = \"H\", i = \"I\", j = \"J\", k = \"K\", l = \"L\", m = \"M\", n = \"N\"\
    , o = \"O\", p = \"P\", q = \"Q\", r = \"R\", s = \"S\", t = \"T\", u = \"U\"\
    , v = \"V\", w = \"W\", x = \"X\", y = \"Y\", z = \"Z\", A = \"a\", B = \"b\"\
    , C = \"c\", D = \"d\", E = \"e\", F = \"f\", G = \"g\", H = \"h\", I = \"i\"\
    , J = \"j\", K = \"k\", L = \"l\", M = \"m\", N = \"n\", O = \"o\", P = \"p\"\
    , Q = \"q\", R = \"r\", S = \"s\", T = \"t\", U = \"u\", V = \"v\", W = \"w\"\
    , X = \"x\", Y = \"y\", Z = \"z\"})\nend", "    local res = {}\n    for i, c in\
    \ ipairs(s) do\n        if string.match(c, \"[a-zA-Z]\") then\n            if\
    \ string.match(c, \"[a-z]\") then\n                table.insert(res, string.upper(c))\n\
    \            else\n                table.insert(res, string.lower(c))\n      \
    \      end\n        else\n            table.insert(res, c)\n        end\n    end\n\
    \    return table.concat(res)\nend", "    local tmp = s:gsub(\"%a\", function(c)\
    \ return c:upper() == c and c:lower() or c:upper() end)\n    return s:match(\"\
    %a\") and tmp or s:reverse()\nend", "    local c=\"\"\n    local new=\"\"\n  \
    \  local s=\"\"\n    local chars = {}\n    for c in s:gmatch\".\" do table.insert(chars,\
    \ c) end\n    for i=#chars,1,-1 do\n        if chars[i]:match(\"%a\") then\n \
    \           if chars[i] == chars[i]:upper() then\n                new = new..chars[i]:lower()\n\
    \            else\n                new = new..chars[i]:upper()\n            end\n\
    \        else\n            new = new..chars[i]\n        end\n    end\n    return\
    \ new\nend", "    return s:gsub(\"%l\", function(c) return c:upper() end):gsub(\"\
    %u\", function(c) return c:lower() end)\nend", "    local res = {}\n    for i\
    \ = 1, #s do\n        if s[i]:find('%a') then\n            res[i] = s[i]:gsub('%a',\
    \ function(c)\n                return c:upper() == c and c:lower() or c:upper()\n\
    \            end)\n        else\n            res[i] = s[i]\n        end\n    end\n\
    \    return #res == 0 and s:reverse() or table.concat(res)\nend", "    local solved\
    \ = ''\n    for i = 1, #s do\n        if s[i]:find('%a') then\n            solved\
    \ = solved .. s[i]:gsub('%a', {['A'] = 'a', ['a'] = 'A'})\n        else\n    \
    \        solved = solved .. s[i]\n        end\n    end\n    return solved\nend",
  "    return (s:gsub(\"[%a]\",function(ch)\n        return ch:upper()==ch and ch:lower()\
    \ or ch:upper()\n    end))\nend", "    if not s:find(\"%a\") then return s:reverse()\
    \ end\n    local t = \"\"\n    for c in s:gmatch\".\" do\n        if c:find(\"\
    %a\") then\n            t = t .. c:lower() == c and c:upper() or c:lower()\n \
    \       else\n            t = t .. c\n        end\n    end\n    return t\nend",
  "    if s:match(\"%a\") then\n        return (s:gsub(\"%a\", function(c) return\
    \ c:upper()==c and c:lower() or c:upper() end))\n    else\n        return (s:reverse())\n\
    \    end\nend", "\tlocal t = {}\n\tfor k in s:gmatch('%a') do\n\t\tif k == k:upper()\
    \ then\n\t\t\tt[#t+1] = k:lower()\n\t\telse\n\t\t\tt[#t+1] = k:upper()\n\t\tend\n\
    \tend\n\treturn #t>0 and table.concat(t) or s:reverse()\nend", "    -- your code\
    \ here\n    local str = \"\"\n    for i = 1, #s do\n        if s[i] == string.upper(s[i])\
    \ then\n            str = str .. string.lower(s[i])\n        elseif s[i] == string.lower(s[i])\
    \ then\n            str = str .. string.upper(s[i])\n        else\n          \
    \  str = str .. s[i]\n        end\n    end\n    if str == \"\" then\n        return\
    \ s\n    else\n        return str\n    end\nend", "    local sLen = #s\n    if\
    \ sLen == 0 then\n        return ''\n    end\n    local res = ''\n    for i =\
    \ 1, sLen do\n        local c = s:sub(i, i)\n        if c:match('%a') then\n \
    \           if c:lower() == c then\n                res = res .. c:upper()\n \
    \           else\n                res = res .. c:lower()\n            end\n  \
    \      else\n            res = res .. c\n        end\n    end\n    return res\n\
    end", "    local x = string.reverse(s)\n    local y = ''\n    for i = 1, #x do\n\
    \        local a = string.sub(x, i, i)\n        if (a == string.upper(a)) then\n\
    \            y = y .. string.lower(a)\n        elseif (a == string.lower(a)) then\n\
    \            y = y .. string.upper(a)\n        else \n            y = y .. a\n\
    \        end\n    end\n    return y\nend", "    return s:gsub('(%a)', function(c)\n\
    \        return c:upper() == c and c:lower() or c:upper()\n    end)\nend", " \
    \ return s:gsub(\"%a\", function(c)\n    if c:lower() == c then\n      return\
    \ c:upper()\n    else\n      return c:lower()\n    end\n  end)\nend", "    if\
    \ string.match(s, \"[%a]\") then\n        return s:gsub(\"[%a]\", function(char)\n\
    \            if char == char:upper() then\n                return char:lower()\n\
    \            else\n                return char:upper()\n            end\n    \
    \    end)\n    else\n        return s:reverse()\n    end\nend", "    local str\
    \ = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match(\"\
    %a\") then\n            str[i] = c:lower() == c and c:upper() or c:lower()\n \
    \       else\n            str[i] = c\n        end\n    end\n    return (#str >\
    \ 0 and table.concat(str) or s):reverse()\nend", "    return (s:gsub(\"([%a])\"\
    , function(x)\n        return x:upper() == x and x:lower() or x:upper()\n    end))\n\
    end", "\tlocal abc = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n\
    \tlocal res = ''\n\tfor i=1, #s do\n\t\tif abc:find(s[i]) then\n\t\t\tif s[i]\
    \ == s[i]:upper() then\n\t\t\t\tres = res .. s[i]:lower()\n\t\t\telse\n\t\t\t\t\
    res = res .. s[i]:upper()\n\t\t\tend\n\t\telse\n\t\t\tres = res .. s[i]\n\t\t\
    end\n\tend\n\tif res == '' then\n\t\treturn s:reverse()\n\telse\n\t\treturn res\n\
    \tend\nend", "    for i = 1, string.len(s) do\n        local s = string.char(string.byte(s,\
    \ i))\n        local l = string.match(s, \"%a\")\n        if l then\n        \
    \    if l == string.lower(l) then\n                s = string.upper(s)\n     \
    \       else\n                s = string.lower(s)\n            end\n        end\n\
    \        print(s)\n    end\nend", "  return nil\nend", "    if s == '' then\n\
    \        return s\n    end\n    local s_ = {}\n    for w in s:gmatch(\"%a\") do\n\
    \        table.insert(s_, w)\n    end\n    for i = 1, #s_ do\n        if s_[i]\
    \ == s_[i]:lower() then\n            s_[i] = s_[i]:upper()\n        else\n   \
    \         s_[i] = s_[i]:lower()\n        end\n    end\n    return table.concat(s_)\n\
    end", "    local rev = {}\n    local len = string.len(s)\n    local last = len\
    \ - 1\n    for i = 0, last do\n        local c = string.sub(s, i, i)\n       \
    \ if c:match(\"%a\") then\n            rev[i] = string.upper(c) == c and string.lower(c)\
    \ or string.upper(c)\n        else\n            rev[i] = c\n        end\n    end\n\
    \    return table.concat(rev)\nend\nreturn solve", "  return s:gsub(\".\", function(s)\n\
    \    if s:match(\"%a\") then\n      return s:lower() == s and s:upper() or s:lower()\n\
    \    else\n      return s\n    end\n  end):reverse()\nend", "  local c = ''\n\
    \  for i=1,#s do\n    local char = s:sub(i,i)\n    if char:match('%l') then\n\
    \      c = c .. char:upper()\n    elseif char:match('%u') then\n      c = c ..\
    \ char:lower()\n    else\n      c = c .. char\n    end\n  end\n  return c\nend",
  "    return s:gsub('%a', function(c) return c:lower() == c and c:upper() or c:lower()\
    \ end)\nend", "  local t = {}\n  for i = 1, #s do\n    local c = s:sub(i, i)\n\
    \    if c == c:upper() then\n      t[#t + 1] = c:lower()\n    elseif c == c:lower()\
    \ then\n      t[#t + 1] = c:upper()\n    else\n      t[#t + 1] = c\n    end\n\
    \  end\n  if #t == 0 then\n    return s:reverse()\n  end\n  return table.concat(t)\n\
    end", "  local function tog(c)\n    if c:match('%l') then\n      return c:upper()\n\
    \    elseif c:match('%u') then\n      return c:lower()\n    else\n      return\
    \ c\n    end\n  end\n  local function rev(str)\n    return str:reverse()\n  end\n\
    \  return not s:match('%l') and rev(s) or s:gsub('%l', tog)\nend", "  return s:gsub(\"\
    %a\", function(ch)\n    if ch:upper() == ch then return ch:lower() end\n    return\
    \ ch:upper()\n  end)\nend", "  if not s:find('%a') then\n    return s:reverse()\n\
    \  end\n  local t = {}\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if\
    \ c:find('%a') then\n      t[#t + 1] = c:find('%l') and c:upper() or c:lower()\n\
    \    else\n      t[#t + 1] = c\n    end\n  end\n  return table.concat(t)\nend",
  "    local r = {}\n    for i = #s, 1, -1 do\n        r[#r + 1] = (s:byte(i) > 96\
    \ and s:byte(i) < 123) and s:byte(i) - 32 or (s:byte(i) > 64 and s:byte(i) < 91)\
    \ and s:byte(i) + 32 or s:byte(i)\n    end\n    return #r > 0 and string.char(unpack(r))\
    \ or \"\"\nend", "    -- code\n    return s:gsub(\"[%a]\", {['a']='A', ['b']='B',\
    \ ['c']='C', ['d']='D', ['e']='E', ['f']='F', ['g']='G', ['h']='H', ['i']='I',\
    \ ['j']='J', ['k']='K', ['l']='L', ['m']='M', ['n']='N', ['o']='O', ['p']='P',\
    \ ['q']='Q', ['r']='R', ['s']='S', ['t']='T', ['u']='U', ['v']='V', ['w']='W',\
    \ ['x']='X', ['y']='Y', ['z']='Z', ['A']='a', ['B']='b', ['C']='c', ['D']='d',\
    \ ['E']='e', ['F']='f', ['G']='g', ['H']='h', ['I']='i', ['J']='j', ['K']='k',\
    \ ['L']='l', ['M']='m', ['N']='n', ['O']='o', ['P']='p', ['Q']='q', ['R']='r',\
    \ ['S']='s', ['T']='t', ['U']='u', ['V']='v', ['W']='w', ['X']='x', ['Y']='y',\
    \ ['Z']='z'})\nend", "  local ns = \"\"\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:match(\"%a\") then\n      ns = ns .. c:lower() == c and c:upper()\
    \ or c:lower()\n    else\n      ns = ns .. c\n    end\n  end\n  return #ns > 0\
    \ and ns or s:reverse()\nend", "  if s == nil then\n    return nil\n  end\n  local\
    \ res = \"\"\n  for i = 1, string.len(s) do\n    local c = string.sub(s, i, i)\n\
    \    if string.match(c, \"%a\") then\n      res = res .. string.gsub(c, \"[%a]\"\
    , {\n        [\"a\"] = \"A\",\n        [\"b\"] = \"B\",\n        [\"c\"] = \"\
    C\",\n        [\"d\"] = \"D\",\n        [\"e\"] = \"E\",\n        [\"f\"] = \"\
    F\",\n        [\"g\"] = \"G\",\n        [\"h\"] = \"H\",\n        [\"i\"] = \"\
    I\",\n        [\"j\"] = \"J\",\n        [\"k\"] = \"K\",\n        [\"l\"] = \"\
    L\",\n        [\"m\"] = \"M\",\n        [\"n\"] = \"N\",\n        [\"o\"] = \"\
    O\",\n        [\"p\"] = \"P\",\n        [\"q\"] = \"Q\",\n        [\"r\"] = \"\
    R\",\n        [\"s\"] = \"S\",\n        [\"t\"] = \"T\",\n        [\"u\"] = \"\
    U\",\n        [\"v\"] = \"V\",\n        [\"w\"] = \"W\",\n        [\"x\"] = \"\
    X\",\n        [\"y\"] = \"Y\",\n        [\"z\"] = \"Z\",\n        [\"A\"] = \"\
    a\",\n        [\"B\"] = \"b\",\n        [\"C\"] = \"c\",\n        [\"D\"] = \"\
    d\",\n        [\"E\"] = \"e\",\n        [\"F\"] = \"f\",\n        [\"G\"] = \"\
    g\",\n        [\"H\"] = \"h\",\n        [\"I\"] = \"i\",\n        [\"J\"] = \"\
    j\",\n        [\"K\"] = \"k\",\n        [\"L\"] = \"l\",\n        [\"M\"] = \"\
    m\",\n        [\"N\"] = \"n\",\n        [\"O\"] = \"o\",\n        [\"P\"] = \"\
    p\",\n        [\"Q\"] = \"q\",\n        [\"R\"] = \"r\",\n        [\"S\"] = \"\
    s\",\n        [\"T\"] = \"t\",\n        [\"U\"] = \"u\",\n        [\"V\"] = \"\
    v", "    --\n    -- \u041D\u0435 \u0440\u0430\u0431\u043E\u0442\u0430\u0435\u0442\
    \ \u043D\u0430 \u0440\u0443\u0441\u0441\u043A\u0438\u0445 \u0431\u0443\u043A\u0432\
    \u0430\u0445\n    --\n    if s:gsub(\"%a\", \"\"):len() == s:len() then\n    \
    \    return s:reverse()\n    end\n    local res = \"\"\n    for c in s:gmatch(\"\
    .\") do\n        if c:match(\"%a\") then\n            if c:match(\"%u\") then\n\
    \                res = res .. c:lower()\n            else\n                res\
    \ = res .. c:upper()\n            end\n        else\n            res = res ..\
    \ c\n        end\n    end\n    return res\nend", "  local r = {}\n  for i = #s,\
    \ 1, -1 do\n    r[#r + 1] = s:sub(i, i):match(\"%a\") and (s:sub(i, i):lower()\
    \ == s:sub(i, i) and s:sub(i, i):upper() or s:sub(i, i):lower()) or s:sub(i, i)\n\
    \  end\n  return table.concat(r)\nend", "    return string.reverse(s):gsub(\"\
    %a\", function(c) return c:lower() end)\nend", "  return (string.gsub(s, \"%a\"\
    , function(c) return c:lower() == c and c:upper() or c:lower() end))\nend", " \
    \   s = s:gsub(\"%a\", function(c) return c:lower() == c and c:upper() or c:lower()\
    \ end)\n    return s:reverse()\nend", "    local r = s:gsub(\"%a\", function(c)\n\
    \        return (c == c:upper() and c:lower() or c:upper())\n    end)\n    return\
    \ (#r > 0 and r or r:reverse())\nend", "    -- check if the string is empty\n\
    \    if not s or s == \"\" then\n        return \"\"\n    end\n    local rs =\
    \ \"\"\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match(\"\
    %a\") then\n            if c:match(\"%u\") then\n                rs = rs .. c:lower()\n\
    \            else\n                rs = rs .. c:upper()\n            end\n   \
    \     else\n            rs = rs .. c\n        end\n    end\n    return rs\nend",
  "  local res = ''\n  for i=1,#s do\n    local c = s:sub(i,i)\n    if c:match('%a')\
    \ then\n      if c:lower() == c then res = res .. c:upper() else res = res ..\
    \ c:lower() end\n    else\n      res = res .. c\n    end\n  end\n  return res\n\
    end", "  local arr = {}\n  for i = 1, #s do\n    if string.match(s[i], \"[a-zA-Z]\"\
    ) then\n      if string.lower(s[i]) == s[i] then\n        arr[i] = string.upper(s[i])\n\
    \      else\n        arr[i] = string.lower(s[i])\n      end\n    else\n      arr[i]\
    \ = s[i]\n    end\n  end\n  if #arr == 0 then return string.reverse(s) end\n \
    \ return table.concat(arr)\nend", "    local r = \"\"\n    for c in s:gmatch(\"\
    .\") do\n        if c:match(\"%a\") then r = r .. c:reverse()\n        else r\
    \ = r .. c end\n    end\n    return r\nend", "    if not s:match(\"%a\") then\n\
    \        return s:reverse()\n    end\n    local a = s:gsub(\"%a\", function(ch)\n\
    \        if ch:find(\"%l\") then\n            return ch:upper()\n        else\n\
    \            return ch:lower()\n        end\n    end)\n    return a\nend\nprint(solve(\"\
    1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))", "    local s2 = ''\n\
    \    for i = 1, #s do\n        if string.match(s[i], '[A-Za-z]') then\n      \
    \      s2 = s2 .. string.lower(s[i])\n        else\n            s2 = s2 .. s[i]\n\
    \        end\n    end\n    if s2 == string.lower(s2) then\n        return string.upper(s)\n\
    \    else\n        return string.lower(s)\n    end\nend", "    local t = {}\n\
    \    for c in s:gmatch(\".\") do\n        if c:match(\"%w\") then\n          \
    \  t[#t+1] = c:lower() == c and c:upper() or c:lower()\n        else\n       \
    \     t[#t+1] = c\n        end\n    end\n    return #t == 0 and s:reverse() or\
    \ table.concat(t)\nend", "    local result = {}\n    for i = 1, #s do\n      \
    \  local c = s:sub(i, i)\n        if c:match(\"%a\") then\n            local u\
    \ = c:upper()\n            local l = c:lower()\n            if c == u then\n \
    \               table.insert(result, l)\n            else\n                table.insert(result,\
    \ u)\n            end\n        else\n            table.insert(result, c)\n   \
    \     end\n    end\n    return table.concat(result)\nend", "    local str = ''\n\
    \    for i=1, #s do\n        local c = s:sub(i,i)\n        if c:match('%a') then\n\
    \            if c:match('%l') then\n                str = str .. c:upper()\n \
    \           else\n                str = str .. c:lower()\n            end\n  \
    \      else\n            str = str .. c\n        end\n    end\n    return #str\
    \ == 0 and s:reverse() or str\nend", "    local s = s:gsub(\"(%a)\",\n       \
    \ function(letter)\n            return letter:lower() == letter and letter:upper()\
    \ or letter:lower()\n        end\n    )\n    if s:match(\"%a\") then\n       \
    \ return s\n    else\n        return s:reverse()\n    end\nend", "  s = s:gsub(\"\
    %a\",function(c)\n    if c:lower() == c then\n      return c:upper()\n    else\n\
    \      return c:lower()\n    end\n  end)\n  if #s:gsub(\"%a\",\"\") == #s then\n\
    \    return s:reverse()\n  end\n  return s\nend", "  local t = {}\n  local is_letter\
    \ = false\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local letter = c:find(\"\
    %a\")\n    if letter then\n      is_letter = true\n      t[i] = c:lower() == c\
    \ and c:upper() or c:lower()\n    else\n      t[i] = c\n    end\n  end\n  if not\
    \ is_letter then\n    t = table.reverse(t)\n  end\n  return table.concat(t)\n\
    end", "    s = s:gsub(\"[a-z]\", function(c)\n        return c:upper()\n    end)\n\
    \    s = s:gsub(\"[A-Z]\", function(c)\n        return c:lower()\n    end)\n \
    \   return s\nend", "    -- code here\nend", "  local str = s:reverse()\n  local\
    \ result = \"\"\n  for i = 1, #str do\n    local c = str:sub(i, i)\n    if c:find(\"\
    %a\") then\n      if c:lower() == c then\n        result = result .. c:upper()\n\
    \      else\n        result = result .. c:lower()\n      end\n    else\n     \
    \ result = result .. c\n    end\n  end\n  return result\nend", "  local res =\
    \ {}\n  for c in s:gmatch('.') do\n    local i = string.byte(c)\n    if c:match('%a')\
    \ then\n      if i >= 97 and i <= 122 then\n        table.insert(res, string.char(i\
    \ - 32))\n      elseif i >= 65 and i <= 90 then\n        table.insert(res, string.char(i\
    \ + 32))\n      end\n    else\n      table.insert(res, c)\n    end\n  end\n  if\
    \ #res > 0 then\n    return table.concat(res)\n  else\n    return s:reverse()\n\
    \  end\nend", "  local res = \"\"\n  local str = \"\"\n  local letter = nil\n\
    \  if type(s) ~= \"string\" then return s end\n  for i=1,#s do\n    if tonumber(s:sub(i,i))\
    \ == nil then\n      if letter ~= nil then \n        str = str .. s:sub(i,i)\n\
    \      else\n        letter = true\n        str = s:sub(i,i)\n      end\n    else\n\
    \      if letter ~= nil then \n        res = res .. (str):reverse()\n        str\
    \ = \"\"\n        letter = nil\n      end\n      res = res .. s:sub(i,i)\n   \
    \ end\n  end\n  if letter ~= nil then \n    res = res .. (str):reverse()\n  end\n\
    \  return res\nend", "  local n = #s\n  local chars = {}\n  for i = 1, n do\n\
    \    local c = s:sub(i, i)\n    local uc = c:upper()\n    if c == uc then\n  \
    \    chars[i] = c:lower()\n    else\n      chars[i] = uc\n    end\n  end\n  if\
    \ #chars > 0 then\n    return table.concat(chars)\n  else\n    return s:reverse()\n\
    \  end\nend", "    local res = {}\n    for i=1,string.len(s) do\n        local\
    \ char = string.sub(s,i,i)\n        if string.match(char,\"%a\") then\n      \
    \      if string.match(char,\"%a\") then\n                char = string.lower(char)\n\
    \            else\n                char = string.upper(char)\n            end\n\
    \        end\n        table.insert(res,char)\n    end\n    return table.concat(res)\n\
    end", "    return string.reverse(string.gsub(s, \"([A-Za-z])\", function(c) return\
    \ c:upper() == c and c:lower() or c:upper() end))\nend", "    return s:gsub('[a-zA-Z]',\
    \ function(c) return c:upper() == c and c:lower() or c:upper() end)\nend", "\t\
    local function solve_(s)\n\t\tlocal i = 0\n\t\tlocal result = {}\n\t\tfor k, v\
    \ in pairs(s) do\n\t\t\ti = i + 1\n\t\t\tif ((string.lower(v) == v) and (string.upper(v)\
    \ ~= v)) then\n\t\t\t\tresult[i] = string.upper(v)\n\t\t\telseif ((string.upper(v)\
    \ == v) and (string.lower(v) ~= v)) then\n\t\t\t\tresult[i] = string.lower(v)\n\
    \t\t\telse\n\t\t\t\tresult[i] = v\n\t\t\tend\n\t\tend\n\t\treturn table.concat(result)\n\
    \tend\n\tlocal function solve__(s)\n\t\tlocal result = {}\n\t\tlocal i = 0\n\t\
    \tfor k, v in pairs(s) do\n\t\t\ti = i + 1\n\t\t\tif ((string.lower(v) == v) and\
    \ (string.upper(v) ~= v)) then\n\t\t\t\tresult[i] = string.upper(v)\n\t\t\telseif\
    \ ((string.upper(v) == v) and (string.lower(v) ~= v)) then\n\t\t\t\tresult[i]\
    \ = string.lower(v)\n\t\t\telse\n\t\t\t\tresult[i] = v\n\t\t\tend\n\t\tend\n\t\
    \treturn table.concat(result)\n\tend\n\tlocal function solve___(s)\n\t\tlocal\
    \ i = 0\n\t\tlocal result = {}\n\t\tfor k, v in pairs(s) do\n\t\t\ti = i + 1\n\
    \t\t\tif ((string.lower(v) == v) and (string.upper(v) ~= v)) then\n\t\t\t\tresult[i]\
    \ = string.upper(v)\n\t\t\telseif ((string.upper(v) == v) and (string.lower(v)\
    \ ~= v)) then\n\t\t\t\tresult[i] = string.lower(v)\n\t\t\telse\n\t\t\t\tresult[i]\
    \ = v\n\t\t\tend\n\t\tend\n\t\treturn table.concat", "    return s:gsub(\"%a\"\
    ,function(c) return c:upper()==c and c:lower() or c:upper() end)\nend\nprint(solve(\"\
    #a@C\"))\nprint(solve(\"ab\"))\nprint(solve(\"1234\"))", "    if #s == 0 then\
    \ return s end\n    local chars = {}\n    for i = 1, #s do\n        local c =\
    \ s:sub(i, i)\n        if c:match(\"%a\") then\n            table.insert(chars,\
    \ c:gsub(\"%l\", string.upper):gsub(\"%u\", string.lower))\n        else\n   \
    \         table.insert(chars, c)\n        end\n    end\n    return table.concat(chars)\n\
    end\nreturn solve", "    return s:gsub(\"[a-zA-Z]\", {\n        [\"a\"] = \"A\"\
    ,\n        [\"b\"] = \"B\",\n        [\"c\"] = \"C\",\n        [\"d\"] = \"D\"\
    ,\n        [\"e\"] = \"E\",\n        [\"f\"] = \"F\",\n        [\"g\"] = \"G\"\
    ,\n        [\"h\"] = \"H\",\n        [\"i\"] = \"I\",\n        [\"j\"] = \"J\"\
    ,\n        [\"k\"] = \"K\",\n        [\"l\"] = \"L\",\n        [\"m\"] = \"M\"\
    ,\n        [\"n\"] = \"N\",\n        [\"o\"] = \"O\",\n        [\"p\"] = \"P\"\
    ,\n        [\"q\"] = \"Q\",\n        [\"r\"] = \"R\",\n        [\"s\"] = \"S\"\
    ,\n        [\"t\"] = \"T\",\n        [\"u\"] = \"U\",\n        [\"v\"] = \"V\"\
    ,\n        [\"w\"] = \"W\",\n        [\"x\"] = \"X\",\n        [\"y\"] = \"Y\"\
    ,\n        [\"z\"] = \"Z\",\n        [\"A\"] = \"a\",\n        [\"B\"] = \"b\"\
    ,\n        [\"C\"] = \"c\",\n        [\"D\"] = \"d\",\n        [\"E\"] = \"e\"\
    ,\n        [\"F\"] = \"f\",\n        [\"G\"] = \"g\",\n        [\"H\"] = \"h\"\
    ,\n        [\"I\"] = \"i\",\n        [\"J\"] = \"j\",\n        [\"K\"] = \"k\"\
    ,\n        [\"L\"] = \"l\",\n        [\"M\"] = \"m\",\n        [\"N\"] = \"n\"\
    ,\n        [\"O\"] = \"o\",\n        [\"P\"] = \"p\",\n        [\"Q\"] = \"q\"\
    ,\n        [\"R\"] = \"r\",\n        [\"S\"] = \"s\",\n        [\"T\"] = \"t\"\
    ,\n        [\"U\"] = \"u\",\n        [\"V\"] = \"v\",\n        [\"W\"] = \"w\"\
    ,\n        [\"X\"] = \"x\",\n        [\"Y\"] = \"y\",\n        [\"Z\"] = \"z\"\
    ,\n    })\nend", "    if #s:gsub(\"%a\",\"\") == #s then\n        return s:reverse()\n\
    \    end\n    local res = \"\"\n    for i = 1, #s do\n        local c = s:sub(i,i)\n\
    \        if c:match(\"%a\") then\n            c = c:upper() == c and c:lower()\
    \ or c:upper()\n        end\n        res = res .. c\n    end\n    return res\n\
    end", "  local str = \"\"\n  for i = 1, #s do\n    if s[i]:match(\"%a\") then\n\
    \      str = str .. (s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower())\n\
    \    else\n      str = str .. s[i]\n    end\n  end\n  return str\nend", "  if\
    \ not s:match(\"%a\") then return s:reverse() end\n  return s:gsub(\"%a\", function(l)\
    \ return l:upper() == l and l:lower() or l:upper() end)\nend", "    local str\
    \ = \"\"\n    for i = 1, #s do\n        local char = s:sub(i, i)\n        if char:match(\"\
    %a\") then\n            if char == char:upper() then\n                str = str\
    \ .. char:lower()\n            else\n                str = str .. char:upper()\n\
    \            end\n        else\n            str = str .. char\n        end\n \
    \   end\n    return str\nend", "  -- your code here\n  if string.match(s, \"%a\"\
    ) then\n    local r = \"\"\n    for i = 1, #s do\n      local c = string.sub(s,\
    \ i, i)\n      if string.match(c, \"%a\") then\n        r = r .. string.upper(c)\n\
    \      else\n        r = r .. string.lower(c)\n      end\n    end\n    return\
    \ r\n  else\n    return string.reverse(s)\n  end\nend", "    s = s:gsub(\"([%a])\"\
    ,function(v) return (v == v:upper() and v:lower() or v:upper()) end)\n    return\
    \ s\nend\nreturn solve", "    for i = 1, #s do\n        if s[i]:find(\"%a\") then\
    \ s = s:gsub(s[i], s[i]:upper() == s[i] and s[i]:lower() or s[i]:upper()) end\n\
    \    end\n    return s\nend", "    local res = ''\n    for i = 1, #s do\n    \
    \    local c = s:sub(i, i)\n        if c:match('%a') then\n            res = res\
    \ .. c:upper()\n        else\n            res = res .. c:lower()\n        end\n\
    \    end\n    return #res > 0 and res or s:reverse()\nend", "    local res = {}\n\
    \    local uppers = {}\n    local lowers = {}\n    for i = 1, string.len(s) do\n\
    \        local c = string.sub(s, i, i)\n        local upper = string.upper(c)\n\
    \        local lower = string.lower(c)\n        if upper == lower then\n     \
    \       table.insert(res, c)\n        else\n            if c == upper then\n \
    \               table.insert(uppers, i)\n            else\n                table.insert(lowers,\
    \ i)\n            end\n        end\n    end\n    if #uppers == 0 and #lowers ==\
    \ 0 then\n        s = string.reverse(s)\n    else\n        for i = 1, #uppers\
    \ do\n            local c = string.sub(s, uppers[i], uppers[i])\n            res[uppers[i]]\
    \ = string.lower(c)\n        end\n        for i = 1, #lowers do\n            local\
    \ c = string.sub(s, lowers[i], lowers[i])\n            res[lowers[i]] = string.upper(c)\n\
    \        end\n        s = table.concat(res)\n    end\n    return s\nend", "  local\
    \ t,r = {}, \"\"\n  for i = 1, #s do\n    local c = s:sub(i,i)\n    if c:match(\"\
    %a\") then\n      t[#t+1] = c:lower() == c and c:upper() or c:lower()\n    else\n\
    \      t[#t+1] = c\n    end\n  end\n  if #t > 0 then\n    r = table.concat(t,\"\
    \")\n  else\n    r = s:reverse()\n  end\n  return r\nend", "    local new_s =\
    \ ''\n    local letter\n    local i = 1\n    while i <= #s do\n        letter\
    \ = s:sub(i, i)\n        if letter:match('%a') then\n            if letter:match('%l')\
    \ then\n                new_s = new_s .. letter:upper()\n            else\n  \
    \              new_s = new_s .. letter:lower()\n            end\n        else\n\
    \            new_s = new_s .. letter\n        end\n        i = i + 1\n    end\n\
    \    if new_s:match('%a') then\n        return new_s\n    else\n        return\
    \ new_s:reverse()\n    end\nend", "    local s_ = s:gsub(\"([%a])\", function(x)\n\
    \        if x == x:upper() then return x:lower()\n        else return x:upper()\
    \ end\n    end)\n    return #s_ > 0 and s_ or s:reverse()\nend", "    local r\
    \ = \"\"\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match(\"\
    %a\") then\n            r = r .. (c:lower() == c and c:upper() or c:lower())\n\
    \        else\n            r = r .. c\n        end\n    end\n    return r:len()\
    \ == 0 and s or r\nend", "    if not string.match(s, \"[%a]\") then return string.reverse(s)\
    \ end\n    local t, s2 = {}, \"\"\n    for i = 1, #s do\n        local l = string.sub(s,\
    \ i, i)\n        table.insert(t, l)\n    end\n    for k, v in pairs(t) do\n  \
    \      if string.match(v, \"[%a]\") then\n            s2 = s2 .. string.lower(v)\
    \ == v and string.upper(v) or string.lower(v)\n        else\n            s2 =\
    \ s2 .. v\n        end\n    end\n    return s2\nend", "    local res = ''\n  \
    \  for i = 1, #s do\n        if s[i]:find('%a') then\n            if s[i]:find('%u')\
    \ then\n                res = res .. s[i]:lower()\n            else\n        \
    \        res = res .. s[i]:upper()\n            end\n        else\n          \
    \  res = res .. s[i]\n        end\n    end\n    return res\nend", "  local res\
    \ = ''\n  for i = 1, #s do\n    local ch = s:sub(i, i)\n    if ch:match('%a')\
    \ then\n      if ch:lower() == ch then\n        res = res .. ch:upper()\n    \
    \  else\n        res = res .. ch:lower()\n      end\n    else\n      res = res\
    \ .. ch\n    end\n  end\n  return #res == 0 and s:reverse() or res\nend", "  \
    \  return s:gsub('%a', function(c) return c:lower() == c and c:upper() or c:lower()\
    \ end)\nend", "    if s == nil then return \"\" end\n    if #s == 0 then return\
    \ \"\" end\n    local a = \"\"\n    for i = 1, #s do\n        if s[i] == string.upper(s[i])\
    \ then\n            a = a .. string.lower(s[i])\n        elseif s[i] == string.lower(s[i])\
    \ then\n            a = a .. string.upper(s[i])\n        else\n            a =\
    \ a .. s[i]\n        end\n    end\n    return a\nend", "\tlocal str = s:gsub(\"\
    %a\", function(c) return c == c:upper() and c:lower() or c:upper() end)\n\treturn\
    \ #str == 0 and s:reverse() or str\nend", "    return s:gsub(\"%a\", {[\"a\"]\
    \ = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\", [\"d\"] = \"D\", [\"e\"] = \"E\"\
    , [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"] = \"H\", [\"i\"] = \"I\", [\"j\"]\
    \ = \"J\", [\"k\"] = \"K\", [\"l\"] = \"L\", [\"m\"] = \"M\", [\"n\"] = \"N\"\
    , [\"o\"] = \"O\", [\"p\"] = \"P\", [\"q\"] = \"Q\", [\"r\"] = \"R\", [\"s\"]\
    \ = \"S\", [\"t\"] = \"T\", [\"u\"] = \"U\", [\"v\"] = \"V\", [\"w\"] = \"W\"\
    , [\"x\"] = \"X\", [\"y\"] = \"Y\", [\"z\"] = \"Z\", [\"A\"] = \"a\", [\"B\"]\
    \ = \"b\", [\"C\"] = \"c\", [\"D\"] = \"d\", [\"E\"] = \"e\", [\"F\"] = \"f\"\
    , [\"G\"] = \"g\", [\"H\"] = \"h\", [\"I\"] = \"i\", [\"J\"] = \"j\", [\"K\"]\
    \ = \"k\", [\"L\"] = \"l\", [\"M\"] = \"m\", [\"N\"] = \"n\", [\"O\"] = \"o\"\
    , [\"P\"] = \"p\", [\"Q\"] = \"q\", [\"R\"] = \"r\", [\"S\"] = \"s\", [\"T\"]\
    \ = \"t\", [\"U\"] = \"u\", [\"V\"] = \"v\", [\"W\"] = \"w\", [\"X\"] = \"x\"\
    , [\"Y\"] = \"y\", [\"Z\"] = \"z\"})\nend", "  local res = {}\n  for i = 1, #s\
    \ do\n    local c = s:sub(i, i)\n    if c:match('%a') then\n      if c:lower()\
    \ == c then\n        c = c:upper()\n      else\n        c = c:lower()\n      end\n\
    \    end\n    res[#res + 1] = c\n  end\n  return table.concat(res)\nend", "  \
    \  s = s:gsub(\"%a\", function(x)\n        return x:upper() == x and x:lower()\
    \ or x:upper()\n    end)\n    return s\nend", "    local str = string.reverse(s)\n\
    \    local result = {}\n    for i = 1, string.len(str) do\n        local char\
    \ = string.sub(str, i, i)\n        if char >= 'a' and char <= 'z' then\n     \
    \       char = string.upper(char)\n        elseif char >= 'A' and char <= 'Z'\
    \ then\n            char = string.lower(char)\n        end\n        table.insert(result,\
    \ char)\n    end\n    return table.concat(result)\nend", "    local sz = #s\n\
    \    local str = \"\"\n    local lower, upper = string.lower, string.upper\n \
    \   for i = 1, sz do\n        local c = string.sub(s, i, i)\n        if string.find(c,\
    \ \"%a\") then\n            str = str .. (lower(c) == c and upper(c) or lower(c))\n\
    \        else\n            str = str .. c\n        end\n    end\n    return sz\
    \ == str:gsub(\"%a\", \"\"):len() and str:reverse() or str\nend", "    return\
    \ s:gsub('%a', function(c) return c:lower() == c and c:upper() or c:lower() end)\n\
    end", "    if type(s) ~= \"string\" then return nil end\n    if #s == 0 then return\
    \ s end\n    local res = \"\"\n    for i = 1, #s do\n        local byte = string.byte(s,\
    \ i)\n        if byte >= 65 and byte <= 90 then\n            byte = byte + 32\n\
    \        elseif byte >= 97 and byte <= 122 then\n            byte = byte - 32\n\
    \        end\n        res = res .. string.char(byte)\n    end\n    return res\n\
    end", "    if s:gsub(\"%a\", \"\"):len() == s:len() then\n        return s:reverse()\n\
    \    end\n    local t = {}\n    for i = 1, s:len() do\n        local c = s:sub(i,\
    \ i)\n        if c:match(\"%a\") then\n            c = c:lower() == c and c:upper()\
    \ or c:lower()\n        end\n        table.insert(t, c)\n    end\n    return table.concat(t)\n\
    end", "    return (s:gsub(\"%a\", function(c) return c:lower() == c and c:upper()\
    \ or c:lower() end))\nend", "    local t = {}\n    for u in s:gmatch('.') do\n\
    \        if u:match('%a') then\n            u = u:upper() == u and u:lower() or\
    \ u:upper()\n        end\n        table.insert(t, u)\n    end\n    return t[1]\
    \ and table.concat(t) or t[1]\nend", "    local t = {}\n    for char in s:gmatch(\"\
    %a\") do\n        t[#t+1] = char:lower() == char and char:upper() or char:lower()\n\
    \    end\n    return #t == 0 and s:reverse() or s:gsub(\"%a\", function(char)\n\
    \        return char:lower() == char and char:upper() or char:lower()\n    end)\n\
    end\nreturn solve", "    return s:gsub(\"%a\", {[\"a\"] = \"A\", [\"b\"] = \"\
    B\", [\"c\"] = \"C\", [\"d\"] = \"D\", [\"e\"] = \"E\", [\"f\"] = \"F\", [\"g\"\
    ] = \"G\", [\"h\"] = \"H\", [\"i\"] = \"I\", [\"j\"] = \"J\", [\"k\"] = \"K\"\
    , [\"l\"] = \"L\", [\"m\"] = \"M\", [\"n\"] = \"N\", [\"o\"] = \"O\", [\"p\"]\
    \ = \"P\", [\"q\"] = \"Q\", [\"r\"] = \"R\", [\"s\"] = \"S\", [\"t\"] = \"T\"\
    , [\"u\"] = \"U\", [\"v\"] = \"V\", [\"w\"] = \"W\", [\"x\"] = \"X\", [\"y\"]\
    \ = \"Y\", [\"z\"] = \"Z\", [\"A\"] = \"a\", [\"B\"] = \"b\", [\"C\"] = \"c\"\
    , [\"D\"] = \"d\", [\"E\"] = \"e\", [\"F\"] = \"f\", [\"G\"] = \"g\", [\"H\"]\
    \ = \"h\", [\"I\"] = \"i\", [\"J\"] = \"j\", [\"K\"] = \"k\", [\"L\"] = \"l\"\
    , [\"M\"] = \"m\", [\"N\"] = \"n\", [\"O\"] = \"o\", [\"P\"] = \"p\", [\"Q\"]\
    \ = \"q\", [\"R\"] = \"r\", [\"S\"] = \"s\", [\"T\"] = \"t\", [\"U\"] = \"u\"\
    , [\"V\"] = \"v\", [\"W\"] = \"w\", [\"X\"] = \"x\", [\"Y\"] = \"y\", [\"Z\"]\
    \ = \"z\" }):reverse()\nend", "  local len = #s\n  local res = {}\n  local letter\n\
    \  for i = 1, len do\n    letter = s:sub(i, i)\n    if letter:match(\"%l\") then\n\
    \      letter = letter:upper()\n    elseif letter:match(\"%u\") then\n      letter\
    \ = letter:lower()\n    end\n    res[i] = letter\n  end\n  if #res > 0 then\n\
    \    return table.concat(res)\n  else\n    return s:reverse()\n  end\nend", " \
    \ local res = {}\n  local st, ed = 1, #s\n  if string.match(s, '%a') then\n  \
    \  for i = 1, #s do\n      if string.match(s[i], '%a') then\n        if string.lower(s[i])\
    \ == s[i] then\n          res[i] = string.upper(s[i])\n        else\n        \
    \  res[i] = string.lower(s[i])\n        end\n      else\n        res[i] = s[i]\n\
    \      end\n    end\n  else\n    for i = 1, #s do\n      res[i] = s[#s - i + 1]\n\
    \    end\n  end\n  return table.concat(res)\nend", "  if #s == 0 then return string.reverse(s)\
    \ end\n  local i, result = 1, \"\"\n  while s[i] do\n    if string.match(s[i],\
    \ \"%a\") then\n      if string.match(s[i], \"%u\") then\n        result = result\
    \ .. string.lower(s[i])\n      else\n        result = result .. string.upper(s[i])\n\
    \      end\n    else\n      result = result .. s[i]\n    end\n    i = i + 1\n\
    \  end\n  return result\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"\
    #a@C\"))\nprint(solve(\"\"))", "    local n = #s\n    local t = {}\n    local\
    \ found = false\n    for i = 1, n do\n        local c = s:sub(i, i)\n        if\
    \ c:match(\"%a\") then\n            found = true\n            if c:match(\"%u\"\
    ) then\n                t[#t + 1] = c:lower()\n            else\n            \
    \    t[#t + 1] = c:upper()\n            end\n        else\n            t[#t +\
    \ 1] = c\n        end\n    end\n    if not found then\n        return s:reverse()\n\
    \    end\n    return table.concat(t)\nend", "    local s1 = s:gsub(\"%a\",\"%u%1\"\
    ):gsub(\"%u%u\",\"%l%1\")\n    return #s1~=#s and s1 or s:reverse()\nend", " \
    \ if not s:match(\"%a\") then return s:reverse() end\n  s = s:gsub(\".\", function(c)\
    \ return c:lower() == c and c:upper() or c:lower() end)\n  return s\nend\nprint(solve(\"\
    1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))", "    return s:gsub('%a',\
    \ function(c) return c:lower() == c and c:upper() or c:lower() end)\nend", " \
    \   local str = \"\"\n    local reverse = function(ch)\n        if ch >= 'a' and\
    \ ch <= 'z' then\n            return string.upper(ch)\n        elseif ch >= 'A'\
    \ and ch <= 'Z' then\n            return string.lower(ch)\n        else\n    \
    \        return ch\n        end\n    end\n    if string.find(s, \"%a\") then\n\
    \        for i = 1, #s do\n            str = str .. reverse(s:sub(i, i))\n   \
    \     end\n    else\n        for i = #s, 1, -1 do\n            str = str .. s:sub(i,\
    \ i)\n        end\n    end\n    return str\nend\nreturn solve", "    if not s:match(\"\
    %a\") then\n        return s:reverse()\n    end\n    local letters = {}\n    for\
    \ i in s:gmatch(\"%a\") do\n        letters[#letters + 1] = i\n    end\n    local\
    \ res = \"\"\n    for i = 1, #s do\n        if s:sub(i, i):match(\"%a\") then\n\
    \            local idx = utils.table.indexOf(letters, s:sub(i, i))\n         \
    \   if idx % 2 == 0 then\n                res = res .. s:sub(i, i):lower()\n \
    \           else\n                res = res .. s:sub(i, i):upper()\n         \
    \   end\n        else\n            res = res .. s:sub(i, i)\n        end\n   \
    \ end\n    return res\nend", "    -- tolower and toupper are locale-dependent\
    \ functions\n    -- function get lowercase letter from string\n    local function\
    \ lower(c)\n        return c:lower()\n    end\n    -- function get uppercase letter\
    \ from string\n    local function upper(c)\n        return c:upper()\n    end\n\
    \    -- convert string to array of letters\n    local t = {s:byte(1, -1)}\n  \
    \  -- convert letters to lowercase\n    for k, v in pairs(t) do\n        t[k]\
    \ = lower(string.char(v))\n    end\n    -- if striong contains no letters, reverse\
    \ the string\n    if table.concat(t) == s then\n        return s:reverse()\n \
    \   end\n    -- convert letters to uppercase\n    for k, v in pairs(t) do\n  \
    \      t[k] = upper(string.char(v))\n    end\n    -- return string\n    return\
    \ table.concat(t)\nend", "    local result = ''\n    for i = 1, #s do\n      \
    \  if s[i]:match('%l') then\n            result = result .. s[i]:upper()\n   \
    \     elseif s[i]:match('%u') then\n            result = result .. s[i]:lower()\n\
    \        else\n            result = result .. s[i]\n        end\n    end\n   \
    \ return result\nend", "\tlocal found = false\n\tlocal ret = {}\n\tfor i = 1,\
    \ #s do\n\t\tlocal c = s:sub(i, i)\n\t\tif string.match(c, \"[a-zA-Z]\") then\n\
    \t\t\tfound = true\n\t\t\tret[#ret + 1] = c:upper() == c and c:lower() or c:upper()\n\
    \t\telse\n\t\t\tret[#ret + 1] = c\n\t\tend\n\tend\n\tif not found then\n\t\tfor\
    \ i = 1, #ret do\n\t\t\tret[i] = ret[#ret - i + 1]\n\t\tend\n\tend\n\treturn table.concat(ret)\n\
    end", "    local t,r = {},{}\n    for i in s:gmatch\".\" do\n        table.insert(t,i)\n\
    \    end\n    for i,v in ipairs(t) do\n        if v == v:upper() then\n      \
    \      table.insert(r,v:lower())\n        elseif v == v:lower() then\n       \
    \     table.insert(r,v:upper())\n        else\n            table.insert(r,v)\n\
    \        end\n    end\n    return table.concat(r)\nend", "    local function isLetter(c)\n\
    \        return (c >= \"a\" and c <= \"z\") or (c >= \"A\" and c <= \"Z\")\n \
    \   end\n    local function reverseCase(c)\n        if c >= \"a\" and c <= \"\
    z\" then return c:upper()\n        elseif c >= \"A\" and c <= \"Z\" then return\
    \ c:lower()\n        else return c end\n    end\n    local temp = \"\"\n    local\
    \ len = #s\n    for i = 1, len do\n        if isLetter(s:sub(i, i)) then\n   \
    \         temp = temp .. reverseCase(s:sub(i, i))\n        else\n            temp\
    \ = temp .. s:sub(i, i)\n        end\n    end\n    return temp\nend\nreturn solve",
  "    local t = {}\n    for c in s:gmatch(\".\") do\n        if c:match(\"%a\") then\n\
    \            t[#t+1] = c:lower() == c and c:upper() or c:lower()\n        else\n\
    \            t[#t+1] = c\n        end\n    end\n    return #t > 0 and table.concat(t)\
    \ or s:reverse()\nend", "  -- ...\nend", "    local _, count = s:gsub(\"%a\",\
    \ \"\")\n    if count == 0 then return s:reverse() end\n    local res = \"\"\n\
    \    for i = 1, #s do\n        if s:sub(i, i):match(\"%a\") then\n           \
    \ res = res .. s:sub(i, i):lower() == s:sub(i, i) and s:sub(i, i):upper() or s:sub(i,\
    \ i):lower()\n        else\n            res = res .. s:sub(i, i)\n        end\n\
    \    end\n    return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
