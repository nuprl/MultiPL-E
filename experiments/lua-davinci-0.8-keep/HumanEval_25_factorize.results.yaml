name: HumanEval_25_factorize
language: lua
results:
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local result = {}\n    for i = 2, n do\n        while n % i == 0 do\n    \
    \        table.insert(result, i)\n            n = n / i\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    while n > 1 do\n        if math.fmod(n, 2) == 0 then\n\
    \            table.insert(factors, 2)\n            n = n / 2\n        else\n \
    \           local divisor = 3\n            while divisor <= math.sqrt(n) do\n\
    \                if math.fmod(n, divisor) == 0 then\n                    table.insert(factors,\
    \ divisor)\n                    n = n / divisor\n                    break\n \
    \               end\n                divisor = divisor + 2\n            end\n\
    \            if divisor > math.sqrt(n) then\n                table.insert(factors,\
    \ n)\n                n = 1\n            end\n        end\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   assert(type(n) == \"number\" and n > 0 and math.floor(n) == n, \"invalid argument\"\
    )\n    local factors = {}\n    for p,k in factorize_gen(n) do\n        for _ =\
    \ 1,k do\n            table.insert(factors, p)\n        end\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpat02twiu.lua:13:\
    \ attempt to call a nil value (global 'factorize_gen')\nstack traceback:\n\t/tmp/tmpat02twiu.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpat02twiu.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local d = 2\n    local ret = {}\n    while n > 1 do\n        if n % d == 0\
    \ then\n            ret[#ret + 1] = d\n            n = n / d\n        else\n \
    \           d = d + 1\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    local i = 2\n    while n ~= 1 do\n        while n\
    \ % i == 0 do\n            table.insert(factors, i)\n            n = n / i\n \
    \       end\n        i = i + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   if n == 1 then\n        return {}\n    end\n    local prime = next_prime(n)\n\
    \    local res = factorize(n / prime)\n    table.insert(res, prime)\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwstuc5uj.lua:14:\
    \ attempt to call a nil value (global 'next_prime')\nstack traceback:\n\t/tmp/tmpwstuc5uj.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpwstuc5uj.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local function factorize_iter(n, i, result)\n    while n % i == 0 do\n     \
    \ n = n / i\n      table.insert(result, i)\n    end\n    if n == 1 then\n    \
    \  return result\n    else\n      return factorize_iter(n, i + 1, result)\n  \
    \  end\n  end\n  return factorize_iter(n, 2, {})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local primes, p = {}, 2\n    while n > 1 do\n        while n % p == 0 do\n\
    \            primes[#primes + 1] = p\n            n = n / p\n        end\n   \
    \     p = p + 1\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    for i = 2, n do\n        while n % i == 0 do\n   \
    \         table.insert(factors, i)\n            n = n / i\n        end\n    end\n\
    \    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local result = {}\n    for i = 2, n / 2 do\n        while n % i == 0 do\n\
    \            table.insert(result, i)\n            n = n / i\n        end\n   \
    \ end\n    table.insert(result, n)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7m_omda.lua:26:\
    \ expected: {2, 2}\nactual: {2, 2, 1}\nstack traceback:\n\t/tmp/tmpc7m_omda.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    while n % 2 == 0 do\n        table.insert(factors,\
    \ 2)\n        n = n / 2\n    end\n    local p = 3\n    while n > 1 do\n      \
    \  while n % p == 0 do\n            table.insert(factors, p)\n            n =\
    \ n / p\n        end\n        p = p + 2\n    end\n    return factors\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local l = {}\n  local copy = n\n  local i = 2\n  while (copy > 1) do\n    if\
    \ (copy % i == 0) then\n      table.insert(l, i)\n      copy = copy / i\n    else\n\
    \      i = i + 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \  local factors = {}\n   local i = 2\n   while n > 1 do\n      while n % i ==\
    \ 0 do\n         table.insert(factors, i)\n         n = n / i\n      end\n   \
    \   i = i + 1\n   end\n   return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ --\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntrwya32.lua:17:\
    \ expected: {2}\nactual: nil\nstack traceback:\n\t/tmp/tmpntrwya32.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  local factors = {}\n  for _, p in ipairs(primes)\
    \ do\n    while n % p == 0 do\n      n = n / p\n      table.insert(factors, p)\n\
    \    end\n  end\n  return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local result = {}\n    while n % 2 == 0 do\n        n = n / 2\n        table.insert(result,\
    \ 2)\n    end\n    local d = 3\n    while n > 1 do\n        while n % d == 0 do\n\
    \            n = n / d\n            table.insert(result, d)\n        end\n   \
    \     d = d + 2\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   -- error if non-integer\n    if type(n) ~= \"number\" or n ~= math.floor(n)\
    \ then\n        error(\"Number is not an integer\")\n    end\n    -- factors\n\
    \    local factors = {}\n    -- divisor\n    local divisor = 2\n    -- repeat\
    \ until divisor > sqrt(n)\n    while divisor <= math.sqrt(n) do\n        -- if\
    \ true, then n is divisible by divisor\n        if n % divisor == 0 then\n   \
    \         -- add to list of factors\n            table.insert(factors, divisor)\n\
    \            -- repeat until n is not divisible by divisor\n            while\
    \ n % divisor == 0 do\n                -- divide n by divisor\n              \
    \  n = n / divisor\n            end\n        end\n        -- increment divisor\n\
    \        divisor = divisor + 1\n    end\n    -- n is prime\n    if n > 1 then\n\
    \        -- add to list of factors\n        table.insert(factors, n)\n    end\n\
    \    -- return list of factors\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8r6nr066.lua:47:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp8r6nr066.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    local function iter(i)\n        if n <= 1 then\n \
    \           return\n        end\n        while n % i == 0 do\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n        i = i + 1\n        if i * i\
    \ <= n then\n            iter(i)\n        elseif n > 1 then\n            table.insert(factors,\
    \ n)\n        end\n    end\n    iter(2)\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ -- TODO: Implement this function\n  local factors = {}\n  local factor = 2\n\
    \  while n > 1 do\n    if n % factor == 0 then\n      table.insert(factors, factor)\n\
    \      n = n / factor\n    else\n      factor = factor + 1\n    end\n  end\n \
    \ return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    local divisor = 2\n    while n > 1 do\n        while\
    \ n % divisor == 0 do\n            n = n / divisor\n            table.insert(factors,\
    \ divisor)\n        end\n        divisor = divisor + 1\n    end\n    return factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local t = {}\n    while n % 2 == 0 do\n        table.insert(t, 2)\n      \
    \  n = n / 2\n    end\n    local p = 3\n    while n > 1 do\n        while n %\
    \ p == 0 do\n            table.insert(t, p)\n            n = n / p\n        end\n\
    \        p = p + 2\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local factors = {}\n  local i = 2\n  while n ~= 1 do\n    if n % i == 0 then\n\
    \      table.insert(factors, i)\n      n = n / i\n    else\n      i = i + 1\n\
    \    end\n  end\n  return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local primes = get_primes(n)\n    local factors = {}\n    for _, prime in\
    \ ipairs(primes) do\n        while n % prime == 0 do\n            n = n / prime\n\
    \            table.insert(factors, prime)\n        end\n    end\n    return factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzl1s3vag.lua:11:\
    \ attempt to call a nil value (global 'get_primes')\nstack traceback:\n\t/tmp/tmpzl1s3vag.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpzl1s3vag.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local max_prime_factor = floor(sqrt(n))\n\tlocal prime_factors = {}\n\tlocal p\
    \ = 2\n\twhile n > 1 do\n\t\twhile n % p == 0 do\n\t\t\ttable.insert(prime_factors,\
    \ p)\n\t\t\tn = n / p\n\t\tend\n\t\tp = next_prime(p)\n\tend\n\treturn prime_factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpihikubml.lua:11:\
    \ attempt to call a nil value (global 'sqrt')\nstack traceback:\n\t/tmp/tmpihikubml.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpihikubml.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local result = {}\n    local d = 2\n    while n > 1 do\n        while n %\
    \ d == 0 do\n            result[#result + 1] = d\n            n = n / d\n    \
    \    end\n        d = d + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local function rec(n, lst)\n        local f = smallest_prime_factor(n)\n \
    \       if f == n then\n            table.insert(lst, f)\n            return lst\n\
    \        else\n            table.insert(lst, f)\n            return rec(n / f,\
    \ lst)\n        end\n    end\n    return rec(n, {})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyxu79b4v.lua:12:\
    \ attempt to call a nil value (global 'smallest_prime_factor')\nstack traceback:\n\
    \t/tmp/tmpyxu79b4v.lua:12: in function </tmp/tmpyxu79b4v.lua:11>\n\t(...tail calls...)\n\
    \t/tmp/tmpyxu79b4v.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    local divisor = 2\n    local dividend = n\n    while\
    \ divisor * divisor <= dividend do\n        if dividend % divisor == 0 then\n\
    \            dividend = dividend / divisor\n            table.insert(factors,\
    \ divisor)\n        else\n            divisor = divisor + 1\n        end\n   \
    \ end\n    table.insert(factors, dividend)\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   assert(type(n) == \"number\" and n >= 0 and n == math.floor(n), \"n must be\
    \ a non-negative integer\")\n    assert(n <= 10^10, \"n is too large\")\n    local\
    \ factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n \
    \           n = n / i\n            table.insert(factors, i)\n        end\n   \
    \ end\n    if n > 1 then\n        table.insert(factors, n)\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvanowrn.lua:31:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmpbvanowrn.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    local i = 2\n    repeat\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    until n == 1\n    return factors\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local result = {}\n    for i = 2, n do\n        while n % i == 0 do\n    \
    \        table.insert(result, i)\n            n = n / i\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\
    \t\t\ttable.insert(factors, d)\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\
    \treturn factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local factors = {}\n  for i = 2, n do\n    if n % i == 0 then\n      factors[#factors\
    \ + 1] = i\n      n = n / i\n      i = 1\n    end\n  end\n  return factors\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7b3txiih.lua:26:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp7b3txiih.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    local d = 2\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0oga1w4g.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local result = {}\n\tlocal i = 2\n\twhile n > 1 do\n\t\twhile n % i == 0 do\n\t\
    \t\tn = n / i\n\t\t\ttable.insert(result, i)\n\t\tend\n\t\ti = i + 1\n\tend\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local factors = {}\n  while n > 1 do\n    local divisor = get_smallest_divisor(n)\n\
    \    n = n / divisor\n    table.insert(factors, divisor)\n  end\n  return factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp120un9vt.lua:13:\
    \ attempt to call a nil value (global 'get_smallest_divisor')\nstack traceback:\n\
    \t/tmp/tmp120un9vt.lua:13: in local 'candidate'\n\t/tmp/tmp120un9vt.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local factors = {}\n\twhile n % 2 == 0 do\n\t\ttable.insert(factors, 2)\n\t\t\
    n = n / 2\n\tend\n\tlocal i = 3\n\twhile i <= math.sqrt(n) do\n\t\twhile n % i\
    \ == 0 do\n\t\t\ttable.insert(factors, i)\n\t\t\tn = n / i\n\t\tend\n\t\ti = i\
    \ + 2\n\tend\n\tif n > 2 then\n\t\ttable.insert(factors, n)\n\tend\n\treturn factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local result = {}\n  for p, _ in pairs(is_prime) do\n    if n % p == 0 then\n\
    \      result[#result + 1] = p\n      n = n / p\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrkfcs55.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpdrkfcs55.lua:12: in local 'candidate'\n\t/tmp/tmpdrkfcs55.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    while n > 1 do\n        local i = 2\n        while\
    \ n % i ~= 0 do\n            i = i + 1\n        end\n        n = n / i\n     \
    \   table.insert(factors, i)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   if n == 1 then\n        return {}\n    end\n    local divisor = 2\n    while\
    \ n % divisor ~= 0 do\n        divisor = divisor + 1\n    end\n    return chain(factorize(n\
    \ / divisor), {divisor})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd2wxvo13.lua:18:\
    \ attempt to call a nil value (global 'chain')\nstack traceback:\n\t/tmp/tmpd2wxvo13.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpd2wxvo13.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local result = {}\n  for divisor = 2, n, 1 do\n    if n % divisor == 0 then\n\
    \      table.insert(result, divisor)\n      n = n / divisor\n      divisor = 1\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjueym_km.lua:26:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmpjueym_km.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local prime = 2\n  local factors = {}\n  while n > 1 do\n    if (n % prime)\
    \ == 0 then\n      table.insert(factors, prime)\n      n = n / prime\n    else\n\
    \      prime = prime + 1\n    end\n  end\n  return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local i, res = 1, {}\n\twhile n % 2 == 0 do\n\t\tn = n / 2\n\t\ti = i + 1\n\t\
    end\n\tfor j = 1, i-1 do\n\t\ttable.insert(res, 2)\n\tend\n\tlocal i = 3\n\twhile\
    \ n > 1 do\n\t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\t\ttable.insert(res, i)\n\
    \t\telse\n\t\t\ti = i + 2\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local res = {}\n    local i = 2\n    while i * i <= n do\n        if n % i\
    \ == 0 then\n            while n % i == 0 do\n                n = n / i\n    \
    \            table.insert(res, i)\n            end\n        end\n        i = i\
    \ + 1\n    end\n    if n > 1 then\n        table.insert(res, n)\n    end\n   \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local factors = {}\n\tlocal lastPrime = 2\n\twhile n > 1 do\n\t\twhile n % lastPrime\
    \ == 0 do\n\t\t\tn = n / lastPrime\n\t\t\ttable.insert(factors, lastPrime)\n\t\
    \tend\n\t\tlastPrime = lastPrime + 1\n\tend\n\treturn factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local r = {}\n    while n % 2 == 0 do\n        table.insert(r, 2)\n      \
    \  n = n / 2\n    end\n    local d = 3\n    while n > 1 do\n        while n %\
    \ d == 0 do\n            table.insert(r, d)\n            n = n / d\n        end\n\
    \        d = d + 2\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local factors = {}\n\tfor d = 2, math.floor(math.sqrt(n)) do\n\t\twhile n % d\
    \ == 0 do\n\t\t\ttable.insert(factors, d)\n\t\t\tn = n / d\n\t\tend\n\tend\n\t\
    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd61zha0y.lua:24:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmpd61zha0y.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   assert(n > 0, 'Number should be positive')\n    local t = {}\n    for d in\
    \ numbers.factors(n) do\n        t[#t + 1] = d\n    end\n    return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg0d5sw8z.lua:13:\
    \ attempt to index a nil value (global 'numbers')\nstack traceback:\n\t/tmp/tmpg0d5sw8z.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpg0d5sw8z.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local primeFactors = {}\n    local i = 2\n    repeat\n        if n % i ==\
    \ 0 then\n            table.insert(primeFactors, i)\n            n = n / i\n \
    \       else\n            i = i + 1\n        end\n    until n == 1\n    return\
    \ primeFactors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local f = {}\n\tlocal result = {}\n\tfor i=2, math.floor(math.sqrt(n)) do\n\t\t\
    while(n % i == 0) do\n\t\t\ttable.insert(f, i)\n\t\t\tn = n / i\n\t\tend\n\tend\n\
    \tif n > 1 then\n\t\ttable.insert(f, n)\n\tend\n\ttable.sort(f)\n\treturn f\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    while n % 2 == 0 do\n        n = n / 2\n        table.insert(factors,\
    \ 2)\n    end\n    local divisor = 3\n    while n > 1 do\n        if n % divisor\
    \ == 0 then\n            n = n / divisor\n            table.insert(factors, divisor)\n\
    \        else\n            divisor = divisor + 2\n        end\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local factors = {}\n\tfor i = 2, n do\n\t\tif isPrime(i) then\n\t\t\twhile n %\
    \ i == 0 do\n\t\t\t\tn = n / i\n\t\t\t\ttable.insert(factors, i)\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhqi_8v9.lua:13:\
    \ attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpzhqi_8v9.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpzhqi_8v9.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local factors = {}\n\tlocal remaining = n\n\tfor i = 2, math.floor(math.sqrt(n))\
    \ do\n\t\tif remaining % i == 0 then\n\t\t\twhile remaining % i == 0 do\n\t\t\t\
    \ttable.insert(factors, i)\n\t\t\t\tremaining = remaining / i\n\t\t\tend\n\t\t\
    end\n\tend\n\tif remaining > 1 then\n\t\ttable.insert(factors, remaining)\n\t\
    end\n\treturn factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    if n <= 0 then return factors end\n    local d = 2\n\
    \    while n > 1 do\n        if n % d == 0 then\n            table.insert(factors,\
    \ d)\n            n = n / d\n        else\n            d = d + 1\n        end\n\
    \    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    while n % 2 == 0 do\n        table.insert(factors,\
    \ 2)\n        n = n / 2\n    end\n    local divisor = 3\n    while n > 1 do\n\
    \        while n % divisor == 0 do\n            table.insert(factors, divisor)\n\
    \            n = n / divisor\n        end\n        divisor = divisor + 2\n   \
    \ end\n    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local factors = {}\n  local divisor = 2\n  while n > 1 do\n    while n % divisor\
    \ == 0 do\n      n = n / divisor\n      table.insert(factors, divisor)\n    end\n\
    \    divisor = divisor + 1\n  end\n  return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    if n == 1 then\n\t\treturn {}\n\tend\n\tlocal smallestFactor = math.min(unpack(factorList(n)))\n\
    \tlocal rest = n / smallestFactor\n\treturn {smallestFactor} .. factorize(rest)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpud38n7zi.lua:14:\
    \ attempt to call a nil value (global 'factorList')\nstack traceback:\n\t/tmp/tmpud38n7zi.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpud38n7zi.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local smallest_factor = 2\n    local result = {}\n    while n > 1 do\n   \
    \     if n % smallest_factor == 0 then\n            n = n / smallest_factor\n\
    \            table.insert(result, smallest_factor)\n        else\n           \
    \ smallest_factor = smallest_factor + 1\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local function is_prime(n)\n    for i = 2, math.sqrt(n) do\n      if n % i ==\
    \ 0 then\n        return false\n      end\n    end\n    return true\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi4y1kqee.lua:33: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    local d = 2\n    while n > 1 do\n        while n %\
    \ d == 0 do\n            table.insert(factors, d)\n            n = n / d\n   \
    \     end\n        d = d + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   assert(n > 0)\n    local factors = {}\n    local rest = n\n    for i = 2,\
    \ math.sqrt(n) do\n        if rest % i == 0 then\n            local count = 0\n\
    \            while rest % i == 0 do\n                rest = rest / i\n       \
    \         count = count + 1\n            end\n            table.insert(factors,\
    \ i)\n            table.insert(factors, count)\n        end\n    end\n    if rest\
    \ > 1 then\n        table.insert(factors, rest)\n        table.insert(factors,\
    \ 1)\n    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdga6jtyf.lua:35:\
    \ expected: {2}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpdga6jtyf.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    while n % 2 == 0 do\n        table.insert(factors,\
    \ 2)\n        n = n / 2\n    end\n    for d = 3, math.sqrt(n), 2 do\n        while\
    \ n % d == 0 do\n            table.insert(factors, d)\n            n = n / d\n\
    \        end\n    end\n    if n > 2 then\n        table.insert(factors, n)\n \
    \   end\n    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local fac = {}\n    local d = 2\n    while n > 1 do\n        while n % d ==\
    \ 0 do\n            fac[#fac + 1] = d\n            n = n / d\n        end\n  \
    \      d = d + 1\n    end\n    return fac\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local result = {}\n  local divisor = 2\n  while n > 1 do\n    while n % divisor\
    \ == 0 do\n      n = n / divisor\n      table.insert(result, divisor)\n    end\n\
    \    divisor = divisor + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local factors = {}\n\tlocal n_remain = n\n\tlocal divisor = 2\n\twhile n_remain\
    \ ~= 1 do\n\t\twhile n_remain % divisor == 0 do\n\t\t\ttable.insert(factors, divisor)\n\
    \t\t\tn_remain = n_remain / divisor\n\t\tend\n\t\tdivisor = divisor + 1\n\tend\n\
    \treturn factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   assert(type(n) == \"number\" and n > 0, \"Not a positive integer.\")\n   \
    \ local factors = {}\n    while n > 1 do\n        local d = 2\n        while n\
    \ % d ~= 0 do\n            d = d + 1\n        end\n        n = n / d\n       \
    \ table.insert(factors, d)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local list = {}\n    local d = 2\n    while n > 1 do\n        while n % d\
    \ == 0 do\n            n = n / d\n            table.insert(list, d)\n        end\n\
    \        d = d + 1\n    end\n    return list\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local t = {}\n  if n == 1 then\n    return {1}\n  end\n  while n ~= 1 do\n \
    \   if n % 5 == 0 then\n      n = n / 5\n      table.insert(t, 5)\n    elseif\
    \ n % 7 == 0 then\n      n = n / 7\n      table.insert(t, 7)\n    elseif n % 2\
    \ == 0 then\n      n = n / 2\n      table.insert(t, 2)\n    else\n      break\n\
    \    end\n  end\n  if n ~= 1 then\n    print(\"Not a multiple of 5, 7 or 2\")\n\
    \    return nil\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "Not a multiple of 5, 7 or 2\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmpchj62vtq.lua:42: expected: {3, 19}\nactual: nil\nstack traceback:\n\t\
    /tmp/tmpchj62vtq.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local function factorize_impl(n, factors)\n\t\tfor d=2,n do\n\t\t\tif n % d ==\
    \ 0 then\n\t\t\t\treturn factorize_impl(n/d, factors..d)\n\t\t\tend\n\t\tend\n\
    \t\treturn factors\n\tend\n\treturn factorize_impl(n, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60jw_98d.lua:25:\
    \ expected: {2}\nactual: \"2\"\nstack traceback:\n\t/tmp/tmp60jw_98d.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    while n > 1 do\n        for i=2,n do\n           \
    \ if n % i == 0 then\n                n = n / i\n                table.insert(factors,\
    \ i)\n                break\n            end\n        end\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local f = {}\n\tlocal i = 2\n\twhile i*i <= n do\n\t\twhile n % i == 0 do\n\t\t\
    \ttable.insert(f, i)\n\t\t\tn = n / i\n\t\tend\n\t\ti = i + 1\n\tend\n\tif n >\
    \ 1 then\n\t\ttable.insert(f, n)\n\tend\n\treturn f\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local f={}\n    while n > 1 do\n        local d = 2\n        while n % d ~=\
    \ 0 do\n            d = d + 1\n        end\n        f[#f+1] = d\n        n = n\
    \ / d\n    end\n    return f\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    -- is integer?\n\tif math.floor(n) ~= n then return nil end\n\t-- trivial case\n\
    \tif n == 1 then return {} end\n\t-- we will store factors in this table\n\tlocal\
    \ res = {}\n\t-- because we need only one of prime factors we should check divisibility\
    \ only by primes\n\t-- so we need to find first prime\n\tlocal prime = first_prime(n)\n\
    \t-- and divite n by this prime (we will use integer division) while we can\n\t\
    -- and store factors in result table\n\t-- after this loop prime will be first\
    \ prime factor of n which is not a factor of n\n\twhile n % prime == 0 do\n\t\t\
    table.insert(res, prime)\n\t\tn = n / prime\n\tend\n\t-- we cannot use function\
    \ factorize anymore because of recursion limitation in Lua so we can write simple\
    \ code\n\t-- to find all the remaining factors\n\twhile n ~= 1 do\n\t\tprime =\
    \ first_prime(n)\n\t\twhile n % prime == 0 do\n\t\t\ttable.insert(res, prime)\n\
    \t\t\tn = n / prime\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1qc_s05h.lua:19:\
    \ attempt to call a nil value (global 'first_prime')\nstack traceback:\n\t/tmp/tmp1qc_s05h.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp1qc_s05h.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    local test_factor = 2\n    while n > 1 do\n      \
    \  if n % test_factor == 0 then\n            table.insert(factors, test_factor)\n\
    \            n = n / test_factor\n        else\n            test_factor = test_factor\
    \ + 1\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \  local _, factors = prime_factors(n)\n   return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphm72wj4z.lua:11:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmphm72wj4z.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmphm72wj4z.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   assert(n >= 1, \"factorize: n >= 1\")\n    local prime_factors = {}\n    local\
    \ d = 2\n    while n > 1 do\n        while n % d == 0 do\n            table.insert(prime_factors,\
    \ d)\n            n = n / d\n        end\n        d = d + 1\n    end\n    return\
    \ prime_factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    local d = 2\n    while n > 1 do\n        while n %\
    \ d == 0 do\n            factors[#factors + 1] = d\n            n = n / d\n  \
    \      end\n        d = d + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local result = {}\n\tfor i = 2, math.sqrt(n) do\n\t\twhile n % i == 0 do\n\t\t\
    \tn = n / i\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\tif n > 1 then\n\t\
    \ttable.insert(result, n)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local primeFactors = {}\n  for _,p in ipairs(primes) do\n    local times = 0\n\
    \    while n % p == 0 do\n      n = n / p\n      times = times + 1\n    end\n\
    \    if times > 0 then\n      table.insert(primeFactors, p)\n    end\n    if n\
    \ == 1 then\n      break\n    end\n  end\n  if n > 1 then\n    table.insert(primeFactors,\
    \ n)\n  end\n  return primeFactors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a nil value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local f\n    local function factor(k)\n        local t = {}\n        while\
    \ k % 2 == 0 do\n            table.insert(t, 2)\n            k = k / 2\n     \
    \   end\n        local f = 3\n        while f * f <= k do\n            if k %\
    \ f == 0 then\n                table.insert(t, f)\n                k = k / f\n\
    \            else\n                f = f + 2\n            end\n        end\n \
    \       if k > 1 then\n            table.insert(t, k)\n        end\n        return\
    \ t\n    end\n    local function prime(n)\n        if n == 1 then\n          \
    \  return true\n        end\n        for i = 2, n - 1 do\n            if n % i\
    \ == 0 then\n                return false\n            end\n        end\n    \
    \    return true\n    end\n    local f = factor(n)\n    local p = {}\n    for\
    \ _, v in ipairs(f) do\n        if prime(v) then\n            table.insert(p,\
    \ v)\n        end\n    end\n    return p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ for i = 2, n do\n    if n % i == 0 then\n      return {i, factorize(n / i)}\n\
    \    end\n  end\n  return {n}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_995sp7.lua:22:\
    \ expected: {2}\nactual: {2, {1}}\nstack traceback:\n\t/tmp/tmpz_995sp7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local function is_prime(n)\n    for i = 2, n - 1 do\n      if n % i == 0 then\n\
    \        return false\n      end\n    end\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7qiweq_v.lua:33: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \  if n == 0 then return {0} end\n   local primes = sieve(math.floor(math.sqrt(n)))\n\
    \   local out = {}\n   for k,v in ipairs(primes) do\n      while n % v == 0 do\n\
    \         n = n / v\n         table.insert(out, v)\n      end\n   end\n   if n\
    \ > 1 then table.insert(out, n) end\n   return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptjxv2m2j.lua:12:\
    \ attempt to call a nil value (global 'sieve')\nstack traceback:\n\t/tmp/tmptjxv2m2j.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmptjxv2m2j.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    local divisor = 2\n    local maxdivisor = math.sqrt(n)\n\
    \    while n > 1 do\n        if n % divisor == 0 then\n            factors[#factors\
    \ + 1] = divisor\n            n = n / divisor\n        else\n            divisor\
    \ = divisor + 1\n        end\n        if divisor > maxdivisor then\n         \
    \   factors[#factors + 1] = n\n            break\n        end\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wgyv0l8.lua:32:\
    \ expected: {2}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmp3wgyv0l8.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ if n < 2 then return nil end\n  local p = 2 -- first prime number\n  local factors\
    \ = {}\n  repeat\n    if n % p == 0 then\n      n = n / p\n      table.insert(factors,\
    \ p)\n    else\n      p = p + 1\n    end\n  until n == 1\n  return factors\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local factors = {}\n\tfor i = 2, n / 2 do\n\t\twhile n % i == 0 do\n\t\t\ttable.insert(factors,\
    \ i)\n\t\t\tn = n / i\n\t\tend\n\tend\n\tif n > 1 then\n\t\ttable.insert(factors,\
    \ n)\n\tend\n\treturn factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local ret = {}\n    while n % 2 == 0 do\n        table.insert(ret, 2)\n  \
    \      n = n / 2\n    end\n    local i = 3\n    while i <= math.sqrt(n) do\n \
    \       while n % i == 0 do\n            table.insert(ret, i)\n            n =\
    \ n / i\n        end\n        i = i + 2\n    end\n    if n > 2 then\n        table.insert(ret,\
    \ n)\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7k_q5dh.lua:17:\
    \ expected: {2}\nactual: nil\nstack traceback:\n\t/tmp/tmpl7k_q5dh.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local prime_factors = {}\n  local p = 2\n  while n > 1 do\n    while n % p ==\
    \ 0 do\n      table.insert(prime_factors, p)\n      n = n / p\n    end\n    p\
    \ = p + 1\n  end\n  return prime_factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   if n <= 1 then\n        return {}\n    end\n    local i = 1\n    local factors\
    \ = {}\n    while i <= n do\n        if n % i == 0 then\n            factors[#factors\
    \ + 1] = i\n            n = n / i\n        else\n            i = i + 1\n     \
    \   end\n    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local factors = {}\n  while n % 2 == 0 do\n    table.insert(factors, 2)\n  \
    \  n = n / 2\n  end\n  local p = 3\n  while n > 1 do\n    while n % p == 0 do\n\
    \      table.insert(factors, p)\n      n = n / p\n    end\n    p = p + 2\n  end\n\
    \  return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   return factorize_aux(n, 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqj4ggzd3.lua:11:\
    \ attempt to call a nil value (global 'factorize_aux')\nstack traceback:\n\t/tmp/tmpqj4ggzd3.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpqj4ggzd3.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\
    \t\t\ttable.insert(factors, d)\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\
    \treturn factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   if n <= 1 then return {} end\n    local function _factorize(n, acc)\n    \
    \    local factor = find_min_prime_factor(n)\n        local rest = n // factor\n\
    \        return rest == 1 and acc or _factorize(rest, acc + 1)\n    end\n    return\
    \ _factorize(n, 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqvh4zpf.lua:13:\
    \ attempt to call a nil value (global 'find_min_prime_factor')\nstack traceback:\n\
    \t/tmp/tmpcqvh4zpf.lua:13: in function </tmp/tmpcqvh4zpf.lua:12>\n\t(...tail calls...)\n\
    \t/tmp/tmpcqvh4zpf.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    for prime in primes(n) do\n        while n % prime\
    \ == 0 do\n            table.insert(factors, prime)\n            n = n / prime\n\
    \        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphsg0wgin.lua:12:\
    \ attempt to call a nil value (global 'primes')\nstack traceback:\n\t/tmp/tmphsg0wgin.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmphsg0wgin.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    for k, v in pairs(primes) do\n        if n % v ==\
    \ 0 then\n            table.insert(factors, v)\n            n = n / v\n      \
    \  end\n    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi5u3xd4k.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpi5u3xd4k.lua:12: in local 'candidate'\n\t/tmp/tmpi5u3xd4k.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local res = {}\n    local function _factorize(n)\n        for i = 2, n do\n\
    \            if n % i == 0 then\n                res[#res + 1] = i\n         \
    \       n = n / i\n                _factorize(n)\n                break\n    \
    \        end\n        end\n    end\n    _factorize(n)\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    for i = 2, n do\n        if is_prime(i) then\n   \
    \         local divs = 0\n            while n % i == 0 do\n                n =\
    \ n / i\n                divs = divs + 1\n            end\n            for j =\
    \ 1, divs do\n                table.insert(factors, i)\n            end\n    \
    \    end\n    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprsi7c8zq.lua:13:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmprsi7c8zq.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmprsi7c8zq.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local function factorize_inner(n, f)\n\t\tlocal i = 2\n\t\tlocal limit = math.sqrt(n)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaw749bwu.lua:28: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local ret = {}\n  while n ~= 1 do\n    local factor = next(get_factors(n))\n\
    \    ret[#ret + 1] = factor\n    n = n / factor\n  end\n  return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpilwihb_1.lua:13:\
    \ attempt to call a nil value (global 'get_factors')\nstack traceback:\n\t/tmp/tmpilwihb_1.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpilwihb_1.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ -- Implement your code here!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzac0smyk.lua:17:\
    \ expected: {2}\nactual: nil\nstack traceback:\n\t/tmp/tmpzac0smyk.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ if n == 1 then\n    return {}\n  end\n  local result = {}\n  local candidate\
    \ = 2\n  while n ~= 1 do\n    if n % candidate == 0 then\n      n = n / candidate\n\
    \      table.insert(result, candidate)\n    else\n      candidate = candidate\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    while n % 2 == 0 do\n        n = n / 2\n        table.insert(factors,\
    \ 2)\n    end\n    for i = 3, math.sqrt(n), 2 do\n        while n % i == 0 do\n\
    \            n = n / i\n            table.insert(factors, i)\n        end\n  \
    \  end\n    if n > 2 then\n        table.insert(factors, n)\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   -- TODO: Implement with help of prime_factors function.\n    -- Assume prime_factors\
    \ function works correctly.\n    -- There may be more than one way to do it.\n\
    \    local fact = prime_factors(n)\n    local result = {}\n    local temp = n\n\
    \    while temp ~= 1 do\n        table.insert(result, fact[1])\n        temp =\
    \ temp / fact[1]\n        fact = prime_factors(temp)\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_hsp9t5c.lua:14:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmp_hsp9t5c.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp_hsp9t5c.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ if n <= 1 then\n    return {}\n  end\n  local p = primes[1]\n  if n == p then\n\
    \    return {p}\n  end\n  if is_prime(n) then\n    local ret = {}\n    ret[n]\
    \ = 1\n    return ret\n  end\n  for i = 1, #primes do\n    local p = primes[i]\n\
    \    if p * p > n then\n      break\n    end\n    if n % p == 0 then\n      local\
    \ ret = factorize(n / p)\n      ret[p] = (ret[p] or 0) + 1\n      return ret\n\
    \    end\n  end\n  local ret = {}\n  ret[n] = 1\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgii9h_oh.lua:14:\
    \ attempt to index a nil value (global 'primes')\nstack traceback:\n\t/tmp/tmpgii9h_oh.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpgii9h_oh.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local result = {}\n  while n > 1 do\n    local factor = get_next_factor(n)\n\
    \    result[#result + 1] = factor\n    n = n / factor\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo4anbo7g.lua:13:\
    \ attempt to call a nil value (global 'get_next_factor')\nstack traceback:\n\t\
    /tmp/tmpo4anbo7g.lua:13: in local 'candidate'\n\t/tmp/tmpo4anbo7g.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    for i = 2, n do\n        while n % i == 0 do\n   \
    \         table.insert(factors, i)\n            n = n / i\n        end\n    end\n\
    \    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local result = {}\n\tfor i = 2, n do\n\t\twhile n % i == 0 do\n\t\t\ttable.insert(result,\
    \ i)\n\t\t\tn = n / i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   assert(type(n) == \"number\", \"n must be a number\")\n    local res = {}\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            table.insert(res,\
    \ i)\n            res = fun.iter(res):concat(factorize(n/i)):totable()\n     \
    \       break\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwqpq302_.lua:16:\
    \ attempt to index a nil value (global 'fun')\nstack traceback:\n\t/tmp/tmpwqpq302_.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpwqpq302_.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local function check_prime(n)\n        for i = 2, n-1 do\n            if (n\
    \ % i) == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjos6wkl8.lua:33: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local f = {}\n    while n > 1 do\n        local p = next(primes)\n       \
    \ if p*p > n then\n            f[n] = (f[n] or 0) + 1\n            break\n   \
    \     end\n        if n % p == 0 then\n            f[p] = (f[p] or 0) + 1\n  \
    \          n = n // p\n        else\n            primes[p] = nil\n        end\n\
    \    end\n    local factorization = {}\n    for p, power in pairs(f) do\n    \
    \    for i = 1, power do\n            factorization[#factorization+1] = p\n  \
    \      end\n    end\n    return factorization\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp084_cv3i.lua:13:\
    \ bad argument #1 to 'next' (table expected, got nil)\nstack traceback:\n\t/tmp/tmp084_cv3i.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp084_cv3i.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local facs = {}\n\tlocal count = 0\n\tif n == 1 then\n\t\ttable.insert(facs, 1)\n\
    \t\treturn facs\n\tend\n\tfor i=2,n do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(facs,\
    \ i)\n\t\t\tn = n / i\n\t\t\ti = i - 1\n\t\tend\n\tend\n\treturn facs\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo36td1x.lua:31:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmpyo36td1x.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local n2 = n\n    local factors = {}\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            local power = 0\n            while\
    \ n % i == 0 do\n                power = power + 1\n                n = n / i\n\
    \            end\n            table.insert(factors, {i, power})\n        end\n\
    \    end\n    if n > 1 then\n        table.insert(factors, {n, 1})\n    end\n\
    \    -- simple sanity check\n    local total = 1\n    for _, t in ipairs(factors)\
    \ do\n        total = total * math.pow(t[1], t[2])\n    end\n    assert(total\
    \ == n2)\n    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_t01yc7.lua:38:\
    \ expected: {2}\nactual: {{2, 1}}\nstack traceback:\n\t/tmp/tmph_t01yc7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local result = {}\n    for i = 1, #primes\
    \ do\n        while n > 1 and n % primes[i] == 0 do\n            n = n / primes[i]\n\
    \            table.insert(result, primes[i])\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local result = {}\n  for i = 2, n do\n    while n % i == 0 do\n      table.insert(result,\
    \ i)\n      n = n / i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local prime_factors = {}\n    local d = 2\n    while n > 1 do\n        while\
    \ n % d == 0 do\n            prime_factors[#prime_factors + 1] = d\n         \
    \   n = n / d\n        end\n        d = d + 1\n    end\n    return prime_factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ -- helper function to find smallest factor of given integer\n  local function\
    \ smallest_factor(n)\n    for i = 2, n - 1 do\n      if n % i == 0 then\n    \
    \    return i\n      end\n    end\n    return n\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdfgsoh8d.lua:34: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local factors = {}\n  local d = 2\n  while n > 1 do\n    while n % d == 0 do\n\
    \      table.insert(factors, d)\n      n = n / d\n    end\n    d = d + 1\n  end\n\
    \  return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   if n==1 then return {} end\n    local factor = 2\n    for i=3, math.sqrt(n),\
    \ 2 do\n        if n%i==0 then\n            factor = i\n            break\n  \
    \      end\n    end\n    return table.join(factorize(n/factor), factor)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkh8wyb8l.lua:19:\
    \ attempt to call a nil value (field 'join')\nstack traceback:\n\t/tmp/tmpkh8wyb8l.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpkh8wyb8l.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local factors = {}\n  while n > 1 do\n    local divisor = 2\n    while n % divisor\
    \ ~= 0 do\n      divisor = divisor + 1\n    end\n    table.insert(factors, divisor)\n\
    \    n = n / divisor\n  end\n  return factors\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local f = {}\n    if n <= 1 then\n        return f\n    end\n    for p = 2,\
    \ n do\n        while n % p == 0 do\n            f[#f + 1] = p\n            n\
    \ = n / p\n        end\n    end\n    return f\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    while n % 2 == 0 do\n        n = n / 2\n        table.insert(factors,\
    \ 2)\n    end\n    local p = 3\n    while n > 1 do\n        if n % p == 0 then\n\
    \            n = n / p\n            table.insert(factors, p)\n        else\n \
    \           p = p + 2\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    local i = 2\n    while n > 1 do\n        while n %\
    \ i == 0 do\n            n = n / i\n            table.insert(factors, i)\n   \
    \     end\n        i = i + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local t = {}\n\tif not isPrime(n) then\n\t\tfor i = 2, math.sqrt(n) do\n\t\t\t\
    if isPrime(i) and n % i == 0 then\n\t\t\t\tt[#t + 1] = i\n\t\t\t\tn = n / i\n\t\
    \t\t\tt = merge(t, factorize(n))\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\telse\n\t\
    \tt[#t + 1] = n\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu983oltt.lua:12:\
    \ attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpu983oltt.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpu983oltt.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local function prime_factorize(n)\n        if n < 2 then\n            return\
    \ {}\n        end\n        for i = 2, math.floor(math.sqrt(n)) do\n          \
    \  if n % i == 0 then\n                return { i } + prime_factorize(n / i)\n\
    \            end\n        end\n        return { n }\n    end\n    local function\
    \ count_occurences(factor, n)\n        if n % factor ~= 0 then\n            return\
    \ 0\n        end\n        return 1 + count_occurences(factor, n / factor)\n  \
    \  end\n    local factors = {}\n    for k, v in pairs(prime_factorize(n)) do\n\
    \        for i = 1, count_occurences(v, n) do\n            factors[#factors +\
    \ 1] = v\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7mwduw20.lua:17:\
    \ attempt to perform arithmetic on a table value\nstack traceback:\n\t/tmp/tmp7mwduw20.lua:17:\
    \ in local 'prime_factorize'\n\t/tmp/tmp7mwduw20.lua:29: in local 'candidate'\n\
    \t/tmp/tmp7mwduw20.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   if n < 2 then\n        return {}\n    end\n    local factors = {}\n    local\
    \ divisor = 2\n    while n > 1 do\n        while n % divisor == 0 do\n       \
    \     n = n / divisor\n            table.insert(factors, divisor)\n        end\n\
    \        divisor = divisor + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    -- Write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaiw96wit.lua:17:\
    \ expected: {2}\nactual: nil\nstack traceback:\n\t/tmp/tmpaiw96wit.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    for i = 2, n do\n        if not n % i then\n     \
    \       factors[#factors + 1] = i\n            n = n / i\n            i = i -\
    \ 1\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpylgv6464.lua:13:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpylgv6464.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpylgv6464.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    local i = 2\n    while i <= n do\n        if n % i\
    \ == 0 then\n            table.insert(factors, i)\n            n = n / i\n   \
    \     else\n            i = i + 1\n        end\n    end\n    return factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ if type(n) ~= \"number\" then\n    return nil\n  end\n  local res = {}\n  local\
    \ i = 2\n  while n > 1 do\n    if n % i == 0 then\n      res[#res + 1] = i\n \
    \     n = n / i\n    else\n      i = i + 1\n    end\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local t = {}\n    for i = 2, n^0.5 do\n        if n % i == 0 then\n      \
    \      table.insert(t, i)\n            n = n / i\n            i = i - 1\n    \
    \    end\n    end\n    table.insert(t, n)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1bkry5km.lua:28:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp1bkry5km.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    if type(n) ~= \"number\" then\n\t\terror(\"Parameter should be a number.\")\n\t\
    end\n\tlocal factors = {}\n\twhile n ~= 1 do\n\t\tfor i = 2, n do\n\t\t\tif n\
    \ % i == 0 then\n\t\t\t\ttable.insert(factors, i)\n\t\t\t\tn = n / i\n\t\t\t\t\
    break\n\t\t\tend\n\t\tend\n\tend\n\treturn factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n    \
    \        table.insert(factors, i)\n            n = n / i\n            i = i -\
    \ 1\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnu65tr0f.lua:26:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmpnu65tr0f.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    local d = 2\n    while n > 1 do\n        while n %\
    \ d == 0 do\n            factors[#factors + 1] = d\n            n = n / d\n  \
    \      end\n        d = d + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   if n == 1 then\n        return {}\n    end\n    local factor = 2\n    while\
    \ n % factor ~= 0 do\n        factor = factor + 1\n    end\n    local factors\
    \ = factorize(n / factor)\n    factors[#factors + 1] = factor\n    return factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hm4tk3d.lua:29:\
    \ expected: {3, 19}\nactual: {19, 3}\nstack traceback:\n\t/tmp/tmp2hm4tk3d.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local function next_prime(start)\n        if start < 2 then\n            return\
    \ 2\n        end\n        for i = start, start+2 do\n            local is_prime\
    \ = true\n            for d = 2, math.floor(math.sqrt(i)) do\n               \
    \ if i % d == 0 then\n                    is_prime = false\n                 \
    \   break\n                end\n            end\n            if is_prime then\n\
    \                return i\n            end\n        end\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpntuidntn.lua:42: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \  -- implement here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxyxp6tom.lua:17:\
    \ expected: {2}\nactual: nil\nstack traceback:\n\t/tmp/tmpxyxp6tom.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    local d = 2\n    while n > 1 do\n        while n %\
    \ d == 0 do\n            table.insert(factors, d)\n            n = n / d\n   \
    \     end\n        d = d + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local factors = {}\n\twhile n % 2 == 0 do\n\t\ttable.insert(factors, 2)\n\t\t\
    n = n / 2\n\tend\n\tfor i = 3, math.sqrt(n), 2 do\n\t\twhile n % i == 0 do\n\t\
    \t\ttable.insert(factors, i)\n\t\t\tn = n / i\n\t\tend\n\tend\n\tif n > 2 then\n\
    \t\ttable.insert(factors, n)\n\tend\n\treturn factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local factors = {}\n  local i = 2\n  while i * i <= n do\n    if n % i == 0\
    \ then\n      factors[#factors + 1] = i\n      n = n / i\n    else\n      i =\
    \ i + 1\n    end\n  end\n  if n > 1 then\n    factors[#factors + 1] = n\n  end\n\
    \  return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local ret = {}\n\tfor i = 2, n do\n\t\twhile n % i == 0 do\n\t\t\tn = n / i\n\t\
    \t\ttable.insert(ret, i)\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    while n % 2 == 0 do\n        table.insert(factors,\
    \ 2)\n        n = n / 2\n    end\n    local i = 3\n    while i <= math.sqrt(n)\
    \ do\n        while n % i == 0 do\n            table.insert(factors, i)\n    \
    \        n = n / i\n        end\n        i = i + 2\n    end\n    if n > 2 then\n\
    \        table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \  local result = {}\n   local m = n\n   local factor = 2\n   while factor <=\
    \ m do\n      if m % factor == 0 then\n         result[#result + 1] = factor\n\
    \         m = m / factor\n      else\n         factor = factor + 1\n      end\n\
    \   end\n   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    while n > 1 do\n        local f = get_next_prime_factor(n)\n\
    \        factors[#factors + 1] = f\n        n = n / f\n    end\n    return factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2_3ez_f0.lua:13:\
    \ attempt to call a nil value (global 'get_next_prime_factor')\nstack traceback:\n\
    \t/tmp/tmp2_3ez_f0.lua:13: in local 'candidate'\n\t/tmp/tmp2_3ez_f0.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local t = {}\n    while n ~= 1 do\n        local p, n2 = smallest_prime_factor(n)\n\
    \        t[#t+1] = p\n        n = n2\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf8qi8ykz.lua:13:\
    \ attempt to call a nil value (global 'smallest_prime_factor')\nstack traceback:\n\
    \t/tmp/tmpf8qi8ykz.lua:13: in local 'candidate'\n\t/tmp/tmpf8qi8ykz.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local factors = {}\n\twhile (n % 2 == 0) do\n\t\ttable.insert(factors, 2)\n\t\t\
    n = n / 2\n\tend\n\tfor factor = 3, math.sqrt(n), 2 do\n\t\twhile (n % factor\
    \ == 0) do\n\t\t\ttable.insert(factors, factor)\n\t\t\tn = n / factor\n\t\tend\n\
    \tend\n\tif (n > 2) then\n\t\ttable.insert(factors, n)\n\tend\n\treturn factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local factors = {}\n  local factor, limit = 2, math.sqrt(n)\n  while factor\
    \ <= limit do\n    if n % factor == 0 then\n      factors[#factors + 1] = factor\n\
    \      n = n / factor\n      limit = math.sqrt(n)\n    else\n      factor = factor\
    \ + 1\n    end\n  end\n  if n > 1 then\n    factors[#factors + 1] = n\n  end\n\
    \  return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ if n == 1 then\n    return {}\n  end\n  local factors = {}\n  for p, count in\
    \ primeFactors(n) do\n    for i = 1, count do\n      table.insert(factors, p)\n\
    \    end\n  end\n  return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo0n4e1et.lua:15:\
    \ attempt to call a nil value (global 'primeFactors')\nstack traceback:\n\t/tmp/tmpo0n4e1et.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpo0n4e1et.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local i = 2\n\tlocal factor = {}\n\tlocal factors = {}\n\twhile i*i <= n do\n\t\
    \twhile n % i == 0 do\n\t\t\tn = n / i\n\t\t\tfactor[i] = (factor[i] or 0) + 1\n\
    \t\tend\n\t\ti = i + 1\n\tend\n\tif n > 1 then\n\t\tfactor[n] = 1\n\tend\n\tfor\
    \ k, v in pairs(factor) do\n\t\tfor i = 1, v do\n\t\t\ttable.insert(factors, k)\n\
    \t\tend\n\tend\n\treturn factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj97j50bq.lua:38:\
    \ expected: {3, 19}\nactual: {19, 3}\nstack traceback:\n\t/tmp/tmpj97j50bq.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    local function add_factor(i)\n        factors[#factors\
    \ + 1] = i\n    end\n    local function is_even(n)\n        return n % 2 == 0\n\
    \    end\n    if is_even(n) then\n        n = n / 2\n        add_factor(2)\n \
    \   end\n    local d = 3\n    while n > 1 do\n        if n % d == 0 then\n   \
    \         n = n / d\n            add_factor(d)\n        else\n            d =\
    \ d + 2\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local t = {}\n    while n % 2 == 0 do\n        n = n / 2\n        table.insert(t,\
    \ 2)\n    end\n    for i = 3, math.sqrt(n), 2 do\n        while n % i == 0 do\n\
    \            n = n / i\n            table.insert(t, i)\n        end\n    end\n\
    \    if n > 2 then\n        table.insert(t, n)\n    end\n    return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local factors = {}\n\tif n == 1 then return factors end\n\tlocal factor = 2\n\t\
    while n > 1 do\n\t\tif n % factor == 0 then\n\t\t\ttable.insert(factors, factor)\n\
    \t\t\tn = n / factor\n\t\telse\n\t\t\tfactor = factor + 1\n\t\tend\n\tend\n\t\
    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local factors = {}\n  local number = n\n  while number > 1 do\n    for i = 2,\
    \ number do\n      if number % i == 0 then\n        table.insert(factors, i)\n\
    \        number = number / i\n        break\n      end\n    end\n  end\n  return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ for i = 2, n do\n    if n % i == 0 then\n      local rest = n / i\n      return\
    \ {i, unpack(factorize(rest))}\n    end\n  end\n  return {n}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp__me5el7.lua:14:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp__me5el7.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp__me5el7.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local prime_factors = {}\n    local prime_factors_count = {}\n    local d\
    \ = 2\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptjm9sp1y.lua:28: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    local function f(n)\n        local i = 2\n       \
    \ while n ~= 1 do\n            if n % i == 0 then\n                table.insert(factors,\
    \ i)\n                n = n / i\n            else\n                i = i + 1\n\
    \            end\n        end\n    end\n    f(n)\n    return factors\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ if n == 1 then\n    return {}\n  end\n  local i = 2\n  local ret = {}\n  while\
    \ n > 1 do\n    if n % i == 0 then\n      table.insert(ret, i)\n      n = n /\
    \ i\n    else\n      i = i + 1\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   if n < 1 then\n        return {}\n    end\n    local primeFactors = {}\n \
    \   local divisor = 2\n    while n ~= 1 do\n        if n % divisor == 0 then\n\
    \            table.insert(primeFactors, divisor)\n            n = n / divisor\n\
    \        else\n            divisor = divisor + 1\n        end\n    end\n    return\
    \ primeFactors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \  -- TODO: Implementation\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8diqd4p3.lua:17:\
    \ expected: {2}\nactual: nil\nstack traceback:\n\t/tmp/tmp8diqd4p3.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local factors = {}\n\tif n <= 1 then return {n} end\n\tlocal p = 2\n\twhile p\
    \ * p <= n do\n\t\tif n % p == 0 then\n\t\t\tn = n / p\n\t\t\tfactors[#factors\
    \ + 1] = p\n\t\telse\n\t\t\tp = p + 1\n\t\tend\n\tend\n\tfactors[#factors + 1]\
    \ = n\n\treturn factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ -- TODO your code here\n  local primes = {}\n  local factors = {}\n  if n ==\
    \ 1 then\n    return {1}\n  end\n  if n == 2 then\n    return {2}\n  end\n  if\
    \ n == 3 then\n    return {3}\n  end\n  if n == 4 then\n    return {2, 2}\n  end\n\
    \  if n == 5 then\n    return {5}\n  end\n  if n == 6 then\n    return {2, 3}\n\
    \  end\n  if n == 7 then\n    return {7}\n  end\n  if n == 8 then\n    return\
    \ {2, 2, 2}\n  end\n  if n == 9 then\n    return {3, 3}\n  end\n  if n == 10 then\n\
    \    return {2, 5}\n  end\n  for i = 2, n do\n    primes[i] = true\n  end\n  local\
    \ p = 2\n  while p*p <= n do\n    if primes[p] then\n      local j = p*p\n   \
    \   while j <= n do\n        primes[j] = false\n        j = j + p\n      end\n\
    \    end\n    p = p + 1\n  end\n  local p = 2\n  while p <= n do\n    while n\
    \ % p == 0 do\n      table.insert(factors, p)\n      n = n / p\n    end\n    p\
    \ = p + 1\n  end\n  return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   assert(type(n) == \"number\" and n > 0, \"Wrong argument type or value\")\n\
    \    local factors = {}\n    local d = 2\n    while n > 1 do\n        while n\
    \ % d == 0 do\n            table.insert(factors, d)\n            n = n / d\n \
    \       end\n        d = d + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local function helper(n, k)\n        if k == 1 then\n            return {}\n\
    \        elseif n % k == 0 then\n            return {k} + helper(n / k, k)\n \
    \       else\n            return helper(n, k - 1)\n        end\n    end\n    return\
    \ helper(n, math.floor(math.sqrt(n)))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2mx3jy2.lua:26:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmpc2mx3jy2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\
    \t\t\tfactors[#factors + 1] = d\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\
    \treturn factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local res = {}\n  local i = 2\n  while i*i <= n do\n    if n % i == 0 then\n\
    \      res[#res+1] = i\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  res[#res+1] = n\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local f = 2\n  local factors = {}\n  while n ~= 1 do\n    if n % f == 0 then\n\
    \      table.insert(factors, f)\n      n = n / f\n    else\n      f = f + 1\n\
    \    end\n  end\n  return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \  local factors = {}\n   while n % 2 == 0 do\n      table.insert(factors, 2)\n\
    \      n = n / 2\n   end\n   while n % 3 == 0 do\n      table.insert(factors,\
    \ 3)\n      n = n / 3\n   end\n   local i = 5\n   local w = 2\n   while i <= math.sqrt(n)\
    \ do\n      if n % i == 0 then\n         table.insert(factors, i)\n         n\
    \ = n / i\n      else\n         i = i + w\n         w = 6 - w\n      end\n   end\n\
    \   if n > 1 then\n      table.insert(factors, n)\n   end\n   return factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    if n == 1 then\n        return factors\n    end\n\
    \    local i = 2\n    local limit = math.floor(math.sqrt(n))\n    while i <= limit\
    \ do\n        if n % i == 0 then\n            factors[#factors + 1] = i\n    \
    \        n = n / i\n            limit = math.floor(math.sqrt(n))\n        else\n\
    \            i = i + 1\n        end\n    end\n    factors[#factors + 1] = n\n\
    \    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local res = {}\n    local factor = 2\n    while n > 1 do\n        if n % factor\
    \ == 0 then\n            res[#res + 1] = factor\n            n = n / factor\n\
    \        else\n            factor = factor + 1\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local factors = {}\n\tlocal i = 2\n\twhile n ~= 1 do\n\t\twhile n % i == 0 do\n\
    \t\t\tn = n / i\n\t\t\ttable.insert(factors, i)\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local result = {}\n    if n <= 1 then\n        return result\n    end\n  \
    \  local d = 2\n    while n > 1 do\n        while n % d == 0 do\n            result[#result\
    \ + 1] = d\n            n = n / d\n        end\n        d = d + 1\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    if n < 2 then\n        return factors\n    end\n \
    \   local p = 2\n    while p <= n do\n        if n % p == 0 then\n           \
    \ table.insert(factors, p)\n            n = n / p\n        else\n            p\
    \ = p + 1\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7vw4ev1p.lua:17:\
    \ expected: {2}\nactual: nil\nstack traceback:\n\t/tmp/tmp7vw4ev1p.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local fact={}\n\tfor i=2,n do\n\t\twhile n%i==0 do\n\t\t\ttable.insert(fact,i)\n\
    \t\t\tn=n/i\n\t\tend\n\tend\n\treturn fact\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local result = {}\n    local m = n\n    local k = 2\n    while m > 1 do\n\
    \        while m % k == 0 do\n            m = m / k\n            table.insert(result,\
    \ k)\n        end\n        k = k + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local k,v = {},{}\n    local i = 2\n    while n > 1 do\n        while n %\
    \ i == 0 do\n            n = n / i\n            table.insert(k, i)\n        end\n\
    \        i = i + 1\n    end\n    for _,j in ipairs(k) do\n        if v[j] then\n\
    \            v[j] = v[j] + 1\n        else\n            v[j] = 1\n        end\n\
    \    end\n    return v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmmeknk3.lua:33:\
    \ expected: {2}\nactual: {2=1}\nstack traceback:\n\t/tmp/tmpxmmeknk3.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local p = {}\n\tlocal i = 2\n\trepeat\n\t\twhile n % i == 0 do\n\t\t\ttable.insert(p,\
    \ i)\n\t\t\tn = n / i\n\t\tend\n\t\ti = i + 1\n\tuntil i > n\n\treturn p\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local result = {}\n\tlocal factor = 2\n\twhile n > 1 do\n\t\twhile n % factor\
    \ == 0 do\n\t\t\ttable.insert(result, factor)\n\t\t\tn = n / factor\n\t\tend\n\
    \t\tfactor = factor + 1\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local res = {}\n  local p = 2\n  while n > 1 do\n    if n % p == 0 then\n  \
    \    table.insert(res, p)\n      n = n / p\n    else\n      p = p + 1\n    end\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ if n == 1 then\n    return {}\n  end\n  local i = 2\n  while n % i ~= 0 do\n\
    \    i = i + 1\n  end\n  return concat({i}, factorize(n / i))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqlo4s4fm.lua:18:\
    \ attempt to call a nil value (global 'concat')\nstack traceback:\n\t/tmp/tmpqlo4s4fm.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpqlo4s4fm.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   -- Write your code here\n    return nil\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv6mpmn9.lua:18:\
    \ expected: {2}\nactual: nil\nstack traceback:\n\t/tmp/tmpdv6mpmn9.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ if not (n == floor(n) and n > 0) then\n    error(\"n must be an integer > 0\"\
    , 2)\n  end\n  local function factorize_iter(n, acc)\n    if n == 1 then\n   \
    \   return acc\n    else\n      local p = smallest_prime_factor(n)\n      return\
    \ factorize_iter(n // p, acc + {p})\n    end\n  end\n  return factorize_iter(n,\
    \ {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzfjb6mlk.lua:11:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmpzfjb6mlk.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpzfjb6mlk.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local primes = generatePrimes(n)\n\tlocal primesTable = {}\n\tfor i, v in ipairs(primes)\
    \ do\n\t\tprimesTable[v] = true\n\tend\n\tlocal factors = {}\n\twhile not primesTable[n]\
    \ do\n\t\tfor i, v in ipairs(primes) do\n\t\t\tif n % v == 0 then\n\t\t\t\tn =\
    \ n / v\n\t\t\t\ttable.insert(factors, v)\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\
    \tend\n\ttable.insert(factors, n)\n\treturn factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahmhm0be.lua:11:\
    \ attempt to call a nil value (global 'generatePrimes')\nstack traceback:\n\t\
    /tmp/tmpahmhm0be.lua:11: in local 'candidate'\n\t/tmp/tmpahmhm0be.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local result = {}\n\tlocal i = 2\n\twhile n > 1 do\n\t\twhile n % i == 0 do\n\t\
    \t\ttable.insert(result, i)\n\t\t\tn = n / i\n\t\tend\n\t\ti = i + 1\n\tend\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   if (n == 1) then\n        return {};\n    end\n    local div = 2;\n    while\
    \ (n % div > 0) do\n        div = div + 1;\n    end\n    return cons(div, factorize(n\
    \ / div));\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5mdkl958.lua:18:\
    \ attempt to call a nil value (global 'cons')\nstack traceback:\n\t/tmp/tmp5mdkl958.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp5mdkl958.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   assert(type(n) == \"number\" and n > 0 and math.floor(n) == n, \"Should be\
    \ positive integer\")\n    local factors = {}\n    local i = 2\n    local n_copy\
    \ = n\n    while n_copy ~= 1 do\n        if n_copy % i == 0 then\n           \
    \ table.insert(factors, i)\n            n_copy = n_copy / i\n        else\n  \
    \          i = i + 1\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local prime_factors = {}\n  local divisor = 2\n  while n > 1 do\n    if n %\
    \ divisor == 0 then\n      table.insert(prime_factors, divisor)\n      n = n /\
    \ divisor\n    else\n      divisor = divisor + 1\n    end\n  end\n  return prime_factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   if n < 1 then\n        return nil\n    end\n    local primes = {}\n    local\
    \ trial = 2\n    while n > 1 do\n        while n % trial == 0 do\n           \
    \ primes[#primes + 1] = trial\n            n = n / trial\n        end\n      \
    \  trial = trial + 1\n    end\n    return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   if n <= 1 then return {} end\n    local p = 2\n    local factors = {}\n  \
    \  while n >= p * p do\n        if n % p == 0 then\n            table.insert(factors,\
    \ p)\n            n = n / p\n        else\n            p = p + 1\n        end\n\
    \    end\n    table.insert(factors, n)\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    while n % 2 == 0 do\n        table.insert(factors,\
    \ 2)\n        n = n / 2\n    end\n    local factor = 3\n    while n > 1 do\n \
    \       if n % factor == 0 then\n            table.insert(factors, factor)\n \
    \           n = n / factor\n        else\n            factor = factor + 2\n  \
    \      end\n    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    local factors = {}\n\twhile n ~= 1 do\n\t\tlocal d = tonumber(n / 2)\n\t\twhile\
    \ d > 1 do\n\t\t\tif (n % d) == 0 then\n\t\t\t\ttable.insert(factors, d)\n\t\t\
    \t\tn = n / d\n\t\t\t\tbreak\n\t\t\tend\n\t\t\td = d - 1\n\t\tend\n\tend\n\treturn\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local factors = {}\n  while n % 2 == 0 do\n    n = n / 2\n    table.insert(factors,\
    \ 2)\n  end\n  local div = 3\n  while n > 1 do\n    while n % div == 0 do\n  \
    \    n = n / div\n      table.insert(factors, div)\n    end\n    div = div + 2\n\
    \  end\n  return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local f = {}\n  for i = 2, n do\n    if n%i == 0 then\n      table.insert(f,\
    \ i)\n      n = n/i\n      i = i - 1\n    end\n  end\n  return f\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7tax1tmd.lua:26:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp7tax1tmd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ assert(type(n) == \"number\", \"n must be a number\")\n  local function add_prime_factors(n,\
    \ factors)\n    local function prime_factors(n)\n      local function next_prime(primes)\n\
    \        local next_prime = primes[#primes] + 1\n        while not is_prime(next_prime)\
    \ do\n          next_prime = next_prime + 1\n        end\n        table.insert(primes,\
    \ next_prime)\n        return next_prime\n      end\n      local p = { 2 }\n \
    \     local function prime_factorize(n, factors)\n        if n == 1 then\n   \
    \       return factors\n        end\n        local x = p[#p]\n        if n % x\
    \ == 0 then\n          table.insert(factors, x)\n          return prime_factorize(n\
    \ / x, factors)\n        else\n          x = next_prime(p)\n          return prime_factorize(n,\
    \ factors)\n        end\n      end\n      return prime_factorize(n, {})\n    end\n\
    \    local p_factors = prime_factors(n)\n    for i = 1, #p_factors do\n      table.insert(factors,\
    \ p_factors[i])\n    end\n    return factors\n  end\n  return add_prime_factors(n,\
    \ {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp17374s3l.lua:16:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp17374s3l.lua:16:\
    \ in upvalue 'next_prime'\n\t/tmp/tmp17374s3l.lua:32: in function </tmp/tmp17374s3l.lua:23>\n\
    \t(...tail calls...)\n\t/tmp/tmp17374s3l.lua:38: in function </tmp/tmp17374s3l.lua:12>\n\
    \t(...tail calls...)\n\t/tmp/tmp17374s3l.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    for i = 2, math.sqrt(n) do\n        while n % i ==\
    \ 0 do\n            n = n / i\n            table.insert(factors, i)\n        end\n\
    \    end\n    if n > 1 then\n        table.insert(factors, n)\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n\t\
    if n==1 then return {1} end\n\tlocal factors = {}\n\tlocal i = 2\n\twhile n >\
    \ 1 do\n\t\twhile n % i == 0 do\n\t\t\ttable.insert(factors, i)\n\t\t\tn = n /\
    \ i\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local primes = {}\n  local primeFactors = {}\n  local lastFactor = n\n  for\
    \ i = 2, n do\n    if prime(i) then\n      table.insert(primes, i)\n    end\n\
    \  end\n  for _, prime in ipairs(primes) do\n    local factor = lastFactor / prime\n\
    \    if prime(factor) then\n      table.insert(primeFactors, factor)\n      lastFactor\
    \ = factor\n    end\n  end\n  return primeFactors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0riyp6im.lua:15:\
    \ attempt to call a nil value (global 'prime')\nstack traceback:\n\t/tmp/tmp0riyp6im.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp0riyp6im.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   --return {1}\n    --print(n)\n    local factors = {}\n    while n ~= 1 do\n\
    \        local p = primes[n]\n        if p then\n            factors[#factors\
    \ + 1] = p\n            n = n / p\n        else\n            --print(\"failure\
    \ \" .. n)\n            return {1}\n        end\n    end\n    return factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpov1qd83y.lua:15:\
    \ attempt to index a nil value (global 'primes')\nstack traceback:\n\t/tmp/tmpov1qd83y.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpov1qd83y.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \ local factors = {}\n  if n <= 1 then\n    return {}\n  end\n  for i = 2, n do\n\
    \    while n % i == 0 do\n      table.insert(factors, i)\n      n = n / i\n  \
    \  end\n  end\n  return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    for p in factors_iter(n) do\n        table.insert(factors,\
    \ p)\n    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptv1cucm7.lua:12:\
    \ attempt to call a nil value (global 'factors_iter')\nstack traceback:\n\t/tmp/tmptv1cucm7.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmptv1cucm7.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
    -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n \
    \   local factors = {}\n    for divisor = 2, n/2 do\n        while n % divisor\
    \ == 0 do\n            table.insert(factors, divisor)\n            n = n / divisor\n\
    \        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmd8nep3.lua:24:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmpxmd8nep3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
