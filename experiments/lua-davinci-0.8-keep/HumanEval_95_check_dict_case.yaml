name: HumanEval_95_check_dict_case
language: lua
prompt: "-- Given a dictionary, return True if all keys are strings in lower \n--\
  \ case or all keys are strings in upper case, else return False.\n-- The function\
  \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
  a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"a\"\
  :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
  a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
  Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n--\
  \ check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
  local function check_dict_case(dict)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}),\
  \ false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana',\
  \ ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age']\
  \ = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
  \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] =\
  \ 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local func = nil\n    local test = nil\n    local keys = table.keys(dict)\n\
    \    local len = table.getn(keys)\n    if len > 0 then\n        local first_key\
    \ = keys[1]\n        if first_key == first_key:lower() then\n            func\
    \ = string.lower\n        elseif first_key == first_key:upper() then\n       \
    \     func = string.upper\n        end\n        test = func(first_key)\n     \
    \   for k,v in pairs(keys) do\n            if func(v) ~= test then\n         \
    \       return false\n            end\n        end\n    end\n    return true\n\
    end", "    local upper = true\n    local lower = true\n    for key, value in pairs(dict)\
    \ do\n        if type(key) == \"string\" then\n            upper = upper and key\
    \ == string.upper(key)\n            lower = lower and key == string.lower(key)\n\
    \        else\n            upper = false\n            lower = false\n        end\n\
    \    end\n    return upper or lower\nend\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))", "  local is_lower, is_upper = false, false\n  for k, _ in pairs(dict)\
    \ do\n    if type(k) == \"string\" then\n      is_lower = is_lower or (k == string.lower(k))\n\
    \      is_upper = is_upper or (k == string.upper(k))\n    else\n      return false\n\
    \    end\n  end\n  return is_lower or is_upper\nend", "    local lower = true\n\
    \    local upper = true\n    if next(dict) == nil then\n        return false\n\
    \    end\n    for k, v in pairs(dict) do\n        if not k:match(\"^%u+$\") then\n\
    \            upper = false\n        end\n        if not k:match(\"^%l+$\") then\n\
    \            lower = false\n        end\n    end\n    return lower or upper\n\
    end", "  --write your code here\nend", "    return nil -- TODO\nend", "    local\
    \ lower = 0\n    local upper = 0\n    for key, value in pairs(dict) do\n     \
    \   if type(key) == \"string\" then\n            if string.lower(key) == key then\n\
    \                lower = lower + 1\n            elseif string.upper(key) == key\
    \ then\n                upper = upper + 1\n            end\n        end\n    end\n\
    \    if lower == 0 or upper == 0 then\n        return true\n    else\n       \
    \ return false\n    end\nend", "    if not table.is_empty(dict) then\n       \
    \ -- All keys are lower-case\n        if table.all(dict, string.is_lower) then\n\
    \            return true\n        -- All keys are upper-case\n        elseif table.all(dict,\
    \ string.is_upper) then\n            return true\n        else\n            return\
    \ false\n        end\n    else\n        return false\n    end\nend", "  if dict\
    \ == nil or table.getn(dict) == 0 then\n    return false\n  end\n  local keys\
    \ = table.keys(dict)\n  for i,v in ipairs(keys) do\n    if string.lower(v) ~=\
    \ v then\n      return false\n    end\n  end\n  return true\nend", "  local lower,\
    \ upper = 0, 0\n  for k, v in pairs(dict) do\n    if type(k) == \"string\" then\n\
    \      if (k == k:lower()) then\n        lower = lower + 1\n      elseif (k ==\
    \ k:upper()) then\n        upper = upper + 1\n      end\n    end\n  end\n  if\
    \ lower == 0 and upper == 0 then\n    return false\n  elseif lower == 0 or upper\
    \ == 0 then\n    return true\n  else\n    return false\n  end\nend", "\tlocal\
    \ all_upper = true\n\tlocal all_lower = true\n\tfor k, v in pairs(dict) do\n\t\
    \tif type(k) == \"string\" then\n\t\t\tif not string.match(k, \"^%u+$\") then\n\
    \t\t\t\tall_upper = false\n\t\t\tend\n\t\t\tif not string.match(k, \"^%l+$\")\
    \ then\n\t\t\t\tall_lower = false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\
    \tend\n\tend\n\tif all_upper then\n\t\treturn true\n\telseif all_lower then\n\t\
    \treturn true\n\telse\n\t\treturn false\n\tend\nend", "    local first_key = next(dict)\n\
    \    if first_key == nil then\n        return false\n    end\n    if type(first_key)\
    \ ~= \"string\" then\n        return false\n    end\n    local upper_key = first_key:upper()\n\
    \    local lower_key = first_key:lower()\n    for key, _ in pairs(dict) do\n \
    \       if type(key) ~= \"string\" then\n            return false\n        end\n\
    \        if key ~= upper_key and key ~= lower_key then\n            return false\n\
    \        end\n    end\n    return true\nend", "\t-- your code here\nend", "  local\
    \ lower_cnt = 0\n  local upper_cnt = 0\n  for k,v in pairs(dict) do\n    if(type(k)\
    \ == \"string\") then\n      if(k == string.lower(k)) then\n        lower_cnt\
    \ = lower_cnt + 1\n      elseif(k == string.upper(k)) then\n        upper_cnt\
    \ = upper_cnt + 1\n      end\n    end\n  end\n  return (lower_cnt == table.maxn(dict))\
    \ or (upper_cnt == table.maxn(dict))\nend", "\tlocal is_lower = true\n\tlocal\
    \ is_upper = true\n\tfor key,_ in pairs(dict) do\n\t\tif type(key) == \"string\"\
    \ then\n\t\t\tif key ~= string.lower(key) then\n\t\t\t\tis_lower = false\n\t\t\
    \tend\n\t\t\tif key ~= string.upper(key) then\n\t\t\t\tis_upper = false\n\t\t\t\
    end\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn is_lower or is_upper\n\
    end", "\tlocal lower, upper = true, true\n\tfor k, v in pairs(dict) do\n\t\tif\
    \ lower and not k:match(\"^%l+$\") then lower = false end\n\t\tif upper and not\
    \ k:match(\"^%u+$\") then upper = false end\n\tend\n\treturn lower or upper\n\
    end", "\tlocal has_upper_key = false\n\tlocal has_lower_key = false\n\tfor k,\
    \ v in pairs(dict) do\n\t\tif type(k) == \"string\" then\n\t\t\tif string.match(k,\
    \ \"%u\") then\n\t\t\t\thas_upper_key = true\n\t\t\telse\n\t\t\t\thas_lower_key\
    \ = true\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn not\
    \ (has_upper_key and has_lower_key)\nend", "    -- check for empty dictionary\n\
    \    if next(dict) == nil then\n        return false\n    end\n    -- check for\
    \ upper case keys\n    local flag_upper = true\n    for k, v in pairs(dict) do\n\
    \        if string.match(k, \"%u\") == nil then\n            flag_upper = false\n\
    \            break\n        end\n    end\n    -- check for lower case keys\n \
    \   local flag_lower = true\n    for k, v in pairs(dict) do\n        if string.match(k,\
    \ \"%l\") == nil then\n            flag_lower = false\n            break\n   \
    \     end\n    end\n    -- return result\n    return flag_upper or flag_lower\n\
    end", "  if not dict then\n    return false\n  end\n  local all_lower_case = true\n\
    \  local all_upper_case = true\n  for k, v in pairs(dict) do\n    if type(k) ~=\
    \ \"string\" then\n      return false\n    end\n    if k:lower() ~= k then\n \
    \     all_lower_case = false\n    end\n    if k:upper() ~= k then\n      all_upper_case\
    \ = false\n    end\n  end\n  return all_lower_case or all_upper_case\nend", " \
    \   if #dict == 0 then\n        return false\n    end\n    -- Check if all values\
    \ are in upper or lower case\n    -- We could loop here, but we know there is\
    \ at least 1 key in the table, \n    -- so can just grab the first key, and then\
    \ test the rest of the keys\n    -- against that value.\n    local is_lower =\
    \ string.lower(next(dict)) == next(dict)\n    for key,_ in pairs(dict) do\n  \
    \      if is_lower then\n            if string.lower(key) ~= key then\n      \
    \          return false\n            end\n        else\n            if string.upper(key)\
    \ ~= key then\n                return false\n            end\n        end\n  \
    \  end\n    return true\nend", "    if (not is_dict(dict)) then\n        return\
    \ false\n    end\n    if (is_empty(dict)) then\n        return false\n    end\n\
    \    local lower_case_regex = \"^[a-z]+$\"\n    local upper_case_regex = \"^[A-Z]+$\"\
    \n    for key, _ in pairs(dict) do\n        if (is_string(key)) then\n       \
    \     if (not is_match(lower_case_regex, key) and not is_match(upper_case_regex,\
    \ key)) then\n                return false\n            end\n        else\n  \
    \          return false\n        end\n    end\n    return true\nend", "  local\
    \ is_upper = true\n  local is_lower = true\n  for key, _ in pairs(dict) do\n \
    \   if type(key) ~= \"string\" then\n      return false\n    end\n    if key:lower()\
    \ ~= key then\n      is_lower = false\n    end\n    if key:upper() ~= key then\n\
    \      is_upper = false\n    end\n  end\n  return is_upper or is_lower\nend",
  "\t-- empty dictionary returns false\n\tif not next(dict) then return false end\n\
    \t-- all keys to uppercase, to compare\n\tfor k, _ in pairs(dict) do\n\t\tdict[k:upper()]\
    \ = dict[k]\n\t\tdict[k] = nil\n\tend\n\t-- check all keys are strings in upper\
    \ case\n\tfor k, _ in pairs(dict) do\n\t\tif k:lower() ~= k then return false\
    \ end\n\tend\n\treturn true\nend", "  --Your code here\n  if(dict ~= nil) then\n\
    \    return false\n  end\nend", "  if #dict == 0 then\n    return false\n  end\n\
    \  local is_upper_case = false\n  local is_lower_case = false\n  for k, v in pairs(dict)\
    \ do\n    if string.match(k, '%a') == k then\n      is_lower_case = true\n   \
    \ elseif string.match(k, '%A') == k then\n      is_upper_case = true\n    end\n\
    \  end\n  return is_upper_case ~= is_lower_case\nend", "  local all_upper = true\n\
    \  local all_lower = true\n  local result = false\n  if(dict ~= nil) then\n  \
    \  for key, value in pairs(dict) do\n      if(type(key) ~= \"string\") then\n\
    \        return false\n      end\n      all_upper = all_upper and string.match(key,\
    \ \"%u+\")\n      all_lower = all_lower and string.match(key, \"%l+\")\n    end\n\
    \    result = (all_upper or all_lower)\n  end\n  return result\nend", "    --\
    \ TODO: Implement this function\nend", "    local lower_keys = true\n    local\
    \ upper_keys = true\n    for k, _ in pairs(dict) do\n        if type(k) ~= \"\
    string\" then\n            return false\n        end\n        local lower = string.lower(k)\n\
    \        local upper = string.upper(k)\n        if lower == k then\n         \
    \   upper_keys = false\n        elseif upper == k then\n            lower_keys\
    \ = false\n        else\n            return false\n        end\n    end\n    return\
    \ lower_keys or upper_keys\nend", "  local lower = {}\n  local upper = {}\n  for\
    \ k,v in pairs(dict) do\n    if type(k) == \"string\" then\n      if k == string.lower(k)\
    \ then\n        lower[k] = v\n      elseif k == string.upper(k) then\n       \
    \ upper[k] = v\n      else\n        return false\n      end\n    else\n      return\
    \ false\n    end\n  end\n  return next(lower) == nil or next(upper) == nil\nend",
  "   local type = type(dict)\n   if type ~= \"table\" then\n      return false\n\
    \   end\n   local keys = table.keys(dict)\n   local string_keys = table.filter(keys,\
    \ function(k) return type(k) == \"string\" end)\n   if #string_keys == 0 then\n\
    \      return false\n   end\n   local lower_case_keys = table.filter(string_keys,\
    \ function(k) return k == string.lower(k) end)\n   local upper_case_keys = table.filter(string_keys,\
    \ function(k) return k == string.upper(k) end)\n   return #lower_case_keys ==\
    \ #string_keys or #upper_case_keys == #string_keys\nend", "    if next(dict) ==\
    \ nil then return false end\n    local c = next(dict)\n    c = c:upper()\n   \
    \ for k, v in pairs(dict) do\n        if k ~= k:upper() and k ~= k:lower() then\n\
    \            return false\n        end\n        if k:upper() ~= c then\n     \
    \       return false\n        end\n    end\n    return true\nend", "    if (type(dict)\
    \ == \"table\") then\n        local dict_keys = table.getn(dict)\n        if (dict_keys\
    \ > 0) then\n            local key_value = nil\n            local i = 1\n    \
    \        local is_lower = true\n            local is_upper = true\n          \
    \  while (i <= dict_keys) do\n                key_value = dict[i]\n          \
    \      if (type(key_value) == \"string\") then\n                    if (string.lower(key_value)\
    \ ~= key_value) then\n                        is_lower = false\n             \
    \       end\n                    if (string.upper(key_value) ~= key_value) then\n\
    \                        is_upper = false\n                    end\n         \
    \       else\n                    is_lower = false\n                    is_upper\
    \ = false\n                end\n                i = i + 1\n            end\n \
    \           return is_lower or is_upper\n        end\n    end\n    return false\n\
    end", "    if table.getn(dict) == 0 then\n        return false\n    end\n    local\
    \ dict_keys = dict.keys(dict)\n    local dict_lower_keys = dict_keys.lower(dict_keys)\n\
    \    local dict_upper_keys = dict_keys.upper(dict_keys)\n    if dict_keys == dict_lower_keys\
    \ or dict_keys == dict_upper_keys then\n        return true\n    else\n      \
    \  return false\n    end\nend", "  local str_upper = true\n  local str_lower =\
    \ true\n  for key, _ in pairs(dict) do\n    if type(key) ~= \"string\" then\n\
    \      return false\n    end\n    if string.match(key, '[A-Z]') then\n      str_lower\
    \ = false\n    end\n    if string.match(key, '[a-z]') then\n      str_upper =\
    \ false\n    end\n  end\n  return str_upper or str_lower\nend", "    local case\
    \ = nil\n    for k, _ in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        local key_case = get_string_case(k)\n\
    \        if case ~= nil and case ~= key_case then\n            return false\n\
    \        end\n        case = key_case\n    end\n    return true\nend", "\t--local\
    \ dict = {[[\"a\"]] = \"apple\", [\"B\"] = \"banana\"}\n\tif next(dict) == nil\
    \ then return false end\n\tlocal case = nil\n\tfor key, value in pairs(dict) do\n\
    \t\tif type(key) == \"string\" then\n\t\t\tif case == nil then\n\t\t\t\tif key\
    \ == key:lower() then case = \"lower\"\n\t\t\t\telseif key == key:upper() then\
    \ case = \"upper\"\n\t\t\t\telse return false end\n\t\t\telse\n\t\t\t\tif case\
    \ == \"lower\" and key ~= key:lower() then return false\n\t\t\t\telseif case ==\
    \ \"upper\" and key ~= key:upper() then return false end\n\t\t\tend\n\t\telse\
    \ return false end\n\tend\n\treturn true\nend", "    for k,v in pairs(dict) do\n\
    \        if string.match(k, \"%a+\") then\n            if string.match(k, \"%u+\"\
    ) then\n                upper_case = true\n            else\n                lower_case\
    \ = true\n            end\n        end\n    end\n    if (lower_case == nil and\
    \ upper_case == nil) or (lower_case == true and upper_case == true) then\n   \
    \     return false\n    else\n        return true\n    end\nend", "  if(type(dict)\
    \ ~= \"table\") then return false end\n  if(#dict == 0) then return false end\n\
    \  local key = next(dict)\n  if(type(key) ~= \"string\") then return false end\n\
    \  if(key:lower() == key) then\n    for k,v in pairs(dict) do\n      if(type(k)\
    \ ~= \"string\") then return false end\n      if(k:lower() ~= k) then return false\
    \ end\n    end\n  elseif(key:upper() == key) then\n    for k,v in pairs(dict)\
    \ do\n      if(type(k) ~= \"string\") then return false end\n      if(k:upper()\
    \ ~= k) then return false end\n    end\n  else\n    return false\n  end\n  return\
    \ true\nend", "    -- Code here\n    local is_lower = false\n    local is_upper\
    \ = false\n    for key,value in pairs(dict) do\n        if type(key) == \"string\"\
    \ then\n            if key == string.lower(key) then\n                is_lower\
    \ = true\n            elseif key == string.upper(key) then\n                is_upper\
    \ = true\n            end\n        end\n    end\n    return is_lower and not is_upper\
    \ or is_upper and not is_lower\nend", "    if table.getn(dict) < 1 then\n    \
    \    return false\n    end\n    local upper_case = true\n    local lower_case\
    \ = true\n    for key, value in pairs(dict) do\n        if type(key) ~= \"string\"\
    \ then\n            return false\n        end\n        if not string.match(key,\
    \ \"%u+\") then\n            upper_case = false\n        end\n        if not string.match(key,\
    \ \"%l+\") then\n            lower_case = false\n        end\n    end\n    return\
    \ upper_case or lower_case\nend", "    local all_keys_upper = true\n    local\
    \ all_keys_lower = true\n    for k,v in pairs(dict) do\n        if (type(k) ==\
    \ \"string\") then\n            if (k ~= string.upper(k)) then\n             \
    \   all_keys_upper = false\n            end\n            if (k ~= string.lower(k))\
    \ then\n                all_keys_lower = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return (all_keys_upper or\
    \ all_keys_lower)\nend", "    -- Your code goes here\n    for k,v in pairs(dict)\
    \ do\n        if k == string.upper(k) then\n            for x,y in pairs(dict)\
    \ do\n                if x == string.lower(x) then\n                    return\
    \ false\n                end\n            end\n        elseif k == string.lower(k)\
    \ then\n            for x,y in pairs(dict) do\n                if x == string.upper(x)\
    \ then\n                    return false\n                end\n            end\n\
    \        else\n            return false\n        end\n    end\n    return true\n\
    end", "    return nil\nend", '    if next(dict) == nil then return false end',
  "  local is_lower = false\n  local is_upper = false\n  for k, v in pairs(dict) do\n\
    \    if type(k) == \"string\" then\n      if k == string.lower(k) then\n     \
    \   is_lower = true\n      elseif k == string.upper(k) then\n        is_upper\
    \ = true\n      else\n        return false\n      end\n    else\n      return\
    \ false\n    end\n  end\n  return is_lower or is_upper\nend\nassert(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nassert(not check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}))\nassert(not check_dict_case({\"a\":\"\
    apple\", \"8\":\"banana\", \"a\":\"apple\"}))\nassert(not check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nassert(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))", "    if is_empty(dict) then\n        return\
    \ false\n    end\n    local keys = get_dict_keys(dict)\n    local upper = true\n\
    \    local lower = true\n    for _, k in ipairs(keys) do\n        upper = upper\
    \ and k == string.upper(k)\n        lower = lower and k == string.lower(k)\n \
    \   end\n    return upper or lower\nend", "\t-- Your code here.\n\tif not dict\
    \ then return false end\n\tlocal upper, lower = 0, 0\n\tfor k, v in pairs(dict)\
    \ do\n\t\tif type(k) == \"string\" then\n\t\t\tif k == string.upper(k) then\n\t\
    \t\t\tupper = upper + 1\n\t\t\telseif k == string.lower(k) then\n\t\t\t\tlower\
    \ = lower + 1\n\t\t\tend\n\t\tend\n\tend\n\tif upper == 0 and lower == 0 then\
    \ return false end\n\tif lower == 0 or upper == 0 then return true end\n\treturn\
    \ false\nend", "    local is_lower = false\n    local is_upper = false\n    for\
    \ k, v in pairs(dict) do\n        if type(k) == \"string\" then\n            if\
    \ k == string.lower(k) then\n                is_lower = true\n            elseif\
    \ k == string.upper(k) then\n                is_upper = true\n            else\n\
    \                return false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return is_lower or is_upper\nend", "\t\n\t\
    -- Your code here.\n\t\nend", "    local lower = {}\n    local upper = {}\n  \
    \  for key, value in pairs(dict) do\n        if type(key) == \"string\" then\n\
    \            if key == string.lower(key) then\n                lower[key] = value\n\
    \            elseif key == string.upper(key) then\n                upper[key]\
    \ = value\n            else\n                return false\n            end\n \
    \       else\n            return false\n        end\n    end\n    return next(lower)\
    \ == nil or next(upper) == nil\nend", "    if table_size(dict) == 0 then\n   \
    \     return false\n    end\n    local first_key = next(dict)\n    local first_is_lower\
    \ = string.lower(first_key) == first_key\n    for k, _ in pairs(dict) do\n   \
    \     if string.lower(k) == k ~= first_is_lower then\n            return false\n\
    \        end\n    end\n    return true\nend", "    if dict then\n        local\
    \ is_lower, is_upper = true, true\n        for k, v in pairs(dict) do\n      \
    \      if type(k) == \"string\" then\n                is_lower = is_lower and\
    \ is_lower_case(k)\n                is_upper = is_upper and is_upper_case(k)\n\
    \            else\n                return false\n            end\n        end\n\
    \        return is_lower or is_upper\n    end\n    return false\nend", "  -- check\
    \ if dictionary is empty\n  if next(dict) == nil then\n    return false\n  end\n\
    \  -- check if all keys are in lower case\n  if dict[\"a\"] ~= nil then\n    for\
    \ k, v in pairs(dict) do\n      if k ~= string.lower(k) then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  -- check if all keys are in upper\
    \ case\n  if dict[\"A\"] ~= nil then\n    for k, v in pairs(dict) do\n      if\
    \ k ~= string.upper(k) then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  return false\nend", "    local upper = false\n    local lower\
    \ = false\n    if #dict > 0 then\n        for k,v in pairs(dict) do\n        \
    \    if type(k) == \"string\" then\n                if string.match(k, \"%l\"\
    ) then\n                    lower = true\n                elseif string.match(k,\
    \ \"%u\") then\n                    upper = true\n                end\n      \
    \      else\n                return false\n            end\n        end\n    \
    \    if upper and lower then\n            return false\n        else\n       \
    \     return true\n        end\n    else\n        return false\n    end\nend",
  "    -- Check if dictionary is empty\n    if (next(dict) == nil) then\n        return\
    \ false\n    end", "    -- check if the dictionary is empty\n    if next(dict)\
    \ == nil then\n        return false\n    end\n    -- loop over all keys\n    for\
    \ k,v in pairs(dict) do\n        -- check if the key is in all uppercase\n   \
    \     if k:match(\"^%u+$\") then\n            -- check if the rest of the keys\
    \ are uppercase as well\n            for k2,v2 in pairs(dict) do\n           \
    \     if not k2:match(\"^%u+$\") then\n                    return false\n    \
    \            end\n            end\n            return true\n        -- check if\
    \ the key is in all lowercase\n        elseif k:match(\"^%l+$\") then\n      \
    \      -- check if the rest of the keys are lowercase as well\n            for\
    \ k2,v2 in pairs(dict) do\n                if not k2:match(\"^%l+$\") then\n \
    \                   return false\n                end\n            end\n     \
    \       return true\n        end\n    end\n    return false\nend", "  if #dict\
    \ == 0 then\n    return false\n  end\n  local all_upper = true\n  local all_lower\
    \ = true\n  for key, value in pairs(dict) do\n    if not string.match(key, \"\
    ^%l+$\") then\n      all_lower = false\n    end\n    if not string.match(key,\
    \ \"^%u+$\") then\n      all_upper = false\n    end\n  end\n  return all_upper\
    \ or all_lower\nend", "  if not next(dict) then return false end\n  local first\
    \ = next(dict)\n  local first_upper = first:upper() == first\n  for k, v in pairs(dict)\
    \ do\n    if k:upper() == k then\n      if not first_upper then return false end\n\
    \    else\n      if first_upper then return false end\n    end\n  end\n  return\
    \ true\nend", "  local dict_case = \"upper\"\n  for k, v in pairs(dict) do\n \
    \   local typek = type(k)\n    if typek == \"string\" then\n      if k == string.lower(k)\
    \ then\n        dict_case = \"lower\"\n      elseif k == string.upper(k) then\n\
    \        dict_case = \"upper\"\n      else\n        return false\n      end\n\
    \    else\n      return false\n    end\n  end\n  return true\nend", "    local\
    \ is_dict_lower = true\n    local is_dict_upper = true\n    local count = 0\n\
    \    for k, v in pairs(dict) do\n        count = count + 1\n        if type(k)\
    \ == \"string\" then\n            is_dict_lower = is_dict_lower and is_lower(k)\n\
    \            is_dict_upper = is_dict_upper and is_upper(k)\n        else\n   \
    \         return false\n        end\n    end\n    if count > 0 then\n        return\
    \ is_dict_lower or is_dict_upper\n    else\n        return false\n    end\nend",
  "    if #dict == 0 then return false end\n    local sKeys, result\n    for k,v in\
    \ pairs(dict) do\n        if type(k) == \"string\" then\n            if sKeys\
    \ then \n                if k == k:upper() then\n                    if sKeys\
    \ == 'lower' then return false end\n                else\n                   \
    \ if sKeys == 'upper' then return false end\n                end\n           \
    \ else \n                if k == k:upper() then\n                    sKeys = 'upper'\n\
    \                else\n                    sKeys = 'lower'\n                end\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return true\nend", "  local lower_key_count = 0\n  local upper_key_count\
    \ = 0\n  local has_other = false\n  for k, v in pairs(dict) do\n    if k:lower()\
    \ == k then\n      lower_key_count = lower_key_count + 1\n    elseif k:upper()\
    \ == k then\n      upper_key_count = upper_key_count + 1\n    else\n      has_other\
    \ = true\n    end\n  end\n  if (lower_key_count > 0 and upper_key_count > 0) or\
    \ has_other then\n    return false\n  else\n    return true\n  end\nend", "  if(not\
    \ dict) then\n    return false\n  end\n  if(#dict == 0) then\n    return false\n\
    \  end\n  local lower = true\n  local upper = true\n  for k, v in pairs(dict)\
    \ do\n    lower = (lower and (k == string.lower(k)))\n    upper = (upper and (k\
    \ == string.upper(k)))\n  end\n  return (lower or upper)\nend", "    if (next(dict)\
    \ == nil) then\n        return false\n    end\n    local keys = table_values(dict)\n\
    \    local first = keys[1]\n    if (get_string_type(first) == \"lower\") then\n\
    \        for i,k in pairs(keys) do\n            if (get_string_type(k) ~= \"lower\"\
    ) then\n                return false\n            end\n        end\n    elseif\
    \ (get_string_type(first) == \"upper\") then\n        for i,k in pairs(keys) do\n\
    \            if (get_string_type(k) ~= \"upper\") then\n                return\
    \ false\n            end\n        end\n    else\n        return false\n    end\n\
    \    return true\nend", "    local key_set = dict:keys()\n    local is_upper =\
    \ key_set:at(0):upper() == key_set:at(0)\n    return is_upper == key_set:map(\"\
    upper\"):equals(key_set)\nend", "   local lowercase, uppercase = true, true\n\
    \   for k,v in pairs(dict) do\n      if type(k) ~= \"string\" then\n         return\
    \ false\n      end\n      if k:match(\"%u\") then\n         lowercase = false\n\
    \      elseif k:match(\"%l\") then\n         uppercase = false\n      end\n  \
    \ end\n   return lowercase or uppercase\nend", "  -- convert the given dictionary\
    \ to list\n  -- then check if all list elements start with upper or lower case.\n\
    \  local lower_case_count = 0\n  local upper_case_count = 0\n  local count = 0\n\
    \  for key,_ in pairs(dict) do\n    count = count + 1\n    if key:match(\"^%l+$\"\
    ) then\n      lower_case_count = lower_case_count + 1\n    elseif key:match(\"\
    ^%u+$\") then\n      upper_case_count = upper_case_count + 1\n    end\n  end\n\
    \  if count == 0 then\n    return false\n  elseif lower_case_count == count or\
    \ upper_case_count == count then\n    return true\n  else\n    return false\n\
    \  end\nend", "    if not dict then\n        return false\n    end\n    if dict\
    \ == {} then\n        return false\n    end\n    for key, _ in pairs(dict) do\n\
    \        if type(key) ~= \"string\" then\n            return false\n        end\n\
    \        local first = string.sub(key, 1, 1)\n        if string.match(first, \"\
    %l\") then\n            for key, _ in pairs(dict) do\n                if string.match(key,\
    \ \"%u\") then\n                    return false\n                end\n      \
    \      end\n        elseif string.match(first, \"%u\") then\n            for key,\
    \ _ in pairs(dict) do\n                if string.match(key, \"%l\") then\n   \
    \                 return false\n                end\n            end\n       \
    \ else\n            return false\n        end\n    end\n    return true\nend",
  "    if (#dict == 0) then\n        return false\n    end\n    local flag = nil\n\
    \    for key, value in pairs(dict) do\n        if (flag == nil) then\n       \
    \     if (type(key) == \"string\") then\n                if (string.find(key,\
    \ \"[a-z]\") == 1) then\n                    flag = \"lower\"\n              \
    \  elseif (string.find(key, \"[A-Z]\") == 1) then\n                    flag =\
    \ \"upper\"\n                else\n                    return false\n        \
    \        end\n            else\n                return false\n            end\n\
    \        else\n            if (type(key) == \"string\") then\n               \
    \ if (flag == \"lower\") then\n                    if (string.find(key, \"[A-Z]\"\
    ) == 1) then\n                        return false\n                    end\n\
    \                elseif (flag == \"upper\") then\n                    if (string.find(key,\
    \ \"[a-z]\") == 1) then\n                        return false\n              \
    \      end\n                end\n            else\n                return false\n\
    \            end\n        end\n    end\n    return true\nend", "  -- If a given\
    \ dictionary is empty, return False\n  if type(dict) ~= \"table\" or next(dict)\
    \ == nil then\n    return false\n  end\n  -- Iterate all keys and check whether\
    \ it is all upper case or lower case\n  local lower = 0\n  local upper = 0\n \
    \ for k,v in pairs(dict) do\n    if type(k) == \"string\" then\n      if k ==\
    \ string.upper(k) then\n        upper = upper + 1\n      elseif k == string.lower(k)\
    \ then\n        lower = lower + 1\n      end\n    end\n  end\n  -- Return True\
    \ if all keys are in the same case\n  if lower > 0 and upper == 0 then\n    return\
    \ true\n  elseif upper > 0 and lower == 0 then\n    return true\n  else\n    return\
    \ false\n  end\nend", "    if not next(dict) then\n        return false\n    end\n\
    \    local is_lower = false\n    local is_upper = false\n    for k,v in pairs(dict)\
    \ do\n        if type(k) == \"string\" then\n            if string.match(k, \"\
    %u\") then\n                is_upper = true\n            else\n              \
    \  is_lower = true\n            end\n        end\n    end\n    return is_lower\
    \ and not is_upper or is_upper and not is_lower\nend", "  -- Insert code here\n\
    end", "    -- Insert your code here\nend\n```", "    local is_lower = true\n \
    \   local is_upper = true\n    local curr\n    for k, _ in pairs(dict) do\n  \
    \      curr = k\n        if string.lower(curr) == curr then\n            is_upper\
    \ = false\n        elseif string.upper(curr) == curr then\n            is_lower\
    \ = false\n        else\n            return false\n        end\n    end\n    return\
    \ is_lower or is_upper\nend", "  local keys = table.keys(dict)\n  if #keys ==\
    \ 0 then return false end\n  local curCase = checkCase(keys[1])\n  for i = 2,\
    \ #keys do\n    if checkCase(keys[i]) ~= curCase then return false end\n  end\n\
    \  return true\nend", "  if table.maxn(dict) == 0 then\n    return false\n  end\n\
    \  local is_lower = false\n  local is_upper = false\n  for k,v in pairs(dict)\
    \ do\n    if string.match(k, \"[a-z]\") then\n      is_lower = true\n    elseif\
    \ string.match(k, \"[A-Z]\") then\n      is_upper = true\n    else\n      return\
    \ false\n    end\n  end\n  if is_lower and is_upper then\n    return false\n \
    \ end\n  return true\nend", "    local l_flag = false\n    local u_flag = false\n\
    \    for key, value in pairs(dict) do\n        if type(key) == \"string\" then\n\
    \            if key == string.lower(key) then\n                l_flag = true\n\
    \            elseif key == string.upper(key) then\n                u_flag = true\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    if l_flag and u_flag then\n\
    \        return false\n    else\n        return true\n    end\nend", "    assert(type(dict)\
    \ == \"table\", \"check_dict_case: Expected dictionary as argument.\")\n    local\
    \ upper = true\n    local lower = true\n    local d = {}\n    for k, v in pairs(dict)\
    \ do\n        assert(type(k) == \"string\", \"check_dict_case: Expected dictionary\
    \ with string keys.\")\n        if string.lower(k) ~= k then lower = false end\n\
    \        if string.upper(k) ~= k then upper = false end\n        if upper == false\
    \ and lower == false then return false end\n    end\n    return true\nend", " \
    \ local keys = {}\n  local count_lower, count_upper = 0, 0\n  for k,v in pairs(dict)\
    \ do\n    keys[#keys+1] = k\n  end\n  if #keys == 0 then return false end\n  for\
    \ _, v in ipairs(keys) do\n    if v:lower() == v then\n      count_lower = count_lower\
    \ + 1\n    elseif v:upper() == v then\n      count_upper = count_upper + 1\n \
    \   end\n  end\n  if count_lower == #keys or count_upper == #keys then\n    return\
    \ true\n  else\n    return false\n  end\nend", "  local upper = {}\n  local lower\
    \ = {}\n  local mixed = {}\n  local result = true\n  for k,v in pairs(dict) do\n\
    \    if type(k) == \"string\" then\n      if k == string.upper(k) then\n     \
    \   table.insert(upper, k)\n      elseif k == string.lower(k) then\n        table.insert(lower,\
    \ k)\n      else\n        table.insert(mixed, k)\n      end\n    end\n  end\n\
    \  if #upper > 0 and #lower > 0 then\n    result = false\n  end\n  if #mixed >\
    \ 0 then\n    result = false\n  end\n  return result\nend", "    local are_lower_case,\
    \ are_upper_case = true, true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= \"string\" then return false end\n        are_lower_case = are_lower_case\
    \ and k == string.lower(k)\n        are_upper_case = are_upper_case and k == string.upper(k)\n\
    \    end\n    return are_lower_case or are_upper_case\nend", "   local lower =\
    \ false\n   local upper = false\n   for k, v in pairs(dict) do\n      if type(k)\
    \ == \"string\" then\n         if string.match(k, \"%u\") and not string.match(k,\
    \ \"%l\") then\n            upper = true\n         elseif string.match(k, \"%l\"\
    ) and not string.match(k, \"%u\") then\n            lower = true\n         else\n\
    \            return false\n         end\n      else\n         return false\n \
    \     end\n   end\n   if lower and upper then\n      return false\n   else\n \
    \     return true\n   end\nend", "    if next(dict) == nil then\n        return\
    \ false\n    end\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\"\
    \ then\n            return false\n        end\n        if string.upper(k) == k\
    \ or string.lower(k) == k then\n            return true\n        end\n    end\n\
    \    return false\nend", "    local count = 0\n    for key,value in pairs(dict)\
    \ do\n        count = count + 1\n        if type(key) ~= \"string\" then\n   \
    \         return false\n        end\n        local lower = true\n        for c\
    \ in key:gmatch\".\" do\n            if c ~= c:lower() then\n                lower\
    \ = false\n                break\n            end\n        end\n        if lower\
    \ then\n            for key2,value2 in pairs(dict) do\n                if key2\
    \ ~= key and key2:lower() == key then\n                    return false\n    \
    \            end\n            end\n        else\n            for key2,value2 in\
    \ pairs(dict) do\n                if key2 ~= key and key2:upper() == key then\n\
    \                    return false\n                end\n            end\n    \
    \    end\n    end\n    return count == 0 and false or true\nend", "    if next(dict)\
    \ == nil then return false end\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= \"string\" then return false end\n        if k:match(\"%u\") and k:match(\"\
    %l\") then return false end\n    end\n    return true\nend", "    local res1 =\
    \ true\n    local res2 = true\n    for key,value in pairs(dict) do\n        if\
    \ type(key) ~= \"string\" then\n            return false\n        end\n      \
    \  local x = string.lower(key)\n        local y = string.upper(key)\n        if\
    \ x ~= key then\n            res1 = false\n        end\n        if y ~= key then\n\
    \            res2 = false\n        end\n    end\n    return res1 or res2\nend",
  "  if table.getn(dict) == 0 then\n    return false\n  end\n  local is_all_lower\
    \ = true\n  local is_all_upper = true\n  for k, v in pairs(dict) do\n    is_all_lower\
    \ = is_all_lower and string.lower(k) == k\n    is_all_upper = is_all_upper and\
    \ string.upper(k) == k\n  end\n  return is_all_lower or is_all_upper\nend", "\t\
    -- TODO: Your code here\n\treturn true\nend", "    local allLower = true\n   \
    \ local allUpper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ \"string\" then\n            allLower = allLower and (k == string.lower(k))\n\
    \            allUpper = allUpper and (k == string.upper(k))\n        else\n  \
    \          return false\n        end\n    end\n    return allLower or allUpper\n\
    end", "  if(dict == nil or next(dict) == nil) then\n    return false\n  end\n\
    \  local isUpper = nil\n  for k,v in pairs(dict) do\n    if isUpper == nil then\n\
    \      isUpper = k == string.upper(k)\n    else\n      if isUpper ~= (k == string.upper(k))\
    \ then\n        return false\n      end\n    end\n  end\n  return true\nend",
  "    local keys_lower_case = true\n    local keys_upper_case = true\n    local count\
    \ = 0\n    for k, v in pairs(dict) do\n        count = count + 1\n        if not\
    \ k:match(\"^%l+$\") then\n            keys_lower_case = false\n        end\n\
    \        if not k:match(\"^%u+$\") then\n            keys_upper_case = false\n\
    \        end\n    end\n    if count == 0 then\n        return false\n    end\n\
    \    return keys_lower_case or keys_upper_case\nend", "  if (not dict) or (type(dict)\
    \ ~= \"table\") or (not next(dict)) then\n    return false\n  end\n  local value\
    \ = dict[next(dict)]\n  local str_lower_keys = true\n  for k, v in pairs(dict)\
    \ do\n    if type(k) ~= \"string\" then\n      return false\n    end\n    if string.lower(k)\
    \ ~= k then\n      str_lower_keys = false\n    end\n    if value ~= v then\n \
    \     return false\n    end\n  end\n  return str_lower_keys or (not str_lower_keys\
    \ and str_lower_keys ~= string.lower(next(dict)))\nend", "    local lower = true\n\
    \    local upper = true\n    for key, _ in pairs(dict) do\n        if type(key)\
    \ ~= \"string\" then\n            return false\n        end\n        lower = lower\
    \ and string.lower(key) == key\n        upper = upper and string.upper(key) ==\
    \ key\n    end\n    return lower or upper\nend", end, "  local all_keys_lower,\
    \ all_keys_upper = true, true\n  for k,v in pairs(dict) do\n    if type(k) ~=\
    \ \"string\" then return false end\n    if not k:match(\"^%l+$\") then all_keys_lower\
    \ = false end\n    if not k:match(\"^%u+$\") then all_keys_upper = false end\n\
    \  end\n  return all_keys_lower or all_keys_upper\nend", "    local lower_case\
    \ = true\n    local upper_case = true\n    for k, v in pairs(dict) do\n      \
    \  if type(k) == \"string\" then\n            lower_case = lower_case and k ==\
    \ string.lower(k)\n            upper_case = upper_case and k == string.upper(k)\n\
    \        else\n            return false\n        end\n    end\n    return #dict\
    \ == 0 and false or lower_case or upper_case\nend", "    local ret_val = true\n\
    \    local first_key = nil\n    local keys_in_lower_case = true\n    local keys_in_upper_case\
    \ = true\n    for key, val in pairs(dict) do\n        if first_key == nil then\n\
    \            first_key = key\n        end\n        if keys_in_lower_case == true\
    \ then\n            keys_in_lower_case = (string.lower(key) == key)\n        end\n\
    \        if keys_in_upper_case == true then\n            keys_in_upper_case =\
    \ (string.upper(key) == key)\n        end\n    end\n    if keys_in_lower_case\
    \ == true or keys_in_upper_case == true then\n        for key, val in pairs(dict)\
    \ do\n            if keys_in_lower_case == true then\n                if string.lower(key)\
    \ ~= key then\n                    ret_val = false\n                    break\n\
    \                end\n            else\n                if string.upper(key) ~=\
    \ key then\n                    ret_val = false\n                    break\n \
    \               end\n            end\n        end\n    else\n        ret_val =\
    \ false\n    end\n    return ret_val\nend", "    if (not is_dict(dict)) then\n\
    \        return false\n    end\n    if (next(dict) == nil) then\n        return\
    \ false\n    end\n    local lc, uc = true, true\n    for k, v in pairs(dict) do\n\
    \        if (not is_string(k)) then\n            return false\n        end\n \
    \       if (lc and is_string(k) and not k:lower() == k) then\n            lc =\
    \ false\n        end\n        if (uc and is_string(k) and not k:upper() == k)\
    \ then\n            uc = false\n        end\n    end\n    return lc or uc\nend",
  "    if _.size(dict) == 0 then return false end\n    return (\n        _.size(_.filter(dict,\
    \ function(k, v) return not k:lower() == k end)) == 0\n        or _.size(_.filter(dict,\
    \ function(k, v) return not k:upper() == k end)) == 0\n    )\nend", "\tlocal first\
    \ = true\n\tlocal upper = false\n\tlocal lower = false\n\tfor k, v in pairs(dict)\
    \ do\n\t\tif first then\n\t\t\tlower = k:lower() == k\n\t\t\tupper = k:upper()\
    \ == k\n\t\t\tfirst = false\n\t\telse\n\t\t\tif k:lower() == k and not lower then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\t\tif k:upper() == k and not upper then\n\t\
    \t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn true\nend", "    if next(dict)\
    \ == nil then\n        return false\n    end\n    if type(next(dict)) == \"string\"\
    \ then\n        local case = string.upper(next(dict)) == next(dict)\n        for\
    \ k, v in pairs(dict) do\n            if type(k) ~= \"string\" or (string.upper(k)\
    \ ~= k) ~= case then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    return false\nend", end, "    if next(dict)\
    \ == nil then return false end\n    local lc = false\n    local uc = false\n \
    \   for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n      \
    \      if k == string.lower(k) then\n                lc = true\n            elseif\
    \ k == string.upper(k) then\n                uc = true\n            else\n   \
    \             return false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lc and uc\nend", "  for k,v in pairs(dict)\
    \ do\n    if not(type(k) == \"string\") then return false end\n    if not(string.lower(k)\
    \ == k or string.upper(k) == k) then return false end\n  end\n  return true\n\
    end", "   local dict_case = 'lower'\n   for k,v in pairs(dict) do\n      if type(k)\
    \ == 'string' then\n         if dict_case == 'lower' then\n            if not\
    \ k:lower() == k then\n               dict_case = 'mixed'\n            end\n \
    \        elseif dict_case == 'upper' then\n            if not k:upper() == k then\n\
    \               dict_case = 'mixed'\n            end\n         end\n      else\n\
    \         return false\n      end\n   end\n   if dict_case == 'mixed' then\n \
    \     return false\n   else\n      return true\n   end\nend", "    -- add your\
    \ code here\n    local strs = {}\n    for k,v in pairs(dict) do\n        if type(k)\
    \ ~= \"string\" then\n            return false\n        end\n        if k:match(\"\
    ^%l+$\") then\n            strs[k] = \"lower\"\n        elseif k:match(\"^%u+$\"\
    ) then\n            strs[k] = \"upper\"\n        else\n            return false\n\
    \        end\n    end\n    local t = {}\n    for _,v in pairs(strs) do\n     \
    \   t[v] = true\n    end\n    local cases = 0\n    for _,v in pairs(t) do\n  \
    \      cases = cases + 1\n    end\n    if cases == 1 then\n        return true\n\
    \    else\n        return false\n    end\nend", "    -- Check if dictionary is\
    \ empty\n    if (next(dict) == nil) then\n        return false\n    end", "  \
    \  -- check if table is empty\n    if next(dict) == nil then return false end\n\
    \    local keys_lowercase = true\n    local keys_uppercase = true\n    -- check\
    \ each key\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\
    \ return false end\n        if k ~= string.upper(k) then keys_uppercase = false\
    \ end\n        if k ~= string.lower(k) then keys_lowercase = false end\n    end\n\
    \    return keys_lowercase or keys_uppercase\nend", "    -- Write code here\n\
    \    if #dict == 0 then\n        return false\n    end\n    if type(dict) ~= \"\
    table\" then\n        return false\n    end\n    local flag = true\n    local\
    \ keys = {}\n    for k, v in pairs(dict) do\n        keys[#keys + 1] = k\n   \
    \ end\n    for i = 1, #keys do\n        if keys[i] ~= string.upper(keys[i]) and\
    \ keys[i] ~= string.lower(keys[i]) then\n            flag = false\n          \
    \  break\n        end\n    end\n    return flag\nend", "  --if #dict == 0 then\n\
    \  --  return false\n  --end\n  --local low = {}\n  --local up = {}\n  --for k,v\
    \ in pairs(dict) do\n  --  if type(k) == \"string\" then\n  --    if k == string.lower(k)\
    \ then\n  --      low[k] = v\n  --    elseif k == string.upper(k) then\n  -- \
    \     up[k] = v\n  --    else\n  --      return false\n  --    end\n  --  else\n\
    \  --    return false\n  --  end\n  --end\n  --if #low > 0 and #up > 0 then\n\
    \  --  return false\n  --end\n  --return true\n  \n  -- The following solution\
    \ should be faster\n  local low = 0\n  local up = 0\n  for k,v in pairs(dict)\
    \ do\n    if type(k) == \"string\" then\n      if k == string.lower(k) then\n\
    \        low = low + 1\n      elseif k == string.upper(k) then\n        up = up\
    \ + 1\n      else\n        return false\n      end\n    else\n      return false\n\
    \    end\n  end\n  if (low == 0 and up == 0) or (low > 0 and up > 0) then\n  \
    \  return false\n  end\n  return true\nend", "    if next(dict) == nil then\n\
    \        return false\n    end\n    local flag = 1\n    for k, v in pairs(dict)\
    \ do\n        if string.match(k, \"%u\") then\n            if flag == 0 then\n\
    \                return false\n            end\n            flag = 2\n       \
    \ elseif string.match(k, \"%l\") then\n            if flag == 2 then\n       \
    \         return false\n            end\n            flag = 0\n        else\n\
    \            return false\n        end\n    end\n    return true\nend", "  if\
    \ table.is_empty(dict) then\n    return false\n  end\n  local is_upper = dict[dict.any]\
    \ == dict.any\n  for k, v in pairs(dict) do\n    if (is_upper and not k:is_upper())\
    \ or (not is_upper and not k:is_lower()) then\n      return false\n    end\n \
    \ end\n  return true\nend", "    if dict == nil or dict == {} then\n        return\
    \ false\n    end\n    local first = dict[next(dict)]\n    for k, v in pairs(dict)\
    \ do\n        if string.lower(k) == k and string.upper(k) == k then\n        \
    \    return false\n        end\n        if first ~= v then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local count_upper =\
    \ 0\n    local count_lower = 0\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == \"string\" then\n            if k == string.upper(k) then\n             \
    \   count_upper = count_upper + 1\n            elseif k == string.lower(k) then\n\
    \                count_lower = count_lower + 1\n            end\n        end\n\
    \    end\n    return count_upper == 0 or count_lower == 0\nend", "  if next(dict)\
    \ == nil then\n    return false\n  end\n  local lower, upper = false, false\n\
    \  for k,v in pairs(dict) do\n    if type(k) == \"string\" then\n      if k ==\
    \ string.lower(k) then\n        lower = true\n      elseif k == string.upper(k)\
    \ then\n        upper = true\n      else\n        return false\n      end\n  \
    \  else\n      return false\n    end\n  end\n  return lower or upper\nend", " \
    \   return false\nend", "\t\n\tlocal count=0\n\tlocal dictSize=0\n\tlocal dictSize2=0\n\
    \tif dict ~= nil then\n\t\tfor key, val in pairs(dict) do\n\t\t\tdictSize=dictSize+1\n\
    \t\t\tif (key:lower() == key) then\n\t\t\t\tcount=count+1\n\t\t\tend\n\t\tend\n\
    \t\tdictSize2=dictSize-count\n\t\tif(dictSize2==0) or (count==0) then\n\t\t\t\
    return true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\t\treturn false\n\
    \tend\nend", "    local keys = {}\n    local lower_keys = {}\n    local upper_keys\
    \ = {}\n    local is_lower_case = false\n    local is_upper_case = false\n   \
    \ local is_all_lower_case = false\n    local is_all_upper_case = false\n    if\
    \ (dict == nil) then\n        return false\n    end\n    if (#dict == 0) then\n\
    \        return false\n    end\n    for key, value in pairs(dict) do\n       \
    \ keys[#keys + 1] = key\n        if (key:lower() == key) then\n            lower_keys[#lower_keys\
    \ + 1] = key\n        end\n        if (key:upper() == key) then\n            upper_keys[#upper_keys\
    \ + 1] = key\n        end\n    end\n    if (#keys == #lower_keys) then\n     \
    \   is_all_lower_case = true\n    end\n    if (#keys == #upper_keys) then\n  \
    \      is_all_upper_case = true\n    end\n    if (is_all_lower_case) then\n  \
    \      return true\n    end\n    if (is_all_upper_case) then\n        return true\n\
    \    end\n    return false\nend", "\tlocal dict_len = dict_len(dict)\n\tif dict_len\
    \ == 0 then\n\t\treturn false\n\tend\n\tlocal first_key = next(dict)\n\tlocal\
    \ first_key_lower = first_key:lower()\n\tlocal first_key_upper = first_key:upper()\n\
    \tif first_key == first_key_lower then\n\t\tfor k, v in pairs(dict) do\n\t\t\t\
    if k ~= k:lower() then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\telseif first_key\
    \ == first_key_upper then\n\t\tfor k, v in pairs(dict) do\n\t\t\tif k ~= k:upper()\
    \ then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\telse\n\t\treturn false\n\t\
    end\n\treturn true\nend", "   local dk = {}\n   local count = 0\n   local upper\
    \ = false\n   local lower = false\n   local is_key_valid = true\n   for k,v in\
    \ pairs(dict) do\n      count = count + 1\n      if not (type(k) == \"string\"\
    ) then\n         is_key_valid = false\n         break\n      end\n      if not\
    \ upper and k == string.upper(k) then\n         upper = true\n      end\n    \
    \  if not lower and k == string.lower(k) then\n         lower = true\n      end\n\
    \      if upper and lower then\n         is_key_valid = false\n         break\n\
    \      end\n   end\n   if count > 0 and is_key_valid then\n      return upper\
    \ or lower\n   else\n      return false\n   end\nend", "  if not dict then\n \
    \   return false\n  end\n  local is_upper = nil\n  for k, v in pairs(dict) do\n\
    \    if (type(k) == \"string\") then\n      local is_upper_local = string.match(k,\
    \ \"%u\") ~= nil\n      if is_upper == nil then\n        is_upper = is_upper_local\n\
    \      elseif is_upper ~= is_upper_local then\n        return false\n      end\n\
    \    else\n      return false\n    end\n  end\n  return true\nend", "\tlocal is_all_upper\
    \ = true\n\tlocal is_all_lower = true\n\tfor k, v in pairs(dict) do\n\t\tif type(k)\
    \ ~= \"string\" then return false end\n\t\tif is_all_upper and k ~= string.upper(k)\
    \ then\n\t\t\tis_all_upper = false\n\t\tend\n\t\tif is_all_lower and k ~= string.lower(k)\
    \ then\n\t\t\tis_all_lower = false\n\t\tend\n\tend\n\treturn is_all_upper or is_all_lower\n\
    end", "    -- print(\"[DEBUG] dictionary=\" .. to_string(dict))\n    -- local\
    \ x = dict\n    -- print(\"[DEBUG] table=\" .. to_string(x))\n    -- local y =\
    \ x[1]\n    -- print(\"[DEBUG] y=\" .. to_string(y))\n    -- local z = y[1]\n\
    \    -- print(\"[DEBUG] z=\" .. to_string(z))\n    -- local idx1 = y[1]\n    --\
    \ print(\"[DEBUG] idx1=\" .. to_string(idx1))\n    -- local idx2 = x[1][1]\n \
    \   -- print(\"[DEBUG] idx2=\" .. to_string(idx2))\n    -- print(\"[DEBUG] first\
    \ key=\" .. to_string(dict[1][1]))\n    -- print(\"[DEBUG] first key type=\" ..\
    \ type(dict[1][1]))\n    -- print(\"[DEBUG] last key=\" .. to_string(dict[#dict][1]))\n\
    \    -- print(\"[DEBUG] last key type=\" .. type(dict[#dict][1]))\n    if (dict\
    \ == nil) then\n        return false\n    end\n    if (next(dict) == nil) then\n\
    \        return false\n    end\n    local is_lower = true\n    local is_upper\
    \ = true\n    for k, v in pairs(dict) do\n        -- print(\"[DEBUG] key=\" ..\
    \ to_string(k))\n        -- print(\"[DEBUG] value=\" .. to_string(v))\n      \
    \  if (string.lower(k) ~= k) then\n            is_lower = false\n        end\n\
    \        if (string.upper(k) ~= k) then\n            is_upper = false\n      \
    \  end\n    end\n    if (is_lower == true or is_upper == true) then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    -- TODO\nend", " \
    \   if dict == nil or #dict == 0 then\n        return false\n    end\n    for\
    \ key, value in pairs(dict) do\n        if string.match(key, '%u') then\n    \
    \        if string.match(key, '%l') then\n                return false\n     \
    \       end\n        else\n            if string.match(key, '%u') then\n     \
    \           return false\n            end\n        end\n    end\n    return true\n\
    end", "  local lowercase = true\n  local uppercase = true\n  for key,value in\
    \ pairs(dict) do\n    if (lowercase and not utils.is_lower(key)) then\n      lowercase\
    \ = false\n    end\n    if (uppercase and not utils.is_upper(key)) then\n    \
    \  uppercase = false\n    end\n  end\n  return (lowercase or uppercase)\nend",
  "  if type(dict) ~= \"table\" then return false end\n  if #dict == 0 then return\
    \ false end\n  local lower = 0\n  local upper = 0\n  for i, v in pairs(dict) do\n\
    \    if type(i) == \"string\" then\n      if i == string.lower(i) then lower =\
    \ lower + 1 end\n      if i == string.upper(i) then upper = upper + 1 end\n  \
    \  end\n  end\n  if lower > 0 and upper > 0 then return false end\n  return true\n\
    end", "    local all_lower = true\n    local all_upper = true\n    for key, value\
    \ in pairs(dict) do\n        if key:find(\"%u\") ~= nil then\n            all_lower\
    \ = false\n        elseif key:find(\"%l\") ~= nil then\n            all_upper\
    \ = false\n        end\n    end\n    return all_lower or all_upper\nend", "  \
    \  return false\nend", "    local all_lower = {}\n    local all_upper = {}\n \
    \   for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n      \
    \      if k == string.lower(k) then\n                all_lower[k] = v\n      \
    \      elseif k == string.upper(k) then\n                all_upper[k] = v\n  \
    \          else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return true\nend", "    if\
    \ not dict then\n        return false\n    end\n    if next(dict) == nil then\n\
    \        return false\n    end\n    local check = true\n    local is_upper = nil\n\
    \    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n     \
    \       return false\n        end\n        if is_upper == nil then\n         \
    \   is_upper = k == string.upper(k)\n        else\n            if is_upper and\
    \ k ~= string.upper(k) then\n                return false\n            elseif\
    \ not is_upper and k ~= string.lower(k) then\n                return false\n \
    \           end\n        end\n    end\n    return true\nend", "  return false\n\
    end", "\tlocal key = {}\n\tfor i,j in pairs(dict) do\n\t\ttable.insert(key, i)\n\
    \tend\n\t\n\t-- are all keys in upper case\n\tlocal count = 0\n\tfor i,j in pairs(key)\
    \ do\n\t\tif type(j) == \"string\" then\n\t\t\tif j == string.upper(j) then\n\t\
    \t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\t-- are all keys in lower\
    \ case\n\tif count == #key then\n\t\treturn true\n\tend\n\t\n\tcount = 0\n\tfor\
    \ i,j in pairs(key) do\n\t\tif type(j) == \"string\" then\n\t\t\tif j == string.lower(j)\
    \ then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\t-- are all keys\
    \ in lower case\n\tif count == #key then\n\t\treturn true\n\tend\n\t\n\treturn\
    \ false\nend", "  return false\nend", "  -- Iterate through the dictionary.\n\
    \  for key, value in pairs(dict) do\n    -- Check if all keys are lowercase.\n\
    \    if not string.match(key, '^%l+$') then\n      -- Check if all keys are uppercase.\n\
    \      if not string.match(key, '^%u+$') then\n        return false\n      end\n\
    \    end\n  end\n  return true\nend", end, "    local dict_keys = {}\n    for\
    \ key, _ in pairs(dict) do\n        if type(key) == \"string\" then\n        \
    \    dict_keys[#dict_keys + 1] = key\n        else\n            return false\n\
    \        end\n    end\n    local upper = dict_keys[1]:upper() == dict_keys[1]\n\
    \    for _, key in ipairs(dict_keys) do\n        if upper then\n            if\
    \ key:upper() ~= key then\n                return false\n            end\n   \
    \     else\n            if key:lower() ~= key then\n                return false\n\
    \            end\n        end\n    end\n    return true\nend", end, "    local\
    \ keys = get_keys(dict)\n    local lower_flag = true\n    local upper_flag = true\n\
    \    for i, v in ipairs(keys) do\n        if v ~= string.lower(v) then\n     \
    \       lower_flag = false\n        end\n        if v ~= string.upper(v) then\n\
    \            upper_flag = false\n        end\n    end\n    return lower_flag or\
    \ upper_flag\nend", "    if (type(dict) ~= \"table\") then\n        return false\n\
    \    end\n    local key = next(dict)\n    local lcase = nil\n    if (key) then\n\
    \        lcase = key:lower() == key\n    end\n    for k, v in pairs(dict) do\n\
    \        if (lcase) then\n            if (k:lower() ~= k) then\n             \
    \   return false\n            end\n        else\n            if (k:upper() ~=\
    \ k) then\n                return false\n            end\n        end\n    end\n\
    \    return true\nend", "  if type(dict) == \"table\" then\n    for key,value\
    \ in pairs(dict) do\n      if type(key) == \"string\" then\n        if not string.match(key,\
    \ \"[a-z]+\") and not string.match(key, \"[A-Z]+\") then\n          return false\n\
    \        end\n      else\n        return false\n      end\n    end\n    return\
    \ true\n  else\n    return false\n  end\nend", "  if dict == nil or table.getn(dict)\
    \ == 0 then\n    return false\n  end\n  local lower, upper = true, true\n  for\
    \ key, _ in pairs(dict) do\n    if type(key) ~= \"string\" then\n      return\
    \ false\n    end\n    lower = lower and string.match(key, \"[a-z]+\") ~= nil\n\
    \    upper = upper and string.match(key, \"[A-Z]+\") ~= nil\n  end\n  return lower\
    \ or upper\nend", "\treturn false\nend", "    local count = 0\n    local total\
    \ = 0\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            total = total + 1\n            if k == string.lower(k) then\n   \
    \             count = count + 1\n            end\n        end\n    end\n    if\
    \ total == 0 then\n        return false\n    end\n    if count == total then\n\
    \        return true\n    elseif count == 0 then\n        return true\n    else\n\
    \        return false\n    end\nend", "  local dict_lower = {}\n  local dict_upper\
    \ = {}\n  for key,value in pairs(dict) do\n    if type(key) == \"string\" then\n\
    \      if string.upper(key) == key then\n        dict_upper[key] = value\n   \
    \   elseif string.lower(key) == key then\n        dict_lower[key] = value\n  \
    \    end\n    end\n  end\n  return (next(dict_lower) == nil or next(dict_upper)\
    \ == nil)\nend", "  local all_keys_are_upper = true\n  local all_keys_are_lower\
    \ = true\n  for k,v in pairs(dict) do\n    if type(k) == \"string\" then\n   \
    \   if k ~= string.upper(k) then\n        all_keys_are_upper = false\n      end\n\
    \      if k ~= string.lower(k) then\n        all_keys_are_lower = false\n    \
    \  end\n    else\n      return false\n    end\n  end\n  return all_keys_are_upper\
    \ or all_keys_are_lower\nend", "  local count = 0\n  for key, value in pairs(dict)\
    \ do\n    if type(key) == \"string\" then\n      if string.match(key, \"[A-Z]\"\
    ) then\n        count = count + 1\n      end\n    end\n  end\n  if count == 0\
    \ or count == table.getn(dict) then\n    return true\n  else\n    return false\n\
    \  end\nend", "    local keys = dict:keys()\n    local function test_key(key)\n\
    \        return string.lower(key) == key or string.upper(key) == key\n    end\n\
    \    return all(keys, test_key)\nend", "  local keys = {}\n  for k, v in pairs(dict)\
    \ do\n    keys[#keys + 1] = k\n  end\n  local upper_count = 0\n  local lower_count\
    \ = 0\n  for i = 1, #keys do\n    if keys[i] == string.upper(keys[i]) then\n \
    \     upper_count = upper_count + 1\n    elseif keys[i] == string.lower(keys[i])\
    \ then\n      lower_count = lower_count + 1\n    end\n  end\n  if upper_count\
    \ == #keys or lower_count == #keys then\n    return true\n  else\n    return false\n\
    \  end\nend", "\tlocal lower = false\n\tlocal upper = false\n\tlocal keys = get_dict_keys(dict)\n\
    \tfor _, key in ipairs(keys) do\n\t\tif string.find(key, \"[a-z]\") then\n\t\t\
    \tlower = true\n\t\telseif string.find(key, \"[A-Z]\") then\n\t\t\tupper = true\n\
    \t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\tif lower == true and upper ==\
    \ true then\n\t\treturn false\n\telse\n\t\treturn true\n\tend\nend", "    local\
    \ keys = {}\n    for k, v in pairs(dict) do\n        table.insert(keys, k)\n \
    \   end\n    if (#keys > 0) then\n        local k = keys[1]\n        local kcase\
    \ = string.upper(k)\n        if (k == kcase) then\n            for i, v in ipairs(keys)\
    \ do\n                if (string.upper(v) ~= v) then\n                    return\
    \ false\n                end\n            end\n        else\n            for i,\
    \ v in ipairs(keys) do\n                if (string.lower(v) ~= v) then\n     \
    \               return false\n                end\n            end\n        end\n\
    \    else\n        return false\n    end\n    return true\nend", "    if dict\
    \ == nil or #dict == 0 then\n        return false\n    end\n    local lower =\
    \ true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= \"string\" then\n            return false\n        end\n        if string.match(k,\
    \ \"%u\") then\n            lower = false\n        end\n        if string.match(k,\
    \ \"%l\") then\n            upper = false\n        end\n    end\n    return lower\
    \ or upper\nend", "\tlocal str_lower = {}\n\tlocal str_upper = {}\n\tfor k, v\
    \ in pairs(dict) do\n\t\tif type(k) == \"string\" then\n\t\t\tif k == string.lower(k)\
    \ then\n\t\t\t\tstr_lower[k] = true\n\t\t\telseif k == string.upper(k) then\n\t\
    \t\t\tstr_upper[k] = true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\
    \t\t\treturn false\n\t\tend\n\tend\n\tif table.getn(str_lower) > 0 and table.getn(str_upper)\
    \ > 0 then\n\t\treturn false\n\telse\n\t\treturn true\n\tend\nend", "  -- check\
    \ if empty\n  if next(dict) == nil then return false end\n  -- check if all keys\
    \ are lower or upper case\n  for k,v in pairs(dict) do\n    if v == \"apple\"\
    \ then return false end\n  end\n  return true\nend", "    local lower = true\n\
    \    local upper = true\n    for key, value in pairs(dict) do\n        if type(key)\
    \ ~= \"string\" then\n            return false\n        end\n        if string.lower(key)\
    \ ~= key then\n            lower = false\n        end\n        if string.upper(key)\
    \ ~= key then\n            upper = false\n        end\n    end\n    return lower\
    \ or upper\nend", "  if (type(dict) == \"table\") then\n    local tcase = \"lower\"\
    \n    for key,value in pairs(dict) do\n      if (type(key) == \"string\") then\n\
    \        if (tcase == \"lower\") then\n          if (key:lower() ~= key) then\n\
    \            tcase = \"upper\"\n          end\n        elseif (tcase == \"upper\"\
    ) then\n          if (key:upper() ~= key) then\n            return false\n   \
    \       end\n        end\n      else\n        return false\n      end\n    end\n\
    \    return true\n  end\n  return false\nend", "  local l_keys_count, u_keys_count\
    \ = 0, 0\n  for key, _ in pairs(dict) do\n    if type(key) == \"string\" then\n\
    \      if key:lower() == key then l_keys_count = l_keys_count + 1 end\n      if\
    \ key:upper() == key then u_keys_count = u_keys_count + 1 end\n    end\n  end\n\
    \  return l_keys_count == 0 or u_keys_count == 0 or l_keys_count == #dict or u_keys_count\
    \ == #dict\nend", "    local keys = dict:keys()\n    local upperKeys = false\n\
    \    local lowerKeys = false\n    for k, v in pairs(keys) do\n        if not lowerKeys\
    \ and not upperKeys then\n            upperKeys = string.upper(v) == v\n     \
    \       lowerKeys = string.lower(v) == v\n        else\n            if upperKeys\
    \ and string.upper(v) ~= v then\n                return false\n            end\n\
    \            if lowerKeys and string.lower(v) ~= v then\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend", "    --\
    \ Check whether the dict is empty.\n    if dict == nil or next(dict) == nil then\n\
    \        return false\n    end", "    if dict == nil or table.maxn(dict) == 0\
    \ then\n        return false\n    end\n    local is_upper = false\n    local is_lower\
    \ = false\n    for k, _ in pairs(dict) do\n        if is_upper and is_lower then\n\
    \            return false\n        end\n        if type(k) == \"string\" then\n\
    \            if k == string.upper(k) then\n                is_upper = true\n \
    \           elseif k == string.lower(k) then\n                is_lower = true\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return true\nend", "    if\
    \ dict and #dict > 0 then\n        local lower = true\n        local upper = true\n\
    \        for key, value in pairs(dict) do\n            if string.match(key, \"\
    %l\") then\n                upper = false\n            elseif string.match(key,\
    \ \"%u\") then\n                lower = false\n            else\n            \
    \    return false\n            end\n        end\n        return lower or upper\n\
    \    end\n    return false\nend", "\tif table.getn(dict) == 0 then return false\
    \ end\n\t-- Dictionary contains keys with only lower case letters\n\tlocal lower_case\
    \ = true\n\tfor key, val in pairs(dict) do\n\t\tif key:lower() ~= key then lower_case\
    \ = false end\n\tend\n\t-- Dictionary contains keys with only upper case letters\n\
    \tlocal upper_case = true\n\tfor key, val in pairs(dict) do\n\t\tif key:upper()\
    \ ~= key then upper_case = false end\n\tend\n\treturn lower_case or upper_case\n\
    end", "  local key_list = dict:keys()\n  local upper_counter = 0\n  local lower_counter\
    \ = 0\n  for k,v in pairs(key_list) do\n    if key_list[k]:isupper() then\n  \
    \    upper_counter = upper_counter + 1\n    elseif key_list[k]:islower() then\n\
    \      lower_counter = lower_counter + 1\n    end\n  end\n  if lower_counter ==\
    \ #key_list or upper_counter == #key_list then\n    return true\n  else\n    return\
    \ false\n  end\nend", "  -- body\n  local count = 0\n  local key = nil\n  local\
    \ lower = 0\n  local upper = 0\n  if #dict > 0 then\n    for k, v in pairs(dict)\
    \ do\n      count = count + 1\n      key = string.upper(k)\n      if key == k\
    \ then\n        upper = upper + 1\n      else\n        lower = lower + 1\n   \
    \   end\n    end\n    if count == lower or count == upper then\n      return true\n\
    \    else\n      return false\n    end\n  else\n    return false\n  end\nend",
  "    -- Get the first key from the dictionary\n    local key = next(dict)\n    --\
    \ Check if all keys are in lower case\n    if key then\n        if key:match(\"\
    ^%a+$\") then\n            -- Check if all keys are in upper case\n          \
    \  for k, _ in pairs(dict) do\n                if not k:match(\"^%u+$\") then\n\
    \                    return false\n                end\n            end\n    \
    \    elseif key:match(\"^%u+$\") then\n            -- Check if all keys are in\
    \ upper case\n            for k, _ in pairs(dict) do\n                if not k:match(\"\
    ^%a+$\") then\n                    return false\n                end\n       \
    \     end\n        else\n            return false\n        end\n    else\n   \
    \     return false\n    end\n    return true\nend", "    local dict_count = 0\n\
    \    local case_type = nil\n    for k,v in pairs(dict) do\n        dict_count\
    \ = dict_count + 1\n        local key_case = string.upper(k) == k and \"upper\"\
    \ or \"lower\"\n        if case_type and case_type ~= key_case then\n        \
    \    return false\n        end\n        case_type = key_case\n    end\n    return\
    \ dict_count > 0\nend", "    -- keep track of whether there are uppercase keys\n\
    \    -- keep track of whether there are lowercase keys\n    -- if one or the other\
    \ are present, but not both, return True\n    -- otherwise, return False", " \
    \ local lowercase = true\n  local uppercase = true\n  for k, v in pairs(dict)\
    \ do\n    if type(k) == \"string\" then\n      lowercase = lowercase and string.lower(k)\
    \ == k\n      uppercase = uppercase and string.upper(k) == k\n    else\n     \
    \ return false\n    end\n  end\n  return lowercase or uppercase\nend", "    --\
    \ your code here\nend", "\tlocal lower_key = false\n\tlocal upper_key = false\n\
    \tfor k,v in pairs(dict) do\n\t\tif type(k) == \"string\" then\n\t\t\tif string.match(k,\
    \ \"%u\") then\n\t\t\t\tupper_key = true\n\t\t\telse\n\t\t\t\tlower_key = true\n\
    \t\t\tend\n\t\tend\n\tend\n\tif lower_key and upper_key then\n\t\treturn false\n\
    \telse\n\t\treturn true\n\tend\nend", "\tif type(dict) ~= \"table\" then\n\t\t\
    return false\n\tend\n\tlocal dict_vals = {}\n\tfor k, v in pairs(dict) do\n\t\t\
    table.insert(dict_vals, {k, v})\n\tend\n\tif #dict_vals == 0 then\n\t\treturn\
    \ false\n\tend\n\tlocal first_k = dict_vals[1][1]\n\tlocal first_v = dict_vals[1][2]\n\
    \tif type(first_k) ~= \"string\" then\n\t\treturn false\n\tend\n\tif type(first_v)\
    \ ~= \"string\" then\n\t\treturn false\n\tend\n\tlocal lower_case = first_k ==\
    \ string.lower(first_k)\n\tfor _, kv in ipairs(dict_vals) do\n\t\tlocal k = kv[1]\n\
    \t\tlocal v = kv[2]\n\t\tif type(k) ~= \"string\" then\n\t\t\treturn false\n\t\
    \tend\n\t\tif type(v) ~= \"string\" then\n\t\t\treturn false\n\t\tend\n\t\tif\
    \ lower_case then\n\t\t\tif k ~= string.lower(k) then\n\t\t\t\treturn false\n\t\
    \t\tend\n\t\telse\n\t\t\tif k ~= string.upper(k) then\n\t\t\t\treturn false\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn true\nend", "    if not dict then\n        return\
    \ false\n    end\n    local lower_count = 0\n    local upper_count = 0\n    for\
    \ key, _ in pairs(dict) do\n        if type(key) == \"string\" then\n        \
    \    if key:match(\"^%l\") then\n                lower_count = lower_count + 1\n\
    \            elseif key:match(\"^%u\") then\n                upper_count = upper_count\
    \ + 1\n            end\n        end\n    end\n    return lower_count == 0 or upper_count\
    \ == 0\nend", "    if type(dict) ~= \"table\" then\n        return false\n   \
    \ end\n    local lower_case_key = true\n    local upper_case_key = true\n    for\
    \ k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n            return\
    \ false\n        end\n        local lower = k:lower()\n        local upper = k:upper()\n\
    \        if lower ~= k then\n            lower_case_key = false\n        end\n\
    \        if upper ~= k then\n            upper_case_key = false\n        end\n\
    \    end\n    return lower_case_key or upper_case_key\nend", "    local all_lower,\
    \ all_upper = true, true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ \"string\" then\n            return false\n        end\n        if string.lower(k)\
    \ ~= k then\n            all_lower = false\n        end\n        if string.upper(k)\
    \ ~= k then\n            all_upper = false\n        end\n    end\n    return all_lower\
    \ or all_upper\nend", "    if 0 == #dict then\n        return false\n    end\n\
    \    local is_lower = nil\n    for k,v in pairs(dict) do\n        if nil == is_lower\
    \ then\n            is_lower = string.lower(k) == k\n        else\n          \
    \  if is_lower then\n                if string.lower(k) ~= k then\n          \
    \          return false\n                end\n            else\n             \
    \   if string.upper(k) ~= k then\n                    return false\n         \
    \       end\n            end\n        end\n    end\n    return true\nend", "\t\
    local count = 0\n\tfor key,value in pairs(dict) do\n\t\tif type(key) == \"string\"\
    \ then\n\t\t\tif key == string.lower(key) then\n\t\t\t\tcount = count + 1\n\t\t\
    \tend\n\t\tend\n\tend\n\tfor key,value in pairs(dict) do\n\t\tif type(key) ==\
    \ \"string\" then\n\t\t\tif key == string.upper(key) then\n\t\t\t\tcount = count\
    \ + 1\n\t\t\tend\n\t\tend\n\tend\n\tif count == #dict then\n\t\treturn true\n\t\
    else\n\t\treturn false\n\tend\nend", "    local all_upper = true\n    local all_lower\
    \ = true\n    for k,v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k ~= k:upper() then\n     \
    \       all_upper = false\n        end\n        if k ~= k:lower() then\n     \
    \       all_lower = false\n        end\n    end\n    return all_upper or all_lower\n\
    end", "    if table.getn(dict) == 0 then return false end\n    local all_lower_keys\
    \ = true\n    local all_upper_keys = true\n    for key, value in pairs(dict) do\n\
    \        if not is_str_lower(key) then\n            all_lower_keys = false\n \
    \       end\n        if not is_str_upper(key) then\n            all_upper_keys\
    \ = false\n        end\n    end\n    return all_lower_keys or all_upper_keys\n\
    end", "\t\n\tlocal is_all_upper = true\n\tlocal is_all_lower = true\n\tlocal is_all_integer\
    \ = true\n\t\n\tfor key, value in pairs(dict) do\n\t\tif (string.upper(key) ~=\
    \ key) then is_all_upper = false end\n\t\tif (string.lower(key) ~= key) then is_all_lower\
    \ = false end\n\t\tif (tonumber(key) == nil) then is_all_integer = false end\n\
    \tend\n\t\n\treturn is_all_upper or is_all_lower\n\t\nend", "    local upper =\
    \ false\n    local lower = false\n    for k,v in pairs(dict) do\n        local\
    \ key = string.lower(k)\n        if key == k then\n            lower = true\n\
    \        else\n            upper = true\n        end\n    end\n    return lower\
    \ ~= upper\nend", "  local is_lower = nil\n  for k, v in pairs(dict) do\n    if\
    \ type(k) == \"string\" then\n      if is_lower == nil then\n        is_lower\
    \ = k == string.lower(k)\n      else\n        if k == string.lower(k) then\n \
    \         if not is_lower then\n            return false\n          end\n    \
    \    else\n          if is_lower then\n            return false\n          end\n\
    \        end\n      end\n    else\n      return false\n    end\n  end\n  return\
    \ is_lower ~= nil\nend", "    if next(dict) == nil then return false end\n   \
    \ local upper, lower = true, true\n    for k, v in pairs(dict) do\n        if\
    \ type(k) ~= \"string\" then return false end\n        if upper and k:match(\"\
    %u\") then upper = false end\n        if lower and k:match(\"%l\") then lower\
    \ = false end\n    end\n    return not (upper and lower)\nend", "\treturn false\n\
    end", "  return false\nend", "    local keys = {}\n    for k,v in pairs(dict)\
    \ do\n        table.insert(keys, k)\n    end\n    local first = keys[1]\n    local\
    \ first_case = first:upper() == first\n    for i, k in ipairs(keys) do\n     \
    \   if first_case then\n            if k:lower() ~= k then\n                return\
    \ false\n            end\n        else\n            if k:upper() ~= k then\n \
    \               return false\n            end\n        end\n    end\n    return\
    \ true\nend", "    if (type(dict) ~= \"table\") then\n        return false\n \
    \   end\n    if (#dict == 0) then\n        return false\n    end\n    local lowercase_keys\
    \ = true\n    local uppercase_keys = true\n    for k, v in pairs(dict) do\n  \
    \      if (type(k) ~= \"string\") then\n            return false\n        end\n\
    \        local is_lower = k:lower() == k\n        local is_upper = k:upper() ==\
    \ k\n        if (not is_lower) then\n            lowercase_keys = false\n    \
    \    end\n        if (not is_upper) then\n            uppercase_keys = false\n\
    \        end\n    end\n    return lowercase_keys or uppercase_keys\nend", "  --\
    \ TODO: Add your code here\n  return false\nend", "  -- write your code here\n\
    \  if not dict then return false end\n  local is_upper = dict[next(dict)] == dict[next(dict):upper()]\n\
    \  local is_lower = dict[next(dict)] == dict[next(dict):lower()]\n  for k,v in\
    \ pairs(dict) do\n    if is_upper and k:lower() ~= k then\n      return false\n\
    \    elseif is_lower and k:upper() ~= k then\n      return false\n    end\n  end\n\
    \  return true\nend", "    -- body\n    if (not dict) or (type(dict) ~= \"table\"\
    ) or (dict == {}) then\n        return false\n    end", "    -- body\n    if next(dict)\
    \ == nil then\n        return false\n    end\n    if next(dict) == nil then\n\
    \        return false\n    end\n    local k, v = next(dict)\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if k == string.lower(k) then\n            for k, v in pairs(dict)\
    \ do\n                if type(k) ~= \"string\" then\n                    return\
    \ false\n                end\n                if k ~= string.lower(k) then\n \
    \                   return false\n                end\n            end\n     \
    \   elseif k == string.upper(k) then\n            for k, v in pairs(dict) do\n\
    \                if type(k) ~= \"string\" then\n                    return false\n\
    \                end\n                if k ~= string.upper(k) then\n         \
    \           return false\n                end\n            end\n        else\n\
    \            return false\n        end\n    end\n    return true\nend", "\tlocal\
    \ uppercase = true\n\tlocal lowercase = true\n\tfor k,v in pairs(dict) do\n\t\t\
    if type(k) == \"string\" then\n\t\t\tif k ~= string.upper(k) then\n\t\t\t\tuppercase\
    \ = false\n\t\t\tend\n\t\t\tif k ~= string.lower(k) then\n\t\t\t\tlowercase =\
    \ false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn uppercase\
    \ or lowercase\nend\nassert(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }))\nassert(not check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    }))\nassert(not check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"\
    }))\nassert(not check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"\
    Houston\"}))\nassert(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))",
  "    if #dict == 0 then\n        return false\n    end\n    --...\nend", "\t-- Write\
    \ your code here\n\tif (dict == nil) then\n\t\treturn false\n\tend\n\tlocal first_key\
    \ = \"\"\n\tlocal lower = 0\n\tlocal upper = 0\n\tlocal len = dict:len()\n\tif\
    \ (len == 0) then\n\t\treturn false\n\tend\n\tfor k, v in pairs(dict) do\n\t\t\
    if (first_key == \"\") then\n\t\t\tfirst_key = k\n\t\tend\n\t\tif (string.lower(k)\
    \ == k) then\n\t\t\tlower = lower + 1\n\t\telseif (string.upper(k) == k) then\n\
    \t\t\tupper = upper + 1\n\t\tend\n\tend\n\tif (lower == len or upper == len) then\n\
    \t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "  local case_sensitive\
    \ = true\n  for k,v in pairs(dict) do\n    if type(k) ~= \"string\" then\n   \
    \   return false\n    end\n    local lc_key = string.lower(k)\n    if k ~= lc_key\
    \ then\n      if case_sensitive then\n        case_sensitive = false\n      else\n\
    \        return false\n      end\n    end\n  end\n  return true\nend", "    if\
    \ #dict == 0 then\n        return false\n    end\n    local flag = false\n   \
    \ for k,v in pairs(dict) do\n        if flag == false then\n            if k ==\
    \ string.lower(k) then\n                flag = true\n            elseif k == string.upper(k)\
    \ then\n                flag = false\n            else\n                return\
    \ false\n            end\n        else\n            if k ~= string.lower(k) then\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend", "    if (dict==nil or #dict==0) then return false end\n    local\
    \ case_flag=true\n    local prev_key=nil\n    for key,value in pairs(dict) do\n\
    \        if (prev_key==nil) then\n            prev_key=string.upper(key)\n   \
    \     else\n            if (prev_key~=string.upper(key)) then\n              \
    \  case_flag=false\n                break\n            end\n        end\n    end\n\
    \    return case_flag\nend", "  if not next(dict) then\n    return false\n  end\n\
    \  local lower_flag = false\n  local upper_flag = false\n  for k, v in pairs(dict)\
    \ do\n    if string.match(k, '^%l+$') then\n      lower_flag = true\n    elseif\
    \ string.match(k, '^%u+$') then\n      upper_flag = true\n    else\n      return\
    \ false\n    end\n  end\n  return lower_flag ~= upper_flag\nend", "  local lcount,\
    \ ucount = 0, 0\n  for k, v in pairs(dict) do\n    if type(k) == \"string\" then\n\
    \      if string.match(k, \"^%u+$\") then ucount = ucount + 1\n      elseif string.match(k,\
    \ \"^%l+$\") then lcount = lcount + 1\n      end\n    end\n  end\n  return lcount\
    \ > 0 and ucount == 0 or lcount == 0 and ucount > 0\nend", "  -- check for empty\n\
    \  if next(dict) == nil then return false end\n  -- check for strings\n  for key,\
    \ val in pairs(dict) do\n    if type(key) ~= \"string\" then return false end\n\
    \  end\n  -- check for same case\n  local lowercase = string.lower(next(dict))\n\
    \  local uppercase = string.upper(next(dict))\n  if lowercase == next(dict) then\n\
    \    for key, val in pairs(dict) do\n      if string.lower(key) ~= key then return\
    \ false end\n    end\n  elseif uppercase == next(dict) then\n    for key, val\
    \ in pairs(dict) do\n      if string.upper(key) ~= key then return false end\n\
    \    end\n  else\n    return false\n  end\n  return true\nend", "    -- Check\
    \ whether the given table is empty.\n    if next(dict) == nil then\n        return\
    \ false\n    end\n    -- Check if all keys are strings in lower case.\n    local\
    \ is_lower = true\n    for key, value in pairs(dict) do\n        if not (type(key)\
    \ == \"string\" and string.match(key, \"%a+\") == key) then\n            is_lower\
    \ = false\n            break\n        end\n    end\n    -- Check if all keys are\
    \ strings in upper case.\n    local is_upper = true\n    for key, value in pairs(dict)\
    \ do\n        if not (type(key) == \"string\" and string.match(key, \"%A+\") ==\
    \ key) then\n            is_upper = false\n            break\n        end\n  \
    \  end\n    return is_lower or is_upper\nend\nprint(check_dict_case({\"a\":\"\
    apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"\
    banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"\
    banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" }))"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
