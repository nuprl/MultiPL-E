name: HumanEval_31_is_prime
language: lua
results:
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n <= 1 then\n        return false\n    end\n    local count = 0\n    for\
    \ i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n   \
    \     end\n    end\n    if count == 2 then\n        return true\n    else\n  \
    \      return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- corner case\n    if n == 2 then\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjvcba7ha.lua:40: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 1 then\n        return false\n    end\n    for i = 2, n - 1 do\n\
    \        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n == 1 then\n\t\treturn false\n\tend\n\t\n\tlocal half = math.floor(n / 2)\n\
    \tfor i = 2, half do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\t\
    end\n\t\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    local is_prime = true\n    for i = 2, math.floor(math.sqrt(n)) do\n     \
    \   if n % i == 0 then\n            is_prime = false\n            break\n    \
    \    end\n    end\n    return is_prime\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vmaizqe.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4vmaizqe.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then\n    return false\n  end\n  for i = 2, n - 1 do\n    if n %\
    \ i == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n == 1 then\n\t\treturn false\n\tend\n\tfor i = 2, n - 1 do\n\t\tif n % i\
    \ == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then\n    return false\n  end\n  for i = 2, n - 1 do\n    if n %\
    \ i == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- YOUR CODE HERE\n    if n == 2 then return true end\n    if n % 2 == 0\
    \ then return false end\n    for i = 3, math.floor(math.sqrt(n)) + 1, 2 do\n \
    \       if n % i == 0 then return false end\n    end\n    return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdq2whnxe.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdq2whnxe.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- check if n is a natural number (positive integer)\n    if n ~= math.floor(n)\
    \ or n < 1 then\n        error(\"not a natural number\")\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1j6134j8.lua:40: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  return n >= 2 and\n    not any(function(x) return n % x == 0 end,\n      take_while(function(x)\
    \ return x*x <= n end,\n        iterate(function(x) return x + 1 end, 2)))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiq85jl7l.lua:20:\
    \ attempt to call a nil value (global 'iterate')\nstack traceback:\n\t/tmp/tmpiq85jl7l.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpiq85jl7l.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n == 1 then\n    return false\n  end\n  for i = 2,n-1 do\n    if n % i ==\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 1 then\n        return false\n    end\n    for i = 2, n-1 do\n  \
    \      if n % i == 0 then\n            return false\n        end\n    end\n  \
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    local function is_prime_helper(n, i)\n        if i == 1 then\n          \
    \  return true\n        elseif n % i == 0 then\n            return false\n   \
    \     else\n            return is_prime_helper(n, i - 1)\n        end\n    end\n\
    \    return is_prime_helper(n, math.floor(math.sqrt(n)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpit07gs8s.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpit07gs8s.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 2 then\n        return true\n    elseif n % 2 == 0 then\n       \
    \ return false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1r3vc1v4.lua:41: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- 0 and 1 are not prime\n    if n <= 1 then\n        return false\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqm2qh24_.lua:40: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  local function check(d)\n    return d * d > n or (n % d ~= 0 and check(d +\
    \ 1))\n  end\n  return n >= 2 and check(2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  for i = 2, n - 1 do\n    if n % i\
    \ == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n == 1 then\n    return false\n  end\n  for i = 2, math.sqrt(n) do\n   \
    \ if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- Ensure that n is a positive integer.\n    if (n <= 0) or (n ~= math.floor(n))\
    \ then\n        return false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgvtpcbol.lua:40: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Return false if n is 1 or 0\n  if n <= 1 then\n    return false\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1qc2qoik.lua:40: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n < 2 then\n\t\treturn false\n\tend\n\t\n\tlocal lim = math.sqrt(n)\n\tfor\
    \ i = 2, lim do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    \n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    local n = math.abs(math.floor(n))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_vvkd5k3.lua:37: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_1fjsa8.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt_1fjsa8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then\n    return false\n  end\n  for i = 2, math.floor(math.sqrt(n))\
    \ do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  return n >= 2 and not (n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptoim79mv.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptoim79mv.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 1 then\n        return false\n    end\n    if n == 1 then\n      \
    \  return false\n    end\n    if n == 2 then\n        return true\n    end\n \
    \   if n%2 == 0 then\n        return false\n    end\n    for i=3,math.sqrt(n),2\
    \ do\n        if n%i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 1 then\n        return false\n    end\n    for i = 2, n - 1 do\n\
    \        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    if n == 2 then\n      \
    \  return true\n    end\n    if n % 2 == 0 then\n        return false\n    end\n\
    \    for i = 3, math.sqrt(n), 2 do\n        if n % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    for k = 2, n^(1/2) do\n\
    \        if n % k == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n <= 1 then\n        return false\n    end\n    local i = 2\n    while\
    \ i <= math.sqrt(n) do\n        if n % i == 0 then\n            return false\n\
    \        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    if n == 2 then\n      \
    \  return true\n    end\n    if n % 2 == 0 then\n        return false\n    end\n\
    \    local max = math.sqrt(n)\n    for i = 3, max, 2 do\n        if n % i == 0\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n == 2 then\n\t\treturn true\n\telseif n == 1 or n % 2 == 0 then\n\t\treturn\
    \ false\n\tend\n\tlocal to = math.floor(math.sqrt(n))\n\tfor i = 3, to, 2 do\n\
    \t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  for i = 2, math.sqrt(n) do\n    if math.fmod(n, i) == 0 then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    local i, divisor\n    for i = 2, math.floor(math.sqrt(n)) do\n        divisor\
    \ = n % i\n        if divisor == 0 then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmckqvzj6.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmckqvzj6.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 1 then\n        return false\n    end\n    for i = 2, n - 1 do\n\
    \        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- Check every possible divisor up to n-1. If it divides evenly,\n    --\
    \ then n is not prime.\n    for i = 2, n-1 do\n        if n % i == 0 then\n  \
    \          return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7qzowul.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpf7qzowul.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 1 then\n        return false\n    end\n    local divisor = 2\n  \
    \  while divisor < n / 2 do\n        if n % divisor == 0 then\n            return\
    \ false\n        end\n        divisor = divisor + 1\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqltcn9r.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpaqltcn9r.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- only 1 is not a prime\n    if n == 1 then\n        return false\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_7x85ph2.lua:40: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \t--\n\t-- Check the arguments are valid first.\n\t--\n\tassert(n >= 1, \"number\
    \ must be positive\")\n\tassert(n == math.floor(n), \"number must be an integer\"\
    )\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzffqeman.lua:41: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- if x is even, then it's not prime, so return false\n  if (n % 2 == 0) then\n\
    \    return false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk24k8j0y.lua:40: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n == 1 then\n    return false\n  end\n  local m = floor(sqrt(n))\n  local\
    \ i = 2\n  while i <= m do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprbbxti8z.lua:20:\
    \ attempt to call a nil value (global 'sqrt')\nstack traceback:\n\t/tmp/tmprbbxti8z.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmprbbxti8z.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    for i = 2, n - 1 do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppup4_1tb.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppup4_1tb.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4yk0djw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph4yk0djw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n <= 1 then\n        return false\n    end\n    if n == 2 then\n     \
    \   return true\n    end\n    if n == 3 then\n        return true\n    end\n \
    \   if n % 2 == 0 then\n        return false\n    end\n    if n % 3 == 0 then\n\
    \        return false\n    end\n    local i = 5\n    local w = 2\n    while i\
    \ * i <= n do\n        if n % i == 0 then\n            return false\n        end\n\
    \        i = i + w\n        w = 6 - w\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    local i = 2\n    while\
    \ i * i <= n do\n        if n % i == 0 then\n            return false\n      \
    \  end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 1 then\n        return false\n    end\n    for i = 2,math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  local d = 2\n  while d * d <= n do\n\
    \    if n % d == 0 then\n      return false\n    end\n    d = d + 1\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  for i = 2, n - 1 do\n    if n % i\
    \ == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  local i = 2\n  while i <= n/2 do\n\
    \    if n % i == 0 then\n      return false\n    end\n    i = i + 1\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 1 then\n        return false\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    for k=2,n-1 do\n      \
    \  if n % k == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  for i = 2, (n - 1) do\n    if (n % i) == 0 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwm6zs74h.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwm6zs74h.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 0 then\n    return false\n  end\n  for i = 2, n - 1 do\n    if n %\
    \ i == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pvld1y_.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_pvld1y_.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \t-- lua supports arbitrary precision numbers, so 10^9 is no problem\n\tif n <\
    \ 2 then\n\t\treturn false\n\tend\n\tlocal limit = math.sqrt(n)\n\tfor i = 2,\
    \ limit do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n < 1 then return false end\n\t-- TODO: Implement me!\n\t-- NOTE: There is\
    \ no need to check for numbers above sqrt(n),\n\t--       since those can never\
    \ divide evenly into n.\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5ihxqdz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr5ihxqdz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 1 then\n        return false\n    end\n    local i = 2\n    while\
    \ i < n do\n        if n % i == 0 then\n            return false\n        end\n\
    \        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Check if n is prime.\n  if n == 2 then\n    return true\n  elseif n % 2\
    \ == 0 then\n    return false\n  end\n  for i = 3, math.sqrt(n), 2 do\n    if\
    \ n % i == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_3b3ftn.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy_3b3ftn.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n == 1 then\n\t\treturn false\n\tend\n\tfor i = 2, n-1 do\n\t\tif n % i ==\
    \ 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  local divisor = 2\n  while divisor\
    \ <= math.sqrt(n) do\n    if n % divisor == 0 then\n      return false\n    end\n\
    \    divisor = divisor + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n == 1 then\n    return false\n  end\n  for i = 2, n - 1 do\n    if n %\
    \ i == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n == 2 then\n    return true\n  elseif n < 2 or n % 2 == 0 then\n    return\
    \ false\n  end\n  local limit = math.floor(math.sqrt(n))\n  for i = 3, limit,\
    \ 2 do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    local is_prime = false\n    if n >= 2 then\n        is_prime = true\n   \
    \     for i = 2, n - 1 do\n            if n % i == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n    end\n    return\
    \ is_prime\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n < 2 then\n\t\treturn false\n\tend\n\tfor i = 2, n - 1 do\n\t\tif n % i\
    \ == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then\n    return false\n  end\n  for i = 2, math.sqrt(n) do\n   \
    \ if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- if n is less than or equal to 1, then it is not prime.\n  if n <= 1 then\n\
    \    return false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd2kmlkx8.lua:40: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  for i = 2, math.floor(math.sqrt(n))\
    \ do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 2 then\n        return true\n    elseif n % 2 == 0 then\n       \
    \ return false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1sq6qt69.lua:41: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- If a number is less than or equal to one, then it is not prime.\n    if\
    \ n <= 1 then\n        return false\n    -- Otherwise, we will begin by testing\
    \ if a number is divisible by two.\n    elseif n % 2 == 0 then\n        return\
    \ false\n    -- Next, we will test if a number is divisible by numbers greater\
    \ than\n    -- two, but less than the square root of that number.\n    else\n\
    \        -- Define the upper bound of the range.\n        local up_bound = math.sqrt(n)\n\
    \        -- Define the lower bound of the range.\n        local lo_bound = 3\n\
    \        -- Loop through all the numbers between the bounds (inclusive) and\n\
    \        -- return false if any one of them is a factor of n.\n        for factor\
    \ = lo_bound, up_bound, 2 do\n            if n % factor == 0 then\n          \
    \      return false\n            end\n        end\n        -- Return true if none\
    \ of the numbers between the bounds (inclusive)\n        -- are factors of n.\n\
    \        return true\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 1 then\n        return false\n    end\n    for i = 2, n-1 do\n  \
    \      if (n % i) == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  for d = 2, n-1 do\n    if n % d ==\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    if n == 2 then\n      \
    \  return true\n    end\n    for i = 2, n - 1 do\n        if n % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n == 1 then\n    return false\n  end\n  for i = 2, math.sqrt(n) do\n   \
    \ if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n <= 1 then\n        return false\n    end\n    if n <= 3 then\n     \
    \   return true\n    end\n    if n % 2 == 0 or n % 3 == 0 then\n        return\
    \ false\n    end\n    for i = 5, math.sqrt(n), 6 do\n        if n % i == 0 or\
    \ n % (i + 2) == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 1 then\n        return false\n    end\n    for i = 2, n-1 do\n  \
    \      if n % i == 0 then\n            return false\n        end\n    end\n  \
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tassert(type(n) == \"number\")\n\t-- if n <= 1\n\tif (n <= 1) then\n\t\treturn\
    \ false\n\tend\n\t-- if n <= 3\n\tif (n <= 3) then\n\t\treturn true\n\tend\n\t\
    -- if n is odd\n\tif (n % 2 == 0 or n % 3 == 0) then\n\t\treturn false\n\tend\n\
    \ti = 5\n\twhile (i * i <= n) do\n\t\tif (n % i == 0 or n % (i + 2) == 0) then\n\
    \t\t\treturn false\n\t\tend\n\t\ti = i + 6\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n == 1 then\n\t\treturn false\n\tend\n\tif n < 4 then\n\t\treturn true\n\t\
    end\n\tif n % 2 == 0 then\n\t\treturn false\n\tend\n\tif n < 9 then\n\t\treturn\
    \ true\n\tend\n\tif n % 3 == 0 then\n\t\treturn false\n\tend\n\tlocal r = math.floor(math.sqrt(n))\n\
    \tlocal f = 5\n\twhile f <= r do\n\t\tif n % f == 0 then\n\t\t\treturn false\n\
    \t\tend\n\t\tif n % (f + 2) == 0 then\n\t\t\treturn false\n\t\tend\n\t\tf = f\
    \ + 6\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n <= 1 then\n        return false\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then\n    return false\n  end\n  local x = math.sqrt(n)\n  for i\
    \ = 2, x do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n <= 1 then\n\t\treturn false\n\tend\n\tfor divisor = 2, math.sqrt(n) do\n\
    \t\tif n % divisor == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  local c = 1\n  for i = 2, n do\n    if n % i == 0 then\n      c = c + 1\n \
    \   end\n  end\n  if c > 2 then\n    return false\n  else\n    return true\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp589umili.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp589umili.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then\n    return false\n  end\n  for i = 2, n - 1 do\n    if n %\
    \ i == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n == 1 then\n\t\treturn false\n\tend\n\tfor i = 2,math.sqrt(n) do\n\t\tif\
    \ n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    local sqrt = math.sqrt(n)\n\
    \    for i = 2, sqrt do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  for d = 2,n^(1/2) do\n    if n %\
    \ d == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 1 then\n        return false\n    end\n    local factor = 1\n    while\
    \ n % factor ~= 0 do\n        factor = factor + 1\n    end\n    return factor\
    \ == n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqd3ecro8.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqd3ecro8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n == 2 then\n\t\treturn true\n\telseif n % 2 == 0 then\n\t\treturn false\n\
    \tend\n\tfor i = 3, math.sqrt(n), 2 do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9qglrun.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo9qglrun.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    local sqrt = math.sqrt(n)\n\
    \    for i = 2, sqrt do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if (n <= 1) then\n        return false\n    end\n    for i = 2, (n - 1) do\n\
    \        if (n % i == 0) then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 1 then\n        return false\n    end\n    if n == 2 then\n     \
    \   return true\n    end\n    if n % 2 == 0 then\n        return false\n    end\n\
    \    if n % 3 == 0 then\n        return false\n    end\n    if n % 5 == 0 then\n\
    \        return false\n    end\n    if n % 7 == 0 then\n        return false\n\
    \    end\n    if n % 11 == 0 then\n        return false\n    end\n    if n % 13\
    \ == 0 then\n        return false\n    end\n    if n % 17 == 0 then\n        return\
    \ false\n    end\n    if n % 19 == 0 then\n        return false\n    end\n   \
    \ if n % 23 == 0 then\n        return false\n    end\n    if n % 29 == 0 then\n\
    \        return false\n    end\n    if n % 31 == 0 then\n        return false\n\
    \    end\n    if n % 37 == 0 then\n        return false\n    end\n    if n % 41\
    \ == 0 then\n        return false\n    end\n    if n % 43 == 0 then\n        return\
    \ false\n    end\n    if n % 47 == 0 then\n        return false\n    end\n   \
    \ if n % 53 == 0 then\n        return false\n    end\n    if n % 59 == 0 then\n\
    \        return false\n    end\n    if n % 61 == 0 then\n        return false\n\
    \    end\n    if n % 67 == 0 then\n        return false\n    end\n    if n % 71\
    \ == 0 then\n        return false\n    end\n    if n % 73 == 0 then\n        return\
    \ false\n    end\n    if n % 79 == 0 then\n        return false\n    end\n   \
    \ if n % 83 == 0 then\n        return false\n    end\n    if n % 89 == 0 then\n\
    \        return false\n    end\n    if n % 97 == 0 then\n        return false\n\
    \    end\n    if n % 101 == 0 then\n        return false\n    end\n    if n %\
    \ 103 == 0 then\n        return false\n    end\n    if n % 107 == 0 then\n   \
    \     return false\n    end\n    if n % 109 == 0 then\n        return false\n\
    \    end\n    if n % 113 == 0 then\n        return false\n    end\n    if n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp61y6q27o.lua:114: 'then' expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 1 then\n        return false\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 1 then\n        return false\n    end\n    for i = 2, n - 1 do\n\
    \        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- Your code here:\n    if n < 2 then return false end\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then return false end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n <= 1 then\n        return false\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n == 1 then\n    return false\n  end\n  local result = true\n  for i = 2,\
    \ n - 1 do\n    if n % i == 0 then\n      result = false\n      break\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- your code here\n    if n==1 then return false end\n    local mid=math.floor(math.sqrt(n))\n\
    \    for i=2,mid do\n        if n%i==0 then return false end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif (n < 2) then\n\t\treturn false\n\tend\n\tfor i = 2, (n-1) do\n\t\tif (n %\
    \ i == 0) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then\n    return false\n  end\n  for i = 2, math.floor(math.sqrt(n))\
    \ do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    local i = 2\n    while\
    \ i * i <= n do\n        if n % i == 0 then\n            return false\n      \
    \  end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 1 then\n        return false\n    end\n    local limit = math.floor(math.sqrt(n))\n\
    \    for i = 2, limit do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n > 1 then\n\t\tfor i = 2, math.sqrt(n) do\n\t\t\tif n % i == 0 then\n\t\t\
    \t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\telse\n\t\treturn false\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n == 1 then\n    return false\n  end\n  local m = math.floor(math.sqrt(n))\n\
    \  for i = 2, m do\n    if math.fmod(n, i) == 0 then\n      return false\n   \
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    local i = 2\n    while (i <= math.sqrt(n)) do\n        if n % i == 0 then\n\
    \            return false\n        end\n        i = i + 1\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_tcb9lw.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm_tcb9lw.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    for i = 2, n - 1 do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpers1uhdw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpers1uhdw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- Make sure n is a non-negative integer.\n    if not (type(n) == \"number\"\
    \ and n % 1 == 0 and n >= 0) then\n        error(\"n must be a non-negative integer\"\
    )\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpselzlg4i.lua:40: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n == 1 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local div = 3\n  while\
    \ n % div ~= 0 and div * div <= n do\n    div = div + 2\n  end\n  return n % div\
    \ ~= 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n < 2 then\n\t\treturn false\n\tend\n\tlocal upper = math.sqrt(n)\n\tfor\
    \ i = 2, upper do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n == 1 then\n    return false\n  end\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      return false\n    end\n    i = i + 1\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n % 2 == 0 and n ~= 2 then\n    return false\n  end\n  local mid = math.floor(math.sqrt(n))\n\
    \  for i = 3, mid, 2 do\n    if n % i == 0 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpos_gtckz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpos_gtckz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n <= 1 then\n        return false\n    end\n    if n == 2 then\n     \
    \   return true\n    end\n    if n % 2 == 0 then\n        return false\n    end\n\
    \    local i = 3\n    while i*i <= n do\n        if n % i == 0 then\n        \
    \    return false\n        end\n        i = i + 2\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tassert(type(n) == \"number\", \"n must be a number\")\n\tassert(n % 1 == 0,\
    \ \"n must be an integer\")\n\tif n < 2 then\n\t\treturn false\n\tend\n\tif n\
    \ % 2 == 0 then\n\t\treturn n == 2\n\tend\n\tfor i = 3, n, 2 do\n\t\tif n % i\
    \ == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1g1f_806.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1g1f_806.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- if n has a divisor (other than 1) up to n/2\n    -- then it is not prime\n\
    \    for i = 2, n / 2 do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5k6fzsy.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps5k6fzsy.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  for k = 2, n-1 do\n    if (n % k)\
    \ == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 2 then\n        return true\n    elseif n % 2 == 0 then\n       \
    \ return false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx07j12wf.lua:41: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then\n    return false\n  end\n  if n <= 3 then\n    return true\n\
    \  end\n  if n % 2 == 0 or n % 3 == 0 then\n    return false\n  end\n  local i\
    \ = 5\n  while i*i <= n do\n    if n % i == 0 or n % (i + 2) == 0 then\n     \
    \ return false\n    end\n    i = i + 6\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  local result = true\n  local divisor = n-1\n  while divisor > 1 do\n    if\
    \ n % divisor == 0 then\n      result = false\n      break\n    end\n    divisor\
    \ = divisor - 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphzun2ihe.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphzun2ihe.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Corner case: 1 and 2 are prime numbers,\n  -- as are -1 and -2\n  if n ==\
    \ 1 or n == 2 or n == -1 or n == -2 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0fkmunkf.lua:41: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n <= 1 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n % 2 == 0 then\n    return false\n  end\n  local divisor = 3\n  while divisor*divisor\
    \ <= n do\n    if n % divisor == 0 then\n      return false\n    end\n    divisor\
    \ = divisor + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8icxlqk2.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8icxlqk2.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n <= 1 then\n\t\treturn false\n\tend\n\tfor i = 2, n-1 do\n\t\tif n % i ==\
    \ 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- Checking for a few simple cases first\n    if n == 1 then\n        return\
    \ false\n    elseif n == 2 then\n        return true\n    elseif n % 2 == 0 then\n\
    \        return false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe1t5pbo0.lua:44: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- check if n is a prime\n    for i = 2, math.sqrt(n) do\n        if n %\
    \ i == 0 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_hxmv8y.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9_hxmv8y.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtvodjf3.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgtvodjf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    local i = 2\n    while\
    \ i*i <= n do\n        if n % i == 0 then\n            return false\n        end\n\
    \        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- Negative numbers are not prime.\n    if n < 0 then\n        return false\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9_vxhfdr.lua:40: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- n is prime if n is only divisible by 1 and itself\n    -- n < 2 is not\
    \ prime\n    if n < 2 then\n        return false\n    end\n    -- 2 is a special\
    \ case\n    if n == 2 then\n        return true\n    end\n    -- even numbers\
    \ > 2 are not prime\n    if n % 2 == 0 then\n        return false\n    end\n \
    \   -- loop from 3 to the square root of n, incrementing by 2\n    for x = 3,\
    \ math.sqrt(n), 2 do\n        -- if n is divisible by an odd number, it is not\
    \ prime\n        if n % x == 0 then\n            return false\n        end\n \
    \   end\n    -- after all that, if n is not divisible by any odd number, it is\
    \ prime\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    local sqrt_n = math.sqrt(n)\n    for i = 2, sqrt_n do\n        if n % i ==\
    \ 0 then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_7n5nu7.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb_7n5nu7.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local divisor = 3\n \
    \ while divisor <= math.sqrt(n) do\n    if n % divisor == 0 then\n      return\
    \ false\n    end\n    divisor = divisor + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 1 then\n        return false\n    end\n    if n == 2 then\n     \
    \   return true\n    end\n    if n % 2 == 0 then\n        return false\n    end\n\
    \    local i = 3\n    while i <= math.sqrt(n) do\n        if n % i == 0 then\n\
    \            return false\n        end\n        i = i + 2\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if (n < 1) then\n        return false\n    end\n    if (n < 4) then\n   \
    \     return true\n    end\n    if (n % 2 == 0) then\n        return false\n \
    \   end\n    local max = math.sqrt(n)\n    for i = 3, max, 2 do\n        if (n\
    \ % i == 0) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62ryykoq.lua:44:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp62ryykoq.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n == 1 then\n\t\treturn false\n\tend\n\tfor i = 2, math.floor(math.sqrt(n))\
    \ do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then\n    return false\n  end\n  local m = math.floor(math.sqrt(n))\n\
    \  for i = 2, m do\n    if math.floor(n % i) == 0 then\n      return false\n \
    \   end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- Obviously 0 and 1 aren't prime.\n    if n <= 1 then\n        return false\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdvw9x8g9.lua:40: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  for i = 2, n / 2 do\n    if n % i\
    \ == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- TODO: return true if n is prime, false otherwise\n  if n == 1 then return\
    \ false end\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if math.fmod(n, i) == 0 then\n            return false\n       \
    \ end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n == 2 then\n    return true\n  elseif n % 2 == 0 then\n    return false\n\
    \  end\n  local bound = math.floor(math.sqrt(n))\n  for i = 3, bound, 2 do\n \
    \   if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkk0hcxn0.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkk0hcxn0.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if (n > 1) then\n        if n == 2 then\n            return true\n      \
    \  elseif n % 2 == 0 then\n            return false\n        end\n        for\
    \ x = 3, math.sqrt(n), 2 do\n            if n % x == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n <= 1 then\n        return false\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n == 1 then\n    return false\n  end\n  local max_divisor = math.floor(math.sqrt(n))\n\
    \  for i = 2, max_divisor do\n    if n % i == 0 then\n      return false\n   \
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4llht2q.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp4llht2q.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n == 1 then\n    return false\n  end\n  local t = 2\n  while t*t <= n do\n\
    \    if n % t == 0 then\n      return false\n    end\n    t = t + 1\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \t-- check if n is a multiple of 2\n\tif n % 2 == 0 then return false end\n\t\
    -- if not, then just check the odds\n\tfor i = 3, math.sqrt(n), 2 do\n\t\tif n\
    \ % i == 0 then return false end\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt94on3il.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt94on3il.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 2 then\n        return true\n    elseif n <= 1 or n % 2 == 0 then\n\
    \        return false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnlx0dcfu.lua:41: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \t-- replace this with your solution\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgsm8loy.lua:23:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmprgsm8loy.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n < 2 then\n\t\treturn false\n\tend\n\tlocal s = math.floor(math.sqrt(n))\n\
    \tfor i = 2, s do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 2 then\n        return true\n    elseif n % 2 == 0 then\n       \
    \ return false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpupbw7k2j.lua:41: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    if n % 2 == 0 then\n  \
    \      return n == 2\n    end\n    for i = 3, math.sqrt(n), 2 do\n        if n\
    \ % i == 0 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n < 2 then\n\t\treturn false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif\
    \ n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    for x = 2,math.sqrt(n) do\n        if n % x == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4n_j1cq.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu4n_j1cq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- edge cases\n    if n <= 1 then\n        return false\n    end\n    if\
    \ n == 2 then\n        return true\n    end\n    if n % 2 == 0 then\n        return\
    \ false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdcmeuymv.lua:46: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  local i\n  local sqrt_n = math.sqrt(n)\n  for i = 2, sqrt_n do\n    if n %\
    \ i == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzigopsz.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyzigopsz.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- Handle negative numbers.\n    if n < 0 then\n        n = -n\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplo8g_8ym.lua:40: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    local i\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n   \
    \         return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s9jdrwf.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3s9jdrwf.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    for i = 2, n - 1 do\n \
    \       if n % i == 0 then\n            return false\n        end\n    end\n \
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n == 1 then\n    return false\n  end\n  for i = 2, n - 1 do\n    if n %\
    \ i == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    local m = 2\n    while\
    \ m * m <= n do\n        if n % m == 0 then\n            return false\n      \
    \  end\n        m = m + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    local divisor_ceiling = math.sqrt(n)\n    local divisor = 2\n    while divisor\
    \ <= divisor_ceiling do\n        if n % divisor == 0 then\n            return\
    \ false\n        end\n        divisor = divisor + 1\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_swaizi.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr_swaizi.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\t\
    end\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplog5t6n0.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplog5t6n0.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n <= 1 then\n        return false\n    end\n    local i = 2\n    while\
    \ i <= math.sqrt(n) do\n        if n % i == 0 then\n            return false\n\
    \        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n <= 1 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n <= 1 then\n        return false\n    end\n    if n <= 3 then\n     \
    \   return true\n    end\n    if n % 2 == 0 or n % 3 == 0 then\n        return\
    \ false\n    end\n    local i = 5\n    while i * i <= n do\n        if n % i ==\
    \ 0 or n % (i + 2) == 0 then\n            return false\n        end\n        i\
    \ = i + 6\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 1 then\n        return false\n    end\n    local s = math.floor(math.sqrt(n))\n\
    \    for i = 2, s do\n        if n % i == 0 then\n            return false\n \
    \       end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnks9xrdf.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnks9xrdf.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then\n    return false\n  end\n  for i = 2, n - 1 do\n    if n %\
    \ i == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n < 1 then\n\t\treturn false\n\tend\n\tfor i = 2, math.floor(math.sqrt(n))\
    \ do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgc8myxj_.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgc8myxj_.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    local divisor = 2\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwoypj70c.lua:37: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    return n > 1 and not any(function(x) return n % x == 0 end, range(2, n -\
    \ 1))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj1vvkj66.lua:17:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpj1vvkj66.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpj1vvkj66.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    local i = 2\n    while\
    \ i * i <= n do\n        if n % i == 0 then\n            return false\n      \
    \  end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- not a prime if less than 2 or an even number\n    if n < 2 or n % 2 ==\
    \ 0 then\n        return false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnhiw7bnf.lua:40: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  for i = 2, math.sqrt(n) do\n    if\
    \ n % i == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 1 then\n        return false\n    end\n    if n == 2 then\n     \
    \   return true\n    end\n    if n % 2 == 0 then\n        return false\n    end\n\
    \    local k = 3\n    while k < math.sqrt(n) do\n        if n % k == 0 then\n\
    \            return false\n        end\n        k = k + 2\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- Insert your code here\n    -- The following line prints the input and\
    \ the output\n    if n == 2 then\n        return true\n    end\n    if n == 3\
    \ then\n        return true\n    end\n    if n == 5 then\n        return true\n\
    \    end\n    if n == 7 then\n        return true\n    end\n    if n == 11 then\n\
    \        return true\n    end\n    if n == 13 then\n        return true\n    end\n\
    \    if n == 17 then\n        return true\n    end\n    if n == 19 then\n    \
    \    return true\n    end\n    if n == 23 then\n        return true\n    end\n\
    \    if n == 29 then\n        return true\n    end\n    if n == 31 then\n    \
    \    return true\n    end\n    if n == 37 then\n        return true\n    end\n\
    \    if n == 41 then\n        return true\n    end\n    if n == 43 then\n    \
    \    return true\n    end\n    if n == 47 then\n        return true\n    end\n\
    \    if n == 53 then\n        return true\n    end\n    if n == 59 then\n    \
    \    return true\n    end\n    if n == 61 then\n        return true\n    end\n\
    \    if n == 67 then\n        return true\n    end\n    if n == 71 then\n    \
    \    return true\n    end\n    if n == 73 then\n        return true\n    end\n\
    \    if n == 79 then\n        return true\n    end\n    if n == 83 then\n    \
    \    return true\n    end\n    if n == 89 then\n        return true\n    end\n\
    \    if n == 97 then\n        return true\n    end\n    if n == 101 then\n   \
    \     return true\n    end\n    if n == 103 then\n        return true\n    end\n\
    \    if n == 107 then\n        return true\n    end\n    if n == 109 then\n  \
    \      return true\n    end\n    if n == 113 then\n        return true\n    end\n\
    \    if n == 127 then\n        return true\n    end\n    if n == 131 then\n  \
    \      return true\n    end\n    if n == 137 then\n        return true\n    end\n\
    \    if n == 139 then\n        return true\n    end\n    if n == 149 then\n  \
    \      return true\n    end\n    if\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph7msvnko.lua:125: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \t-- Check if n is a prime number\n\t-- Source: https://en.wikipedia.org/wiki/Primality_test#Pseudocode\n\
    \tif n <= 1 then\n\t\treturn false\n\telseif n <= 3 then\n\t\treturn true\n\t\
    elseif n % 2 == 0 or n % 3 == 0 then\n\t\treturn false\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgffujdfh.lua:45: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n < 2 then\n\t\treturn false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif\
    \ n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    -- Note: code inside [[...]] is multiline comment\n    if n < 2 then\n  \
    \      return false\n    end\n    for k = 2, math.sqrt(n) do\n        if n % k\
    \ == 0 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- make sure n > 1\n  n = n + 0\n  if n <= 1 then\n    return false\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw6gbo_qt.lua:41: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    for i = 2, n-1 do\n   \
    \     if (n % i) == 0 then\n            return false\n        end\n    end\n \
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tfor m = 2, n - 1 do\n\t\tif n % m == 0 then\n\t\t\treturn false\n\t\tend\n\t\
    end\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_68he2j.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1_68he2j.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n == 2 then\n    return true\n  elseif n == 1 or n % 2 == 0 then\n    return\
    \ false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplgkyq1mo.lua:41: 'end' expected (to close 'function' at line\
    \ 16) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif (n == 2) then\n\t\treturn true\n\telseif ((n % 2) == 0) then\n\t\treturn\
    \ false\n\tend\n\tlocal n_sqrt = math.floor(math.sqrt(n))\n\tfor i = 3, n_sqrt,\
    \ 2 do\n\t\tif ((n % i) == 0) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq8vaclw.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcq8vaclw.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n == 1 then\n    return false\n  end\n  if n < 4 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  if n < 9 then\n    return\
    \ true\n  end\n  if n % 3 == 0 then\n    return false\n  end\n  local r = math.floor(math.sqrt(n))\n\
    \  local f = 5\n  while f <= r do\n    if n % f == 0 then\n      return false\n\
    \    end\n    if n % (f + 2) == 0 then\n      return false\n    end\n    f = f\
    \ + 6\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \t-- Your code here\n\t-- we can rewrite is_prime(n) as not (n == 1 or not is_prime(n))\n\
    \tif n == 1 then\n\t\treturn false\n\telse\n\t\treturn not not_prime(n)\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx8n609ag.lua:22:\
    \ attempt to call a nil value (global 'not_prime')\nstack traceback:\n\t/tmp/tmpx8n609ag.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpx8n609ag.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n <= 1 then\n        return false\n    end\n    for d = 2, math.sqrt(n)\
    \ do\n        if n % d == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  local m = math.floor(math.sqrt(n))\n  for i = 2, m do\n    if n % i == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6voyrm2.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx6voyrm2.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  local result = true\n  local i = 2\n  while i < n and result do\n    result\
    \ = n % i ~= 0\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cmmhyvi.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_cmmhyvi.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n == 1 then\n        return false\n    end\n    local root = math.sqrt(n)\n\
    \    local i = 2\n    while i <= root do\n        if n % i == 0 then\n       \
    \     return false\n        end\n        i = i + 1\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n == 1 then\n\t\treturn false\n\tend\n\tlocal i = 2\n\twhile i * i <= n do\n\
    \t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\n\t\
    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- brute force it!\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_32_ul4i.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_32_ul4i.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Check if n is a prime number\n  -- 1 is not prime\n  if n == 1 then\n  \
    \  return false\n  end\n  -- 2 is the only even prime number\n  if n == 2 then\n\
    \    return true\n  end\n  -- If n is even it's not prime\n  if n % 2 == 0 then\n\
    \    return false\n  end\n  -- Check if there is a divisor less than sqrt(n)\n\
    \  local i = 3\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      return\
    \ false\n    end\n    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  for i = 2, math.sqrt(n) do\n    if\
    \ n % i == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    if n < 2 then\n        return false\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9c93qie.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr9c93qie.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_oad901e.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_oad901e.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n < 2 then\n\t\treturn false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif\
    \ n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif (n < 2) then\n\t\treturn false\n\tend\n\tfor i = 2, n-1 do\n\t\tif (n % i\
    \ == 0) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \tif n < 2 then\n\t\treturn false\n\tend\n\tfor d = 2,n-1 do\n\t\tif n % d ==\
    \ 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
