name: HumanEval_102_choose_num
language: lua
prompt: "-- This function takes two positive numbers x and y and returns the\n-- biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n-- there's no\
  \ such number, then the function should return -1.\n-- For example:\n-- choose_num(12,\
  \ 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x, y)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
  \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13, 12),\
  \ -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
  \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
  \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
  \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tif x % 2 == 0 then\n\t\tif x <= y then\n\t\t\treturn x\n\t\telse\n\
    \t\t\treturn -1\n\t\tend\n\telse\n\t\tif x < y then\n\t\t\treturn x + 1\n\t\t\
    else\n\t\t\treturn -1\n\t\tend\n\tend\nend", "\t-- TODO: implement this function\n\
    end", "    if x > y then\n        return -1\n    end\n    local i = 1\n    while\
    \ (y - i >= x) do\n        if (y - i) % 2 == 0 then\n            return y - i\n\
    \        end\n        i = i + 1\n    end\n    return -1\nend", "\tlocal a = x\n\
    \tif x > y then\n\t\ta = y\n\tend\n\twhile a <= y do\n\t\tif a % 2 == 0 then\n\
    \t\t\treturn a\n\t\tend\n\t\ta = a + 1\n\tend\n\treturn -1\nend", "\tif x > y\
    \ then\n\t\treturn -1\n\tend\n\tif x % 2 == 0 then\n\t\treturn x\n\tend\n\treturn\
    \ choose_num(x + 1, y)\nend", "    if x < y then\n        if y % 2 == 0 then\n\
    \            return y\n        else\n            return y - 1\n        end\n \
    \   elseif x > y then\n        if x % 2 == 0 then\n            return x\n    \
    \    else\n            return x - 1\n        end\n    else\n        if x % 2 ==\
    \ 0 then\n            return x\n        else\n            return -1\n        end\n\
    \    end\nend", "    local current = x\n    if x > y then\n        return -1\n\
    \    end\n    while current % 2 ~= 0 do\n        current = current + 1\n    end\n\
    \    return current\nend", "    -- This function returns true if the number n\
    \ is even and false otherwise.\n    local function is_even(n)\n        return\
    \ n % 2 == 0\n    end", "    local min = math.min(x, y)\n    local max = math.max(x,\
    \ y)\n    if min % 2 == 0 then\n        min = min + 1\n    end\n    if max % 2\
    \ == 0 then\n        max = max - 1\n    end\n    if min > max then\n        return\
    \ -1\n    end\n    return max\nend", '  local num = -1', "  --TODO: please write\
    \ your code here\nend", "\tlocal n = -1\n\tif x > y then\n\t\treturn n\n\tend\n\
    \tn = x - x % 2\n\tif n >= y then\n\t\treturn n\n\tend\n\tn = n + 2\n\tif n <=\
    \ y then\n\t\treturn n\n\tend\n\treturn -1\nend", "    -- Your code here\nend",
  "  -- TODO: Write your code here\n  local even_numbers = {}\n  local flag = true\n\
    \  local k = 0\n  for i = x, y do\n    if i % 2 == 0 then\n      k = k + 1\n \
    \     even_numbers[k] = i\n    end\n  end\n  if k == 0 then return -1 end\n  return\
    \ even_numbers[k]\nend", "  if x > y then return -1 end\n  for i = y, x, -1 do\n\
    \    if i % 2 == 0 then return i end\n  end\n  return -1\nend", "    local num\
    \ = -1\n    for i = x, y do\n        if i % 2 == 0 then\n            num = i\n\
    \        end\n    end\n    return num\nend", "\tif(math.ceil(x) ~= x or math.ceil(y)\
    \ ~= y) then\n\t\treturn -1\n\tend\n\tif(x % 2 == 0) then\n\t\treturn x\n\telseif(y\
    \ % 2 == 0) then\n\t\treturn y\n\telse\n\t\treturn -1\n\tend\nend", "   assert(type(x)\
    \ == \"number\" and type(y) == \"number\")\n   -- INSERT YOUR CODE HERE\n   if\
    \ (x > y) or (x < 0) or (y < 0) then\n      return -1\n   end\n   local n = y\n\
    \   while n % 2 ~= 0 do\n      n = n - 1\n   end\n   if n < x then\n      return\
    \ -1\n   end\n   return n\nend", end, "\tlocal z = 0\n\tif x > y then\n\t\tz =\
    \ x\n\telse\n\t\tz = y\n\tend\n\twhile z >= x do\n\t\tif z % 2 == 0 then\n\t\t\
    \treturn z\n\t\tend\n\t\tz = z - 1\n\tend\n\treturn -1\nend", "    -- TODO: Add\
    \ your code here\n    if x>y then return -1 end\n    if x%2==0 then return x end\n\
    \    return choose_num(x+1,y)\nend", "\treturn -1\nend", "\tfor i = y, x, -1 do\n\
    \t\tif i % 2 == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn -1\nend", " \
    \   if (x % 2 == 0) and (y % 2 == 0) then\n        return y\n    elseif (x % 2\
    \ == 0) and (y % 2 ~= 0) then\n        return x\n    elseif (x % 2 ~= 0) and (y\
    \ % 2 == 0) then\n        return y\n    else\n        return -1\n    end\nend",
  "  if not x or not y then\n    return -1\n  end\n  for i = y, x, -1 do\n    if i\
    \ % 2 == 0 then\n      return i\n    end\n  end\n  return -1\nend", "  local l\
    \ = math.min(x, y)\n  local r = math.max(x, y)\n  local n = l\n  while n <= r\
    \ do\n    if n % 2 == 0 then\n      return n\n    end\n    n = n + 1\n  end\n\
    \  return -1\nend", "\t-- body\n\tif x%2 == 1 then\n\t\tx = x + 1\n\tend\n\tif\
    \ y%2 == 1 then\n\t\ty = y - 1\n\tend\n\tif y < x then\n\t\treturn -1\n\tend\n\
    \treturn y\nend", end, "    local res = 0\n    for i = y, x, -1 do\n        if\
    \ i % 2 == 0 then\n            res = i\n            break\n        end\n    end\n\
    \    if res == 0 then\n        return -1\n    else\n        return res\n    end\n\
    end", "\tif x > y then\n\t\treturn -1\n\tend\n\tlocal result = y\n\tif y % 2 ==\
    \ 1 then\n\t\tresult = y - 1\n\tend\n\tfor i = result, x, -2 do\n\t\treturn i\n\
    \tend\n\treturn -1\nend", "  if x > y then return -1 end\n  for i = y, x, -1 do\n\
    \    if i % 2 == 0 then return i end\n  end\n  return -1\nend", "  -- TODO: Write\
    \ your code here\n  -- Hint: you can use modulo operation to get the remainder\n\
    \  local result = -1\n  if(x == y) then\n    if((x % 2) == 0) then\n      result\
    \ = x\n    end\n  elseif(x > y) then\n    for i = y, x, 2 do\n      if(i % 2 ==\
    \ 0) then\n        result = i\n      end\n    end\n  else\n    for i = x, y, 2\
    \ do\n      if(i % 2 == 0) then\n        result = i\n      end\n    end\n  end\n\
    \  return result\nend", "    if (x % 2 == 0) then\n        return math.max(x,\
    \ y);\n    else\n        if (y % 2 == 0) then\n            return y;\n       \
    \ else\n            return -1;\n        end\n    end\nend", "    local even_num\
    \ = -1\n    for i = x, y do\n        if i % 2 == 0 then\n            even_num\
    \ = i\n        end\n    end\n    return even_num\nend", "\twhile (x <= y) do\n\
    \t\tif (x % 2 == 0) then\n\t\t\treturn x\n\t\tend\n\t\tx = x + 1\n\tend\n\treturn\
    \ -1\nend", "    if x % 2 == 0 then\n        if x < y then\n            return\
    \ x\n        else\n            return y\n        end\n    else\n        if x +\
    \ 1 < y then\n            return x + 1\n        else\n            return -1\n\
    \        end\n    end\nend", "    local z = x\n    if z % 2 == 1 then\n      \
    \  z = z + 1\n    end\n    if z > y then\n        return -1\n    end\n    return\
    \ z\nend", "    -- Initialize the range with numbers x, x+1, ..., y\n    local\
    \ range = {}\n    for i = x, y do\n        table.insert(range, i)\n    end", " \
    \   return ((x % 2 == 0) and x) or ((y % 2 == 0) and y) or -1\nend", "    -- put\
    \ your code here\n    local o = x\n    if o%2 == 1 then\n        o = o + 1\n \
    \   end\n    while o <= y do\n        return o\n    end\n    return -1\nend",
  "    local biggest_even_num = -1\n    for i = x, y do\n        if i % 2 == 0 then\n\
    \            biggest_even_num = i\n        end\n    end\n    return biggest_even_num\n\
    end", "  for n = x, y do\n    if n % 2 == 0 then\n      return n\n    end\n  end\n\
    \  return -1\nend", "\t\n\t-- If x and y are the same number, then just return\
    \ that number if \n\t-- it's even. Otherwise, return -1.\n\tif x == y then\n\t\
    \tif x % 2 == 0 then\n\t\t\treturn x\n\t\telse\n\t\t\treturn -1\n\t\tend\n\tend\n\
    \t\n\t-- If x is even, then return it\n\tif x % 2 == 0 then\n\t\treturn x\n\t\
    -- If x is not even and y is even, then return y\n\telseif y % 2 == 0 then\n\t\
    \treturn y\n\t-- Else, x and y are both odd and we need to find the biggest even\
    \ \n\t-- number between them.\n\telse\n\t\t-- These should both round down to\
    \ the same value. Just use one.\n\t\tlocal rounded_x = math.floor(x / 2)\n\t\t\
    local rounded_y = math.floor(y / 2)\n\t\t\n\t\t-- The difference between the rounded\
    \ numbers should be the same \n\t\t-- as the difference between the original numbers.\n\
    \t\tlocal difference = rounded_y - rounded_x\n\t\t\n\t\t-- The biggest even number\
    \ should be the sum of the rounded \n\t\t-- numbers and the difference.\n\t\t\
    return rounded_x + difference\n\tend\nend", "\tif x > y then\n\t\treturn -1\n\t\
    end\n\tfor i = y, x, -1 do\n\t\tif is_even(i) then\n\t\t\treturn i\n\t\tend\n\t\
    end\n\treturn -1\nend", "    if y % 2 == 0 then\n        y = y - 1\n    end\n\
    \    for i = y, x, -2 do\n        return i\n    end\n    return -1\nend", "  \
    \  if y < x then return -1 end\n    return (x + y) - ((x + y) % 2)\nend", "  local\
    \ numbers = {}\n  local flag = 0\n  local i = 1\n  local res = -1\n  if x > y\
    \ then\n    i = x\n    x = y\n    y = i\n  end\n  for i = x, y do\n    if i %\
    \ 2 == 0 then\n      numbers[#numbers + 1] = i\n      flag = 1\n    end\n  end\n\
    \  if flag == 1 then\n    res = numbers[#numbers]\n  end\n  return res\nend",
  "\tassert(type(x) == \"number\" and type(y) == \"number\", \"x or y is not a number\"\
    )\n\tassert(x >= 0 and y >= 0, \"x or y is negative\")\n\tassert(x <= y, \"x is\
    \ greater than y\")\n\tif x % 2 == 0 then\n\t\treturn x\n\telseif y % 2 == 0 then\n\
    \t\treturn y\n\telse\n\t\treturn -1\n\tend\nend", "\tif x > y then\n\t\treturn\
    \ -1\n\tend\n\tif x % 2 == 0 then\n\t\treturn x\n\tend\n\treturn choose_num(x\
    \ + 1, y)\nend", "   while x <= y do\n      if x % 2 == 0 then\n         return\
    \ x\n      end\n      x = x + 1\n   end\n   return -1\nend", "    if (x % 2) ==\
    \ 0 then\n        if x >= y then\n            return x\n        elseif y % 2 ==\
    \ 0 then\n            return y\n        else\n            return x\n        end\n\
    \    elseif (y % 2) == 0 then\n        return y\n    else\n        return -1\n\
    \    end\nend", "    -- Your code here.\n    return -1\nend", "\t-- WRITE YOUR\
    \ CODE HERE\n\t\n\tif (x%2==0) then\n\t\tif (y%2==0) then\n\t\t\treturn y\n\t\t\
    else\n\t\t\treturn y-1\n\t\tend\n\telse\n\t\tif (y%2==0) then\n\t\t\treturn y-1\n\
    \t\telse\n\t\t\treturn -1\n\t\tend\n\tend\nend", "    if (x > y) then\n      \
    \  local tmp = x\n        x = y\n        y = tmp\n    end\n    local n = math.ceil(x\
    \ / 2) * 2\n    while (n <= y) do\n        return n\n    end\n    return -1\n\
    end", "\treturn \"\"\nend", "    for i = y, x, -1 do\n        if i % 2 == 0 then\n\
    \            return i\n        end\n    end\n    return -1\nend", "   local a\
    \ = x\n   if y < x then a = y end\n   local r = -1\n   while a <= y do\n     \
    \ if a % 2 == 0 then\n         r = a\n      end\n      a = a + 1\n   end\n   return\
    \ r\nend", "    -- your code here\n    if x <= y then\n        for i = y, x, -1\
    \ do\n            if i % 2 == 0 then\n                return i\n            end\n\
    \        end\n    end\n    return -1\nend", "    -- TODO: complete this function\n\
    \    if x % 2 == 0 then\n        if y % 2 == 0 then\n            return math.max(x,\
    \ y)\n        else\n            return x\n        end\n    else\n        if y\
    \ % 2 == 0 then\n            return y\n        else\n            return -1\n \
    \       end\n    end\nend", "    if (y % 2 == 0) then\n        return y\n    elseif\
    \ (x % 2 == 0) then\n        return x\n    else\n        return -1\n    end\n\
    end", "    -- YOUR CODE HERE\n    if y%2==0 then\n        y=y-1\n    end\n   \
    \ for i=y,x,-2 do\n        if i%2==0 then\n            return i\n        end\n\
    \    end\n    return -1\nend", "    local bigger = math.max(x, y)\n    local smaller\
    \ = math.min(x, y)\n    for i = bigger, smaller, -1 do\n        if i % 2 == 0\
    \ then\n            return i\n        end\n    end\n    return -1\nend", "   \
    \ -- TODO: Add your code here\n    return -1\nend", "\tassert(x >= 0 and y >=\
    \ 0, \"Inputs to choose_num must be positive!\")\n\tif x > y then\n\t\treturn\
    \ -1\n\tend\n\tfor i = y, x, -1 do\n\t\tif i % 2 == 0 then\n\t\t\treturn i\n\t\
    \tend\n\tend\n\treturn -1\nend", "\tif x > y then \n\t\treturn -1\n\tend", " \
    \ \n  if(x < 0 or y < 0) then\n    return -1\n  end\n  \n  if(x % 2 == 0) then\n\
    \    return x\n  else\n    return x + 1\n  end\n  \nend", "    return -1\nend",
  "    if x % 2 == 0 then\n        if x == y then\n            return x\n        else\n\
    \            return choose_num(x + 2, y)\n        end\n    else\n        if x\
    \ + 1 == y then\n            return y\n        else\n            return choose_num(x\
    \ + 1, y)\n        end\n    end\nend", "    local z = math.floor(x / 2) * 2\n\
    \    if z < x then\n        z = z + 2\n    end\n    if z <= y then\n        return\
    \ z\n    else\n        return -1\n    end\nend", "    local res = -1\n    for\
    \ i = y, x, -1 do\n        if i % 2 == 0 then\n            res = i\n         \
    \   break\n        end\n    end\n    return res\nend", "    if x <= y then\n \
    \       for i = y, x, -1 do\n            if i % 2 == 0 then\n                return\
    \ i\n            end\n        end\n    end\n    return -1\nend", "    if x < y\
    \ then\n        return choose_num(y, x)\n    end\n    if x % 2 == 0 then\n   \
    \     return x\n    end\n    if x == y then\n        return -1\n    end\n    return\
    \ choose_num(x - 1, y)\nend", "\tif (x > y) then\n\t\treturn -1\n\tend\n\tif (x\
    \ % 2 == 0) then\n\t\treturn x\n\tend\n\treturn choose_num(x + 1, y)\nend", "\t\
    -- ...\nend", "    local max_even = -1\n    for i = x, y do\n        if i % 2\
    \ == 0 and i > max_even then\n            max_even = i\n        end\n    end\n\
    \    return max_even\nend", "  x = math.floor(x / 2) * 2\n  y = math.floor(y /\
    \ 2) * 2\n  if x <= y then\n    return y\n  else\n    return -1\n  end\nend",
  "    -- TODO: complete this function\nend", "    local smallest = math.min(x, y)\n\
    \    local biggest = math.max(x, y)\n    for i = biggest, smallest, -1 do\n  \
    \      if i % 2 == 0 then\n            return i\n        end\n    end\n    return\
    \ -1\nend", "  local min_xy = math.min(x, y)\n  local max_xy = math.max(x, y)\n\
    \  for i = max_xy, min_xy, -1 do\n    if i % 2 == 0 then\n      return i\n   \
    \ end\n  end\n  return -1\nend", "    -- TODO: finish writing this function\n\
    end", "  -- number is even if the remainder of dividing by 2 is 0\n  -- loop between\
    \ x and y and check if each number is even. \n  -- Save the biggest one.\n  local\
    \ largestEvenNum = -1\n  for i = x, y do\n    if i % 2 == 0 then\n      if i >\
    \ largestEvenNum then\n        largestEvenNum = i\n      end\n    end\n  end\n\
    \  return largestEvenNum\nend", "  for i = x, y do\n    if i % 2 == 0 then\n \
    \     return i\n    end\n  end\n  return -1\nend", "    local max_even = -1\n\
    \    for i = x, y do\n        if math.fmod(i, 2) == 0 then\n            max_even\
    \ = i\n        end\n    end\n    return max_even\nend", "    local a, b = x, y\n\
    \    if x > y then\n        a, b = y, x\n    end\n    if a % 2 == 0 then\n   \
    \     return b > a and b or a\n    else\n        if b % 2 == 0 then\n        \
    \    return b\n        else\n            return -1\n        end\n    end\nend",
  "  -- your code here\n  local p = 0\n  if x%2 == 0 then p = x end\n  if y%2 == 0\
    \ then p = y end\n  if p == 0 then return -1 end\n  if x>y then return p end\n\
    \  for i = x, y do\n    if i%2 == 0 then p = i end\n  end\n  return p\nend", "\t\
    -- TODO: implement the function\n\tif x == y and x % 2 == 0 then\n\t\treturn x\n\
    \telseif x % 2 == 0 and x + 1 == y then\n\t\treturn x\n\telseif x % 2 == 0 and\
    \ x + 2 == y then\n\t\treturn y\n\telseif x % 2 == 0 and x < y then\n\t\treturn\
    \ choose_num(x, y - 2)\n\telseif x % 2 == 1 and x + 1 == y then\n\t\treturn -1\n\
    \telseif x % 2 == 1 and x + 2 == y then\n\t\treturn y\n\telseif x % 2 == 1 and\
    \ x < y then\n\t\treturn choose_num(x + 1, y)\n\telse\n\t\treturn -1\n\tend\n\
    end", "\tlocal n = math.min(x, y)\n\tlocal d = math.max(x, y)", "  local z = 0\n\
    \  if x == y then\n    z = x\n  elseif x % 2 == 0 then\n    z = x\n  else\n  \
    \  z = x + 1\n  end\n  if z % 2 == 0 and z >= x and z <= y then\n    return z\n\
    \  else\n    return -1\n  end\nend", '  -- TODO: complete the body of this function',
  "\tfor i = y, x, -1 do\n\t\tif (i % 2 == 0) then\n\t\t\treturn i\n\t\tend\n\tend\n\
    \treturn -1\nend", "\tif x > y then\n\t\treturn -1\n\tend\n\tif x % 2 == 0 then\n\
    \t\treturn x\n\tend\n\tif x + 1 <= y then\n\t\treturn x + 1\n\tend\n\treturn -1\n\
    end", "    local nums = {x, y}\n    for i = 1, #nums do\n        if nums[i] %\
    \ 2 == 1 then\n            nums[i] = nums[i] - 1\n        end\n    end\n    if\
    \ nums[1] == nums[2] then\n        return nums[1]\n    elseif nums[1] < nums[2]\
    \ then\n        return nums[2]\n    else\n        return -1\n    end\nend", " \
    \ -- Insert your code here\nend", "\terror(\"TODO\")\nend", "    -- Fill in the\
    \ code here.\n    local x_even = x % 2 == 0\n    local y_even = y % 2 == 0\n \
    \   if x == y then\n        if x_even then\n            return x\n        else\n\
    \            return -1\n        end\n    elseif x > y then\n        if x_even\
    \ then\n            return x\n        elseif y_even then\n            return y\n\
    \        else\n            return -1\n        end\n    else\n        if y_even\
    \ then\n            return y\n        elseif x_even then\n            return x\n\
    \        else\n            return -1\n        end\n    end\nend", "\tx = math.floor(x)\n\
    \ty = math.floor(y)\n\tif x > y then return -1 end\n\twhile y % 2 ~= 0 do\n\t\t\
    y = y - 1\n\tend\n\tif x > y then return -1 end\n\treturn y\nend", "\tlocal max\
    \ = -1\n\tfor i = x, y do\n\t\tif i % 2 == 0 and i > max then\n\t\t\tmax = i\n\
    \t\tend\n\tend\n\treturn max\nend", end, "\t\nend", "\tlocal found_even = false\n\
    \tlocal max_even = -1\n\tfor i = x, y do\n\t\tif i % 2 == 0 then\n\t\t\tmax_even\
    \ = i\n\t\t\tfound_even = true\n\t\tend\n\tend\n\tif found_even then\n\t\treturn\
    \ max_even\n\telse\n\t\treturn -1\n\tend\nend", "  -- Replace the line below with\
    \ the correct code\n  if x % 2 == 0 then\n    if y % 2 == 0 then\n      return\
    \ y\n    else\n      return y - 1\n    end\n  else\n    if y % 2 == 0 then\n \
    \     return y - 2\n    else\n      return y - 3\n    end\n  end\nend", "    local\
    \ min_even_num = -1\n    for num = x, y do\n        if num % 2 == 0 then\n   \
    \         min_even_num = num\n        end\n    end\n    return min_even_num\n\
    end", "\tif (x > y) then\n\t\treturn -1\n\tend\n\tfor i = y, x, -1 do\n\t\tif\
    \ (i % 2 == 0) then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn -1\nend", "    local\
    \ min, max = math.min(x, y), math.max(x, y)\n    for n = max, min, -1 do\n   \
    \     if n % 2 == 0 then\n            return n\n        end\n    end\n    return\
    \ -1\nend", "\t-- TODO: Implement this function.\nend", "  local num = 0\n  if\
    \ x % 2 == 0 then\n    num = x\n  else\n    num = x + 1\n  end\n  for i = num,\
    \ y, 2 do\n    if (i <= y) then\n      return i\n    end\n  end\n  return -1\n\
    end", "   local m = y\n   if y < x then m = x end\n   local r = m % 2\n   if r\
    \ == 0 then\n      return m\n   else\n      return m - 1\n   end\nend", "    if\
    \ x == y then\n        if (x % 2) == 0 then\n            return x\n        else\n\
    \            return -1\n        end\n    elseif x > y then\n        return choose_num(y,\
    \ x)\n    elseif (x % 2) == 0 then\n        return x\n    else\n        return\
    \ choose_num(x + 1, y)\n    end\nend", "    if y - x < 1 then\n        return\
    \ -1\n    end\n    if x % 2 == 0 then\n        return x\n    end\n    return choose_num(x\
    \ + 1, y)\nend\nprint(choose_num(12, 15))\nprint(choose_num(13, 12))", "    --\
    \ is x < y ?\n    if x < y then\n        -- so x = 12 and y = 15\n        -- is\
    \ x modulo 2 = 0?\n        if x % 2 == 0 then\n            -- so x = 12\n    \
    \        -- return 12\n            return x\n        else\n            -- so x\
    \ = 13\n            -- x + 1 = 14\n            -- 14 % 2 = 0\n            -- return\
    \ 14\n            return x + 1\n        end\n    else\n        -- so x = 15 and\
    \ y = 12\n        -- return -1\n        return -1\n    end\nend", "    if(y %\
    \ 2 == 0) then\n        return y\n    elseif(x == y) then\n        return -1\n\
    \    else \n        return choose_num(x, y - 1)\n    end\nend", "\tfor x <= y\
    \ do\n\t\tif x%2 == 0 then\n\t\t\treturn x\n\t\tend\n\t\tx = x + 1\n\tend\n\t\
    return -1\nend", "    local max = -1\n    local i = x\n    while i <= y do\n \
    \       if i % 2 == 0 and i > max then\n            max = i\n        end\n   \
    \     i = i + 1\n    end\n    return max\nend", "    local biggest = -1\n    for\
    \ i = x, y do\n        if i % 2 == 0 and i > biggest then\n            biggest\
    \ = i\n        end\n    end\n    return biggest\nend", "    for i = x, y do\n\
    \        if (i % 2 == 0) then\n            return i\n        end\n    end\n  \
    \  return -1\nend", "\tif (x % 2 == 0) then\n\t\treturn x\n\telse\n\t\treturn\
    \ x + 1\n\tend\nend", "  -- TODO: replace this line with your code\n  local result\
    \ = 0\n  if (x == y) then\n    if (x % 2 == 0) then\n      result = x\n    else\n\
    \      result = -1\n    end\n  elseif (x > y) then\n    result = -1\n  else\n\
    \    if (x % 2 == 0) then\n      result = x\n    else\n      result = x + 1\n\
    \    end\n  end\n  return result\nend", "\tif( x%2 ~= 0 and y%2 ~= 0 ) then\n\t\
    \treturn -1\n\telseif( x%2 == 0 and y%2 == 0 ) then\n\t\treturn y\n\telseif( x%2\
    \ == 0 and y%2 ~= 0 ) then\n\t\treturn x\n\telse\n\t\treturn y-1\n\tend\nend",
  "    if x > y then\n        return -1\n    end\n    local num = x\n    while num\
    \ <= y do\n        if num % 2 == 0 then\n            return num\n        end\n\
    \        num = num + 1\n    end\n    return -1\nend", "  -- YOUR CODE HERE\n \
    \ return -1\nend", "\tfor i = x, y do\n\t\tif i % 2 == 0 then\n\t\t\treturn i\n\
    \t\tend\n\tend\n\treturn -1\nend", "   if x <= y then\n      if x % 2 == 0 then\n\
    \         return x\n      else\n         return choose_num(x + 1, y)\n      end\n\
    \   else\n      return -1\n   end\nend\nprint(choose_num(0, 20))", "\tif x > y\
    \ then\n\t\treturn -1\n\tend\n\tif x % 2 == 0 then\n\t\treturn x\n\tend\n\treturn\
    \ choose_num(x + 1, y)\nend", "\t--TODO: implement this function\n\tlocal a =\
    \ x % 2\n\tlocal b = y % 2\n\tlocal l = x\n\t\n\twhile l <= y do\n\t\tif l % 2\
    \ == 0 then\n\t\t\treturn l\n\t\tend\n\t\tl = l + 1\n\tend\n\treturn -1\nend",
  "   local n = math.max(x, y)\n   if (n % 2 == 0) then\n      return n\n   else\n\
    \      return n - 1\n   end\nend", "    -- your code here\nend", "    local r\
    \ = x\n    while r <= y do\n        if r % 2 == 0 then\n            return r\n\
    \        end\n        r = r + 1\n    end\n    return -1\nend", "  if (x % 2 ==\
    \ 0) then\n    return x\n  elseif (y % 2 == 0) then\n    return y\n  else\n  \
    \  return -1\n  end\nend", "  \nend", "\tlocal num = -1\n\tlocal curr = math.max(x,\
    \ y)\n\twhile curr >= x do\n\t\tif curr % 2 == 0 then\n\t\t\tnum = curr\n\t\t\t\
    break\n\t\tend\n\t\tcurr = curr - 1\n\tend\n\treturn num\nend", end, "  -- write\
    \ your code here\nend", "\t-- This function is already done, no need to implement\
    \ it\n\treturn math.floor(y / 2) * 2\nend", "    local start = math.max(x, y)\n\
    \    local finish = math.min(x, y)\n    local number = finish\n    while start\
    \ ~= finish do\n        if finish % 2 == 0 then\n            return finish\n \
    \       end\n        finish = finish - 1\n    end\n    return -1\nend", "  return\
    \ -1\nend", "\t-- TODO: return the biggest even number in [x, y]\n\tlocal n =\
    \ x\n\twhile n <= y do\n\t\tif n % 2 == 0 then\n\t\t\treturn n\n\t\tend\n\t\t\
    n = n + 1\n\tend\n\treturn -1\nend", "    for i = y, x, -1 do\n        if i %\
    \ 2 == 0 then\n            return i\n        end\n    end\n    return -1\nend",
  "  -- TODO: Write your code here\n  if y > x then\n    while y >= x do\n      if\
    \ y % 2 == 0 then\n        return y\n      end\n      y = y - 1\n    end\n  end\n\
    \  return -1\nend", "    -- YOUR CODE GOES HERE\n    local number = 0\n    for\
    \ i = x, y do\n        if i % 2 == 0 then\n            number = i\n        end\n\
    \    end\n    if number > x then\n        return number\n    else\n        return\
    \ -1\n    end\nend", "  for i = y, x, -1 do\n    if (i % 2 == 0) then\n      return\
    \ i\n    end\n  end\n  return -1\nend", "\tlocal max_even = -1\n\tlocal current\
    \ = x\n\twhile current <= y do\n\t\tif current % 2 == 0 then\n\t\t\tmax_even =\
    \ current\n\t\tend\n\t\tcurrent = current + 1\n\tend\n\treturn max_even\nend",
  "\tlocal num = -1\n\tlocal even = -1\n\tfor i = x, y do\n\t\tnum = i\n\t\teven =\
    \ num % 2\n\t\tif even == 0 then\n\t\t\treturn num\n\t\tend\n\tend\n\treturn -1\n\
    end", "\t-- your code here\n\tif x > y then\n\t\treturn -1\n\tend\n\treturn y\
    \ % 2 == 0 and y or y - 1\nend", "\tlocal ret = -1\n\t-- your code goes here...\n\
    \tif y == x then\n\t\tif y % 2 == 0 then\n\t\t\tret = y\n\t\tend\n\telseif y >\
    \ x then\n\t\tfor i = y, x, -1 do\n\t\t\tif i % 2 == 0 then\n\t\t\t\tret = i\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\t-- ...until here.\n\treturn ret\n\
    end", "    -- your code here\n    local r = y\n    while (r % 2 ~= 0) do\n   \
    \     r = r - 1\n    end\n    if (r < x) then\n        return -1\n    else\n \
    \       return r\n    end\nend", "    -- write your code here\n    x = math.floor(x)\n\
    \    y = math.floor(y)\n    if x > y then\n        return -1\n    end\n    for\
    \ i = y, x, -1 do\n        if i % 2 == 0 then\n            return i\n        end\n\
    \    end\n    return -1\nend", "\t-- TODO: Write code here that returns the correct\
    \ value.\n\tif (x - y) % 2 == 0 then\n\t\tif x % 2 == 0 then\n\t\t\treturn x\n\
    \t\telse\n\t\t\treturn x - 1\n\t\tend\n\telse\n\t\tif x % 2 == 0 then\n\t\t\t\
    return x\n\t\telse\n\t\t\treturn x - 1\n\t\tend\n\tend\nend", "\tlocal biggest\
    \ = -1\n\tfor i = x, y do\n\t\tif i % 2 == 0 and i > biggest then\n\t\t\tbiggest\
    \ = i\n\t\tend\n\tend\n\treturn biggest\nend", "  local r = -1\n  for i = y, x,\
    \ -1 do\n    if (i % 2 == 0) then\n      r = i\n      break\n    end\n  end\n\
    \  return r\nend", "    if x > y then\n        return -1\n    end\n    if x %\
    \ 2 == 0 then\n        return x\n    end\n    if x + 1 < y then\n        return\
    \ x + 1\n    end\n    return -1\nend", "\tlocal num = (x < y) and y or x\n\twhile(num\
    \ % 2 ~= 0) do\n\t\tnum = num - 1\n\tend\n\treturn (num >= x) and num or -1\n\
    end", "    if x % 2 == 0 then\n        return x\n    elseif y % 2 == 0 then\n\
    \        return y\n    else\n        return -1\n    end\nend", "  if x % 2 ==\
    \ 0 then\n    return x\n  elseif x + 1 <= y then\n    return x + 1\n  else\n \
    \   return -1\n  end\nend", "    if x > y then\n        return -1\n    end\n \
    \   while y % 2 ~= 0 do\n        y = y - 1\n    end\n    return y\nend", "   \
    \ local res = -1\n    for i = x, y do\n        if (i % 2 == 0) then\n        \
    \    res = i\n        end\n    end\n    return res\nend", "\tlocal z = 0\n\tif\
    \ (x % 2) == 0 then\n\t\tz = x\n\telse\n\t\tz = x + 1\n\tend\n\tif z > y then\n\
    \t\treturn -1\n\telse\n\t\treturn z\n\tend\nend", "    local biggestEvenNumber\
    \ = -1\n    for number = x, y do\n        if (number % 2 == 0) then\n        \
    \    biggestEvenNumber = number\n        end\n    end\n    return biggestEvenNumber\n\
    end", "    local max_even = -1\n    for i = x, y do\n        if i % 2 == 0 and\
    \ i > max_even then\n            max_even = i\n        end\n    end\n    return\
    \ max_even\nend", "    if x == y then\n        if x % 2 == 0 then\n          \
    \  return x\n        else\n            return -1\n        end\n    elseif x >\
    \ y then\n        return choose_num(y, x)\n    else\n        local max_odd = -1\n\
    \        local max_even = -1\n        for i = x, y do\n            if i % 2 ==\
    \ 0 then\n                max_even = i\n            else\n                max_odd\
    \ = i\n            end\n        end\n        if max_even == -1 then\n        \
    \    return -1\n        else\n            return max_even\n        end\n    end\n\
    end", "    -- Calculate the result here\n    return -1\nend", "    local min =\
    \ math.min(x, y)\n    local max = math.max(x, y)\n    for i = max, min, -1 do\n\
    \        if (i % 2 == 0) then\n            return i\n        end\n    end\n  \
    \  return -1\nend", "    local _max = math.max(x, y)\n    local _min = math.min(x,\
    \ y)\n    if (_max % 2 == 0) then\n        return _max\n    elseif (_max - 1 ==\
    \ _min) then\n        return -1\n    else\n        return _max - 1\n    end\n\
    end", "   -- TODO: Replace the following line with your implementation.\n   return\
    \ -1\nend", "  \nend", "    -- your code here\n    if(x % 2 == 0) then\n     \
    \   return x\n    elseif(y % 2 == 0) then\n        return y\n    else\n      \
    \  return -1\n    end\nend", "    if x > y then\n        return -1\n    end\n\
    \    local n = x\n    while n <= y do\n        if n % 2 == 0 then\n          \
    \  return n\n        end\n        n = n + 1\n    end\n    return -1\nend", "\t\
    local i\n\tif (x > y) then\n\t\ti = y\n\telse\n\t\ti = x\n\tend\n\t\n\twhile i\
    \ >= x do\n\t\tif i % 2 == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i - 1\n\t\
    end\n\treturn -1\nend", "  for i = y, x, -1 do\n    if i % 2 == 0 then\n     \
    \ return i\n    end\n  end\n  return -1\nend", "\tif x%2==0 then\n\t\tif x>y then\
    \ return -1\n\t\telse return x\n\t\tend\n\telseif x%2==1 then\n\t\tif x+1>y then\
    \ return -1\n\t\telse return x+1\n\t\tend\n\tend\nend", "\tlocal result = -1\n\
    \tfor i = x, y do\n\t\tif i % 2 == 0 then\n\t\t\tresult = i\n\t\tend\n\tend\n\t\
    return result\nend", "\tif x % 2 == 0 then\n\t\tif x > y then\n\t\t\treturn -1\n\
    \t\telseif x == y then\n\t\t\treturn x\n\t\telse\n\t\t\treturn choose_num(x +\
    \ 2, y)\n\t\tend\n\telse\n\t\treturn choose_num(x + 1, y)\n\tend\nend", "\t--\
    \ replace the -1 with a call to the\n\t-- helper function, with the two parameters\n\
    \t-- your choose_num will be calling the helper\n\t-- twice\n\tlocal result =\
    \ choose_num_helper(x, y, 1)\n\tif result <= y then\n\t\treturn result\n\telse\n\
    \t\treturn -1\n\tend\nend", "    -- Declare a variable and use it to store the\
    \ biggest even number\n    -- in the range [x, y] inclusive.", "  -- Fill in this\
    \ function\nend", "    local r = -1\n    for i = y, x, -1 do\n        if i % 2\
    \ == 0 then\n            r = i\n            break\n        end\n    end\n    return\
    \ r\nend", "    local min = math.min(x, y)\n    local max = math.max(x, y)\n \
    \   if max % 2 == 0 then\n        return max\n    else\n        if max - 1 ==\
    \ min then\n            return -1\n        else\n            return max - 1\n\
    \        end\n    end\nend", "    local result = -1\n    if x < y then\n     \
    \   for i = x, y do\n            if i % 2 == 0 then\n                result =\
    \ i\n            end\n        end\n    end\n    return result\nend", "  local\
    \ n = math.min(x, y)\n  while n <= math.max(x, y) do\n    if n % 2 == 0 then\n\
    \      return n\n    end\n    n = n + 1\n  end\n  return -1\nend", "\tif x > y\
    \ then return -1 end\n\tif x % 2 == 0 then return x end\n\treturn choose_num(x\
    \ + 1, y)\nend", "    if x < 0 or y < 0 then\n        error('x and y must be positive\
    \ numbers')\n    end\n    if x > y then\n        error('x must be less than or\
    \ equal to y')\n    end\n    for i = y, x, -1 do\n        if i % 2 == 0 then\n\
    \            return i\n        end\n    end\n    return -1\nend", "    for i =\
    \ y, x, -1 do\n        if i % 2 == 0 then\n            return i\n        end\n\
    \    end\n    return -1\nend", "\t-- TODO: IMPLEMENT\nend", "\tif x % 2 == 0 then\n\
    \t\treturn y % 2 == 0 and y or y - 1\n\telse\n\t\treturn x % 2 == 0 and x or x\
    \ + 1\n\tend\nend", "\tlocal min, max\n\tif x < y then\n\t\tmin, max = x, y\n\t\
    else\n\t\tmin, max = y, x\n\tend\n\tfor i = max, min, -1 do\n\t\tif i % 2 == 0\
    \ then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn -1\nend", "   return -1\nend",
  "    if x > y then\n        return -1\n    end\n    if y % 2 == 0 then\n       \
    \ return y\n    end\n    if y - 1 == x then\n        return -1\n    end\n    return\
    \ choose_num(x, y - 2)\nend", "    return -1\nend", "    if (x % 2) == 0 then\n\
    \        return x\n    elseif (y % 2) == 0 then\n        return y\n    else\n\
    \        return -1\n    end\nend", end, "  -- TODO: write the body of the function\
    \ here.\n  local num = -1\n  local m = 0\n  for i = x, y do\n    if i % 2 == 0\
    \ then\n      m = i\n    end\n  end\n  if m > 0 then\n    num = m\n  end\n  return\
    \ num\nend", "    -- your code here\nend", "\tlocal nums = {...}\n\tlocal count\
    \ = #nums\n\tlocal even = {}\n\tfor i = 1, count do\n\t\tif (i % 2 == 0) then\n\
    \t\t\teven[#even + 1] = i\n\t\tend\n\tend\n\tif #even == 0 then\n\t\treturn -1\n\
    \telse\n\t\treturn even[#even]\n\tend\nend", "    -- Write your code here.\n \
    \   -- Use math.fmod() or x % y to compute the remainder.\n    -- Use print()\
    \ to debug.\nend", "\tlocal xy = x - (x % 2)", "    for i = x, y do\n        if\
    \ i % 2 == 0 then\n            return i\n        end\n    end\n    return -1\n\
    end", "  if x % 2 == 0 then\n    return x\n  elseif x + 1 <= y then\n    return\
    \ x + 1\n  else\n    return -1\n  end\nend", "   -- The assertion checks if the\
    \ numbers x and y have the correct type.\n   -- The assertion also checks if x\
    \ is less than or equal to y.\n   assert(type(x) == \"number\" and type(y) ==\
    \ \"number\" and x <= y)\n   local r = -1\n   for i = x, y do\n      if (i % 2\
    \ == 0) then\n         r = i\n      end\n   end\n   return r\nend", end, "   \
    \ -- TODO: put the correct code here\n    if x == y and x % 2 == 0 then\n    \
    \    return x\n    elseif x == y and x % 2 ~= 0 then\n        return -1\n    elseif\
    \ x > y then\n        return -1\n    elseif x % 2 == 0 and y % 2 == 0 then\n \
    \       return y\n    elseif x % 2 == 0 and y % 2 ~= 0 then\n        return y\
    \ - 1\n    elseif x % 2 ~= 0 and y % 2 == 0 then\n        return x + 1\n    elseif\
    \ x % 2 ~= 0 and y % 2 ~= 0 then\n        return choose_num(x + 1, y - 1)\n  \
    \  end\nend", "\tif x%2 == 0 then\n\t\tif x >= y then\n\t\t\treturn x\n\t\telse\n\
    \t\t\treturn choose_num(x+2, y)\n\t\tend\n\telse\n\t\tif x+1 >= y then\n\t\t\t\
    return -1\n\t\telse\n\t\t\treturn choose_num(x+2, y)\n\t\tend\n\tend\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
