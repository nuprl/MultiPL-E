name: HumanEval_131_digits
language: lua
prompt: "-- Given a positive integer n, return the product of the odd digits.\n--\
  \ Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
  \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
  \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n \
  \   lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014), 5)\n\
  \    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
  \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return 0\nend", "    return n % 2 * digits(n // 10) + digits(n //\
    \ 10)\nend", "  local sum = 1\n  while n ~= 0 do\n    local r = n % 10\n    if\
    \ r % 2 ~= 0 then\n      sum = sum * r\n    end\n    n = math.floor(n / 10)\n\
    \  end\n  return sum\nend", "\tlocal pro = 1\n\tlocal i\n\tfor i = 1, #tostring(n)\
    \ do\n\t\tif tonumber(string.sub(tostring(n), i, i)) % 2 ~= 0 then\n\t\t\tpro\
    \ = pro * tonumber(string.sub(tostring(n), i, i))\n\t\tend\n\tend\n\treturn pro\n\
    end", "    local t = {}\n    for i in string.gmatch(tostring(n), \"%d\") do\n\
    \        if tonumber(i) % 2 ~= 0 then\n            table.insert(t, i)\n      \
    \  end\n    end\n    return tonumber(table.concat(t))\nend", "    -- if n <= 0\
    \ then\n    --     return 0\n    -- end\n    -- local first_num = n % 10\n   \
    \ -- if (first_num % 2) == 0 then\n    --     return digits(math.floor(n / 10))\n\
    \    -- else\n    --     return first_num * digits(math.floor(n / 10))\n    --\
    \ end\n    return n <= 0 and 0 or\n            (n % 10 % 2 == 0 and digits(math.floor(n\
    \ / 10)) or\n                    n % 10 * digits(math.floor(n / 10)))\nend", " \
    \ local prod = 1\n  local tmp = 0\n  for i = 1, #tostring(n) do\n    tmp = n %\
    \ 10\n    if tmp % 2 ~= 0 then\n      prod = prod * tmp\n    end\n    n = math.floor(n\
    \ / 10)\n  end\n  return prod\nend", "    local res = 1\n    if n == 0 then\n\
    \        return 0\n    end\n    while n > 0 do\n        local digit = n % 10\n\
    \        if digit % 2 ~= 0 then\n            res = res * digit\n        end\n\
    \        n = math.floor(n / 10)\n    end\n    return res\nend", "  -- solution\
    \ goes here\nend", "  local m = 1\n  while n > 0 do\n    local r = n % 10\n  \
    \  if r % 2 == 1 then\n      m = m * r\n    end\n    n = math.floor(n / 10)\n\
    \  end\n  return m\nend", "  local prod = 1\n  while n > 0 do\n    local dig =\
    \ n % 10\n    if dig % 2 == 1 then\n      prod = prod * dig\n    end\n    n =\
    \ math.floor(n / 10)\n  end\n  return prod\nend", "  -- your code here\nend",
  "    local p = 1\n    for i in tostring(n):gmatch('%d') do\n        if i % 2 ~=\
    \ 0 then\n            p = p * i\n        end\n    end\n    return p\nend", " \
    \ local s = 0\n  for d in (tostring(n)):gmatch('.') do\n    d = tonumber(d)\n\
    \    if d % 2 ~= 0 then\n      s = s + d\n    end\n  end\n  return s\nend", " \
    \   n = math.abs(n)\n    local res = 1\n    while n > 0 do\n        local d =\
    \ n % 10\n        if d % 2 == 1 then\n            res = res * d\n        end\n\
    \        n = math.floor(n / 10)\n    end\n    return res\nend", "    local sum\
    \ = 1\n    while n > 0 do\n        local x = n % 10\n        if x % 2 == 1 then\n\
    \            sum = sum * x\n        end\n        n = (n - x) / 10\n    end\n \
    \   return sum\nend", "    local d = 0\n    for c in tostring(n):gmatch(\"%d\"\
    ) do\n        if tonumber(c) % 2 ~= 0 then\n            d = d + tonumber(c)\n\
    \        end\n    end\n    return d\nend", "  local result = 1\n  while n > 0\
    \ do\n    local i = n % 10\n    if i % 2 == 1 then\n      result = result * i\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return result\nend", "  local res\
    \ = 1\n  while n > 0 do\n    local x = n % 10\n    if x % 2 ~= 0 then\n      res\
    \ = res * x\n    end\n    n = math.floor(n / 10)\n  end\n  return res\nend", " \
    \   local r = 1\n    for i = 0, #tostring(n) do\n        local c = tostring(n):sub(i,\
    \ i)\n        if (tonumber(c) % 2 ~= 0) then\n            r = r * tonumber(c)\n\
    \        end\n    end\n    return r\nend", "  local product = 1\n  local result\
    \ = 0\n  for i = 1, #tostring(n) do\n    local v = tonumber(string.sub(tostring(n),\
    \ i, i))\n    if v % 2 ~= 0 then\n      product = product * v\n    end\n  end\n\
    \  if product == 1 then\n    result = 0\n  else\n    result = product\n  end\n\
    \  return result\nend", "  -- Write your code here\nend", "  local res = 1\n \
    \ while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n     \
    \ res = res * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return res\n\
    end", "    return 0\nend", "  local res = 1\n  for d in tostring(n):gmatch('%d')\
    \ do\n    d = tonumber(d)\n    if d % 2 == 1 then\n      res = res * d\n    end\n\
    \  end\n  return res\nend", "\tlocal res = 1\n\twhile n > 0 do\n\t\tlocal d =\
    \ n % 10\n\t\tif d % 2 == 1 then\n\t\t\tres = res * d\n\t\tend\n\t\tn = math.floor(n\
    \ / 10)\n\tend\n\treturn res\nend", "    n = n or -1\n    local sum = 1\n    for\
    \ i = 1, #tostring(n) do\n        local num = tonumber(tostring(n):sub(i, i))\n\
    \        if num % 2 ~= 0 then\n            sum = sum * num\n        end\n    end\n\
    \    return sum\nend", "  if n == 0 then return 0 end\n  local res = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      res =\
    \ res * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return res\nend",
  "  local product = 1\n  for digit in tostring(n):gmatch(\"%d\") do\n    digit =\
    \ tonumber(digit)\n    if digit % 2 == 1 then\n      product = product * digit\n\
    \    end\n  end\n  return product\nend", "  local res = 1\n  while n ~= 0 do\n\
    \    local digit = n % 10\n    if digit % 2 ~= 0 then\n      res = res * digit\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend", "    local prod\
    \ = 1\n    while n > 0 do\n        if n % 2 == 1 then\n            prod = prod\
    \ * (n % 10)\n        end\n        n = n // 10\n    end\n    return prod\nend\n\
    assert(digits(1) == 1)\nassert(digits(4) == 0)\nassert(digits(235) == 15)", " \
    \   if (n < 0) then\n        n = -n\n    end\n    local product = 1\n    for d\
    \ in tostring(n):gmatch('%d') do\n        local d = tonumber(d)\n        if (d\
    \ % 2 == 1) then\n            product = product * d\n        end\n    end\n  \
    \  return product\nend", "  local res = 1\n  for d in tostring(n):gmatch('%d')\
    \ do\n    local digit = tonumber(d)\n    if digit % 2 == 1 then\n      res = res\
    \ * digit\n    end\n  end\n  return res\nend", "    local result = 1\n    for\
    \ i = 1, #tostring(n) do\n        local num = tonumber(tostring(n):sub(i, i))\n\
    \        if num % 2 ~= 0 then\n            result = result * num\n        end\n\
    \    end\n    return result\nend", "    local s = 0\n    while n > 0 do\n    \
    \    local digit = n % 10\n        if digit % 2 == 1 then\n            s = s +\
    \ digit\n        end\n        n = math.floor(n / 10)\n    end\n    return s\n\
    end", "\tlocal res = 1\n\twhile n ~= 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2\
    \ ~= 0 then\n\t\t\tres = res * d\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\
    \treturn res\nend", "  local acc = 1\n  while n > 0 do\n    local d = n % 10\n\
    \    if d % 2 == 1 then\n      acc = acc * d\n    end\n    n = (n - d) / 10\n\
    \  end\n  return acc\nend\nprint(digits(235)) --> 15", "  local p = 1\n  for d\
    \ in tostring(n):gmatch('%d') do\n    d = tonumber(d)\n    if d % 2 ~= 0 then\n\
    \      p = p * d\n    end\n  end\n  return p\nend", "  -- fail fast, we don't\
    \ care about non-positive integers\n  if n <= 0 then return 0 end", "    local\
    \ res = 1\n    for d in tostring(n):gmatch(\"%d\") do\n        local d = tonumber(d)\n\
    \        if d % 2 == 1 then\n            res = res * d\n        end\n    end\n\
    \    return res\nend", "  local p = 1\n  for d in n:gmatch('%d') do\n    d = tonumber(d)\n\
    \    if d % 2 == 1 then\n      p = p * d\n    end\n  end\n  return p\nend", " \
    \   local last\n    local res = 1\n    while n > 0 do\n        last = n % 10\n\
    \        if last % 2 == 1 then\n            res = res * last\n        end\n  \
    \      n = math.floor(n / 10)\n    end\n    return res\nend", "    local res =\
    \ 1\n    while n > 0 do\n        local digit = n % 10\n        if digit % 2 ==\
    \ 1 then\n            res = res * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return res\nend", "  local product = 1\n  while n > 0 do\n\
    \    local d = n % 10\n    if d % 2 == 1 then\n      product = product * d\n \
    \   end\n    n = (n - d) / 10\n  end\n  return product\nend", "    local res =\
    \ 1\n    while n > 0 do\n        if n % 2 == 1 then\n            res = res * (n\
    \ % 10)\n        end\n        n = math.floor(n / 10)\n    end\n    return res\n\
    end", "    local sum = 1\n    while n > 0 do\n        local digit = n % 10\n \
    \       if (digit % 2) == 1 then\n            sum = sum * digit\n        end\n\
    \        n = (n - digit) / 10\n    end\n    return sum\nend", "    local accum\
    \ = 1\n    for i = 1, #tostring(n) do\n        local digit = tonumber(tostring(n):sub(i,\
    \ i))\n        if digit % 2 ~= 0 then\n            accum = accum * digit\n   \
    \     end\n    end\n    return accum\nend", "    local p = 1\n    while n > 0\
    \ do\n        local d = n % 10\n        if d % 2 == 1 then\n            p = p\
    \ * d\n        end\n        n = math.floor(n / 10)\n    end\n    return p\nend",
  "  local prod = 1\n  while n > 0 do\n    local digit = n % 10\n    if digit % 2\
    \ == 1 then\n      prod = prod * digit\n    end\n    n = math.floor(n / 10)\n\
    \  end\n  return prod\nend", "    local product = 1\n    while n ~= 0 do\n   \
    \     local digit = n % 10\n        if digit % 2 ~= 0 then\n            product\
    \ = product * digit\n        end\n        n = math.floor(n / 10)\n    end\n  \
    \  return product\nend", "  local s = 0\n  while n > 0 do\n    local d = n % 10\n\
    \    if d % 2 == 1 then\n      s = s * d\n    end\n    n = math.floor(n / 10)\n\
    \  end\n  return s\nend", "    if n <= 0 then\n        return 0\n    end\n   \
    \ return n % 10 % 2 ~= 0 and n % 10 * digits(n / 10) or digits(n / 10)\nend",
  "  if n == 0 then return 0 end\n  local last_digit = n % 10\n  if last_digit % 2\
    \ == 1 then\n    return last_digit * digits(math.floor(n / 10))\n  else\n    return\
    \ digits(math.floor(n / 10))\n  end\nend", "  -- fill here\nend", "    local result\
    \ = 1\n    while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n\
    \            result = result * d\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return result\nend", "  local result = 1\n  for i = 1, #tostring(n)\
    \ do\n    local digit = n % 10\n    if digit % 2 ~= 0 then\n      result = result\
    \ * digit\n    end\n    n = (n - digit) / 10\n  end\n  return result\nend", " \
    \  return n % 10 * digits(n / 10)\nend", "    local ret = 1\n    while n ~= 0\
    \ do\n        local d = n % 10\n        if d % 2 == 1 then\n            ret =\
    \ ret * d\n        end\n        n = (n - d) / 10\n    end\n    return ret\nend",
  "    -- insert your code here\nend", "    -- TODO\nend", "    local p = 1\n    while\
    \ n ~= 0 do\n        local r = n % 10\n        if r % 2 ~= 0 then\n          \
    \  p = p * r\n        end\n        n = (n - r) / 10\n    end\n    return p\nend",
  "    local m = 1\n    for d in tostring(n):gmatch('%d') do\n        if math.mod(tonumber(d),\
    \ 2) ~= 0 then\n            m = m * tonumber(d)\n        end\n    end\n    return\
    \ m\nend", "  local r = 1\n  for i = 1, #tostring(n) do\n    local d = tonumber(tostring(n):sub(i,\
    \ i))\n    if d % 2 ~= 0 then\n      r = r * d\n    end\n  end\n  return r\nend",
  "    local ret = 1\n    local str = tostring(n)\n    for i = 1, #str do\n      \
    \  local ch = tonumber(str:sub(i, i))\n        if ch % 2 == 1 then\n         \
    \   ret = ret * ch\n        end\n    end\n    return ret\nend", "  return 0\n\
    end", "  local result = 1\n  for i = 1, #tostring(n) do\n    local digit = tonumber(string.sub(tostring(n),\
    \ i, i))\n    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n\
    \  end\n  return result\nend", "  local sum = 1\n  while n > 0 do\n    local digit\
    \ = n % 10\n    if digit % 2 == 1 then\n      sum = sum * digit\n    end\n   \
    \ n = math.floor(n / 10)\n  end\n  return sum\nend", "    -- your code here\n\
    end", "  local prod = 1\n  while n > 0 do\n    local d = n % 10\n    if d % 2\
    \ == 1 then\n      prod = prod * d\n    end\n    n = (n - d) / 10\n  end\n  return\
    \ prod\nend", "    local ret = 1\n    while n > 0 do\n        local d = n % 10\n\
    \        if d % 2 == 1 then\n            ret = ret * d\n        end\n        n\
    \ = math.floor(n / 10)\n    end\n    return ret\nend", "  return n % 2 == 0 and\
    \ 0 or (n % 10) * digits(math.floor(n / 10))\nend", "  local res = 1\n  for d\
    \ in tostring(n):gmatch(\"%d\") do\n    d = tonumber(d)\n    if d % 2 == 1 then\n\
    \      res = res * d\n    end\n  end\n  return res\nend", "  n = math.abs(n)\n\
    \  local res = 1\n  while n > 0 do\n    local r = n % 10\n    if r % 2 == 1 then\n\
    \      res = res * r\n    end\n    n = math.floor(n / 10)\n  end\n  return res\n\
    end", "  local t={}\n  local k=1\n  local p=1\n  local result=0\n  local last=0\n\
    \  while n>=1 do\n    t[k]=n%10\n    n=math.floor(n/10)\n    k=k+1\n  end\n  for\
    \ i=1,k-1 do\n    last=t[i]\n    if last%2==1 then\n      result=result+last*p\n\
    \      p=p*10\n    end\n  end\n  return result\nend", "  local product = 1\n \
    \ for c in tostring(n):gmatch\"%d\" do\n    if tonumber(c) % 2 == 1 then\n   \
    \   product = product * tonumber(c)\n    end\n  end\n  return product\nend", " \
    \   local prod = 1\n    while n > 0 do\n        local digit = n % 10\n       \
    \ if digit % 2 == 1 then\n            prod = prod * digit\n        end\n     \
    \   n = math.floor(n / 10)\n    end\n    return prod\nend", "  return tonumber(n:gsub(\"\
    [13579]\", \"\") or 0)\nend", "    local prods = 1\n    for i in tostring(n):gmatch(\"\
    %d\") do\n        if i:find(\"[13579]\") then\n            prods = prods * i\n\
    \        end\n    end\n    return prods\nend", "  local sum = 1\n  for c in tostring(n):gmatch(\"\
    .\") do\n    if tonumber(c) % 2 ~= 0 then\n      sum = sum * tonumber(c)\n   \
    \ end\n  end\n  return sum\nend", "  local prod = 1\n  while n > 0 do\n    local\
    \ d = n % 10\n    if d % 2 == 1 then\n      prod = prod * d\n    end\n    n =\
    \ math.floor(n / 10)\n  end\n  return prod\nend", "\tlocal r = 1\n\twhile n >\
    \ 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 == 1 then\n\t\t\tr = r * d\n\t\tend\n\
    \t\tn = n // 10\n\tend\n\treturn r\nend", "  local product = 1\n  if n < 0 then\
    \ n = -n end\n  while n > 0 do\n    local digit = n % 10\n    if digit % 2 ==\
    \ 1 then\n      product = product * digit\n    end\n    n = math.floor(n / 10)\n\
    \  end\n  return product\nend", "  local function helper(n, p)\n    if n == 0\
    \ then return p else\n      local r = n % 10\n      if r % 2 == 1 then\n     \
    \   return helper(math.floor(n / 10), p * r)\n      else\n        return helper(math.floor(n\
    \ / 10), p)\n      end\n    end\n  end\n  return helper(n, 1)\nend", "  local\
    \ function odd(x)\n    return x % 2 == 1\n  end\n  local product = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if odd(digit) then\n      product =\
    \ product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return product\n\
    end", "    local m = 1\n    while n > 0 do\n        local d = n % 10\n       \
    \ if d % 2 == 1 then\n            m = m * d\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return m\nend", "  local s = 0\n  while n ~= 0 do\n    local\
    \ k = n % 10\n    if k % 2 == 1 then\n      s = s * 10 + k\n    end\n    n = math.floor(n\
    \ / 10)\n  end\n  return s\nend", "  local nn = 0\n  for i in string.gmatch(n,\
    \ \"%d\") do\n    local j = tonumber(i)\n    if j%2 ~= 0 then\n      nn = nn +\
    \ i\n    end\n  end\n  return nn\nend\nprint(\"\\nOdd digits product\")\nprint(digits(1))\n\
    print(digits(4))\nprint(digits(235))\nprint(digits(12345678901234567890))", " \
    \   local result = 1\n    while n > 0 do\n        local digit = n % 10\n     \
    \   if digit % 2 == 1 then\n            result = result * digit\n        end\n\
    \        n = math.floor(n / 10)\n    end\n    return result\nend", "    local\
    \ result = 1\n    while n > 0 do\n        local i = n % 10\n        if i % 2 ==\
    \ 1 then\n            result = result * i\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return result\nend", "  local mult = 1\n  for digit in tostring(n):gmatch(\"\
    %d\") do\n    digit = tonumber(digit)\n    if digit % 2 ~= 0 then\n      mult\
    \ = mult * digit\n    end\n  end\n  return mult\nend", "    local res = 1\n  \
    \  while n > 0 do\n        local r = n % 10\n        if r % 2 == 1 then\n    \
    \        res = res * r\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return res\nend", "    local product = 1\n    while n > 0 do\n        local\
    \ d = n % 10\n        if d % 2 == 1 then\n            product = product * d\n\
    \        end\n        n = (n - d) / 10\n    end\n    return product\nend", " \
    \ local product = 1\n  for i = 1, #tostring(n) do\n    if tonumber(tostring(n):sub(i,\
    \ i)) % 2 ~= 0 then\n      product = product * tonumber(tostring(n):sub(i, i))\n\
    \    end\n  end\n  return product\nend", "    local product = 1\n    while n >\
    \ 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n       \
    \     product = product * digit\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return product\nend", "  -- for the given number n\n  local r =\
    \ 0;\n  while n > 0 do\n    -- extract the rightmost digit of n\n    local d =\
    \ n % 10;\n    -- if d is odd\n    if d % 2 ~= 0 then\n      -- multiply d with\
    \ r and set the result to r\n      r = r * d;\n    end\n    -- truncate n by removing\
    \ the rightmost digit\n    n = (n - d) / 10;\n  end\n  return r;\nend", "  if\
    \ n <= 0 then return 0 end\n  local prod = 1\n  while n > 0 do\n    local digit\
    \ = n % 10\n    if digit % 2 == 1 then\n      prod = prod * digit\n    end\n \
    \   n = math.floor(n / 10)\n  end\n  return prod\nend", "  local t={}\n  local\
    \ i=1\n  local sum=0\n  while n>0 do\n    table.insert(t,n%10)\n    n=math.floor(n/10)\n\
    \  end\n  while t[i] do\n    if t[i]%2~=0 then\n      sum=sum+t[i]\n    end\n\
    \    i=i+1\n  end\n  return sum\nend\nassert(digits(123)==6)\nassert(digits(123456)==21)\n\
    assert(digits(963852741)==189)\nassert(digits(2468)==0)\nassert(digits(1357)==35)\n\
    assert(digits(13579)==45)\nassert(digits(24680)==0)\nassert(digits(0)==0)\nassert(digits(1)==1)",
  "    local t = {}\n    for c in tostring(n):gmatch(\".\") do\n        local n =\
    \ tonumber(c)\n        if n % 2 == 1 then\n            table.insert(t, n)\n  \
    \      end\n    end\n    if #t == 0 then\n        return 0\n    end\n    return\
    \ table.reduce(t, function(acc, v) return acc * v end, 1)\nend", "    local product\
    \ = 1\n    local digit = 0\n    while n > 0 do\n        digit = n % 10\n     \
    \   if digit % 2 ~= 0 then\n            product = product * digit\n        end\n\
    \        n = math.floor(n / 10)\n    end\n    return product\nend", "    local\
    \ s = tostring(n)\n    local p = 1\n    for i = 1, #s do\n        local d = tonumber(s:sub(i,\
    \ i))\n        if d % 2 == 1 then\n            p = p * d\n        end\n    end\n\
    \    return p\nend", "  if n == 0 then return 0 end\n  return (n % 10 % 2 == 1\
    \ and n % 10 or 1) * digits(math.floor(n / 10))\nend", "  -- TODO: Implement\n\
    end", "  local product = 1\n  while n > 0 do\n    local digit = n % 10\n    if\
    \ digit % 2 == 1 then\n      product = product * digit\n    end\n    n = (n -\
    \ digit) / 10\n  end\n  return product\nend", "  local product = 1\n  for digit\
    \ in tostring(n):gmatch(\"%d\") do\n    digit = tonumber(digit)\n    if digit\
    \ % 2 == 1 then\n      product = product * digit\n    end\n  end\n  return product\n\
    end", "  if n == 0 then return 0 end\n  local r = n % 10\n  if r % 2 == 0 then\n\
    \    return digits(math.floor(n / 10))\n  else\n    return r * digits(math.floor(n\
    \ / 10))\n  end\nend\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))",
  "  local product = 1\n  while n > 0 do\n    local digit = n % 10\n    if digit %\
    \ 2 == 1 then\n      product = product * digit\n    end\n    n = math.floor(n\
    \ / 10)\n  end\n  return product\nend", "   local result = 1\n   for d in tostring(n):gmatch(\"\
    %d\") do\n      d = tonumber(d)\n      if d % 2 == 1 then\n         result = result\
    \ * d\n      end\n   end\n   return result\nend", "  local t = {}\n  while n ~=\
    \ 0 do\n    table.insert(t, n % 10)\n    n = math.floor(n / 10)\n  end\n  local\
    \ res = 1\n  for _, num in ipairs(t) do\n    if num % 2 ~= 0 then\n      res =\
    \ res * num\n    end\n  end\n  return res\nend", "  local p = 1\n  while n > 0\
    \ do\n    local k = n % 10\n    if k % 2 == 1 then\n      p = p * k\n    end\n\
    \    n = math.floor(n / 10)\n  end\n  return p\nend", "    local odd = 0\n   \
    \ local even = 0\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ odd = odd + 1\n        else\n            even = even + 1\n        end\n    \
    \    n = math.floor(n / 10)\n    end\n    return odd * even\nend", "    -- body\n\
    \    local res = 1\n    while n > 0 do\n        local _, r = math.modf(n / 10)\n\
    \        local d = r * 10\n        if d % 2 == 1 then\n            res = res *\
    \ d\n        end\n        n = r\n    end\n    return res\nend", "  local i, result\
    \ = 0, 1\n  for d in tostring(n):gmatch(\"%d\") do\n    i = tonumber(d)\n    if\
    \ i % 2 == 1 then\n      result = result * i\n    end\n  end\n  return result\n\
    end", "  local a = n % 10\n  local b = n % 100 / 10\n  local c = n % 1000 / 100\n\
    \  local d = n % 10000 / 1000\n  local e = n % 100000 / 10000\n  local f = n %\
    \ 1000000 / 100000\n  local g = n % 10000000 / 1000000\n  local h = n % 100000000\
    \ / 10000000\n  local i = n % 1000000000 / 100000000\n  local j = n % 10000000000\
    \ / 1000000000\n  local k = n % 100000000000 / 10000000000\n  local l = n % 1000000000000\
    \ / 100000000000\n  local m = n % 10000000000000 / 1000000000000\n  local o =\
    \ n % 100000000000000 / 10000000000000\n  local p = n % 1000000000000000 / 100000000000000\n\
    \  local q = n % 10000000000000000 / 1000000000000000\n  local r = n % 100000000000000000\
    \ / 10000000000000000\n  local s = n % 1000000000000000000 / 100000000000000000\n\
    \  local t = n % 10000000000000000000 / 1000000000000000000\n  local u = n % 100000000000000000000\
    \ / 10000000000000000000\n  local v = n % 1000000000000000000000 / 100000000000000000000\n\
    \  return n - a + a % 2 * (n - a) - b + b % 2 * (n - b) - c + c % 2 * (n - c)\
    \ - d + d % 2 * (n - d) - e + e % 2 * (n - e) - f + f % 2 * (n - f) - g + g %\
    \ 2 * (n - g) - h + h % 2 * (n - h) - i + i % 2 * (n - i) - j + j % 2 * (n - j)\
    \ - k + k % 2 * (n - k) - l + l % 2 * (n - l) - m + m % 2 * (n - m) - o + o %\
    \ 2 * (n - o) - p + p % 2 * (n - p) - q + q % 2 * (n - q) - r + r % 2 * (n - r)\
    \ - s + s % 2 * (n - s) - t + t % 2 * (n - t) - u + u % 2 * (n - u) - v + v %\
    \ 2", "    local res = 1\n    for i = 1, #tostring(n) do\n        local digit\
    \ = tonumber(string.sub(tostring(n), i, i))\n        if digit % 2 ~= 0 then\n\
    \            res = res * digit\n        end\n    end\n    return res\nend", "\t\
    n=string.format(\"%d\",n)\n\tlocal product=1\n\tfor c in n:gmatch(\"%d\") do\n\
    \t\tlocal d=tonumber(c)\n\t\tif d%2==1 then\n\t\t\tproduct=product*d\n\t\tend\n\
    \tend\n\treturn product\nend", "  local sum = 1\n  if n == 0 then\n    return\
    \ 0\n  end\n  for i = 0, math.floor(math.log10(n)) do\n    local tmp = n % 10\n\
    \    if tmp % 2 ~= 0 then\n      sum = sum * tmp\n    end\n    n = math.floor(n\
    \ / 10)\n  end\n  return sum\nend", "    if n < 10 then\n        return n % 2\
    \ == 1 and n or 0\n    end\n    return n % 10 % 2 == 1 and n % 10 * digits(math.floor(n\
    \ / 10)) or digits(math.floor(n / 10))\nend", "    return (n < 10 and n % 2 ~=\
    \ 0) and n or (n % 10 % 2 ~= 0 and digits(n / 10) * (n % 10) or digits(n / 10))\n\
    end", "    n = math.abs(n)\n    local prod = 1\n    while n > 0 do\n        local\
    \ d = n % 10\n        if d % 2 == 1 then\n            prod = prod * d\n      \
    \  end\n        n = (n - d) / 10\n    end\n    return prod\nend", "\tlocal p =\
    \ 1\n\tlocal n = math.abs(n)\n\twhile n > 0 do\n\t\tlocal d = n % 10\n\t\tif d\
    \ % 2 == 1 then\n\t\t\tp = p * d\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\
    \treturn p\nend", "\tlocal result = 1\n\tif n < 0 then n = -n end\n\twhile n >\
    \ 0 do\n\t\tlocal digit = n % 10\n\t\tif digit % 2 == 1 then\n\t\t\tresult = result\
    \ * digit\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn result\nend",
  "  local value = 1\n  if n ~= 0 then\n    if n % 2 == 0 then\n      value = 0\n\
    \    else\n      value = n % 10\n    end\n    return value * digits(math.floor(n\
    \ / 10))\n  end\n  return value\nend", "    if (n < 0) then return 0 end\n   \
    \ local ret = 1\n    while (n > 0) do\n        local a = n % 10\n        if (a\
    \ % 2 == 1) then\n            ret = ret * a\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return ret\nend", "  local sum = 1\n  while n > 0 do\n \
    \   local m = n % 10\n    if m % 2 == 1 then\n      sum = sum * m\n    end\n \
    \   n = (n - m) / 10\n  end\n  return sum\nend", "\tlocal ret = 1\n\twhile n >\
    \ 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 == 1 then\n\t\t\tret = ret * d\n\t\t\
    end\n\t\tn = math.floor(n / 10)\n\tend\n\treturn ret\nend", "    if n < 10 then\n\
    \        return n % 2 == 1 and n or 0\n    end\n    local num = n % 10\n    local\
    \ result = num % 2 == 1 and num or 0\n    return result * digits(math.floor(n\
    \ / 10))\nend", "   if n < 0 then n = -n end\n   local prod = 1\n   for i = 1,\
    \ string.len(tostring(n)) do\n      local c = tonumber(string.sub(tostring(n),\
    \ i, i))\n      if c % 2 == 1 then prod = prod * c end\n   end\n   return prod\n\
    end", "  res = 1\n  while n ~= 0 do\n    local d = n % 10\n    if d % 2 ~= 0 then\n\
    \      res = res * d\n    end\n    n = math.floor(n / 10)\n  end\n  return res\n\
    end", "  -- your code here\nend", "    local result = 1\n    while n > 0 do\n\
    \        local d = n % 10\n        if d % 2 == 1 then\n            result = result\
    \ * d\n        end\n        n = math.floor(n / 10)\n    end\n    return result\n\
    end", "  local sum = 1\n  while n > 0 do\n    local digit = n % 10\n    if digit\
    \ % 2 == 1 then\n      sum = sum * digit\n    end\n    n = math.floor(n / 10)\n\
    \  end\n  return sum\nend", "    local s = tostring(n)\n    local acc = 1\n  \
    \  for i = 1, #s do\n        local digit = s:sub(i, i)\n        if tonumber(digit)\
    \ % 2 == 1 then\n            acc = acc * tonumber(digit)\n        end\n    end\n\
    \    return acc\nend", "  local result = 1\n  for i in string.gmatch(tostring(n),\
    \ \"%d\") do\n    i = tonumber(i)\n    if i % 2 == 1 then\n      result = result\
    \ * i\n    end\n  end\n  return result\nend", "  if not n then return 0 end\n\
    \  local sum = 1\n  for i = 1, #tostring(n) do\n    local x = tonumber(tostring(n):sub(i,\
    \ i))\n    if x % 2 ~= 0 then\n      sum = sum * x\n    end\n  end\n  return sum\n\
    end", "\tlocal sum = 1", "    local prod = 1\n    while n > 0 do\n        local\
    \ digit = n % 10\n        if digit % 2 == 1 then\n            prod = prod * digit\n\
    \        end\n        n = (n - digit) / 10\n    end\n    return prod\nend", " \
    \ local res = 1\n  while n > 0 do\n    local digit = n % 10\n    if digit % 2\
    \ == 1 then\n      res = res * digit\n    end\n    n = math.floor(n / 10)\n  end\n\
    \  return res\nend", "    local res = 1\n    while n > 0 do\n        local lsd\
    \ = n % 10\n        if lsd % 2 == 1 then\n            res = res * lsd\n      \
    \  end\n        n = (n - lsd) / 10\n    end\n    return res\nend", "  local t\
    \ = {}\n  local res = 1\n  while n > 0 do\n    local r = n % 10\n    if r % 2\
    \ == 1 then\n      table.insert(t, r)\n    end\n    n = (n - r) / 10\n  end\n\
    \  for i = 1, #t do\n    res = res * t[i]\n  end\n  return res\nend", "    local\
    \ res = 1\n    local s = tostring(n)\n    for i = 1, #s do\n        local d =\
    \ tonumber(s:sub(i, i))\n        if d % 2 == 1 then\n            res = res * d\n\
    \        end\n    end\n    return res\nend", "  local result = 1\n  while n >\
    \ 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      result = result\
    \ * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return result\nend",
  "    local product = 1\n    while n > 0 do\n        local digit = n % 10\n     \
    \   if digit % 2 == 1 then\n            product = product * digit\n        end\n\
    \        n = math.floor(n / 10)\n    end\n    return product\nend", "\tlocal product\
    \ = 1\n\tfor i = 1, #tostring(n) do\n\t\tlocal d = tonumber(tostring(n):sub(i,\
    \ i))\n\t\tif d % 2 ~= 0 then\n\t\t\tproduct = product * d\n\t\tend\n\tend\n\t\
    return product\nend\nassert(digits(1)  == 1)\nassert(digits(4)  == 0)\nassert(digits(235)\
    \ == 15)", "   if n==0 then return 0 end\n   local d,r = math.floor(n/10), n%10\n\
    \   if r%2==0 then return digits(d) else return r*digits(d) end\nend", "    local\
    \ t = {}\n    while n > 0 do\n        local d = n % 10\n        if d % 2 == 1\
    \ then\n            table.insert(t, d)\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    if #t == 0 then\n        return 0\n    end\n    local p\
    \ = 1\n    for i = 1, #t do\n        p = p * t[i]\n    end\n    return p\nend",
  "  local product = 1\n  while n > 0 do\n    local digit = n % 10\n    if digit %\
    \ 2 == 1 then\n      product = product * digit\n    end\n    n = math.floor(n\
    \ / 10)\n  end\n  return product\nend", '   local odd = 1', "  if n == 0 then\
    \ return 0 end\n  local digit = n % 10\n  if (digit % 2) == 0 then return digits(n\
    \ // 10) end\n  return digit * digits(n // 10)\nend", "  local result = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      result\
    \ = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return result\n\
    end", "    local result = 1\n    while n > 0 do\n        local modulo = n % 10\n\
    \        if modulo % 2 == 1 then\n            result = result * modulo\n     \
    \   end\n        n = math.floor(n / 10)\n    end\n    return result\nend", " \
    \ local product = 1\n  local i = 1\n  while n > 0 do\n    local digit = n % 10\n\
    \    if digit % 2 == 1 then\n      product = product * digit\n    end\n    n =\
    \ math.floor(n / 10)\n  end\n  return product\nend", "  local output = 1\n  local\
    \ nums = {}\n  for k,v in pairs(n) do\n    table.insert(nums, tonumber(v))\n \
    \ end\n  for i,v in ipairs(nums) do\n    if v % 2 ~= 0 then\n      output = output\
    \ * v\n    end\n  end\n  return output\nend", "  local x = tostring(n)\n  local\
    \ sum = 1\n  for i = 1,#x do\n    local digit = tonumber(x:sub(i,i))\n    if digit\
    \ % 2 == 1 then\n      sum = sum * digit\n    end\n  end\n  return sum\nend",
  "    local ret = 1\n    while n > 0 do\n        local last_digit = n % 10\n    \
    \    if last_digit % 2 == 1 then\n            ret = ret * last_digit\n       \
    \ end\n        n = (n - last_digit) / 10\n    end\n    return ret\nend", "  local\
    \ s = tostring(n)\n  local p = 1\n  for d in s:gmatch('%d') do\n    d = tonumber(d)\n\
    \    if d % 2 == 1 then\n      p = p * d\n    end\n  end\n  return p\nend", " \
    \ \nend", "\tlocal prod = 1\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\t\t\
    if digit % 2 == 1 then\n\t\t\tprod = prod * digit\n\t\tend\n\t\tn = math.floor(n\
    \ / 10)\n\tend\n\treturn prod\nend\nassert(digits(1) == 1)\nassert(digits(4) ==\
    \ 0)\nassert(digits(235) == 15)", "    local res = 1\n    while n > 0 do\n   \
    \     local a = n % 10\n        if a % 2 == 1 then\n            res = res * a\n\
    \        end\n        n = math.floor(n / 10)\n    end\n    return res\nend", " \
    \   local sum = 1\n    while n > 0 do\n        local digit = n % 10\n        if\
    \ digit % 2 == 1 then\n            sum = sum * digit\n        end\n        n =\
    \ (n - digit) / 10\n    end\n    return sum\nend\nprint(digits(1))   -- 1\nprint(digits(4))\
    \   -- 0\nprint(digits(235)) -- 15\nprint(digits(0))   -- 0\nprint(digits(1232))--\
    \ 8", "    local result = 1\n    while n > 0 do\n        local digit = n % 10\n\
    \        if digit % 2 == 1 then\n            result = result * digit\n       \
    \ end\n        n = math.floor(n / 10)\n    end\n    return result\nend\nassert(digits(1)\
    \ == 1)\nassert(digits(4) == 0)\nassert(digits(235) == 15)\nassert(digits(0) ==\
    \ 0)\nassert(digits(8) == 0)\nassert(digits(1111111111) == 1)\nassert(digits(3456789)\
    \ == 105)\nassert(digits(13579) == 135)\nassert(digits(2468642) == 4)\nassert(digits(42424242)\
    \ == 16)\nassert(digits(2468642) == 4)", "  local sum = 1\n  while n > 0 do\n\
    \    local digit = n % 10\n    if digit % 2 == 1 then\n      sum = sum * digit\n\
    \    end\n    n = (n - digit) / 10\n  end\n  return sum\nend", "  local result\
    \ = 1\n  for i = 1, #tostring(n) do\n    local digit = n % 10\n    if digit %\
    \ 2 ~= 0 then\n      result = result * digit\n    end\n    n = (n - digit) / 10\n\
    \  end\n  return result\nend", "\tif n < 10 then\n\t\treturn n % 2 == 1 and n\
    \ or 0\n\tend\n\treturn n % 10 % 2 == 1 and n % 10 * digits(math.floor(n / 10))\
    \ or digits(math.floor(n / 10))\nend", "  local result = 1\n  while n > 0 do\n\
    \    local digit = n % 10\n    if digit % 2 == 1 then\n      result = result *\
    \ digit\n    end\n    n = math.floor(n / 10)\n  end\n  return result\nend", " \
    \ if n < 10 then\n    return n % 2 ~= 0 and n or 0\n  end\n  return (n % 10 %\
    \ 2 ~= 0 and n % 10 or 1) * digits(math.floor(n / 10))\nend", "    n = math.abs(n)\n\
    \    local res = 1\n    while n > 0 do\n        local d = n % 10\n        if d\
    \ % 2 == 1 then\n            res = res * d\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return res\nend", "  return n\nend", "  local r = 1\n  for\
    \ d in tostring(n):gmatch('%d') do\n    local d = tonumber(d)\n    if (d % 2 ==\
    \ 1) then\n      r = r * d\n    end\n  end\n  return r\nend", "    local sum =\
    \ 1\n    while n > 0 do\n        local digit = n % 10\n        if digit % 2 ==\
    \ 1 then\n            sum = sum * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return sum\nend", "    local sum = 1\n    while n > 0 do\n\
    \        local digit = n % 10\n        if digit % 2 == 1 then\n            sum\
    \ = sum * digit\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ sum\nend", "    local p = 1\n    for i = 1, #tostring(n) do\n        local s\
    \ = tonumber(tostring(n):sub(i, i))\n        if s%2 == 1 then\n            p =\
    \ p * s\n        end\n    end\n    return p\nend", "  local result = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      result\
    \ = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return result\n\
    end\nassert(digits(1) == 1)\nassert(digits(4) == 0)\nassert(digits(235) == 15)\n\
    assert(digits(345) == 5)\nassert(digits(222) == 0)", "  local p = 1\n  while n\
    \ > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      p = p * d\n    end\n\
    \    n = (n - d) / 10\n  end\n  return p\nend", "    local p = 1\n    while n\
    \ > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n            p\
    \ = p * d\n        end\n        n = (n - d) / 10\n    end\n    return p\nend",
  "    local sum = 1\n    for i = 1, #tostring(n) do\n        if (n % 10) % 2 ~= 0\
    \ then\n            sum = sum * (n % 10)\n        end\n        n = n / 10\n  \
    \  end\n    return sum\nend", "    n = n .. \"\"\n    local t = {}\n    for i\
    \ = 1, #n do\n        t[i] = n:sub(i, i)\n    end\n    local product = 1\n   \
    \ for i = 1, #t do\n        if t[i] % 2 ~= 0 then\n            product = product\
    \ * t[i]\n        end\n    end\n    return product\nend", "    local result =\
    \ 1\n    while n > 0 do\n        local digit = n % 10\n        if digit % 2 ==\
    \ 1 then\n            result = result * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return result\nend", "  if n == 0 then return 0 end\n  local\
    \ m = n % 10\n  if m % 2 == 1 then\n    return m * digits(math.floor(n / 10))\n\
    \  else\n    return digits(math.floor(n / 10))\n  end\nend\nprint(digits(235))",
  "  -- Your code here\n  local sum = 1\n  for i = 1, #tostring(n) do\n    if tostring(n):sub(i,i)\
    \ % 2 ~= 0 then\n      sum = sum * tostring(n):sub(i,i)\n    end\n  end\n  return\
    \ sum\nend", "\tlocal t = {}\n\twhile n ~= 0 do\n\t\tt[#t+1] = n % 10\n\t\tn =\
    \ math.floor(n / 10)\n\tend\n\tlocal prod = 1\n\tfor i = 1, #t do\n\t\tif t[i]\
    \ % 2 == 1 then\n\t\t\tprod = prod * t[i]\n\t\tend\n\tend\n\treturn prod\nend",
  "    local r = 1\n    while n > 0 do\n        if (n % 2) ~= 0 then\n           \
    \ r = r * (n % 10)\n        end\n        n = math.floor(n / 10)\n    end\n   \
    \ return r\nend", "    local result = 1\n    while n > 0 do\n        local d =\
    \ n % 10\n        if d % 2 == 1 then\n            result = result * d\n      \
    \  end\n        n = math.floor(n / 10)\n    end\n    return result\nend\nprint(digits(1))\n\
    print(digits(4))\nprint(digits(235))", "    local mult = 1\n    local last_digit\n\
    \    for i = 1, #n do\n        last_digit = tonumber(n:sub(i, i))\n        if\
    \ last_digit % 2 ~= 0 then\n            mult = mult * last_digit\n        end\n\
    \    end\n    return mult\nend", "  local product = 1\n  while n > 0 do\n    local\
    \ digit = n % 10\n    if digit % 2 == 1 then\n      product = product * digit\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return product\nend", "    local\
    \ res = 1\n    while n > 0 do\n        local digit = n % 10\n        if digit\
    \ % 2 ~= 0 then\n            res = res * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return res\nend", "  -- your code goes here\nend", "  local\
    \ res = 1\n  while n ~= 0 do\n    local d = n % 10\n    if d % 2 ~= 0 then\n \
    \     res = res * d\n    end\n    n = math.floor(n / 10)\n  end\n  return res\n\
    end", "  local res = 1\n  for c in tostring(n):gmatch(\"%d\") do\n    c = tonumber(c)\n\
    \    if c % 2 == 1 then\n      res = res * c\n    end\n  end\n  return res\nend",
  "    local r = 1\n    while n > 0 do\n        local d = n % 10\n        if d % 2\
    \ == 1 then\n            r = r * d\n        end\n        n = (n - d) / 10\n  \
    \  end\n    return r\nend", "    local p = 1\n    while n > 0 do\n        local\
    \ d = n % 10\n        if d % 2 == 1 then\n            p = p * d\n        end\n\
    \        n = math.floor(n / 10)\n    end\n    return p\nend", "  local product\
    \ = 1\n  for _,i in ipairs(split(tostring(n))) do\n    if tonumber(i) % 2 ~= 0\
    \ then\n      product = product * tonumber(i)\n    end\n  end\n  return product\n\
    end", "    local accum = 1\n    while n > 0 do\n        local d = n % 10\n   \
    \     if d % 2 == 1 then\n            accum = accum * d\n        end\n       \
    \ n = math.floor(n / 10)\n    end\n    return accum\nend", "  local product =\
    \ 1\n  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n\
    \      product = product * digit\n    end\n    n = (n - digit) / 10\n  end\n \
    \ return product\nend\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))\n\
    print(digits(236))\nprint(digits(23523))\nprint(digits(235232646))", "  local\
    \ prod = 1\n  while n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n \
    \     prod = prod * d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\n\
    end", "  local product = 1\n  for d in string.gmatch(tostring(n), '%d') do\n \
    \   d = tonumber(d)\n    if d % 2 == 1 then\n      product = product * d\n   \
    \ end\n  end\n  return product\nend", "  local product = 1\n  while n > 0 do\n\
    \    local last = n % 10\n    if last % 2 ~= 0 then\n      product = product *\
    \ last\n    end\n    n = (n - last) / 10\n  end\n  return product\nend", "   \
    \ local res = 1\n    for d in tostring(n):gmatch(\"%d\") do\n        local i =\
    \ tonumber(d)\n        if (i % 2 == 1) then\n            res = res * i\n     \
    \   end\n    end\n    return res\nend", "    local ret = 1\n    for d in tostring(n):gmatch(\"\
    %d\") do\n        local d = tonumber(d)\n        if d % 2 == 1 then\n        \
    \    ret = ret * d\n        end\n    end\n    return ret\nend", "  assert(n>=0,\
    \ \"n must be positive\")\n  -- Your code here\nend", "    local odd = 1\n   \
    \ while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n     \
    \       odd = odd * d\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return odd\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
