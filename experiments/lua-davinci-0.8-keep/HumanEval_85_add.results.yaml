name: HumanEval_85_add
language: lua
results:
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  -- your code here\n  \n  local sum = 0\n  for i, v in ipairs(lst)\
    \ do\n    if i % 2 ~= 0 and v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputro8z73.lua:19:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmputro8z73.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\t-- body\n\tif (lst == nil) then\n\t\treturn -1\n\tend\n\tlocal sum\
    \ = 0\n\tfor i,v in ipairs(lst) do\n\t\tif (i % 2 ~= 0 and v % 2 == 0) then\n\t\
    \t\tsum = sum + v\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphq0tn9r4.lua:21:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmphq0tn9r4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 1 and\
    \ lst[i] % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pj0395i.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp2pj0395i.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb12u0ud5.lua:11:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpb12u0ud5.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  --# add #--\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqic8lg1.lua:11:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpqqic8lg1.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for k, v in ipairs(lst) do\n    if k % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfd0she7.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpzfd0she7.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n    if (v % 2 == 0)\
    \ and (i % 2 ~= 0) then\n      sum = sum + v\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0b9969t.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpq0b9969t.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if (i % 2 == 1) and (lst[i]\
    \ % 2 == 0) then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52cxlk_z.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp52cxlk_z.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n        if i %\
    \ 2 == 1 and v % 2 == 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahs6_yid.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpahs6_yid.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 0 and\
    \ i % 2 ~= 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8u38cueu.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp8u38cueu.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local res = 0\n    for i, v in ipairs(lst) do\n        if i %\
    \ 2 == 1 and v % 2 == 0 then\n            res = res + v\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3agjk7ff.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3agjk7ff.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local acc = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      acc = acc + v\n    end\n  end\n  return acc\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyg7fo7q.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpyyg7fo7q.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  --Write your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp477wtf3c.lua:11:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmp477wtf3c.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_i5c6mu0.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp_i5c6mu0.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqy6ncm2.lua:11:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpeqy6ncm2.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4itn3etv.lua:11:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmp4itn3etv.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 0 and\
    \ i % 2 ~= 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc689aaus.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpc689aaus.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbn8um0pv.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpbn8um0pv.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxodque66.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpxodque66.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal sum = 0\n\tfor i, v in ipairs(lst) do\n\t\tif i % 2 == 1 and\
    \ v % 2 == 0 then\n\t\t\tsum = sum + v\n\t\tend\n\tend\n\treturn sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5s2ybqrt.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp5s2ybqrt.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for i, v in ipairs(lst) do\n    if i % 2 ==\
    \ 1 and v % 2 == 0 then\n      result = result + v\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpry8thwou.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpry8thwou.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 0 and\
    \ i % 2 ~= 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4w9_z0x4.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp4w9_z0x4.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ydd2n33.lua:11:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmp6ydd2n33.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   local sum = 0\n   for index, value in ipairs(lst) do\n      if\
    \ index % 2 == 1 and value % 2 == 0 then\n         sum = sum + value\n      end\n\
    \   end\n   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxfh3wm0.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpcxfh3wm0.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local r = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      r = r + v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy61rocii.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpy61rocii.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for i, item in ipairs(lst) do\n    if i % 2\
    \ == 1 and item % 2 == 0 then\n      result = result + item\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphdiy6_22.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmphdiy6_22.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ibj1ozc.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp4ibj1ozc.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n        if (i %\
    \ 2 ~= 0) and (v % 2 == 0) then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrcbb_ue.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpzrcbb_ue.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiurdeoyr.lua:11:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpiurdeoyr.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal sum = 0\n\tfor i = 1, #lst do\n\t\tif lst[i] % 2 == 0 and\
    \ i % 2 ~= 0 then\n\t\t\tsum = sum + lst[i]\n\t\tend\n\tend\n\treturn sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdtca3h8.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpxdtca3h8.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  -- Your code goes here\n  local sum = 0\n  for i,v in ipairs(lst)\
    \ do\n    if (i % 2 ~= 0) and (v % 2 == 0) then\n      sum = sum + v\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk19m8x5z.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpk19m8x5z.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprht95bf4.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmprht95bf4.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal sum = 0\n\tfor i,v in ipairs(lst) do\n\t\tif i % 2 == 1 and\
    \ v % 2 == 0 then\n\t\t\tsum = sum + v\n\t\tend\n\tend\n\treturn sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdle36ml.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpwdle36ml.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9zqazlze.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp9zqazlze.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5kcb4nb_.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmp5kcb4nb_.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\t-- your code here\n\tlocal sum = 0\n\tfor k,v in ipairs(lst) do\n\
    \t\tif k % 2 ~= 0 and v % 2 == 0 then\n\t\t\tsum = sum + v\n\t\tend\n\tend\n\t\
    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpys1frc5h.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpys1frc5h.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if (i % 2 ~= 0)\
    \ and (v % 2 == 0) then\n      sum = sum + v\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ryxb4kn.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp8ryxb4kn.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local v = 0\n  for i, e in ipairs(lst) do\n    if i % 2 == 1 and\
    \ e % 2 == 0 then\n      v = v + e\n    end\n  end\n  return v\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimi8zh7a.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpimi8zh7a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for k, v in ipairs(lst) do\n        if k %\
    \ 2 == 1 and v % 2 == 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjwgvwt6.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpnjwgvwt6.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local idx = 1\n  local sum = 0\n  while idx <= #lst do\n    if idx\
    \ % 2 == 1 then\n      sum = sum + lst[idx]\n    end\n    idx = idx + 1\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6ei9cfj.lua:19:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpn6ei9cfj.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i,v in ipairs(lst) do\n        if i % 2\
    \ == 1 and v % 2 == 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ketwcff.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp2ketwcff.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 1 and lst[i]\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx22c_5z9.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpx22c_5z9.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2fsx9ouo.lua:11:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmp2fsx9ouo.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i,v in ipairs(lst) do\n        if v % 2\
    \ == 0 and i % 2 ~= 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdp7nwfx.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmprdp7nwfx.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local res = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      res = res + v\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzoer2w_d.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpzoer2w_d.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, x in ipairs(lst) do\n    if (i % 2 ~= 0)\
    \ and (x % 2 == 0) then\n      sum = sum + x\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqs4ym_x.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpdqs4ym_x.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal sum = 0\n\tfor i, num in ipairs(lst) do\n\t\tif i % 2 == 1\
    \ and num % 2 == 0 then\n\t\t\tsum = sum + num\n\t\tend\n\tend\n\treturn sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_a0a_70.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpj_a0a_70.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local function is_even(num)\n    return num % 2 == 0\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_g5enikz.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91qi2uhe.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp91qi2uhe.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 0 and\
    \ i % 2 ~= 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfwxs0ji8.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpfwxs0ji8.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 1 and lst[i]\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6nvzzrkr.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp6nvzzrkr.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal res = 0\n\tfor i, v in ipairs(lst) do\n\t\tif (i % 2 == 1)\
    \ and (v % 2 == 0) then\n\t\t\tres = res + v\n\t\tend\n\tend\n\treturn res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiz0y5zqw.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpiz0y5zqw.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local result = 0\n    for index, value in ipairs(lst) do\n   \
    \     if index % 2 ~= 0 and value % 2 == 0 then\n            result = result +\
    \ value\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyqk5mjg.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpzyqk5mjg.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local ret = 0\n    for i, v in ipairs(lst) do\n        if v %\
    \ 2 == 0 and i % 2 ~= 0 then\n            ret = ret + v\n        end\n    end\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42uy07i4.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp42uy07i4.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  return _.reduce(\n    _.filter(\n      _.filter(lst, function(x)\
    \ return x % 2 == 0 end),\n      function(x, i) return i % 2 == 1 end\n    ),\n\
    \    function(acc, x) return acc + x end\n  )\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ybrenzh.lua:5:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmp5ybrenzh.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp5ybrenzh.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local res = 0\n    for i, v in ipairs(lst) do\n        if i %\
    \ 2 == 1 and v % 2 == 0 then\n            res = res + v\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp837n9abv.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp837n9abv.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local ans = 0\n  for k, v in ipairs(lst) do\n    if k % 2 == 1 and\
    \ v % 2 == 0 then\n      ans = ans + v\n    end\n  end\n  return ans\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbc1pqral.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpbc1pqral.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local value = 0\n    for i, v in ipairs(lst) do\n        if (i\
    \ % 2 == 1) and (v % 2 == 0) then\n            value = value + v\n        end\n\
    \    end\n    return value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxin80c6.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmplxin80c6.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    return nil -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53gd3v2g.lua:11:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmp53gd3v2g.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for k, v in ipairs(lst) do\n        if v %\
    \ 2 == 0 and k % 2 ~= 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqo7ja19m.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpqo7ja19m.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0x3a6ka.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpd0x3a6ka.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal sum = 0\n\tfor i = 1, #lst do\n\t\tif i % 2 == 1 and lst[i]\
    \ % 2 == 0 then\n\t\t\tsum = sum + lst[i]\n\t\tend\n\tend\n\treturn sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ch8v4dq.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp5ch8v4dq.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 0 and\
    \ i % 2 ~= 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoftkm_cp.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpoftkm_cp.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local index = 0\n  for _,v in ipairs(lst) do\n    if v % 2 == 0\
    \ and index % 2 == 1 then\n      return v\n    end\n    index = index + 1\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpjtik9_.lua:20:\
    \ expected: 12, actual: 4\nstack traceback:\n\t/tmp/tmpfpjtik9_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 1 and\
    \ lst[i] % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6d76v0r.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpy6d76v0r.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 1 and\
    \ lst[i] % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vo53w8z.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp_vo53w8z.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  return (reduce(lst, addHelper, {}))[2]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3o06jyey.lua:5:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmp3o06jyey.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp3o06jyey.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdz361b9o.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpdz361b9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i,n in ipairs(lst) do\n        if i % 2\
    \ == 1 and n % 2 == 0 then\n            sum = sum + n\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8iwkjvfz.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp8iwkjvfz.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n        if i %\
    \ 2 == 1 and v % 2 == 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5fdqw1l2.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp5fdqw1l2.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local l, result = 1, 0\n  for _, v in ipairs(lst) do\n    if v %\
    \ 2 == 0 and l % 2 ~= 0 then\n      result = result + v\n    end\n    l = l +\
    \ 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1nlfqyyj.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp1nlfqyyj.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal res = 0\n\tfor i, v in ipairs(lst) do\n\t\tif i % 2 == 1 and\
    \ v % 2 == 0 then\n\t\t\tres = res + v\n\t\tend\n\tend\n\treturn res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12c371wx.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp12c371wx.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n        if i %\
    \ 2 == 1 and v % 2 == 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qb46hpi.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp_qb46hpi.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal sum = 0\n\tfor k, v in ipairs(lst) do\n\t\tif v % 2 == 0 and\
    \ k % 2 ~= 0 then\n\t\t\tsum = sum + v\n\t\tend\n\tend\n\treturn sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3myq0csh.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3myq0csh.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal ret = 0\n\tfor idx, e in ipairs(lst) do\n\t\tif (idx % 2 ~=\
    \ 0) and (e % 2 == 0) then\n\t\t\tret = ret + e\n\t\tend\n\tend\n\treturn ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpung66wtq.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpung66wtq.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local acc = 0\n    for i, v in ipairs(lst) do\n        if v %\
    \ 2 == 0 and i % 2 ~= 0 then\n            acc = acc + v\n        end\n    end\n\
    \    return acc\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsxox6pdo.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpsxox6pdo.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local res = 0\n  for idx, val in ipairs(lst) do\n    if idx % 2\
    \ == 1 and val % 2 == 0 then\n      res = res + val\n    end\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjfu_qdw.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpzjfu_qdw.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  -- your solution goes here.\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi38pjmvt.lua:11:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpi38pjmvt.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdp33z6ko.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpdp33z6ko.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for idx,num in ipairs(lst) do\n    if (idx %\
    \ 2 ~= 0) and (num % 2 == 0) then\n      result = result + num\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprprt_8fk.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmprprt_8fk.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local s = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      s = s + v\n    end\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxdf4ist.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmptxdf4ist.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal sum = 0\n\tfor i,v in ipairs(lst) do\n\t\tif (i % 2 == 1)\
    \ and (v % 2 == 0) then\n\t\t\tsum = sum + v\n\t\tend\n\tend\n\treturn sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66_mpttg.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp66_mpttg.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n        if i %\
    \ 2 == 1 and v % 2 == 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_lew27yl.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp_lew27yl.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n    if (i % 2 ~= 0)\
    \ and (v % 2 == 0) then\n      sum = sum + v\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgi1q1lta.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpgi1q1lta.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n        if (i %\
    \ 2 ~= 0) and (v % 2 == 0) then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4cxyxyna.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp4cxyxyna.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  -- write your code here\n  local sum = 0\n  for i,v in ipairs(lst)\
    \ do\n    if i % 2 ~= 0 and v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwg6ylhk1.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpwg6ylhk1.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local res = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 0 and\
    \ i % 2 ~= 0 then\n      res = res + lst[i]\n    end\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jumvs0q.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp2jumvs0q.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  return pack(unpack(lst, 2, #lst, 2)) * 0.5\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprc41tyok.lua:5:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmprc41tyok.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmprc41tyok.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, num in ipairs(lst) do\n    if i % 2 == 1\
    \ and num % 2 == 0 then\n      sum = sum + num\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizqorrzx.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpizqorrzx.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local s = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 0 and\
    \ i % 2 ~= 0 then\n      s = s + v\n    end\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqbg44nv.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmptqbg44nv.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 1 and\
    \ lst[i] % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp31s4mine.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp31s4mine.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for k, v in ipairs(lst) do\n    if k % 2 ==\
    \ 1 and v % 2 == 0 then\n      result = result + v\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxl1xbwn.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpaxl1xbwn.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxp3jm1nk.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpxp3jm1nk.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 1 and\
    \ lst[i] % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkenm12gl.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpkenm12gl.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal result = 0\n\tfor i = 1, #lst do\n\t\tif lst[i] % 2 == 0 and\
    \ i % 2 ~= 0 then\n\t\t\tresult = result + lst[i]\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfers7mk.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpyfers7mk.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 1 and\
    \ lst[i] % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xorxqxk.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp2xorxqxk.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for k, v in ipairs(lst) do\n    if (k % 2 == 1)\
    \ and (v % 2 == 0) then\n      sum = sum + v\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb18z2d06.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpb18z2d06.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdl16p8bj.lua:11:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmpdl16p8bj.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyvjg39o6.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpyvjg39o6.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local res = 0\n    for i, v in ipairs(lst) do\n        if i %\
    \ 2 == 1 and v % 2 == 0 then\n            res = res + v\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk39gz2_.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpmk39gz2_.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpueor2ild.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpueor2ild.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i,v in ipairs(lst) do\n        if i % 2\
    \ == 1 and v % 2 == 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivol3uid.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpivol3uid.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgeu6vtc.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmphgeu6vtc.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tif lst[1] % 2 == 0 then\n\t\tif lst[2] % 2 == 0 then\n\t\t\treturn\
    \ lst[1] + lst[2]\n\t\telse\n\t\t\treturn lst[1]\n\t\tend\n\telse\n\t\treturn\
    \ lst[2]\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_imbqdq_.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp_imbqdq_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if (i % 2 == 1)\
    \ and (v % 2 == 0) then\n      sum = sum + v\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93iy4t1e.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp93iy4t1e.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal res = 0\n\tfor i = 1, #lst do\n\t\tif (i % 2 ~= 0) and (lst[i]\
    \ % 2 == 0) then\n\t\t\tres = res + lst[i]\n\t\tend\n\tend\n\treturn res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksdici_q.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpksdici_q.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local res = 0\n    for i = 1, #lst do\n        if i % 2 == 1 and\
    \ lst[i] % 2 == 0 then\n            res = res + lst[i]\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx6co5xt.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpnx6co5xt.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 0 and\
    \ i % 2 ~= 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn717w4km.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpn717w4km.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal result = 0\n\tfor i, v in ipairs(lst) do\n\t\tif v % 2 ==\
    \ 0 and i % 2 ~= 0 then\n\t\t\tresult = result + v\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptsjhab96.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmptsjhab96.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local res = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 0 and\
    \ i % 2 ~= 0 then\n      res = res + v\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpba07q0gd.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpba07q0gd.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  -- your solution goes here\n  local output = 0\n  for index, value\
    \ in ipairs(lst) do\n    if index % 2 ~= 0 and value % 2 == 0 then\n      output\
    \ = output + value\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zxz1gor.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp4zxz1gor.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  -- your code here\n  \nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3mmtaeo2.lua:12:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmp3mmtaeo2.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    -- YOUR CODE HERE\n    local count = 0\n    for i, v in ipairs(lst)\
    \ do\n        if i % 2 ~= 0 and v % 2 == 0 then\n            count = count + v\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xamc5bd.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3xamc5bd.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 0 and i % 2\
    \ ~= 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rel4mu3.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp7rel4mu3.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    res = 0\n    for i, e in ipairs(lst) do\n        if i % 2 == 1\
    \ and e % 2 == 0 then\n            res = res + e\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9nirwo95.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp9nirwo95.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   local sum = 0\n   for i, v in ipairs(lst) do\n      if i % 2 ==\
    \ 1 and v % 2 == 0 then\n         sum = sum + v\n      end\n   end\n   return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8wf56l4.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpq8wf56l4.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local res = 0\n    for i, v in ipairs(lst) do\n        if i %\
    \ 2 == 1 and v % 2 == 0 then\n            res = res + v\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6i2g27j.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpl6i2g27j.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local res = 0\n  for i, val in ipairs(lst) do\n    if i % 2 == 1\
    \ and val % 2 == 0 then\n      res = res + val\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9p2buw9.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpf9p2buw9.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local result = 0\n    for i, v in ipairs(lst) do\n        if v\
    \ % 2 == 0 and i % 2 ~= 0 then\n            result = result + v\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6rec05k.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpz6rec05k.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 ==\
    \ 0 and i % 2 ~= 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16431_10.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp16431_10.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8g_9ko61.lua:11:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmp8g_9ko61.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\t-- your code here\n\tlocal evenSum = 0\n\tfor i,v in ipairs(lst)\
    \ do\n\t\tif i % 2 ~= 0 and v % 2 == 0 then\n\t\t\tevenSum = evenSum + v\n\t\t\
    end\n\tend\n\treturn evenSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvtit__wv.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpvtit__wv.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 1 and lst[i]\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9fxk62l.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpd9fxk62l.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal tot = 0\n\tfor i,v in ipairs(lst) do\n\t\tif i % 2 == 1 and\
    \ v % 2 == 0 then\n\t\t\ttot = tot + v\n\t\tend\n\tend\n\treturn tot\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso71v71z.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpso71v71z.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 ==\
    \ 0 and i % 2 ~= 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmh1dmk40.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpmh1dmk40.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if (i % 2 == 1) and (lst[i]\
    \ % 2 == 0) then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlc3v8zj.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpdlc3v8zj.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for k, v in ipairs(lst) do\n        if k %\
    \ 2 == 1 and v % 2 == 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbihcewd.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpzbihcewd.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local res = 0\n  for k, v in ipairs(lst) do\n    if k % 2 == 1 and\
    \ v % 2 == 0 then\n      res = res + v\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4e_lo_4.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpv4e_lo_4.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for k, v in ipairs(lst) do\n        if k %\
    \ 2 == 1 and v % 2 == 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkp7szc1.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpwkp7szc1.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vxgjucf.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3vxgjucf.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local function is_even(n)\n    return n % 2 == 0\n  end\n  local\
    \ function is_odd(n)\n    return n % 2 ~= 0\n  end\n  local sum = 0\n  for i,\
    \ v in ipairs(lst) do\n    if is_even(v) and is_odd(i) then\n      sum = sum +\
    \ v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9du5_vpx.lua:23:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp9du5_vpx.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for i, v in ipairs(lst) do\n    if (i % 2 ~=\
    \ 0) and (v % 2 == 0) then\n      result = result + v\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1fx_03_p.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp1fx_03_p.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i,v in ipairs(lst) do\n        if i % 2\
    \ == 1 and v % 2 == 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99rgmbnr.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp99rgmbnr.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2b498k3o.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp2b498k3o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2sgia82.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpw2sgia82.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i,v in ipairs(lst) do\n        if (i %\
    \ 2 ~= 0) and (v % 2 == 0) then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxewlnkr.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpfxewlnkr.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    -- your code here\n    local sum = 0\n    for i = 1, #lst do\n\
    \        if i % 2 ~= 0 and lst[i] % 2 == 0 then\n            sum = sum + lst[i]\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs60kvla.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpqs60kvla.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n        if i %\
    \ 2 == 1 and v % 2 == 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4yzfrij.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpi4yzfrij.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6d9af4_9.lua:11:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmp6d9af4_9.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 0 and\
    \ i % 2 ~= 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77nqizqi.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp77nqizqi.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   local result = 0\n   for i, v in ipairs(lst) do\n      if i % 2\
    \ == 1 and v % 2 == 0 then\n         result = result + v\n      end\n   end\n\
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3e7hg05u.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3e7hg05u.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhr7nctl.lua:11:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpbhr7nctl.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetpu0wff.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpetpu0wff.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  if #lst == 0 then return 0 end\n  local sum = 0\n  for i,v in ipairs(lst)\
    \ do\n    if i % 2 ~= 0 and v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rjhrr7o.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp9rjhrr7o.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local total = 0\n  for i = 1, #lst do\n    if i % 2 == 1 and lst[i]\
    \ % 2 == 0 then\n      total = total + lst[i]\n    end\n  end\n  return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcbfvt5ku.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpcbfvt5ku.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local res = 0\n    for k, v in ipairs(lst) do\n        if (v %\
    \ 2 == 0) and (k % 2 ~= 0) then\n            res = res + v\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3mg5ewv.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp_3mg5ewv.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n   --[==[local l,s = lst,0\n   for i=1,#l do\n      if i%2 ~= 0 and\
    \ l[i]%2 == 0 then\n         s = s + l[i]\n      end\n   end\n   return s]==]\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3_kh44kl.lua:22: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0xt2k1bx.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmp0xt2k1bx.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw326mnc_.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpw326mnc_.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local res = 0\n  for i, v in ipairs(lst) do\n    if (i % 2 == 1)\
    \ and (v % 2 == 0) then\n      res = res + v\n    end\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3v8_ofr.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpc3v8_ofr.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  return lst:map(function(v,i) return i%2==1 and v%2==0 and v or 0\
    \ end):sum()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk29o0s3q.lua:5:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpk29o0s3q.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpk29o0s3q.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if (i % 2 == 1) and (lst[i]\
    \ % 2 == 0) then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpubvmund4.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpubvmund4.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for i, v in ipairs(lst) do\n    if i % 2 ==\
    \ 1 and v % 2 == 0 then\n      result = result + v\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0d2isza.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpv0d2isza.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzvy51co1.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpzvy51co1.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local odd_sum = 0\n  for i,v in ipairs(lst) do\n    if (i % 2 ~=\
    \ 0) and (v % 2 == 0) then\n      odd_sum = odd_sum + v\n    end\n  end\n  return\
    \ odd_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpia6dw5nl.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpia6dw5nl.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local s = 0\n  for i, v in ipairs(lst) do\n    if math.fmod(i, 2)\
    \ == 1 and math.fmod(v, 2) == 0 then\n      s = s + v\n    end\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7obiymac.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp7obiymac.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local res = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      res = res + v\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dz114du.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp5dz114du.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 1\
    \ and v % 2 == 0 then\n      result = result + v\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20wgr09f.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp20wgr09f.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local res = 0\n    for i, v in ipairs(lst) do\n        if i %\
    \ 2 == 1 and v % 2 == 0 then\n            res = res + v\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9en0ijo.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpe9en0ijo.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbql65oar.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpbql65oar.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n        if i %\
    \ 2 == 1 and v % 2 == 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp04ojcm76.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp04ojcm76.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvb23m0w.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpmvb23m0w.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  sum = 0\n  for k, v in pairs(lst) do\n    if k % 2 ~= 0 and v %\
    \ 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0h27xced.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp0h27xced.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  -- TODO: implement the function\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo89505rk.lua:11:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpo89505rk.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 1 and lst[i]\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpix7mfnu8.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpix7mfnu8.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshz3t2fa.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpshz3t2fa.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local lst2 = lst.unpack()\n  local sum = 0\n  for i, v in ipairs(lst2)\
    \ do\n    if v % 2 == 0 and i % 2 ~= 0 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbn1zhmfb.lua:5:\
    \ attempt to call a nil value (field 'unpack')\nstack traceback:\n\t/tmp/tmpbn1zhmfb.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpbn1zhmfb.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr59e29vp.lua:11:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmpr59e29vp.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for k, v in ipairs(lst) do\n    if k % 2 ==\
    \ 1 and v % 2 == 0 then\n      result = result + v\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jyai6im.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp8jyai6im.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    -- your code here\n    local sum = 0\n    for i = 1, #lst do\n\
    \        if (lst[i] % 2 == 0) and (i % 2 ~= 0) then\n            sum = sum + lst[i]\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmsw26awp.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpmsw26awp.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpih1w_jtl.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpih1w_jtl.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n        if i %\
    \ 2 == 1 and v % 2 == 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqz5maux9.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpqz5maux9.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 1 and\
    \ lst[i] % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphzsp6ymj.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmphzsp6ymj.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp83ydusml.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp83ydusml.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i,n in ipairs(lst) do\n    if (i % 2 == 1)\
    \ and (n % 2 == 0) then\n      sum = sum + n\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgrmg6ayw.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpgrmg6ayw.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, n in ipairs(lst) do\n    if n % 2 == 0 and\
    \ i % 2 ~= 0 then\n      sum = sum + n\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplg5o9n6p.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmplg5o9n6p.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local s = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      s = s + v\n    end\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdqxgohm.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpqdqxgohm.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local res = 0\n  for i = 1, #lst do\n    local v = lst[i]\n    if\
    \ i % 2 == 1 and v % 2 == 0 then\n      res = res + v\n    end\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplawp_dcm.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmplawp_dcm.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 0 and\
    \ i % 2 ~= 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxkkkla5l.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpxkkkla5l.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local result = 0\n  for i,v in ipairs(lst) do\n    if math.fmod(i,2)\
    \ ~= 0 and math.fmod(v,2) == 0 then\n      result = result + v\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdrvyxut3.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpdrvyxut3.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mpol2ft.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp4mpol2ft.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for index, value in ipairs(lst) do\n    if index\
    \ % 2 ~= 0 and value % 2 == 0 then\n      sum = sum + value\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xrvbfmb.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp9xrvbfmb.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal res = 0\n\tlocal step = 1\n\tfor i = 1, #lst do\n\t\tif lst[i]\
    \ % 2 == 0 and step % 2 ~= 0 then\n\t\t\tres = res + lst[i]\n\t\tend\n\t\tstep\
    \ = step + 1\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fctmk9l.lua:19:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp_fctmk9l.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal sum = 0\n\tfor i = 1, #lst do\n\t\tif i % 2 == 1 and lst[i]\
    \ % 2 == 0 then\n\t\t\tsum = sum + lst[i]\n\t\tend\n\tend\n\treturn sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimshnh81.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpimshnh81.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  return sum(lst[2], lst[4])\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp42o4hbt_.lua:5:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp42o4hbt_.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp42o4hbt_.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6zlgfba.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpn6zlgfba.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 1 and\
    \ lst[i] % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp538vmntg.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp538vmntg.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local total = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1\
    \ and v % 2 == 0 then\n      total = total + v\n    end\n  end\n  return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3__wvl06.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3__wvl06.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2ox0to7.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpm2ox0to7.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local r = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      r = r + v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr1vzxpdk.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpr1vzxpdk.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tif not lst then return end\n\tlocal result = 0\n\tfor k, v in ipairs(lst)\
    \ do\n\t\tif k % 2 ~= 0 and v % 2 == 0 then\n\t\t\tresult = result + v\n\t\tend\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb73gr7d5.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpb73gr7d5.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n\tlocal sum = 0\n\tfor i, v in ipairs(lst) do\n\t\tif (i % 2 == 1)\
    \ and (v % 2 == 0) then\n\t\t\tsum = sum + v\n\t\tend\n\tend\n\treturn sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunz966m_.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpunz966m_.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  -- add the even elements that are at odd indices\n  return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1esy3w4.lua:12:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpb1esy3w4.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppx9e2v1.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpppx9e2v1.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local result = 0\n    for i,v in ipairs(lst) do\n        if i\
    \ % 2 == 1 and v % 2 == 0 then\n            result = result + v\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwwho3nh.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpgwwho3nh.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local total = 0\n    for k, v in ipairs(lst) do\n        if k\
    \ % 2 == 1 and v % 2 == 0 then\n            total = total + v\n        end\n \
    \   end\n    return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9tx4tke.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpp9tx4tke.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjb_0xlok.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpjb_0xlok.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local t = {}\n    for i,v in ipairs(lst) do\n        if i % 2\
    \ ~= 0 and v % 2 == 0 then\n            table.insert(t, v)\n        end\n    end\n\
    \    return table.concat(t, \"+\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjenzrxto.lua:17:\
    \ expected: 88, actual: \"4\"\nstack traceback:\n\t/tmp/tmpjenzrxto.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local res = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and\
    \ v % 2 == 0 then\n      res = res + v\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vrxrlls.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp9vrxrlls.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n    local sum = 0\n    for i,v in ipairs(lst) do\n        if i % 2\
    \ == 1 and v % 2 == 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpp6pwgx.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpdpp6pwgx.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
