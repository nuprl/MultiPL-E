name: HumanEval_157_right_angle_triangle
language: lua
prompt: "-- Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
  -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
  \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
  \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
  \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
  \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
  \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
  \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
  \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if (a * a) + (b * b) == (c * c) then\n    return true\n  else\n \
    \   return false\n  end\nend", "    -- You must find out if a triangle can be\
    \ formed using given sides\n    -- and return boolean indicating if it is a right\
    \ angle triangle or not\nend", "  -- your code here\n  if (math.pow(a, 2) + math.pow(b,\
    \ 2)) == math.pow(c, 2) then\n    return true\n  else\n    return false\n  end\n\
    end", "  return (a*a + b*b == c*c) or (b*b + c*c == a*a) or (c*c + a*a == b*b)\n\
    end", "  -- Write your code here\n  -- Check if a triangle is a right angled triangle\
    \ or not.\n  local numList = {a, b, c}\n  table.sort(numList)\n  if numList[1]^2\
    \ + numList[2]^2 == numList[3]^2 then\n    return true\n  else\n    return false\n\
    \  end\nend", "  local sides = {a, b, c}\n  table.sort(sides)\n  local a, b, c\
    \ = unpack(sides)\n  if a == 0 or b == 0 or c == 0 then\n    return false\n  end\n\
    \  return a^2 + b^2 == c^2\nend", "\treturn (a^2 + b^2 == c^2) or (b^2 + c^2 ==\
    \ a^2) or (c^2 + a^2 == b^2)\nend", "    -- your code here\n    if a^2 + b^2 ==\
    \ c^2 then\n        return true\n    else\n        return false\n    end\nend",
  "    if a^2 + b^2 == c^2 then\n        return true\n    elseif a^2 + c^2 == b^2\
    \ then\n        return true\n    elseif b^2 + c^2 == a^2 then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    -- TODO: implement\
    \ the function here\nend", "    local s = {a, b, c}\n    table.sort(s)\n    if\
    \ s[1]*s[1] + s[2]*s[2] == s[3]*s[3] then\n        return true\n    else\n   \
    \     return false\n    end\nend", "  local tmp = {}\n  table.insert(tmp, a)\n\
    \  table.insert(tmp, b)\n  table.insert(tmp, c)\n  table.sort(tmp)\n  if tmp[1]\
    \ * tmp[1] + tmp[2] * tmp[2] == tmp[3] * tmp[3] then\n    return true\n  else\n\
    \    return false\n  end\nend", "  local function is_int(n)\n    return math.floor(n)\
    \ == n\n  end\n  local function is_sqrt(n)\n    return is_int(math.sqrt(n))\n\
    \  end\n  if a >= b and a >= c then\n    return is_sqrt(b*b + c*c)\n  elseif b\
    \ >= a and b >= c then\n    return is_sqrt(a*a + c*c)\n  elseif c >= a and c >=\
    \ b then\n    return is_sqrt(a*a + b*b)\n  end\nend", "    return a^2 + b^2 ==\
    \ c^2\nend", "    return a^2 + b^2 == c^2\nend", "  -- local function right_angle_triangle(a,\
    \ b, c)\n  --   -- local t = {a, b, c}\n  --   -- local h = math.max(a, b, c)\n\
    \  --   -- local rem = h ^ 2 == (t[1] ^ 2 + t[2] ^ 2 + t[3] ^ 2 - h ^ 2)\n  --\
    \   -- return rem\n  --   local t = {a, b, c}\n  --   local h = math.max(a, b,\
    \ c)\n  --   local rem = h ^ 2 == (t[1] ^ 2 + t[2] ^ 2 + t[3] ^ 2 - h ^ 2)\n \
    \ --   return rem\n  -- end\n  -- local t = {a, b, c}\n  -- local h = math.max(a,\
    \ b, c)\n  -- local rem = h ^ 2 == (t[1] ^ 2 + t[2] ^ 2 + t[3] ^ 2 - h ^ 2)\n\
    \  -- return rem\n  local t = {a, b, c}\n  local h = math.max(a, b, c)\n  local\
    \ rem = h ^ 2 == (t[1] ^ 2 + t[2] ^ 2 + t[3] ^ 2 - h ^ 2)\n  return rem\nend",
  "    local a2 = a * a\n    local b2 = b * b\n    local c2 = c * c\n    if (a2 +\
    \ b2 == c2) or (a2 + c2 == b2) or (b2 + c2 == a2) then\n        return true\n\
    \    else\n        return false\n    end\nend", "    return (a ^ 2 + b ^ 2 ==\
    \ c ^ 2) or (a ^ 2 + c ^ 2 == b ^ 2) or (b ^ 2 + c ^ 2 == a ^ 2)\nend", "    local\
    \ hyp = math.max(a, b, c)\n    local cat1 = a\n    local cat2 = b\n    if hyp\
    \ == a then\n        cat1 = b\n        cat2 = c\n    elseif hyp == b then\n  \
    \      cat1 = a\n        cat2 = c\n    end\n    return cat1 * cat1 + cat2 * cat2\
    \ == hyp * hyp\nend", "  local lst = {a, b, c}\n  table.sort(lst)\n  return (lst[1]\
    \ ^ 2 + lst[2] ^ 2) == lst[3] ^ 2\nend", "  local max_side = math.max(a, b, c)\n\
    \  local min_sides = math.min(a, b, c)\n  local mid_side = (a + b + c) - (max_side\
    \ + min_sides)\n  return max_side^2 == min_sides^2 + mid_side^2\nend", "\t-- implement\
    \ the code here\nend", "  if a >= b and a >= c then\n    return a*a == b*b + c*c\n\
    \  elseif b >= a and b >= c then\n    return b*b == a*a + c*c\n  else\n    return\
    \ c*c == a*a + b*b\n  end\nend", "  if a + b <= c or a + c <= b or b + c <= a\
    \ then\n    return false\n  end\n  local x = {a, b, c}\n  table.sort(x)\n  if\
    \ x[1] ^ 2 + x[2] ^ 2 == x[3] ^ 2 then\n    return true\n  end\n  return false\n\
    end", "  if a^2 + b^2 == c^2 then\n    return true\n  else\n    return false\n\
    \  end\nend", "  local s = {a, b, c}\n  local max_num = math.max(a, b, c)\n  local\
    \ index = 1\n  for i = 1, 3 do\n    if s[i] == max_num then\n      index = i\n\
    \    end\n  end\n  table.remove(s, index)\n  return s[1] * s[1] + s[2] * s[2]\
    \ == max_num * max_num\nend", "    if a * a + b * b == c * c then\n        return\
    \ true\n    else\n        return false\n    end\nend", "  if c^2 == a^2 + b^2\
    \ then return true end\n  if a^2 == b^2 + c^2 then return true end\n  if b^2 ==\
    \ a^2 + c^2 then return true end\n  return false\nend", end, "  if a^2 + b^2 ==\
    \ c^2 then\n    return true\n  else\n    return false\n  end\nend", "    -- TODO:\
    \ implement\nend", "    -- PUT YOUR CODE HERE\n    return math.pow(a, 2) + math.pow(b,\
    \ 2) == math.pow(c, 2)\nend", "\tlocal list = {a, b, c}\n\ttable.sort(list)\n\t\
    if list[1]^2 + list[2]^2 == list[3]^2 then\n\t\treturn true\n\telse\n\t\treturn\
    \ false\n\tend\nend", "  -- raise NotImplementedError()\n  local list = {a, b,\
    \ c}\n  table.sort(list)\n  return list[1]^2 + list[2]^2 == list[3]^2\nend", " \
    \   -- your code goes here\n    return false\nend", "    local c2 = c * c\n  \
    \  local a2 = a * a\n    local b2 = b * b\n    if a2 + b2 == c2 then\n       \
    \ return true\n    elseif a2 + c2 == b2 then\n        return true\n    elseif\
    \ b2 + c2 == a2 then\n        return true\n    else\n        return false\n  \
    \  end\nend", "    -- Your code here\n    local s = a+b+c\n    local arr = {a,b,c}\n\
    \    local max = math.max(unpack(arr))\n    local t = 0\n    for k,v in pairs(arr)\
    \ do\n        if v ~= max then\n            t = t + v*v\n        end\n    end\n\
    \    return t == max*max\nend", "\tlocal sides = {a, b, c}\n\ttable.sort(sides)\n\
    \tif (sides[1] * sides[1] + sides[2] * sides[2]) == sides[3] * sides[3] then\n\
    \t\treturn true\n\telse\n\t\treturn false\n\tend\nend", end, "  -- write your\
    \ code here\nend", "    return (a*a + b*b == c*c) or (a*a + c*c == b*b) or (b*b\
    \ + c*c == a*a)\nend", "  -- TODO: implement me\nend", "    if a^2 + b^2 == c^2\
    \ then\n        return true\n    else\n        return false\n    end\nend", " \
    \   if not a or not b or not c then return false end\n    if a <= 0 or b <= 0\
    \ or c <= 0 then return false end\n    local _a, _b, _c = a, b, c\n    if a >\
    \ b then a, b = b, a end\n    if b > c then b, c = c, b end\n    if a > b then\
    \ a, b = b, a end\n    if a * a + b * b == c * c then return true end\n    return\
    \ false\nend", "    local d = {a, b, c}\n    table.sort(d)\n    return d[1] *\
    \ d[1] + d[2] * d[2] == d[3] * d[3]\nend", "    -- put your code here\n    local\
    \ max\n    if a > b then\n        if a > c then\n            max = a\n       \
    \ else\n            max = c\n        end\n    else\n        if b > c then\n  \
    \          max = b\n        else\n            max = c\n        end\n    end\n\
    \    local x = max * max\n    local y = (a * a) + (b * b) + (c * c) - x\n    if\
    \ y == x then\n        return true\n    else\n        return false\n    end\n\
    end", "  return (a^2 + b^2 == c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2)\n\
    end", "\tlocal function squared(x)\n\t\treturn x * x\n\tend\n\tlocal c2 = squared(c)\n\
    \treturn squared(a) + squared(b) == c2 or\n\t\t   squared(a) + c2 == squared(b)\
    \ or\n\t\t   squared(b) + c2 == squared(a)\nend", "  if a^2 + b^2 == c^2 then\n\
    \    return true\n  elseif a^2 + c^2 == b^2 then\n    return true\n  elseif b^2\
    \ + c^2 == a^2 then\n    return true\n  else\n    return false\n  end\nend", "\t\
    if a^2 + b^2 == c^2 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
  "  -- body\n  return nil\nend", "    local max = math.max(a, b, c)\n    return a^2\
    \ + b^2 + c^2 - 2 * max^2 == max^2\nend", "  local sides = {a, b, c}\n  table.sort(sides)\n\
    \  if sides[1] * sides[1] + sides[2] * sides[2] == sides[3] * sides[3] then\n\
    \    return true\n  else\n    return false\n  end\nend", "    -- Get the length\
    \ of the hypotenuse\n    local hyp = math.max(a, b, c)\n    -- Get the lengths\
    \ of the other two sides\n    local cat1 = 0\n    local cat2 = 0\n    if a ==\
    \ hyp then\n        cat1 = b\n        cat2 = c\n    elseif b == hyp then\n   \
    \     cat1 = a\n        cat2 = c\n    else\n        cat1 = a\n        cat2 = b\n\
    \    end\n    -- Check whether the triangle is right-angled\n    return cat1 *\
    \ cat1 + cat2 * cat2 == hyp * hyp\nend", "    -- return true if the sum of squares\
    \ of the two smallest sides is equal to\n    -- the square of the largest side\n\
    \    -- side lengths are integers\n    -- Use a table to store the side lengths\
    \ and\n    -- the next function to find the smallest and second smallest sides\n\
    \    local t = {a, b, c}\n    table.sort(t)\n    return t[1]^2 + t[2]^2 == t[3]^2\n\
    end", end, end, "    return c^2 == a^2 + b^2\nend", "  if a^2 + b^2 == c^2 then\n\
    \    return true\n  else\n    return false\n  end\nend", end, "    return (a *\
    \ a + b * b == c * c) or (a * a + c * c == b * b) or (b * b + c * c == a * a)\n\
    end", "  local arr = {a, b, c}\n  table.sort(arr)\n  return arr[1] * arr[1] +\
    \ arr[2] * arr[2] == arr[3] * arr[3]\nend", "\t-- body\n\tif a^2 + b^2 == c^2\
    \ then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "  return math.pow(a,\
    \ 2) + math.pow(b, 2) == math.pow(c, 2)\nend", "  -- Your code\nend", "    if\
    \ (a > 0 and b > 0 and c > 0) then\n        if (a > b and a > c) then\n      \
    \      if ((b * b + c * c) == (a * a)) then\n                return true\n   \
    \         end\n        elseif (b > a and b > c) then\n            if ((a * a +\
    \ c * c) == (b * b)) then\n                return true\n            end\n    \
    \    elseif (c > a and c > b) then\n            if ((a * a + b * b) == (c * c))\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", "    if a^2 + b^2 == c^2 then\n        return true\n \
    \   elseif a^2 + c^2 == b^2 then\n        return true\n    elseif b^2 + c^2 ==\
    \ a^2 then\n        return true\n    else\n        return false\n    end\nend",
  "    -- body\n    if a <= 0 or b <= 0 or c <= 0 then\n        return false\n   \
    \ end\n    if a^2 + b^2 == c^2 then\n        return true\n    end\n    if a^2\
    \ + c^2 == b^2 then\n        return true\n    end\n    if b^2 + c^2 == a^2 then\n\
    \        return true\n    end\n    return false\nend", "  -- Write your code here\n\
    \  return false\nend", "    return a*a + b*b == c*c\nend", "    return (a^2 +\
    \ b^2 == c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2)\nend\nassert(right_angle_triangle(3,\
    \ 4, 5) == true)\nassert(right_angle_triangle(1, 2, 3) == false)\nassert(right_angle_triangle(2,\
    \ 3, 4) == false)\nassert(right_angle_triangle(9, 12, 15) == true)", "  if a >\
    \ b and a > c then\n    return a * a == b * b + c * c\n  elseif b > a and b >\
    \ c then\n    return b * b == a * a + c * c\n  else\n    return c * c == a * a\
    \ + b * b\n  end\nend", "    local sides = {a, b, c}\n    table.sort(sides)\n\
    \    return math.pow(sides[1], 2) + math.pow(sides[2], 2) == math.pow(sides[3],\
    \ 2)\nend", "  -- Good luck!\n  return a^2 + b^2 == c^2\nend", "    if a <= 0\
    \ or b <= 0 or c <= 0 then\n        return false\n    end\n    if a + b <= c or\
    \ a + c <= b or b + c <= a then\n        return false\n    end\n    return math.pow(a,\
    \ 2) + math.pow(b, 2) == math.pow(c, 2)\nend", end, "  local sides = {a, b, c}\n\
    \  local biggest = math.max(unpack(sides))\n  local biggest_index = 1\n  for k,v\
    \ in ipairs(sides) do\n    if v == biggest then\n      biggest_index = k\n   \
    \ end\n  end\n  table.remove(sides, biggest_index)\n  return sides[1] ^ 2 + sides[2]\
    \ ^ 2 == biggest ^ 2\nend", "  return ((a * a) + (b * b)) == (c * c)\nend", " \
    \   local l1, l2, l3 = a, b, c\n    if a > b then\n        l1, l2 = b, a\n   \
    \ end\n    if a > c then\n        l1, l3 = c, a\n    end\n    if b > c then\n\
    \        l2, l3 = c, b\n    end\n    return math.pow(l1, 2) + math.pow(l2, 2)\
    \ == math.pow(l3, 2)\nend", "    if a*a + b*b == c*c then return true end\n  \
    \  if a*a + c*c == b*b then return true end\n    if b*b + c*c == a*a then return\
    \ true end\n    return false\nend", "\tlocal function sqr(a)\n\t\treturn a * a\n\
    \tend\n\tlocal function epscmp(a, b)\n\t\tlocal eps = 1e-10\n\t\treturn math.abs(a\
    \ - b) < eps\n\tend\n\treturn a > 0 and b > 0 and c > 0 and\n\t\tepscomp(sqr(a)\
    \ + sqr(b), sqr(c)) or\n\t\tepscomp(sqr(a) + sqr(c), sqr(b)) or\n\t\tepscomp(sqr(b)\
    \ + sqr(c), sqr(a))\nend", "\treturn (math.pow(a, 2) + math.pow(b, 2) == math.pow(c,\
    \ 2)) or\n\t\t(math.pow(a, 2) + math.pow(c, 2) == math.pow(b, 2)) or\n\t\t(math.pow(b,\
    \ 2) + math.pow(c, 2) == math.pow(a, 2))\nend", "    if (a^2 + b^2 == c^2) or\
    \ (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2) then\n        return true\n    else\n\
    \        return false\n    end\nend", "  if a^2 + b^2 == c^2 then\n    return\
    \ true\n  else\n    return false\n  end\nend", "    if a == b and b == c then\n\
    \        return false\n    end\n    if a > b and a > c then\n        return a\
    \ * a == b * b + c * c\n    elseif b > a and b > c then\n        return b * b\
    \ == a * a + c * c\n    else\n        return c * c == a * a + b * b\n    end\n\
    end", "  return a^2 + b^2 == c^2\nend", "    a, b, c = math.max(a, b, c), math.min(a,\
    \ b, c), (a + b + c) - (math.max(a, b, c) + math.min(a, b, c))\n    return (math.max(a,\
    \ b, c) ^ 2) == (c ^ 2 + b ^ 2)\nend", "    -- Your code here\n    local max =\
    \ math.max(a, b, c)\n    local min = math.min(a, b, c)\n    if max ^ 2 == (min\
    \ ^ 2 + (a + b + c - min - max) ^ 2) then\n        return true\n    else\n   \
    \     return false\n    end\nend", "    local sides = {a, b, c}\n    local max\
    \ = math.max(a, b, c)\n    table.remove(sides, max)\n    local hyp = math.pow(max,\
    \ 2)\n    local sum = math.pow(sides[1], 2) + math.pow(sides[2], 2)\n    return\
    \ hyp == sum\nend", "  return (((a*a + b*b) == c*c) or ((a*a + c*c) == b*b) or\
    \ ((b*b + c*c) == a*a))\nend", "  return (a^2 + b^2 == c^2) or (a^2 + c^2 == b^2)\
    \ or (b^2 + c^2 == a^2)\nend", "  if a + b > c then\n    if c^2 == a^2 + b^2 then\n\
    \      return true\n    end\n  end\n  if a + c > b then\n    if b^2 == a^2 + c^2\
    \ then\n      return true\n    end\n  end\n  if b + c > a then\n    if a^2 ==\
    \ b^2 + c^2 then\n      return true\n    end\n  end\n  return false\nend", " \
    \   if (a * a + b * b == c * c) or (a * a + c * c == b * b) or (b * b + c * c\
    \ == a * a) then\n        return true\n    else\n        return false\n    end\n\
    end", "\treturn (a^2 + b^2 == c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2)\n\
    end", "  local a2 = a * a\n  local b2 = b * b\n  local c2 = c * c\n  return (a2\
    \ + b2 == c2) or (a2 + c2 == b2) or (b2 + c2 == a2)\nend", "    return a^2 + b^2\
    \ == c^2\nend", "    -- A right-angled triangle (or right triangle) has one angle\
    \ of 90 degrees.\n    -- This means that the square of the hypotenuse equals the\
    \ sum of the squares\n    -- of the other two sides.\n    -- a^2 + b^2 = c^2\n\
    \    -- So if a triangle has one angle that is 90 degrees, then the square of\
    \ the\n    -- longest side equals the sum of the squares of the other two sides\n\
    \    local result = 0\n    if a > b and a > c then\n        result = (a*a) ==\
    \ (b*b) + (c*c)\n    elseif b > a and b > c then\n        result = (b*b) == (a*a)\
    \ + (c*c)\n    elseif c > a and c > b then\n        result = (c*c) == (a*a) +\
    \ (b*b)\n    end\n    return result\nend", "  -- return true if the three sides\
    \ form a right-angled triangle, false otherwise\n  -- if the sum of the squares\
    \ of 2 shortest sides equals to the square of the \n  -- longest side, then the\
    \ triangle is right-angled triangle\n  return a^2 + b^2 == c^2 or a^2 + c^2 ==\
    \ b^2 or b^2 + c^2 == a^2\nend", "\treturn true\nend", "    return (a^2 + b^2\
    \ == c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2)\nend", "\treturn a*a + b*b\
    \ == c*c or a*a + c*c == b*b or b*b + c*c == a*a\nend", "    -- TODO: implement\
    \ here\nend", "    local max = math.max(a, b, c)\n    local max2 = math.max(a,\
    \ b)\n    if math.pow(max, 2) == math.pow(max2, 2) + math.pow(c, 2) then\n   \
    \     return true\n    else\n        return false\n    end\nend", "  return (a^2\
    \ + b^2 == c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2)\nend", "    -- First,\
    \ get the biggest side from a, b, c\n    local biggest = 0\n    if a > b then\n\
    \        if a > c then\n            biggest = a\n        else\n            biggest\
    \ = c\n        end\n    else\n        if b > c then\n            biggest = b\n\
    \        else\n            biggest = c\n        end\n    end\n    -- Then, calculate\
    \ a^2 + b^2 = c^2\n    return (a*a + b*b == c*c) or (a*a + c*c == b*b) or (b*b\
    \ + c*c == a*a)\nend", "  -- Write your code here\nend", "    local sorted = table.sort({a,\
    \ b, c})\n    local hypotenuse = sorted[1]\n    local opposite = sorted[2]\n \
    \   local adjacent = sorted[3]\n    return hypotenuse * hypotenuse + opposite\
    \ * opposite == adjacent * adjacent\nend", "    --[[\n    -- The Pythagorean theorem\
    \ states that the square of the\n    -- hypotenuse equals the sum of the squares\
    \ of the other two sides.\n    -- If a^2 + b^2 = c^2 then this is a right angle\
    \ triangle\n    --]]\n    local squared_a = a * a\n    local squared_b = b * b\n\
    \    local squared_c = c * c\n    if squared_a + squared_b == squared_c then\n\
    \        return true\n    else\n        return false\n    end\nend", "  if math.max(a,\
    \ b, c) == a then\n    if a^2 == b^2 + c^2 then\n      return true\n    end\n\
    \  elseif math.max(a, b, c) == b then\n    if b^2 == a^2 + c^2 then\n      return\
    \ true\n    end\n  elseif math.max(a, b, c) == c then\n    if c^2 == a^2 + b^2\
    \ then\n      return true\n    end\n  end\n  return false\nend", "  local p =\
    \ (a+b+c)/2\n  return (math.floor(math.sqrt(p*(p-a)*(p-b)*(p-c))) == p-a)\nend",
  "  -- YOUR CODE HERE\nend", "    if(math.pow(a, 2) + math.pow(b, 2) == math.pow(c,\
    \ 2)) then\n        return true\n    elseif(math.pow(b, 2) + math.pow(c, 2) ==\
    \ math.pow(a, 2)) then\n        return true\n    elseif(math.pow(c, 2) + math.pow(a,\
    \ 2) == math.pow(b, 2)) then\n        return true\n    else\n        return false\n\
    \    end\nend", "    -- Write your code here\nend", "  local sides = {a, b, c}\n\
    \  table.sort(sides)\n  return sides[1]^2 + sides[2]^2 == sides[3]^2\nend", " \
    \ -- insert your code here\nend", "  -- body\n  if a^2 + b^2 == c^2 then\n  \t\
    return true\n  else\n  \treturn false\n  end\nend", end, "    if (a * a) + (b\
    \ * b) == (c * c) then \n        return true\n    else\n        return false\n\
    \    end\nend", "  local ab = a^2\n  local bc = b^2\n  local ac = c^2\n  if ab\
    \ + bc == ac then\n    return true\n  elseif ab + ac == bc then\n    return true\n\
    \  elseif bc + ac == ab then\n    return true\n  else\n    return false\n  end\n\
    end", "  if (a * a) + (b * b) == (c * c) then return true end\n  if (a * a) +\
    \ (c * c) == (b * b) then return true end\n  if (b * b) + (c * c) == (a * a) then\
    \ return true end\n  return false\nend", "    local max, left, right\n    max\
    \ = math.max(a, b, c)\n    if max == a then\n        left = b\n        right =\
    \ c\n    elseif max == b then\n        left = a\n        right = c\n    else\n\
    \        left = a\n        right = b\n    end\n    return math.pow(max, 2) ==\
    \ math.pow(left, 2) + math.pow(right, 2)\nend", "  local sides = {a, b, c}\n \
    \ table.sort(sides)\n  return sides[1] * sides[1] + sides[2] * sides[2] == sides[3]\
    \ * sides[3]\nend", "    if a^2 + b^2 == c^2 then\n        return true\n    elseif\
    \ a^2 + c^2 == b^2 then\n        return true\n    elseif b^2 + c^2 == a^2 then\n\
    \        return true\n    else\n        return false\n    end\nend", "  -- TODO\n\
    end", "    local x = math.pow(a, 2)\n    local y = math.pow(b, 2)\n    local z\
    \ = math.pow(c, 2)\n    if x + y == z then\n        return true\n    elseif x\
    \ + z == y then\n        return true\n    elseif y + z == x then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    local t = {a, b, c}\n\
    \    table.sort(t)\n    return t[1] ^ 2 + t[2] ^ 2 == t[3] ^ 2\nend\n_exports.right_angle_triangle\
    \ = right_angle_triangle", "  -- write your code here\nend", "  if a^2 + b^2 ==\
    \ c^2 then\n    return true\n  elseif a^2 + c^2 == b^2 then\n    return true\n\
    \  elseif b^2 + c^2 == a^2 then\n    return true\n  else\n    return false\n \
    \ end\nend", "    local longest_side = math.max(a, b, c)\n    local shortest_side\
    \ = math.min(a, b, c)\n    local middle_side = a + b + c - longest_side - shortest_side\n\
    \    local left_triangle = math.pow(longest_side, 2) == math.pow(shortest_side,\
    \ 2) + math.pow(middle_side, 2)\n    local right_triangle = math.pow(longest_side,\
    \ 2) == math.pow(shortest_side, 2) + math.pow(middle_side, 2)\n    return left_triangle\
    \ or right_triangle\nend", "  -- return true or false\nend", "\tif a == nil or\
    \ b == nil or c == nil then\n\t\treturn nil\n\tend\n\tif a < 0 or b < 0 or c <\
    \ 0 then\n\t\treturn nil\n\tend\n\tif a == 0 or b == 0 or c == 0 then\n\t\treturn\
    \ nil\n\tend\n\tif a < b and a < c then\n\t\treturn a * a + b * b == c * c\n\t\
    elseif b < a and b < c then\n\t\treturn b * b + a * a == c * c\n\telseif c < a\
    \ and c < b then\n\t\treturn c * c + a * a == b * b\n\tend\nend", "  if a^2 +\
    \ b^2 == c^2 then\n    return true\n  else\n    return false\n  end\nend", " \
    \ if a + b + c ~= 90 then\n    return false\n  end\n  return true\nend", "   \
    \ local sides = {a, b, c}\n    table.sort(sides)\n    return (sides[1] * sides[1]\
    \ + sides[2] * sides[2]) == sides[3] * sides[3]\nend", "    local longest_side\
    \ = math.max(a, b, c)\n    local sum_of_sides = a + b + c\n    local is_right_angle\
    \ = (longest_side^2 + (sum_of_sides - longest_side)^2)^0.5\n    return is_right_angle\
    \ == longest_side\nend", "    local longest = math.max(a, b, c)\n    local first_segment\
    \ = math.min(a, b, c)\n    local remaining_segment = (a + b + c) - longest - first_segment\n\
    \    return first_segment ^ 2 + remaining_segment ^ 2 == longest ^ 2\nend", " \
    \   local min, max\n    if a > b then\n        max = a\n        min = b\n    else\n\
    \        max = b\n        min = a\n    end\n    if c > max then\n        max =\
    \ c\n    elseif c < min then\n        min = c\n    end\n    return min ^ 2 + (max\
    \ - min) ^ 2 == max ^ 2\nend", "    return ((a*a) + (b*b) == (c*c)) or ((a*a)\
    \ + (c*c) == (b*b)) or ((b*b) + (c*c) == (a*a))\nend", "    -- TODO: Your code\
    \ here\nend", "    if a^2 + b^2 == c^2 then\n        return true\n    else\n \
    \       return false\n    end\nend", "\t-- a squared + b squared == c squared\n\
    \tif (math.pow(a, 2) + math.pow(b, 2)) == math.pow(c, 2) then\n\t\treturn true\n\
    \telseif (math.pow(a, 2) + math.pow(c, 2)) == math.pow(b, 2) then\n\t\treturn\
    \ true\n\telseif (math.pow(b, 2) + math.pow(c, 2)) == math.pow(a, 2) then\n\t\t\
    return true\n\telse\n\t\treturn false\n\tend\nend", "    if (a^2 + b^2 == c^2)\
    \ or (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2) then\n        return true\n    else\n\
    \        return false\n    end\nend", "    -- your code here\nend", "  -- your\
    \ code here\nend", "  local t = math.max(a, b, c)\n  local s = a + b + c - t\n\
    \  return t * t == a * a + b * b + c * c - s * s\nend", "  -- Your code here\n\
    end", "  local max = math.max(a, b, c)\n  local rest = math.min(a + b, a + c,\
    \ b + c) - max\n  return max ^ 2 == rest ^ 2\nend", "  if a^2 + b^2 == c^2 then\n\
    \    return true\n  else\n    return false\n  end\nend", "    return a^2 + b^2\
    \ == c^2\nend", "  if a > b and a > c then\n    if a^2 == b^2 + c^2 then\n   \
    \   return true\n    end\n  elseif b > a and b > c then\n    if b^2 == a^2 + c^2\
    \ then\n      return true\n    end\n  elseif c > a and c > b then\n    if c^2\
    \ == a^2 + b^2 then\n      return true\n    end\n  end\n  return false\nend",
  "\tif (math.pow(a, 2) + math.pow(b, 2)) == math.pow(c, 2) then\n\t\treturn true\n\
    \telseif (math.pow(a, 2) + math.pow(c, 2)) == math.pow(b, 2) then\n\t\treturn\
    \ true\n\telseif (math.pow(b, 2) + math.pow(c, 2)) == math.pow(a, 2) then\n\t\t\
    return true\n\telse\n\t\treturn false\n\tend\nend", "    local sides = {a, b,\
    \ c}\n    table.sort(sides)\n    return sides[1] * sides[1] + sides[2] * sides[2]\
    \ == sides[3] * sides[3]\nend", "    if c > a and c > b then\n        return math.pow(a,\
    \ 2) + math.pow(b, 2) == math.pow(c, 2)\n    elseif b > a and b > c then\n   \
    \     return math.pow(a, 2) + math.pow(c, 2) == math.pow(b, 2)\n    elseif a >\
    \ b and a > c then\n        return math.pow(b, 2) + math.pow(c, 2) == math.pow(a,\
    \ 2)\n    end\nend", "  -- your code here\nend", "  if (a^2 + b^2 == c^2) or (a^2\
    \ + c^2 == b^2) or (b^2 + c^2 == a^2) then\n    return true\n  else\n    return\
    \ false\n  end\nend", "    -- your code here\n    if a^2 + b^2 == c^2 then\n \
    \       return true\n    else\n        return false\n    end\nend\nreturn right_angle_triangle",
  "  return a*a + b*b == c*c or a*a + c*c == b*b or b*b + c*c == a*a\nend", "    --\
    \ TODO: define right_angle_triangle\nend", end, "  local list = {a, b, c}\n  table.sort(list)\n\
    \  if list[1]^2 + list[2]^2 == list[3]^2 then\n    return true\n  else\n    return\
    \ false\n  end\nend", "    if a > 0 and b > 0 and c > 0 then\n        if a^2 +\
    \ b^2 == c^2 then\n            return true\n        elseif b^2 + c^2 == a^2 then\n\
    \            return true\n        elseif c^2 + a^2 == b^2 then\n            return\
    \ true\n        else\n            return false\n        end\n    else\n      \
    \  return false\n    end\nend", "\tlocal max_side = math.max(a, b, c)\n\treturn\
    \ a^2 + b^2 + c^2 - 2 * max_side^2 == max_side^2\nend", "    return math.pow(a,\
    \ 2) + math.pow(b, 2) == math.pow(c, 2)\nend", "    -- insert your code here\n\
    \    local sorted_sides = {}\n    sorted_sides[1] = math.max(a, b, c)\n    if\
    \ sorted_sides[1] == a then\n        sorted_sides[2] = math.max(b, c)\n      \
    \  sorted_sides[3] = math.min(b, c)\n    elseif sorted_sides[1] == b then\n  \
    \      sorted_sides[2] = math.max(a, c)\n        sorted_sides[3] = math.min(a,\
    \ c)\n    else\n        sorted_sides[2] = math.max(a, b)\n        sorted_sides[3]\
    \ = math.min(a, b)\n    end\n    return sorted_sides[1] ^ 2 == sorted_sides[2]\
    \ ^ 2 + sorted_sides[3] ^ 2\nend", "  if a^2 + b^2 == c^2 then return true\n \
    \ elseif a^2 + c^2 == b^2 then return true\n  elseif b^2 + c^2 == a^2 then return\
    \ true\n  else return false\n  end\nend", "    local hyp = math.max(a, b, c)\n\
    \    local t = {a, b, c}\n    table.remove(t, hyp)\n    local a = t[1]\n    local\
    \ b = t[2]\n    return a^2 + b^2 == hyp^2\nend", "    local longest = math.max(a,\
    \ b, c)\n    local shortest = math.min(a, b, c)\n    local medium = (a + b + c)\
    \ - (longest + shortest)\n    return longest^2 == medium^2 + shortest^2\nend",
  "    -- Type your code here\n    -- If a^2 + b^2 = c^2, then it forms a right-angled\
    \ triangle\n    if a^2 + b^2 == c^2 then\n        return true\n    elseif a^2\
    \ + c^2 == b^2 then\n        return true\n    elseif b^2 + c^2 == a^2 then\n \
    \       return true\n    else\n        return false\n    end\nend", "  return\
    \ (a*a+b*b == c*c) or (a*a+c*c == b*b) or (b*b+c*c == a*a)\nend", "  -- your code\
    \ here\n  local angle\n  if a*a + b*b == c*c then angle = true\n  elseif a*a +\
    \ c*c == b*b then angle = true\n  elseif b*b + c*c == a*a then angle = true\n\
    \  else angle = false\n  end\n  return angle\nend", "    if a > 0 and b > 0 and\
    \ c > 0 then\n        local sides = {a, b, c}\n        local hypotenuse = table.remove(sides,\
    \ math.max(a, b, c))\n        return math.pow(hypotenuse, 2) == math.pow(sides[1],\
    \ 2) + math.pow(sides[2], 2)\n    end\n    return false\nend", "    -- TODO: implement\
    \ this function\n    return false\nend", "    if a^2 + b^2 == c^2 then\n     \
    \   return true\n    else\n        return false\n    end\nend", "    -- @TODO\n\
    end", "    -- your code goes here\nend", "   if a * a + b * b == c * c then\n\
    \      return true\n   else\n      return false\n   end\nend", "    if (a^2 +\
    \ b^2 == c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2) then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    if (a*a + b*b == c*c)\
    \ or (b*b + c*c == a*a) or (c*c + a*a == b*b) then\n        return true\n    else\n\
    \        return false\n    end\nend", "    -- write your code here\n    return\
    \ false\nend", "    if a^2 + b^2 == c^2 then\n        return true\n    else\n\
    \        return false\n    end\nend", "    -- Your code here\n    return true\n\
    end", "  -- return (a^2+b^2==c^2) or (b^2+c^2==a^2) or (c^2+a^2==b^2)\n  -- return\
    \ (a^2+b^2==c^2) or (b^2+c^2==a^2) or (c^2+a^2==b^2)\n  return (a + b > c) and\
    \ (a + c > b) and (b + c > a) and (math.max(a, b, c)^2 == math.min(a, b, c)^2\
    \ + math.min(math.max(a, b), math.max(b, c), math.max(a, c))^2)\nend", "    local\
    \ sides = {a, b, c}\n    table.sort(sides)\n    local a = sides[1]\n    local\
    \ b = sides[2]\n    local c = sides[3]\n    return a^2 + b^2 == c^2\nend", " \
    \ -- code here\nend", '  --[[', "  -- do stuff here\nend", "  if a^2 + b^2 ==\
    \ c^2 then\n    return true\n  else\n    return false\n  end\nend", "  -- TODO:\
    \ complete right_angle_triangle\n  -- hint: the Pythagorean theorem gives the\
    \ relation between the three sides\n  -- of a right-angled triangle:\n  -- c^2\
    \ = a^2 + b^2\n  if (a^2 + b^2) == c^2 then\n    return true\n  elseif (a^2 +\
    \ c^2) == b^2 then\n    return true\n  elseif (b^2 + c^2) == a^2 then\n    return\
    \ true\n  else\n    return false\n  end\nend", "    local sides = {a, b, c}\n\
    \    table.sort(sides)\n    return sides[1] ^ 2 + sides[2] ^ 2 == sides[3] ^ 2\n\
    end", "  if a == 0 or b == 0 or c == 0 then\n    return false\n  end\n  local\
    \ max_side = math.max(a, b, c)\n  local others = {a, b, c}\n  for i = 1, #others\
    \ do\n    if others[i] == max_side then\n      table.remove(others, i)\n     \
    \ break\n    end\n  end\n  return (others[1] * others[1] + others[2] * others[2])\
    \ == max_side * max_side\nend", "    if math.max(a, b, c) == math.sqrt(a^2 + b^2)\
    \ then return true else return false end\nend", "   if ((a^2 + b^2) == c^2) or\
    \ ((a^2 + c^2) == b^2) or ((b^2 + c^2) == a^2) then\n      return true\n   else\n\
    \      return false\n   end\nend", "   -- put your code here\n   local arr = {a,\
    \ b, c}\n   local max = 0\n   for i = 1, #arr do\n      max = math.max(max, arr[i])\n\
    \   end\n   local idx = 1\n   while idx <= #arr do\n      if arr[idx] == max then\n\
    \         table.remove(arr, idx)\n      else\n         idx = idx + 1\n      end\n\
    \   end\n   return arr[1] * arr[1] + arr[2] * arr[2] == max * max\nend", "  local\
    \ sorted = {a, b, c}\n  table.sort(sorted)\n  return sorted[1] * sorted[1] + sorted[2]\
    \ * sorted[2] == sorted[3] * sorted[3]\nend", "\ta, b, c = a*a, b*b, c*c\n\treturn\
    \ a + b == c or a + c == b or b + c == a\nend", "    return (a ^ 2 + b ^ 2 ==\
    \ c ^ 2) or\n        (a ^ 2 + c ^ 2 == b ^ 2) or\n        (b ^ 2 + c ^ 2 == a\
    \ ^ 2)\nend", "    -- YOUR CODE HERE\n    if a*a + b*b == c*c then\n        return\
    \ true\n    elseif a*a + c*c == b*b then\n        return true\n    elseif b*b\
    \ + c*c == a*a then\n        return true\n    else\n        return false\n   \
    \ end\nend", end, "  return a ^ 2 + b ^ 2 == c ^ 2\nend", "    if (a^2 + b^2 ==\
    \ c^2) or (b^2 + c^2 == a^2) or (c^2 + a^2 == b^2) then\n        return true\n\
    \    else\n        return false\n    end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
