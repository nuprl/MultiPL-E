name: HumanEval_63_fibfib
language: lua
prompt: "-- The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n-- fibfib(2)\
  \ == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n-- Please write\
  \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
  -- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n-- 24\nlocal function\
  \ fibfib(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
  \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n  \
  \  lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n   \
  \ lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
  \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local f1, f2, f3 = 0, 0, 1\n  for i = 2, n do\n    f1, f2, f3 = f2,\
    \ f3, f1 + f2 + f3\n  end\n  return f3\nend\nassert(fibfib(1) == 0)\nassert(fibfib(5)\
    \ == 4)\nassert(fibfib(8) == 24)", end, "    if n <= 1 then\n        return 0\n\
    \    elseif n == 2 then\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n == 0 then\n        return\
    \ 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n      \
    \  return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "    if n == 0 then\n        return 0\n    elseif n == 1 then\n\
    \        return 0\n    elseif n == 2 then\n        return 1\n    else\n      \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "\tif n == 0\
    \ then\n\t\treturn 0\n\telseif n == 1 then\n\t\treturn 0\n\telseif n == 2 then\n\
    \t\treturn 1\n\telse\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\n\
    end", "    local a, b, c = 0, 0, 1\n    for i = 3, n do\n        a, b, c = b,\
    \ c, a + b + c\n    end\n    return c\nend", "  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "\tlocal s =\
    \ {}\n\tlocal last = 1\n\tfor i = 1, n do\n\t\tlocal v = s[i-3] or 0\n\t\tv =\
    \ v + (s[i-2] or 0) + (s[i-1] or 0)\n\t\ts[i] = v\n\t\tlast = v\n\tend\n\treturn\
    \ last\nend\nprint(fibfib(1))\nprint(fibfib(5))\nprint(fibfib(8))\nprint(fibfib(9))",
  "    local memo = {}\n    local function fibfib_rec(n)\n        if n <= 2 then\n\
    \            return n - 1\n        end\n        local res = memo[n]\n        if\
    \ res then\n            return res\n        end\n        res = fibfib_rec(n -\
    \ 1) + fibfib_rec(n - 2) + fibfib_rec(n - 3)\n        memo[n] = res\n        return\
    \ res\n    end\n    return fibfib_rec(n)\nend", "    if n == 0 then\n        return\
    \ 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n      \
    \  return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "  local arr = {0, 0, 1}\n  for i = 3, n do\n    arr[i] = arr[i-1]\
    \ + arr[i-2] + arr[i-3]\n  end\n  return arr[n]\nend", "  return\nend", "    local\
    \ a, b, c = 0, 0, 1\n    for i = 1, n - 1 do\n        a, b, c = b, c, a + b +\
    \ c\n    end\n    return a\nend", "  -- your code here\nend", "  -- TODO: write\
    \ your code here\nend", "  if n == 0 then\n    return 0\n  elseif n == 1 then\n\
    \    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "    if n == 0 then\n        return\
    \ 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n      \
    \  return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "    -- Write your code here\n    if n <= 0 then\n        return\
    \ 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n      \
    \  return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "\tlocal fib1, fib2, fib3 = 0, 0, 1\n\tfor i = 3, n do\n\t\tfib1,\
    \ fib2, fib3 = fib2, fib3, fib1 + fib2 + fib3\n\tend\n\treturn fib3\nend", " \
    \ -- YOUR CODE HERE\nend", "    if n == 0 then\n        return 0\n    elseif n\
    \ == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n    else\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "  if\
    \ n < 0 then\n    return nil\n  end\n  local a, b, c = 0, 0, 1\n  for i = 1, n\
    \ - 1 do\n    a, b, c = b, c, a + b + c\n  end\n  return a\nend", "  if n == 0\
    \ then\n    return 0\n  elseif n == 1 then\n    return 0\n  elseif n == 2 then\n\
    \    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\n\
    end", "\tassert(type(n) == \"number\" and n >= 0, \"n must be a non-negative number.\"\
    )\n\tif n <= 1 then\n\t\treturn 0\n\telseif n == 2 then\n\t\treturn 1\n\telse\n\
    \t\tlocal a, b, c = 0, 0, 1\n\t\tfor i = 3, n do\n\t\t\ta, b, c = b, c, a + b\
    \ + c\n\t\tend\n\t\treturn c\n\tend\nend", end, "    -- TODO: Write fibfib(n)\n\
    end", "    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return\
    \ 0\n    elseif n == 2 then\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "  if n < 3 then\n    return n -\
    \ 1\n  end\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\nend", "  local\
    \ result = {}\n  for i = 0, n do\n    result[i] = 0\n  end\n  result[0] = 0\n\
    \  result[1] = 0\n  result[2] = 1\n  for i = 3, n do\n    result[i] = result[i-1]\
    \ + result[i-2] + result[i-3]\n  end\n  return result[n]\nend", "  assert(n >=\
    \ 0)\n  if n == 0 then return 0 end\n  if n == 1 then return 0 end\n  if n ==\
    \ 2 then return 1 end\n  local fn0, fn1, fn2 = 0, 0, 1\n  for i = 3, n do\n  \
    \  fn0, fn1, fn2 = fn1, fn2, fn0 + fn1 + fn2\n  end\n  return fn2\nend", end,
  "  if n == 0 then\n    return 0\n  elseif n == 1 then\n    return 0\n  elseif n\
    \ == 2 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", end, "  if n < 0 then return -1 end\n  if n == 0 then return 0 end\n\
    \  if n == 1 then return 0 end\n  if n == 2 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  if n < 3 then\n    return n-1\n  end\n\
    \  local a, b, c = 0, 0, 1\n  for i = 3, n do\n    a, b, c = b, c, c + b + a\n\
    \  end\n  return c\nend", "    return fibfib.helper(n, fibfib.cache)\nend\nfibfib.cache\
    \ = { 0, 0, 1 }", "    local f1, f2, f3 = 0, 0, 1\n    for i = 2, n do\n     \
    \   f1, f2, f3 = f2, f3, f1 + f2 + f3\n    end\n    return f3\nend", "  if n ==\
    \ 0 then\n    return 0\n  elseif n == 1 then\n    return 0\n  elseif n == 2 then\n\
    \    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\n\
    end", "    if n < 3 then\n        return n-1\n    end\n    local a, b, c = 0,\
    \ 0, 1\n    for i = 3, n do\n        a, b, c = b, c, c + b + a\n    end\n    return\
    \ c\nend", "    if n == 0 then\n        return 0\n    elseif n == 1 then\n   \
    \     return 0\n    elseif n == 2 then\n        return 1\n    else\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    local first_fib\
    \ = 0\n    local second_fib = 0\n    local third_fib = 1\n    if n == 0 then\n\
    \        return first_fib\n    elseif n == 1 then\n        return second_fib\n\
    \    elseif n == 2 then\n        return third_fib\n    else\n        for i = 3,\
    \ n do\n            first_fib = second_fib\n            second_fib = third_fib\n\
    \            third_fib = first_fib + second_fib + third_fib\n        end\n   \
    \     return third_fib\n    end\nend", "    local table = {0, 0, 1}\n    for i\
    \ = 3, n do\n        table[i] = table[i-1] + table[i-2] + table[i-3]\n    end\n\
    \    return table[n]\nend", "\t-- t[1] = 0\n\t-- t[2] = 0\n\t-- t[3] = 1\n\t--\
    \ for i = 4, n do\n\t-- \tt[i] = t[i-1] + t[i-2] + t[i-3]\n\t-- end\n\t-- return\
    \ t[n]\n\tlocal a, b, c = 0, 0, 1\n\tlocal d = 0\n\tfor i = 4, n do\n\t\td = a\
    \ + b + c\n\t\ta = b\n\t\tb = c\n\t\tc = d\n\tend\n\treturn d\nend", "  if n ==\
    \ 0 then\n    return 0\n  elseif n == 1 then\n    return 0\n  elseif n == 2 then\n\
    \    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\n\
    end", "    local n1, n2, n3 = 0, 0, 1\n    local fibfib_n = 0\n    for i = 3,\
    \ n do\n        fibfib_n = n1 + n2 + n3\n        n1, n2, n3 = n2, n3, fibfib_n\n\
    \    end\n    return fibfib_n\nend", "    local cache = {0, 0, 1}\n    return\
    \ (function(n)\n        if not cache[n] then\n            cache[n] = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n        end\n        return cache[n]\n    end)(n)\n\
    end", "  -- your code here\nend", "    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend",
  "  local fib = {0, 0, 1}\n  for i = 3, n do\n    fib[i+1] = fib[i] + fib[i-1] +\
    \ fib[i-2]\n  end\n  return fib[n+1]\nend", "\tif n <= 1 then\n\t\treturn 0\n\t\
    elseif n == 2 then\n\t\treturn 1\n\telse\n\t\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\tend\nend", "  if n < 0 then\n    return nil\n  end\n  if n\
    \ == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 0\n  end\n  if\
    \ n == 2 then\n    return 1\n  end\n  local a, b, c = 0, 0, 1\n  for i = 3, n\
    \ do\n    a, b, c = b, c, a + b + c\n  end\n  return c\nend", "    if n == 0 then\n\
    \        return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2\
    \ then\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n    end\nend", "    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend",
  "  local v1, v2, v3 = 0, 0, 1\n  if n == 0 then return v1 end\n  if n == 1 then\
    \ return v2 end\n  if n == 2 then return v3 end\n  for i = 3, n do\n    v1, v2,\
    \ v3 = v2, v3, v2 + v3 + v1\n  end\n  return v3\nend", "    if n == 0 then\n \
    \       return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2\
    \ then\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n    end\nend", "  if n == 0 then\n    return 0\n  elseif n == 1\
    \ then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "\tlocal one, two, three = 0, 0, 1\n\
    \tif n == 0 then\n\t\treturn one\n\telseif n == 1 then\n\t\treturn two\n\telseif\
    \ n == 2 then\n\t\treturn three\n\telse\n\t\tfor i = 3, n do\n\t\t\tone, two,\
    \ three = two, three, one + two + three\n\t\tend\n\t\treturn three\n\tend\nend",
  "    if n <= 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n\
    \    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend",
  "    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 0\n\
    \    elseif n == 2 then\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n == 0 then\n        return\
    \ 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n      \
    \  return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "\tlocal cache = {}\n\treturn fibfibhelp(n, cache)\nend", end,
  "  local fib3 = 0\n  local fib2 = 0\n  local fib1 = 1\n  if n == 0 then\n    return\
    \ fib3\n  elseif n == 1 then\n    return fib2\n  elseif n == 2 then\n    return\
    \ fib1\n  else\n    for i = 3, n do\n      local fib = fib3 + fib2 + fib1\n  \
    \    fib3 = fib2\n      fib2 = fib1\n      fib1 = fib\n    end\n    return fib1\n\
    \  end\nend", "    if n < 3 then\n        return n-1\n    end\n    local a, b,\
    \ c = 0, 0, 1\n    for i = 3, n do\n        a, b, c = b, c, a+b+c\n    end\n \
    \   return c\nend", "    assert(n >= 0, \"Please enter an integer greater than\
    \ or equal to 0\")\n    if n == 0 then\n        return 0\n    elseif n == 1 then\n\
    \        return 0\n    elseif n == 2 then\n        return 1\n    else\n      \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "  if n == 0\
    \ then\n    return 0\n  elseif n == 1 then\n    return 0\n  elseif n == 2 then\n\
    \    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\n\
    end", "  assert(type(n) == \"number\" and n == math.floor(n) and n >= 0, \"usage:\
    \ fibfib(n) where n is a non-negative integer\")\n  local cache = {[0] = 0, [1]\
    \ = 0, [2] = 1}\n  local function fib(n)\n    assert(type(n) == \"number\" and\
    \ n == math.floor(n) and n >= 0, \"fib(n) where n is a non-negative integer\"\
    )\n    local f = cache[n]\n    if f == nil then\n      f = fib(n-1) + fib(n-2)\
    \ + fib(n-3)\n      cache[n] = f\n    end\n    return f\n  end\n  return fib(n)\n\
    end", "    assert(n >= 0)\n    if n == 0 then\n        return 0\n    elseif n\
    \ == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n    else\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", end, " \
    \   -- base cases\n    if n == 0 then return 0 end\n    if n == 1 then return\
    \ 0 end\n    if n == 2 then return 1 end", "  if n == 0 then\n    return 0\n \
    \ elseif n == 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "    if n ==\
    \ 0 then\n        return 0\n    elseif n == 1 then\n        return 0\n    elseif\
    \ n == 2 then\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend", "    local a, b, c = 0, 0, 1\n    while n > 0\
    \ do\n        a, b, c = b, c, a + b + c\n        n = n - 1\n    end\n    return\
    \ a\nend", "  if n <= 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n\
    \  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  if\
    \ n <= 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "    if n == 0 then\n\
    \        return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2\
    \ then\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n    end\nend", "  if n <= 2 then\n    return n-1\n  end\n  local\
    \ a, b, c = 0, 0, 1\n  for i = 3, n do\n    a, b, c = b, c, a+b+c\n  end\n  return\
    \ c\nend", "\tif n <= 1 then\n\t\treturn 0\n\telseif n == 2 then\n\t\treturn 1\n\
    \telse\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend", "   \
    \ local a, b, c = 0, 0, 1\n    for i = 1, n do\n        a, b, c = b, c, b + c\
    \ + a\n    end\n    return a\nend", end, "  if n == 0 then\n    return 0\n  elseif\
    \ n == 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  if n < 0 then return\
    \ nil end\n  if n == 0 then return 0 end\n  if n == 1 then return 0 end\n  if\
    \ n == 2 then return 1 end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "    local one = 0\n    local two = 0\n    local three = 1\n    local four\
    \ = 0\n    local i = 0\n    if n == 0 then\n        return 0\n    elseif n ==\
    \ 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n    else\n\
    \        while i < n - 2 do\n            four = one + two + three\n          \
    \  one = two\n            two = three\n            three = four\n            i\
    \ = i + 1\n        end\n        return four\n    end\nend", "    if n == 0 then\n\
    \        return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2\
    \ then\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n    end\nend", "  local a, b, c = 0, 0, 1\n  for i = 1, n - 1 do\n\
    \    a, b, c = b, c, c + b + a\n  end\n  return a\nend", "    local f = {0, 0,\
    \ 1}\n    for i = 3, n do\n        f[i % 3 + 1] = f[i % 3 + 1] + f[(i - 1) % 3\
    \ + 1] + f[(i - 2) % 3 + 1]\n    end\n    return f[n % 3 + 1]\nend", "  local\
    \ f0, f1, f2 = 0, 0, 1\n  for i = 1, n - 2 do\n    f0, f1, f2 = f1, f2, f0 + f1\
    \ + f2\n  end\n  return f2\nend", end, "\tif n < 3 then\n\t\treturn n - 1\n\t\
    end\n\t\n\tlocal m = 1\n\tlocal l = 0\n\tlocal k = 0\n\tlocal next = 0\n\t\n\t\
    while n > 2 do\n\t\tnext = m + l + k\n\t\tk = l\n\t\tl = m\n\t\tm = next\n\t\t\
    n = n - 1\n\tend\n\t\n\treturn next\nend", "    -- TODO: Implement\nend", "  if\
    \ n == 0 then\n    return 0\n  elseif n == 1 then\n    return 0\n  elseif n ==\
    \ 2 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", end, "    if n == 0 then\n        return 0\n    elseif n == 1 then\n\
    \        return 0\n    elseif n == 2 then\n        return 1\n    else\n      \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend", "  if n == 0\
    \ then\n    return 0\n  elseif n == 1 then\n    return 0\n  elseif n == 2 then\n\
    \    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\n\
    end", "    if (n < 0) then\n        error(\"fibfib(\" .. n .. \") : n must be\
    \ >= 0\")\n    end\n    local curr, prev, preprev = 0, 0, 0\n    for i = 1, n\
    \ do\n        curr, prev, preprev = prev + preprev, curr, prev\n    end\n    return\
    \ curr\nend", "\tlocal a, b, c = 0, 0, 1\n\tfor i = 1, n - 1 do\n\t\ta, b, c =\
    \ b, c, a + b + c\n\tend\n\treturn a\nend", "    assert(type(n) == \"number\"\
    \ and n >= 0 and n == math.floor(n), \"Invalid argument!\")\n    local t1, t2,\
    \ t3 = 0, 0, 1\n    for i = 3, n do\n        t1, t2, t3 = t2, t3, t1 + t2 + t3\n\
    \    end\n    return t3\nend", "  -- TODO: Put your code here\nend", "  -- TODO:\
    \ implement\nend", "  local prev, cur, next = 0, 0, 1\n  for i = 2, n do\n   \
    \ prev, cur, next = cur, next, next + cur + prev\n  end\n  return next\nend",
  "    local a, b, c = 0, 0, 1\n    for i = 2, n do\n        a, b, c = b, c, a + b\
    \ + c\n    end\n    return c\nend", "\tlocal t = {0, 0, 1}\n\tfor i = 3, n do\n\
    \t\tt[i] = t[i-1] + t[i-2] + t[i-3]\n\tend\n\treturn t[n]\nend", "  if n < 0 then\
    \ return nil end\n  if n < 2 then return 0 end\n  if n == 2 then return 1 end\n\
    \  local f0, f1, f2 = 0, 0, 1\n  for i = 3, n do\n    f0, f1, f2 = f1, f2, f0\
    \ + f1 + f2\n  end\n  return f2\nend", "    if n == 0 then\n        return 0\n\
    \    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n        return\
    \ 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\n\
    end", "    if n <= 2 then\n        return n - 1\n    end\n    local a, b, c =\
    \ 0, 0, 1\n    for i = 3, n do\n        a, b, c = b, c, a + b + c\n    end\n \
    \   return c\nend", "    local a, b, c = 0, 0, 1\n    if n == 0 then\n       \
    \ return a\n    elseif n == 1 then\n        return b\n    elseif n == 2 then\n\
    \        return c\n    else\n        for i = 3, n do\n            a, b, c = b,\
    \ c, a + b + c\n        end\n        return c\n    end\nend", "    if n == 0 then\n\
    \        return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2\
    \ then\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n    end\nend", "\tif (n == 0) then\n\t\treturn 0\n\telseif (n ==\
    \ 1) then\n\t\treturn 0\n\telseif (n == 2) then\n\t\treturn 1\n\telse\n\t\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend", "    if n < 3 then\n \
    \       return n - 1\n    end\n    local a, b, c = 0, 0, 1\n    for i = 3, n do\n\
    \        a, b, c = b, c, c + b + a\n    end\n    return c\nend", "  if n <= 2\
    \ then\n    return n-1\n  end\n  local a, b, c = 0, 0, 1\n  for i = 3, n do\n\
    \    a, b, c = b, c, a+b+c\n  end\n  return c\nend", "  if n == 0 then\n    return\
    \ 0\n  elseif n == 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n\
    \  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  \
    \  if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 0\n\
    \    elseif n == 2 then\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    -- TODO\nend", "\tlocal m =\
    \ 1\n\tlocal a, b, c = 0, 0, 1\n\twhile (m <= n) do\n\t\ta, b, c = b, c, c + b\
    \ + a\n\t\tm = m + 1\n\tend\n\treturn a\nend", "  -- TODO: implement\nend", " \
    \ if n <= 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  if n < 3 then\n\
    \    return 0\n  elseif n == 3 then\n    return 1\n  else\n    local a, b, c =\
    \ 0, 0, 1\n    for i = 4, n do\n      a, b, c = b, c, a + b + c\n    end\n   \
    \ return c\n  end\nend", "    local a, b, c = 0, 0, 1\n    for i = 3, n do\n \
    \       a, b, c = b, c, c + b + a\n    end\n    return c\nend", "  if n == 0 then\n\
    \    return 0\n  elseif n == 1 then\n    return 0\n  elseif n == 2 then\n    return\
    \ 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend",
  "  -- your code here\nend", "  local a = 0\n  local b = 0\n  local c = 1\n  for\
    \ i = 1, n do\n    local d = a + b + c\n    a = b\n    b = c\n    c = d\n  end\n\
    \  return a\nend", "\tif n == 0 then\n\t\treturn 0\n\telseif n == 1 then\n\t\t\
    return 0\n\telseif n == 2 then\n\t\treturn 1\n\telse\n\t\treturn fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n\tend\nend", "    if n == 0 then\n        return\
    \ 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n      \
    \  return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "  -- your code goes here\nend", "  -- ... TODO: implement this\
    \ function\nend", "  local prev1, prev2, prev3 = 0, 0, 1\n  if n == 0 then return\
    \ prev1 end\n  if n == 1 then return prev2 end\n  for i = 3, n do\n    prev1,\
    \ prev2, prev3 = prev2, prev3, prev1 + prev2 + prev3\n  end\n  return prev3\n\
    end", "    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return\
    \ 0\n    elseif n == 2 then\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "  assert(type(n) == \"number\"\
    , \"Parameter n is not a number.\")\n  assert(n == math.floor(n), \"Parameter\
    \ n is not an integer.\")\n  assert(n >= 0, \"Parameter n is not non-negative.\"\
    )\n  local fib = {0, 0, 1}\n  for i = 3, n do\n    fib[i+1] = fib[i] + fib[i-1]\
    \ + fib[i-2]\n  end\n  return fib[n+1]\nend", "    local f = {}\n    f[0] = 0\n\
    \    f[1] = 0\n    f[2] = 1\n    for i = 3, n do\n        f[i] = f[i-1] + f[i-2]\
    \ + f[i-3]\n    end\n    return f[n]\nend", "  -- Implement your solution here\n\
    end", "\tlocal a, b, c = 0, 0, 1\n\tfor i = 3, n do\n\t\ta, b, c = b, c, a + b\
    \ + c\n\tend\n\treturn c\nend", "  if n < 2 then\n    return n\n  end\n  local\
    \ n_3, n_2, n_1 = 0, 0, 1\n  for i = 3, n do\n    n_3, n_2, n_1 = n_2, n_1, n_2\
    \ + n_1 + n_3\n  end\n  return n_1\nend", "  local x, y, z = 0, 0, 1\n  while\
    \ n > 0 do\n    x, y, z = y, z, y + z + x\n    n = n - 1\n  end\n  return x\n\
    end", "    if n <= 1 then\n        return 0\n    elseif n == 2 then\n        return\
    \ 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\n\
    end", "  local memo = {}\n  local function fib(n)\n    if not memo[n] then\n \
    \     if n < 3 then\n        memo[n] = n - 1\n      else\n        memo[n] = fib(n\
    \ - 1) + fib(n - 2) + fib(n - 3)\n      end\n    end\n    return memo[n]\n  end\n\
    \  return fib(n)\nend", "  if n == 0 then\n    return 0\n  elseif n == 1 then\n\
    \    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  -- implement your solution\nend",
  "    local a, b, c = 0, 0, 1\n    if n == 0 then\n        return a\n    elseif n\
    \ == 1 then\n        return b\n    elseif n == 2 then\n        return c\n    else\n\
    \        local i = 3\n        while i <= n do\n            a, b, c = b, c, a +\
    \ b + c\n            i = i + 1\n        end\n        return c\n    end\nend",
  "  if n < 0 then\n    return nil\n  end\n  local a, b, c = 0, 0, 1\n  for i = 1,\
    \ n do\n    a, b, c = b, c, a + b + c\n  end\n  return a\nend", "  if n == 0 then\n\
    \    return 0\n  elseif n == 1 then\n    return 0\n  elseif n == 2 then\n    return\
    \ 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend",
  "\tlocal a, b, c = 0, 0, 1\n\tfor i = 2, n do\n\t\ta, b, c = b, c, a + b + c\n\t\
    end\n\treturn c\nend", "    return 0\nend", "    if n == 0 then\n        return\
    \ 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n      \
    \  return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend\nprint(fibfib(2))\nprint(fibfib(5))\nprint(fibfib(8))", "    local\
    \ a, b, c = 0, 0, 1\n    for i = 1, n - 1 do\n        a, b, c = b, c, c + b +\
    \ a\n    end\n    return a\nend", "  local memo = {}\n  local function _fibfib(n)\n\
    \    if n == 0 then return 0 end\n    if n == 1 then return 0 end\n    if n ==\
    \ 2 then return 1 end\n    if memo[n] then return memo[n] end\n    memo[n] = _fibfib(n-1)\
    \ + _fibfib(n-2) + _fibfib(n-3)\n    return memo[n]\n  end\n  return _fibfib(n)\n\
    end", "  local m = {0, 0, 1}\n  for i = 3, n do\n    m[i % 3 + 1] = m[(i - 1)\
    \ % 3 + 1] + m[(i - 2) % 3 + 1] + m[(i - 3) % 3 + 1]\n  end\n  return m[n % 3\
    \ + 1]\nend", "\tif n <= 1 then\n\t\treturn 0\n\telseif n == 2 then\n\t\treturn\
    \ 1\n\telse\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend",
  "    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 0\n\
    \    elseif n == 2 then\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend\nassert(fibfib(1) == 0)\nassert(fibfib(5)\
    \ == 4)\nassert(fibfib(8) == 24)", "    if n == 0 then\n        return 0\n   \
    \ elseif n == 1 then\n        return 0\n    elseif n == 2 then\n        return\
    \ 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\n\
    end", "    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return\
    \ 0\n    elseif n == 2 then\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "  if n <= 2 then\n    return n\
    \ - 1\n  end\n  local a, b, c = 0, 0, 1\n  for i = 2, n do\n    local d = a +\
    \ b + c\n    a, b, c = b, c, d\n  end\n  return c\nend", end, "\tif n == 0 then\n\
    \t\treturn 0\n\telseif n == 1 then\n\t\treturn 0\n\telseif n == 2 then\n\t\treturn\
    \ 1\n\telse\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend",
  "    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 0\n\
    \    elseif n == 2 then\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    if n == 0 then\n        return\
    \ 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n      \
    \  return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "  -- \nend", "\tlocal a, b, c = 0, 0, 1\n\tfor i = 3, n do\n\t\
    \ta, b, c = b, c, a + b + c\n\tend\n\treturn c\nend", "  if n < 3 then\n    return\
    \ n - 1\n  end\n  local a, b, c = 0, 0, 1\n  local ret = 0\n  while n > 2 do\n\
    \    ret = a + b + c\n    a, b, c = b, c, ret\n    n = n - 1\n  end\n  return\
    \ ret\nend", "    local cache = {\n        [0] = 0,\n        [1] = 0,\n      \
    \  [2] = 1,\n    }\n    local function fib(m)\n        local ret = cache[m]\n\
    \        if ret then\n            return ret\n        end\n        ret = fib(m-1)\
    \ + fib(m-2) + fib(m-3)\n        cache[m] = ret\n        return ret\n    end\n\
    \    return fib(n)\nend", "    -- This seems like a good place to use a recursive\
    \ function!\n    -- So, let's think about our base cases.\n    -- What are the\
    \ smallest numbers that satisfy the constraints?\n    -- We know that fibfib(0)\
    \ == 0, so that's a base case.\n    -- We also know that fibfib(1) == 0, so that's\
    \ a base case.\n    -- We know that fibfib(2) == 1, so that's our third base case.\n\
    \    -- Thus, we'll want to return 0 if n == 0, return 0 if n == 1, and return\
    \ 1 if n == 2.\n    if n == 0 then\n        return 0\n    elseif n == 1 then\n\
    \        return 0\n    elseif n == 2 then\n        return 1\n    -- Now, we have\
    \ our base cases, so we can start thinking about the recursive portion of our\
    \ function.\n    -- We know that fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3),\
    \ so let's rewrite that as part of our function.\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "    local a, b, c = 0, 0, 1\n \
    \   for i = 2, n do\n        c = a + b + c\n        a = b\n        b = c\n   \
    \ end\n    return c\nend", "  local a = 0\n  local b = 0\n  local c = 1\n  local\
    \ d = 0\n  for i = 1, n do\n    d = a + b + c\n    a = b\n    b = c\n    c = d\n\
    \  end\n  return d\nend", "    local mem = {0, 0, 1}\n    local function _fibfib(n)\n\
    \        if n < 0 then\n            return 0\n        elseif n == 0 then\n   \
    \         return mem[1]\n        elseif n == 1 then\n            return mem[2]\n\
    \        elseif n == 2 then\n            return mem[3]\n        else\n       \
    \     local a, b, c = unpack(mem)\n            local i = 3\n            while\
    \ i <= n do\n                mem[i%3+1] = a + b + c\n                a, b, c =\
    \ unpack(mem)\n                i = i + 1\n            end\n            return\
    \ mem[n%3+1]\n        end\n    end\n    return _fibfib(n)\nend", "    -- Your\
    \ solution goes here.\n    -- Use recursion.\n    if n == 0 then\n        return\
    \ 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n      \
    \  return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", "  -- One of the ways to solve this problem is to use the definition\
    \ of the Fibbonacci sequence (used to solve the\n  -- problem above) but with\
    \ a different starting point. If we start from a point where both fibfib(0) and\
    \ fibfib(1)\n  -- are equal to 0, we see that the formula can be written with\
    \ three variables. With this in mind we can use the\n  -- fib(n-1) sequence solution,\
    \ but use a starting point of three zeros.\n  local f0, f1, f2 = 0, 0, 1\n  local\
    \ i = 1\n  while i < n do\n    f0, f1, f2 = f1, f2, f1 + f2 + f0\n    i = i +\
    \ 1\n  end\n  return f2\nend", "  assert(n >= 0, \"n must be >= 0\")\n  return\
    \ (n == 0 and 0) or (n == 1 and 0) or (n == 2 and 1) or\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  if n < 0 then\n    return nil\n  end\n  local table\
    \ = {0, 0, 1}\n  if n < 3 then\n    return table[n]\n  end\n  for i = 3, n do\n\
    \    table[1], table[2], table[3] = table[2], table[3], table[1] + table[2] +\
    \ table[3]\n  end\n  return table[3]\nend", "    if n < 2 then\n        return\
    \ n\n    end\n    local a, b, c = 0, 0, 1\n    for i = 2, n do\n        a, b,\
    \ c = b, c, a + b + c\n    end\n    return c\nend", end, "  if n == 0 then\n \
    \   return 0\n  elseif n == 1 then\n    return 0\n  elseif n == 2 then\n    return\
    \ 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend",
  "    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 0\n\
    \    elseif n == 2 then\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend", "  local a, b, c = 0, 0, 1\n  for\
    \ i = 1, n do\n    a, b, c = b, c, a + b + c\n  end\n  return a\nend", end, " \
    \   if n < 3 then\n        return n - 1\n    end\n    local a, b, c = 0, 0, 1\n\
    \    for i = 3, n do\n        a, b, c = b, c, a + b + c\n    end\n    return c\n\
    end", "    if n <= 2 then\n        return n - 1\n    end\n    local f0, f1, f2\
    \ = 0, 0, 1\n    for i = 3, n do\n        f0, f1, f2 = f1, f2, f0 + f1 + f2\n\
    \    end\n    return f2\nend", "    -- your code here\nend", "  if n <= 1 then\n\
    \    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "\tif n == 0 then\n\t\treturn 0\n\t\
    elseif n == 1 then\n\t\treturn 0\n\telseif n == 2 then\n\t\treturn 1\n\telse\n\
    \t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend", "    if (n ==\
    \ 0) then\n        return 0\n    elseif (n == 1) then\n        return 0\n    elseif\
    \ (n == 2) then\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend", "\tif n == 0 then\n\t\treturn 0\n\telseif n ==\
    \ 1 then\n\t\treturn 0\n\telseif n == 2 then\n\t\treturn 1\n\telse\n\t\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend", "    local a, b, c = 0,\
    \ 0, 1\n    for i = 1, n do\n        a, b, c = b, c, a + b + c\n    end\n    return\
    \ a\nend", "    if n < 3 then\n        return n - 1\n    end\n    local v1, v2,\
    \ v3 = 0, 0, 1\n    for i = 3, n do\n        v1, v2, v3 = v2, v3, v1 + v2 + v3\n\
    \    end\n    return v3\nend", "\t-- FILL IN CODE HERE\n\treturn 0\nend", "  local\
    \ a, b, c = 0, 0, 1\n  if n == 0 then return a end\n  if n == 1 then return b\
    \ end\n  if n == 2 then return c end\n  for i = 3, n do\n    a, b, c = b, c, a\
    \ + b + c\n  end\n  return c\nend", "    local a = 0\n    local b = 0\n    local\
    \ c = 1\n    if n == 0 then\n        return a\n    elseif n == 1 then\n      \
    \  return b\n    elseif n == 2 then\n        return c\n    else\n        for i\
    \ = 1, n - 2 do\n            a = b\n            b = c\n            c = a + b +\
    \ c\n        end\n        return c\n    end\nend", "    local a, b, c = 0, 0,\
    \ 1\n    for i = 1, n do\n        a, b, c = b, c, a + b + c\n    end\n    return\
    \ a\nend", "    -- your code here\nend", "    -- Enter your code here.\nend",
  "    -- your code here\nend", "    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend",
  "    local a, b, c = 0, 0, 1\n    if n == 0 then\n        return a\n    elseif n\
    \ == 1 then\n        return b\n    elseif n == 2 then\n        return c\n    else\n\
    \        for i = 3, n do\n            a, b, c = b, c, a + b + c\n        end\n\
    \        return c\n    end\nend", "  local fib0, fib1, fib2 = 0, 0, 1\n  for i\
    \ = 3, n do\n    fib0, fib1, fib2 = fib1, fib2, fib0 + fib1 + fib2\n  end\n  return\
    \ fib2\nend", "  if n <= 2 then\n    return n - 1\n  end\n  local a, b, c = 0,\
    \ 0, 1\n  for i = 3, n do\n    a, b, c = b, c, a + b + c\n  end\n  return c\n\
    end", "\tlocal f_min1 = 0\n\tlocal f_min2 = 0\n\tlocal f_min3 = 1\n\tlocal f =\
    \ 0\n\tif n <= 0 then\n\t\treturn 0\n\telseif n == 1 then\n\t\treturn 0\n\telseif\
    \ n == 2 then\n\t\treturn 1\n\telse\n\t\tfor i = 3, n do\n\t\t\tf = f_min1 + f_min2\
    \ + f_min3\n\t\t\tf_min1 = f_min2\n\t\t\tf_min2 = f_min3\n\t\t\tf_min3 = f\n\t\
    \tend\n\t\treturn f\n\tend\nend", end, "    -- your code here\nend", "    if n\
    \ < 2 then\n        return n\n    end\n    local fn_3 = 0\n    local fn_2 = 0\n\
    \    local fn_1 = 1\n    local fn\n    for i = 3, n do\n        fn = fn_1 + fn_2\
    \ + fn_3\n        fn_3 = fn_2\n        fn_2 = fn_1\n        fn_1 = fn\n    end\n\
    \    return fn\nend", "    local a = 0\n    local b = 0\n    local c = 1\n   \
    \ local d = 0\n    for i = 1, n-1 do\n        d = a + b + c\n        a = b\n \
    \       b = c\n        c = d\n    end\n    return d\nend", "    return 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
