name: HumanEval_81_numerical_letter_grade
language: lua
results:
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal grades_letter\
    \ = {}\n\tfor i, grade in ipairs(grades) do\n\t\tif grade >= 4.0 then\n\t\t\t\
    grades_letter[i] = 'A+'\n\t\telseif grade >= 3.7 then\n\t\t\tgrades_letter[i]\
    \ = 'A'\n\t\telseif grade >= 3.3 then\n\t\t\tgrades_letter[i] = 'A-'\n\t\telseif\
    \ grade >= 3.0 then\n\t\t\tgrades_letter[i] = 'B+'\n\t\telseif grade >= 2.7 then\n\
    \t\t\tgrades_letter[i] = 'B'\n\t\telseif grade >= 2.3 then\n\t\t\tgrades_letter[i]\
    \ = 'B-'\n\t\telseif grade >= 2.0 then\n\t\t\tgrades_letter[i] = 'C+'\n\t\telseif\
    \ grade >= 1.7 then\n\t\t\tgrades_letter[i] = 'C'\n\t\telseif grade >= 1.3 then\n\
    \t\t\tgrades_letter[i] = 'C-'\n\t\telseif grade >= 1.0 then\n\t\t\tgrades_letter[i]\
    \ = 'D+'\n\t\telseif grade >= 0.7 then\n\t\t\tgrades_letter[i] = 'D'\n\t\telseif\
    \ grade >= 0.0 then\n\t\t\tgrades_letter[i] = 'D-'\n\t\telseif grade >= 0.0 then\n\
    \t\t\tgrades_letter[i] = 'E'\n\t\tend\n\tend\n\treturn grades_letter\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8n39tbuo.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp8n39tbuo.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letterGrades\
    \ = {'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'}\n\
    \  local numberGrades = {4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7,\
    \ 0.0, 0.0}\n  local grades_number = {}\n  local grades_letter = {}\n  for i =\
    \ 1, #grades do\n    local isGradeNumber = false\n    for j = 1, #numberGrades\
    \ do\n      if grades[i] >= numberGrades[j] then\n        table.insert(grades_number,\
    \ numberGrades[j])\n        isGradeNumber = true\n        break\n      end\n \
    \   end\n    if not isGradeNumber then\n      table.insert(grades_number, 0.0)\n\
    \    end\n  end\n  for i = 1, #grades_number do\n    table.insert(grades_letter,\
    \ letterGrades[i])\n  end\n  return grades_letter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz2fyr07.lua:49:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"A\", \"\
    A-\", \"B+\", \"B\"}\nstack traceback:\n\t/tmp/tmptz2fyr07.lua:49: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_letters\
    \ = {}\n    local grades_numerical = {}\n    for i = 1,#grades do\n        if\
    \ grades[i] >= 4.0 then\n            grades_letters[i] = 'A+'\n        elseif\
    \ grades[i] >= 3.7 then\n            grades_letters[i] = 'A'\n        elseif grades[i]\
    \ >= 3.3 then\n            grades_letters[i] = 'A-'\n        elseif grades[i]\
    \ >= 3.0 then\n            grades_letters[i] = 'B+'\n        elseif grades[i]\
    \ >= 2.7 then\n            grades_letters[i] = 'B'\n        elseif grades[i] >=\
    \ 2.3 then\n            grades_letters[i] = 'B-'\n        elseif grades[i] >=\
    \ 2.0 then\n            grades_letters[i] = 'C+'\n        elseif grades[i] >=\
    \ 1.7 then\n            grades_letters[i] = 'C'\n        elseif grades[i] >= 1.3\
    \ then\n            grades_letters[i] = 'C-'\n        elseif grades[i] >= 1.0\
    \ then\n            grades_letters[i] = 'D+'\n        elseif grades[i] >= 0.7\
    \ then\n            grades_letters[i] = 'D'\n        elseif grades[i] >= 0.0 then\n\
    \            grades_letters[i] = 'D-'\n        else\n            grades_letters[i]\
    \ = 'E'\n        end\n    end\n    return grades_letters\nend\nprint(numerical_letter_grade({4.0,\
    \ 3, 1.7, 2, 3.5}))\nprint(numerical_letter_grade({4.0, 3.9, 3.7, 3.3, 3.1, 3.0,\
    \ 2.7, 2.3, 2.1, 2.0, 1.7, 1.3, 1.1, 1.0, 0.7, 0.3, 0.1, 0.0, -1}))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "table: 0x22b1190\ntable: 0x22b1e70\nF\nFailed tests:\n-------------\n1)\
    \ test_humaneval\n/tmp/tmpagj5w658.lua:62: expected: {\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"C\", \"C+\", \"A-\"}\nstack traceback:\n\
    \t/tmp/tmpagj5w658.lua:62: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal numerical_letter_grade\
    \ = {}\n\t\n\tfor i = 1, #grades do\n\t\tlocal grade = grades[i]\n\t\tif (grade\
    \ >= 4.0) then\n\t\t\tnumerical_letter_grade[i] = 'A+'\n\t\telseif (grade >= 3.7)\
    \ then\n\t\t\tnumerical_letter_grade[i] = 'A'\n\t\telseif (grade >= 3.3) then\n\
    \t\t\tnumerical_letter_grade[i] = 'A-'\n\t\telseif (grade >= 3.0) then\n\t\t\t\
    numerical_letter_grade[i] = 'B+'\n\t\telseif (grade >= 2.7) then\n\t\t\tnumerical_letter_grade[i]\
    \ = 'B'\n\t\telseif (grade >= 2.3) then\n\t\t\tnumerical_letter_grade[i] = 'B-'\n\
    \t\telseif (grade >= 2.0) then\n\t\t\tnumerical_letter_grade[i] = 'C+'\n\t\telseif\
    \ (grade >= 1.7) then\n\t\t\tnumerical_letter_grade[i] = 'C'\n\t\telseif (grade\
    \ >= 1.3) then\n\t\t\tnumerical_letter_grade[i] = 'C-'\n\t\telseif (grade >= 1.0)\
    \ then\n\t\t\tnumerical_letter_grade[i] = 'D+'\n\t\telseif (grade >= 0.7) then\n\
    \t\t\tnumerical_letter_grade[i] = 'D'\n\t\telseif (grade >= 0.0) then\n\t\t\t\
    numerical_letter_grade[i] = 'D-'\n\t\telse\n\t\t\tnumerical_letter_grade[i] =\
    \ 'E'\n\t\tend\n\tend\n\t\n\treturn numerical_letter_grade\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9sv9wrfn.lua:62:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp9sv9wrfn.lua:62: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grade_letters\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade == 4.0 then\n\
    \            table.insert(grade_letters, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(grade_letters, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(grade_letters, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(grade_letters, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(grade_letters, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(grade_letters, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(grade_letters, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(grade_letters, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(grade_letters, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(grade_letters, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(grade_letters, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(grade_letters, 'D-')\n        else\n            table.insert(grade_letters,\
    \ 'E')\n        end\n    end\n    return grade_letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvjc02sp.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpmvjc02sp.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    return {'A+',\
    \ 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo5vnmms.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"A\", \"\
    A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"\
    E\"}\nstack traceback:\n\t/tmp/tmpbo5vnmms.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_from_table\
    \ = {'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'}\n\
    \    local grades_table = {4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7,\
    \ 0.0, 0.0}\n    local final_grades = {}\n    for k,v in pairs(grades) do\n  \
    \      for x,y in pairs(grades_table) do\n            if v >= y then\n       \
    \         table.insert(final_grades, grades_from_table[x])\n                break\n\
    \            end\n        end\n    end\n    return final_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_q5e88k.lua:40:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpo_q5e88k.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, gpa in ipairs(grades) do\n        if gpa == 4.0 then\n    \
    \        table.insert(letter_grades, 'A+')\n        elseif gpa > 3.7 then\n  \
    \          table.insert(letter_grades, 'A')\n        elseif gpa > 3.3 then\n \
    \           table.insert(letter_grades, 'A-')\n        elseif gpa > 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif gpa > 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif gpa > 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif gpa > 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif gpa > 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif gpa > 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif gpa > 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif gpa > 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif gpa >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepu4901c.lua:62:\
    \ expected: {\"E\"}\nactual: {\"D-\"}\nstack traceback:\n\t/tmp/tmpepu4901c.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    return grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14p1nc46.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4, 3, 1.7, 2, 3.5}\n\
    stack traceback:\n\t/tmp/tmp14p1nc46.lua:29: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  -- Write your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkch_h249.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpkch_h249.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local ret = {}\n\
    \    local grades_letter = {\n        [4.0] = 'A+',\n        [3.7] = 'A',\n  \
    \      [3.3] = 'A-',\n        [3.0] = 'B+',\n        [2.7] = 'B',\n        [2.3]\
    \ = 'B-',\n        [2.0] = 'C+',\n        [1.7] = 'C',\n        [1.3] = 'C-',\n\
    \        [1.0] = 'D+',\n        [0.7] = 'D',\n        [0.0] = 'D-',\n        [nil]\
    \ = 'E'\n    }\n    for _, val in ipairs(grades) do\n        if grades_letter[val]\
    \ then\n            table.insert(ret, grades_letter[val])\n        else\n    \
    \        for k, _ in pairs(grades_letter) do\n                if val >= k then\n\
    \                    table.insert(ret, grades_letter[k])\n                   \
    \ break\n                end\n            end\n        end\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7xhhjihd.lua:37:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmp7xhhjihd.lua:37: in local 'candidate'\n\
    \t/tmp/tmp7xhhjihd.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for index, value in ipairs(grades) do\n        if value > 4.0 then\n\
    \            letter_grades[index] = 'A+'\n        elseif value > 3.7 then\n  \
    \          letter_grades[index] = 'A'\n        elseif value > 3.3 then\n     \
    \       letter_grades[index] = 'A-'\n        elseif value > 3.0 then\n       \
    \     letter_grades[index] = 'B+'\n        elseif value > 2.7 then\n         \
    \   letter_grades[index] = 'B'\n        elseif value > 2.3 then\n            letter_grades[index]\
    \ = 'B-'\n        elseif value > 2.0 then\n            letter_grades[index] =\
    \ 'C+'\n        elseif value > 1.7 then\n            letter_grades[index] = 'C'\n\
    \        elseif value > 1.3 then\n            letter_grades[index] = 'C-'\n  \
    \      elseif value > 1.0 then\n            letter_grades[index] = 'D+'\n    \
    \    elseif value > 0.7 then\n            letter_grades[index] = 'D'\n       \
    \ elseif value > 0.0 then\n            letter_grades[index] = 'D-'\n        else\n\
    \            letter_grades[index] = 'E'\n        end\n    end\n    return letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnwyjlfax.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmpnwyjlfax.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_equation\
    \ = {}\n  for i = 1, #grades do\n    if grades[i] >= 4.0 then\n      grades_equation[i]\
    \ = 'A+'\n    elseif grades[i] >= 3.7 then\n      grades_equation[i] = 'A'\n \
    \   elseif grades[i] >= 3.3 then\n      grades_equation[i] = 'A-'\n    elseif\
    \ grades[i] >= 3.0 then\n      grades_equation[i] = 'B+'\n    elseif grades[i]\
    \ >= 2.7 then\n      grades_equation[i] = 'B'\n    elseif grades[i] >= 2.3 then\n\
    \      grades_equation[i] = 'B-'\n    elseif grades[i] >= 2.0 then\n      grades_equation[i]\
    \ = 'C+'\n    elseif grades[i] >= 1.7 then\n      grades_equation[i] = 'C'\n \
    \   elseif grades[i] >= 1.3 then\n      grades_equation[i] = 'C-'\n    elseif\
    \ grades[i] >= 1.0 then\n      grades_equation[i] = 'D+'\n    elseif grades[i]\
    \ >= 0.7 then\n      grades_equation[i] = 'D'\n    elseif grades[i] >= 0.0 then\n\
    \      grades_equation[i] = 'D-'\n    else\n      grades_equation[i] = 'E'\n \
    \   end\n  end\n  return grades_equation\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevvhgj61.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpevvhgj61.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  return map(grades,\
    \ function(grade)\n    if grade >= 4.0 then return 'A+'\n    elseif grade >= 3.7\
    \ then return 'A'\n    elseif grade >= 3.3 then return 'A-'\n    elseif grade\
    \ >= 3.0 then return 'B+'\n    elseif grade >= 2.7 then return 'B'\n    elseif\
    \ grade >= 2.3 then return 'B-'\n    elseif grade >= 2.0 then return 'C+'\n  \
    \  elseif grade >= 1.7 then return 'C'\n    elseif grade >= 1.3 then return 'C-'\n\
    \    elseif grade >= 1.0 then return 'D+'\n    elseif grade >= 0.7 then return\
    \ 'D'\n    elseif grade >= 0.0 then return 'D-'\n    else return 'E' end\n  end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp12uvyyn6.lua:23:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp12uvyyn6.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp12uvyyn6.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local r = {}\n\
    \  for _, g in ipairs(grades) do\n    local grade\n    if g >= 4.0 then\n    \
    \  grade = 'A+'\n    elseif g >= 3.7 then\n      grade = 'A'\n    elseif g >=\
    \ 3.3 then\n      grade = 'A-'\n    elseif g >= 3.0 then\n      grade = 'B+'\n\
    \    elseif g >= 2.7 then\n      grade = 'B'\n    elseif g >= 2.3 then\n     \
    \ grade = 'B-'\n    elseif g >= 2.0 then\n      grade = 'C+'\n    elseif g >=\
    \ 1.7 then\n      grade = 'C'\n    elseif g >= 1.3 then\n      grade = 'C-'\n\
    \    elseif g >= 1.0 then\n      grade = 'D+'\n    elseif g >= 0.7 then\n    \
    \  grade = 'D'\n    elseif g >= 0.0 then\n      grade = 'D-'\n    else\n     \
    \ grade = 'E'\n    end\n    table.insert(r, grade)\n  end\n  return r\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jhzgz09.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp8jhzgz09.lua:61: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal function\
    \ grade(x)\n\t\tif     x > 3.7 then return 'A'\n\t\telseif x > 3.3 then return\
    \ 'A-'\n\t\telseif x > 3.0 then return 'B+'\n\t\telseif x > 2.7 then return 'B'\n\
    \t\telseif x > 2.3 then return 'B-'\n\t\telseif x > 2.0 then return 'C+'\n\t\t\
    elseif x > 1.7 then return 'C'\n\t\telseif x > 1.3 then return 'C-'\n\t\telseif\
    \ x > 1.0 then return 'D+'\n\t\telseif x > 0.7 then return 'D'\n\t\telseif x >\
    \ 0.0 then return 'D-'\n\t\telse                return 'E'\n\t\tend\n\tend\n\t\
    local function letter_grade(x)\n\t\tlocal g = grade(x)\n\t\tif     g == 'A' then\
    \ return 'A+'\n\t\telseif g == 'E' then return 'E'\n\t\telse                return\
    \ g\n\t\tend\n\tend\n\treturn map(letter_grade, grades)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppfeipd73.lua:45:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmppfeipd73.lua:45:\
    \ in local 'candidate'\n\t/tmp/tmppfeipd73.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_letter\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        if\
    \ grade > 4.0 then\n            table.insert(grades_letter, 'A+')\n        elseif\
    \ grade > 3.7 then\n            table.insert(grades_letter, 'A')\n        elseif\
    \ grade > 3.3 then\n            table.insert(grades_letter, 'A-')\n        elseif\
    \ grade > 3.0 then\n            table.insert(grades_letter, 'B+')\n        elseif\
    \ grade > 2.7 then\n            table.insert(grades_letter, 'B')\n        elseif\
    \ grade > 2.3 then\n            table.insert(grades_letter, 'B-')\n        elseif\
    \ grade > 2.0 then\n            table.insert(grades_letter, 'C+')\n        elseif\
    \ grade > 1.7 then\n            table.insert(grades_letter, 'C')\n        elseif\
    \ grade > 1.3 then\n            table.insert(grades_letter, 'C-')\n        elseif\
    \ grade > 1.0 then\n            table.insert(grades_letter, 'D+')\n        elseif\
    \ grade > 0.7 then\n            table.insert(grades_letter, 'D')\n        elseif\
    \ grade > 0.0 then\n            table.insert(grades_letter, 'D-')\n        else\n\
    \            table.insert(grades_letter, 'E')\n        end\n    end\n    return\
    \ grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps11005nt.lua:60:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmps11005nt.lua:60: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local lg={\n  \
    \  [4.0]='A+',\n    [3.7]='A',\n    [3.3]='A-',\n    [3.0]='B+',\n    [2.7]='B',\n\
    \    [2.3]='B-',\n    [2.0]='C+',\n    [1.7]='C',\n    [1.3]='C-',\n    [1.0]='D+',\n\
    \    [0.7]='D',\n    [0.0]='D-',\n    [-1.0]='E'\n  }\n  local ret={}\n  for i,\
    \ v in ipairs(grades) do\n    local v=math.floor(10*v+0.5)/10\n    if v > 4.0\
    \ then\n      table.insert(ret, 'A+')\n    elseif v > 3.7 then\n      table.insert(ret,\
    \ 'A')\n    elseif v > 3.3 then\n      table.insert(ret, 'A-')\n    elseif v >\
    \ 3.0 then\n      table.insert(ret, 'B+')\n    elseif v > 2.7 then\n      table.insert(ret,\
    \ 'B')\n    elseif v > 2.3 then\n      table.insert(ret, 'B-')\n    elseif v >\
    \ 2.0 then\n      table.insert(ret, 'C+')\n    elseif v > 1.7 then\n      table.insert(ret,\
    \ 'C')\n    elseif v > 1.3 then\n      table.insert(ret, 'C-')\n    elseif v >\
    \ 1.0 then\n      table.insert(ret, 'D+')\n    elseif v > 0.7 then\n      table.insert(ret,\
    \ 'D')\n    elseif v > 0.0 then\n      table.insert(ret, 'D-')\n    else\n   \
    \   table.insert(ret, 'E')\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoaxu7bcm.lua:75:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmpoaxu7bcm.lua:75: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    -- Code goes\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdo92kvod.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpdo92kvod.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    -- Get code\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2xtpji1.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpp2xtpji1.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local numerical_table = {}\n  for i = 1, #grades do\n    if tonumber(grades[i])\
    \ >= 4.0 then\n      grades_table[i] = 'A+'\n    elseif tonumber(grades[i]) >\
    \ 3.7 then\n      grades_table[i] = 'A'\n    elseif tonumber(grades[i]) > 3.3\
    \ then\n      grades_table[i] = 'A-'\n    elseif tonumber(grades[i]) > 3.0 then\n\
    \      grades_table[i] = 'B+'\n    elseif tonumber(grades[i]) > 2.7 then\n   \
    \   grades_table[i] = 'B'\n    elseif tonumber(grades[i]) > 2.3 then\n      grades_table[i]\
    \ = 'B-'\n    elseif tonumber(grades[i]) > 2.0 then\n      grades_table[i] = 'C+'\n\
    \    elseif tonumber(grades[i]) > 1.7 then\n      grades_table[i] = 'C'\n    elseif\
    \ tonumber(grades[i]) > 1.3 then\n      grades_table[i] = 'C-'\n    elseif tonumber(grades[i])\
    \ > 1.0 then\n      grades_table[i] = 'D+'\n    elseif tonumber(grades[i]) > 0.7\
    \ then\n      grades_table[i] = 'D'\n    elseif tonumber(grades[i]) > 0.0 then\n\
    \      grades_table[i] = 'D-'\n    elseif tonumber(grades[i]) == 0.0 then\n  \
    \    grades_table[i] = 'E'\n    end\n  end\n  return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_letter\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade == 4.0 then\n\
    \            table.insert(grades_letter, 'A+')\n        elseif grade > 3.7 then\n\
    \            table.insert(grades_letter, 'A')\n        elseif grade > 3.3 then\n\
    \            table.insert(grades_letter, 'A-')\n        elseif grade > 3.0 then\n\
    \            table.insert(grades_letter, 'B+')\n        elseif grade > 2.7 then\n\
    \            table.insert(grades_letter, 'B')\n        elseif grade > 2.3 then\n\
    \            table.insert(grades_letter, 'B-')\n        elseif grade > 2.0 then\n\
    \            table.insert(grades_letter, 'C+')\n        elseif grade > 1.7 then\n\
    \            table.insert(grades_letter, 'C')\n        elseif grade > 1.3 then\n\
    \            table.insert(grades_letter, 'C-')\n        elseif grade > 1.0 then\n\
    \            table.insert(grades_letter, 'D+')\n        elseif grade > 0.7 then\n\
    \            table.insert(grades_letter, 'D')\n        elseif grade > 0.0 then\n\
    \            table.insert(grades_letter, 'D-')\n        elseif grade == 0.0 then\n\
    \            table.insert(grades_letter, 'E')\n        end\n    end\n    return\
    \ grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_dict\
    \ = {}\n    for _, v in ipairs(grades) do\n        if v >= 4.0 then\n        \
    \    grades_dict[v] = 'A+'\n        elseif v >= 3.7 then\n            grades_dict[v]\
    \ = 'A'\n        elseif v >= 3.3 then\n            grades_dict[v] = 'A-'\n   \
    \     elseif v >= 3.0 then\n            grades_dict[v] = 'B+'\n        elseif\
    \ v >= 2.7 then\n            grades_dict[v] = 'B'\n        elseif v >= 2.3 then\n\
    \            grades_dict[v] = 'B-'\n        elseif v >= 2.0 then\n           \
    \ grades_dict[v] = 'C+'\n        elseif v >= 1.7 then\n            grades_dict[v]\
    \ = 'C'\n        elseif v >= 1.3 then\n            grades_dict[v] = 'C-'\n   \
    \     elseif v >= 1.0 then\n            grades_dict[v] = 'D+'\n        elseif\
    \ v >= 0.7 then\n            grades_dict[v] = 'D'\n        elseif v >= 0.0 then\n\
    \            grades_dict[v] = 'D-'\n        else\n            grades_dict[v] =\
    \ 'E'\n        end\n    end\n    return grades_dict\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu95s4a8b.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {1.7=\"C\", 2=\"C+\"\
    , 3=\"B+\", 3.5=\"A-\", 4=\"A+\"}\nstack traceback:\n\t/tmp/tmpu95s4a8b.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for index, value in ipairs(grades) do\n    if value >= 4.0 then\n  \
    \    letter_grades[index] = 'A+'\n    elseif value >= 3.7 then\n      letter_grades[index]\
    \ = 'A'\n    elseif value >= 3.3 then\n      letter_grades[index] = 'A-'\n   \
    \ elseif value >= 3.0 then\n      letter_grades[index] = 'B+'\n    elseif value\
    \ >= 2.7 then\n      letter_grades[index] = 'B'\n    elseif value >= 2.3 then\n\
    \      letter_grades[index] = 'B-'\n    elseif value >= 2.0 then\n      letter_grades[index]\
    \ = 'C+'\n    elseif value >= 1.7 then\n      letter_grades[index] = 'C'\n   \
    \ elseif value >= 1.3 then\n      letter_grades[index] = 'C-'\n    elseif value\
    \ >= 1.0 then\n      letter_grades[index] = 'D+'\n    elseif value >= 0.7 then\n\
    \      letter_grades[index] = 'D'\n    elseif value >= 0.0 then\n      letter_grades[index]\
    \ = 'D-'\n    elseif value == 0.0 then\n      letter_grades[index] = 'E'\n   \
    \ end\n  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5xd_jpo.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpp5xd_jpo.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local result =\
    \ {}\n  for i, grade in ipairs(grades) do\n    local letter = 'E'\n    if grade\
    \ >= 4.0 then letter = 'A+'\n    elseif grade >= 3.7 then letter = 'A'\n    elseif\
    \ grade >= 3.3 then letter = 'A-'\n    elseif grade >= 3.0 then letter = 'B+'\n\
    \    elseif grade >= 2.7 then letter = 'B'\n    elseif grade >= 2.3 then letter\
    \ = 'B-'\n    elseif grade >= 2.0 then letter = 'C+'\n    elseif grade >= 1.7\
    \ then letter = 'C'\n    elseif grade >= 1.3 then letter = 'C-'\n    elseif grade\
    \ >= 1.0 then letter = 'D+'\n    elseif grade >= 0.7 then letter = 'D'\n    elseif\
    \ grade >= 0.0 then letter = 'D-'\n    end\n    table.insert(result, letter)\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjncvkqpc.lua:47:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpjncvkqpc.lua:47: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grade_table\
    \ = {'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'}\n\
    \    local grade_nums = {4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7,\
    \ 0.0, 0.0}\n    local result = {}\n    for i, v in ipairs(grades) do\n      \
    \  local index = 1\n        for g, n in ipairs(grade_nums) do\n            if\
    \ v > n then\n                index = g\n                break\n            end\n\
    \        end\n        table.insert(result, grade_table[index])\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1d55cz4.lua:42:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmpv1d55cz4.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade == 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade > 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade > 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade > 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade > 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade > 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade > 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade > 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade > 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade > 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade > 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade > 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        elseif grade == 0.0 then\n\
    \            table.insert(letter_grades, 'E')\n        end\n    end\n    return\
    \ letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  return grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavl0v0y6.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4, 3, 1.7, 2, 3.5}\n\
    stack traceback:\n\t/tmp/tmpavl0v0y6.lua:29: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5xktpqv.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpd5xktpqv.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local new_grades\
    \ = {}\n    for k, v in pairs(grades) do\n        if v > 4.0 then\n          \
    \  table.insert(new_grades, 'A+')\n        elseif v > 3.7 then\n            table.insert(new_grades,\
    \ 'A')\n        elseif v > 3.3 then\n            table.insert(new_grades, 'A-')\n\
    \        elseif v > 3.0 then\n            table.insert(new_grades, 'B+')\n   \
    \     elseif v > 2.7 then\n            table.insert(new_grades, 'B')\n       \
    \ elseif v > 2.3 then\n            table.insert(new_grades, 'B-')\n        elseif\
    \ v > 2.0 then\n            table.insert(new_grades, 'C+')\n        elseif v >\
    \ 1.7 then\n            table.insert(new_grades, 'C')\n        elseif v > 1.3\
    \ then\n            table.insert(new_grades, 'C-')\n        elseif v > 1.0 then\n\
    \            table.insert(new_grades, 'D+')\n        elseif v > 0.7 then\n   \
    \         table.insert(new_grades, 'D')\n        elseif v > 0.0 then\n       \
    \     table.insert(new_grades, 'D-')\n        else\n            table.insert(new_grades,\
    \ 'E')\n        end\n    end\n    return new_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqx0nw73.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmptqx0nw73.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfjf93fxp.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpfjf93fxp.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_letter\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(grades_letter, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(grades_letter, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(grades_letter, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(grades_letter, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(grades_letter, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(grades_letter, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(grades_letter, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(grades_letter, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(grades_letter, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(grades_letter, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(grades_letter, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(grades_letter, 'D-')\n        else\n            table.insert(grades_letter,\
    \ 'E')\n        end\n    end\n    return grades_letter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1tpfm3n.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpk1tpfm3n.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local result\
    \ = {}\n    for _,grade in ipairs(grades) do\n        if grade == 4.0 then\n \
    \           table.insert(result, 'A+')\n        elseif grade > 3.7 then\n    \
    \        table.insert(result, 'A')\n        elseif grade > 3.3 then\n        \
    \    table.insert(result, 'A-')\n        elseif grade > 3.0 then\n           \
    \ table.insert(result, 'B+')\n        elseif grade > 2.7 then\n            table.insert(result,\
    \ 'B')\n        elseif grade > 2.3 then\n            table.insert(result, 'B-')\n\
    \        elseif grade > 2.0 then\n            table.insert(result, 'C+')\n   \
    \     elseif grade > 1.7 then\n            table.insert(result, 'C')\n       \
    \ elseif grade > 1.3 then\n            table.insert(result, 'C-')\n        elseif\
    \ grade > 1.0 then\n            table.insert(result, 'D+')\n        elseif grade\
    \ > 0.7 then\n            table.insert(result, 'D')\n        elseif grade > 0.0\
    \ then\n            table.insert(result, 'D-')\n        else\n            table.insert(result,\
    \ 'E')\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letters =\
    \ {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      letters[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      letters[i] = 'A'\n    elseif grade\
    \ >= 3.3 then\n      letters[i] = 'A-'\n    elseif grade >= 3.0 then\n      letters[i]\
    \ = 'B+'\n    elseif grade >= 2.7 then\n      letters[i] = 'B'\n    elseif grade\
    \ >= 2.3 then\n      letters[i] = 'B-'\n    elseif grade >= 2.0 then\n      letters[i]\
    \ = 'C+'\n    elseif grade >= 1.7 then\n      letters[i] = 'C'\n    elseif grade\
    \ >= 1.3 then\n      letters[i] = 'C-'\n    elseif grade >= 1.0 then\n      letters[i]\
    \ = 'D+'\n    elseif grade >= 0.7 then\n      letters[i] = 'D'\n    elseif grade\
    \ >= 0.0 then\n      letters[i] = 'D-'\n    else\n      letters[i] = 'E'\n   \
    \ end\n  end\n  return letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2e7szvw4.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp2e7szvw4.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    for i,j in ipairs(grades)\
    \ do\n        if j>=4.0 then\n            grades[i] = 'A+'\n        elseif j>=3.7\
    \ then\n            grades[i] = 'A'\n        elseif j>=3.3 then\n            grades[i]\
    \ = 'A-'\n        elseif j>=3.0 then\n            grades[i] = 'B+'\n        elseif\
    \ j>=2.7 then\n            grades[i] = 'B'\n        elseif j>=2.3 then\n     \
    \       grades[i] = 'B-'\n        elseif j>=2.0 then\n            grades[i] =\
    \ 'C+'\n        elseif j>=1.7 then\n            grades[i] = 'C'\n        elseif\
    \ j>=1.3 then\n            grades[i] = 'C-'\n        elseif j>=1.0 then\n    \
    \        grades[i] = 'D+'\n        elseif j>=0.7 then\n            grades[i] =\
    \ 'D'\n        elseif j>=0.0 then\n            grades[i] = 'D-'\n        elseif\
    \ j==0.0 then\n            grades[i] = 'E'\n        end\n    end\n    return grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz7sb_leu.lua:58:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpz7sb_leu.lua:58: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for k, v in pairs(grades) do\n        if v >= 4.0 then\n         \
    \   table.insert(letter_grades, 'A+')\n        elseif v >= 3.7 then\n        \
    \    table.insert(letter_grades, 'A')\n        elseif v >= 3.3 then\n        \
    \    table.insert(letter_grades, 'A-')\n        elseif v >= 3.0 then\n       \
    \     table.insert(letter_grades, 'B+')\n        elseif v >= 2.7 then\n      \
    \      table.insert(letter_grades, 'B')\n        elseif v >= 2.3 then\n      \
    \      table.insert(letter_grades, 'B-')\n        elseif v >= 2.0 then\n     \
    \       table.insert(letter_grades, 'C+')\n        elseif v >= 1.7 then\n    \
    \        table.insert(letter_grades, 'C')\n        elseif v >= 1.3 then\n    \
    \        table.insert(letter_grades, 'C-')\n        elseif v >= 1.0 then\n   \
    \         table.insert(letter_grades, 'D+')\n        elseif v >= 0.7 then\n  \
    \          table.insert(letter_grades, 'D')\n        elseif v >= 0.0 then\n  \
    \          table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5g1nt79v.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp5g1nt79v.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _,value in ipairs(grades) do\n        if value >= 4.0 then\n \
    \           table.insert(letter_grades, 'A+')\n        elseif value >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif value >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif value >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif value >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif value >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif value >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif value >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif value >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif value >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif value >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif value >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nprint('Given grades\
    \ -> Expected output -> Your output')\nprint('=============================================')\n\
    print(print_table({3.3, 1.0, 0.7, 4.0, 1.7, 3.0, 1.3, 2.0, 2.7, 0.0}), print_table(numerical_letter_grade({3.3,\
    \ 1.0, 0.7, 4.0, 1.7, 3.0, 1.3, 2.0, 2.7, 0.0})))\nprint(print_table({4.0, 4.0,\
    \ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0}), print_table(numerical_letter\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn0s7qlcp.lua:59: ')' expected (to close '(' at line 58) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local result\
    \ = {}\n    for i, v in ipairs(grades) do\n        if v == 4.0 then\n        \
    \    table.insert(result, 'A+')\n        elseif v > 3.7 then\n            table.insert(result,\
    \ 'A')\n        elseif v > 3.3 then\n            table.insert(result, 'A-')\n\
    \        elseif v > 3.0 then\n            table.insert(result, 'B+')\n       \
    \ elseif v > 2.7 then\n            table.insert(result, 'B')\n        elseif v\
    \ > 2.3 then\n            table.insert(result, 'B-')\n        elseif v > 2.0 then\n\
    \            table.insert(result, 'C+')\n        elseif v > 1.7 then\n       \
    \     table.insert(result, 'C')\n        elseif v > 1.3 then\n            table.insert(result,\
    \ 'C-')\n        elseif v > 1.0 then\n            table.insert(result, 'D+')\n\
    \        elseif v > 0.7 then\n            table.insert(result, 'D')\n        elseif\
    \ v > 0.0 then\n            table.insert(result, 'D-')\n        else\n       \
    \     table.insert(result, 'E')\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local answer\
    \ = {}\n    for key, grade in pairs(grades) do\n        if grade > 4.0 then\n\
    \            table.insert(answer, 'A+')\n        elseif grade > 3.7 then\n   \
    \         table.insert(answer, 'A')\n        elseif grade > 3.3 then\n       \
    \     table.insert(answer, 'A-')\n        elseif grade > 3.0 then\n          \
    \  table.insert(answer, 'B+')\n        elseif grade > 2.7 then\n            table.insert(answer,\
    \ 'B')\n        elseif grade > 2.3 then\n            table.insert(answer, 'B-')\n\
    \        elseif grade > 2.0 then\n            table.insert(answer, 'C+')\n   \
    \     elseif grade > 1.7 then\n            table.insert(answer, 'C')\n       \
    \ elseif grade > 1.3 then\n            table.insert(answer, 'C-')\n        elseif\
    \ grade > 1.0 then\n            table.insert(answer, 'D+')\n        elseif grade\
    \ > 0.7 then\n            table.insert(answer, 'D')\n        elseif grade > 0.0\
    \ then\n            table.insert(answer, 'D-')\n        else\n            table.insert(answer,\
    \ 'E')\n        end\n    end\n    return answer\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp139bgwer.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmp139bgwer.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  -- TODO: Write\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xgy1mhd.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp2xgy1mhd.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal alphabet\
    \ = {}\n\tlocal grades_al = {}\n\tlocal grades_numerical = {}\n\t\n\tfor i = 1,\
    \ 10 do\n\t\talphabet[i] = string.char(i+64)\n\tend\n\t\n\tfor i = 1, #grades\
    \ do\n\t\tlocal j = 1\n\t\tlocal grade = string.format(\"%.1f\",grades[i])\n\t\
    \tif grade == \"4.0\" then\n\t\t\ttable.insert(grades_al,alphabet[j])\n\t\t\t\
    table.insert(grades_numerical,4.0)\n\t\t\tj = j + 1\n\t\telseif grade >= \"3.7\"\
    \ then\n\t\t\ttable.insert(grades_al,alphabet[j])\n\t\t\ttable.insert(grades_numerical,3.7)\n\
    \t\t\tj = j + 1\n\t\telseif grade >= \"3.3\" then\n\t\t\ttable.insert(grades_al,alphabet[j]..\"\
    -\")\n\t\t\ttable.insert(grades_numerical,3.3)\n\t\t\tj = j + 1\n\t\telseif grade\
    \ >= \"3.0\" then\n\t\t\ttable.insert(grades_al,alphabet[j]..\"+\")\n\t\t\ttable.insert(grades_numerical,3.0)\n\
    \t\t\tj = j + 1\n\t\telseif grade >= \"2.7\" then\n\t\t\ttable.insert(grades_al,alphabet[j])\n\
    \t\t\ttable.insert(grades_numerical,2.7)\n\t\t\tj = j + 1\n\t\telseif grade >=\
    \ \"2.3\" then\n\t\t\ttable.insert(grades_al,alphabet[j]..\"-\")\n\t\t\ttable.insert(grades_numerical,2.3)\n\
    \t\t\tj = j + 1\n\t\telseif grade >= \"2.0\" then\n\t\t\ttable.insert(grades_al,alphabet[j]..\"\
    +\")\n\t\t\ttable.insert(grades_numerical,2.0)\n\t\t\tj = j + 1\n\t\telseif grade\
    \ >= \"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpptt4a7el.lua:62: unfinished string near '\"'\n"
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  for _, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      table.insert(grades_table,\
    \ 'A+')\n    elseif grade >= 3.7 then\n      table.insert(grades_table, 'A')\n\
    \    elseif grade >= 3.3 then\n      table.insert(grades_table, 'A-')\n    elseif\
    \ grade >= 3.0 then\n      table.insert(grades_table, 'B+')\n    elseif grade\
    \ >= 2.7 then\n      table.insert(grades_table, 'B')\n    elseif grade >= 2.3\
    \ then\n      table.insert(grades_table, 'B-')\n    elseif grade >= 2.0 then\n\
    \      table.insert(grades_table, 'C+')\n    elseif grade >= 1.7 then\n      table.insert(grades_table,\
    \ 'C')\n    elseif grade >= 1.3 then\n      table.insert(grades_table, 'C-')\n\
    \    elseif grade >= 1.0 then\n      table.insert(grades_table, 'D+')\n    elseif\
    \ grade >= 0.7 then\n      table.insert(grades_table, 'D')\n    elseif grade >=\
    \ 0.0 then\n      table.insert(grades_table, 'D-')\n    else\n      table.insert(grades_table,\
    \ 'E')\n    end\n  end\n  return grades_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmx9nh4ol.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpmx9nh4ol.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local result =\
    \ {}\n  for _, v in ipairs(grades) do\n    if v >= 4.0 then\n      table.insert(result,\
    \ 'A+')\n    elseif v >= 3.7 then\n      table.insert(result, 'A')\n    elseif\
    \ v >= 3.3 then\n      table.insert(result, 'A-')\n    elseif v >= 3.0 then\n\
    \      table.insert(result, 'B+')\n    elseif v >= 2.7 then\n      table.insert(result,\
    \ 'B')\n    elseif v >= 2.3 then\n      table.insert(result, 'B-')\n    elseif\
    \ v >= 2.0 then\n      table.insert(result, 'C+')\n    elseif v >= 1.7 then\n\
    \      table.insert(result, 'C')\n    elseif v >= 1.3 then\n      table.insert(result,\
    \ 'C-')\n    elseif v >= 1.0 then\n      table.insert(result, 'D+')\n    elseif\
    \ v >= 0.7 then\n      table.insert(result, 'D')\n    elseif v >= 0.0 then\n \
    \     table.insert(result, 'D-')\n    else\n      table.insert(result, 'E')\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn00rhdz4.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpn00rhdz4.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    --your code here\n\
    \    --logic:  <---- just change this one\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnas1zdf.lua:30:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpfnas1zdf.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    -- YOUR CODE\
    \ GOES HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq7si43v.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpcq7si43v.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letters\
    \ = {}\n    for index, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letters, 'A+')\n        elseif grade >= 3.7 then\n \
    \           table.insert(letters, 'A')\n        elseif grade >= 3.3 then\n   \
    \         table.insert(letters, 'A-')\n        elseif grade >= 3.0 then\n    \
    \        table.insert(letters, 'B+')\n        elseif grade >= 2.7 then\n     \
    \       table.insert(letters, 'B')\n        elseif grade >= 2.3 then\n       \
    \     table.insert(letters, 'B-')\n        elseif grade >= 2.0 then\n        \
    \    table.insert(letters, 'C+')\n        elseif grade >= 1.7 then\n         \
    \   table.insert(letters, 'C')\n        elseif grade >= 1.3 then\n           \
    \ table.insert(letters, 'C-')\n        elseif grade >= 1.0 then\n            table.insert(letters,\
    \ 'D+')\n        elseif grade >= 0.7 then\n            table.insert(letters, 'D')\n\
    \        elseif grade >= 0.0 then\n            table.insert(letters, 'D-')\n \
    \       else\n            table.insert(letters, 'E')\n        end\n    end\n \
    \   return letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ecdwa1y.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp1ecdwa1y.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grade_to_letter\
    \ = {\n        ['4.0'] = 'A+',\n        ['3.7'] = 'A',\n        ['3.3'] = 'A-',\n\
    \        ['3.0'] = 'B+',\n        ['2.7'] = 'B',\n        ['2.3'] = 'B-',\n  \
    \      ['2.0'] = 'C+',\n        ['1.7'] = 'C',\n        ['1.3'] = 'C-',\n    \
    \    ['1.0'] = 'D+',\n        ['0.7'] = 'D',\n        ['0.0'] = 'D-',\n      \
    \  ['0.0'] = 'E'\n    }\n    local letter_grades = {}\n    for i = 1, #grades\
    \ do\n        letter_grades[i] = grade_to_letter[tostring(grades[i])]\n    end\n\
    \    return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqyrob2lw.lua:48:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", 3=\"C\"}\n\
    stack traceback:\n\t/tmp/tmpqyrob2lw.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  --TODO\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpinrcvw7s.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpinrcvw7s.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    -- Your code\
    \ here\n    local res = {}\n    for i = 1, #grades do\n        local num = grades[i]\n\
    \        if num >= 4.0 then\n            res[i] = 'A+'\n        elseif num >=\
    \ 3.7 then\n            res[i] = 'A'\n        elseif num >= 3.3 then\n       \
    \     res[i] = 'A-'\n        elseif num >= 3.0 then\n            res[i] = 'B+'\n\
    \        elseif num >= 2.7 then\n            res[i] = 'B'\n        elseif num\
    \ >= 2.3 then\n            res[i] = 'B-'\n        elseif num >= 2.0 then\n   \
    \         res[i] = 'C+'\n        elseif num >= 1.7 then\n            res[i] =\
    \ 'C'\n        elseif num >= 1.3 then\n            res[i] = 'C-'\n        elseif\
    \ num >= 1.0 then\n            res[i] = 'D+'\n        elseif num >= 0.7 then\n\
    \            res[i] = 'D'\n        elseif num >= 0.0 then\n            res[i]\
    \ = 'D-'\n        else\n            res[i] = 'E'\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_0u2hot.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpm_0u2hot.lua:61: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades\
    \ = {}\n    for _, v in ipairs(grades) do\n        if v == 4.0 then\n        \
    \    table.insert(grades, 'A+')\n        elseif v > 3.7 then\n            table.insert(grades,\
    \ 'A')\n        elseif v > 3.3 then\n            table.insert(grades, 'A-')\n\
    \        elseif v > 3.0 then\n            table.insert(grades, 'B+')\n       \
    \ elseif v > 2.7 then\n            table.insert(grades, 'B')\n        elseif v\
    \ > 2.3 then\n            table.insert(grades, 'B-')\n        elseif v > 2.0 then\n\
    \            table.insert(grades, 'C+')\n        elseif v > 1.7 then\n       \
    \     table.insert(grades, 'C')\n        elseif v > 1.3 then\n            table.insert(grades,\
    \ 'C-')\n        elseif v > 1.0 then\n            table.insert(grades, 'D+')\n\
    \        elseif v > 0.7 then\n            table.insert(grades, 'D')\n        elseif\
    \ v > 0.0 then\n            table.insert(grades, 'D-')\n        else\n       \
    \     table.insert(grades, 'E')\n        end\n    end\n    return grades\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkub4zaxe.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpkub4zaxe.lua:59: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    --@TODO\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jllkdef.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp3jllkdef.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  local grade_translate = {\n    [4.0] = 'A+',\n    [3.7] = 'A',\n   \
    \ [3.3] = 'A-',\n    [3.0] = 'B+',\n    [2.7] = 'B',\n    [2.3] = 'B-',\n    [2.0]\
    \ = 'C+',\n    [1.7] = 'C',\n    [1.3] = 'C-',\n    [1.0] = 'D+',\n    [0.7] =\
    \ 'D',\n    [0.0] = 'D-',\n    [-1.0] = 'E'\n  }\n  for _, gp in ipairs(grades)\
    \ do\n    local p = 1\n    while true do\n      if gp >= p then\n        table.insert(letter_grades,\
    \ grade_translate[p])\n        break\n      end\n      p = p - 0.3\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vqyokb2.lua:55:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"D+\", \"D+\", \"\
    D+\", \"D+\", \"D+\"}\nstack traceback:\n\t/tmp/tmp3vqyokb2.lua:55: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_letters\
    \ = {}\n    for i,v in ipairs(grades) do\n        if v >= 4.0 then\n         \
    \   grades_letters[i] = 'A+'\n        elseif v >= 3.7 then\n            grades_letters[i]\
    \ = 'A'\n        elseif v >= 3.3 then\n            grades_letters[i] = 'A-'\n\
    \        elseif v >= 3.0 then\n            grades_letters[i] = 'B+'\n        elseif\
    \ v >= 2.7 then\n            grades_letters[i] = 'B'\n        elseif v >= 2.3\
    \ then\n            grades_letters[i] = 'B-'\n        elseif v >= 2.0 then\n \
    \           grades_letters[i] = 'C+'\n        elseif v >= 1.7 then\n         \
    \   grades_letters[i] = 'C'\n        elseif v >= 1.3 then\n            grades_letters[i]\
    \ = 'C-'\n        elseif v >= 1.0 then\n            grades_letters[i] = 'D+'\n\
    \        elseif v >= 0.7 then\n            grades_letters[i] = 'D'\n        elseif\
    \ v >= 0.0 then\n            grades_letters[i] = 'D-'\n        else\n        \
    \    grades_letters[i] = 'E'\n        end\n    end\n    return grades_letters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe7ccjw8a.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpe7ccjw8a.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    -- your code\
    \ here\n    local gradeTable = {}\n    local letterGrade = {}\n    local result\
    \ = {}\n    for i, grade in ipairs(grades) do\n        table.insert(gradeTable,\
    \ grade)\n    end\n    for i, grade in ipairs(gradeTable) do\n        if grade\
    \ == 4.0 then\n            table.insert(letterGrade, 'A+')\n        elseif grade\
    \ > 3.7 then\n            table.insert(letterGrade, 'A')\n        elseif grade\
    \ > 3.3 then\n            table.insert(letterGrade, 'A-')\n        elseif grade\
    \ > 3.0 then\n            table.insert(letterGrade, 'B+')\n        elseif grade\
    \ > 2.7 then\n            table.insert(letterGrade, 'B')\n        elseif grade\
    \ > 2.3 then\n            table.insert(letterGrade, 'B-')\n        elseif grade\
    \ > 2.0 then\n            table.insert(letterGrade, 'C+')\n        elseif grade\
    \ > 1.7 then\n            table.insert(letterGrade, 'C')\n        elseif grade\
    \ > 1.3 then\n            table.insert(letterGrade, 'C-')\n        elseif grade\
    \ > 1.0 then\n            table.insert(letterGrade, 'D+')\n        elseif grade\
    \ > 0.7 then\n            table.insert(letterGrade, 'D')\n        elseif grade\
    \ > 0.0 then\n            table.insert(letterGrade, 'D-')\n        elseif grade\
    \ == 0.0 then\n            table.insert(letterGrade, 'E')\n        end\n    end\n\
    \    for i, letter in ipairs(letterGrade) do\n        table.insert(result, letter)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwutiej8.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpzwutiej8.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local num_to_letter\
    \ = {[\"4.0\"] = \"A+\", [\"3.7\"] = \"A\", [\"3.3\"] = \"A-\", [\"3.0\"] = \"\
    B+\", [\"2.7\"] = \"B\", [\"2.3\"] = \"B-\", [\"2.0\"] = \"C+\", [\"1.7\"] = \"\
    C\", [\"1.3\"] = \"C-\", [\"1.0\"] = \"D+\", [\"0.7\"] = \"D\", [\"0.0\"] = \"\
    D-\", [\"-1.0\"] = \"E\"}\n    local grade_array = {}\n    for i = 1, #grades\
    \ do\n        local grade = grades[i]\n        local above_3 = grade > 3\n   \
    \     local above_2 = grade > 2\n        local above_1 = grade > 1\n        local\
    \ above_0 = grade > 0\n        local above_neg1 = grade > -1\n        if grade\
    \ == 4.0 then\n            table.insert(grade_array, num_to_letter[\"4.0\"])\n\
    \        elseif above_3 and grade < 3.7 then\n            table.insert(grade_array,\
    \ num_to_letter[\"3.7\"])\n        elseif above_3 and grade < 3.3 then\n     \
    \       table.insert(grade_array, num_to_letter[\"3.3\"])\n        elseif above_2\
    \ and grade < 3.0 then\n            table.insert(grade_array, num_to_letter[\"\
    3.0\"])\n        elseif above_2 and grade < 2.7 then\n            table.insert(grade_array,\
    \ num_to_letter[\"2.7\"])\n        elseif above_2 and grade < 2.3 then\n     \
    \       table.insert(grade_array, num_to_letter[\"2.3\"])\n        elseif above_1\
    \ and grade < 2.0 then\n            table.insert(grade_array, num_to_letter[\"\
    2.0\"])\n        elseif above_1 and grade < 1.7 then\n            table.insert(grade_array,\
    \ num_to_letter[\"1.7\"])\n        elseif above_1 and grade < 1.3 then\n     \
    \       table.insert(grade_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4n3zjsd8.lua:50: ')' expected (to close '(' at line 49) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal function\
    \ grade_of(gpa)\n\t\t-- return 'A+' -- FIXME\n\t\tif gpa > 4.0 then return 'A+'\n\
    \t\telseif gpa > 3.7 then return 'A'\n\t\telseif gpa > 3.3 then return 'A-'\n\t\
    \telseif gpa > 3.0 then return 'B+'\n\t\telseif gpa > 2.7 then return 'B'\n\t\t\
    elseif gpa > 2.3 then return 'B-'\n\t\telseif gpa > 2.0 then return 'C+'\n\t\t\
    elseif gpa > 1.7 then return 'C'\n\t\telseif gpa > 1.3 then return 'C-'\n\t\t\
    elseif gpa > 1.0 then return 'D+'\n\t\telseif gpa > 0.7 then return 'D'\n\t\t\
    elseif gpa > 0.0 then return 'D-'\n\t\telse return 'E'\n\t\tend\n\tend\n\treturn\
    \ map(grade_of, grades)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpffc4e4co.lua:40:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpffc4e4co.lua:40:\
    \ in local 'candidate'\n\t/tmp/tmpffc4e4co.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    if grades ==\
    \ 0 then\n        return 'E'\n    elseif grades >= 0.7 then\n        return 'D+'\n\
    \    elseif grades >= 1.0 then\n        return 'D'\n    elseif grades >= 1.3 then\n\
    \        return 'D-'\n    elseif grades >= 1.7 then\n        return 'C+'\n   \
    \ elseif grades >= 2.0 then\n        return 'C'\n    elseif grades >= 2.3 then\n\
    \        return 'C-'\n    elseif grades >= 2.7 then\n        return 'B+'\n   \
    \ elseif grades >= 3.0 then\n        return 'B'\n    elseif grades >= 3.3 then\n\
    \        return 'B-'\n    elseif grades >= 3.7 then\n        return 'A+'\n   \
    \ elseif grades >= 4.0 then\n        return 'A'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvkcb19db.lua:25:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmpvkcb19db.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpvkcb19db.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n   local result =\
    \ {}\n   for _, v in ipairs(grades) do\n      if v >= 4.0 then\n         table.insert(result,\
    \ 'A+')\n      elseif v >= 3.7 then\n         table.insert(result, 'A')\n    \
    \  elseif v >= 3.3 then\n         table.insert(result, 'A-')\n      elseif v >=\
    \ 3.0 then\n         table.insert(result, 'B+')\n      elseif v >= 2.7 then\n\
    \         table.insert(result, 'B')\n      elseif v >= 2.3 then\n         table.insert(result,\
    \ 'B-')\n      elseif v >= 2.0 then\n         table.insert(result, 'C+')\n   \
    \   elseif v >= 1.7 then\n         table.insert(result, 'C')\n      elseif v >=\
    \ 1.3 then\n         table.insert(result, 'C-')\n      elseif v >= 1.0 then\n\
    \         table.insert(result, 'D+')\n      elseif v >= 0.7 then\n         table.insert(result,\
    \ 'D')\n      elseif v >= 0.0 then\n         table.insert(result, 'D-')\n    \
    \  else\n         table.insert(result, 'E')\n      end\n   end\n   return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2l29slk.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpj2l29slk.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local result\
    \ = {}\n    local letters = {\n        [4.0] = 'A+',\n        [3.7] = 'A',\n \
    \       [3.3] = 'A-',\n        [3.0] = 'B+',\n        [2.7] = 'B',\n        [2.3]\
    \ = 'B-',\n        [2.0] = 'C+',\n        [1.7] = 'C',\n        [1.3] = 'C-',\n\
    \        [1.0] = 'D+',\n        [0.7] = 'D',\n        [0.0] = 'D-',\n        [-0.0]\
    \ = 'E'\n    }\n    for i,v in ipairs(grades) do\n        for k, letter in pairs(letters)\
    \ do\n            if v > k then\n                result[i] = letter\n        \
    \        break\n            end\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphn2kw6z6.lua:53:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"E\", \"E\", \"\
    E\", \"E\", \"E\"}\nstack traceback:\n\t/tmp/tmphn2kw6z6.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local result\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] >= 4.0 then\n        \
    \    result[i] = 'A+'\n        elseif grades[i] >= 3.7 then\n            result[i]\
    \ = 'A'\n        elseif grades[i] >= 3.3 then\n            result[i] = 'A-'\n\
    \        elseif grades[i] >= 3.0 then\n            result[i] = 'B+'\n        elseif\
    \ grades[i] >= 2.7 then\n            result[i] = 'B'\n        elseif grades[i]\
    \ >= 2.3 then\n            result[i] = 'B-'\n        elseif grades[i] >= 2.0 then\n\
    \            result[i] = 'C+'\n        elseif grades[i] >= 1.7 then\n        \
    \    result[i] = 'C'\n        elseif grades[i] >= 1.3 then\n            result[i]\
    \ = 'C-'\n        elseif grades[i] >= 1.0 then\n            result[i] = 'D+'\n\
    \        elseif grades[i] >= 0.7 then\n            result[i] = 'D'\n        elseif\
    \ grades[i] > 0.0 then\n            result[i] = 'D-'\n        else\n         \
    \   result[i] = 'E'\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgy4y_zdd.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpgy4y_zdd.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grade_table\
    \ = {A = 4.0, B = 3.0, C = 2.0, D = 1.0, E = 0.0}\n  local letter_grade = {}\n\
    \  for i = 1, #grades do\n    for key, val in pairs(letter_grade_table) do\n \
    \     if grades[i] == val then\n        letter_grade[i] = key .. \"+\"\n     \
    \ elseif grades[i] > val then\n        letter_grade[i] = key .. \"-\"\n      end\n\
    \    end\n  end\n  return letter_grade\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsyxx8r1.lua:40:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    D-\", \"C+\", \"B-\"}\nstack traceback:\n\t/tmp/tmpdsyxx8r1.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letters\
    \ = {}\n    local lookup = {\n        [4.0] = 'A+',\n        [3.7] = 'A',\n  \
    \      [3.3] = 'A-',\n        [3.0] = 'B+',\n        [2.7] = 'B',\n        [2.3]\
    \ = 'B-',\n        [2.0] = 'C+',\n        [1.7] = 'C',\n        [1.3] = 'C-',\n\
    \        [1.0] = 'D+',\n        [0.7] = 'D',\n        [0.0] = 'D-',\n        [-1.0]\
    \ = 'E'\n    }\n    for _, v in ipairs(grades) do\n        local letter = lookup[v]\n\
    \        if not letter then\n            local grade = 3.7\n            while\
    \ grade > 0 do\n                if v > grade then\n                    letter\
    \ = lookup[grade]\n                    break\n                end\n          \
    \      grade = grade - 0.3\n            end\n        end\n        table.insert(letters,\
    \ letter)\n    end\n    return letters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw3mmum3.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\"}\nstack traceback:\n\t/tmp/tmpsw3mmum3.lua:59: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  -- Your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq30tq4ys.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpq30tq4ys.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grade_list\
    \ = {}\n    for i, v in ipairs(grades) do\n        if v == 4.0 then\n        \
    \    table.insert(grade_list, 'A+')\n        elseif v > 3.7 then\n           \
    \ table.insert(grade_list, 'A')\n        elseif v > 3.3 then\n            table.insert(grade_list,\
    \ 'A-')\n        elseif v > 3.0 then\n            table.insert(grade_list, 'B+')\n\
    \        elseif v > 2.7 then\n            table.insert(grade_list, 'B')\n    \
    \    elseif v > 2.3 then\n            table.insert(grade_list, 'B-')\n       \
    \ elseif v > 2.0 then\n            table.insert(grade_list, 'C+')\n        elseif\
    \ v > 1.7 then\n            table.insert(grade_list, 'C')\n        elseif v >\
    \ 1.3 then\n            table.insert(grade_list, 'C-')\n        elseif v > 1.0\
    \ then\n            table.insert(grade_list, 'D+')\n        elseif v > 0.7 then\n\
    \            table.insert(grade_list, 'D')\n        elseif v > 0.0 then\n    \
    \        table.insert(grade_list, 'D-')\n        else\n            table.insert(grade_list,\
    \ 'E')\n        end\n    end\n    return grade_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\t-- Write your code\
    \ here!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuzd5ksao.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpuzd5ksao.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local result =\
    \ {}\n  for _, g in ipairs(grades) do\n    if g == 4.0 then table.insert(result,\
    \ 'A+')\n    elseif g > 3.7 then table.insert(result, 'A')\n    elseif g > 3.3\
    \ then table.insert(result, 'A-')\n    elseif g > 3.0 then table.insert(result,\
    \ 'B+')\n    elseif g > 2.7 then table.insert(result, 'B')\n    elseif g > 2.3\
    \ then table.insert(result, 'B-')\n    elseif g > 2.0 then table.insert(result,\
    \ 'C+')\n    elseif g > 1.7 then table.insert(result, 'C')\n    elseif g > 1.3\
    \ then table.insert(result, 'C-')\n    elseif g > 1.0 then table.insert(result,\
    \ 'D+')\n    elseif g > 0.7 then table.insert(result, 'D')\n    elseif g > 0.0\
    \ then table.insert(result, 'D-')\n    else table.insert(result, 'E')\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grade_map\
    \ = { A = 4.0, B = 3.0, C = 2.0, D = 1.0, E = 0.0 }\n    local function find_grade(x)\n\
    \        for k, v in pairs(grade_map) do\n            if v == x then\n       \
    \         return k\n            end\n        end\n    end\n    local function\
    \ which_grade(gpa)\n        local grade_letter\n        if gpa >= 3.7 then\n \
    \           grade_letter = 'A'\n        elseif gpa >= 3.3 then\n            grade_letter\
    \ = 'A-'\n        elseif gpa >= 3.0 then\n            grade_letter = 'B+'\n  \
    \      elseif gpa >= 2.7 then\n            grade_letter = 'B'\n        elseif\
    \ gpa >= 2.3 then\n            grade_letter = 'B-'\n        elseif gpa >= 2.0\
    \ then\n            grade_letter = 'C+'\n        elseif gpa >= 1.7 then\n    \
    \        grade_letter = 'C'\n        elseif gpa >= 1.3 then\n            grade_letter\
    \ = 'C-'\n        elseif gpa >= 1.0 then\n            grade_letter = 'D+'\n  \
    \      elseif gpa >= 0.7 then\n            grade_letter = 'D'\n        elseif\
    \ gpa >= 0.0 then\n            grade_letter = 'D-'\n        else\n           \
    \ grade_letter = 'E'\n        end\n        return grade_letter\n    end\n    local\
    \ function is_plus(gpa)\n        local plus = false\n        local grade_letter\
    \ = which_grade(gpa)\n        local letter = find_grade(grade_map[grade_letter])\n\
    \        local lower_letter = find_grade(grade_map[grade_letter] - 0.3)\n    \
    \    local upper_letter = find_grade(grade_map[grade_letter] + 0.3)\n        if\
    \ lower_letter == nil then\n            lower_letter = letter\n        end\n \
    \       if upper_letter == nil then\n            upper_letter = letter\n     \
    \   end\n        if letter == upper_letter then\n            plus = true\n   \
    \     end\n        return plus\n    end\n    local grades_letter = {}\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnarw7zfc.lua:91: 'end' expected (to close 'function' at line\
    \ 22) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local function\
    \ grade(x)\n    if x >= 4.0 then\n      return 'A+'\n    elseif x >= 3.7 then\n\
    \      return 'A'\n    elseif x >= 3.3 then\n      return 'A-'\n    elseif x >=\
    \ 3.0 then\n      return 'B+'\n    elseif x >= 2.7 then\n      return 'B'\n  \
    \  elseif x >= 2.3 then\n      return 'B-'\n    elseif x >= 2.0 then\n      return\
    \ 'C+'\n    elseif x >= 1.7 then\n      return 'C'\n    elseif x >= 1.3 then\n\
    \      return 'C-'\n    elseif x >= 1.0 then\n      return 'D+'\n    elseif x\
    \ >= 0.7 then\n      return 'D'\n    elseif x >= 0.0 then\n      return 'D-'\n\
    \    else\n      return 'E'\n    end\n  end\n  return util.map(grades, grade)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjijxdpm9.lua:52:\
    \ attempt to index a nil value (global 'util')\nstack traceback:\n\t/tmp/tmpjijxdpm9.lua:52:\
    \ in local 'candidate'\n\t/tmp/tmpjijxdpm9.lua:58: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letters =\
    \ {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      letters[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      letters[i] = 'A'\n    elseif grade\
    \ >= 3.3 then\n      letters[i] = 'A-'\n    elseif grade >= 3.0 then\n      letters[i]\
    \ = 'B+'\n    elseif grade >= 2.7 then\n      letters[i] = 'B'\n    elseif grade\
    \ >= 2.3 then\n      letters[i] = 'B-'\n    elseif grade >= 2.0 then\n      letters[i]\
    \ = 'C+'\n    elseif grade >= 1.7 then\n      letters[i] = 'C'\n    elseif grade\
    \ >= 1.3 then\n      letters[i] = 'C-'\n    elseif grade >= 1.0 then\n      letters[i]\
    \ = 'D+'\n    elseif grade >= 0.7 then\n      letters[i] = 'D'\n    elseif grade\
    \ >= 0.0 then\n      letters[i] = 'D-'\n    else\n      letters[i] = 'E'\n   \
    \ end\n  end\n  return letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzibvba3x.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpzibvba3x.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i,v in ipairs(grades) do\n    if v >= 4.0 then\n      table.insert(letter_grades,\
    \ 'A+')\n    elseif v >= 3.7 then\n      table.insert(letter_grades, 'A')\n  \
    \  elseif v >= 3.3 then\n      table.insert(letter_grades, 'A-')\n    elseif v\
    \ >= 3.0 then\n      table.insert(letter_grades, 'B+')\n    elseif v >= 2.7 then\n\
    \      table.insert(letter_grades, 'B')\n    elseif v >= 2.3 then\n      table.insert(letter_grades,\
    \ 'B-')\n    elseif v >= 2.0 then\n      table.insert(letter_grades, 'C+')\n \
    \   elseif v >= 1.7 then\n      table.insert(letter_grades, 'C')\n    elseif v\
    \ >= 1.3 then\n      table.insert(letter_grades, 'C-')\n    elseif v >= 1.0 then\n\
    \      table.insert(letter_grades, 'D+')\n    elseif v >= 0.7 then\n      table.insert(letter_grades,\
    \ 'D')\n    elseif v >= 0.0 then\n      table.insert(letter_grades, 'D-')\n  \
    \  else\n      table.insert(letter_grades, 'E')\n    end\n  end\n  return letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpb8gg5m.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpgpb8gg5m.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal grades_map\
    \ = {}\n\tgrades_map[0] = 'E'\n\tgrades_map[0.7] = 'D-'\n\tgrades_map[1.0] = 'D+'\n\
    \tgrades_map[1.3] = 'C-'\n\tgrades_map[1.7] = 'C'\n\tgrades_map[2.0] = 'C+'\n\t\
    grades_map[2.3] = 'B-'\n\tgrades_map[2.7] = 'B'\n\tgrades_map[3.0] = 'B+'\n\t\
    grades_map[3.3] = 'A-'\n\tgrades_map[3.7] = 'A'\n\tgrades_map[4.0] = 'A+'\n\t\
    local key = 0\n\tlocal grades_list = {}\n\tfor i = 1, #grades do\n\t\tfor j =\
    \ 1, #grades_map do\n\t\t\tif grades[i] == key then\n\t\t\t\tgrades_list[i] =\
    \ grades_map[j]\n\t\t\t\tbreak\n\t\t\telseif grades[i] > key and grades[i] < key\
    \ + 0.3 then\n\t\t\t\tgrades_list[i] = grades_map[j]\n\t\t\t\tbreak\n\t\t\tend\n\
    \t\t\tkey = key + 0.3\n\t\tend\n\t\tkey = 0\n\tend\n\treturn grades_list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgocr41yz.lua:57:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpgocr41yz.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        local\
    \ letter_grade\n        if grade >= 4.0 then\n            letter_grade = 'A+'\n\
    \        elseif grade >= 3.7 then\n            letter_grade = 'A'\n        elseif\
    \ grade >= 3.3 then\n            letter_grade = 'A-'\n        elseif grade >=\
    \ 3.0 then\n            letter_grade = 'B+'\n        elseif grade >= 2.7 then\n\
    \            letter_grade = 'B'\n        elseif grade >= 2.3 then\n          \
    \  letter_grade = 'B-'\n        elseif grade >= 2.0 then\n            letter_grade\
    \ = 'C+'\n        elseif grade >= 1.7 then\n            letter_grade = 'C'\n \
    \       elseif grade >= 1.3 then\n            letter_grade = 'C-'\n        elseif\
    \ grade >= 1.0 then\n            letter_grade = 'D+'\n        elseif grade >=\
    \ 0.7 then\n            letter_grade = 'D'\n        elseif grade >= 0.0 then\n\
    \            letter_grade = 'D-'\n        elseif grade >= 0.0 then\n         \
    \   letter_grade = 'E'\n        end\n        table.insert(letter_grades, letter_grade)\n\
    \    end\n    return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2hmasp2.lua:62:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpw2hmasp2.lua:62: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_letters\
    \ = {}\n    for _, g in ipairs(grades) do\n        if g == 4.0 then\n        \
    \    table.insert(grades_letters, 'A+')\n        elseif g > 3.7 then\n       \
    \     table.insert(grades_letters, 'A')\n        elseif g > 3.3 then\n       \
    \     table.insert(grades_letters, 'A-')\n        elseif g > 3.0 then\n      \
    \      table.insert(grades_letters, 'B+')\n        elseif g > 2.7 then\n     \
    \       table.insert(grades_letters, 'B')\n        elseif g > 2.3 then\n     \
    \       table.insert(grades_letters, 'B-')\n        elseif g > 2.0 then\n    \
    \        table.insert(grades_letters, 'C+')\n        elseif g > 1.7 then\n   \
    \         table.insert(grades_letters, 'C')\n        elseif g > 1.3 then\n   \
    \         table.insert(grades_letters, 'C-')\n        elseif g > 1.0 then\n  \
    \          table.insert(grades_letters, 'D+')\n        elseif g > 0.7 then\n \
    \           table.insert(grades_letters, 'D')\n        elseif g > 0.0 then\n \
    \           table.insert(grades_letters, 'D-')\n        else\n            table.insert(grades_letters,\
    \ 'E')\n        end\n    end\n    return grades_letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphk8fmhwa.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmphk8fmhwa.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grade_code\
    \ = {\n        [\"A+\"] = 4.0,\n        [\"A\"] = 3.7,\n        [\"A-\"] = 3.3,\n\
    \        [\"B+\"] = 3.0,\n        [\"B\"] = 2.7,\n        [\"B-\"] = 2.3,\n  \
    \      [\"C+\"] = 2.0,\n        [\"C\"] = 1.7,\n        [\"C-\"] = 1.3,\n    \
    \    [\"D+\"] = 1.0,\n        [\"D\"] = 0.7,\n        [\"D-\"] = 0.0,\n      \
    \  [\"E\"] = 0.0\n    }\n    local new_grades = {}\n    for i, v in ipairs(grades)\
    \ do\n        local grade = 'E'\n        for n, m in pairs(grade_code) do\n  \
    \          if v >= m then\n                grade = n\n                break\n\
    \            end\n        end\n        table.insert(new_grades, grade)\n    end\n\
    \    return new_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jodxlys.lua:55:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"C-\", \"\
    C-\", \"C-\", \"C-\"}\nstack traceback:\n\t/tmp/tmp5jodxlys.lua:55: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ letter_grade(grade)\n        if grade == 4.0 then return 'A+' end\n        if\
    \ grade > 3.7 then return 'A' end\n        if grade > 3.3 then return 'A-' end\n\
    \        if grade > 3.0 then return 'B+' end\n        if grade > 2.7 then return\
    \ 'B' end\n        if grade > 2.3 then return 'B-' end\n        if grade > 2.0\
    \ then return 'C+' end\n        if grade > 1.7 then return 'C' end\n        if\
    \ grade > 1.3 then return 'C-' end\n        if grade > 1.0 then return 'D+' end\n\
    \        if grade > 0.7 then return 'D' end\n        if grade > 0.0 then return\
    \ 'D-' end\n        return 'E'\n    end\n    local grades_with_letters = {}\n\
    \    for i = 1, #grades do\n        table.insert(grades_with_letters, letter_grade(grades[i]))\n\
    \    end\n    return grades_with_letters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local output =\
    \ {}\n  for i, v in ipairs(grades) do\n    if v == 4.0 then output[i] = 'A+'\n\
    \    elseif v > 3.7 then output[i] = 'A'\n    elseif v > 3.3 then output[i] =\
    \ 'A-'\n    elseif v > 3.0 then output[i] = 'B+'\n    elseif v > 2.7 then output[i]\
    \ = 'B'\n    elseif v > 2.3 then output[i] = 'B-'\n    elseif v > 2.0 then output[i]\
    \ = 'C+'\n    elseif v > 1.7 then output[i] = 'C'\n    elseif v > 1.3 then output[i]\
    \ = 'C-'\n    elseif v > 1.0 then output[i] = 'D+'\n    elseif v > 0.7 then output[i]\
    \ = 'D'\n    elseif v > 0.0 then output[i] = 'D-'\n    else output[i] = 'E'\n\
    \    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal function\
    \ get_letter_grade(grade)\n\t\tif grade >= 4.0 then\n\t\t\treturn 'A+'\n\t\telseif\
    \ grade >= 3.7 then\n\t\t\treturn 'A'\n\t\telseif grade >= 3.3 then\n\t\t\treturn\
    \ 'A-'\n\t\telseif grade >= 3.0 then\n\t\t\treturn 'B+'\n\t\telseif grade >= 2.7\
    \ then\n\t\t\treturn 'B'\n\t\telseif grade >= 2.3 then\n\t\t\treturn 'B-'\n\t\t\
    elseif grade >= 2.0 then\n\t\t\treturn 'C+'\n\t\telseif grade >= 1.7 then\n\t\t\
    \treturn 'C'\n\t\telseif grade >= 1.3 then\n\t\t\treturn 'C-'\n\t\telseif grade\
    \ >= 1.0 then\n\t\t\treturn 'D+'\n\t\telseif grade >= 0.7 then\n\t\t\treturn 'D'\n\
    \t\telseif grade >= 0.0 then\n\t\t\treturn 'D-'\n\t\telse\n\t\t\treturn 'E'\n\t\
    \tend\n\tend\n\tlocal function letter_grade(grades)\n\t\tlocal letter_grades =\
    \ {}\n\t\tfor _, v in ipairs(grades) do\n\t\t\ttable.insert(letter_grades, get_letter_grade(v))\n\
    \t\tend\n\t\treturn letter_grades\n\tend\n\treturn letter_grade(grades)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7guyzesv.lua:65:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp7guyzesv.lua:65: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal grades_letters\
    \ = {}\n\tfor i, grade in ipairs(grades) do\n\t\tif grade == 4.0 then\n\t\t\t\
    grades_letters[i] = 'A+'\n\t\telseif grade > 3.7 then\n\t\t\tgrades_letters[i]\
    \ = 'A'\n\t\telseif grade > 3.3 then\n\t\t\tgrades_letters[i] = 'A-'\n\t\telseif\
    \ grade > 3.0 then\n\t\t\tgrades_letters[i] = 'B+'\n\t\telseif grade > 2.7 then\n\
    \t\t\tgrades_letters[i] = 'B'\n\t\telseif grade > 2.3 then\n\t\t\tgrades_letters[i]\
    \ = 'B-'\n\t\telseif grade > 2.0 then\n\t\t\tgrades_letters[i] = 'C+'\n\t\telseif\
    \ grade > 1.7 then\n\t\t\tgrades_letters[i] = 'C'\n\t\telseif grade > 1.3 then\n\
    \t\t\tgrades_letters[i] = 'C-'\n\t\telseif grade > 1.0 then\n\t\t\tgrades_letters[i]\
    \ = 'D+'\n\t\telseif grade > 0.7 then\n\t\t\tgrades_letters[i] = 'D'\n\t\telseif\
    \ grade > 0.0 then\n\t\t\tgrades_letters[i] = 'D-'\n\t\telse\n\t\t\tgrades_letters[i]\
    \ = 'E'\n\t\tend\n\tend\n\treturn grades_letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local result\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(result, 'A+')\n        elseif grade >= 3.7 then\n  \
    \          table.insert(result, 'A')\n        elseif grade >= 3.3 then\n     \
    \       table.insert(result, 'A-')\n        elseif grade >= 3.0 then\n       \
    \     table.insert(result, 'B+')\n        elseif grade >= 2.7 then\n         \
    \   table.insert(result, 'B')\n        elseif grade >= 2.3 then\n            table.insert(result,\
    \ 'B-')\n        elseif grade >= 2.0 then\n            table.insert(result, 'C+')\n\
    \        elseif grade >= 1.7 then\n            table.insert(result, 'C')\n   \
    \     elseif grade >= 1.3 then\n            table.insert(result, 'C-')\n     \
    \   elseif grade >= 1.0 then\n            table.insert(result, 'D+')\n       \
    \ elseif grade >= 0.7 then\n            table.insert(result, 'D')\n        elseif\
    \ grade >= 0.0 then\n            table.insert(result, 'D-')\n        else\n  \
    \          table.insert(result, 'E')\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxi606z0m.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpxi606z0m.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if(grade >= 4.0) then\n     \
    \ letter_grades[i] = 'A+'\n    elseif(grade >= 3.7) then\n      letter_grades[i]\
    \ = 'A'\n    elseif(grade >= 3.3) then\n      letter_grades[i] = 'A-'\n    elseif(grade\
    \ >= 3.0) then\n      letter_grades[i] = 'B+'\n    elseif(grade >= 2.7) then\n\
    \      letter_grades[i] = 'B'\n    elseif(grade >= 2.3) then\n      letter_grades[i]\
    \ = 'B-'\n    elseif(grade >= 2.0) then\n      letter_grades[i] = 'C+'\n    elseif(grade\
    \ >= 1.7) then\n      letter_grades[i] = 'C'\n    elseif(grade >= 1.3) then\n\
    \      letter_grades[i] = 'C-'\n    elseif(grade >= 1.0) then\n      letter_grades[i]\
    \ = 'D+'\n    elseif(grade >= 0.7) then\n      letter_grades[i] = 'D'\n    elseif(grade\
    \ >= 0.0) then\n      letter_grades[i] = 'D-'\n    else\n      letter_grades[i]\
    \ = 'E'\n    end\n  end\n  return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2himnl5u.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp2himnl5u.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade == 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grade > 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grade > 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grade > 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif grade > 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif grade > 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ grade > 2.0 then\n      letter_grades[i] = 'C+'\n    elseif grade > 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif grade > 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif grade > 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ grade > 0.7 then\n      letter_grades[i] = 'D'\n    elseif grade > 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  -- Write your code\
    \ here\n  local letter_grades = {}\n  for i, v in ipairs(grades) do\n    if v\
    \ >= 4.0 then\n      table.insert(letter_grades, 'A+')\n    elseif v >= 3.7 then\n\
    \      table.insert(letter_grades, 'A')\n    elseif v >= 3.3 then\n      table.insert(letter_grades,\
    \ 'A-')\n    elseif v >= 3.0 then\n      table.insert(letter_grades, 'B+')\n \
    \   elseif v >= 2.7 then\n      table.insert(letter_grades, 'B')\n    elseif v\
    \ >= 2.3 then\n      table.insert(letter_grades, 'B-')\n    elseif v >= 2.0 then\n\
    \      table.insert(letter_grades, 'C+')\n    elseif v >= 1.7 then\n      table.insert(letter_grades,\
    \ 'C')\n    elseif v >= 1.3 then\n      table.insert(letter_grades, 'C-')\n  \
    \  elseif v >= 1.0 then\n      table.insert(letter_grades, 'D+')\n    elseif v\
    \ >= 0.7 then\n      table.insert(letter_grades, 'D')\n    elseif v >= 0.0 then\n\
    \      table.insert(letter_grades, 'D-')\n    else\n      table.insert(letter_grades,\
    \ 'E')\n    end\n  end\n  return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mn8k749.lua:60:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp4mn8k749.lua:60: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letters\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] >= 4.0 then\n        \
    \    letters[i] = 'A+'\n        elseif grades[i] >= 3.7 then\n            letters[i]\
    \ = 'A'\n        elseif grades[i] >= 3.3 then\n            letters[i] = 'A-'\n\
    \        elseif grades[i] >= 3.0 then\n            letters[i] = 'B+'\n       \
    \ elseif grades[i] >= 2.7 then\n            letters[i] = 'B'\n        elseif grades[i]\
    \ >= 2.3 then\n            letters[i] = 'B-'\n        elseif grades[i] >= 2.0\
    \ then\n            letters[i] = 'C+'\n        elseif grades[i] >= 1.7 then\n\
    \            letters[i] = 'C'\n        elseif grades[i] >= 1.3 then\n        \
    \    letters[i] = 'C-'\n        elseif grades[i] >= 1.0 then\n            letters[i]\
    \ = 'D+'\n        elseif grades[i] >= 0.7 then\n            letters[i] = 'D'\n\
    \        elseif grades[i] >= 0.0 then\n            letters[i] = 'D-'\n       \
    \ else\n            letters[i] = 'E'\n        end\n    end\n    return letters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdu_c6cx.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpjdu_c6cx.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grade_letter\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] >= 4.0 then\n        \
    \    grade_letter[i] = 'A+'\n        elseif grades[i] >= 3.7 then\n          \
    \  grade_letter[i] = 'A'\n        elseif grades[i] >= 3.3 then\n            grade_letter[i]\
    \ = 'A-'\n        elseif grades[i] >= 3.0 then\n            grade_letter[i] =\
    \ 'B+'\n        elseif grades[i] >= 2.7 then\n            grade_letter[i] = 'B'\n\
    \        elseif grades[i] >= 2.3 then\n            grade_letter[i] = 'B-'\n  \
    \      elseif grades[i] >= 2.0 then\n            grade_letter[i] = 'C+'\n    \
    \    elseif grades[i] >= 1.7 then\n            grade_letter[i] = 'C'\n       \
    \ elseif grades[i] >= 1.3 then\n            grade_letter[i] = 'C-'\n        elseif\
    \ grades[i] >= 1.0 then\n            grade_letter[i] = 'D+'\n        elseif grades[i]\
    \ >= 0.7 then\n            grade_letter[i] = 'D'\n        elseif grades[i] >=\
    \ 0.0 then\n            grade_letter[i] = 'D-'\n        else\n            grade_letter[i]\
    \ = 'E'\n        end\n    end\n    return grade_letter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0jyb8er.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpl0jyb8er.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_letter\
    \ = {}\n    for _, g in ipairs(grades) do\n        local grade_letter\n      \
    \  if g == 4.0 then grade_letter = 'A+'\n        elseif g > 3.7 then grade_letter\
    \ = 'A'\n        elseif g > 3.3 then grade_letter = 'A-'\n        elseif g > 3.0\
    \ then grade_letter = 'B+'\n        elseif g > 2.7 then grade_letter = 'B'\n \
    \       elseif g > 2.3 then grade_letter = 'B-'\n        elseif g > 2.0 then grade_letter\
    \ = 'C+'\n        elseif g > 1.7 then grade_letter = 'C'\n        elseif g > 1.3\
    \ then grade_letter = 'C-'\n        elseif g > 1.0 then grade_letter = 'D+'\n\
    \        elseif g > 0.7 then grade_letter = 'D'\n        elseif g > 0.0 then grade_letter\
    \ = 'D-'\n        else grade_letter = 'E'\n        end\n        table.insert(grades_letter,\
    \ grade_letter)\n    end\n    return grades_letter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal letters =\
    \ {}\n\tfor _, grade in ipairs(grades) do\n\t\tif grade == 4.0 then\n\t\t\ttable.insert(letters,\
    \ 'A+')\n\t\telseif grade > 3.7 then\n\t\t\ttable.insert(letters, 'A')\n\t\telseif\
    \ grade > 3.3 then\n\t\t\ttable.insert(letters, 'A-')\n\t\telseif grade > 3.0\
    \ then\n\t\t\ttable.insert(letters, 'B+')\n\t\telseif grade > 2.7 then\n\t\t\t\
    table.insert(letters, 'B')\n\t\telseif grade > 2.3 then\n\t\t\ttable.insert(letters,\
    \ 'B-')\n\t\telseif grade > 2.0 then\n\t\t\ttable.insert(letters, 'C+')\n\t\t\
    elseif grade > 1.7 then\n\t\t\ttable.insert(letters, 'C')\n\t\telseif grade >\
    \ 1.3 then\n\t\t\ttable.insert(letters, 'C-')\n\t\telseif grade > 1.0 then\n\t\
    \t\ttable.insert(letters, 'D+')\n\t\telseif grade > 0.7 then\n\t\t\ttable.insert(letters,\
    \ 'D')\n\t\telseif grade > 0.0 then\n\t\t\ttable.insert(letters, 'D-')\n\t\telse\n\
    \t\t\ttable.insert(letters, 'E')\n\t\tend\n\tend\n\treturn letters\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local new_grades\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] == 4.0 then\n        \
    \    new_grades[i] = 'A+'\n        elseif grades[i] > 3.7 then\n            new_grades[i]\
    \ = 'A'\n        elseif grades[i] > 3.3 then\n            new_grades[i] = 'A-'\n\
    \        elseif grades[i] > 3.0 then\n            new_grades[i] = 'B+'\n     \
    \   elseif grades[i] > 2.7 then\n            new_grades[i] = 'B'\n        elseif\
    \ grades[i] > 2.3 then\n            new_grades[i] = 'B-'\n        elseif grades[i]\
    \ > 2.0 then\n            new_grades[i] = 'C+'\n        elseif grades[i] > 1.7\
    \ then\n            new_grades[i] = 'C'\n        elseif grades[i] > 1.3 then\n\
    \            new_grades[i] = 'C-'\n        elseif grades[i] > 1.0 then\n     \
    \       new_grades[i] = 'D+'\n        elseif grades[i] > 0.7 then\n          \
    \  new_grades[i] = 'D'\n        elseif grades[i] > 0.0 then\n            new_grades[i]\
    \ = 'D-'\n        else\n            new_grades[i] = 'E'\n        end\n    end\n\
    \    return new_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    -- return {[4.0]\
    \ = 'A+', [3.7] = 'A', [3.3] = 'A-', [3.0] = 'B+', [2.7] = 'B', [2.3] = 'B-',\
    \ [2.0] = 'C+', [1.7] = 'C', [1.3] = 'C-', [1.0] = 'D+', [0.7] = 'D', [0.0] =\
    \ 'D-', [0.0] = 'E'}\n    return {[4.0] = 'A+', [3.7] = 'A', [3.3] = 'A-', [3.0]\
    \ = 'B+', [2.7] = 'B', [2.3] = 'B-', [2.0] = 'C+', [1.7] = 'C', [1.3] = 'C-',\
    \ [1.0] = 'D+', [0.7] = 'D', [0.0] = 'D-', [0.0] = 'E'}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp666ofcy5.lua:30:\
    \ expected: \n{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \n{\n    0=\"E\"\
    ,\n    0.7=\"D\",\n    \"D+\",\n    1.3=\"C-\",\n    1.7=\"C\",\n    \"C+\",\n\
    \    2.3=\"B-\",\n    2.7=\"B\",\n    \"B+\",\n    3.3=\"A-\",\n    3.7=\"A\"\
    ,\n    \"A+\"\n}\nstack traceback:\n\t/tmp/tmp666ofcy5.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grade_map\
    \ = {\n    [4.0] = 'A+', [3.7] = 'A', [3.3] = 'A-', [3.0] = 'B+', [2.7] = 'B',\n\
    \    [2.3] = 'B-', [2.0] = 'C+', [1.7] = 'C', [1.3] = 'C-', [1.0] = 'D+',\n  \
    \  [0.7] = 'D', [0.0] = 'D-', [-1.0] = 'E'\n  }\n  local letter_grades = {}\n\
    \  for k, grade in ipairs(grades) do\n    table.insert(letter_grades, grade_map[grade])\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekohes70.lua:38:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\"}\nstack traceback:\n\t/tmp/tmpekohes70.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    --[[ First I\
    \ tried to do it using string patterns and regular expressions\n    -- to filter\
    \ the grades and then use gsub to insert the letter grade on\n    -- the list,\
    \ but I couldn't figure out a way to do it with my current\n    -- knowledge.\n\
    \    -- So I took a different approach. ]]--\n    local grades_table = {} -- It'll\
    \ contain the letter grades.\n    for i, v in ipairs(grades) do\n        if v\
    \ > 4.0 then\n            grades_table[i] = 'A+'\n        elseif v > 3.7 then\n\
    \            grades_table[i] = 'A'\n        elseif v > 3.3 then\n            grades_table[i]\
    \ = 'A-'\n        elseif v > 3.0 then\n            grades_table[i] = 'B+'\n  \
    \      elseif v > 2.7 then\n            grades_table[i] = 'B'\n        elseif\
    \ v > 2.3 then\n            grades_table[i] = 'B-'\n        elseif v > 2.0 then\n\
    \            grades_table[i] = 'C+'\n        elseif v > 1.7 then\n           \
    \ grades_table[i] = 'C'\n        elseif v > 1.3 then\n            grades_table[i]\
    \ = 'C-'\n        elseif v > 1.0 then\n            grades_table[i] = 'D+'\n  \
    \      elseif v > 0.7 then\n            grades_table[i] = 'D'\n        elseif\
    \ v > 0.0 then\n            grades_table[i] = 'D-'\n        elseif v == 0.0 then\n\
    \            grades_table[i] = 'E'\n        end\n    end\n    return grades_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppfl18kqs.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmppfl18kqs.lua:64: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then table.insert(letter_grades,\
    \ 'A+')\n        elseif grade >= 3.7 then table.insert(letter_grades, 'A')\n \
    \       elseif grade >= 3.3 then table.insert(letter_grades, 'A-')\n        elseif\
    \ grade >= 3.0 then table.insert(letter_grades, 'B+')\n        elseif grade >=\
    \ 2.7 then table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\
    \ table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then table.insert(letter_grades,\
    \ 'C+')\n        elseif grade >= 1.7 then table.insert(letter_grades, 'C')\n \
    \       elseif grade >= 1.3 then table.insert(letter_grades, 'C-')\n        elseif\
    \ grade >= 1.0 then table.insert(letter_grades, 'D+')\n        elseif grade >=\
    \ 0.7 then table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\
    \ table.insert(letter_grades, 'D-')\n        else table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1xmt7wd.lua:46:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpb1xmt7wd.lua:46: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    --[[\n    This\
    \ function will take in a list of numerical grades (such as those \n    that are\
    \ used in the GPA system) and convert them to letter grades using \n    the aforementioned\
    \ table.\n    ]]--\n    local letter_grades = {}\n    for i, grade in ipairs(grades)\
    \ do\n        if grade == 4.0 then\n            table.insert(letter_grades, 'A+')\n\
    \        elseif grade > 3.7 then\n            table.insert(letter_grades, 'A')\n\
    \        elseif grade > 3.3 then\n            table.insert(letter_grades, 'A-')\n\
    \        elseif grade > 3.0 then\n            table.insert(letter_grades, 'B+')\n\
    \        elseif grade > 2.7 then\n            table.insert(letter_grades, 'B')\n\
    \        elseif grade > 2.3 then\n            table.insert(letter_grades, 'B-')\n\
    \        elseif grade > 2.0 then\n            table.insert(letter_grades, 'C+')\n\
    \        elseif grade > 1.7 then\n            table.insert(letter_grades, 'C')\n\
    \        elseif grade > 1.3 then\n            table.insert(letter_grades, 'C-')\n\
    \        elseif grade > 1.0 then\n            table.insert(letter_grades, 'D+')\n\
    \        elseif grade > 0.7 then\n            table.insert(letter_grades, 'D')\n\
    \        elseif grade > 0.0 then\n            table.insert(letter_grades, 'D-')\n\
    \        else\n            table.insert(letter_grades, 'E')\n        end\n   \
    \ end\n    return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, gpa in ipairs(grades) do\n    if gpa >= 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif gpa >= 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ gpa >= 3.3 then\n      letter_grades[i] = 'A-'\n    elseif gpa >= 3.0 then\n\
    \      letter_grades[i] = 'B+'\n    elseif gpa >= 2.7 then\n      letter_grades[i]\
    \ = 'B'\n    elseif gpa >= 2.3 then\n      letter_grades[i] = 'B-'\n    elseif\
    \ gpa >= 2.0 then\n      letter_grades[i] = 'C+'\n    elseif gpa >= 1.7 then\n\
    \      letter_grades[i] = 'C'\n    elseif gpa >= 1.3 then\n      letter_grades[i]\
    \ = 'C-'\n    elseif gpa >= 1.0 then\n      letter_grades[i] = 'D+'\n    elseif\
    \ gpa >= 0.7 then\n      letter_grades[i] = 'D'\n    elseif gpa >= 0.0 then\n\
    \      letter_grades[i] = 'D-'\n    else\n      letter_grades[i] = 'E'\n    end\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmfc44as.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpzmfc44as.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _,grade in ipairs(grades) do\n        if grade >= 4.0 then\n \
    \           table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5t2_anlp.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp5t2_anlp.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i = 1, #grades do\n    if grades[i] == 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grades[i] >= 3.7 then\n      letter_grades[i] = 'A'\n   \
    \ elseif grades[i] >= 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grades[i]\
    \ >= 3.0 then\n      letter_grades[i] = 'B+'\n    elseif grades[i] >= 2.7 then\n\
    \      letter_grades[i] = 'B'\n    elseif grades[i] >= 2.3 then\n      letter_grades[i]\
    \ = 'B-'\n    elseif grades[i] >= 2.0 then\n      letter_grades[i] = 'C+'\n  \
    \  elseif grades[i] >= 1.7 then\n      letter_grades[i] = 'C'\n    elseif grades[i]\
    \ >= 1.3 then\n      letter_grades[i] = 'C-'\n    elseif grades[i] >= 1.0 then\n\
    \      letter_grades[i] = 'D+'\n    elseif grades[i] >= 0.7 then\n      letter_grades[i]\
    \ = 'D'\n    elseif grades[i] >= 0.0 then\n      letter_grades[i] = 'D-'\n   \
    \ else\n      letter_grades[i] = 'E'\n    end\n  end\n  return letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlje6c46.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpqlje6c46.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\treturn {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6njcc2go.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmp6njcc2go.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grade\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] == 4.0 then\n        \
    \    letter_grade[i] = 'A+'\n        elseif grades[i] > 3.7 then\n           \
    \ letter_grade[i] = 'A'\n        elseif grades[i] > 3.3 then\n            letter_grade[i]\
    \ = 'A-'\n        elseif grades[i] > 3.0 then\n            letter_grade[i] = 'B+'\n\
    \        elseif grades[i] > 2.7 then\n            letter_grade[i] = 'B'\n    \
    \    elseif grades[i] > 2.3 then\n            letter_grade[i] = 'B-'\n       \
    \ elseif grades[i] > 2.0 then\n            letter_grade[i] = 'C+'\n        elseif\
    \ grades[i] > 1.7 then\n            letter_grade[i] = 'C'\n        elseif grades[i]\
    \ > 1.3 then\n            letter_grade[i] = 'C-'\n        elseif grades[i] > 1.0\
    \ then\n            letter_grade[i] = 'D+'\n        elseif grades[i] > 0.7 then\n\
    \            letter_grade[i] = 'D'\n        elseif grades[i] > 0.0 then\n    \
    \        letter_grade[i] = 'D-'\n        elseif grades[i] == 0.0 then\n      \
    \      letter_grade[i] = 'E'\n        end\n    end\n    return letter_grade\n\
    end\nassert(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) == {'A+', 'B', 'C-',\
    \ 'C', 'A-'})\nassert(numerical_letter_grade({4.0, 3.7, 3.4, 3.7, 3.4, 3.7, 3.4,\
    \ 3.7, 3.4, 3.7, 3.4, 3.7, 3.4, 3.7, 3.4, 3.7, 3.4, 3.7, 3.4, 3.7, 3.4, 3.7, 3.4,\
    \ 3.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn6ivr2vj.lua:57: '}' expected (to close '{' at line 56) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ grade_equation(grade)\n        if grade < 0.7 then\n            return 'E'\n\
    \        elseif grade < 1.0 then\n            return 'D-'\n        elseif grade\
    \ < 1.3 then\n            return 'D+'\n        elseif grade < 1.7 then\n     \
    \       return 'D'\n        elseif grade < 2.0 then\n            return 'C-'\n\
    \        elseif grade < 2.3 then\n            return 'C+'\n        elseif grade\
    \ < 2.7 then\n            return 'C'\n        elseif grade < 3.0 then\n      \
    \      return 'B-'\n        elseif grade < 3.3 then\n            return 'B+'\n\
    \        elseif grade < 3.7 then\n            return 'B'\n        elseif grade\
    \ < 4.0 then\n            return 'A-'\n        else\n            return 'A+'\n\
    \        end\n    end\n    local function map(f, t)\n        local t2 = {}\n \
    \       for i, v in ipairs(t) do\n            t2[i] = f(v)\n        end\n    \
    \    return t2\n    end\n    return map(grade_equation, grades)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3balis6l.lua:63:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C-\", \"C+\", \"B\"}\nstack traceback:\n\t/tmp/tmp3balis6l.lua:63: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    -- your code\
    \ here\n    local grades_points = {\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\"\
    , \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    local GPAs = {4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0}\n    local result\
    \ = {}\n    for i,v in ipairs(grades) do\n        for j,w in ipairs(GPAs) do\n\
    \            if v == w then\n                table.insert(result, grades_points[j])\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmrq32aw.lua:40:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\"}\nstack traceback:\n\t/tmp/tmpkmrq32aw.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, grade in ipairs(grades) do\n    if grade >= 4.0 then \n     \
    \ letter_grades[i] = 'A+'\n    elseif grade >= 3.7 then\n      letter_grades[i]\
    \ = 'A'\n    elseif grade >= 3.3 then\n      letter_grades[i] = 'A-'\n    elseif\
    \ grade >= 3.0 then\n      letter_grades[i] = 'B+'\n    elseif grade >= 2.7 then\n\
    \      letter_grades[i] = 'B'\n    elseif grade >= 2.3 then\n      letter_grades[i]\
    \ = 'B-'\n    elseif grade >= 2.0 then\n      letter_grades[i] = 'C+'\n    elseif\
    \ grade >= 1.7 then\n      letter_grades[i] = 'C'\n    elseif grade >= 1.3 then\n\
    \      letter_grades[i] = 'C-'\n    elseif grade >= 1.0 then\n      letter_grades[i]\
    \ = 'D+'\n    elseif grade >= 0.7 then\n      letter_grades[i] = 'D'\n    elseif\
    \ grade >= 0.0 then\n      letter_grades[i] = 'D-'\n    else\n      letter_grades[i]\
    \ = 'E'\n    end\n  end\n  return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgapg296u.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpgapg296u.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for _, grade in ipairs(grades) do\n    local letter_grade\n    if grade\
    \ == 4.0 then\n      letter_grade = 'A+'\n    elseif grade >= 3.7 then\n     \
    \ letter_grade = 'A'\n    elseif grade >= 3.3 then\n      letter_grade = 'A-'\n\
    \    elseif grade >= 3.0 then\n      letter_grade = 'B+'\n    elseif grade >=\
    \ 2.7 then\n      letter_grade = 'B'\n    elseif grade >= 2.3 then\n      letter_grade\
    \ = 'B-'\n    elseif grade >= 2.0 then\n      letter_grade = 'C+'\n    elseif\
    \ grade >= 1.7 then\n      letter_grade = 'C'\n    elseif grade >= 1.3 then\n\
    \      letter_grade = 'C-'\n    elseif grade >= 1.0 then\n      letter_grade =\
    \ 'D+'\n    elseif grade >= 0.7 then\n      letter_grade = 'D'\n    elseif grade\
    \ >= 0.0 then\n      letter_grade = 'D-'\n    else\n      letter_grade = 'E'\n\
    \    end\n    table.insert(letter_grades, letter_grade)\n  end\n  return letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbbn3w5m.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmplbbn3w5m.lua:61: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmponab4r85.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmponab4r85.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades\
    \ = {}\n    for k, v in ipairs(grades) do\n        if v >= 4.0 then\n        \
    \    grades[k] = 'A+'\n        elseif v > 3.7 then\n            grades[k] = 'A'\n\
    \        elseif v > 3.3 then\n            grades[k] = 'A-'\n        elseif v >\
    \ 3.0 then\n            grades[k] = 'B+'\n        elseif v > 2.7 then\n      \
    \      grades[k] = 'B'\n        elseif v > 2.3 then\n            grades[k] = 'B-'\n\
    \        elseif v > 2.0 then\n            grades[k] = 'C+'\n        elseif v >\
    \ 1.7 then\n            grades[k] = 'C'\n        elseif v > 1.3 then\n       \
    \     grades[k] = 'C-'\n        elseif v > 1.0 then\n            grades[k] = 'D+'\n\
    \        elseif v > 0.7 then\n            grades[k] = 'D'\n        elseif v >\
    \ 0.0 then\n            grades[k] = 'D-'\n        else\n            grades[k]\
    \ = 'E'\n        end\n    end\n    return grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqkgae__.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpeqkgae__.lua:59: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local result\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade == 4.0 then\n\
    \            table.insert(result, 'A+')\n        elseif grade > 3.7 then\n   \
    \         table.insert(result, 'A')\n        elseif grade > 3.3 then\n       \
    \     table.insert(result, 'A-')\n        elseif grade > 3.0 then\n          \
    \  table.insert(result, 'B+')\n        elseif grade > 2.7 then\n            table.insert(result,\
    \ 'B')\n        elseif grade > 2.3 then\n            table.insert(result, 'B-')\n\
    \        elseif grade > 2.0 then\n            table.insert(result, 'C+')\n   \
    \     elseif grade > 1.7 then\n            table.insert(result, 'C')\n       \
    \ elseif grade > 1.3 then\n            table.insert(result, 'C-')\n        elseif\
    \ grade > 1.0 then\n            table.insert(result, 'D+')\n        elseif grade\
    \ > 0.7 then\n            table.insert(result, 'D')\n        elseif grade > 0.0\
    \ then\n            table.insert(result, 'D-')\n        else\n            table.insert(result,\
    \ 'E')\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\t-- code\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp230piqz2.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp230piqz2.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal letter_grades\
    \ = {}\n\tfor _, v in ipairs(grades) do\n\t\tif v == 4.0 then\n\t\t\ttable.insert(letter_grades,\
    \ 'A+')\n\t\telseif v > 3.7 then\n\t\t\ttable.insert(letter_grades, 'A')\n\t\t\
    elseif v > 3.3 then\n\t\t\ttable.insert(letter_grades, 'A-')\n\t\telseif v > 3.0\
    \ then\n\t\t\ttable.insert(letter_grades, 'B+')\n\t\telseif v > 2.7 then\n\t\t\
    \ttable.insert(letter_grades, 'B')\n\t\telseif v > 2.3 then\n\t\t\ttable.insert(letter_grades,\
    \ 'B-')\n\t\telseif v > 2.0 then\n\t\t\ttable.insert(letter_grades, 'C+')\n\t\t\
    elseif v > 1.7 then\n\t\t\ttable.insert(letter_grades, 'C')\n\t\telseif v > 1.3\
    \ then\n\t\t\ttable.insert(letter_grades, 'C-')\n\t\telseif v > 1.0 then\n\t\t\
    \ttable.insert(letter_grades, 'D+')\n\t\telseif v > 0.7 then\n\t\t\ttable.insert(letter_grades,\
    \ 'D')\n\t\telseif v > 0.0 then\n\t\t\ttable.insert(letter_grades, 'D-')\n\t\t\
    else\n\t\t\ttable.insert(letter_grades, 'E')\n\t\tend\n\tend\n\treturn letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_mapped\
    \ = {}\n  for _, g in ipairs(grades) do\n    local grade = ''\n    if g > 4.0\
    \ then\n      grade = 'Invalid GPA'\n    elseif g > 3.7 then\n      grade = 'A+'\n\
    \    elseif g > 3.3 then\n      grade = 'A'\n    elseif g > 3.0 then\n      grade\
    \ = 'A-'\n    elseif g > 2.7 then\n      grade = 'B+'\n    elseif g > 2.3 then\n\
    \      grade = 'B'\n    elseif g > 2.0 then\n      grade = 'B-'\n    elseif g\
    \ > 1.7 then\n      grade = 'C+'\n    elseif g > 1.3 then\n      grade = 'C'\n\
    \    elseif g > 1.0 then\n      grade = 'C-'\n    elseif g > 0.7 then\n      grade\
    \ = 'D+'\n    elseif g > 0.0 then\n      grade = 'D'\n    elseif g > -0.1 then\n\
    \      grade = 'D-'\n    else\n      grade = 'E'\n    end\n    table.insert(grades_mapped,\
    \ grade)\n  end\n  return grades_mapped\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lij9qfh.lua:63:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A\"}\nstack traceback:\n\t/tmp/tmp9lij9qfh.lua:63: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grade_equation\
    \ = {}\n    for gpa in ipairs(grades) do\n        if gpa >= 4.0 then\n       \
    \     table.insert(grade_equation, 'A+')\n        elseif gpa >= 3.7 then\n   \
    \         table.insert(grade_equation, 'A')\n        elseif gpa >= 3.3 then\n\
    \            table.insert(grade_equation, 'A-')\n        elseif gpa >= 3.0 then\n\
    \            table.insert(grade_equation, 'B+')\n        elseif gpa >= 2.7 then\n\
    \            table.insert(grade_equation, 'B')\n        elseif gpa >= 2.3 then\n\
    \            table.insert(grade_equation, 'B-')\n        elseif gpa >= 2.0 then\n\
    \            table.insert(grade_equation, 'C+')\n        elseif gpa >= 1.7 then\n\
    \            table.insert(grade_equation, 'C')\n        elseif gpa >= 1.3 then\n\
    \            table.insert(grade_equation, 'C-')\n        elseif gpa >= 1.0 then\n\
    \            table.insert(grade_equation, 'D+')\n        elseif gpa >= 0.7 then\n\
    \            table.insert(grade_equation, 'D')\n        elseif gpa > 0.0 then\n\
    \            table.insert(grade_equation, 'D-')\n        elseif gpa == 0.0 then\n\
    \            table.insert(grade_equation, 'E')\n        end\n    end\n    return\
    \ grade_equation\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpck1j8y43.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"D+\", \"C+\", \"\
    B+\", \"A+\", \"A+\"}\nstack traceback:\n\t/tmp/tmpck1j8y43.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i,v in ipairs(grades) do\n        if v >= 4.0 then\n         \
    \   table.insert(letter_grades, 'A+')\n        elseif v >= 3.7 then\n        \
    \    table.insert(letter_grades, 'A')\n        elseif v >= 3.3 then\n        \
    \    table.insert(letter_grades, 'A-')\n        elseif v >= 3.0 then\n       \
    \     table.insert(letter_grades, 'B+')\n        elseif v >= 2.7 then\n      \
    \      table.insert(letter_grades, 'B')\n        elseif v >= 2.3 then\n      \
    \      table.insert(letter_grades, 'B-')\n        elseif v >= 2.0 then\n     \
    \       table.insert(letter_grades, 'C+')\n        elseif v >= 1.7 then\n    \
    \        table.insert(letter_grades, 'C')\n        elseif v >= 1.3 then\n    \
    \        table.insert(letter_grades, 'C-')\n        elseif v >= 1.0 then\n   \
    \         table.insert(letter_grades, 'D+')\n        elseif v >= 0.7 then\n  \
    \          table.insert(letter_grades, 'D')\n        elseif v >= 0.0 then\n  \
    \          table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsiemiyj7.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpsiemiyj7.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    return {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppok4r7nk.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmppok4r7nk.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  -- Write your code\
    \ here:\n  local result = {}\n  for i,v in ipairs(grades) do\n    if v == 4.0\
    \ then\n      table.insert(result, 'A+')\n    elseif v > 3.7 then\n      table.insert(result,\
    \ 'A')\n    elseif v > 3.3 then\n      table.insert(result, 'A-')\n    elseif\
    \ v > 3.0 then\n      table.insert(result, 'B+')\n    elseif v > 2.7 then\n  \
    \    table.insert(result, 'B')\n    elseif v > 2.3 then\n      table.insert(result,\
    \ 'B-')\n    elseif v > 2.0 then\n      table.insert(result, 'C+')\n    elseif\
    \ v > 1.7 then\n      table.insert(result, 'C')\n    elseif v > 1.3 then\n   \
    \   table.insert(result, 'C-')\n    elseif v > 1.0 then\n      table.insert(result,\
    \ 'D+')\n    elseif v > 0.7 then\n      table.insert(result, 'D')\n    elseif\
    \ v > 0.0 then\n      table.insert(result, 'D-')\n    else\n      table.insert(result,\
    \ 'E')\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            grades_table[i] = 'A+'\n        elseif grade >= 3.7 then\n      \
    \      grades_table[i] = 'A'\n        elseif grade >= 3.3 then\n            grades_table[i]\
    \ = 'A-'\n        elseif grade >= 3.0 then\n            grades_table[i] = 'B+'\n\
    \        elseif grade >= 2.7 then\n            grades_table[i] = 'B'\n       \
    \ elseif grade >= 2.3 then\n            grades_table[i] = 'B-'\n        elseif\
    \ grade >= 2.0 then\n            grades_table[i] = 'C+'\n        elseif grade\
    \ >= 1.7 then\n            grades_table[i] = 'C'\n        elseif grade >= 1.3\
    \ then\n            grades_table[i] = 'C-'\n        elseif grade >= 1.0 then\n\
    \            grades_table[i] = 'D+'\n        elseif grade >= 0.7 then\n      \
    \      grades_table[i] = 'D'\n        elseif grade >= 0.0 then\n            grades_table[i]\
    \ = 'D-'\n        else\n            grades_table[i] = 'E'\n        end\n    end\n\
    \    return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptlzqmn5f.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmptlzqmn5f.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local function\
    \ equation(grade)\n    if grade >= 4.0 then return 'A+' end\n    if grade >= 3.7\
    \ then return 'A' end\n    if grade >= 3.3 then return 'A-' end\n    if grade\
    \ >= 3.0 then return 'B+' end\n    if grade >= 2.7 then return 'B' end\n    if\
    \ grade >= 2.3 then return 'B-' end\n    if grade >= 2.0 then return 'C+' end\n\
    \    if grade >= 1.7 then return 'C' end\n    if grade >= 1.3 then return 'C-'\
    \ end\n    if grade >= 1.0 then return 'D+' end\n    if grade >= 0.7 then return\
    \ 'D' end\n    if grade >= 0.0 then return 'D-' end\n    return 'E'\n  end\n \
    \ return map(equation, grades)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzg2p3ky2.lua:38:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpzg2p3ky2.lua:38:\
    \ in local 'candidate'\n\t/tmp/tmpzg2p3ky2.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_letters\
    \ = {}\n  for i = 1, #grades do\n    if grades[i] >= 4.0 then grades_letters[i]\
    \ = 'A+'\n    elseif grades[i] >= 3.7 then grades_letters[i] = 'A'\n    elseif\
    \ grades[i] >= 3.3 then grades_letters[i] = 'A-'\n    elseif grades[i] >= 3.0\
    \ then grades_letters[i] = 'B+'\n    elseif grades[i] >= 2.7 then grades_letters[i]\
    \ = 'B'\n    elseif grades[i] >= 2.3 then grades_letters[i] = 'B-'\n    elseif\
    \ grades[i] >= 2.0 then grades_letters[i] = 'C+'\n    elseif grades[i] >= 1.7\
    \ then grades_letters[i] = 'C'\n    elseif grades[i] >= 1.3 then grades_letters[i]\
    \ = 'C-'\n    elseif grades[i] >= 1.0 then grades_letters[i] = 'D+'\n    elseif\
    \ grades[i] >= 0.7 then grades_letters[i] = 'D'\n    elseif grades[i] >= 0.0 then\
    \ grades_letters[i] = 'D-'\n    else grades_letters[i] = 'E'\n    end\n  end\n\
    \  return grades_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphau6qxo8.lua:46:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmphau6qxo8.lua:46: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_map\
    \ = { \n        {4.0, 'A+'},\n        {3.7, 'A'},\n        {3.3, 'A-'},\n    \
    \    {3.0, 'B+'},\n        {2.7, 'B'},\n        {2.3, 'B-'},\n        {2.0, 'C+'},\n\
    \        {1.7, 'C'},\n        {1.3, 'C-'},\n        {1.0, 'D+'},\n        {0.7,\
    \ 'D'},\n        {0.0, 'D-'},\n        {-1.0, 'E'}\n    }\n    local grades_map_len\
    \ = #grades_map\n    local grades_len = #grades\n    local letters = {}\n    for\
    \ i = 1, grades_len do\n        local grade = grades[i]\n        for j = 1, grades_map_len\
    \ do\n            local grade_map = grades_map[j]\n            if grade > grade_map[1]\
    \ then\n                table.insert(letters, grade_map[2])\n                break\n\
    \            end\n        end\n    end\n    return letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9sjljpt.lua:57:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmpc9sjljpt.lua:57: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for _, grade in ipairs(grades) do\n    if grade == 4.0 then\n      table.insert(letter_grades,\
    \ 'A+')\n    elseif grade > 3.7 then\n      table.insert(letter_grades, 'A')\n\
    \    elseif grade > 3.3 then\n      table.insert(letter_grades, 'A-')\n    elseif\
    \ grade > 3.0 then\n      table.insert(letter_grades, 'B+')\n    elseif grade\
    \ > 2.7 then\n      table.insert(letter_grades, 'B')\n    elseif grade > 2.3 then\n\
    \      table.insert(letter_grades, 'B-')\n    elseif grade > 2.0 then\n      table.insert(letter_grades,\
    \ 'C+')\n    elseif grade > 1.7 then\n      table.insert(letter_grades, 'C')\n\
    \    elseif grade > 1.3 then\n      table.insert(letter_grades, 'C-')\n    elseif\
    \ grade > 1.0 then\n      table.insert(letter_grades, 'D+')\n    elseif grade\
    \ > 0.7 then\n      table.insert(letter_grades, 'D')\n    elseif grade > 0.0 then\n\
    \      table.insert(letter_grades, 'D-')\n    else\n      table.insert(letter_grades,\
    \ 'E')\n    end\n  end\n  return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local output\
    \ = {}\n    for index, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            output[index] = 'A+'\n        elseif grade >= 3.7 then\n        \
    \    output[index] = 'A'\n        elseif grade >= 3.3 then\n            output[index]\
    \ = 'A-'\n        elseif grade >= 3.0 then\n            output[index] = 'B+'\n\
    \        elseif grade >= 2.7 then\n            output[index] = 'B'\n        elseif\
    \ grade >= 2.3 then\n            output[index] = 'B-'\n        elseif grade >=\
    \ 2.0 then\n            output[index] = 'C+'\n        elseif grade >= 1.7 then\n\
    \            output[index] = 'C'\n        elseif grade >= 1.3 then\n         \
    \   output[index] = 'C-'\n        elseif grade >= 1.0 then\n            output[index]\
    \ = 'D+'\n        elseif grade >= 0.7 then\n            output[index] = 'D'\n\
    \        elseif grade >= 0.0 then\n            output[index] = 'D-'\n        else\n\
    \            output[index] = 'E'\n        end\n    end\n    return output\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xs2vc8u.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp1xs2vc8u.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            letter_grades[i] = 'A+'\n        elseif grade >= 3.7 then\n     \
    \       letter_grades[i] = 'A'\n        elseif grade >= 3.3 then\n           \
    \ letter_grades[i] = 'A-'\n        elseif grade >= 3.0 then\n            letter_grades[i]\
    \ = 'B+'\n        elseif grade >= 2.7 then\n            letter_grades[i] = 'B'\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = 'B-'\n     \
    \   elseif grade >= 2.0 then\n            letter_grades[i] = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grades[i] = 'C'\n        elseif grade\
    \ >= 1.3 then\n            letter_grades[i] = 'C-'\n        elseif grade >= 1.0\
    \ then\n            letter_grades[i] = 'D+'\n        elseif grade >= 0.7 then\n\
    \            letter_grades[i] = 'D'\n        elseif grade >= 0.0 then\n      \
    \      letter_grades[i] = 'D-'\n        elseif grade >= 0.0 then\n           \
    \ letter_grades[i] = 'E'\n        end\n    end\n    return letter_grades\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84c0b6ag.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp84c0b6ag.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local result\
    \ = {}\n    for _, v in ipairs(grades) do\n        if v == 4.0 then\n        \
    \    table.insert(result, 'A+')\n        elseif v > 3.7 then\n            table.insert(result,\
    \ 'A')\n        elseif v > 3.3 then\n            table.insert(result, 'A-')\n\
    \        elseif v > 3.0 then\n            table.insert(result, 'B+')\n       \
    \ elseif v > 2.7 then\n            table.insert(result, 'B')\n        elseif v\
    \ > 2.3 then\n            table.insert(result, 'B-')\n        elseif v > 2.0 then\n\
    \            table.insert(result, 'C+')\n        elseif v > 1.7 then\n       \
    \     table.insert(result, 'C')\n        elseif v > 1.3 then\n            table.insert(result,\
    \ 'C-')\n        elseif v > 1.0 then\n            table.insert(result, 'D+')\n\
    \        elseif v > 0.7 then\n            table.insert(result, 'D')\n        elseif\
    \ v > 0.0 then\n            table.insert(result, 'D-')\n        else\n       \
    \     table.insert(result, 'E')\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade == 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade > 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade > 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade > 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade > 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade > 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade > 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade > 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade > 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade > 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade > 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade > 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local mapping =\
    \ {\n    [4.0] = 'A+',\n    [3.7] = 'A',\n    [3.3] = 'A-',\n    [3.0] = 'B+',\n\
    \    [2.7] = 'B',\n    [2.3] = 'B-',\n    [2.0] = 'C+',\n    [1.7] = 'C',\n  \
    \  [1.3] = 'C-',\n    [1.0] = 'D+',\n    [0.7] = 'D',\n    [0.0] = 'D-',\n   \
    \ [-1.0] = 'E'\n  }\n  local letter_grades = {}\n  for i = 1, #grades do\n   \
    \ local grade = grades[i]\n    local letter_grade = mapping[grade]\n    table.insert(letter_grades,\
    \ letter_grade)\n  end\n  return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbkjmpkb.lua:50:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\"}\nstack traceback:\n\t/tmp/tmpjbkjmpkb.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  if not grades then\
    \ return {} end\n  local numeric_grades = {}\n  for _, v in ipairs(grades) do\n\
    \    local letter_grade\n    if v >= 4.0 then letter_grade = 'A+'\n    elseif\
    \ v >= 3.7 then letter_grade = 'A'\n    elseif v >= 3.3 then letter_grade = 'A-'\n\
    \    elseif v >= 3.0 then letter_grade = 'B+'\n    elseif v >= 2.7 then letter_grade\
    \ = 'B'\n    elseif v >= 2.3 then letter_grade = 'B-'\n    elseif v >= 2.0 then\
    \ letter_grade = 'C+'\n    elseif v >= 1.7 then letter_grade = 'C'\n    elseif\
    \ v >= 1.3 then letter_grade = 'C-'\n    elseif v >= 1.0 then letter_grade = 'D+'\n\
    \    elseif v >= 0.7 then letter_grade = 'D'\n    elseif v >= 0.0 then letter_grade\
    \ = 'D-'\n    elseif v == 0.0 then letter_grade = 'E'\n    end\n    table.insert(numeric_grades,\
    \ letter_grade)\n  end\n  return numeric_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcvofkr__.lua:49:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpcvofkr__.lua:49: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    -- Insert your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8k_ollqo.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp8k_ollqo.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter\
    \ = {}\n    for _, a in ipairs(grades) do\n        if a >= 4.0 then\n        \
    \    table.insert(letter, 'A+')\n        elseif a >= 3.7 then\n            table.insert(letter,\
    \ 'A')\n        elseif a >= 3.3 then\n            table.insert(letter, 'A-')\n\
    \        elseif a >= 3.0 then\n            table.insert(letter, 'B+')\n      \
    \  elseif a >= 2.7 then\n            table.insert(letter, 'B')\n        elseif\
    \ a >= 2.3 then\n            table.insert(letter, 'B-')\n        elseif a >= 2.0\
    \ then\n            table.insert(letter, 'C+')\n        elseif a >= 1.7 then\n\
    \            table.insert(letter, 'C')\n        elseif a >= 1.3 then\n       \
    \     table.insert(letter, 'C-')\n        elseif a >= 1.0 then\n            table.insert(letter,\
    \ 'D+')\n        elseif a >= 0.7 then\n            table.insert(letter, 'D')\n\
    \        elseif a > 0.0 then\n            table.insert(letter, 'D-')\n       \
    \ else\n            table.insert(letter, 'E')\n        end\n    end\n    return\
    \ letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1i1lyq5c.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp1i1lyq5c.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal new_grades\
    \ = {}\n\tfor k,v in pairs(grades) do\n\t\tif v > 4.0 then\n\t\t\tnew_grades[k]\
    \ = 'A+'\n\t\telseif v > 3.7 then\n\t\t\tnew_grades[k] = 'A'\n\t\telseif v > 3.3\
    \ then\n\t\t\tnew_grades[k] = 'A-'\n\t\telseif v > 3.0 then\n\t\t\tnew_grades[k]\
    \ = 'B+'\n\t\telseif v > 2.7 then\n\t\t\tnew_grades[k] = 'B'\n\t\telseif v > 2.3\
    \ then\n\t\t\tnew_grades[k] = 'B-'\n\t\telseif v > 2.0 then\n\t\t\tnew_grades[k]\
    \ = 'C+'\n\t\telseif v > 1.7 then\n\t\t\tnew_grades[k] = 'C'\n\t\telseif v > 1.3\
    \ then\n\t\t\tnew_grades[k] = 'C-'\n\t\telseif v > 1.0 then\n\t\t\tnew_grades[k]\
    \ = 'D+'\n\t\telseif v > 0.7 then\n\t\t\tnew_grades[k] = 'D'\n\t\telseif v > 0.0\
    \ then\n\t\t\tnew_grades[k] = 'D-'\n\t\telse\n\t\t\tnew_grades[k] = 'E'\n\t\t\
    end\n\tend\n\treturn new_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ldwgem9.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmp8ldwgem9.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_dict\
    \ = {\n        [\"A+\"] = 4.0,\n        [\"A\"] = 3.7,\n        [\"A-\"] = 3.3,\n\
    \        [\"B+\"] = 3.0,\n        [\"B\"] = 2.7,\n        [\"B-\"] = 2.3,\n  \
    \      [\"C+\"] = 2.0,\n        [\"C\"] = 1.7,\n        [\"C-\"] = 1.3,\n    \
    \    [\"D+\"] = 1.0,\n        [\"D\"] = 0.7,\n        [\"D-\"] = 0.0,\n      \
    \  [\"E\"] = 0.0\n    }\n    local reverse_grades_dict = {}\n    for k, v in pairs(grades_dict)\
    \ do\n        reverse_grades_dict[v] = k\n    end\n    local grades_table = {}\n\
    \    for i = 1, #grades do\n        local gpa = grades[i]\n        local grade\
    \ = reverse_grades_dict[gpa]\n        if grade then\n            grades_table[i]\
    \ = grade\n        else\n            local grade_list = {}\n            for grade,\
    \ gpa in pairs(grades_dict) do\n                if gpa < gpa then\n          \
    \          grade_list[#grade_list + 1] = grade\n                end\n        \
    \    end\n            grades_table[i] = grade_list[1]\n        end\n    end\n\
    \    return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjsdn1b3o.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\"}\nstack traceback:\n\t/tmp/tmpjsdn1b3o.lua:64: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local function\
    \ grade(gpa)\n    if gpa == 4.0 then\n      return 'A+'\n    elseif gpa > 3.7\
    \ then\n      return 'A'\n    elseif gpa > 3.3 then\n      return 'A-'\n    elseif\
    \ gpa > 3.0 then\n      return 'B+'\n    elseif gpa > 2.7 then\n      return 'B'\n\
    \    elseif gpa > 2.3 then\n      return 'B-'\n    elseif gpa > 2.0 then\n   \
    \   return 'C+'\n    elseif gpa > 1.7 then\n      return 'C'\n    elseif gpa >\
    \ 1.3 then\n      return 'C-'\n    elseif gpa > 1.0 then\n      return 'D+'\n\
    \    elseif gpa > 0.7 then\n      return 'D'\n    elseif gpa > 0.0 then\n    \
    \  return 'D-'\n    else\n      return 'E'\n    end\n  end\n  local result = {}\n\
    \  for _,v in ipairs(grades) do\n    table.insert(result, grade(v))\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal grades =\
    \ grades\n\tlocal letter_grades = {}\n\tfor i = 1, #grades do\n\t\tif grades[i]\
    \ >= 4.0 then\n\t\t\ttable.insert(letter_grades, 'A+')\n\t\telseif grades[i] >\
    \ 3.7 then\n\t\t\ttable.insert(letter_grades, 'A')\n\t\telseif grades[i] > 3.3\
    \ then\n\t\t\ttable.insert(letter_grades, 'A-')\n\t\telseif grades[i] > 3.0 then\n\
    \t\t\ttable.insert(letter_grades, 'B+')\n\t\telseif grades[i] > 2.7 then\n\t\t\
    \ttable.insert(letter_grades, 'B')\n\t\telseif grades[i] > 2.3 then\n\t\t\ttable.insert(letter_grades,\
    \ 'B-')\n\t\telseif grades[i] > 2.0 then\n\t\t\ttable.insert(letter_grades, 'C+')\n\
    \t\telseif grades[i] > 1.7 then\n\t\t\ttable.insert(letter_grades, 'C')\n\t\t\
    elseif grades[i] > 1.3 then\n\t\t\ttable.insert(letter_grades, 'C-')\n\t\telseif\
    \ grades[i] > 1.0 then\n\t\t\ttable.insert(letter_grades, 'D+')\n\t\telseif grades[i]\
    \ > 0.7 then\n\t\t\ttable.insert(letter_grades, 'D')\n\t\telseif grades[i] > 0.0\
    \ then\n\t\t\ttable.insert(letter_grades, 'D-')\n\t\telse\n\t\t\ttable.insert(letter_grades,\
    \ 'E')\n\t\tend\n\tend\n\treturn letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for _, grade in ipairs(grades) do\n    if grade > 4.0 then\n      table.insert(letter_grades,\
    \ 'A+')\n    elseif grade > 3.7 then\n      table.insert(letter_grades, 'A')\n\
    \    elseif grade > 3.3 then\n      table.insert(letter_grades, 'A-')\n    elseif\
    \ grade > 3.0 then\n      table.insert(letter_grades, 'B+')\n    elseif grade\
    \ > 2.7 then\n      table.insert(letter_grades, 'B')\n    elseif grade > 2.3 then\n\
    \      table.insert(letter_grades, 'B-')\n    elseif grade > 2.0 then\n      table.insert(letter_grades,\
    \ 'C+')\n    elseif grade > 1.7 then\n      table.insert(letter_grades, 'C')\n\
    \    elseif grade > 1.3 then\n      table.insert(letter_grades, 'C-')\n    elseif\
    \ grade > 1.0 then\n      table.insert(letter_grades, 'D+')\n    elseif grade\
    \ > 0.7 then\n      table.insert(letter_grades, 'D')\n    elseif grade > 0.0 then\n\
    \      table.insert(letter_grades, 'D-')\n    else\n      table.insert(letter_grades,\
    \ 'E')\n    end\n  end\n  return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe09wi2r9.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmpe09wi2r9.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal grades =\
    \ {'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'}\n\t\
    local grades = grades.reverse()\n\t-- fill out code here\n\treturn grades\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5jnaqzf.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmph5jnaqzf.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmph5jnaqzf.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local conversion\
    \ = {\n    {4.0, \"A+\"}, {3.7, \"A\"}, {3.3, \"A-\"}, {3.0, \"B+\"}, {2.7, \"\
    B\"}, {2.3, \"B-\"},\n    {2.0, \"C+\"}, {1.7, \"C\"}, {1.3, \"C-\"}, {1.0, \"\
    D+\"}, {0.7, \"D\"}, {0.0, \"D-\"},\n    {-1.0, \"E\"}\n  }\n  local function\
    \ grade_to_letter(grade)\n    for i, v in ipairs(conversion) do\n      if grade\
    \ >= v[1] then\n        return v[2]\n      end\n    end\n  end\n  return map(grade_to_letter,\
    \ grades)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiyd5g34u.lua:35:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpiyd5g34u.lua:35:\
    \ in local 'candidate'\n\t/tmp/tmpiyd5g34u.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grade_letters\
    \ = {}\n  for i,grade in ipairs(grades) do\n    if grade >= 4.0 then\n      grade_letters[i]\
    \ = 'A+'\n    elseif grade >= 3.7 then\n      grade_letters[i] = 'A'\n    elseif\
    \ grade >= 3.3 then\n      grade_letters[i] = 'A-'\n    elseif grade >= 3.0 then\n\
    \      grade_letters[i] = 'B+'\n    elseif grade >= 2.7 then\n      grade_letters[i]\
    \ = 'B'\n    elseif grade >= 2.3 then\n      grade_letters[i] = 'B-'\n    elseif\
    \ grade >= 2.0 then\n      grade_letters[i] = 'C+'\n    elseif grade >= 1.7 then\n\
    \      grade_letters[i] = 'C'\n    elseif grade >= 1.3 then\n      grade_letters[i]\
    \ = 'C-'\n    elseif grade >= 1.0 then\n      grade_letters[i] = 'D+'\n    elseif\
    \ grade >= 0.7 then\n      grade_letters[i] = 'D'\n    elseif grade >= 0.0 then\n\
    \      grade_letters[i] = 'D-'\n    else\n      grade_letters[i] = 'E'\n    end\n\
    \  end\n  return grade_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jteodco.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp5jteodco.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local result =\
    \ {}\n  for _, v in ipairs(grades) do\n    table.insert(result, (\n      v >=\
    \ 4 and 'A+' or\n      v >= 3.7 and 'A' or\n      v >= 3.3 and 'A-' or\n     \
    \ v >= 3 and 'B+' or\n      v >= 2.7 and 'B' or\n      v >= 2.3 and 'B-' or\n\
    \      v >= 2 and 'C+' or\n      v >= 1.7 and 'C' or\n      v >= 1.3 and 'C-'\
    \ or\n      v >= 1 and 'D+' or\n      v >= 0.7 and 'D' or\n      v >= 0 and 'D-'\
    \ or\n      'E'\n    ))\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl9nfqd1.lua:47:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpkl9nfqd1.lua:47: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    if (type(grades)\
    \ ~= \"table\") then return nil end\n    local grades_list = {}\n    for _, gp\
    \ in ipairs(grades) do\n        if (type(gp) ~= \"number\") then return nil end\n\
    \        if (gp == 4.0) then\n            table.insert(grades_list, \"A+\")\n\
    \        elseif (gp > 3.7) then\n            table.insert(grades_list, \"A\")\n\
    \        elseif (gp > 3.3) then\n            table.insert(grades_list, \"A-\"\
    )\n        elseif (gp > 3.0) then\n            table.insert(grades_list, \"B+\"\
    )\n        elseif (gp > 2.7) then\n            table.insert(grades_list, \"B\"\
    )\n        elseif (gp > 2.3) then\n            table.insert(grades_list, \"B-\"\
    )\n        elseif (gp > 2.0) then\n            table.insert(grades_list, \"C+\"\
    )\n        elseif (gp > 1.7) then\n            table.insert(grades_list, \"C\"\
    )\n        elseif (gp > 1.3) then\n            table.insert(grades_list, \"C-\"\
    )\n        elseif (gp > 1.0) then\n            table.insert(grades_list, \"D+\"\
    )\n        elseif (gp > 0.7) then\n            table.insert(grades_list, \"D\"\
    )\n        elseif (gp > 0.0) then\n            table.insert(grades_list, \"D-\"\
    )\n        else\n            table.insert(grades_list, \"E\")\n        end\n \
    \   end\n    return grades_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  -- your code goes\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmq22ej7q.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpmq22ej7q.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  -- write code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwlr13hma.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpwlr13hma.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letters =\
    \ { \"E\", \"D-\", \"D\", \"D+\", \"C-\", \"C\", \"C+\", \"B-\", \"B\", \"B+\"\
    , \"A-\", \"A\", \"A+\" }\n  local limit = {0, 0.7, 1.0, 1.3, 1.7, 2.0, 2.3, 2.7,\
    \ 3.0, 3.3, 3.7, 4.0}\n  local letter_grades = {}\n  for _, grade in ipairs(grades)\
    \ do\n    for i = 1, #limit do\n      if (grade >= limit[i]) then\n        table.insert(letter_grades,\
    \ letters[i])\n        break\n      end\n    end\n  end\n  return letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzchet4j3.lua:40:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"E\", \"E\", \"\
    E\", \"E\", \"E\"}\nstack traceback:\n\t/tmp/tmpzchet4j3.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    return map(grades,\
    \ function(grade)\n        if grade >= 4.0 then\n            return 'A+'\n   \
    \     elseif grade >= 3.7 then\n            return 'A'\n        elseif grade >=\
    \ 3.3 then\n            return 'A-'\n        elseif grade >= 3.0 then\n      \
    \      return 'B+'\n        elseif grade >= 2.7 then\n            return 'B'\n\
    \        elseif grade >= 2.3 then\n            return 'B-'\n        elseif grade\
    \ >= 2.0 then\n            return 'C+'\n        elseif grade >= 1.7 then\n   \
    \         return 'C'\n        elseif grade >= 1.3 then\n            return 'C-'\n\
    \        elseif grade >= 1.0 then\n            return 'D+'\n        elseif grade\
    \ >= 0.7 then\n            return 'D'\n        elseif grade >= 0.0 then\n    \
    \        return 'D-'\n        elseif grade >= 0.0 then\n            return 'E'\n\
    \        end\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwfbw0q6p.lua:23:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpwfbw0q6p.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpwfbw0q6p.lua:57: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local result =\
    \ {}\n  local grade_map = {\n    [4.0] = 'A+',\n    [3.7] = 'A',\n    [3.3] =\
    \ 'A-',\n    [3.0] = 'B+',\n    [2.7] = 'B',\n    [2.3] = 'B-',\n    [2.0] = 'C+',\n\
    \    [1.7] = 'C',\n    [1.3] = 'C-',\n    [1.0] = 'D+',\n    [0.7] = 'D',\n  \
    \  [0.0] = 'D-',\n    [-1.0] = 'E'\n  }\n  for _,v in ipairs(grades) do\n    for\
    \ k, l in pairs(grade_map) do\n      if v >= k then\n        table.insert(result,\
    \ l)\n        break\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfy__e0gn.lua:53:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"D-\", \"D-\", \"\
    D-\", \"D-\", \"D-\"}\nstack traceback:\n\t/tmp/tmpfy__e0gn.lua:53: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    return {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzvzy_91c.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpzvzy_91c.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local output =\
    \ {}\n  for _, grade in ipairs(grades) do\n    if grade >= 4.0 then\n      table.insert(output,\
    \ 'A+')\n    elseif grade >= 3.7 then\n      table.insert(output, 'A')\n    elseif\
    \ grade >= 3.3 then\n      table.insert(output, 'A-')\n    elseif grade >= 3.0\
    \ then\n      table.insert(output, 'B+')\n    elseif grade >= 2.7 then\n     \
    \ table.insert(output, 'B')\n    elseif grade >= 2.3 then\n      table.insert(output,\
    \ 'B-')\n    elseif grade >= 2.0 then\n      table.insert(output, 'C+')\n    elseif\
    \ grade >= 1.7 then\n      table.insert(output, 'C')\n    elseif grade >= 1.3\
    \ then\n      table.insert(output, 'C-')\n    elseif grade >= 1.0 then\n     \
    \ table.insert(output, 'D+')\n    elseif grade >= 0.7 then\n      table.insert(output,\
    \ 'D')\n    elseif grade >= 0.0 then\n      table.insert(output, 'D-')\n    elseif\
    \ grade >= 0.0 then\n      table.insert(output, 'E')\n    end\n  end\n  return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4k3a9o14.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp4k3a9o14.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\t-- write your code\
    \ here\n\tlocal letter_grades = {}\n\tfor _, grade in ipairs(grades) do\n\t\t\
    if grade >= 4.0 then\n\t\t\ttable.insert(letter_grades, 'A+')\n\t\telseif grade\
    \ >= 3.7 then\n\t\t\ttable.insert(letter_grades, 'A')\n\t\telseif grade >= 3.3\
    \ then\n\t\t\ttable.insert(letter_grades, 'A-')\n\t\telseif grade >= 3.0 then\n\
    \t\t\ttable.insert(letter_grades, 'B+')\n\t\telseif grade >= 2.7 then\n\t\t\t\
    table.insert(letter_grades, 'B')\n\t\telseif grade >= 2.3 then\n\t\t\ttable.insert(letter_grades,\
    \ 'B-')\n\t\telseif grade >= 2.0 then\n\t\t\ttable.insert(letter_grades, 'C+')\n\
    \t\telseif grade >= 1.7 then\n\t\t\ttable.insert(letter_grades, 'C')\n\t\telseif\
    \ grade >= 1.3 then\n\t\t\ttable.insert(letter_grades, 'C-')\n\t\telseif grade\
    \ >= 1.0 then\n\t\t\ttable.insert(letter_grades, 'D+')\n\t\telseif grade >= 0.7\
    \ then\n\t\t\ttable.insert(letter_grades, 'D')\n\t\telseif grade >= 0.0 then\n\
    \t\t\ttable.insert(letter_grades, 'D-')\n\t\telse\n\t\t\ttable.insert(letter_grades,\
    \ 'E')\n\t\tend\n\tend\n\treturn letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzscdm4gx.lua:60:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpzscdm4gx.lua:60: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grade_vals\
    \ = {}\n  local letters = {'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-',\
    \ 'D+', 'D', 'D-', 'E'}\n  for i = 1,#grades do\n    if (grades[i] == 4.0) then\n\
    \      table.insert(grade_vals, 1)\n    elseif grades[i] > 3.7 then\n      table.insert(grade_vals,\
    \ 2)\n    elseif grades[i] > 3.3 then\n      table.insert(grade_vals, 3)\n   \
    \ elseif grades[i] > 3.0 then\n      table.insert(grade_vals, 4)\n    elseif grades[i]\
    \ > 2.7 then\n      table.insert(grade_vals, 5)\n    elseif grades[i] > 2.3 then\n\
    \      table.insert(grade_vals, 6)\n    elseif grades[i] > 2.0 then\n      table.insert(grade_vals,\
    \ 7)\n    elseif grades[i] > 1.7 then\n      table.insert(grade_vals, 8)\n   \
    \ elseif grades[i] > 1.3 then\n      table.insert(grade_vals, 9)\n    elseif grades[i]\
    \ > 1.0 then\n      table.insert(grade_vals, 10)\n    elseif grades[i] > 0.7 then\n\
    \      table.insert(grade_vals, 11)\n    elseif grades[i] > 0.0 then\n      table.insert(grade_vals,\
    \ 12)\n    else\n      table.insert(grade_vals, 13)\n    end\n  end\n  local new_grades\
    \ = {}\n  for i = 1,#grade_vals do\n    table.insert(new_grades, letters[grade_vals[i]])\n\
    \  end\n  return new_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades\
    \ = {'E', 'D-', 'D', 'D+', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+'}\n\
    \    local letter = {}\n    for x in ipairs(grades) do\n        letter = grades[x]\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppghjkdy4.lua:33:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmppghjkdy4.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\t-- initialize letters\n\
    \tlocal letters = {}\n\t-- loop over all the grades\n\tfor _, grade in ipairs(grades)\
    \ do\n\t\t-- calculate letter grade\n\t\tlocal letter = nil\n\t\tif grade >= 4.0\
    \ then\n\t\t\tletter = 'A+'\n\t\telseif grade >= 3.7 then\n\t\t\tletter = 'A'\n\
    \t\telseif grade >= 3.3 then\n\t\t\tletter = 'A-'\n\t\telseif grade >= 3.0 then\n\
    \t\t\tletter = 'B+'\n\t\telseif grade >= 2.7 then\n\t\t\tletter = 'B'\n\t\telseif\
    \ grade >= 2.3 then\n\t\t\tletter = 'B-'\n\t\telseif grade >= 2.0 then\n\t\t\t\
    letter = 'C+'\n\t\telseif grade >= 1.7 then\n\t\t\tletter = 'C'\n\t\telseif grade\
    \ >= 1.3 then\n\t\t\tletter = 'C-'\n\t\telseif grade >= 1.0 then\n\t\t\tletter\
    \ = 'D+'\n\t\telseif grade >= 0.7 then\n\t\t\tletter = 'D'\n\t\telseif grade >=\
    \ 0.0 then\n\t\t\tletter = 'D-'\n\t\telse\n\t\t\tletter = 'E'\n\t\tend\n\t\t--\
    \ add to the table\n\t\ttable.insert(letters, letter)\n\tend\n\t-- return the\
    \ letters\n\treturn letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16rhrw6q.lua:66:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp16rhrw6q.lua:66: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local function\
    \ grade_equation(gpa)\n    local result = ''\n    if gpa >= 4.0 then\n      result\
    \ = 'A+'\n    elseif gpa >= 3.7 then\n      result = 'A'\n    elseif gpa >= 3.3\
    \ then\n      result = 'A-'\n    elseif gpa >= 3.0 then\n      result = 'B+'\n\
    \    elseif gpa >= 2.7 then\n      result = 'B'\n    elseif gpa >= 2.3 then\n\
    \      result = 'B-'\n    elseif gpa >= 2.0 then\n      result = 'C+'\n    elseif\
    \ gpa >= 1.7 then\n      result = 'C'\n    elseif gpa >= 1.3 then\n      result\
    \ = 'C-'\n    elseif gpa >= 1.0 then\n      result = 'D+'\n    elseif gpa >= 0.7\
    \ then\n      result = 'D'\n    elseif gpa >= 0.0 then\n      result = 'D-'\n\
    \    else\n      result = 'E'\n    end\n    return result\n  end\n  local result\
    \ = {}\n  for _, v in ipairs(grades) do\n    table.insert(result, grade_equation(v))\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0nvvp5y.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmps0nvvp5y.lua:64: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] == 4.0 then\n        \
    \    table.insert(letter_grades, 'A+')\n        elseif grades[i] > 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grades[i] > 3.3\
    \ then\n            table.insert(letter_grades, 'A-')\n        elseif grades[i]\
    \ > 3.0 then\n            table.insert(letter_grades, 'B+')\n        elseif grades[i]\
    \ > 2.7 then\n            table.insert(letter_grades, 'B')\n        elseif grades[i]\
    \ > 2.3 then\n            table.insert(letter_grades, 'B-')\n        elseif grades[i]\
    \ > 2.0 then\n            table.insert(letter_grades, 'C+')\n        elseif grades[i]\
    \ > 1.7 then\n            table.insert(letter_grades, 'C')\n        elseif grades[i]\
    \ > 1.3 then\n            table.insert(letter_grades, 'C-')\n        elseif grades[i]\
    \ > 1.0 then\n            table.insert(letter_grades, 'D+')\n        elseif grades[i]\
    \ > 0.7 then\n            table.insert(letter_grades, 'D')\n        elseif grades[i]\
    \ > 0.0 then\n            table.insert(letter_grades, 'D-')\n        else\n  \
    \          table.insert(letter_grades, 'E')\n        end\n    end\n    return\
    \ letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local function\
    \ to_letter(grade)\n        if grade >= 4.0 then return 'A+'\n        elseif grade\
    \ >= 3.7 then return 'A'\n        elseif grade >= 3.3 then return 'A-'\n     \
    \   elseif grade >= 3.0 then return 'B+'\n        elseif grade >= 2.7 then return\
    \ 'B'\n        elseif grade >= 2.3 then return 'B-'\n        elseif grade >= 2.0\
    \ then return 'C+'\n        elseif grade >= 1.7 then return 'C'\n        elseif\
    \ grade >= 1.3 then return 'C-'\n        elseif grade >= 1.0 then return 'D+'\n\
    \        elseif grade >= 0.7 then return 'D'\n        elseif grade >= 0.0 then\
    \ return 'D-'\n        else return 'E'\n        end\n    end\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        table.insert(letter_grades,\
    \ to_letter(grade))\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6oib2klf.lua:49:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp6oib2klf.lua:49: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal grades =\
    \ grades\n\tlocal function helper(grades, index, grade, new_grade)\n\t\tlocal\
    \ index = index or 1\n\t\tlocal new_grade = new_grade or {}\n\t\tlocal grade =\
    \ grade or grades[index]\n\t\tif index > #grades then\n\t\t\treturn new_grade\n\
    \t\tend\n\t\tif grade >= 4.0 then\n\t\t\ttable.insert(new_grade, 'A+')\n\t\telseif\
    \ grade >= 3.7 then\n\t\t\ttable.insert(new_grade, 'A')\n\t\telseif grade >= 3.3\
    \ then\n\t\t\ttable.insert(new_grade, 'A-')\n\t\telseif grade >= 3.0 then\n\t\t\
    \ttable.insert(new_grade, 'B+')\n\t\telseif grade >= 2.7 then\n\t\t\ttable.insert(new_grade,\
    \ 'B')\n\t\telseif grade >= 2.3 then\n\t\t\ttable.insert(new_grade, 'B-')\n\t\t\
    elseif grade >= 2.0 then\n\t\t\ttable.insert(new_grade, 'C+')\n\t\telseif grade\
    \ >= 1.7 then\n\t\t\ttable.insert(new_grade, 'C')\n\t\telseif grade >= 1.3 then\n\
    \t\t\ttable.insert(new_grade, 'C-')\n\t\telseif grade >= 1.0 then\n\t\t\ttable.insert(new_grade,\
    \ 'D+')\n\t\telseif grade >= 0.7 then\n\t\t\ttable.insert(new_grade, 'D')\n\t\t\
    elseif grade >= 0.0 then\n\t\t\ttable.insert(new_grade, 'D-')\n\t\telse\n\t\t\t\
    table.insert(new_grade, 'E')\n\t\tend\n\t\tindex = index + 1\n\t\treturn helper(grades,\
    \ index, grades[index], new_grade)\n\tend\n\treturn helper(grades)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5745lap7.lua:67:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp5745lap7.lua:67: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i = 1, #grades do\n    if grades[i] > 4.0 then\n      letter_grades[i]\
    \ = 'A+'\n    elseif grades[i] > 3.7 then\n      letter_grades[i] = 'A'\n    elseif\
    \ grades[i] > 3.3 then\n      letter_grades[i] = 'A-'\n    elseif grades[i] >\
    \ 3.0 then\n      letter_grades[i] = 'B+'\n    elseif grades[i] > 2.7 then\n \
    \     letter_grades[i] = 'B'\n    elseif grades[i] > 2.3 then\n      letter_grades[i]\
    \ = 'B-'\n    elseif grades[i] > 2.0 then\n      letter_grades[i] = 'C+'\n   \
    \ elseif grades[i] > 1.7 then\n      letter_grades[i] = 'C'\n    elseif grades[i]\
    \ > 1.3 then\n      letter_grades[i] = 'C-'\n    elseif grades[i] > 1.0 then\n\
    \      letter_grades[i] = 'D+'\n    elseif grades[i] > 0.7 then\n      letter_grades[i]\
    \ = 'D'\n    elseif grades[i] > 0.0 then\n      letter_grades[i] = 'D-'\n    elseif\
    \ grades[i] == 0.0 then\n      letter_grades[i] = 'E'\n    end\n  end\n  return\
    \ letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmmd3qle.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmpkmmd3qle.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tif #grades < 1\
    \ then return {} end\n\tlocal result = {}\n\tfor i = 1, #grades do\n\t\tlocal\
    \ grade = grades[i]\n\t\tif grade >= 4.0 then\n\t\t\tresult[i] = 'A+'\n\t\telseif\
    \ grade >= 3.7 then\n\t\t\tresult[i] = 'A'\n\t\telseif grade >= 3.3 then\n\t\t\
    \tresult[i] = 'A-'\n\t\telseif grade >= 3.0 then\n\t\t\tresult[i] = 'B+'\n\t\t\
    elseif grade >= 2.7 then\n\t\t\tresult[i] = 'B'\n\t\telseif grade >= 2.3 then\n\
    \t\t\tresult[i] = 'B-'\n\t\telseif grade >= 2.0 then\n\t\t\tresult[i] = 'C+'\n\
    \t\telseif grade >= 1.7 then\n\t\t\tresult[i] = 'C'\n\t\telseif grade >= 1.3 then\n\
    \t\t\tresult[i] = 'C-'\n\t\telseif grade >= 1.0 then\n\t\t\tresult[i] = 'D+'\n\
    \t\telseif grade >= 0.7 then\n\t\t\tresult[i] = 'D'\n\t\telseif grade >= 0.0 then\n\
    \t\t\tresult[i] = 'D-'\n\t\telse\n\t\t\tresult[i] = 'E'\n\t\tend\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx35683_c.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpx35683_c.lua:61: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letters =\
    \ {}\n  for i, grade in ipairs(grades) do\n    local letter = 'E'\n    if grade\
    \ >= 4.0 then\n      letter = 'A+'\n    elseif grade >= 3.7 then\n      letter\
    \ = 'A'\n    elseif grade >= 3.3 then\n      letter = 'A-'\n    elseif grade >=\
    \ 3.0 then\n      letter = 'B+'\n    elseif grade >= 2.7 then\n      letter =\
    \ 'B'\n    elseif grade >= 2.3 then\n      letter = 'B-'\n    elseif grade >=\
    \ 2.0 then\n      letter = 'C+'\n    elseif grade >= 1.7 then\n      letter =\
    \ 'C'\n    elseif grade >= 1.3 then\n      letter = 'C-'\n    elseif grade >=\
    \ 1.0 then\n      letter = 'D+'\n    elseif grade >= 0.7 then\n      letter =\
    \ 'D'\n    elseif grade >= 0.0 then\n      letter = 'D-'\n    end\n    table.insert(letters,\
    \ letter)\n  end\n  return letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrtbpjy3.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpjrtbpjy3.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grade_letters\
    \ = {}\n    local letter_grade\n    for i = 1, #grades do\n        if grades[i]\
    \ >= 4.0 then\n            letter_grade = 'A+'\n        elseif grades[i] > 3.7\
    \ then\n            letter_grade = 'A'\n        elseif grades[i] > 3.3 then\n\
    \            letter_grade = 'A-'\n        elseif grades[i] > 3.0 then\n      \
    \      letter_grade = 'B+'\n        elseif grades[i] > 2.7 then\n            letter_grade\
    \ = 'B'\n        elseif grades[i] > 2.3 then\n            letter_grade = 'B-'\n\
    \        elseif grades[i] > 2.0 then\n            letter_grade = 'C+'\n      \
    \  elseif grades[i] > 1.7 then\n            letter_grade = 'C'\n        elseif\
    \ grades[i] > 1.3 then\n            letter_grade = 'C-'\n        elseif grades[i]\
    \ > 1.0 then\n            letter_grade = 'D+'\n        elseif grades[i] > 0.7\
    \ then\n            letter_grade = 'D'\n        elseif grades[i] > 0.0 then\n\
    \            letter_grade = 'D-'\n        else\n            letter_grade = 'E'\n\
    \        end\n        table.insert(grade_letters, letter_grade)\n    end\n   \
    \ return grade_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for i, v in ipairs(grades) do\n    if v > 4.0 then\n      table.insert(letter_grades,\
    \ 'A+')\n    elseif v > 3.7 then\n      table.insert(letter_grades, 'A')\n   \
    \ elseif v > 3.3 then\n      table.insert(letter_grades, 'A-')\n    elseif v >\
    \ 3.0 then\n      table.insert(letter_grades, 'B+')\n    elseif v > 2.7 then\n\
    \      table.insert(letter_grades, 'B')\n    elseif v > 2.3 then\n      table.insert(letter_grades,\
    \ 'B-')\n    elseif v > 2.0 then\n      table.insert(letter_grades, 'C+')\n  \
    \  elseif v > 1.7 then\n      table.insert(letter_grades, 'C')\n    elseif v >\
    \ 1.3 then\n      table.insert(letter_grades, 'C-')\n    elseif v > 1.0 then\n\
    \      table.insert(letter_grades, 'D+')\n    elseif v > 0.7 then\n      table.insert(letter_grades,\
    \ 'D')\n    elseif v > 0.0 then\n      table.insert(letter_grades, 'D-')\n   \
    \ else\n      table.insert(letter_grades, 'E')\n    end\n  end\n  return letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6sf359e.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmpd6sf359e.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal lst = {}\n\
    \tfor _, gp in ipairs(grades) do\n\t\tif gp >= 4.0 then\n\t\t\ttable.insert(lst,\
    \ 'A+')\n\t\telseif gp >= 3.7 then\n\t\t\ttable.insert(lst, 'A')\n\t\telseif gp\
    \ >= 3.3 then\n\t\t\ttable.insert(lst, 'A-')\n\t\telseif gp >= 3.0 then\n\t\t\t\
    table.insert(lst, 'B+')\n\t\telseif gp >= 2.7 then\n\t\t\ttable.insert(lst, 'B')\n\
    \t\telseif gp >= 2.3 then\n\t\t\ttable.insert(lst, 'B-')\n\t\telseif gp >= 2.0\
    \ then\n\t\t\ttable.insert(lst, 'C+')\n\t\telseif gp >= 1.7 then\n\t\t\ttable.insert(lst,\
    \ 'C')\n\t\telseif gp >= 1.3 then\n\t\t\ttable.insert(lst, 'C-')\n\t\telseif gp\
    \ >= 1.0 then\n\t\t\ttable.insert(lst, 'D+')\n\t\telseif gp >= 0.7 then\n\t\t\t\
    table.insert(lst, 'D')\n\t\telseif gp >= 0.0 then\n\t\t\ttable.insert(lst, 'D-')\n\
    \t\telseif gp < 0.0 then\n\t\t\ttable.insert(lst, 'E')\n\t\tend\n\tend\n\treturn\
    \ lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdfv29bc.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpxdfv29bc.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  -- Write your code\
    \ here!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72to7tas.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp72to7tas.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    -- Good luck!\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ie6_kgn.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp_ie6_kgn.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal letter_grades\
    \ = {}\n\tfor i = 1, #grades do\n\t\tlocal grade = grades[i]\n\t\tif grade > 4.0\
    \ then\n\t\t\ttable.insert(letter_grades, 'A+')\n\t\telseif grade > 3.7 then\n\
    \t\t\ttable.insert(letter_grades, 'A')\n\t\telseif grade > 3.3 then\n\t\t\ttable.insert(letter_grades,\
    \ 'A-')\n\t\telseif grade > 3.0 then\n\t\t\ttable.insert(letter_grades, 'B+')\n\
    \t\telseif grade > 2.7 then\n\t\t\ttable.insert(letter_grades, 'B')\n\t\telseif\
    \ grade > 2.3 then\n\t\t\ttable.insert(letter_grades, 'B-')\n\t\telseif grade\
    \ > 2.0 then\n\t\t\ttable.insert(letter_grades, 'C+')\n\t\telseif grade > 1.7\
    \ then\n\t\t\ttable.insert(letter_grades, 'C')\n\t\telseif grade > 1.3 then\n\t\
    \t\ttable.insert(letter_grades, 'C-')\n\t\telseif grade > 1.0 then\n\t\t\ttable.insert(letter_grades,\
    \ 'D+')\n\t\telseif grade > 0.7 then\n\t\t\ttable.insert(letter_grades, 'D')\n\
    \t\telseif grade > 0.0 then\n\t\t\ttable.insert(letter_grades, 'D-')\n\t\telseif\
    \ grade == 0.0 then\n\t\t\ttable.insert(letter_grades, 'E')\n\t\tend\n\tend\n\t\
    return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplu9eq0tj.lua:60:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmplu9eq0tj.lua:60: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    local gpa_list = {\n        ['A+'] = 4.0,\n        ['A'] = 3.7,\n\
    \        ['A-'] = 3.3,\n        ['B+'] = 3.0,\n        ['B'] = 2.7,\n        ['B-']\
    \ = 2.3,\n        ['C+'] = 2.0,\n        ['C'] = 1.7,\n        ['C-'] = 1.3,\n\
    \        ['D+'] = 1.0,\n        ['D'] = 0.7,\n        ['D-'] = 0.0,\n        ['E']\
    \ = 0.0\n    }\n    for _, gpa in ipairs(grades) do\n        for k, v in pairs(gpa_list)\
    \ do\n            if gpa >= v then\n                table.insert(letter_grades,\
    \ k)\n                break\n            end\n        end\n    end\n    return\
    \ letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp10z6t56a.lua:53:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"D-\", \"D-\", \"\
    D-\", \"D-\", \"D-\"}\nstack traceback:\n\t/tmp/tmp10z6t56a.lua:53: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    if #grades <=\
    \ 0 then return {} end\n    local n = #grades\n    local t = {}\n    for i = 1,\
    \ n do\n        if grades[i] >= 4.0 then\n            t[i] = 'A+'\n        elseif\
    \ grades[i] >= 3.7 then\n            t[i] = 'A'\n        elseif grades[i] >= 3.3\
    \ then\n            t[i] = 'A-'\n        elseif grades[i] >= 3.0 then\n      \
    \      t[i] = 'B+'\n        elseif grades[i] >= 2.7 then\n            t[i] = 'B'\n\
    \        elseif grades[i] >= 2.3 then\n            t[i] = 'B-'\n        elseif\
    \ grades[i] >= 2.0 then\n            t[i] = 'C+'\n        elseif grades[i] >=\
    \ 1.7 then\n            t[i] = 'C'\n        elseif grades[i] >= 1.3 then\n   \
    \         t[i] = 'C-'\n        elseif grades[i] >= 1.0 then\n            t[i]\
    \ = 'D+'\n        elseif grades[i] >= 0.7 then\n            t[i] = 'D'\n     \
    \   elseif grades[i] >= 0.0 then\n            t[i] = 'D-'\n        else\n    \
    \        t[i] = 'E'\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpq4za5v.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpmpq4za5v.lua:61: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal output =\
    \ {}\n\tfor _, grade in ipairs(grades) do\n\t\tif grade >= 4.0 then\n\t\t\ttable.insert(output,\
    \ 'A+')\n\t\telseif grade >= 3.7 then\n\t\t\ttable.insert(output, 'A')\n\t\telseif\
    \ grade >= 3.3 then\n\t\t\ttable.insert(output, 'A-')\n\t\telseif grade >= 3.0\
    \ then\n\t\t\ttable.insert(output, 'B+')\n\t\telseif grade >= 2.7 then\n\t\t\t\
    table.insert(output, 'B')\n\t\telseif grade >= 2.3 then\n\t\t\ttable.insert(output,\
    \ 'B-')\n\t\telseif grade >= 2.0 then\n\t\t\ttable.insert(output, 'C+')\n\t\t\
    elseif grade >= 1.7 then\n\t\t\ttable.insert(output, 'C')\n\t\telseif grade >=\
    \ 1.3 then\n\t\t\ttable.insert(output, 'C-')\n\t\telseif grade >= 1.0 then\n\t\
    \t\ttable.insert(output, 'D+')\n\t\telseif grade >= 0.7 then\n\t\t\ttable.insert(output,\
    \ 'D')\n\t\telseif grade >= 0.0 then\n\t\t\ttable.insert(output, 'D-')\n\t\telse\n\
    \t\t\ttable.insert(output, 'E')\n\t\tend\n\tend\n\treturn output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9br1rih.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpj9br1rih.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local alphabet\
    \ = {'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'}\n\
    \    local letter_grades = {}\n    for i = 1, #grades do\n        if grades[i]\
    \ == 4.0 then\n            table.insert(letter_grades, alphabet[1])\n        elseif\
    \ grades[i] > 3.7 then\n            table.insert(letter_grades, alphabet[2])\n\
    \        elseif grades[i] > 3.3 then\n            table.insert(letter_grades,\
    \ alphabet[3])\n        elseif grades[i] > 3.0 then\n            table.insert(letter_grades,\
    \ alphabet[4])\n        elseif grades[i] > 2.7 then\n            table.insert(letter_grades,\
    \ alphabet[5])\n        elseif grades[i] > 2.3 then\n            table.insert(letter_grades,\
    \ alphabet[6])\n        elseif grades[i] > 2.0 then\n            table.insert(letter_grades,\
    \ alphabet[7])\n        elseif grades[i] > 1.7 then\n            table.insert(letter_grades,\
    \ alphabet[8])\n        elseif grades[i] > 1.3 then\n            table.insert(letter_grades,\
    \ alphabet[9])\n        elseif grades[i] > 1.0 then\n            table.insert(letter_grades,\
    \ alphabet[10])\n        elseif grades[i] > 0.7 then\n            table.insert(letter_grades,\
    \ alphabet[11])\n        elseif grades[i] > 0.0 then\n            table.insert(letter_grades,\
    \ alphabet[12])\n        else\n            table.insert(letter_grades, alphabet[13])\n\
    \        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpep_j9uns.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpep_j9uns.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    return map(function(n)\n\
    \                    if n == 4.0 then return 'A+'\n                    elseif\
    \ n > 3.7 then return 'A'\n                    elseif n > 3.3 then return 'A-'\n\
    \                    elseif n > 3.0 then return 'B+'\n                    elseif\
    \ n > 2.7 then return 'B'\n                    elseif n > 2.3 then return 'B-'\n\
    \                    elseif n > 2.0 then return 'C+'\n                    elseif\
    \ n > 1.7 then return 'C'\n                    elseif n > 1.3 then return 'C-'\n\
    \                    elseif n > 1.0 then return 'D+'\n                    elseif\
    \ n > 0.7 then return 'D'\n                    elseif n > 0.0 then return 'D-'\n\
    \                    else return 'E'\n                    end\n              \
    \ end, grades)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiv7nufvw.lua:23:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpiv7nufvw.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpiv7nufvw.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf63ztfsk.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpf63ztfsk.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  grades = grades\
    \ or {}\n  -- Function body goes here\n  local upper_limit = {4.0, 3.7, 3.3, 3.0,\
    \ 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0}\n  local letter_grade = {'A+', 'A',\
    \ 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'}\n  local t = {}\n\
    \  for i,v in ipairs(grades) do\n    for j = 1, #upper_limit do\n      if v >=\
    \ upper_limit[j] then\n        t[#t+1] = letter_grade[j]\n        break\n    \
    \  end\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpheo4sxe_.lua:42:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpheo4sxe_.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbgshpgd.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpgbgshpgd.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  return {\n    {'A+',\
    \ 4.0},\n    {'A', 3.7},\n    {'A-', 3.3},\n    {'B+', 3.0},\n    {'B', 2.7},\n\
    \    {'B-', 2.3},\n    {'C+', 2.0},\n    {'C', 1.7},\n    {'C-', 1.3},\n    {'D+',\
    \ 1.0},\n    {'D', 0.7},\n    {'D-', 0.0},\n    {'E', 0.0}\n  }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpne17h88u.lua:43:\
    \ expected: \n{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \n{\n    {\"A+\"\
    , 4},\n    {\"A\", 3.7},\n    {\"A-\", 3.3},\n    {\"B+\", 3},\n    {\"B\", 2.7},\n\
    \    {\"B-\", 2.3},\n    {\"C+\", 2},\n    {\"C\", 1.7},\n    {\"C-\", 1.3},\n\
    \    {\"D+\", 1},\n    {\"D\", 0.7},\n    {\"D-\", 0},\n    {\"E\", 0}\n}\nstack\
    \ traceback:\n\t/tmp/tmpne17h88u.lua:43: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades\
    \ = {\n        [4.0] = 'A+', [3.7] = 'A', [3.3] = 'A-',\n        [3.0] = 'B+',\
    \ [2.7] = 'B', [2.3] = 'B-',\n        [2.0] = 'C+', [1.7] = 'C', [1.3] = 'C-',\n\
    \        [1.0] = 'D+', [0.7] = 'D', [0.0] = 'D-',\n        [-1] = 'E'\n    }\n\
    \    for i, v in ipairs(grades) do\n        if v == 'A+' then\n            print(v)\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "A+\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxyd34yb.lua:40:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpbxyd34yb.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local answer =\
    \ {}\n  for _, grade in ipairs(grades) do\n    if grade == 4.0 then\n      table.insert(answer,\
    \ 'A+')\n    elseif grade > 3.7 then\n      table.insert(answer, 'A')\n    elseif\
    \ grade > 3.3 then\n      table.insert(answer, 'A-')\n    elseif grade > 3.0 then\n\
    \      table.insert(answer, 'B+')\n    elseif grade > 2.7 then\n      table.insert(answer,\
    \ 'B')\n    elseif grade > 2.3 then\n      table.insert(answer, 'B-')\n    elseif\
    \ grade > 2.0 then\n      table.insert(answer, 'C+')\n    elseif grade > 1.7 then\n\
    \      table.insert(answer, 'C')\n    elseif grade > 1.3 then\n      table.insert(answer,\
    \ 'C-')\n    elseif grade > 1.0 then\n      table.insert(answer, 'D+')\n    elseif\
    \ grade > 0.7 then\n      table.insert(answer, 'D')\n    elseif grade > 0.0 then\n\
    \      table.insert(answer, 'D-')\n    else\n      table.insert(answer, 'E')\n\
    \    end\n  end\n  return answer\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal letters =\
    \ {}\n\tfor i = 1, #grades do\n\t\tif grades[i] == 4.0 then\n\t\t\tletters[i]\
    \ = 'A+'\n\t\telseif grades[i] > 3.7 then\n\t\t\tletters[i] = 'A'\n\t\telseif\
    \ grades[i] > 3.3 then\n\t\t\tletters[i] = 'A-'\n\t\telseif grades[i] > 3.0 then\n\
    \t\t\tletters[i] = 'B+'\n\t\telseif grades[i] > 2.7 then\n\t\t\tletters[i] = 'B'\n\
    \t\telseif grades[i] > 2.3 then\n\t\t\tletters[i] = 'B-'\n\t\telseif grades[i]\
    \ > 2.0 then\n\t\t\tletters[i] = 'C+'\n\t\telseif grades[i] > 1.7 then\n\t\t\t\
    letters[i] = 'C'\n\t\telseif grades[i] > 1.3 then\n\t\t\tletters[i] = 'C-'\n\t\
    \telseif grades[i] > 1.0 then\n\t\t\tletters[i] = 'D+'\n\t\telseif grades[i] >\
    \ 0.7 then\n\t\t\tletters[i] = 'D'\n\t\telseif grades[i] > 0.0 then\n\t\t\tletters[i]\
    \ = 'D-'\n\t\telse\n\t\t\tletters[i] = 'E'\n\t\tend\n\tend\n\treturn letters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local function\
    \ gradient(point_a, point_b)\n    return (point_b[2] - point_a[2]) / (point_b[1]\
    \ - point_a[1])\n  end\n  local function get_letter_grade(number)\n    if number\
    \ < 0.7 then\n      return 'E'\n    end\n    for i = 1, #LETTER_GRADES - 1 do\n\
    \      local grade = LETTER_GRADES[i]\n      local next_grade = LETTER_GRADES[i\
    \ + 1]\n      if number >= grade[1] and number < next_grade[1] then\n        local\
    \ m = gradient(grade, next_grade)\n        local n = math.floor(m * number + (grade[2]\
    \ - m * grade[1]))\n        return n\n      end\n    end\n    return LETTER_GRADES[#LETTER_GRADES][2]\n\
    \  end\n  local function to_letter_grade(number)\n    local number = get_letter_grade(number)\n\
    \    return string.char(number)\n  end\n  local letter_grades = {}\n  for i =\
    \ 1, #grades do\n    local gpa = grades[i]\n    letter_grades[i] = to_letter_grade(gpa)\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_grnzt2.lua:30:\
    \ attempt to get length of a nil value (global 'LETTER_GRADES')\nstack traceback:\n\
    \t/tmp/tmpi_grnzt2.lua:30: in upvalue 'get_letter_grade'\n\t/tmp/tmpi_grnzt2.lua:42:\
    \ in local 'to_letter_grade'\n\t/tmp/tmpi_grnzt2.lua:48: in local 'candidate'\n\
    \t/tmp/tmpi_grnzt2.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59wknqo7.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp59wknqo7.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    -- From http://www.indiana.edu/~r345/Fall2015/Lectures/lecture10.pdf\n\
    \    local letter_grades = {'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-',\
    \ 'D+', 'D', 'D-', 'E'}\n    local points = {4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0,\
    \ 1.7, 1.3, 1.0, 0.7, 0.0, 0.0}\n    local result = {}\n    for i, grade in ipairs(grades)\
    \ do\n        for j, point in ipairs(points) do\n            if grade >= point\
    \ then\n                result[i] = letter_grades[j]\n                break\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3w1rnpfh.lua:41:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp3w1rnpfh.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    for i, grade\
    \ in ipairs(grades) do\n        if grade == 4.0 then\n            grades[i] =\
    \ 'A+'\n        elseif grade > 3.7 then\n            grades[i] = 'A'\n       \
    \ elseif grade > 3.3 then\n            grades[i] = 'A-'\n        elseif grade\
    \ > 3.0 then\n            grades[i] = 'B+'\n        elseif grade > 2.7 then\n\
    \            grades[i] = 'B'\n        elseif grade > 2.3 then\n            grades[i]\
    \ = 'B-'\n        elseif grade > 2.0 then\n            grades[i] = 'C+'\n    \
    \    elseif grade > 1.7 then\n            grades[i] = 'C'\n        elseif grade\
    \ > 1.3 then\n            grades[i] = 'C-'\n        elseif grade > 1.0 then\n\
    \            grades[i] = 'D+'\n        elseif grade > 0.7 then\n            grades[i]\
    \ = 'D'\n        elseif grade > 0.0 then\n            grades[i] = 'D-'\n     \
    \   else\n            grades[i] = 'E'\n        end\n    end\n    return grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grade_table\
    \ = {\n        ['4.0'] = 'A+',\n        ['3.7'] = 'A',\n        ['3.3'] = 'A-',\n\
    \        ['3.0'] = 'B+',\n        ['2.7'] = 'B',\n        ['2.3'] = 'B-',\n  \
    \      ['2.0'] = 'C+',\n        ['1.7'] = 'C',\n        ['1.3'] = 'C-',\n    \
    \    ['1.0'] = 'D+',\n        ['0.7'] = 'D',\n        ['0.0'] = 'D-',\n      \
    \  ['0.0'] = 'E'\n    }\n    local result = {}\n    for _, v in ipairs(grades)\
    \ do\n        table.insert(result, grade_table[tostring(v)])\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra_yt1qn.lua:48:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"C\"}\n\
    stack traceback:\n\t/tmp/tmpra_yt1qn.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local function\
    \ letter_grade(grade)\n    local mapping = {\n      [\"> 4.0\"] = \"A+\",\n  \
    \    [\"> 3.7\"] = \"A\",\n      [\"> 3.3\"] = \"A-\",\n      [\"> 3.0\"] = \"\
    B+\",\n      [\"> 2.7\"] = \"B\",\n      [\"> 2.3\"] = \"B-\",\n      [\"> 2.0\"\
    ] = \"C+\",\n      [\"> 1.7\"] = \"C\",\n      [\"> 1.3\"] = \"C-\",\n      [\"\
    > 1.0\"] = \"D+\",\n      [\"> 0.7\"] = \"D\",\n      [\"> 0.0\"] = \"D-\",\n\
    \      [\"0.0\"] = \"E\"\n    }\n    local function calculate_grade(grade)\n \
    \     for cutoff, letter in pairs(mapping) do\n        if (type(cutoff) == \"\
    string\" and cutoff:sub(1, 1) == \">\") then\n          local number = (tonumber(cutoff:sub(3))\
    \ or 0)\n          if (grade > number) then\n            return letter\n     \
    \     end\n        else\n          if (grade == tonumber(cutoff)) then\n     \
    \       return letter\n          end\n        end\n      end\n    end\n    return\
    \ calculate_grade(grade)\n  end\n  return map(letter_grade, grades)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp614h0i4p.lua:55:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp614h0i4p.lua:55:\
    \ in local 'candidate'\n\t/tmp/tmp614h0i4p.lua:61: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal grades_dict\
    \ = {}\n\tfor k,v in pairs(grades) do\n\t\tif v >= 4.0 then\n\t\t\tgrades_dict[k]\
    \ = 'A+'\n\t\telseif v >= 3.7 then\n\t\t\tgrades_dict[k] = 'A'\n\t\telseif v >=\
    \ 3.3 then\n\t\t\tgrades_dict[k] = 'A-'\n\t\telseif v >= 3.0 then\n\t\t\tgrades_dict[k]\
    \ = 'B+'\n\t\telseif v >= 2.7 then\n\t\t\tgrades_dict[k] = 'B'\n\t\telseif v >=\
    \ 2.3 then\n\t\t\tgrades_dict[k] = 'B-'\n\t\telseif v >= 2.0 then\n\t\t\tgrades_dict[k]\
    \ = 'C+'\n\t\telseif v >= 1.7 then\n\t\t\tgrades_dict[k] = 'C'\n\t\telseif v >=\
    \ 1.3 then\n\t\t\tgrades_dict[k] = 'C-'\n\t\telseif v >= 1.0 then\n\t\t\tgrades_dict[k]\
    \ = 'D+'\n\t\telseif v >= 0.7 then\n\t\t\tgrades_dict[k] = 'D'\n\t\telseif v >=\
    \ 0.0 then\n\t\t\tgrades_dict[k] = 'D-'\n\t\telseif v == 0.0 then\n\t\t\tgrades_dict[k]\
    \ = 'E'\n\t\tend\n\tend\n\treturn grades_dict\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0_y2shn.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpv0_y2shn.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpre91mjej.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpre91mjej.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grade\
    \ = {}\n    local grade_table = {\n        {4.0, 'A+'},\n        {3.7, 'A'},\n\
    \        {3.3, 'A-'},\n        {3.0, 'B+'},\n        {2.7, 'B'},\n        {2.3,\
    \ 'B-'},\n        {2.0, 'C+'},\n        {1.7, 'C'},\n        {1.3, 'C-'},\n  \
    \      {1.0, 'D+'},\n        {0.7, 'D'},\n        {0.0, 'D-'},\n        {-0.1,\
    \ 'E'}\n    }\n    for _, v in ipairs(grades) do\n        for _, t in ipairs(grade_table)\
    \ do\n            if v >= t[1] then\n                table.insert(letter_grade,\
    \ t[2])\n                break\n            end\n        end\n    end\n    return\
    \ letter_grade\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsd4zgisi.lua:53:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpsd4zgisi.lua:53: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n   local grades =\
    \ grades or {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcdlkhpdw.lua:36: 'end' expected (to close 'function' at line\
    \ 22) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    --your code here\n\
    \    local grades_table = {}\n    for i, v in ipairs(grades) do\n        if v\
    \ == 4.0 then\n            grades_table[i] = 'A+'\n        elseif v > 3.7 then\n\
    \            grades_table[i] = 'A'\n        elseif v > 3.3 then\n            grades_table[i]\
    \ = 'A-'\n        elseif v > 3.0 then\n            grades_table[i] = 'B+'\n  \
    \      elseif v > 2.7 then\n            grades_table[i] = 'B'\n        elseif\
    \ v > 2.3 then\n            grades_table[i] = 'B-'\n        elseif v > 2.0 then\n\
    \            grades_table[i] = 'C+'\n        elseif v > 1.7 then\n           \
    \ grades_table[i] = 'C'\n        elseif v > 1.3 then\n            grades_table[i]\
    \ = 'C-'\n        elseif v > 1.0 then\n            grades_table[i] = 'D+'\n  \
    \      elseif v > 0.7 then\n            grades_table[i] = 'D'\n        elseif\
    \ v > 0.0 then\n            grades_table[i] = 'D-'\n        else\n           \
    \ grades_table[i] = 'E'\n        end\n    end\n    return grades_table\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  -- Write your code\
    \ here!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjy44m96a.lua:29:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpjy44m96a.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local ans = {}\n\
    \    for i, v in ipairs(grades) do\n        if v >= 4.0 then\n            ans[i]\
    \ = 'A+'\n        elseif v >= 3.7 then\n            ans[i] = 'A'\n        elseif\
    \ v >= 3.3 then\n            ans[i] = 'A-'\n        elseif v >= 3.0 then\n   \
    \         ans[i] = 'B+'\n        elseif v >= 2.7 then\n            ans[i] = 'B'\n\
    \        elseif v >= 2.3 then\n            ans[i] = 'B-'\n        elseif v >=\
    \ 2.0 then\n            ans[i] = 'C+'\n        elseif v >= 1.7 then\n        \
    \    ans[i] = 'C'\n        elseif v >= 1.3 then\n            ans[i] = 'C-'\n \
    \       elseif v >= 1.0 then\n            ans[i] = 'D+'\n        elseif v >= 0.7\
    \ then\n            ans[i] = 'D'\n        elseif v >= 0.0 then\n            ans[i]\
    \ = 'D-'\n        else\n            ans[i] = 'E'\n        end\n    end\n    return\
    \ ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ab4va8u.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp0ab4va8u.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    if type(grades)\
    \ ~= 'table' then\n        error(\"Expected a table of numerical grades, received\
    \ \" .. type(grades) .. \" instead.\")\n    end\n    local letter_grades = {}\n\
    \    for _, grade in ipairs(grades) do\n        if type(grade) ~= 'number' then\n\
    \            error(\"Numerical grades expected, received \" .. type(grade) ..\
    \ \" instead.\")\n        end\n        if grade >= 4.0 then\n            table.insert(letter_grades,\
    \ 'A+')\n        elseif grade >= 3.7 then\n            table.insert(letter_grades,\
    \ 'A')\n        elseif grade >= 3.3 then\n            table.insert(letter_grades,\
    \ 'A-')\n        elseif grade >= 3.0 then\n            table.insert(letter_grades,\
    \ 'B+')\n        elseif grade >= 2.7 then\n            table.insert(letter_grades,\
    \ 'B')\n        elseif grade >= 2.3 then\n            table.insert(letter_grades,\
    \ 'B-')\n        elseif grade >= 2.0 then\n            table.insert(letter_grades,\
    \ 'C+')\n        elseif grade >= 1.7 then\n            table.insert(letter_grades,\
    \ 'C')\n        elseif grade >= 1.3 then\n            table.insert(letter_grades,\
    \ 'C-')\n        elseif grade >= 1.0 then\n            table.insert(letter_grades,\
    \ 'D+')\n        elseif grade >= 0.7 then\n            table.insert(letter_grades,\
    \ 'D')\n        elseif grade >= 0.0 then\n            table.insert(letter_grades,\
    \ 'D-')\n        else\n            table.insert(letter_grades, 'E')\n        end\n\
    \    end\n    return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdc3usm9u.lua:65:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpdc3usm9u.lua:65: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\tlocal letters =\
    \ {}\n\tfor _, v in ipairs(grades) do\n\t\tif v >= 4.0 then\n\t\t\ttable.insert(letters,\
    \ 'A+')\n\t\telseif v >= 3.7 then\n\t\t\ttable.insert(letters, 'A')\n\t\telseif\
    \ v >= 3.3 then\n\t\t\ttable.insert(letters, 'A-')\n\t\telseif v >= 3.0 then\n\
    \t\t\ttable.insert(letters, 'B+')\n\t\telseif v >= 2.7 then\n\t\t\ttable.insert(letters,\
    \ 'B')\n\t\telseif v >= 2.3 then\n\t\t\ttable.insert(letters, 'B-')\n\t\telseif\
    \ v >= 2.0 then\n\t\t\ttable.insert(letters, 'C+')\n\t\telseif v >= 1.7 then\n\
    \t\t\ttable.insert(letters, 'C')\n\t\telseif v >= 1.3 then\n\t\t\ttable.insert(letters,\
    \ 'C-')\n\t\telseif v >= 1.0 then\n\t\t\ttable.insert(letters, 'D+')\n\t\telseif\
    \ v >= 0.7 then\n\t\t\ttable.insert(letters, 'D')\n\t\telseif v >= 0.0 then\n\t\
    \t\ttable.insert(letters, 'D-')\n\t\telse\n\t\t\ttable.insert(letters, 'E')\n\t\
    \tend\n\tend\n\treturn letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp996ybein.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp996ybein.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        -- we compare the grade\
    \ with the upper limit for each letter grade\n        if grade >= 4.0 then \n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqa4du1m.lua:60:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpbqa4du1m.lua:60: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n   for index, gpa\
    \ in ipairs(grades) do\n      if gpa >= 4.0 then\n         grades[index] = 'A+'\n\
    \      elseif gpa > 3.7 then\n         grades[index] = 'A'\n      elseif gpa >\
    \ 3.3 then\n         grades[index] = 'A-'\n      elseif gpa > 3.0 then\n     \
    \    grades[index] = 'B+'\n      elseif gpa > 2.7 then\n         grades[index]\
    \ = 'B'\n      elseif gpa > 2.3 then\n         grades[index] = 'B-'\n      elseif\
    \ gpa > 2.0 then\n         grades[index] = 'C+'\n      elseif gpa > 1.7 then\n\
    \         grades[index] = 'C'\n      elseif gpa > 1.3 then\n         grades[index]\
    \ = 'C-'\n      elseif gpa > 1.0 then\n         grades[index] = 'D+'\n      elseif\
    \ gpa > 0.7 then\n         grades[index] = 'D'\n      elseif gpa > 0.0 then\n\
    \         grades[index] = 'D-'\n      else\n         grades[index] = 'E'\n   \
    \   end\n   end\n   return grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter\
    \ = {}\n    for i = 1, #grades do\n        if grades[i] == 4.0 then\n        \
    \    letter[i] = 'A+'\n        elseif grades[i] >= 3.7 then\n            letter[i]\
    \ = 'A'\n        elseif grades[i] >= 3.3 then\n            letter[i] = 'A-'\n\
    \        elseif grades[i] >= 3.0 then\n            letter[i] = 'B+'\n        elseif\
    \ grades[i] >= 2.7 then\n            letter[i] = 'B'\n        elseif grades[i]\
    \ >= 2.3 then\n            letter[i] = 'B-'\n        elseif grades[i] >= 2.0 then\n\
    \            letter[i] = 'C+'\n        elseif grades[i] >= 1.7 then\n        \
    \    letter[i] = 'C'\n        elseif grades[i] >= 1.3 then\n            letter[i]\
    \ = 'C-'\n        elseif grades[i] >= 1.0 then\n            letter[i] = 'D+'\n\
    \        elseif grades[i] >= 0.7 then\n            letter[i] = 'D'\n        elseif\
    \ grades[i] >= 0.0 then\n            letter[i] = 'D-'\n        else\n        \
    \    letter[i] = 'E'\n        end\n    end\n    return letter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp37qdqh12.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp37qdqh12.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_letters\
    \ = {}\n    for _, v in ipairs(grades) do\n        if v > 4.0 then\n         \
    \   grades_letters[#grades_letters + 1] = 'A+'\n        elseif v >= 3.7 then\n\
    \            grades_letters[#grades_letters + 1] = 'A'\n        elseif v >= 3.3\
    \ then\n            grades_letters[#grades_letters + 1] = 'A-'\n        elseif\
    \ v >= 3.0 then\n            grades_letters[#grades_letters + 1] = 'B+'\n    \
    \    elseif v >= 2.7 then\n            grades_letters[#grades_letters + 1] = 'B'\n\
    \        elseif v >= 2.3 then\n            grades_letters[#grades_letters + 1]\
    \ = 'B-'\n        elseif v >= 2.0 then\n            grades_letters[#grades_letters\
    \ + 1] = 'C+'\n        elseif v >= 1.7 then\n            grades_letters[#grades_letters\
    \ + 1] = 'C'\n        elseif v >= 1.3 then\n            grades_letters[#grades_letters\
    \ + 1] = 'C-'\n        elseif v >= 1.0 then\n            grades_letters[#grades_letters\
    \ + 1] = 'D+'\n        elseif v >= 0.7 then\n            grades_letters[#grades_letters\
    \ + 1] = 'D'\n        elseif v >= 0.0 then\n            grades_letters[#grades_letters\
    \ + 1] = 'D-'\n        else\n            grades_letters[#grades_letters + 1] =\
    \ 'E'\n        end\n    end\n    return grades_letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxidmx55m.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpxidmx55m.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n\t-- your code here!\n\
    \tlocal result = {}\n\tfor _, grade in ipairs(grades) do\n\t\tif grade > 4.0 then\n\
    \t\t\ttable.insert(result, 'A+')\n\t\telseif grade > 3.7 then\n\t\t\ttable.insert(result,\
    \ 'A')\n\t\telseif grade > 3.3 then\n\t\t\ttable.insert(result, 'A-')\n\t\telseif\
    \ grade > 3.0 then\n\t\t\ttable.insert(result, 'B+')\n\t\telseif grade > 2.7 then\n\
    \t\t\ttable.insert(result, 'B')\n\t\telseif grade > 2.3 then\n\t\t\ttable.insert(result,\
    \ 'B-')\n\t\telseif grade > 2.0 then\n\t\t\ttable.insert(result, 'C+')\n\t\telseif\
    \ grade > 1.7 then\n\t\t\ttable.insert(result, 'C')\n\t\telseif grade > 1.3 then\n\
    \t\t\ttable.insert(result, 'C-')\n\t\telseif grade > 1.0 then\n\t\t\ttable.insert(result,\
    \ 'D+')\n\t\telseif grade > 0.7 then\n\t\t\ttable.insert(result, 'D')\n\t\telseif\
    \ grade > 0.0 then\n\t\t\ttable.insert(result, 'D-')\n\t\telse\n\t\t\ttable.insert(result,\
    \ 'E')\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03clgxym.lua:60:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmp03clgxym.lua:60: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter =\
    \ {}\n  for _, v in ipairs(grades) do\n    if v >= 4.0 then\n      table.insert(letter,\
    \ 'A+')\n    elseif v >= 3.7 then\n      table.insert(letter, 'A')\n    elseif\
    \ v >= 3.3 then\n      table.insert(letter, 'A-')\n    elseif v >= 3.0 then\n\
    \      table.insert(letter, 'B+')\n    elseif v >= 2.7 then\n      table.insert(letter,\
    \ 'B')\n    elseif v >= 2.3 then\n      table.insert(letter, 'B-')\n    elseif\
    \ v >= 2.0 then\n      table.insert(letter, 'C+')\n    elseif v >= 1.7 then\n\
    \      table.insert(letter, 'C')\n    elseif v >= 1.3 then\n      table.insert(letter,\
    \ 'C-')\n    elseif v >= 1.0 then\n      table.insert(letter, 'D+')\n    elseif\
    \ v >= 0.7 then\n      table.insert(letter, 'D')\n    elseif v >= 0.0 then\n \
    \     table.insert(letter, 'D-')\n    else\n      table.insert(letter, 'E')\n\
    \    end\n  end\n  return letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9b_2k41v.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp9b_2k41v.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local letter_grades\
    \ = {}\n  for _, grade in ipairs(grades) do\n    if grade > 4.0 then\n      table.insert(letter_grades,\
    \ 'A+')\n    elseif grade > 3.7 then\n      table.insert(letter_grades, 'A')\n\
    \    elseif grade > 3.3 then\n      table.insert(letter_grades, 'A-')\n    elseif\
    \ grade > 3.0 then\n      table.insert(letter_grades, 'B+')\n    elseif grade\
    \ > 2.7 then\n      table.insert(letter_grades, 'B')\n    elseif grade > 2.3 then\n\
    \      table.insert(letter_grades, 'B-')\n    elseif grade > 2.0 then\n      table.insert(letter_grades,\
    \ 'C+')\n    elseif grade > 1.7 then\n      table.insert(letter_grades, 'C')\n\
    \    elseif grade > 1.3 then\n      table.insert(letter_grades, 'C-')\n    elseif\
    \ grade > 1.0 then\n      table.insert(letter_grades, 'D+')\n    elseif grade\
    \ > 0.7 then\n      table.insert(letter_grades, 'D')\n    elseif grade > 0.0 then\n\
    \      table.insert(letter_grades, 'D-')\n    else\n      table.insert(letter_grades,\
    \ 'E')\n    end\n  end\n  return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_b38mpa.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmp1_b38mpa.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local output\
    \ = {}\n    local grade_equation = {\n        [4.0] = 'A+',\n        [3.7] = 'A',\n\
    \        [3.3] = 'A-',\n        [3.0] = 'B+',\n        [2.7] = 'B',\n        [2.3]\
    \ = 'B-',\n        [2.0] = 'C+',\n        [1.7] = 'C',\n        [1.3] = 'C-',\n\
    \        [1.0] = 'D+',\n        [0.7] = 'D',\n        [0.0] = 'D-',\n        [nil]\
    \ = 'E'\n    }\n    for _, g in ipairs(grades) do\n        local curr = 4.0\n\
    \        for grade, l in pairs(grade_equation) do\n            if g >= curr then\n\
    \                table.insert(output, l)\n                break\n            else\n\
    \                curr = grade\n            end\n        end\n    end\n    return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbga_zhlj.lua:37:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpbga_zhlj.lua:37: in local 'candidate'\n\
    \t/tmp/tmpbga_zhlj.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local res = {}\n\
    \    local n = 0\n    for _,g in ipairs(grades) do\n        n = n + 1\n      \
    \  if g == 4.0 then\n            res[n] = 'A+'\n        elseif g > 3.7 then\n\
    \            res[n] = 'A'\n        elseif g > 3.3 then\n            res[n] = 'A-'\n\
    \        elseif g > 3.0 then\n            res[n] = 'B+'\n        elseif g > 2.7\
    \ then\n            res[n] = 'B'\n        elseif g > 2.3 then\n            res[n]\
    \ = 'B-'\n        elseif g > 2.0 then\n            res[n] = 'C+'\n        elseif\
    \ g > 1.7 then\n            res[n] = 'C'\n        elseif g > 1.3 then\n      \
    \      res[n] = 'C-'\n        elseif g > 1.0 then\n            res[n] = 'D+'\n\
    \        elseif g > 0.7 then\n            res[n] = 'D'\n        elseif g > 0.0\
    \ then\n            res[n] = 'D-'\n        else\n            res[n] = 'E'\n  \
    \      end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_tbl\
    \ = {}\n    for i, v in ipairs(grades) do\n        if v >= 4.0 then\n        \
    \    grades_tbl[i] = 'A+'\n        elseif v >= 3.7 then\n            grades_tbl[i]\
    \ = 'A'\n        elseif v >= 3.3 then\n            grades_tbl[i] = 'A-'\n    \
    \    elseif v >= 3.0 then\n            grades_tbl[i] = 'B+'\n        elseif v\
    \ >= 2.7 then\n            grades_tbl[i] = 'B'\n        elseif v >= 2.3 then\n\
    \            grades_tbl[i] = 'B-'\n        elseif v >= 2.0 then\n            grades_tbl[i]\
    \ = 'C+'\n        elseif v >= 1.7 then\n            grades_tbl[i] = 'C'\n    \
    \    elseif v >= 1.3 then\n            grades_tbl[i] = 'C-'\n        elseif v\
    \ >= 1.0 then\n            grades_tbl[i] = 'D+'\n        elseif v >= 0.7 then\n\
    \            grades_tbl[i] = 'D'\n        elseif v >= 0.0 then\n            grades_tbl[i]\
    \ = 'D-'\n        else\n            grades_tbl[i] = 'E'\n        end\n    end\n\
    \    return grades_tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdowgyyk7.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpdowgyyk7.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local letter_grades\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(letter_grades, 'A+')\n        elseif grade >= 3.7 then\n\
    \            table.insert(letter_grades, 'A')\n        elseif grade >= 3.3 then\n\
    \            table.insert(letter_grades, 'A-')\n        elseif grade >= 3.0 then\n\
    \            table.insert(letter_grades, 'B+')\n        elseif grade >= 2.7 then\n\
    \            table.insert(letter_grades, 'B')\n        elseif grade >= 2.3 then\n\
    \            table.insert(letter_grades, 'B-')\n        elseif grade >= 2.0 then\n\
    \            table.insert(letter_grades, 'C+')\n        elseif grade >= 1.7 then\n\
    \            table.insert(letter_grades, 'C')\n        elseif grade >= 1.3 then\n\
    \            table.insert(letter_grades, 'C-')\n        elseif grade >= 1.0 then\n\
    \            table.insert(letter_grades, 'D+')\n        elseif grade >= 0.7 then\n\
    \            table.insert(letter_grades, 'D')\n        elseif grade >= 0.0 then\n\
    \            table.insert(letter_grades, 'D-')\n        else\n            table.insert(letter_grades,\
    \ 'E')\n        end\n    end\n    return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5eo1kd2u.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmp5eo1kd2u.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local answers\
    \ = {}\n    for _, grade in ipairs(grades) do\n        if grade >= 4.0 then\n\
    \            table.insert(answers, 'A+')\n        elseif grade >= 3.7 then\n \
    \           table.insert(answers, 'A')\n        elseif grade >= 3.3 then\n   \
    \         table.insert(answers, 'A-')\n        elseif grade >= 3.0 then\n    \
    \        table.insert(answers, 'B+')\n        elseif grade >= 2.7 then\n     \
    \       table.insert(answers, 'B')\n        elseif grade >= 2.3 then\n       \
    \     table.insert(answers, 'B-')\n        elseif grade >= 2.0 then\n        \
    \    table.insert(answers, 'C+')\n        elseif grade >= 1.7 then\n         \
    \   table.insert(answers, 'C')\n        elseif grade >= 1.3 then\n           \
    \ table.insert(answers, 'C-')\n        elseif grade >= 1.0 then\n            table.insert(answers,\
    \ 'D+')\n        elseif grade >= 0.7 then\n            table.insert(answers, 'D')\n\
    \        elseif grade >= 0.0 then\n            table.insert(answers, 'D-')\n \
    \       else\n            table.insert(answers, 'E')\n        end\n    end\n \
    \   return answers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzvzefwt.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"B+\", \"\
    C\", \"C+\", \"A-\"}\nstack traceback:\n\t/tmp/tmpxzvzefwt.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
