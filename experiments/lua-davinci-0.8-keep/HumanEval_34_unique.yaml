name: HumanEval_34_unique
language: lua
prompt: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2, 3,\
  \ 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
  \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if (#l == 0) then return l end\n  table.sort(l)\n  local unique,\
    \ idx = {}, 1\n  unique[idx] = l[1]\n  for i=2,#l do\n    if (l[i] ~= unique[idx])\
    \ then\n      idx = idx + 1\n      unique[idx] = l[i]\n    end\n  end\n  return\
    \ unique\nend", "\tlocal ret = {}\n\tfor _,v in ipairs(l) do\n\t\tif not table.contains(ret,\
    \ v) then\n\t\t\ttable.insert(ret, v)\n\t\tend\n\tend\n\treturn ret\nend", " \
    \ local res = {}\n  for _, v in ipairs(l) do\n    if not contains(res, v) then\n\
    \      table.insert(res, v)\n    end\n  end\n  return res\nend", "    local t\
    \ = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    return\
    \ keys(t)\nend", "  local s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n\
    \  end\n  local r = {}\n  for k, _ in pairs(s) do\n    table.insert(r, k)\n  end\n\
    \  table.sort(r)\n  return r\nend", "  local res = {}\n  for k, v in pairs(l)\
    \ do\n    if not res[v] then\n      res[v] = v\n    end\n  end\n  local sort_order\
    \ = {}\n  for k, v in pairs(res) do\n    table.insert(sort_order, v)\n  end\n\
    \  table.sort(sort_order)\n  return sort_order\nend", "    local u = {}\n    for\
    \ _, v in ipairs(l) do\n        if not isInList(u, v) then\n            u[#u +\
    \ 1] = v\n        end\n    end\n    return u\nend", "  local r = {}\n  for _,\
    \ e in ipairs(l) do\n    r[e] = true\n  end\n  local u = {}\n  for k, _ in pairs(r)\
    \ do\n    u[#u + 1] = k\n  end\n  table.sort(u)\n  return u\nend", "    local\
    \ newl = {}\n    local i = 1\n    for _, v in pairs(l) do\n        if not newl[v]\
    \ then\n            newl[i] = v\n            i = i + 1\n        end\n    end\n\
    \    table.sort(newl)\n    return newl\nend", "  local u = {}\n  for i = 1, #l\
    \ do\n    if not is_in(l[i], u) then\n      u[#u + 1] = l[i]\n    end\n  end\n\
    \  return u\nend", "    local u = {}\n    for _, v in ipairs(l) do\n        if\
    \ not u[v] then\n            u[v] = true\n            l[#l + 1] = v\n        end\n\
    \    end\n    table.sort(l)\n    return l\nend", "\ttable.sort(l)\n\tlocal i =\
    \ 1\n\twhile i < #l do\n\t\tif l[i] == l[i+1] then\n\t\t\ttable.remove(l, i)\n\
    \t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn l\nend", "    local s = {}\n\
    \    for _,v in ipairs(l) do\n        s[v] = true\n    end\n    local t = {}\n\
    \    for k,_ in pairs(s) do\n        table.insert(t, k)\n    end\n    table.sort(t)\n\
    \    return t\nend", "    if not l then return end\n    local ret = {}\n    for\
    \ _, v in ipairs(l) do\n        if not find(ret, v) then\n            table.insert(ret,\
    \ v)\n        end\n    end\n    table.sort(ret)\n    return ret\nend", "  if not\
    \ l then return {} end\n  if #l == 0 then return {} end\n  local uniq = {}\n \
    \ for e in all(l) do uniq[e] = true end\n  local uniq_l = {}\n  for k, _ in pairs(uniq)\
    \ do\n    uniq_l[#uniq_l + 1] = k\n  end\n  return sort(uniq_l)\nend", "  local\
    \ res = {}\n  for i = 1, #l do\n    if not vim.tbl_contains(res, l[i]) then\n\
    \      res[#res + 1] = l[i]\n    end\n  end\n  return res\nend", "  local t =\
    \ {}\n  for _,v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n  for\
    \ v in pairs(t) do\n    table.insert(r, v)\n  end\n  table.sort(r)\n  return r\n\
    end", "    local tab = {}\n    for _, v in ipairs(l) do\n        tab[v] = true\n\
    \    end\n    local i = 0\n    local result = {}\n    for k, _ in pairs(tab) do\n\
    \        i = i + 1\n        result[i] = k\n    end\n    table.sort(result)\n \
    \   return result\nend", "    local tab = {}\n    for _, v in ipairs(l) do\n \
    \       if not tab[v] then\n            tab[v] = true\n            coroutine.yield(v)\n\
    \        end\n    end\nend", "    local hash = {}\n    local result = {}\n   \
    \ for _,v in ipairs(l) do\n        if (not hash[v]) then\n            result[#result+1]\
    \ = v\n            hash[v] = true\n        end\n    end\n    return result\nend",
  "  local u = {}\n  for _, v in ipairs(l) do\n    u[v] = true\n  end\n  local r =\
    \ {}\n  for k, _ in pairs(u) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n\
    \  return r\nend", "    local res = {}\n    for _, v in ipairs(l) do\n       \
    \ res[v] = true\n    end\n    return utils.map(table.keys(res), tonumber)\nend",
  "  local keys = {}\n  local unique_keys = {}\n  local n = 0\n  for _, item in ipairs(l)\
    \ do\n    if not keys[item] then\n      n = n + 1\n      unique_keys[n] = item\n\
    \      keys[item] = true\n    end\n  end\n  return unique_keys\nend", "  local\
    \ t = {}\n  for _, e in ipairs(l) do\n    if t[e] == nil then\n      t[e] = true\n\
    \      table.insert(l, e)\n    end\n  end\n  return l\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do\n    if not in(v, u) then\n      u[#u + 1] = v\n \
    \   end\n  end\n  return u\nend", "\tlocal result = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not table.member(result, v) then\n\t\t\ttable.insert(result, v)\n\
    \t\tend\n\tend\n\treturn result\nend", "    local list = {}\n    local keys =\
    \ {}\n    for _, v in ipairs(l) do\n        if keys[v] == nil then\n         \
    \   keys[v] = true\n            table.insert(list, v)\n        end\n    end\n\
    \    return list\nend", "    local n = #l\n    if n == 0 then\n        return\
    \ l\n    end\n    table.sort(l)\n    local j = 1\n    for i = 2, n do\n      \
    \  if l[i] ~= l[j] then\n            j = j + 1\n            l[j] = l[i]\n    \
    \    end\n    end\n    return {table.unpack(l, 1, j)}\nend", "\tlocal hash = {}\n\
    \tlocal res = {}\n\tfor _, v in ipairs(l) do\n\t\tif not hash[v] then\n\t\t\t\
    res[#res+1] = v\n\t\t\thash[v] = true\n\t\tend\n\tend\n\treturn res\nend", " \
    \ local keys = {}\n  local uniqueList = {}\n  for i = 1, #l do\n    local key\
    \ = l[i]\n    if (keys[key] == nil) then\n      keys[key] = 1\n      uniqueList[#uniqueList\
    \ + 1] = key\n    end\n  end\n  table.sort(uniqueList)\n  return uniqueList\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do\n    u[v] = true\n  end\n  local\
    \ ret = {}\n  for k, _ in pairs(u) do\n    table.insert(ret, k)\n  end\n  table.sort(ret)\n\
    \  return ret\nend", "    if not l then return {} end\n    local r = {}\n    local\
    \ f = function(x) r[x] = 1 end\n    for _,v in ipairs(l) do f(v) end\n    table.sort(r)\n\
    \    return r\nend", "  local keys = {}\n  local t = {}\n  for v in all(l) do\n\
    \    if not keys[v] then\n      t[#t+1] = v\n      keys[v] = true\n    end\n \
    \ end\n  return t\nend", "    local s = {}\n    for _, v in ipairs(l) do\n   \
    \     s[v] = true\n    end\n    local result = {}\n    for k, _ in pairs(s) do\n\
    \        table.insert(result, k)\n    end\n    table.sort(result)\n    return\
    \ result\nend", "\tif type(l) ~= \"table\" then\n\t\terror(\"bad argument #1 to\
    \ 'unique' (table expected, got \" .. type(l) .. \")\", 2)\n\tend\n\t\n\tlocal\
    \ r = {}\n\tfor _, e in ipairs(l) do\n\t\tif not contains(r, e) then\n\t\t\ttable.insert(r,\
    \ e)\n\t\tend\n\tend\n\t\n\treturn r\nend", "    local seen = {}\n    local result\
    \ = {}\n    for _, v in ipairs(l) do\n        if not seen[v] then\n          \
    \  table.insert(result, v)\n            seen[v] = true\n        end\n    end\n\
    \    return result\nend", "  local u = {}\n  for _, v in ipairs(l) do\n    if\
    \ not u[v] then u[v] = true end\n  end\n  local r = {}\n  for k, v in pairs(u)\
    \ do r[#r+1] = k end\n  table.sort(r)\n  return r\nend", "    local res = {}\n\
    \    for _, v in ipairs(l) do\n        if not res[v] then\n            res[v]\
    \ = true\n            table.insert(res, v)\n        end\n    end\n    return res\n\
    end", "\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\tif t[v] == nil then\n\t\
    \t\tt[v] = true\n\t\tend\n\tend\n\tlocal r = {}\n\tfor k, _ in pairs(t) do\n\t\
    \ttable.insert(r, k)\n\tend\n\ttable.sort(r)\n\treturn r\nend", "\treturn sort(l)\n\
    end", "    local t = {}\n    for i, v in ipairs(l) do\n        t[v] = v\n    end\n\
    \    return keys(t)\nend", "  local r = {}\n  for i, v in ipairs(l) do\n    r[#r\
    \ + 1] = v\n  end\n  table.sort(r)\n  local i = 1\n  while i < #r do\n    if r[i]\
    \ == r[i + 1] then\n      table.remove(r, i)\n    else\n      i = i + 1\n    end\n\
    \  end\n  return r\nend", "    local set = {}\n    for _, v in ipairs(l) do\n\
    \        set[v] = true\n    end\n    local r = {}\n    for v in pairs(set) do\n\
    \        table.insert(r, v)\n    end\n    table.sort(r)\n    return r\nend", " \
    \   local s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n\
    \    local r = {}\n    for v in pairs(s) do\n        table.insert(r, v)\n    end\n\
    \    table.sort(r)\n    return r\nend", "\tlocal out = {}\n\tlocal keys = {}\n\
    \tfor _, el in ipairs(l) do\n\t\tif not keys[el] then\n\t\t\ttable.insert(out,\
    \ el)\n\t\t\tkeys[el] = true\n\t\tend\n\tend\n\treturn out\nend", "    local seen\
    \ = {}\n    local i, v\n    local r = {}\n    for i, v in ipairs(l) do\n     \
    \   if not seen[v] then\n            r[#r + 1] = v\n            seen[v] = true\n\
    \        end\n    end\n    return r\nend", "    -- TODO: Un-uglify this mess\n\
    \    local r = {}\n    for _, e in ipairs(l) do\n        if not contains(r, e)\
    \ then\n            table.insert(r, e)\n        end\n    end\n    return r\nend",
  "  local res = {}\n  local index = {}\n  for _, v in ipairs(l) do\n    if not index[v]\
    \ then\n      res[#res + 1] = v\n      index[v] = true\n    end\n  end\n  return\
    \ res\nend", "  local keys = {}\n  local list = {}\n  for _, e in ipairs(l) do\n\
    \    if (not keys[e]) then\n      keys[e] = true\n      table.insert(list, e)\n\
    \    end\n  end\n  return list\nend", "  local t = {}\n  for _, v in ipairs(l)\
    \ do\n    t[v] = v\n  end\n  local i = 0\n  local r = {}\n  for _, v in pairs(t)\
    \ do\n    i = i + 1\n    r[i] = v\n  end\n  table.sort(r)\n  return r\nend", " \
    \   local seen = {}\n    local pos = 1\n    local out = {}\n    for i, v in ipairs(l)\
    \ do\n        if seen[v] == nil then\n            seen[v] = true\n           \
    \ out[pos] = v\n            pos = pos + 1\n        end\n    end\n    return out\n\
    end", "  if type(l) ~= 'table' then\n    error('Expected table, got ' .. type(l))\n\
    \  end\n  local t = {}\n  for k, v in pairs(l) do\n    t[k] = v\n  end\n  return\
    \ sort(t)\nend", "    local unique_l = {}\n    for _, e in ipairs(l) do\n    \
    \    if not list.member(unique_l, e) then\n            unique_l[#unique_l + 1]\
    \ = e\n        end\n    end\n    return unique_l\nend", "    local exists = {}\n\
    \    local t = {}\n    for _,v in ipairs(l) do\n        if not exists[v] then\n\
    \            table.insert(t, v)\n            exists[v] = true\n        end\n \
    \   end\n    return t\nend", "    local r = {}\n    for _,v in ipairs(l) do\n\
    \        r[v] = true\n    end\n    local rl = {}\n    for k,_ in pairs(r) do\n\
    \        table.insert(rl, k)\n    end\n    table.sort(rl)\n    return rl\nend",
  "\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\tt[v] = true\n\tend\n\tlocal res\
    \ = {}\n\tfor k, _ in pairs(t) do\n\t\ttable.insert(res, k)\n\tend\n\ttable.sort(res)\n\
    \treturn res\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n\
    \  end\n  local l = {}\n  for k, _ in pairs(t) do\n    l[#l + 1] = k\n  end\n\
    \  return l\nend", "  local list = {}\n  for i = 1, #l do\n    list[l[i]] = true\n\
    \  end\n  local unique_list = {}\n  for i in pairs(list) do\n    unique_list[#unique_list\
    \ + 1] = i\n  end\n  sort(unique_list)\n  return unique_list\nend", "  local res\
    \ = {}\n  for _, v in ipairs(l) do\n    if not table.contains(res, v) then\n \
    \     table.insert(res, v)\n    end\n  end\n  return res\nend", "  table.sort(l)\n\
    \  for i = #l, 1, -1 do\n    if l[i - 1] == l[i] then\n      table.remove(l, i)\n\
    \    end\n  end\n  return l\nend", "  local r = {}\n  for _, v in ipairs(l) do\n\
    \    if not r[v] then\n      r[v] = true\n      table.insert(r, v)\n    end\n\
    \  end\n  return r\nend", "  local m = {}\n  for _, v in ipairs(l) do\n    m[v]\
    \ = true\n  end\n  local r = {}\n  for k, _ in pairs(m) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "  local u = {}\n  local values\
    \ = {}\n  for _, value in ipairs(l) do\n    if not values[value] then\n      values[value]\
    \ = true\n      u[#u + 1] = value\n    end\n  end\n  return u\nend", "    local\
    \ res = {}\n    for _, e in ipairs(l) do\n        if not in_list(res, e) then\n\
    \            table.insert(res, e)\n        end\n    end\n    return res\nend",
  "\tif not l then return {} end\n\tlocal ret = {}\n\tfor _, v in ipairs(l) do\n\t\
    \tif not has_value(ret, v) then\n\t\t\ttable.insert(ret, v)\n\t\tend\n\tend\n\t\
    return ret\nend", "  local u = {}\n  for _, x in ipairs(l) do\n    if not u[x]\
    \ then\n      u[x] = true\n      table.insert(u, x)\n    end\n  end\n  return\
    \ u\nend", "    return empty(l) and l or\n        (function (...)\n          \
    \  local uniq = {}\n            for _, val in ipairs(l) do\n                uniq[val]\
    \ = true\n            end\n            return {(function ()\n                local\
    \ _accum_0 = {}\n                local _len_0 = 1\n                for k in pairs(uniq)\
    \ do\n                    _accum_0[_len_0] = k\n                    _len_0 = _len_0\
    \ + 1\n                end\n                return _accum_0\n            end)()}\n\
    \        end)(...)\nend", "    local p = {}\n    for _, v in ipairs(l) do\n  \
    \      p[v] = true\n    end\n    local ret = {}\n    for k, _ in pairs(p) do\n\
    \        table.insert(ret, k)\n    end\n    table.sort(ret)\n    return ret\n\
    end", "  local s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  return\
    \ keys(s)\nend", "  local ret = {}\n  for _, v in ipairs(l) do\n    if index(ret,\
    \ v) == nil then\n      table.insert(ret, v)\n    end\n  end\n  return ret\nend",
  "\tlocal seen = {}\n\tlocal out = {}\n\tfor v in all(l) do\n\t\tif not seen[v] then\n\
    \t\t\tout(v)\n\t\t\tseen[v] = true\n\t\tend\n\tend\n\treturn out\nend", "    local\
    \ t = {}\n    for _, e in ipairs(l) do\n        t[e] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend", "  local t = {}\n  for _,v in ipairs(l)\
    \ do\n    t[v] = true\n  end\n  local r = {}\n  for k,_ in pairs(t) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "\tlocal keys = {}\n\tlocal list\
    \ = {}\n\tfor _, v in ipairs(l) do\n\t\tif (not keys[v]) then\n\t\t\tkeys[v] =\
    \ true\n\t\t\ttable.insert(list, v)\n\t\tend\n\tend\n\treturn list\nend", "\t\
    local res = {}\n\tfor _, v in ipairs(l) do\n\t\tif not res[v] then\n\t\t\tres[v]\
    \ = true\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\treturn res\nend", "  \
    \  local r = {}\n    for _, v in ipairs(l) do\n        r[v] = v\n    end\n   \
    \ local n = {}\n    for _, v in pairs(r) do\n        table.insert(n, v)\n    end\n\
    \    table.sort(n)\n    return n\nend", "    local r = {}\n    local t = {}\n\
    \    for _,v in ipairs(l) do\n        if not t[v] then\n            t[v] = true\n\
    \            r[#r+1] = v\n        end\n    end\n    table.sort(r)\n    return\
    \ r\nend", "  local set = {}\n  for i = 1, #l do\n    set[l[i]] = true\n  end\n\
    \  local list = {}\n  for k in pairs(set) do\n    list[#list + 1] = k\n  end\n\
    \  table.sort(list)\n  return list\nend", "  local ret = {}\n  for i, v in ipairs(l)\
    \ do\n    if ret[v] == nil then\n      ret[v] = v\n    end\n  end\n  return ret\n\
    end", "  local k = {}\n  local result = {}\n  for _,v in ipairs(l) do\n    if\
    \ not k[v] then\n      table.insert(result, v)\n      k[v] = true\n    end\n \
    \ end\n  return result\nend", "    -- Create a new array\n    local res = {}\n\
    \    -- Create a table to mark element as seen\n    local seen = {}\n    -- Insert\
    \ all unique element from array\n    for _, v in ipairs(l) do\n        if not\
    \ seen[v] then\n            table.insert(res, v)\n            seen[v] = true\n\
    \        end\n    end\n    -- Sort array before returning it\n    table.sort(res)\n\
    \    return res\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ v in ipairs(l) do\n        if not seen[v] then\n            seen[v] = true\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end", "  local r = {}\n  local i = 1\n  for _, v in pairs(l) do\n    if not r[v]\
    \ then\n      r[i] = v\n      i = i + 1\n    end\n  end\n  return r\nend", " \
    \   local u = {}\n    for i, v in ipairs(l) do\n        if not lookup(u, v) then\n\
    \            table.insert(u, v)\n        end\n    end\n    return u\nend", "\t\
    local r = {}\n\tlocal u = {}\n\tfor i, v in ipairs(l) do\n\t\tif not u[v] then\n\
    \t\t\ttable.insert(r, v)\n\t\t\tu[v] = true\n\t\tend\n\tend\n\treturn r\nend",
  "\tlocal seen = {}\n\tfor _, v in ipairs(l) do\n\t\tif not seen[v] then\n\t\t\t\
    table.insert(seen, v)\n\t\tend\n\t\tseen[v] = true\n\tend\n\treturn seen\nend",
  "    local ret = {}\n    for _, val in ipairs(l) do\n        if not in(val, ret)\
    \ then\n            table.insert(ret, val)\n        end\n    end\n    return ret\n\
    end", "    local u = {}\n    for _, v in ipairs(l) do\n        if not contains(u,\
    \ v) then\n            table.insert(u, v)\n        end\n    end\n    return u\n\
    end", "  local r = {}\n  for _, e in ipairs(l) do\n    if not is_value_in_list(e,\
    \ r) then\n      table.insert(r, e)\n    end\n  end\n  return r\nend", "    if\
    \ type(l) ~= \"table\" then\n        error(\"Expected a table argument\", 2)\n\
    \    end\n    local l2 = {}\n    for _, v in ipairs(l) do\n        l2[v] = true\n\
    \    end\n    local i = 0\n    return function()\n        while true do\n    \
    \        i = i + 1\n            if l2[l[i]] then\n                return l[i]\n\
    \            end\n        end\n    end\nend", "\tlocal r = {}\n\tfor _,v in ipairs(l)\
    \ do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\t\
    end\n\tend\n\treturn r\nend", "    local set = {}\n    for i, v in ipairs(l) do\n\
    \        set[v] = true\n    end\n    local rv = {}\n    for k, _ in pairs(set)\
    \ do\n        table.insert(rv, k)\n    end\n    table.sort(rv)\n    return rv\n\
    end", "\treturn Object.keys(Object.merge({}, l))\nend", "  local u = {}\n  for\
    \ _, v in ipairs(l) do\n    if #u == 0 or u[#u] ~= v then\n      u[#u + 1] = v\n\
    \    end\n  end\n  return u\nend", "    if type(l) ~= \"table\" then\n       \
    \ return {}\n    end\n    local u = {}\n    for _, v in ipairs(l) do\n       \
    \ if not util.contains(u, v) then\n            u[#u + 1] = v\n        end\n  \
    \  end\n    return u\nend\nutil.unique = unique", "    local seen = {}\n    local\
    \ result = {}\n    for _, v in ipairs(l) do\n        if not seen[v] then\n   \
    \         table.insert(result, v)\n            seen[v] = true\n        end\n \
    \   end\n    return result\nend", "  local res = {}\n  for _, v in ipairs(l) do\n\
    \    if not res[v] then\n      res[v] = true\n      table.insert(res, v)\n   \
    \ end\n  end\n  return res\nend", "  local seen = {}\n  local result = {}\n  for\
    \ _, item in ipairs(l) do\n    if not seen[item] then\n      seen[item] = true\n\
    \      table.insert(result, item)\n    end\n  end\n  return result\nend", "  assert(type(l)\
    \ == \"table\", \"Expected 'table', got \" .. type(l))\n  local t = {}\n  for\
    \ _, v in ipairs(l) do\n    t[v] = true\n  end\n  local res = {}\n  for k, _ in\
    \ pairs(t) do\n    table.insert(res, k)\n  end\n  table.sort(res)\n  return res\n\
    end", "    return sort(distinct(l))\nend", "  local seen = {}\n  local out = {}\n\
    \  for i, v in ipairs(l) do\n    if not seen[v] then\n      table.insert(out,\
    \ v)\n      seen[v] = true\n    end\n  end\n  return out\nend", "\tlocal r = {}\n\
    \tfor _, x in ipairs(l) do\n\t\tif not is_in(x, r) then\n\t\t\ttable.insert(r,\
    \ x)\n\t\tend\n\tend\n\treturn r\nend", "\tlocal h = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\th[v] = true\n\tend\n\tlocal l = {}\n\tfor k, _ in pairs(h) do\n\t\t\
    table.insert(l, k)\n\tend\n\ttable.sort(l)\n\treturn l\nend", "  if not is_type(l,\
    \ 'table') then return l end\n  local unique = {}\n  for _, v in ipairs(l) do\n\
    \    if not contains(unique, v) then\n      table.insert(unique, v)\n    end\n\
    \  end\n  return unique\nend", "    if type(l) ~= \"table\" then\n        return\
    \ l\n    end\n    local seen = {}\n    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not seen[v] then\n            r[#r + 1] = v\n            seen[v]\
    \ = true\n        end\n    end\n    return r\nend", "  local s = {}\n  for _,\
    \ v in ipairs(l) do\n    s[v] = true\n  end\n  local l2 = {}\n  for v in pairs(s)\
    \ do\n    l2[#l2+1] = v\n  end\n  table.sort(l2)\n  return l2\nend", "  local\
    \ ret = {}\n  for _, v in ipairs(l) do\n    if #ret == 0 or ret[#ret] ~= v then\n\
    \      ret[#ret + 1] = v\n    end\n  end\n  return ret\nend", "    local s = {}\n\
    \    for i, v in ipairs(l) do\n        s[v] = true\n    end\n    return keys(s)\n\
    end", "  if not l then return nil end\n  local uniq = {}\n  for _,x in ipairs(l)\
    \ do\n    uniq[x] = true\n  end\n  local r = {}\n  for k,_ in pairs(uniq) do\n\
    \    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\nend", "\tlocal unique_l\
    \ = {}\n\tfor _,v in ipairs(l) do\n\t\tunique_l[#unique_l+1] = v\n\tend\n\ttable.sort(unique_l)\n\
    \tlocal i = 2\n\twhile i <= #unique_l do\n\t\tif unique_l[i] == unique_l[i-1]\
    \ then\n\t\t\ttable.remove(unique_l, i)\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\t\
    end\n\treturn unique_l\nend", "    local res = {}\n    for _, v in ipairs(l) do\n\
    \        if not res[v] then\n            res[v] = true\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend", "    local u = {}\n    for _,\
    \ v in ipairs(l) do\n        if not u[v] then\n            u[v] = true\n     \
    \       table.insert(u, v)\n        end\n    end\n    return u\nend", "    local\
    \ u = {}\n    for _, n in ipairs(l) do\n        if not u[n] then\n           \
    \ u[n] = true\n            table.insert(u, n)\n        end\n    end\n    return\
    \ u\nend", "    local r = {}\n    for _, x in ipairs(l) do\n        r[x] = true\n\
    \    end\n    r = keys(r)\n    sort(r)\n    return r\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do\n    if not in_table(u, v) then\n      table.insert(u,\
    \ v)\n    end\n  end\n  return u\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        if t[v] == nil then\n            t[v] = true\n            table.insert(t,\
    \ v)\n        end\n    end\n    return t\nend", "    local seen = {}\n    local\
    \ unique = {}\n    for _, v in ipairs(l) do\n        if not seen[v] then\n   \
    \         unique[#unique + 1] = v\n            seen[v] = true\n        end\n \
    \   end\n    return unique\nend", "\tlocal f = {}\n\tfor k,v in pairs(l) do\n\t\
    \tif not f[v] then\n\t\t\tf[v] = true\n\t\tend\n\tend\n\tlocal r = {}\n\tfor k,v\
    \ in pairs(f) do\n\t\ttable.insert(r, k)\n\tend\n\ttable.sort(r)\n\treturn r\n\
    end", "  local m = {}\n  for _, v in ipairs(l) do\n    m[v] = 1\n  end\n  local\
    \ n = {}\n  for k, _ in pairs(m) do\n    table.insert(n, k)\n  end\n  table.sort(n)\n\
    \  return n\nend", "    local v, r = {}, {}\n    for _, x in ipairs(l) do\n  \
    \      if not v[x] then table.insert(r, x) end\n        v[x] = true\n    end\n\
    \    return r\nend", "  local s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n\
    \  end\n  local t = {}\n  for k, _ in pairs(s) do\n    t[#t+1] = k\n  end\n  table.sort(t)\n\
    \  return t\nend", "  local seen = {}\n  for _, e in ipairs(l) do\n    seen[e]\
    \ = true\n  end\n  local res = {}\n  for k, _ in pairs(seen) do\n    table.insert(res,\
    \ k)\n  end\n  table.sort(res)\n  return res\nend", "  local seen = {}\n  local\
    \ result = {}\n  for _, v in ipairs(l) do\n    if not seen[v] then\n      table.insert(result,\
    \ v)\n      seen[v] = true\n    end\n  end\n  return result\nend", "    local\
    \ result = {}\n    local hash = {}\n    for _, v in ipairs(l) do\n        if not\
    \ hash[v] then\n            table.insert(result, v)\n            hash[v] = true\n\
    \        end\n    end\n    return result\nend", "  local r = {}\n  for i = 1,\
    \ #l do\n    local el = l[i]\n    local elIsUnique = true\n    for _, el2 in ipairs(r)\
    \ do\n      if el == el2 then\n        elIsUnique = false\n        break\n   \
    \   end\n    end\n    if elIsUnique then\n      table.insert(r, el)\n    end\n\
    \  end\n  return r\nend", "    local h = {}\n    for _, v in ipairs(l) do\n  \
    \      h[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(h) do\n \
    \       table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend", " \
    \ local m = {}\n  for i = 1, #l do\n    m[l[i]] = true\n  end\n  local n = {}\n\
    \  for k, _ in pairs(m) do\n    n[#n + 1] = k\n  end\n  table.sort(n)\n  return\
    \ n\nend", "    local h = {}\n    for _, i in ipairs(l) do\n        h[i] = true\n\
    \    end\n    return keys(h)\nend", "  local hash = {}\n  local result = {}\n\
    \  for _, v in ipairs(l) do\n    if not hash[v] then\n      result[#result+1]\
    \ = v\n      hash[v] = true\n    end\n  end\n  return result\nend", "\tlocal res\
    \ = {}\n\tfor _, v in ipairs(l) do\n\t\tif #res == 0 or v ~= res[#res] then\n\t\
    \t\tres[#res + 1] = v\n\t\tend\n\tend\n\treturn res\nend", "    local list = {}\n\
    \    for _, v in ipairs(l) do\n        if not list[v] then\n            list[v]\
    \ = true\n            table.insert(list, v)\n        end\n    end\n    table.sort(list)\n\
    \    return list\nend", "\tlocal s = {}\n\tfor _, v in ipairs(l) do\n\t\ts[v]\
    \ = true\n\tend\n\tlocal r = {}\n\tfor k, _ in pairs(s) do\n\t\ttable.insert(r,\
    \ k)\n\tend\n\ttable.sort(r)\n\treturn r\nend", "    local sl = {}\n    for i\
    \ = 1, #l do\n        sl[i] = l[i]\n    end\n    table.sort(sl)\n    local prev\
    \ = sl[1]\n    local last = 1\n    for i = 2, #sl do\n        if sl[i] ~= prev\
    \ then\n            last = last + 1\n            sl[last] = sl[i]\n          \
    \  prev = sl[i]\n        end\n    end\n    for i = last + 1, #sl do\n        sl[i]\
    \ = nil\n    end\n    return sl\nend", "    local result = {}\n    for i, v in\
    \ ipairs(l) do\n        if not contains(result, v) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    -- new list\n    local\
    \ u = {}\n    -- table for keeping track of already added values\n    local t\
    \ = {}\n    -- sort list\n    table.sort(l)\n    -- loop through list\n    for\
    \ _,v in ipairs(l) do\n        -- if value is not already in t\n        if not\
    \ t[v] then\n            -- add value to new list\n            table.insert(u,\
    \ v)\n            -- add value to t\n            t[v] = true\n        end\n  \
    \  end\n    -- return new list\n    return u\nend", "    local hash = {}\n   \
    \ local res = {}\n    for _, v in ipairs(l) do\n        if not hash[v] then\n\
    \            res[#res+1] = v\n            hash[v] = true\n        end\n    end\n\
    \    return res\nend", "    table.sort(l)\n    local i = 1\n    while i < #l do\n\
    \        if l[i] == l[i+1] then\n            table.remove(l, i)\n        else\n\
    \            i = i + 1\n        end\n    end\n    return l\nend", "    return{}\n\
    end", "  local set = {}\n  for _, v in ipairs(l) do\n    set[v] = true\n  end\n\
    \  local list = {}\n  for k, _ in pairs(set) do\n    table.insert(list, k)\n \
    \ end\n  table.sort(list)\n  return list\nend", "  local ret = {}\n  local found\
    \ = {}\n  for _, v in ipairs(l) do\n    if not found[v] then\n      found[v] =\
    \ true\n      table.insert(ret, v)\n    end\n  end\n  return ret\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    u[v] = true\n  end\n  local ll = {}\n\
    \  for k, _ in pairs(u) do\n    table.insert(ll, k)\n  end\n  table.sort(ll)\n\
    \  return ll\nend", "  local seen = {}\n  for _, x in ipairs(l) do\n    seen[x]\
    \ = true\n  end\n  local res = {}\n  for k, _ in pairs(seen) do\n    table.insert(res,\
    \ k)\n  end\n  table.sort(res)\n  return res\nend", "    local u = {}\n    for\
    \ _, v in ipairs(l) do\n        if not u[v] then\n            u[v] = true\n  \
    \          table.insert(u, v)\n        end\n    end\n    return u\nend", "  local\
    \ hash, res = {}, {}\n  for _, v in ipairs(l) do\n    if not hash[v] then\n  \
    \    hash[v] = true\n      res[#res+1] = v\n    end\n  end\n  return res\nend",
  "\tlocal ret = {}\n\tfor i = 1, #l do\n\t\tif not table.contains(ret, l[i]) then\n\
    \t\t\ttable.insert(ret, l[i])\n\t\tend\n\tend\n\treturn ret\nend", "    local\
    \ u = {}\n    for _, v in ipairs(l) do\n        u[v] = true\n    end\n    l =\
    \ {}\n    for k, _ in pairs(u) do\n        table.insert(l, k)\n    end\n    table.sort(l)\n\
    \    return l\nend", "  local uniq = {}\n  for _, v in ipairs(l) do\n    uniq[v]\
    \ = true\n  end\n  return keys(uniq)\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    r[v] = true\n  end\n  local s = {}\n  for k, _ in pairs(r) do\n    table.insert(s,\
    \ k)\n  end\n  table.sort(s)\n  return s\nend", "    local uniq = {}\n    for\
    \ _, e in ipairs(l) do\n        if not uniq[e] then uniq[e] = true end\n    end\n\
    \    return keys(uniq)\nend", "    local a = {}\n    for _, i in ipairs(l) do\n\
    \        a[i] = i\n    end\n    local j = 1\n    for _, i in ipairs(l) do\n  \
    \      if a[i] then\n            a[j] = a[i]\n            a[i] = nil\n       \
    \     j = j + 1\n        end\n    end\n    return a\nend", "    local r = {}\n\
    \    local added = {}\n    for _, x in ipairs(l) do\n        if not added[x] then\n\
    \            r[#r + 1] = x\n            added[x] = true\n        end\n    end\n\
    \    return r\nend", "  local out = {}\n  for _,v in ipairs(l) do\n    if not\
    \ utils.contains(out, v) then\n      table.insert(out, v)\n    end\n  end\n  return\
    \ out\nend", "  local m = { }\n  for k, v in ipairs(l) do\n    m[v] = true\n \
    \ end\n  local r = { }\n  for k, v in pairs(m) do\n    table.insert(r, k)\n  end\n\
    \  table.sort(r)\n  return r\nend", "\tlocal ret = {}\n\tfor _, x in ipairs(l)\
    \ do\n\t\tif not set[x] then\n\t\t\tret[#ret + 1] = x\n\t\t\tset[x] = true\n\t\
    \tend\n\tend\n\treturn ret\nend", "\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\
    \t\tif not t[v] then\n\t\t\tt[v] = true\n\t\t\ttable.insert(t, v)\n\t\tend\n\t\
    end\n\treturn t\nend", "  local res = {}\n  for _, v in ipairs(l) do\n    if not\
    \ contains(res, v) then\n      table.insert(res, v)\n    end\n  end\n  return\
    \ res\nend", "\tlocal u = {}\n\tfor _, v in ipairs(l) do\n\t\tu[v] = true\n\t\
    end\n\treturn sorted(keys(u))\nend", "    local d = {}\n    for _,v in ipairs(l)\
    \ do\n        d[v] = true\n    end\n    local u = {}\n    for k,_ in pairs(d)\
    \ do\n        table.insert(u, k)\n    end\n    table.sort(u)\n    return u\nend",
  "  local n = {}\n  for _,v in ipairs(l) do\n    n[v] = (n[v] or 0) + 1\n  end\n\
    \  return keys(n)\nend", "    local unique = {}\n    for _, v in ipairs(l) do\n\
    \        if not tablex.find(unique, v) then\n            table.insert(unique,\
    \ v)\n        end\n    end\n    return unique\nend", "    table.sort(l)\n    local\
    \ n = 1\n    while n < #l do\n        if l[n] == l[n+1] then\n            table.remove(l,\
    \ n)\n        else\n            n = n + 1\n        end\n    end\n    return l\n\
    end", "\tlocal t = {}\n\tfor _,v in ipairs(l) do\n\t\tt[v] = true\n\tend\n\treturn\
    \ keys(t)\nend", "    local hash = {}\n    local res = {}\n    for _, v in ipairs(l)\
    \ do\n        if not hash[v] then\n            res[#res+1] = v\n            hash[v]\
    \ = true\n        end\n    end\n    return res\nend", "    local seen = {}\n \
    \   local result = {}\n    for _, v in ipairs(l) do\n        if not seen[v] then\n\
    \            seen[v] = true\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend", "\tlocal sl = {}\n\tlocal i = 1\n\tfor _, v\
    \ in pairs(l) do\n\t\tif not contains(sl, v) then\n\t\t\tsl[i] = v\n\t\t\ti =\
    \ i + 1\n\t\tend\n\tend\n\ttable.sort(sl)\n\treturn sl\nend", "\tlocal r = {}\n\
    \tfor _, v in ipairs(l) do\n\t\tr[v] = true\n\tend\n\treturn table.keys(r)\nend",
  "  local res = {}\n  local seen = {}\n  for _, v in ipairs(l) do\n    if not seen[v]\
    \ then\n      res[#res + 1] = v\n      seen[v] = true\n    end\n  end\n  return\
    \ res\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if #r == 0 or v\
    \ ~= r[#r] then\n      r[#r + 1] = v\n    end\n  end\n  return r\nend", "\tlocal\
    \ s = {}\n\tfor i, v in ipairs(l) do\n\t\ts[v] = v\n\tend\n\tlocal r = {}\n\t\
    for i, v in pairs(s) do\n\t\ttable.insert(r, v)\n\tend\n\ttable.sort(r)\n\treturn\
    \ r\nend", "    local seen = {}\n    local uniq = {}\n    for _, v in ipairs(l)\
    \ do\n        if not seen[v] then\n            table.insert(uniq, v)\n       \
    \     seen[v] = true\n        end\n    end\n    return uniq\nend", "    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            res[#res + 1] = v\n        end\n    end\n    table.sort(res)\n  \
    \  return res\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n\
    \  end\n  return keys(t)\nend", "  local flags = {}\n  local cnt = 0\n  for i\
    \ = 1, #l do\n    if not flags[l[i]] then\n      cnt = cnt + 1\n      flags[l[i]]\
    \ = cnt\n    end\n  end\n  local res = {}\n  for k, v in pairs(flags) do\n   \
    \ res[v] = k\n  end\n  table.sort(res)\n  return res\nend", "  local t = {}\n\
    \  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n  for k,\
    \ _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\n\
    end", "  local u = {}\n  local done = {}\n  for _, v in ipairs(l) do\n    if not\
    \ done[v] then\n      u[#u + 1] = v\n      done[v] = true\n    end\n  end\n  return\
    \ u\nend", "  if not l then return {} end\n  local u = {}\n  for _, v in ipairs(l)\
    \ do\n    if not util.index_of(u, v) then\n      table.insert(u, v)\n    end\n\
    \  end\n  return u\nend", "    local uniques = {}\n    for i,v in ipairs(l) do\n\
    \        if not uniques[v] then\n            uniques[v] = true\n            l[#l+1]\
    \ = v\n        end\n    end\n    table.sort(l)\n    local i = 0\n    while l[i+1]\
    \ do\n        i = i + 1\n    end\n    return l\nend", "\tlocal t = {}\n\tfor _,\
    \ v in ipairs(l) do\n\t\tt[v] = true\n\tend\n\tlocal u = {}\n\tfor k, _ in pairs(t)\
    \ do\n\t\tu[#u + 1] = k\n\tend\n\treturn u\nend", "\tlocal aux = {}\n\tfor _,\
    \ v in ipairs(l) do\n\t\taux[v] = true\n\tend\n\treturn keys(aux)\nend", "\tlocal\
    \ r, h = {}, {}\n\tfor _, v in ipairs(l) do\n\t\tif not h[v] then\n\t\t\th[v]\
    \ = true\n\t\t\tr[#r + 1] = v\n\t\tend\n\tend\n\treturn r\nend", "    local c\
    \ = {}\n    for _,v in ipairs(l) do c[v] = true end\n    local i = 0\n    return\
    \ function()\n        i = i + 1\n        for k,_ in pairs(c) do\n            if\
    \ i == 1 then return k end\n            i = i - 1\n        end\n    end\nend",
  "    if l == nil then return nil end\n    local s = {}\n    for _, v in ipairs(l)\
    \ do\n        s[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(s)\
    \ do\n        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend",
  "\tlocal u = {}\n\tfor _,v in ipairs(l) do\n\t\tu[v] = true\n\tend\n\tlocal r =\
    \ {}\n\tfor k,_ in pairs(u) do\n\t\ttable.insert(r, k)\n\tend\n\ttable.sort(r)\n\
    \treturn r\nend", "    local hash = {}\n    local res = {}\n    for _, v in ipairs(l)\
    \ do\n        if not hash[v] then\n            res[#res+1] = v\n            hash[v]\
    \ = true\n        end\n    end\n    return res\nend", "  local u = {}\n  for _,\
    \ v in ipairs(l) do\n    if not utils.contains(u, v) then\n      table.insert(u,\
    \ v)\n    end\n  end\n  return u\nend", "    local ul = {}\n    for i,v in ipairs(l)\
    \ do\n        if not utils.array.contains(ul, v) then\n            table.insert(ul,\
    \ v)\n        end\n    end\n    return ul\nend", "    local s = {}\n    for _,v\
    \ in ipairs(l) do\n        s[v] = true\n    end\n    local r = {}\n    for k,_\
    \ in pairs(s) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n   \
    \ return r\nend", "  local s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n\
    \  end\n  return sort(keys(s))\nend", "  local res = {}\n  local function add\
    \ (v)\n    if res[v] == nil then\n      res[v] = true\n      return true\n   \
    \ end\n    return false\n  end\n  if not l then return {} end\n  local n = #l\n\
    \  for i = 1, n do\n    if add(l[i]) then\n      for j = i + 1, n do\n       \
    \ if l[i] == l[j] then\n          table.remove(l, j)\n          j = j - 1\n  \
    \        n = n - 1\n        end\n      end\n    end\n  end\n  table.sort(l)\n\
    \  return l\nend", "  local seen = {}\n  local out = {}\n  for i = 1, #l do\n\
    \    local v = l[i]\n    if not seen[v] then\n      seen[v] = true\n      out[#out\
    \ + 1] = v\n    end\n  end\n  return out\nend", "    table.sort(l)\n    local\
    \ unique_elements = {}\n    for i, element in ipairs(l) do\n        if i == 1\
    \ or l[i-1] ~= element then\n            table.insert(unique_elements, element)\n\
    \        end\n    end\n    return unique_elements\nend", "\tlocal res = {}\n\t\
    for _,e in ipairs(l) do\n\t\tif not contains(res, e) then table.insert(res, e)\
    \ end\n\tend\n\ttable.sort(res)\n\treturn res\nend", "  local keys = {}\n  local\
    \ d = {}\n  for _, v in ipairs(l) do\n    if not keys[v] then\n      keys[v] =\
    \ true\n      table.insert(d, v)\n    end\n  end\n  return d\nend", "  local r\
    \ = {}\n  local p = {}\n  for _, v in ipairs(l) do\n    if not p[v] then\n   \
    \   r[#r + 1] = v\n      p[v] = true\n    end\n  end\n  return r\nend", "    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        res[v] = true\n    end\n   \
    \ return sortKeys(res)\nend", "\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\t\
    t[v] = true\n\tend\n\treturn table.keys(t)\nend", "  local t = {}\n  for i, v\
    \ in ipairs(l) do\n    t[v] = v\n  end\n  local r = {}\n  for _, v in pairs(t)\
    \ do\n    table.insert(r, v)\n  end\n  table.sort(r)\n  return r\nend", "    local\
    \ s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(s) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend", "  assert_type(l, 'table', 1)\n  local\
    \ uniq = {}\n  for _, v in ipairs(l) do\n    if not uniq[v] then uniq[v] = true\
    \ end\n  end\n  return from_map(uniq)\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do\n    u[v] = true\n  end\n  local result = {}\n  for k, _ in pairs(u) do\n\
    \    table.insert(result, k)\n  end\n  table.sort(result)\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
