name: HumanEval_104_unique_digits
language: lua
prompt: "-- Given a list of positive integers x. return a sorted list of all \n--\
  \ elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
  \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
  -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
  \ unique_digits(x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
  \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
  \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
  \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["  local res = {}\n  for i = 1, #x do\n    local n = x[i]\n    local\
    \ flag = true\n    while n > 0 do\n      if n % 2 == 0 then\n        flag = false\n\
    \        break\n      end\n      n = math.floor(n / 10)\n    end\n    if flag\
    \ then\n      res[#res + 1] = x[i]\n    end\n  end\n  return res\nend", "    local\
    \ digits = {0,1,2,3,4,5,6,7,8,9}\n    local result = {}\n    for _,v in ipairs(x)\
    \ do\n        for _,d in ipairs(digits) do\n            if tostring(v):find(tostring(d))\
    \ ~= nil then\n                table.insert(result,v)\n                break\n\
    \            end\n        end\n    end\n    return result\nend", "\tlocal unique\
    \ = {}\n\tfor i = 1, #x do\n\t\tlocal num = x[i]\n\t\tlocal even = false\n\t\t\
    while num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit % 2 == 0 then\n\
    \t\t\t\teven = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\
    \t\tend\n\t\tif not even then\n\t\t\ttable.insert(unique, x[i])\n\t\tend\n\tend\n\
    \ttable.sort(unique)\n\treturn unique\nend", "\tlocal function is_unique(n)\n\t\
    \tlocal s = tostring(n)\n\t\tfor i = 1, #s do\n\t\t\tif math.fmod(string.byte(s,\
    \ i) - 48, 2) == 0 then return false end\n\t\tend\n\t\treturn true\n\tend\n\t\
    local t = {}\n\tfor i = 1, #x do\n\t\tif is_unique(x[i]) then table.insert(t,\
    \ x[i]) end\n\tend\n\ttable.sort(t)\n\treturn t\nend", "  -- your code here\n\
    end", "\tlocal unique_digits = {}\n\tlocal unique_num = {}\n\tfor i = 1, #x do\n\
    \t\tif (x[i] < 10) then\n\t\t\ttable.insert(unique_digits, x[i])\n\t\tend\n\t\t\
    if (x[i] >= 10) then\n\t\t\tfor div = 10, 1, -1 do\n\t\t\t\tif (x[i] % div ==\
    \ 0) then\n\t\t\t\t\tif ((x[i] / div) % 2 == 0) then\n\t\t\t\t\t\tbreak\n\t\t\t\
    \t\telse\n\t\t\t\t\t\ttable.insert(unique_digits, x[i])\n\t\t\t\t\t\tbreak\n\t\
    \t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(unique_digits)\n\
    \treturn unique_digits\nend", "    local aux = {}\n    local cont = 0\n    local\
    \ aux2 = {}\n    local cont2 = 0\n    local even = {'0', '2', '4', '6', '8'}\n\
    \    for i, v in ipairs(x) do\n        local s = tostring(v)\n        for j =\
    \ 1, #s do\n            for k, w in ipairs(even) do\n                if s:sub(j,\
    \ j) == w then\n                    cont = cont + 1\n                end\n   \
    \         end\n        end\n        if cont == 0 then\n            table.insert(aux,\
    \ v)\n        end\n        cont = 0\n    end\n    for i, v in ipairs(aux) do\n\
    \        cont2 = cont2 + 1\n        aux2[cont2] = v\n    end\n    table.sort(aux2)\n\
    \    return aux2\nend", "    local digits = {}\n    for i = 1, #x do\n       \
    \ if(#(tostring(x[i]):gsub(\"%d+\", \"\")) == 0) then\n            table.insert(digits,\
    \ x[i])\n        end\n    end\n    return digits\nend", "\tlocal uniques = {}\n\
    \tfor i, v in ipairs(x) do\n\t\tlocal has_even = false\n\t\twhile v > 0 do\n\t\
    \t\tif v % 2 == 0 then\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\
    \tv = v // 10\n\t\tend\n\t\tif not has_even then\n\t\t\ttable.insert(uniques,\
    \ x[i])\n\t\tend\n\tend\n\tif #uniques > 0 then\n\t\ttable.sort(uniques)\n\tend\n\
    \treturn uniques\nend", "  local x_strs = {}\n  for _,i in ipairs(x) do\n    x_strs[#x_strs+1]\
    \ = tostring(i)\n  end\n  local strs = {}\n  for _,s in ipairs(x_strs) do\n  \
    \  strs[#strs+1] = s:gsub('[24680]', '')\n  end\n  local set = {}\n  for _,s in\
    \ ipairs(strs) do\n    if #s == #tostring(x[1]) then\n      set[#set+1] = tonumber(s)\n\
    \    end\n  end\n  local res = {}\n  for _,i in ipairs(set) do\n    res[#res+1]\
    \ = i\n  end\n  table.sort(res)\n  return res\nend", "    local ans = {}\n   \
    \ for i = 1, #x do\n        if 0 ~= all_odd(x[i]) then\n            table.insert(ans,\
    \ x[i])\n        end\n    end\n    return ans\nend", "  -- TODO: your code here\n\
    \  local n = {}\n  for k,v in pairs(x) do\n      if check(v) then\n          table.insert(n,v)\n\
    \      end\n  end\n  return n\nend", "    local unique_digits = {}\n    for i\
    \ = 1, #x do\n        local has_even_digit = false\n        local x_i = x[i]\n\
    \        while x_i > 0 do\n            local digit = x_i % 10\n            if\
    \ digit % 2 == 0 then\n                has_even_digit = true\n               \
    \ break\n            end\n            x_i = (x_i - digit) / 10\n        end\n\
    \        if not has_even_digit then\n            table.insert(unique_digits, x[i])\n\
    \        end\n    end\n    table.sort(unique_digits)\n    return unique_digits\n\
    end", "    local res = {}\n    for _, v in ipairs(x) do\n        -- if not any\
    \ even digits, then insert it into the table\n        if not string.find(tostring(v),\
    \ \"%d+%d+\") then\n            table.insert(res, v)\n        end\n    end\n \
    \   table.sort(res)\n    return res\nend", "    local i,j,result = 1,1,{}\n  \
    \  for i = 1,#x do\n        local int = x[i]\n        while int > 0 do\n     \
    \       local r = int % 10\n            if r % 2 == 0 then\n                result[j]\
    \ = nil\n                break\n            else\n                result[j] =\
    \ x[i]\n            end\n            int = math.floor(int / 10)\n        end\n\
    \        j = j + 1\n    end\n    table.sort(result)\n    return result\nend",
  "  local t = {}\n  for i,v in ipairs(x) do\n    local n = tonumber(v)\n    local\
    \ function even_count(n)\n      local count = 0\n      while n > 0 do\n      \
    \  local m = n % 10\n        if m % 2 == 0 then\n          count = count + 1\n\
    \        end\n        n = math.floor(n / 10)\n      end\n      return count\n\
    \    end\n    if even_count(n) == 0 then\n      table.insert(t, v)\n    end\n\
    \  end\n  table.sort(t)\n  return t\nend", "\tlocal even_digits = {2, 4, 6, 8,\
    \ 0}\n\tlocal unique_digits = {}\n\tfor i = 1, #x do\n\t\tlocal number = x[i]\n\
    \t\tlocal digit\n\t\tlocal has_even_digit = false\n\t\twhile number > 0 do\n\t\
    \t\tdigit = number % 10\n\t\t\tif even_digits[digit] then\n\t\t\t\thas_even_digit\
    \ = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnumber = math.floor(number / 10)\n\t\
    \tend\n\t\tif not has_even_digit then\n\t\t\ttable.insert(unique_digits, x[i])\n\
    \t\tend\n\tend\n\ttable.sort(unique_digits)\n\treturn unique_digits\nend", " \
    \   local is_odd_digit = function(ch) return ch ~= '0' and ch ~= '2' and ch ~=\
    \ '4' and ch ~= '6' and ch ~= '8' end\n    local has_odd_digit = function(s) return\
    \ string.find(s, '^[13579]+$') end\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        if has_odd_digit(tostring(v)) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend", " \
    \   if type(x) ~= \"table\" then return nil end\n    if #x == 0 then return {}\
    \ end\n    local ret = {}\n    for _, num in ipairs(x) do\n        if type(num)\
    \ ~= \"number\" then return nil end\n        if unique_digit(num) then ret[#ret+1]\
    \ = num end\n    end\n    table.sort(ret)\n    return ret\nend", "    local result\
    \ = {}\n    for i, v in ipairs(x) do\n        local even = false\n        while\
    \ v > 0 do\n            local d = v % 10\n            if d % 2 == 0 then\n   \
    \             even = true\n                break\n            end\n          \
    \  v = math.floor(v / 10)\n        end\n        if not even then\n           \
    \ table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n \
    \   return result\nend", "    return List.sort(List.filter(function(i)\n     \
    \   return string.match(i, '[02468]') == nil\n    end, x))\nend", "  local res\
    \ = {}\n  for _, x_ in ipairs(x) do\n    if x_ < 10 or x_ % 2 == 1 then\n    \
    \  table.insert(res, x_)\n    else\n      local len = #tostring(x_)\n      local\
    \ is_odd = true\n      for i = 1, len do\n        local digit = math.floor(x_\
    \ / 10^(i - 1)) % 10\n        if digit % 2 == 0 then\n          is_odd = false\n\
    \          break\n        end\n      end\n      if is_odd then\n        table.insert(res,\
    \ x_)\n      end\n    end\n  end\n  return res\nend", "    local res = {}\n  \
    \  for i, v in ipairs(x) do\n        if not tostring(v):match('[%l]') then\n \
    \           table.insert(res, v)\n        end\n    end\n    return res\nend",
  "    -- YOUR CODE HERE\n    local res = {}\n    for i, v in ipairs(x) do\n     \
    \   local flag = true\n        while v > 0 do\n            local cur = v % 10\n\
    \            if cur % 2 == 0 then\n                flag = false\n            \
    \    break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if flag then\n            table.insert(res, x[i])\n        end\n    end\n\
    \    return res\nend", "    local sorted_list = {}\n    for _, i in ipairs(x)\
    \ do\n        if not i:match('[02468]') then\n            table.insert(sorted_list,\
    \ i)\n        end\n    end\n    table.sort(sorted_list)\n    return sorted_list\n\
    end", "  local uniques = {}\n  local len = #x\n  for i = 1, len do\n    if has_unique_digits(x[i])\
    \ then\n      uniques[#uniques + 1] = x[i]\n    end\n  end\n  table.sort(uniques)\n\
    \  return uniques\nend", "  return nil\nend", "    local t = {}\n    local x_len\
    \ = #x\n    for i = 1, x_len do\n        local x_i = tostring(x[i])\n        local\
    \ x_i_len = #x_i\n        local flag = false\n        for j = 1, x_i_len do\n\
    \            local x_i_j = tonumber(x_i:sub(j, j))\n            if (x_i_j % 2\
    \ == 0) then\n                flag = true\n                break\n           \
    \ end\n        end\n        if (not flag) then\n            table.insert(t, x[i])\n\
    \        end\n    end\n    table.sort(t)\n    return t\nend", "\tlocal evens =\
    \ {0, 2, 4, 6, 8}\n\tlocal res = {}\n\tfor _, n in ipairs(x) do\n\t\tlocal has_even\
    \ = false\n\t\twhile n > 0 do\n\t\t\tif in_table(evens, n % 10) then\n\t\t\t\t\
    has_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tn = math.floor(n / 10)\n\t\t\
    end\n\t\tif not has_even then\n\t\t\ttable.insert(res, x[_])\n\t\tend\n\tend\n\
    \ttable.sort(res)\n\treturn res\nend", "    local a, b = {}, {}\n    for i, v\
    \ in ipairs(x) do\n        local c = tostring(v)\n        local d = {}\n     \
    \   for j = 1, #c do\n            d[c:sub(j, j)] = true\n        end\n       \
    \ for j = 0, 9 do\n            d[tostring(j)] = nil\n        end\n        for\
    \ j, v in pairs(d) do\n            if tonumber(j) % 2 == 0 then\n            \
    \    a[#a + 1] = v\n                break\n            end\n        end\n    \
    \    if not a[#a] then\n            b[#b + 1] = i\n        end\n    end\n    local\
    \ c = {}\n    for i, v in ipairs(b) do\n        c[#c + 1] = x[v]\n    end\n  \
    \  return c\nend", "\tlocal l = {}\n\tfor _, i in ipairs(x) do\n\t\tlocal even\
    \ = false\n\t\twhile i > 0 do\n\t\t\tlocal d = i % 10\n\t\t\tif d % 2 == 0 then\n\
    \t\t\t\teven = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\ti = math.floor(i / 10)\n\t\
    \tend\n\t\tif not even then\n\t\t\ttable.insert(l, i)\n\t\tend\n\tend\n\treturn\
    \ l\nend", "    local sorted = {}\n    for _, num in ipairs(x) do\n        local\
    \ has_even_digit = false\n        while num > 0 do\n            local last_digit\
    \ = num % 10\n            if last_digit % 2 == 0 then\n                has_even_digit\
    \ = true\n                break\n            end\n            num = math.floor(num\
    \ / 10)\n        end\n        if not has_even_digit then\n            table.insert(sorted,\
    \ num)\n        end\n    end\n    table.sort(sorted)\n    return sorted\nend",
  "  local t = {}\n  local unique = {}\n  for k, v in pairs(x) do\n    t[v] = false\n\
    \    for n in string.gmatch(v, \"%d\") do\n      if (tonumber(n) % 2 == 0) then\n\
    \        t[v] = true\n        break\n      end\n    end\n  end\n  for k, v in\
    \ pairs(t) do\n    if (v == false) then\n      table.insert(unique, k)\n    end\n\
    \  end\n  table.sort(unique)\n  return unique\nend", "  local r = {}\n  for i,\
    \ y in ipairs(x) do\n    local has_even = false\n    local q = y\n    while q\
    \ > 0 do\n      local d = q % 10\n      if d % 2 == 0 then\n        has_even =\
    \ true\n        break\n      end\n      q = math.floor(q / 10)\n    end\n    if\
    \ not has_even then\n      table.insert(r, y)\n    end\n  end\n  table.sort(r)\n\
    \  return r\nend", "  local r = {}\n  for i = 1, #x do\n    local is_odd = true\n\
    \    for j = 1, #tostring(x[i]) do\n      if tonumber(tostring(x[i]):sub(j, j))\
    \ % 2 == 0 then\n        is_odd = false\n        break\n      end\n    end\n \
    \   if is_odd then\n      table.insert(r, x[i])\n    end\n  end\n  return r\n\
    end", "    local uniques = {}\n    for _, v in ipairs(x) do\n        -- Is this\
    \ number unique?\n        local unique = true\n        for n in tostring(v):gmatch('%d')\
    \ do\n            if tonumber(n) % 2 == 0 then\n                unique = false\n\
    \                break\n            end\n        end\n        if unique then\n\
    \            table.insert(uniques, v)\n        end\n    end\n    table.sort(uniques)\n\
    \    return uniques\nend", "    local t = {}\n    local j = 1\n    for i = 1,\
    \ #x do\n        local even = false\n        local s = tostring(x[i])\n      \
    \  for k = 1, #s do\n            if s:sub(k, k) % 2 == 0 then\n              \
    \  even = true\n                break\n            end\n        end\n        if\
    \ not even then\n            t[j] = x[i]\n            j = j + 1\n        end\n\
    \    end\n    table.sort(t)\n    return t\nend", "    local result = {}\n    local\
    \ even = 0\n    for i = 1, #x do\n        while x[i] > 0 do\n            if (x[i]\
    \ % 10) % 2 == 0 then\n                even = 1\n                break\n     \
    \       end\n            x[i] = math.floor(x[i] / 10)\n        end\n        if\
    \ even == 0 then\n            table.insert(result, x[i])\n        end\n      \
    \  even = 0\n    end\n    table.sort(result)\n    return result\nend", "    --\
    \ IMPLEMENT HERE\n    return {}\nend", "    local r = {}\n    for _, v in ipairs(x)\
    \ do\n        local e\n        for i = 1, string.len(tostring(v)) do\n       \
    \     if tonumber(string.sub(tostring(v), i, i)) % 2 == 0 then\n             \
    \   e = false\n                break\n            else\n                e = true\n\
    \            end\n        end\n        if e then\n            table.insert(r,\
    \ v)\n        end\n    end\n    table.sort(r)\n    return r\nend", "  -- Placeholder\
    \ to return the list.\n  local list = {}\n  -- Loop over the given list.\n  for\
    \ _, v in ipairs(x) do\n    -- If the number doesn't have any even digit...\n\
    \    if math.mod(v, 2) ~= 0 then\n      -- ... append it to the list.\n      table.insert(list,\
    \ v)\n    end\n  end\n  -- Return the sorted list.\n  return table.sort(list)\n\
    end", "  local res = {}\n  for _, n in ipairs(x) do\n    local is_unique = true\n\
    \    for d in string.gmatch(n, '%d') do\n      if 2*(d % 2) == 0 then\n      \
    \  is_unique = false\n        break\n      end\n    end\n    if is_unique then\n\
    \      table.insert(res, n)\n    end\n  end\n  table.sort(res)\n  return res\n\
    end", "    local digits = {}\n    for i = 1, #x do\n        local len = #tostring(x[i])\n\
    \        for j = 1, len do\n            local c = tonumber(tostring(x[i]):sub(j,\
    \ j))\n            if (c % 2 == 0) then\n                digits[i] = nil\n   \
    \             break\n            else\n                digits[i] = x[i]\n    \
    \        end\n        end\n    end\n    table.sort(digits)\n    return digits\n\
    end", "  -- YOUR CODE HERE\nend", "\tlocal res, eve = {}, {}\n\tfor _, v in ipairs(x)\
    \ do\n\t\tif not string.find(tostring(v), \"[24680]\") then\n\t\t\ttable.insert(res,\
    \ v)\n\t\telse\n\t\t\ttable.insert(eve, v)\n\t\tend\n\tend\n\treturn res, eve\n\
    end", "  -- TODO: Write your code here\n  local res = {}\n  for _, v in ipairs(x)\
    \ do\n    if not has_even_digit(v) then\n      table.insert(res, v)\n    end\n\
    \  end\n  table.sort(res)\n  return res\nend", "  local unique = {}\n  for i =\
    \ 1, #x do\n    local item = x[i]\n    local is_unique = true\n    while item\
    \ > 0 do\n      local digit = item % 10\n      if digit % 2 == 0 then\n      \
    \  is_unique = false\n        break\n      end\n      item = math.floor(item /\
    \ 10)\n    end\n    if is_unique then\n      table.insert(unique, x[i])\n    end\n\
    \  end\n  table.sort(unique)\n  return unique\nend", "    local s = Set.new{}\n\
    \    for _, n in ipairs(x) do\n        for c in string.gmatch(n, \"%d\") do\n\
    \            if tonumber(c) % 2 == 0 then\n                s:add(n)\n        \
    \    end\n        end\n    end\n    local t = {}\n    for _, n in ipairs(x) do\n\
    \        if not s:is_in(n) then\n            table.insert(t, n)\n        end\n\
    \    end\n    table.sort(t)\n    return t\nend", "    local result = {}\n    for\
    \ _, value in ipairs(x) do\n        local is_odd = true\n        for d in tostring(value):gmatch('%d')\
    \ do\n            if tonumber(d) % 2 == 0 then\n                is_odd = false\n\
    \                break\n            end\n        end\n        if is_odd then\n\
    \            table.insert(result, value)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "    local result = {}\n    for i,v in ipairs(x) do\n\
    \        if not has_even_digit(v) then\n            result[#result+1] = v\n  \
    \      end\n    end\n    table.sort(result)\n    return result\nend", "    local\
    \ out = {}\n    for _, num in ipairs(x) do\n        local unique = true\n    \
    \    for digit in tostring(num):gmatch('%d') do\n            if tonumber(digit)\
    \ % 2 == 0 then\n                unique = false\n                break\n     \
    \       end\n        end\n        if unique then\n            table.insert(out,\
    \ num)\n        end\n    end\n    table.sort(out)\n    return out\nend", "   \
    \ local function has_even_digit(v)\n        while v > 0 do\n            if v %\
    \ 2 == 0 then\n                return true\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        return false\n    end\n    local f = (function(r,\
    \ n)\n        if has_even_digit(n) then\n            return r\n        else\n\
    \            return n\n        end\n    end)\n    local u = table.unique(table.filter(x,\
    \ f))\n    table.sort(u)\n    return u\nend", "    local ans = {}\n    for i,\
    \ v in ipairs(x) do\n        if not even_digits(v) then\n            table.insert(ans,\
    \ v)\n        end\n    end\n    table.sort(ans)\n    return ans\nend", "\tlocal\
    \ r = {}\n\tfor i = 1, #x do\n\t\tlocal has_even_digit = false\n\t\tfor n in x[i]:gmatch('%d')\
    \ do\n\t\t\tif n:match('[02468]') then\n\t\t\t\thas_even_digit = true\n\t\t\t\t\
    break\n\t\t\tend\n\t\tend\n\t\tif not has_even_digit then\n\t\t\ttable.insert(r,\
    \ x[i])\n\t\tend\n\tend\n\treturn r\nend", "    -- return\nend", "  -- Write your\
    \ code here\nend\n```", "\tlocal new_list = {}\n\tfor i = 1, #x do\n\t\tif has_even_digit(x[i])\
    \ == false then\n\t\t\ttable.insert(new_list, x[i])\n\t\tend\n\tend\n\tlocal function\
    \ comp(a, b)\n\t\treturn a < b\n\tend\n\ttable.sort(new_list, comp)\n\treturn\
    \ new_list\nend", "\tlocal result = {}\n\tfor _, v in ipairs(x) do\n\t\tlocal\
    \ has_even = false\n\t\twhile v > 0 do\n\t\t\tlocal digit = v % 10\n\t\t\tif digit\
    \ % 2 == 0 then\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tv =\
    \ math.floor(v / 10)\n\t\tend\n\t\tif not has_even then\n\t\t\ttable.insert(result,\
    \ _)\n\t\tend\n\tend\n\ttable.sort(result)\n\treturn result\nend", "  local result\
    \ = {}\n  for _, v in ipairs(x) do\n    local even = false\n    while v > 0 do\n\
    \      if v % 2 == 0 then\n        even = true\n        break\n      end\n   \
    \   v = math.floor(v / 10)\n    end\n    if not even then\n      table.insert(result,\
    \ x[_])\n    end\n  end\n  return result\nend", "    -- TODO: Implement this function\n\
    \    -- Hint: Using a function which is already defined \n    -- in this file\
    \ is recommended.\n    local digits = {}\n    for i, v in ipairs(x) do\n     \
    \   if check_odd(v) then\n            table.insert(digits, v)\n        end\n \
    \   end\n    table.sort(digits)\n    return digits\nend", "    error(\"Not implemented\
    \ yet\")\nend", "  -- check input\n  if not x then return nil end\n  if type(x)\
    \ ~= 'table' then return nil end\n  -- check if any element is not positive\n\
    \  for i = 1, #x do\n    if x[i] <= 0 then return nil end\n  end\n  -- function\
    \ to check if x is unique digit\n  local function is_unique_digit(x)\n    local\
    \ t = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n    -- convert x to string to get each digits\n\
    \    local s = tostring(x)\n    -- check each digit in x\n    for i = 1, #s do\n\
    \      -- convert s[i] to number\n      local n = tonumber(s:sub(i, i))\n    \
    \  if t[n] == nil then\n        return false\n      end\n    end\n    return true\n\
    \  end\n  -- sort x from smallest to largest\n  table.sort(x)\n  -- get unique\
    \ elements and return it\n  local unique = {}\n  for i = 1, #x do\n    if is_unique_digit(x[i])\
    \ then\n      table.insert(unique, x[i])\n    end\n  end\n  return unique\nend",
  "    local str_fun = string.format\n    local list = {}\n    for i = 1, #x do\n\
    \        local num = x[i]\n        if not string.find(str_fun(\"%d\", num), '%d')\
    \ then\n            table.insert(list, num)\n        end\n    end\n    return\
    \ list\nend", "    local out = {}\n    for _, n in ipairs(x) do\n        if string.find(tostring(n),\
    \ '[02468]') == nil then\n            table.insert(out, n)\n        end\n    end\n\
    \    return out\nend", "    local s = {};\n    for i,v in ipairs(x) do\n     \
    \   if v < 0 then\n            v = -v;\n        end;\n        local r = 0;\n \
    \       local w = 0;\n        local even = false;\n        while v > 0 do\n  \
    \          r = v % 10;\n            v = math.floor(v / 10);\n            if r\
    \ % 2 == 0 then\n                even = true;\n                break;\n      \
    \      end;\n        end;\n        if not even then\n            s[#s + 1] = x[i];\n\
    \        end;\n    end;\n    table.sort(s);\n    return s;\nend;", "    local\
    \ r = {}\n    for _, v in ipairs(x) do\n        if not v:match('[02468]') then\n\
    \            table.insert(r, v)\n        end\n    end\n    table.sort(r)\n   \
    \ return r\nend", "  local res = {}\n  for _, num in ipairs(x) do\n    local has_even\
    \ = false\n    while num > 0 do\n      local digit = num % 10\n      if digit\
    \ % 2 == 0 then\n        has_even = true\n        break\n      end\n      num\
    \ = math.floor(num / 10)\n    end\n    if not has_even then table.insert(res,\
    \ num) end\n  end\n  table.sort(res)\n  return res\nend", "    local res = {}\n\
    \    local function is_unique(y)\n        local res = true\n        for i = 1,\
    \ #y do\n            if y[i] % 2 == 0 then\n                res = false\n    \
    \            break\n            end\n        end\n        return res\n    end\n\
    \    for i = 1, #x do\n        if is_unique(str_to_num(x[i])) then\n         \
    \   table.insert(res, x[i])\n        end\n    end\n    return res\nend", "\tlocal\
    \ even = {}\n\tlocal odd = {}\n\t\n\tfor i = 1, #x do\n\t\tif x[i] < 10 then\n\
    \t\t\ttable.insert(odd, x[i])\n\t\telseif x[i] < 100 then\n\t\t\tif x[i] % 2 ==\
    \ 0 then\n\t\t\t\ttable.insert(even, x[i])\n\t\t\telse\n\t\t\t\ttable.insert(odd,\
    \ x[i])\n\t\t\tend\n\t\telseif x[i] < 1000 then\n\t\t\tif x[i] % 2 == 0 or (x[i]/10)\
    \ % 2 == 0 or (x[i]/100) % 2 == 0 then\n\t\t\t\ttable.insert(even, x[i])\n\t\t\
    \telse\n\t\t\t\ttable.insert(odd, x[i])\n\t\t\tend\n\t\telseif x[i] < 10000 then\n\
    \t\t\tif x[i] % 2 == 0 or (x[i]/10) % 2 == 0 or (x[i]/100) % 2 == 0 or (x[i]/1000)\
    \ % 2 == 0 then\n\t\t\t\ttable.insert(even, x[i])\n\t\t\telse\n\t\t\t\ttable.insert(odd,\
    \ x[i])\n\t\t\tend\n\t\telseif x[i] < 100000 then\n\t\t\tif x[i] % 2 == 0 or (x[i]/10)\
    \ % 2 == 0 or (x[i]/100) % 2 == 0 or (x[i]/1000) % 2 == 0 or (x[i]/10000) % 2\
    \ == 0 then\n\t\t\t\ttable.insert(even, x[i])\n\t\t\telse\n\t\t\t\ttable.insert(odd,\
    \ x[i])\n\t\t\tend\n\t\telseif x[i] < 1000000 then\n\t\t\tif x[i] % 2 == 0 or\
    \ (x[i]/10) % 2 == 0 or (x[i]/100) % 2 == 0 or (x[i]/1000) % 2 == 0 or (x[i]/10000)\
    \ % 2 == 0 or (x", "  -- TODO: implement this function\nend", "   local result\
    \ = {}\n   for i, v in ipairs(x) do\n      if not string.find(tostring(v), \"\
    %d+[02468]\") then\n         table.insert(result, v)\n      end\n   end\n   table.sort(result)\n\
    \   return result\nend", "    local res = {}\n    for _, v in ipairs(x) do\n \
    \       if v % 2 == 1 then\n            table.insert(res, v)\n        end\n  \
    \  end\n    table.sort(res)\n    return res\nend", "    local _unique_digits =\
    \ {}\n    local even_numbers = {[0] = true, [2] = true, [4] = true, [6] = true,\
    \ [8] = true}\n    for _, v in ipairs(x) do\n        local current_number = v\n\
    \        local has_even_digit = false\n        while current_number > 0 do\n \
    \           local last_digit = current_number % 10\n            if even_numbers[last_digit]\
    \ then\n                has_even_digit = true\n                break\n       \
    \     end\n            current_number = math.floor(current_number / 10)\n    \
    \    end\n        if not has_even_digit then\n            table.insert(_unique_digits,\
    \ v)\n        end\n    end\n    table.sort(_unique_digits)\n    return _unique_digits\n\
    end", "  local res = {}\n  local seen = {}\n  for _, v in ipairs(x) do\n    local\
    \ has_even_digit = false\n    for _, d in ipairs(string.explode(tostring(v), \"\
    \", true)) do\n      if tonumber(d) % 2 == 0 then\n        has_even_digit = true\n\
    \        break\n      end\n    end\n    if not has_even_digit then\n      table.insert(res,\
    \ v)\n      seen[v] = true\n    end\n  end\n  return res\nend", "    return {\
    \ }\nend", "  if type(x) ~= \"table\" then return nil end\n  local t = {}\n  for\
    \ i,v in ipairs(x) do\n    if type(v) ~= \"number\" then\n      return nil\n \
    \   end\n    if not contains_even_digit(v) then\n      table.insert(t, v)\n  \
    \  end\n  end\n  table.sort(t)\n  return t\nend", "    return\nend", "    local\
    \ ret = {}\n    for i = 1, #x do\n        local flag = true\n        for c in\
    \ tostring(x[i]):gmatch(\"%d\") do\n            if tonumber(c) % 2 == 0 then\n\
    \                flag = false\n                break\n            end\n      \
    \  end\n        if flag then\n            table.insert(ret, x[i])\n        end\n\
    \    end\n    table.sort(ret)\n    return ret\nend", "    local evens = {\"0\"\
    , \"2\", \"4\", \"6\", \"8\"}\n    local y = {}\n    for i = 1, #x do\n      \
    \  local z = true\n        for j = 1, #evens do\n            for k = 1, #tostring(x[i])\
    \ do\n                if tostring(x[i])[k] == evens[j] then\n                \
    \    z = false\n                end\n            end\n        end\n        if\
    \ z then\n            table.insert(y, x[i])\n        end\n    end\n    if #y ==\
    \ 0 then\n        return y\n    else\n        return merge_sort(y)\n    end\n\
    end", " \n  return 0\nend", "    local function digit_even(n)\n        while n\
    \ ~= 0 do\n            if (n % 10) % 2 == 0 then\n                return true\n\
    \            end\n            n = math.floor(n / 10)\n        end\n        return\
    \ false\n    end\n    local y = {}\n    for i = 1, #x do\n        if not digit_even(x[i])\
    \ then\n            y[#y + 1] = x[i]\n        end\n    end\n    table.sort(y)\n\
    \    return y\nend", "    -- YOUR CODE HERE\n    if #x == 0 then\n        return\
    \ x\n    end\n    local res = {}\n    for k, v in pairs(x) do\n        local flag\
    \ = true\n        while v > 0 do\n            local digit = v % 10\n         \
    \   if digit % 2 == 0 then\n                flag = false\n                break\n\
    \            end\n            v = math.floor(v / 10)\n        end\n        if\
    \ flag then\n            table.insert(res, x[k])\n        end\n    end\n    if\
    \ #res == 0 then\n        return res\n    end\n    local temp\n    for i = 1,\
    \ #res do\n        for j = i + 1, #res do\n            if res[i] > res[j] then\n\
    \                temp = res[i]\n                res[i] = res[j]\n            \
    \    res[j] = temp\n            end\n        end\n    end\n    return res\nend",
  "  local result = {}\n  for _, v in ipairs(x) do\n    if (tostring(v):match(\"[02468]\"\
    )) then\n      goto continue\n    end\n    result[#result + 1] = v\n    ::continue::\n\
    \  end\n  table.sort(result)\n  return result\nend", "    local sorted = {}\n\
    \    local tmp", "\tlocal uniques = {}\n\tfor _, val in ipairs(x) do\n\t\tif unique(val)\
    \ then\n\t\t\ttable.insert(uniques, val)\n\t\tend\n\tend\n\ttable.sort(uniques)\n\
    \treturn uniques\nend", "    local result = {}\n    for _, num in ipairs(x) do\n\
    \        local no_even = true\n        for digit in num:gmatch(\"%d\") do\n  \
    \          if tonumber(digit) % 2 == 0 then\n                no_even = false\n\
    \                break\n            end\n        end\n        if no_even then\
    \ table.insert(result, num) end\n    end\n    table.sort(result)\n    return result\n\
    end", "\tlocal function unique_digits_helper(n)\n\t\tif n < 10 then\n\t\t\treturn\
    \ n % 2 == 1\n\t\telseif n % 2 == 0 then\n\t\t\treturn false\n\t\telse\n\t\t\t\
    return unique_digits_helper(math.floor(n / 10))\n\t\tend\n\tend\n\tlocal ans =\
    \ {}\n\tfor _, v in ipairs(x) do\n\t\tif unique_digits_helper(v) then\n\t\t\t\
    table.insert(ans, v)\n\t\tend\n\tend\n\ttable.sort(ans)\n\treturn ans\nend", " \
    \ local res = {}\n  for _, v in ipairs(x) do\n    local is_unique = true\n   \
    \ for digit in tostring(v):gmatch('.') do\n      if tonumber(digit) % 2 == 0 then\n\
    \        is_unique = false\n        break\n      end\n    end\n    if is_unique\
    \ then table.insert(res, v) end\n  end\n  table.sort(res)\n  return res\nend",
  "  -- your code goes here\nend", "  -- your code goes here\nend", "\tlocal ud =\
    \ {}\n\tfor _, v in ipairs(x) do\n\t\tlocal s = tostring(v)\n\t\tlocal b = true\n\
    \t\tfor c in s:gmatch(\".\") do\n\t\t\tif tonumber(c) % 2 == 0 then\n\t\t\t\t\
    b = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif b then\n\t\t\ttable.insert(ud,\
    \ v)\n\t\tend\n\tend\n\ttable.sort(ud)\n\treturn ud\nend", "  -- 1st approach:\
    \ Brute force\n  -- for i, a in ipairs(x) do\n  --   for j = 0, 9 do\n  --   \
    \  if a % 10 == j and j % 2 == 0 then\n  --       x[i] = nil\n  --     end\n \
    \ --     a = a / 10\n  --   end\n  -- end\n  -- return x", "  assert(type(x) ==\
    \ \"table\")\n  local result = {}\n  for i, v in ipairs(x) do\n    if tostring(v):match(\"\
    [02468]\") == nil then\n      table.insert(result, v)\n    end\n  end\n  return\
    \ result\nend", "\tlocal sorted = {}\n\tfor _, k in ipairs(x) do\n\t\tif not k:find(\"\
    %d*[24680]%d*\") then\n\t\t\ttable.insert(sorted, k)\n\t\tend\n\tend\n\ttable.sort(sorted)\n\
    \treturn sorted\nend", "\t-- Write your code here\nend", "    local res = {}\n\
    \    for _, v in ipairs(x) do\n        local has_even = false\n        while v\
    \ > 0 do\n            local d = v % 10\n            if d % 2 == 0 then\n     \
    \           has_even = true\n                break\n            end\n        \
    \    v = math.floor(v / 10)\n        end\n        if not has_even then\n     \
    \       table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    return\
    \ res\nend", "  local t = {}\n  for i,v in ipairs(x) do\n    if v == tonumber(v:gsub(\"\
    [24680]\", \"\")) then\n      table.insert(t, v)\n    end\n  end\n  table.sort(t)\n\
    \  return t\nend", "    local res = {}\n    for i = 1, #x do\n        local num\
    \ = x[i]\n        while num > 0 do\n            local digit = num % 10\n     \
    \       if digit % 2 == 0 then\n                break\n            end\n     \
    \       num = math.floor(num / 10)\n        end\n        if num == 0 then\n  \
    \          table.insert(res, x[i])\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend", "  local new_table = {}\n  for i = 1, #x do\n    if no_even_digit(x[i])\
    \ then\n      new_table[#new_table + 1] = x[i]\n    end\n  end\n  table.sort(new_table)\n\
    \  return new_table\nend", "    local ret = {}\n    for i = 1, #x do\n       \
    \ local count = 0\n        for j = 1, #(tostring(x[i])) do\n            local\
    \ c = tonumber(string.sub(tostring(x[i]), j, j))\n            if c % 2 == 0 then\n\
    \                count = count + 1\n            end\n        end\n        if count\
    \ == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n    table.sort(ret)\n\
    \    return ret\nend", "  local r = {}\n  for _, v in ipairs(x) do\n    local\
    \ u = true\n    for i in tostring(v):gmatch(\"%d\") do\n      if tonumber(i) %\
    \ 2 == 0 then u = false end\n    end\n    if u then r[#r+1] = v end\n  end\n \
    \ return r\nend", "\tlocal output = {}\n\tfor i, v in ipairs(x) do\n\t\tlocal\
    \ isValid = true\n\t\tlocal n = v\n\t\twhile n ~= 0 do\n\t\t\tif math.fmod(n,\
    \ 10) % 2 == 0 then\n\t\t\t\tisValid = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\t\
    n = math.floor(n / 10)\n\t\tend\n\t\tif isValid then\n\t\t\ttable.insert(output,\
    \ v)\n\t\tend\n\tend\n\treturn output\nend", "   local n_odd = function(str)\n\
    \      for i=1,#str do\n         if tonumber(str:sub(i,i)) % 2 == 0 then\n   \
    \         return false\n         end\n      end\n      return true\n   end\n \
    \  local r = {}\n   for i=1,#x do\n      if n_odd(tostring(x[i])) then\n     \
    \    r[#r+1] = x[i]\n      end\n   end\n   table.sort(r)\n   return r\nend", " \
    \ return {}\nend", "  local res = {}\n  for i, v in ipairs(x) do\n    if not v:find(\"\
    [0-9][02468]\") then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n\
    \  return res\nend", "    local res = {}\n    local function has_even_digit(k)\n\
    \        for c in string.gmatch(k, \"%d\") do\n            if tonumber(c) % 2\
    \ == 0 then\n                return true\n            end\n        end\n     \
    \   return false\n    end\n    for _, k in ipairs(x) do\n        if not has_even_digit(k)\
    \ then\n            table.insert(res, k)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend", "\tlocal t = {}\n\tfor i,v in ipairs(x) do\n\t\tlocal flag\
    \ = true\n\t\tlocal s = tostring(v)\n\t\tfor i = 1, string.len(s) do\n\t\t\tif\
    \ (tonumber(string.sub(s, i, i)) % 2 == 0) then\n\t\t\t\tflag = false\n\t\t\t\t\
    break\n\t\t\tend\n\t\tend\n\t\tif flag then table.insert(t, v) end\n\tend\n\t\
    table.sort(t)\n\treturn t\nend", "  -- TODO: Implement function\nend", "    local\
    \ t = {}\n    for _,v in ipairs(x) do\n        local flag = true\n        for\
    \ _,c in ipairs({v%10, math.floor(v/10)%10, math.floor(v/100)%10, math.floor(v/1000)%10})\
    \ do\n            if c%2 == 0 then flag = false end\n        end\n        if flag\
    \ then table.insert(t, v) end\n    end\n    return t\nend", "  local res = {}\n\
    \  local even = false\n  for i = 1, #x do\n    for c in tostring(x[i]):gmatch('.')\
    \ do\n      if tonumber(c) % 2 == 0 then even = true end\n    end\n    if not\
    \ even then res[#res + 1] = x[i] end\n    even = false\n  end\n  table.sort(res)\n\
    \  return res\nend", "    local array = {}\n    for _, i in ipairs(x) do\n   \
    \     local temp = math.floor(i)\n        while temp > 0 do\n            if temp\
    \ % 2 == 0 then\n                break\n            end\n            temp = math.floor(temp\
    \ / 10)\n        end\n        if temp == 0 then\n            table.insert(array,\
    \ i)\n        end\n    end\n    return array\nend", "  local list = {}\n  for\
    \ i = 1, #x do\n    local flag = true\n    local str = tostring(x[i])\n    for\
    \ j = 1, #str do\n      if isEven(tonumber(str:sub(j, j))) then\n        flag\
    \ = false\n        break\n      end\n    end\n    if flag then table.insert(list,\
    \ x[i]) end\n  end\n  return list\nend", "  local result = {}\n  for k,v in pairs(x)\
    \ do\n    if v < 10 then\n      table.insert(result, v)\n    else\n      while\
    \ v > 0 do\n        local l = v % 10\n        if l % 2 == 0 then break end\n \
    \       v = math.floor(v / 10)\n      end\n      if v == 0 then\n        table.insert(result,\
    \ x[k])\n      end\n    end\n  end\n  table.sort(result)\n  return result\nend",
  "  local is_odd = function(n)\n    return (n % 2) == 1\n  end\n  local f = function(str)\n\
    \    return all(is_odd, string_to_number_list(str))\n  end\n  local y = filter(f,\
    \ number_list_to_string_list(x))\n  return table_sort(string_list_to_number_list(y))\n\
    end", "\tlocal function is_unique(n)\n\t\tlocal s = tostring(n)\n\t\tfor i = 1,\
    \ #s do\n\t\t\tif s:sub(i, i) == '0' or s:sub(i, i) == '2' or s:sub(i, i) == '4'\
    \ or s:sub(i, i) == '6' or s:sub(i, i) == '8' then\n\t\t\t\treturn false\n\t\t\
    \tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal t = {}\n\tfor i = 1, #x do\n\t\
    \tif is_unique(x[i]) then\n\t\t\ttable.insert(t, x[i])\n\t\tend\n\tend\n\ttable.sort(t)\n\
    \treturn t\nend", "    if type(x) ~= \"table\" then\n        return false\n  \
    \  end\n    local result = {}\n    for _, v in ipairs(x) do\n        local has_even\
    \ = false\n        for d in (tostring(v)):gmatch(\"%d\") do\n            if d\
    \ % 2 == 0 then\n                has_even = true\n                break\n    \
    \        end\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend", " \
    \   res = {}\n    for i=1, #x do\n        str = string.format(\"%d\", x[i])\n\
    \        if str:match(\"%d2\") == nil then\n            table.insert(res, x[i])\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend", "    local p\
    \ = {}\n    for i = 1, #x do\n        local n = x[i]\n        local has_even =\
    \ false\n        while n > 0 do\n            local d = n % 10\n            if\
    \ d % 2 == 0 then\n                has_even = true\n                break\n  \
    \          end\n            n = math.floor(n / 10)\n        end\n        if not\
    \ has_even then\n            table.insert(p, x[i])\n        end\n    end\n   \
    \ table.sort(p)\n    return p\nend", "    -- TODO: Complete the function\nend",
  "    local function has_even_digit(x)\n        while x > 0 do\n            if x\
    \ % 2 == 0 then\n                return true\n            end\n            x =\
    \ math.floor(x / 10)\n        end\n        return false\n    end\n    local result\
    \ = {}\n    for i, val in ipairs(x) do\n        if not has_even_digit(val) then\n\
    \            table.insert(result, val)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "  -- LOCAL FUNCTION\n  -- Check if n has even digit\n\
    \  local function has_even_digit(n)\n    while n > 0 do\n      if (n % 10) % 2\
    \ == 0 then\n        return true\n      end\n      n = math.floor(n / 10)\n  \
    \  end\n    return false\n  end\n  -- Insert n into sorted table t\n  local function\
    \ insert_into_sorted(t, n)\n    local i = 1\n    while i <= #t and t[i] < n do\n\
    \      i = i + 1\n    end\n    table.insert(t, i, n)\n  end\n  -- Build result\n\
    \  local result = {}\n  for _, v in ipairs(x) do\n    if not has_even_digit(v)\
    \ then\n      insert_into_sorted(result, v)\n    end\n  end\n  return result\n\
    end", "\tlocal even_digits = {2, 4, 6, 8, 0}\n\tlocal not_even_digits = {}\n\t\
    local final_list = {}\n\tfor _, n in ipairs(x) do\n\t\tlocal n_digits = {}\n\t\
    \twhile n > 0 do\n\t\t\tn_digits[#n_digits + 1] = n % 10\n\t\t\tn = math.floor(n\
    \ / 10)\n\t\tend\n\t\tfor _, even_digit in ipairs(even_digits) do\n\t\t\tfor _,\
    \ n_digit in ipairs(n_digits) do\n\t\t\t\tif even_digit == n_digit then\n\t\t\t\
    \t\tnot_even_digits[#not_even_digits + 1] = _\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \tend\n\tfor i, m in ipairs(x) do\n\t\tlocal not_exist = true\n\t\tfor _, not_even_digit\
    \ in ipairs(not_even_digits) do\n\t\t\tif i == not_even_digit then\n\t\t\t\tnot_exist\
    \ = false\n\t\t\tend\n\t\tend\n\t\tif not_exist then\n\t\t\tfinal_list[#final_list\
    \ + 1] = m\n\t\tend\n\tend\n\ttable.sort(final_list)\n\treturn final_list\nend",
  "    local r = {}\n    for i = 1, #x do\n        local y = x[i]\n        local unique\
    \ = true\n        while y > 0 do\n            local digit = y % 10\n         \
    \   if digit % 2 == 0 then\n                unique = false\n                break\n\
    \            end\n            y = math.floor(y / 10)\n        end\n        if\
    \ unique then\n            r[#r + 1] = x[i]\n        end\n    end\n    table.sort(r)\n\
    \    return r\nend", "  local ret = {}\n  for _, v in ipairs(x) do\n    local\
    \ has_even = false\n    local n = v\n    while n > 0 do\n      local d = n % 10\n\
    \      if d % 2 == 0 then\n        has_even = true\n        break\n      end\n\
    \      n = math.floor(n / 10)\n    end\n    if not has_even then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  table.sort(ret)\n  return ret\nend", "    -- YOUR CODE\
    \ HERE\n    local num = {}\n    for i = 1, #x do\n        local b = false\n  \
    \      local temp = x[i]\n        while temp ~= 0 do\n            if temp % 2\
    \ == 0 then\n                b = true\n                break\n            end\n\
    \            temp = math.floor(temp / 10)\n        end\n        if b == false\
    \ then\n            table.insert(num, x[i])\n        end\n    end\n    return\
    \ num\nend", "\t-- your code here\n\tlocal result = {}\n\tfor i = 1, #x do\n\t\
    \tif not has_even_digit(x[i]) then\n\t\t\ttable.insert(result, x[i])\n\t\tend\n\
    \tend\n\ttable.sort(result)\n\treturn result\nend", "    local evens = {\"0\"\
    , \"2\", \"4\", \"6\", \"8\"}\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local isUnique = true\n        for i = 1, string.len(tostring(v))\
    \ do\n            for _, d in ipairs(evens) do\n                if string.sub(tostring(v),\
    \ i, i) == d then\n                    isUnique = false\n                    break\n\
    \                end\n            end\n        end\n        if isUnique then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end", "    local x_final = {}\n    for _, value in ipairs(x) do\n        local\
    \ find_even = tostring(value):find(\"[2468]\")\n        if find_even == nil then\n\
    \            table.insert(x_final, value)\n        end\n    end\n    return x_final\n\
    end", "    -- Writes some code here.\n    x1 = {}\n    for i = 1, #x do\n    \
    \    if not string.find(tostring(x[i]), '2') and not string.find(tostring(x[i]),\
    \ '4') and not string.find(tostring(x[i]), '6') and not string.find(tostring(x[i]),\
    \ '8') and not string.find(tostring(x[i]), '0') then\n            table.insert(x1,\
    \ x[i])\n        end\n    end\n    return x1\nend", "  local numbers = {}\n  local\
    \ aux = {}\n  local cant = 0\n  local k = 0\n  for i=1, #x do\n    aux = split(tostring(x[i]))\n\
    \    numbers[i] = 0\n    for j=1, #aux do\n      if tonumber(aux[j]) % 2 == 0\
    \ then\n        numbers[i] = 1\n      end\n    end\n  end\n  for i=1, #numbers\
    \ do\n    if numbers[i] == 0 then\n      cant = cant + 1\n    end\n  end\n  local\
    \ res = {}\n  for i=1, #numbers do\n    if numbers[i] == 0 then\n      k = k +\
    \ 1\n      res[k] = x[i]\n    end\n  end\n  sort(res)\n  return res\nend", "\t\
    local evens, odds = {}, {}\n\tfor i = 1, #x do\n\t\tif x[i] % 2 == 0 then\n\t\t\
    \tevens[#evens + 1] = x[i]\n\t\telse\n\t\t\todds[#odds + 1] = x[i]\n\t\tend\n\t\
    end\n\treturn odds\nend", "  local function is_even(n)\n    if n % 2 == 0 then\n\
    \      return true\n    else\n      return false\n    end\n  end\n  local result\
    \ = {}\n  for _, v in ipairs(x) do\n    local flag = false\n    for d in string.gmatch(tostring(v),\
    \ '%d') do\n      if is_even(tonumber(d)) then\n        flag = true\n        break\n\
    \      end\n    end\n    if not flag then\n      table.insert(result, v)\n   \
    \ end\n  end\n  table.sort(result)\n  return result\nend", "  local t = {}\n \
    \ for i = 1, #x do\n    if x[i] < 10 then\n      t[#t + 1] = x[i]\n    else\n\
    \      local b = false\n      while x[i] > 0 do\n        if x[i] % 2 == 0 then\n\
    \          b = true\n          break\n        end\n        x[i] = math.floor(x[i]\
    \ / 10)\n      end\n      if not b then\n        t[#t + 1] = x[i]\n      end\n\
    \    end\n  end\n  table.sort(t)\n  return t\nend", "\tlocal t = {}\n\tfor i,\
    \ v in ipairs(x) do\n\t\tlocal has_odd = false\n\t\tlocal n = v\n\t\twhile n >\
    \ 0 do\n\t\t\tlocal d = n % 10\n\t\t\tif d % 2 == 0 then\n\t\t\t\thas_odd = true\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\t\tn = math.floor(n / 10)\n\t\tend\n\t\tif not has_odd\
    \ then\n\t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\ttable.sort(t)\n\treturn t\n\
    end", "\tlocal digits = {}\n\tlocal sorted = {}\n\tfor i = 1, #x do\n\t\tlocal\
    \ str = tostring(x[i])\n\t\tfor j = 1, #str do\n\t\t\tlocal digit = str:sub(j,\
    \ j)\n\t\t\tif tonumber(digit) % 2 == 0 then\n\t\t\t\tdigits[x[i]] = true\n\t\t\
    \t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\tfor i = 1, #x do\n\t\tif not digits[x[i]]\
    \ then\n\t\t\ttable.insert(sorted, x[i])\n\t\tend\n\tend\n\ttable.sort(sorted)\n\
    \treturn sorted\nend", "\tlocal sx = {}\n\tlocal is_even = function(d) return\
    \ (d % 2) == 0 end\n\tfor _, v in ipairs(x) do\n\t\tlocal flag = true\n\t\tlocal\
    \ s = tostring(v)\n\t\tfor i=1, #s do\n\t\t\tif is_even(string.byte(s, i) - 48)\
    \ then\n\t\t\t\tflag = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif flag then\
    \ table.insert(sx, v) end\n\tend\n\ttable.sort(sx)\n\treturn sx\nend", "    local\
    \ f, t = {}, {}\n    for _, a in ipairs(x) do\n        local b = tostring(a)\n\
    \        if #b ~= string.gsub(b, \"[24680]\", \"\") then\n            f[a] = true\n\
    \        else\n            table.insert(t, a)\n        end\n    end\n    return\
    \ t\nend", "    local r = {}\n    for _, v in ipairs(x) do\n        local has_even\
    \ = false\n        while v > 0 do\n            local d = v % 10\n            if\
    \ d % 2 == 0 then\n                has_even = true\n                break\n  \
    \          end\n            v = (v - d) / 10\n        end\n        if not has_even\
    \ then\n            table.insert(r, v)\n        end\n    end\n    table.sort(r)\n\
    \    return r\nend", "  -- TODO: your code here\nend", "    local evens = {2,\
    \ 4, 6, 8, 0}\n    local unique = {}\n    for _, i in ipairs(x) do\n        if\
    \ not match(tostring(i), \"%d*[\" .. table.concat(evens, \"\") .. \"]%d*\") then\n\
    \            table.insert(unique, i)\n        end\n    end\n    return unique\n\
    end", "\tlocal s = \"\"\n\tfor _, n in ipairs(x) do\n\t\tlocal tmp = string.format(\"\
    %d\", n)\n\t\tfor i = 1, #tmp do\n\t\t\tif (math.fmod(tmp:sub(i, i), 2) == 0)\
    \ then\n\t\t\t\ts = s .. tmp .. \" \"\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\
    \tlocal t = {}\n\tfor e in s:gmatch(\"%d+\") do\n\t\ttable.insert(t, tonumber(e))\n\
    \tend\n\ttable.sort(t)\n\treturn t\nend", "  -- YOUR CODE HERE\n  print(x)\n \
    \ if x == nil then return nil end\n  local a = {}\n  for k,v in pairs(x) do\n\
    \    local flag = true\n    for i=0, string.len(v) do\n      if string.sub(v,\
    \ i, i) % 2 == 0 then\n        flag = false\n        break\n      end\n    end\n\
    \    if flag then\n      table.insert(a, v)\n    end\n  end\n  table.sort(a)\n\
    \  return a\nend", "  \n  local result = {}\n  for _,v in ipairs(x) do\n    local\
    \ is_good = true\n    for d in tostring(v):gmatch(\"%d\") do\n      if tonumber(d)\
    \ % 2 == 0 then\n        is_good = false\n        break\n      end\n    end\n\
    \    if is_good then table.insert(result, v) end\n  end\n  table.sort(result)\n\
    \  return result\nend", "  local function f(n)\n    return tostring(n):match(\"\
    [02468]\") == nil\n  end\n  return sort(filter(f, x))\nend", "  local digits =\
    \ {}\n  local h = {}\n  for _, v in ipairs(x) do\n    local t = {}\n    local\
    \ d\n    while v > 0 do\n      d = v % 10\n      if d % 2 == 0 then\n        t[v]\
    \ = true\n        break\n      end\n      v = math.floor(v / 10)\n    end\n  \
    \  if not t[v] then\n      table.insert(digits, v)\n    end\n  end\n  table.sort(digits)\n\
    \  return digits\nend", "    local res = {}\n    for _, value in ipairs(x) do\n\
    \        local has_even = false\n        while value > 0 do\n            local\
    \ digit = value % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            value = (value -\
    \ digit) / 10\n        end\n        if not has_even then table.insert(res, value)\
    \ end\n    end\n    table.sort(res)\n    return res\nend", "  local result = {}\n\
    \  for _, v in ipairs(x) do\n    local is_unique = true\n    for ch in string.gmatch(tostring(v),\
    \ '%d') do\n      if tonumber(ch) % 2 == 0 then\n        is_unique = false\n \
    \       break\n      end\n    end\n    if is_unique then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  return result\nend", "\t-- YOUR\
    \ CODE GOES HERE\nend", "  local result = {}\n  for _, v in ipairs(x) do\n   \
    \ local is_unique = true\n    for c in string.gmatch(tostring(v), '%d') do\n \
    \     if tonumber(c) % 2 == 0 then\n        is_unique = false\n        break\n\
    \      end\n    end\n    if is_unique then\n      table.insert(result, v)\n  \
    \  end\n  end\n  return result\nend", "\t-- return a sorted list of all elements\
    \ that hasn't any even digit\n\t-- your code here\n\treturn {}\nend", "  -- TODO:\
    \ return list of elements that are in x but not in y.\n  -- Algorithm:\n  -- Loop\
    \ through each element of x and check if it is in y.\n  -- If it is not, then\
    \ add it to the output table.\n  -- Finally, return the output table.\n  local\
    \ res = {}\n  for i = 1, #x do\n    if unique_digits_helper(x[i]) then\n     \
    \ res[#res + 1] = x[i]\n    end\n  end\n  return res\nend", "  local t = {}\n\
    \  for k, v in pairs(x) do\n    local v = tostring(v)\n    local flag = false\n\
    \    for i = 1, #v do\n      if tonumber(v:sub(i, i)) % 2 == 0 then\n        flag\
    \ = true\n        break\n      end\n    end\n    if not flag then\n      table.insert(t,\
    \ tonumber(v))\n    end\n  end\n  table.sort(t)\n  return t\nend", "    local\
    \ r = {}\n    for _, v in ipairs(x) do\n        local d = tostring(v)\n      \
    \  local y = 0\n        for i = 1, #d do\n            if tonumber(d:sub(i, i))\
    \ % 2 == 0 then\n                y = y + 1\n            end\n        end\n   \
    \     if y == 0 then\n            table.insert(r, v)\n        end\n    end\n \
    \   table.sort(r)\n    return r\nend", "    local list, digits = {}, {}\n    for\
    \ _, v in ipairs(x) do\n        local even = false\n        for dig in tostring(v):gmatch(\"\
    %d\") do\n            if tonumber(dig) % 2 == 0 then\n                even = true\n\
    \                break\n            end\n        end\n        if not even then\n\
    \            table.insert(list, v)\n        end\n    end\n    table.sort(list)\n\
    \    return list\nend", "    local function is_digits_unique(n)\n        while\
    \ n > 0 do\n            local k = n % 10\n            if k % 2 == 0 then\n   \
    \             return false\n            end\n            n = (n - k) / 10\n  \
    \      end\n        return true\n    end\n    local function sort_by_value(a,\
    \ b)\n        return a < b\n    end\n    local result = {}\n    for _, n in ipairs(x)\
    \ do\n        if is_digits_unique(n) then\n            table.insert(result, n)\n\
    \        end\n    end\n    table.sort(result, sort_by_value)\n    return result\n\
    end", "    if x == nil then\n        return nil\n    end\n    if type(x) ~= \"\
    table\" then\n        return nil\n    end\n    for i, e in ipairs(x) do\n    \
    \    if type(e) ~= \"number\" then\n            return nil\n        end\n    \
    \    if e <= 0 then\n            return nil\n        end\n    end\n    local y\
    \ = {}\n    for i, e in ipairs(x) do\n        if not has_even_digit(e) then\n\
    \            y[#y + 1] = e\n        end\n    end\n    table.sort(y)\n    return\
    \ y\nend", "  local y = {}\n  for _,i in ipairs(x) do\n    local ok = true\n \
    \   local s = tostring(i)\n    for _,j in ipairs(s) do\n      if (tonumber(j)\
    \ % 2 == 0) then\n        ok = false\n        break\n      end\n    end\n    if\
    \ ok then\n      table.insert(y, i)\n    end\n  end\n  return y\nend", "    local\
    \ result = {}\n    for _,value in ipairs(x) do\n        local even = 0\n     \
    \   while value > 0 do\n            if value % 2 == 0 then\n                even\
    \ = 1\n                break\n            end\n            value = math.floor(value\
    \ / 10)\n        end\n        if even == 0 then\n            table.insert(result,\
    \ value)\n        end\n    end\n    table.sort(result)\n    return result\nend",
  "  local function is_even(x)\n    while x ~= 0 do\n      if x % 2 == 0 then return\
    \ true end\n      x = math.floor(x / 10)\n    end\n    return false\n  end\n \
    \ local res = {}\n  for i = 1, #x do\n    if not is_even(x[i]) then res[#res +\
    \ 1] = x[i] end\n  end\n  return res\nend", "\tlocal t = {}\n\tfor i = 1, #x do\n\
    \t\tlocal t_x = tostring(x[i])\n\t\tlocal unique = true\n\t\tfor j = 1, #t_x do\n\
    \t\t\tif tonumber(t_x:sub(j, j)) % 2 == 0 then\n\t\t\t\tunique = false\n\t\t\t\
    \tbreak\n\t\t\tend\n\t\tend\n\t\tif unique then\n\t\t\ttable.insert(t, x[i])\n\
    \t\tend\n\tend\n\ttable.sort(t)\n\treturn t\nend", "\tlocal res = {}\n\tfor i,\
    \ v in ipairs(x) do\n\t\tlocal has_even = false\n\t\twhile v > 0 do\n\t\t\tif\
    \ v % 2 == 0 then\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tv\
    \ = math.floor(v / 10)\n\t\tend\n\t\tif not has_even then\n\t\t\ttable.insert(res,\
    \ x[i])\n\t\tend\n\tend\n\treturn res\nend", "  -- WRITE YOUR CODE HERE\n  local\
    \ isUnique = true\n  local y = {}\n  for i = 1, #x do\n    for j = 1, #tostring(x[i])\
    \ do\n      local str = tostring(x[i])\n      if str:sub(j, j) == \"2\" or str:sub(j,\
    \ j) == \"4\" or str:sub(j, j) == \"6\" or str:sub(j, j) == \"8\" or str:sub(j,\
    \ j) == \"0\" then\n        isUnique = false\n      end\n    end\n    if isUnique\
    \ then\n      table.insert(y, x[i])\n    end\n    isUnique = true\n  end\n  return\
    \ y\nend", "    local res = {}\n    for _,n in ipairs(x) do\n        local has_even\
    \ = false\n        while n > 0 do\n            if (n % 10) % 2 == 0 then\n   \
    \             has_even = true\n                break\n            end\n      \
    \      n = math.floor(n / 10)\n        end\n        if not has_even then\n   \
    \         table.insert(res, n)\n        end\n    end\n    table.sort(res)\n  \
    \  return res\nend", "    local res = {}\n    for i = 1, #x do\n        local\
    \ s = tostring(x[i])\n        local flag = true\n        for j = 1, #s do\n  \
    \          if (tonumber(s:sub(j, j)) % 2 == 0) then\n                flag = false\n\
    \                break\n            end\n        end\n        if flag then\n \
    \           table.insert(res, x[i])\n        end\n    end\n    return res\nend",
  "    local r = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n\
    \        local s = tostring(v)\n        for d in s:gmatch(\"%d\") do\n       \
    \     local i = tonumber(d)\n            if (i % 2) == 0 then\n              \
    \  has_even = true\n                break\n            end\n        end\n    \
    \    if not has_even then\n            table.insert(r, v)\n        end\n    end\n\
    \    table.sort(r)\n    return r\nend", "    local result = {}\n    for _,v in\
    \ ipairs(x) do\n        local even = false\n        while v > 0 do\n         \
    \   local d = v % 10\n            if d % 2 == 0 then\n                even = true\n\
    \                break\n            end\n            v = (v - d) / 10\n      \
    \  end\n        if not even then\n            table.insert(result, v)\n      \
    \  end\n    end\n    table.sort(result)\n    return result\nend", "\treturn nil\n\
    end", "    local table_content = {}\n    for i, v in ipairs(x) do\n        if\
    \ not has_even_digit(v) then\n            table.insert(table_content, v)\n   \
    \     end\n    end\n    if #table_content > 0 then\n        table.sort(table_content)\n\
    \        return table_content\n    else\n        return nil\n    end\nend", "\t\
    local unique = {}\n\tfor i, v in ipairs(x) do\n\t\tif not has_even_digit(v) then\n\
    \t\t\ttable.insert(unique, v)\n\t\tend\n\tend\n\ttable.sort(unique)\n\treturn\
    \ unique\nend", "    local result = {}\n    for _, v in ipairs(x) do\n       \
    \ local digit = v\n        while digit > 0 do\n            local remainder = digit\
    \ % 10\n            if remainder % 2 == 0 then\n                break\n      \
    \      end\n            digit = math.floor(digit / 10)\n        end\n        if\
    \ digit == 0 then\n            table.insert(result, v)\n        end\n    end\n\
    \    return result\nend", "    local digits = {}\n    for _, v in ipairs(x) do\n\
    \        if not string.find(v, \"[024680]\") then\n            table.insert(digits,\
    \ v)\n        end\n    end\n    return digits\nend", "  local d = {}\n  local\
    \ digits = {}\n  for k, v in pairs(x) do\n    digits[k] = v % 10\n    while v\
    \ > 0 do\n      local digit = v % 10\n      if digit % 2 == 0 then\n        digits[k]\
    \ = nil\n        break\n      end\n      v = math.floor(v / 10)\n    end\n  end\n\
    \  for k, v in pairs(digits) do\n    d[#d + 1] = x[k]\n  end\n  table.sort(d)\n\
    \  return d\nend", "  -- return {}\n  local res = {}\n  local uniq = {}\n  local\
    \ even = { 0, 2, 4, 6, 8 }\n  for _, e in ipairs(x) do\n    local found = false\n\
    \    local str = tostring(e)\n    for i = 1, #str do\n      for _, v in ipairs(even)\
    \ do\n        if tonumber(str:sub(i, i)) == v then\n          found = true\n \
    \         break\n        end\n      end\n      if found then break end\n    end\n\
    \    if not found then table.insert(res, e) end\n  end\n  table.sort(res)\n  return\
    \ res\nend", "\tlocal y = {}\n\tlocal has_even = false\n\tfor i = 1, #x do\n\t\
    \tlocal num = x[i]\n\t\tlocal num_str = tostring(num)\n\t\tfor j = 1, #num_str\
    \ do\n\t\t\tlocal digit = tonumber(num_str:sub(j, j))\n\t\t\tif digit % 2 == 0\
    \ then\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not\
    \ has_even then\n\t\t\ttable.insert(y, num)\n\t\tend\n\t\thas_even = false\n\t\
    end\n\treturn y\nend", "    local digits_list = {}\n    local digits_flag = {}\n\
    \    for i = 1, #x do\n        digits_list[i] = math.modf(x[i])\n        digits_flag[i]\
    \ = true\n    end\n    for i = 1, #digits_list do\n        while digits_list[i]\
    \ > 0 do\n            if digits_list[i] % 2 == 0 then\n                digits_flag[i]\
    \ = false\n            end\n            digits_list[i] = math.modf(digits_list[i]\
    \ / 10)\n        end\n    end\n    local unique_digits_list = {}\n    for i =\
    \ 1, #digits_flag do\n        if digits_flag[i] then\n            unique_digits_list[#unique_digits_list\
    \ + 1] = x[i]\n        end\n    end\n    table.sort(unique_digits_list)\n    return\
    \ unique_digits_list\nend", "  local res = {}\n  local digits = {}\n  local function\
    \ check(y)\n    for yy in tostring(y):gmatch('%d') do\n      if tonumber(yy) %\
    \ 2 == 0 then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  for _, x_ in ipairs(x) do\n    if check(x_) then\n      table.insert(res, x_)\n\
    \    end\n  end\n  return res\nend", "\tlocal evens = {'0', '2', '4', '6', '8'}\n\
    \tlocal function has_evens(str)\n\t\tfor i = 1, str:len() do\n\t\t\tif table.contains(evens,\
    \ str:sub(i, i)) then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\
    \tend\n\tlocal function has_evens(val)\n\t\tlocal str = tostring(val)\n\t\tfor\
    \ i = 1, str:len() do\n\t\t\tif table.contains(evens, str:sub(i, i)) then\n\t\t\
    \t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\n\tlocal function\
    \ contains_evens(lst)\n\t\tfor _, val in ipairs(lst) do\n\t\t\tif has_evens(val)\
    \ then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\n\tlocal\
    \ function filter_evens(lst)\n\t\tlocal ret = {}\n\t\tfor _, val in ipairs(lst)\
    \ do\n\t\t\tif not has_evens(val) then\n\t\t\t\ttable.insert(ret, val)\n\t\t\t\
    end\n\t\tend\n\t\treturn ret\n\tend\n\tlocal function sort_list(lst)\n\t\ttable.sort(lst,\
    \ function(x, y) return x < y end)\n\t\treturn lst\n\tend\n\treturn sort_list(filter_evens(x))\n\
    end", "    local d_r = {}\n    for _, i in ipairs(x) do\n        local has_even\
    \ = false\n        for d in tostring(i):gmatch('%d') do\n            if tonumber(d)\
    \ % 2 == 0 then\n                has_even = true\n                break\n    \
    \        end\n        end\n        if not has_even then\n            table.insert(d_r,\
    \ i)\n        end\n    end\n    table.sort(d_r)\n    return d_r\nend", "    local\
    \ t = {}\n    for i,v in ipairs(x) do\n        local even = false\n        for\
    \ j = 0,9 do\n            if string.find(v, j*2) then\n                even =\
    \ true\n                break\n            end\n        end\n        if not even\
    \ then\n            table.insert(t, v)\n        end\n    end\n    table.sort(t)\n\
    \    return t\nend", "   return (function(t)\n               local u = {}\n  \
    \             for _, v in ipairs(t) do\n                  if (string.find(tostring(v),\
    \ \"[0-9][2468]\") == nil) then\n                     table.insert(u, v)\n   \
    \               end\n               end\n               return u\n           \
    \ end)(x)\nend", "  -- See: https://www.lua.org/pil/20.2.html\n  local function\
    \ filter(f, list)\n    local res = {}\n    for _, v in ipairs(list) do\n     \
    \ if f(v) then res[#res+1] = v end\n    end\n    return res\n  end", "  return\
    \ {}\nend", "    -- Iterator function for x's members.\n    local function get_x_members()\n\
    \        local i = 0\n        return function()\n            i = i + 1\n     \
    \       return x[i]\n        end\n    end", "\tlocal numbers = {}\n\tlocal index\
    \ = 1\n\tfor i = 1, #x do\n\t\tif string.find(x[i], '2') == nil and string.find(x[i],\
    \ '4') == nil and string.find(x[i], '6') == nil and string.find(x[i], '8') ==\
    \ nil and string.find(x[i], '0') == nil then\n\t\t\tnumbers[index] = x[i]\n\t\t\
    \tindex = index + 1\n\t\tend\n\tend\n\ttable.sort(numbers)\n\treturn numbers\n\
    end", "  local l = {}\n  for _, x in ipairs(x) do\n    if x ~= 0 and x % 2 ~=\
    \ 0 then\n      table.insert(l, x)\n    end\n  end\n  return l\nend", "  local\
    \ result = {}\n  for _, i in ipairs(x) do\n    local is_odd = true\n    for c\
    \ in string.gmatch(tostring(i), \"%d\") do\n      if c % 2 == 0 then\n       \
    \ is_odd = false\n        break\n      end\n    end\n    if is_odd then\n    \
    \  table.insert(result, i)\n    end\n  end\n  table.sort(result)\n  return result\n\
    end", "    local filter = {}\n    for i=1,#x do\n        local unique_flag = true\n\
    \        for c in tostring(x[i]):gmatch\".\" do\n            if tonumber(c) %\
    \ 2 == 0 then\n                unique_flag = false\n                break\n  \
    \          end\n        end\n        if unique_flag then\n            table.insert(filter,\
    \ x[i])\n        end\n    end\n    return filter\nend", "    local res = {}\n\
    \    for i,n in ipairs(x) do\n        local dig_has_even = false\n        while\
    \ n > 0 do\n            local dig = n % 10\n            if dig % 2 == 0 then\n\
    \                dig_has_even = true\n                break\n            end\n\
    \            n = math.floor(n / 10)\n        end\n        if not dig_has_even\
    \ then\n            table.insert(res, x[i])\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend", "\tlocal digits,result={},{}\n\tfor i=1,9 do\n\t\tdigits[i]=i\n\
    \tend\n\ttable.sort(digits)\n\tfor i,j in ipairs(x) do\n\t\tfor k=1,#j do\n\t\t\
    \tif digits[tonumber(string.sub(j,k,k))]==nil then\n\t\t\t\tresult[i]=nil\n\t\t\
    \t\tbreak\n\t\t\telse\n\t\t\t\tresult[i]=j\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ result\nend", "  local result = {}\n  for i,v in ipairs(x) do\n    local has_even_digit\
    \ = false\n    while v ~= 0 do\n      if v % 2 == 0 then\n        has_even_digit\
    \ = true\n        break\n      end\n      v = math.floor(v / 10)\n    end\n  \
    \  if not has_even_digit then\n      table.insert(result, x[i])\n    end\n  end\n\
    \  table.sort(result)\n  return result\nend", "    -- Write your code here\n \
    \   local ret = {}\n    for _, v in ipairs(x) do\n        local flag = true\n\
    \        for i = 1, #tostring(v) do\n            if tonumber(tostring(v):sub(i,\
    \ i)) % 2 == 0 then\n                flag = false\n                break\n   \
    \         end\n        end\n        if flag then\n            table.insert(ret,\
    \ v)\n        end\n    end\n    table.sort(ret)\n    return ret\nend", "  local\
    \ w = {};\n  for _,v in ipairs(x) do\n    local e = true;\n    for c in tostring(v):gmatch(\"\
    %d\") do\n      if c:match(\"[02468]\") then\n        e = false;\n        break;\n\
    \      end\n    end\n    if e then\n      table.insert(w, v);\n    end\n  end\n\
    \  table.sort(w);\n  return w;\nend", "    local even_digits = {2, 4, 6, 8, 0}\n\
    \    local out = {}\n    for _, v in ipairs(x) do\n        local str = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #str do\n            local\
    \ digit = tonumber(str:sub(i, i))\n            if even_digits[digit] then\n  \
    \              has_even = true\n                break\n            end\n     \
    \   end\n        if not has_even then\n            table.insert(out, v)\n    \
    \    end\n    end\n    table.sort(out)\n    return out\nend", "    local res =\
    \ {}\n    for i, n in ipairs(x) do\n        if not tostring(n):match('%d+') then\n\
    \            table.insert(res, n)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend", "    local function is_unique(n)\n        local function\
    \ helper(rem)\n            local d = rem % 10\n            return d % 2 == 1 and\
    \ rem == 0 or is_unique(rem / 10)\n        end\n        return helper(n)\n   \
    \ end\n    local function filter(lst)\n        if #lst == 0 then\n           \
    \ return {}\n        else\n            local first = lst[1]\n            local\
    \ rest = filter(table.remove(lst, 1))\n            if is_unique(first) then\n\
    \                table.insert(rest, 1, first)\n            end\n            return\
    \ rest\n        end\n    end\n    return filter(x)\nend", "    local unique_digits\
    \ = {}\n    for i,v in ipairs(x) do\n        if v < 0 then v = math.abs(v) end\n\
    \        if not v:match(\"[02468]\") then\n            table.insert(unique_digits,\
    \ v)\n        end\n    end\n    table.sort(unique_digits)\n    return unique_digits\n\
    end", "  return nil\nend", "    local t = {}\n    for i, v in ipairs(x) do\n \
    \       local has_even = false\n        while v > 0 do\n            local d =\
    \ v % 10\n            if d % 2 == 0 then\n                has_even = true\n  \
    \              break\n            end\n            v = math.floor(v / 10)\n  \
    \      end\n        if not has_even then\n            table.insert(t, x[i])\n\
    \        end\n    end\n    table.sort(t)\n    return t\nend", "  local function\
    \ is_even(i)\n    return (i % 2) == 0\n  end\n  local function split(num)\n  \
    \  local digits = {}\n    while num > 0 do\n      local d = num % 10\n      digits[#digits\
    \ + 1] = d\n      num = (num - d) / 10\n    end\n    return digits\n  end\n  local\
    \ function has_even(num)\n    local digits = split(num)\n    for _, d in ipairs(digits)\
    \ do\n      if is_even(d) then\n        return true\n      end\n    end\n    return\
    \ false\n  end\n  local function compare(a, b)\n    return a < b\n  end\n  local\
    \ result = {}\n  for _, num in ipairs(x) do\n    if not has_even(num) then\n \
    \     result[#result + 1] = num\n    end\n  end\n  table.sort(result, compare)\n\
    \  return result\nend", "    local res = {}\n    for _, n in ipairs(x) do\n  \
    \      if not n:find(\"%d*[02468]%d*\") then\n            table.insert(res, n)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
