name: HumanEval_145_order_by_points
language: lua
results:
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47wu5iqb.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmp47wu5iqb.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptdalmy43.lua:14:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmptdalmy43.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function get_digit_sum(number)\n        local sum = 0\n        for\
    \ i = 1, string.len(number) do\n            sum = sum + string.sub(number, i,\
    \ i)\n        end\n        return sum\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1e61j4s4.lua:28: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- \u0434\u043E\u0441\u0442\u0430\u043D\u044C\u0442\u0435 \u0438\u0437 nums\
    \ \u0432\u0441\u0435 \u0447\u0438\u0441\u043B\u0430 \u0432 \u0432\u0438\u0434\u0435\
    \ \u043C\u0430\u0441\u0441\u0438\u0432\u0430,\n    -- \u043F\u043E\u0441\u0447\
    \u0438\u0442\u0430\u0439\u0442\u0435 \u0434\u043B\u044F \u043A\u0430\u0436\u0434\
    \u043E\u0433\u043E \u0447\u0438\u0441\u043B\u0430 \u0441\u0443\u043C\u043C\u0443\
    \ \u0435\u0433\u043E \u0446\u0438\u0444\u0440,\n    -- \u043E\u0442\u0441\u043E\
    \u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435 \u0447\u0438\
    \u0441\u043B\u0430 \u0432 \u043F\u043E\u0440\u044F\u0434\u043A\u0435 \u0432\u043E\
    \u0437\u0440\u0430\u0441\u0442\u0430\u043D\u0438\u044F \u0441\u0443\u043C\u043C\
    \ \u0446\u0438\u0444\u0440\n    -- \u0438 \u043F\u0440\u0435\u043E\u0431\u0440\
    \u0430\u0437\u0443\u0439\u0442\u0435 \u0438\u0445 \u043E\u0431\u0440\u0430\u0442\
    \u043D\u043E \u0432 \u0441\u043F\u0438\u0441\u043E\u043A\n    return {2, 3, 1}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqm7mylpn.lua:19:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {2, 3, 1}\nstack traceback:\n\t/tmp/tmpqm7mylpn.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function _is_greater(a, b)\n        local sa = string.gsub(a, \"%s+\"\
    , \"\")\n        local sb = string.gsub(b, \"%s+\", \"\")\n        local suma\
    \ = 0\n        local sumb = 0\n        for i = 1, #sa do\n            suma = suma\
    \ + tonumber(sa:sub(i, i))\n        end\n        for i = 1, #sb do\n         \
    \   sumb = sumb + tonumber(sb:sub(i, i))\n        end\n        if suma == sumb\
    \ then\n            return a > b\n        else\n            return suma > sumb\n\
    \        end\n    end\n    table.sort(nums, _is_greater)\n    return nums\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp87sm_a1o.lua:15:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp87sm_a1o.lua:15:\
    \ in function </tmp/tmp87sm_a1o.lua:9>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp87sm_a1o.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmp87sm_a1o.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    if #nums == 0 then\n        return nums\n    end\n    -- Make a map with\
    \ key=sum of digits, value=list of numbers\n    local map = {}\n    for i, n in\
    \ ipairs(nums) do\n        local sum = 0\n        while n > 0 do\n           \
    \ sum = sum + n % 10\n            n = math.floor(n / 10)\n        end\n      \
    \  if map[sum] == nil then\n            map[sum] = {}\n        end\n        table.insert(map[sum],\
    \ i)\n    end\n    -- Use sum of digits as key for sorting\n    table.sort(nums,\
    \ function(a, b)\n        local sum_a = 0\n        local sum_b = 0\n        while\
    \ a > 0 do\n            sum_a = sum_a + a % 10\n            a = math.floor(a /\
    \ 10)\n        end\n        while b > 0 do\n            sum_b = sum_b + b % 10\n\
    \            b = math.floor(b / 10)\n        end\n        return sum_a < sum_b\n\
    \    end)\n    -- Create a map with key=number, value=order in original list\n\
    \    local order = {}\n    for i, n in ipairs(nums) do\n        order[n] = i\n\
    \    end\n    -- Create a sorted list of numbers\n    local sorted = {}\n    for\
    \ _, v in pairs(map) do\n        table.sort(v, function(a, b)\n            return\
    \ order[a] < order[b]\n        end)\n        for _, n in ipairs(v) do\n      \
    \      table.insert(sorted, nums[n])\n        end\n    end\n    return sorted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcpj965k3.lua:48:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpcpj965k3.lua:48:\
    \ in function </tmp/tmpcpj965k3.lua:47>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpcpj965k3.lua:47:\
    \ in local 'candidate'\n\t/tmp/tmpcpj965k3.lua:60: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \tlocal sumToIndex = {}\n\tlocal ret = {}\n\tfor i, v in ipairs(nums) do\n\t\t\
    local sum = toDigits(v)\n\t\tif not sumToIndex[sum] then\n\t\t\tsumToIndex[sum]\
    \ = {}\n\t\tend\n\t\ttable.insert(sumToIndex[sum], {idx = i, value = v})\n\tend\n\
    \tfor k, v in pairs(sumToIndex) do\n\t\ttable.sort(v, function(lhs, rhs) return\
    \ lhs.idx < rhs.idx end)\n\t\tfor _, lhs in ipairs(v) do\n\t\t\ttable.insert(ret,\
    \ lhs.value)\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqastu3nh.lua:12:\
    \ attempt to call a nil value (global 'toDigits')\nstack traceback:\n\t/tmp/tmpqastu3nh.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpqastu3nh.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- TODO: Implement your solution here.\n    if #nums == 0 then\n        return\
    \ nums\n    end\n    local result = {}\n    for i,v in ipairs(nums) do\n     \
    \   local sum = 0\n        while v ~= 0 do\n            sum = sum + v % 10\n \
    \           v = math.floor(v / 10)\n        end\n        result[i] = {value =\
    \ nums[i], sum = sum}\n    end\n    table.sort(result, function(a, b)\n      \
    \  if a.sum == b.sum then\n            return a.value < b.value\n        else\n\
    \            return a.sum < b.sum\n        end\n    end)\n    return extract_values(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function _score(n)\n        local str = tostring(n)\n        local\
    \ sum = 0\n        for _, d in pairs(str:chars()) do\n            sum = sum +\
    \ tonumber(d)\n        end\n        return sum\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpklt8hbr7.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- implement order_by_points here\n    if #nums == 0 then\n        return\
    \ nums\n    end\n    local point = {}\n    for i,v in ipairs(nums) do\n      \
    \  local p = 0\n        while v ~= 0 do\n            p = p + (v % 10)\n      \
    \      v = math.floor(v / 10)\n        end\n        point[i] = p\n    end\n  \
    \  table.sort(point)\n    local ret = {}\n    for i,v in ipairs(point) do\n  \
    \      for j,_ in ipairs(nums) do\n            local p = 0\n            local\
    \ temp = nums[j]\n            while temp ~= 0 do\n                p = p + (temp\
    \ % 10)\n                temp = math.floor(temp / 10)\n            end\n     \
    \       if p == v then\n                ret[i] = nums[j]\n                nums[j]\
    \ = nil\n                break\n            end\n        end\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuikzv81e.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmpuikzv81e.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps98spvbp.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\
    \t/tmp/tmps98spvbp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    if not nums then return nil end\n    local function cmp(a, b)\n        local\
    \ s = {}\n        s[#s+1] = a; s[#s+1] = b\n        if(sum_of_digits(a) == sum_of_digits(b))\
    \ then\n            if a < b then\n                return s[1], s[2]\n       \
    \     else\n                return s[2], s[1]\n            end\n        elseif(sum_of_digits(a)\
    \ < sum_of_digits(b)) then\n            return s[1], s[2]\n        else\n    \
    \        return s[2], s[1]\n        end\n    end\n    return insertion_sort(nums,\
    \ cmp)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpueu9haxi.lua:25:\
    \ attempt to call a nil value (global 'insertion_sort')\nstack traceback:\n\t\
    /tmp/tmpueu9haxi.lua:25: in local 'candidate'\n\t/tmp/tmpueu9haxi.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function getDigitSum(n)\n        local s = 0\n        for d in string.gmatch(string.format(\"\
    %d\", n), \"%d\") do\n            s = s + tonumber(d)\n        end\n        return\
    \ s\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmamighvf.lua:28: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local arr = {}\n    for i, v in ipairs(nums) do\n        local x = v\n  \
    \      local sum = 0\n        while x ~= 0 do\n            sum = sum + (x % 10)\n\
    \            x = math.floor(x / 10)\n        end\n        arr[i] = {idx = i, sum\
    \ = sum, num = v}\n    end\n    table.sort(arr, function(a, b)\n        if a.sum\
    \ == b.sum then\n            return a.idx < b.idx\n        else\n            return\
    \ a.sum < b.sum\n        end\n    end)\n    local res = {}\n    for i, v in ipairs(arr)\
    \ do\n        res[i] = v.num\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6n36ohsp.lua:14:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp6n36ohsp.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local m = {}\n  for i, v in ipairs(nums) do\n    m[i] = v\n  end\n  local function\
    \ cmp(a, b)\n    if sum(a) == sum(b) then\n      return a < b\n    else\n    \
    \  return sum(a) < sum(b)\n    end\n  end\n  table.sort(m, cmp)\n  return m\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfkraffcv.lua:14:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpfkraffcv.lua:14:\
    \ in function </tmp/tmpfkraffcv.lua:13>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpfkraffcv.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpfkraffcv.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    if #nums == 0 then\n        return nums\n    end\n    local function sum_of_digits(n)\n\
    \        local res = 0\n        while n > 0 do\n            res = res + n % 10\n\
    \            n = math.floor(n / 10)\n        end\n        return res\n    end\n\
    \    local sorted = utils.sort(nums, function(x, y)\n        return sum_of_digits(x)\
    \ < sum_of_digits(y)\n    end)\n    return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjwsmim1g.lua:20:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpjwsmim1g.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpjwsmim1g.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjygoz52g.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmpjygoz52g.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function compare(a, b)\n        local a_sum, b_sum = 0, 0\n       \
    \ for _, ch in ipairs(tostring(a)) do\n            a_sum = a_sum + tonumber(ch)\n\
    \        end\n        for _, ch in ipairs(tostring(b)) do\n            b_sum =\
    \ b_sum + tonumber(ch)\n        end\n        if a_sum == b_sum then\n        \
    \    return a < b\n        else\n            return a_sum < b_sum\n        end\n\
    \    end\n    table.sort(nums, compare)\n    return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9j3xyda8.lua:30:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmp9j3xyda8.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \tlocal function sum_digits(num)\n\t\tlocal sum = 0\n\t\twhile num > 0 do\n\t\t\
    \tsum = sum + num % 10\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\treturn\
    \ sum\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeme8c379.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local t = {}\n    for i = 1, #nums do\n        local sum = 0\n        for\
    \ j = 1, #tostring(nums[i]) do\n            sum = sum + tonumber(tostring(nums[i]):sub(j,\
    \ j))\n        end\n        table.insert(t, sum)\n    end\n    local swap = true\n\
    \    while swap do\n        swap = false\n        for i = 1, #t do\n         \
    \   if t[i] > t[i + 1] then\n                local tmp = t[i]\n              \
    \  t[i] = t[i + 1]\n                t[i + 1] = tmp\n                tmp = nums[i]\n\
    \                nums[i] = nums[i + 1]\n                nums[i + 1] = tmp\n  \
    \              swap = true\n            end\n        end\n    end\n    return\
    \ nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv3bplxad.lua:13:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpv3bplxad.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpv3bplxad.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ybtqeu8.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\
    \t/tmp/tmp4ybtqeu8.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfc0095o.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmptfc0095o.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local sums = {}\n  for i, num in ipairs(nums) do\n    local digits = digitize(num)\n\
    \    local sum = 0\n    for _, d in ipairs(digits) do\n      sum = sum + d\n \
    \   end\n    table.insert(sums, { num = num, index = i, sum = sum })\n  end\n\
    \  table.sort(sums, function(x, y)\n    if x.sum == y.sum then\n      return x.index\
    \ < y.index\n    else\n      return x.sum < y.sum\n    end\n  end)\n  local ordered\
    \ = {}\n  for _, x in ipairs(sums) do\n    table.insert(ordered, x.num)\n  end\n\
    \  return ordered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7tgnlyb3.lua:11:\
    \ attempt to call a nil value (global 'digitize')\nstack traceback:\n\t/tmp/tmp7tgnlyb3.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp7tgnlyb3.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local points = {}\n    for i,v in ipairs(nums) do\n        table.insert(points,{\n\
    \            i=i,v=v,p=sum_digits(v)\n        })\n    end\n    table.sort(points,function(a,b)\n\
    \        if a.p == b.p then\n            return a.i < b.i\n        else\n    \
    \        return a.p < b.p\n        end\n    end)\n    local result = {}\n    for\
    \ _,p in ipairs(points) do\n        table.insert(result,p.v)\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpspvm5k1w.lua:12:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpspvm5k1w.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpspvm5k1w.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    if #nums == 0 then\n        return nums\n    end\n    return ascending_list(list.merge(nums,\
    \ function(x, y)\n        return digit_sum(x) < digit_sum(y) or\n            \
    \   (digit_sum(x) == digit_sum(y) and x < y)\n    end))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfsv7kq6h.lua:12:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmpfsv7kq6h.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpfsv7kq6h.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgl8otlsm.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpgl8otlsm.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29drz7gq.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp29drz7gq.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- TODO: Write your code here\n    return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuq2l4trz.lua:16:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpuq2l4trz.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- Implement here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xxc95f8.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp9xxc95f8.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local idx = 0\n  return _.sort(\n    nums,\n    function(a, b)\n      local\
    \ res = points(a) - points(b)\n      return res ~= 0 and res or idx - _.indexOf(nums,\
    \ b)\n    end\n  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxqcu48x9.lua:10:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmpxqcu48x9.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpxqcu48x9.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local points_map = {}\n  for i, n in ipairs(nums) do\n    points_map[n] = (n\
    \ < 0 and n*2 - 1 or n) + i\n  end\n  table.sort(nums, function(a, b) return points_map[a]\
    \ < points_map[b] end)\n  return nums\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdrggo9pr.lua:20:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpdrggo9pr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpddo572ef.lua:14:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpddo572ef.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpgx95oq.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpmpgx95oq.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0mdnx1d7.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmp0mdnx1d7.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82x1cbps.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmp82x1cbps.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  error(\"Not implemented yet\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpha5ixjvp.lua:9:\
    \ Not implemented yet\nstack traceback:\n\t/tmp/tmpha5ixjvp.lua:9: in local 'candidate'\n\
    \t/tmp/tmpha5ixjvp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_p72uqd.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpb_p72uqd.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \tlocal table_len = #nums\n\tlocal temp\n\tfor i = 1, table_len do\n\t\tfor j\
    \ = i + 1, table_len do\n\t\t\tif func.convert_integer_to_digit_sum(nums[i]) >\
    \ func.convert_integer_to_digit_sum(nums[j]) then\n\t\t\t\ttemp = nums[i]\n\t\t\
    \t\tnums[i] = nums[j]\n\t\t\t\tnums[j] = temp\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa1i0g59d.lua:13:\
    \ attempt to index a nil value (global 'func')\nstack traceback:\n\t/tmp/tmpa1i0g59d.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpa1i0g59d.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqnczij8.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmphqnczij8.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeyjrupar.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpeyjrupar.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2is2cdvl.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp2is2cdvl.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local function compare(x, y)\n    local x_sum = 0\n    local y_sum = 0\n  \
    \  while x > 0 do\n      x_sum = x_sum + x % 10\n      x = x // 10\n    end\n\
    \    while y > 0 do\n      y_sum = y_sum + y % 10\n      y = y // 10\n    end\n\
    \    if x_sum == y_sum then\n      return x > y\n    else\n      return x_sum\
    \ < y_sum\n    end\n  end\n  table.sort(nums, compare)\n  return nums\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcqlera9n.lua:33:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpcqlera9n.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    if not nums then\n        error(\"nums should be a list of integers.\")\n\
    \    end\n    return sort_by(function(a, b)\n        return sum_of_digits(a) <\
    \ sum_of_digits(b)\n    end, nums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp51c1gnh_.lua:12:\
    \ attempt to call a nil value (global 'sort_by')\nstack traceback:\n\t/tmp/tmp51c1gnh_.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp51c1gnh_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  return _.sortBy(nums, _.compose(sum_digits, _.abs))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9rcc1h6i.lua:9:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmp9rcc1h6i.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9rcc1h6i.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local sum_of_digits = {}\n    local t_list = {}\n    local t_list_sort =\
    \ {}\n    local t_list_all = {}\n    local temp = 0\n    local k = 0\n    local\
    \ l = 0\n    if (#nums > 0) then\n        for k, v in pairs(nums) do\n       \
    \     sum_of_digits[k] = 0\n            temp = v\n            while (temp ~= 0)\
    \ do\n                sum_of_digits[k] = sum_of_digits[k] + temp % 10\n      \
    \          temp = math.floor(temp / 10)\n            end\n        end\n      \
    \  for k, v in pairs(sum_of_digits) do\n            if (t_list[v] == nil) then\n\
    \                t_list[v] = {}\n            end\n            table.insert(t_list[v],\
    \ nums[k])\n        end\n        for k, v in pairs(t_list) do\n            table.insert(t_list_sort,\
    \ k)\n        end\n        table.sort(t_list_sort)\n        for k, v in pairs(t_list_sort)\
    \ do\n            for l, w in pairs(t_list[v]) do\n                table.insert(t_list_all,\
    \ w)\n            end\n        end\n    end\n    return t_list_all\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local nums_with_points = {}\n  for k, v in ipairs(nums) do\n    nums_with_points[k]\
    \ = {\n      value = v,\n      points = sum_of_digits(v)\n    }\n  end\n  table.sort(nums_with_points,\
    \ function(a, b)\n    if a.points ~= b.points then\n      return a.points < b.points\n\
    \    else\n      return a.value < b.value\n    end\n  end)\n  local sorted_nums\
    \ = {}\n  for k, v in ipairs(nums_with_points) do\n    sorted_nums[k] = v.value\n\
    \  end\n  return sorted_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk_ky1ycd.lua:13:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpk_ky1ycd.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpk_ky1ycd.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgia3ohy6.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmpgia3ohy6.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4gwpk1q.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpz4gwpk1q.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function count_digits(num)\n        local sum = 0\n        while num\
    \ > 0 do\n            sum = sum + num % 10\n            num = math.floor(num /\
    \ 10)\n        end\n        return sum\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnjqzknvb.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local p = {}\n    for i,v in ipairs(nums) do\n        local t = {i,v}\n \
    \       local s = 0\n        for ch in string.gmatch(tostring(v),'.') do\n   \
    \         s = s + tonumber(ch)\n        end\n        t[3] = s\n        table.insert(p,t)\n\
    \    end\n    table.sort(p,function(a,b) return a[3] < b[3] end)\n    local t\
    \ = {}\n    for i,v in ipairs(p) do\n        table.insert(t,v[2])\n    end\n \
    \   return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvyrui0ob.lua:14:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpvyrui0ob.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpvyrui0ob.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- YOUR CODE HERE\n    return nums\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpks8qlmg0.lua:16:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpks8qlmg0.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis0b8ggi.lua:14:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpis0b8ggi.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  error('Not implemented')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphbf7rpu_.lua:9:\
    \ Not implemented\nstack traceback:\n\t/tmp/tmphbf7rpu_.lua:9: in local 'candidate'\n\
    \t/tmp/tmphbf7rpu_.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p_q25p4.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp9p_q25p4.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprr3jo7_d.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmprr3jo7_d.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function helper(num)\n        return num % 10 + math.floor(num / 10)\n\
    \    end\n    local count = #nums\n    local index = 1\n    while index <= count\
    \ do\n        local min = index\n        for j = index + 1, count do\n       \
    \     if helper(nums[j]) < helper(nums[min]) then\n                min = j\n \
    \           end\n        end\n        if min ~= index then\n            nums[index],\
    \ nums[min] = nums[min], nums[index]\n        end\n        index = index + 1\n\
    \    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2mwon3u0.lua:32:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -12, -11, -1}\nstack traceback:\n\
    \t/tmp/tmp2mwon3u0.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \t-- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpby3ihzpd.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpby3ihzpd.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- TODO: Implementation here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcx67p2dh.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpcx67p2dh.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  if #nums == 0 then\n    return nums\n  end\n  local sums = {}\n  for i, n in\
    \ ipairs(nums) do\n    sums[i] = sum_of_digits(n)\n  end\n  local orders = {}\n\
    \  for i in ipairs(nums) do\n    orders[i] = i\n  end\n  table.sort(orders, function(a,\
    \ b)\n    return sums[a] < sums[b]\n  end)\n  local nums_sorted = {}\n  for i,\
    \ j in ipairs(orders) do\n    nums_sorted[i] = nums[j]\n  end\n  return nums_sorted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7hrmupqy.lua:14:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmp7hrmupqy.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp7hrmupqy.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    if not nums or #nums == 0 then\n        return nums\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0bqghbu3.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local t = {}\n    local numbers = {}\n    local index = 1\n    for _, v in\
    \ ipairs(nums) do\n        t[#t + 1] = { v, v % 10 + v // 10 % 10 + v // 100 }\n\
    \    end\n    for i = 1, #t do\n        local index = 1\n        for j = 1, #t\
    \ do\n            if t[j][2] < t[index][2] then\n                index = j\n \
    \           end\n        end\n        numbers[#numbers + 1] = t[index][1]\n  \
    \      table.remove(t, index)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6zvlo84.lua:31:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -12, -11, -1}\nstack traceback:\n\
    \t/tmp/tmph6zvlo84.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \ttable.sort(nums, function(a, b)\n\t\tlocal sum_a = 0\n\t\tlocal sum_b = 0\n\t\
    \tfor i = 1, #a do\n\t\t\tsum_a = sum_a + tonumber(a:sub(i, i))\n\t\tend\n\t\t\
    for i = 1, #b do\n\t\t\tsum_b = sum_b + tonumber(b:sub(i, i))\n\t\tend\n\t\tif\
    \ sum_a ~= sum_b then\n\t\t\treturn sum_a < sum_b\n\t\telse\n\t\t\treturn a <\
    \ b\n\t\tend\n\tend)\n\treturn nums\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx0jaa8as.lua:12:\
    \ attempt to get length of a number value (local 'a')\nstack traceback:\n\t/tmp/tmpx0jaa8as.lua:12:\
    \ in function </tmp/tmpx0jaa8as.lua:9>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpx0jaa8as.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpx0jaa8as.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local key_to_value = {}\n    local value_to_key = {}\n    for i, n in ipairs(nums)\
    \ do\n        local n_abs = math.abs(n)\n        local sum = 0\n        while\
    \ n_abs > 0 do\n            sum = sum + n_abs % 10\n            n_abs = math.floor(n_abs\
    \ / 10)\n        end\n        key_to_value[i] = sum\n        value_to_key[sum]\
    \ = i\n    end\n    table.sort(key_to_value)\n    local result = {}\n    for _,\
    \ k in ipairs(key_to_value) do\n        table.insert(result, nums[value_to_key[k]])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5me0q16.lua:32:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -1, -11, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpz5me0q16.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local sums = {}\n  for i,v in ipairs(nums) do\n    sums[i] = sum_of_digits(v)\n\
    \  end\n  return insertion_sort(nums, sums)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8k8mjdlv.lua:11:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmp8k8mjdlv.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp8k8mjdlv.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local sum_digs = {}\n    for k, v in ipairs(nums) do\n        if not sum_digs[sum_digits(v)]\
    \ then\n            sum_digs[sum_digits(v)] = {}\n        end\n        table.insert(sum_digs[sum_digits(v)],\
    \ v)\n    end\n    local sorted = {}\n    for dig_sum, vals in pairs(sum_digs)\
    \ do\n        for _, val in ipairs(vals) do\n            table.insert(sorted,\
    \ val)\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6z1cdqw7.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmp6z1cdqw7.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp6z1cdqw7.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local digit_sums = {}\n    for i, v in ipairs(nums) do\n        local sum\
    \ = 0\n        while v > 0 do\n            sum = sum + v % 10\n            v =\
    \ math.floor(v / 10)\n        end\n        digit_sums[i] = sum\n    end\n    return\
    \ map(nums, function(i, v) return i, digit_sums[i] end,\n        function(i1,\
    \ i2) return digit_sums[i1] < digit_sums[i2] end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6kxaq4gs.lua:18:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp6kxaq4gs.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp6kxaq4gs.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp49hjvhkj.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp49hjvhkj.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \tif #nums == 0 then\n\t\treturn nums\n\tend\n\ttable.sort(nums, function(a, b)\n\
    \t\tif sum_of_digits(a) == sum_of_digits(b) then\n\t\t\treturn a < b\n\t\tend\n\
    \t\treturn sum_of_digits(a) < sum_of_digits(b)\n\tend)\n\treturn nums\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptcku1e10.lua:13:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmptcku1e10.lua:13:\
    \ in function </tmp/tmptcku1e10.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmptcku1e10.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmptcku1e10.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local index_table = {}\n    local sum_table = {}\n    local function helper(n)\n\
    \        local sum = 0\n        while n > 0 do\n            sum = sum + n % 10\n\
    \            n = math.floor(n / 10)\n        end\n        return sum\n    end\n\
    \    for i, v in ipairs(nums) do\n        local sum = helper(v)\n        if sum_table[sum]\
    \ then\n            table.insert(sum_table[sum], i)\n        else\n          \
    \  sum_table[sum] = {i}\n        end\n    end\n    for _, v in pairs(sum_table)\
    \ do\n        table.sort(v)\n        for _, v2 in ipairs(v) do\n            table.insert(index_table,\
    \ v2)\n        end\n    end\n    local result = {}\n    for _, v in ipairs(index_table)\
    \ do\n        table.insert(result, nums[v])\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__bixvwe.lua:43:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\
    \t/tmp/tmp__bixvwe.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    if type(nums) ~= 'table' then\n        error('Expected a table', 2)\n   \
    \ end\n    local points = {}\n    for i, v in ipairs(nums) do\n        if type(v)\
    \ ~= 'number' then\n            error('Not a number', 2)\n        end\n      \
    \  local sum = 0\n        while v > 0 do\n            sum = sum + v % 10\n   \
    \         v = math.floor(v / 10)\n        end\n        table.insert(points, {i\
    \ = i, sum = sum})\n    end\n    table.sort(points, function(p1, p2)\n       \
    \ if p1.sum ~= p2.sum then\n            return p1.sum < p2.sum\n        else\n\
    \            return p1.i < p2.i\n        end\n    end)\n    local result = {}\n\
    \    for _, p in ipairs(points) do\n        table.insert(result, nums[p.i])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpieq6n0d2.lua:41:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpieq6n0d2.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- YOUR CODE HERE\n    if #nums == 0 then\n        return nums\n    end\n\
    \    local new_nums = {}\n    for i,v in ipairs(nums) do\n        new_nums[i]\
    \ = {i, v}\n    end\n    local function cmp(a, b)\n        local sum_a = 0\n \
    \       local sum_b = 0\n        for digit in string.gmatch(tostring(a[2]), \"\
    .\") do\n            sum_a = sum_a + tonumber(digit)\n        end\n        for\
    \ digit in string.gmatch(tostring(b[2]), \".\") do\n            sum_b = sum_b\
    \ + tonumber(digit)\n        end\n        if sum_a == sum_b then\n           \
    \ return a[1] < b[1]\n        else\n            return sum_a < sum_b\n       \
    \ end\n    end\n    table.sort(new_nums, cmp)\n    local ordered_nums = {}\n \
    \   for i,v in ipairs(new_nums) do\n        ordered_nums[i] = v[2]\n    end\n\
    \    return ordered_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp39r69_iz.lua:21:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp39r69_iz.lua:21:\
    \ in function </tmp/tmp39r69_iz.lua:17>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp39r69_iz.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmp39r69_iz.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function _sum(n)\n        local s = 0\n        while n ~= 0 do\n  \
    \          s = s + n % 10\n            n = math.floor(n / 10)\n        end\n \
    \       return s\n    end\n    local function _compare(a, b)\n        local s\
    \ = _sum(a) - _sum(b)\n        if s == 0 then\n            return a < b\n    \
    \    else\n            return s < 0\n        end\n    end\n    table.sort(nums,\
    \ _compare)\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function point_sum(n)\n        local sum = 0\n        while n > 0 do\n\
    \            sum = sum + (n % 10)\n            n = math.floor(n / 10)\n      \
    \  end\n        return sum\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpouq_kr_x.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local function sort_by_sum(num1, num2)\n    return (get_sum_of_digits(num1)\
    \ < get_sum_of_digits(num2))\n  end\n  table.sort(nums, sort_by_sum)\n  return\
    \ nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4flq_x_d.lua:10:\
    \ attempt to call a nil value (global 'get_sum_of_digits')\nstack traceback:\n\
    \t/tmp/tmp4flq_x_d.lua:10: in function </tmp/tmp4flq_x_d.lua:9>\n\t[C]: in function\
    \ 'table.sort'\n\t/tmp/tmp4flq_x_d.lua:12: in local 'candidate'\n\t/tmp/tmp4flq_x_d.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function sum_digits(n)\n        if n == 0 then\n            return\
    \ 0\n        else\n            return (n % 10) + sum_digits(math.floor(n / 10))\n\
    \        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph4xykv_e.lua:28: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \tlocal function compare(a, b)\n\t\tlocal sum_a = 0\n\t\tlocal sum_b = 0\n\t\t\
    for i = 1, #tostring(a) do\n\t\t\tsum_a = sum_a + tonumber(tostring(a):sub(i,\
    \ i))\n\t\tend\n\t\tfor i = 1, #tostring(b) do\n\t\t\tsum_b = sum_b + tonumber(tostring(b):sub(i,\
    \ i))\n\t\tend\n\t\tif sum_a ~= sum_b then\n\t\t\treturn sum_a < sum_b\n\t\telse\n\
    \t\t\treturn a < b\n\t\tend\n\tend\n\ttable.sort(nums, compare)\n\treturn nums\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_84znna.lua:13:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp3_84znna.lua:13:\
    \ in function </tmp/tmp3_84znna.lua:9>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp3_84znna.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp3_84znna.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \tif (#nums == 0) then\n\t\treturn {}\n\tend\n\tlocal sort_nums = {}\n\tlocal\
    \ index = 1\n\tfor _,v in ipairs(nums) do\n\t\tlocal str = tostring(v)\n\t\tlocal\
    \ sum = 0\n\t\tfor i=1,#str do\n\t\t\tsum = sum + tonumber(str:sub(i,i))\n\t\t\
    end\n\t\tsort_nums[index] = {sum, v}\n\t\tindex = index + 1\n\tend\n\ttable.sort(sort_nums,\
    \ function(a,b)\n\t\tif (a[1] == b[1]) then\n\t\t\treturn a[2] < b[2]\n\t\telse\n\
    \t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\tlocal ret = {}\n\tfor i=1,#sort_nums\
    \ do\n\t\tret[i] = sort_nums[i][2]\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp37zkowkj.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp37zkowkj.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp37zkowkj.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxtk6r993.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmpxtk6r993.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local t = {}\n    for i, v in ipairs(nums) do\n        table.insert(t, {v,\
    \ sum_of_digits(v), i})\n    end\n    table.sort(t, function(a, b)\n        return\
    \ a[2] < b[2] or (a[2] == b[2] and a[3] < b[3])\n    end)\n    for i, v in ipairs(t)\
    \ do\n        t[i] = v[1]\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz5l_02h5.lua:11:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpz5l_02h5.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpz5l_02h5.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- YOUR CODE HERE\n    nums = check_nums(nums)\n    local sum = {}\n    for\
    \ k, v in pairs(nums) do\n        sum[k] = digit_sum(nums[k])\n    end\n    local\
    \ function cmp(a, b)\n        if sum[a] < sum[b] then\n            return true\n\
    \        elseif sum[a] == sum[b] then\n            return a < b\n        else\n\
    \            return false\n        end\n    end\n    table.sort(nums, cmp)\n \
    \   return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnu979tiw.lua:10:\
    \ attempt to call a nil value (global 'check_nums')\nstack traceback:\n\t/tmp/tmpnu979tiw.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpnu979tiw.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \tlocal function sum_digits(num)\n\t\tlocal sum = 0\n\t\twhile num ~= 0 do\n\t\
    \t\tsum = sum + (num % 10)\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\treturn\
    \ sum\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_xx1lrpo.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhpv9s81.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpbhpv9s81.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcqo0vbje.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpcqo0vbje.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpke3nocwl.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpke3nocwl.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wjs96yk.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp_wjs96yk.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function sum_digits(n)\n        local total = 0\n        while n >\
    \ 0 do\n            total = total + n % 10\n            n = math.floor(n / 10)\n\
    \        end\n        return total\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8is33m54.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \tlocal res = {}\n\tlocal sums = {}\n\tfor i, n in ipairs(nums) do\n\t\tlocal\
    \ sum = 0\n\t\tfor d in tostring(n):gmatch(\"%d\") do\n\t\t\tsum = sum + tonumber(d)\n\
    \t\tend\n\t\ttable.insert(sums, {i = i, sum = sum})\n\tend\n\ttable.sort(sums,\
    \ function(a, b)\n\t\tif a.sum == b.sum then\n\t\t\treturn a.i < b.i\n\t\telse\n\
    \t\t\treturn a.sum < b.sum\n\t\tend\n\tend)\n\tfor _, s in ipairs(sums) do\n\t\
    \ttable.insert(res, nums[s.i])\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbfervsa.lua:34:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, -1, 11, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpgbfervsa.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local sum = {}\n  for i,v in ipairs(nums) do\n    local s = 0\n    for j =\
    \ 1, #tostring(v) do\n      s = s + tonumber(tostring(v):sub(j,j))\n    end\n\
    \    sum[i] = s\n  end\n  local t = {}\n  for i = 1, #nums do\n    local min =\
    \ math.min(unpack(sum))\n    local j = nil\n    for k,v in ipairs(sum) do\n  \
    \    if v == min then\n        j = k\n        break\n      end\n    end\n    t[i]\
    \ = nums[j]\n    sum[j] = math.max(unpack(sum)) + 1\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn6ln0pqx.lua:13:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpn6ln0pqx.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpn6ln0pqx.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local sums = {}\n    for i, v in ipairs(nums) do\n        sums[i] = sum_of_digits(v)\n\
    \    end\n    local function key(i)\n        return sums[i]\n    end\n    local\
    \ function swap(a, b)\n        nums[a], nums[b] = nums[b], nums[a]\n        sums[a],\
    \ sums[b] = sums[b], sums[a]\n    end\n    local function bubble_down(i)\n   \
    \     local left = 2 * i\n        local right = left + 1\n        local end_at\
    \ = #nums\n        while left <= end_at do\n            local smaller = left\n\
    \            if right <= end_at and key(right) < key(left) then\n            \
    \    smaller = right\n            end\n            if key(i) <= key(smaller) then\n\
    \                break\n            end\n            swap(i, smaller)\n      \
    \      i = smaller\n            left = 2 * i\n            right = left + 1\n \
    \       end\n    end\n    for i = math.floor(#nums / 2), 1, -1 do\n        bubble_down(i)\n\
    \    end\n    for i = #nums, 2, -1 do\n        swap(1, i)\n        bubble_down(1)\n\
    \    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpltixtf4l.lua:11:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpltixtf4l.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpltixtf4l.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \tlocal sums = {}\n\tlocal indices = {}\n\tfor index, number in ipairs(nums) do\n\
    \t\tlocal sum = 0\n\t\twhile number > 0 do\n\t\t\tsum = sum + number % 10\n\t\t\
    \tnumber = math.floor(number / 10)\n\t\tend\n\t\tindices[index] = index\n\t\t\
    sums[index] = sum\n\tend\n\ttable.sort(indices, function(x, y)\n\t\tif sums[x]\
    \ < sums[y] then\n\t\t\treturn true\n\t\telseif sums[x] > sums[y] then\n\t\t\t\
    return false\n\t\telse\n\t\t\treturn x < y\n\t\tend\n\tend)\n\tlocal result =\
    \ {}\n\tfor _, index in ipairs(indices) do\n\t\ttable.insert(result, nums[index])\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1yunf26r.lua:39:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\
    \t/tmp/tmp1yunf26r.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local to_points = {}\n  for _, v in ipairs(nums) do\n    local k = 0\n    local\
    \ n = v\n    while n ~= 0 do\n      k = k + n % 10\n      n = math.floor(n / 10)\n\
    \    end\n    to_points[v] = k\n  end\n  table.sort(nums, function(l, r)\n   \
    \ if to_points[l] == to_points[r] then\n      return l < r\n    else\n      return\
    \ to_points[l] < to_points[r]\n    end\n  end)\n  return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  -- your code here:\n  local copy = {}\n  local j = 1\n  local n = 0\n  local\
    \ points = {}\n  local function sum_of_digits(num)\n    local sum = 0\n    while\
    \ num > 0 do\n      local digit = num % 10\n      sum = sum + digit\n      num\
    \ = math.floor(num / 10)\n    end\n    return sum\n  end\n  for i, v in ipairs(nums)\
    \ do\n    local sum = sum_of_digits(v)\n    if points[sum] == nil then\n     \
    \ points[sum] = {v}\n    else\n      points[sum][#points[sum] + 1] = v\n    end\n\
    \  end\n  for i, v in pairs(points) do\n    for a, b in ipairs(v) do\n      copy[j]\
    \ = b\n      j = j + 1\n    end\n  end\n  return copy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamg7v926.lua:43:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpamg7v926.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  -- TODO: implement\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdeo3kp5i.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpdeo3kp5i.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  table.sort(nums, function(x, y) return sum_of_digits(x) < sum_of_digits(y)\
    \ end)\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpksr0_6t0.lua:9:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpksr0_6t0.lua:9:\
    \ in function </tmp/tmpksr0_6t0.lua:9>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpksr0_6t0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpksr0_6t0.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    if #nums == 0 then\n        return nums\n    end\n    local sums = {}\n \
    \   for i, v in ipairs(nums) do\n        sums[i] = {i = i, sum = sum_of_digits(v)}\n\
    \    end\n    table.sort(sums, function(a, b)\n        if a.sum == b.sum then\n\
    \            return a.i < b.i\n        else\n            return a.sum < b.sum\n\
    \        end\n    end)\n    local result = {}\n    for i, v in ipairs(sums) do\n\
    \        result[i] = nums[v.i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj78xmfxl.lua:14:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpj78xmfxl.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpj78xmfxl.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local sums = {}\n    for k,v in pairs(nums) do\n        sums[k] = v\n   \
    \ end\n    for k,v in pairs(sums) do\n        sums[k] = sum_of_digits(v)\n   \
    \ end\n    local function order(a,b)\n        return sums[a] < sums[b]\n    end\n\
    \    return sort_index(nums, order)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7yb92wx4.lua:14:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmp7yb92wx4.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp7yb92wx4.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprujiwdc7.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmprujiwdc7.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- Getting the sum of digits of each number\n    local temp = {}\n    for\
    \ i, v in ipairs(nums) do\n        local digits = tostring(v):gmatch('%d')\n \
    \       local sum = 0\n        for digit in digits do\n            sum = sum +\
    \ tonumber(digit)\n        end\n        temp[i] = {v, sum}\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv1p4tvch.lua:31: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- TO BE IMPLEMENTED\n    return nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2w1f_gpk.lua:16:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp2w1f_gpk.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function sum_of_digits(a)\n        local sum = 0\n        while a >\
    \ 0 do\n            sum = sum + a % 10\n            a = math.floor(a / 10)\n \
    \       end\n        return sum\n    end\n    local function find_max(idx, nums)\n\
    \        local max_idx = idx\n        local max_sum = sum_of_digits(nums[idx])\n\
    \        for i = idx, #nums do\n            local sum = sum_of_digits(nums[i])\n\
    \            if sum >= max_sum then\n                max_idx = i\n           \
    \     max_sum = sum\n            end\n        end\n        return max_idx\n  \
    \  end\n    local res = {}\n    for i = 1, #nums do\n        local idx = find_max(i,\
    \ nums)\n        res[i] = nums[idx]\n        nums[idx] = nums[i]\n    end\n  \
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7addyrwi.lua:41:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {11, 1, -12, -1, -11}\nstack traceback:\n\
    \t/tmp/tmp7addyrwi.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local function sum_digits(n)\n    local sum = 0\n    while n > 0 do\n     \
    \ sum = sum + n % 10\n      n = math.floor(n / 10)\n    end\n    return sum\n\
    \  end\n  local points = {}\n  for i, num in ipairs(nums) do\n    local p = sum_digits(num)\n\
    \    points[i] = {index = i, num = num, p = p}\n  end\n  table.sort(points, function(a,\
    \ b)\n    if a.p < b.p then\n      return true\n    elseif a.p > b.p then\n  \
    \    return false\n    else\n      return a.index < b.index\n    end\n  end)\n\
    \  local ret = {}\n  for i, p in ipairs(points) do\n    ret[i] = p.num\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2p0whr9y.lua:41:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\
    \t/tmp/tmp2p0whr9y.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return List.sortBy(List.sum, nums)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpia3x9jzd.lua:9:\
    \ attempt to index a nil value (global 'List')\nstack traceback:\n\t/tmp/tmpia3x9jzd.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpia3x9jzd.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \tlocal function sum_digits(n)\n\t\tlocal s = 0\n\t\twhile n > 0 do\n\t\t\ts =\
    \ s + n % 10\n\t\t\tn = math.floor(n / 10)\n\t\tend\n\t\treturn s\n\tend\n\ttable.sort(nums,\
    \ function(a, b)\n\t\tlocal sum_a = sum_digits(a)\n\t\tlocal sum_b = sum_digits(b)\n\
    \t\tif sum_a == sum_b then\n\t\t\treturn a < b\n\t\telse\n\t\t\treturn sum_a <\
    \ sum_b\n\t\tend\n\tend)\n\treturn nums\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpss7vbcti.lua:32:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpss7vbcti.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    table.sort(nums, function(x, y)\n        local sum_x = 0\n        local sum_y\
    \ = 0\n        for d in tostring(x):gmatch('%d') do\n            sum_x = sum_x\
    \ + tonumber(d)\n        end\n        for d in tostring(y):gmatch('%d') do\n \
    \           sum_y = sum_y + tonumber(d)\n        end\n        return sum_x < sum_y\n\
    \    end)\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbgjqomy.lua:26:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, -1, -11, 11, -12}\nstack traceback:\n\
    \t/tmp/tmprbgjqomy.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    if not nums or #nums == 0 then\n        return nums\n    end\n    local t\
    \ = {}\n    for k, v in ipairs(nums) do\n        local sum = 0\n        local\
    \ n = v\n        while n ~= 0 do\n            sum = sum + n % 10\n           \
    \ n = math.floor(n / 10)\n        end\n        t[#t + 1] = { k, sum }\n    end\n\
    \    table.sort(t, function(a, b)\n        if a[2] == b[2] then\n            return\
    \ a[1] < b[1]\n        else\n            return a[2] < b[2]\n        end\n   \
    \ end)\n    local result = {}\n    for _, v in ipairs(t) do\n        result[#result\
    \ + 1] = nums[v[1]]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- YOUR CODE HERE\n    local sorted = {}\n    for i, v in ipairs(nums) do\n\
    \        local key = 0\n        for c in tostring(v):gmatch\".\" do\n        \
    \    key = key + tonumber(c)\n        end\n        table.insert(sorted, {index\
    \ = i, value = v, key = key})\n    end\n    table.sort(sorted, function(a, b)\n\
    \        if a.key < b.key then\n            return true\n        elseif a.key\
    \ > b.key then\n            return false\n        else\n            return a.index\
    \ < b.index\n        end\n    end)\n    local result = {}\n    for _, v in ipairs(sorted)\
    \ do\n        table.insert(result, v.value)\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1fvkv_p.lua:14:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpq1fvkv_p.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpq1fvkv_p.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    if #nums == 0 then\n        return nums\n    end\n    local function get_sum(num)\n\
    \        local sum = 0\n        while num > 0 do\n            sum = sum + num\
    \ % 10\n            num = math.floor(num / 10)\n        end\n        return sum\n\
    \    end\n    local num_sums = {}\n    for i,num in ipairs(nums) do\n        num_sums[#num_sums\
    \ + 1] = {sum = get_sum(num), i = i}\n    end\n    table.sort(num_sums, function(a,\
    \ b)\n        if a.sum == b.sum then\n            return a.i < b.i\n        else\n\
    \            return a.sum < b.sum\n        end\n    end)\n    local res = {}\n\
    \    for i,num_sum in ipairs(num_sums) do\n        res[i] = nums[num_sum.i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_xodo1ej.lua:41:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\
    \t/tmp/tmp_xodo1ej.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5s_g5c4m.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp5s_g5c4m.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7r4gf41.lua:14:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmps7r4gf41.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \ttable.sort(nums, function(a, b)\n\t\tlocal a_sum = a % 10 + (a // 10) % 10 +\
    \ a // 100\n\t\tlocal b_sum = b % 10 + (b // 10) % 10 + b // 100\n\t\tif a_sum\
    \ == b_sum then\n\t\t\treturn a < b\n\t\telse\n\t\t\treturn a_sum < b_sum\n\t\t\
    end\n\tend)\n\treturn nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6_79f71.lua:24:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -12, -11, -1}\nstack traceback:\n\
    \t/tmp/tmps6_79f71.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnwwmidg5.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmpnwwmidg5.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local sum = function(x)\n        local s = 0\n        for i = 1, string.len(x)\
    \ do\n            s = s + string.sub(x, i, i)\n        end\n        return s\n\
    \    end\n    local arr = {}\n    for i = 1, #nums do\n        arr[i] = {sum(nums[i]),\
    \ nums[i]}\n    end\n    table.sort(arr, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] < b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    for i = 1, #arr do\n        arr[i] = arr[i][2]\n\
    \    end\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2rueo8ls.lua:12:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmp2rueo8ls.lua:12:\
    \ in local 'sum'\n\t/tmp/tmp2rueo8ls.lua:18: in local 'candidate'\n\t/tmp/tmp2rueo8ls.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  return sorted_by(function(a, b) return a[1] < b[1] end,\n                 \
    \  map(function(i, v) return {summation(digits(v)), i, v} end, nums))\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfstk1vys.lua:10:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpfstk1vys.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpfstk1vys.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return sort(nums, function(a, b)\n        local a_score = sum_digits(a)\n\
    \        local b_score = sum_digits(b)\n        if a_score < b_score then\n  \
    \          return true\n        elseif a_score > b_score then\n            return\
    \ false\n        else\n            return a < b\n        end\n    end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvmdyt8o3.lua:9:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpvmdyt8o3.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpvmdyt8o3.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    if not nums or #nums == 0 then\n        return {}\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy_kv1lhz.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function s(x)\n        if x < 0 then\n            x = -x\n        end\n\
    \        local sum = 0\n        while x > 0 do\n            sum = sum + x % 10\n\
    \            x = math.floor(x / 10)\n        end\n        return sum\n    end\n\
    \    local res = {}\n    for i, v in ipairs(nums) do\n        res[i] = {sum =\
    \ s(v), i = i, v = v}\n    end\n    table.sort(res, function(a, b)\n        if\
    \ a.sum == b.sum then\n            return a.i < b.i\n        else\n          \
    \  return a.sum < b.sum\n        end\n    end)\n    for i, v in ipairs(res) do\n\
    \        res[i] = v.v\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbdnjthw.lua:40:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, -1, 11, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpqbdnjthw.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local sum_digits = function(num)\n        local sum = 0\n        while num\
    \ > 0 do\n            sum = sum + (num % 10)\n            num = math.floor(num\
    \ / 10)\n        end\n        return sum\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplpxq0y9r.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local nums_copy = table.copy(nums)\n    table.sort(nums_copy, function(x,\
    \ y)\n        return tostring(x):sum_of_chars() < tostring(y):sum_of_chars()\n\
    \    end)\n    return nums_copy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4v5r7q1c.lua:9:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmp4v5r7q1c.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4v5r7q1c.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  if #nums == 0 then\n    return nums\n  end\n  local points = {}\n  for i, num\
    \ in ipairs(nums) do\n    points[i] = {num, sum_of_digits(num)}\n  end\n  table.sort(points,\
    \ function(p1, p2)\n    if p1[2] == p2[2] then\n      return p1[1] < p2[1]\n \
    \   else\n      return p1[2] < p2[2]\n    end\n  end)\n  local res = {}\n  for\
    \ i, p in ipairs(points) do\n    res[i] = p[1]\n  end\n  return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_3qgljta.lua:14:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmp_3qgljta.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp_3qgljta.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local aux = {}\n    local sort_by_points = function(a, b)\n        return\
    \ aux[a] < aux[b]\n    end\n    for i, n in ipairs(nums) do\n        if not aux[n]\
    \ then\n            aux[n] = 0\n            local n_abs = math.abs(n)\n      \
    \      while n_abs > 0 do\n                aux[n] = aux[n] + (n_abs % 10)\n  \
    \              n_abs = math.floor(n_abs / 10)\n            end\n        end\n\
    \    end\n    table.sort(nums, sort_by_points)\n    return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5v5jhtmr.lua:30:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, -1, -11, 11, -12}\nstack traceback:\n\
    \t/tmp/tmp5v5jhtmr.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7eaf5e5.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmpo7eaf5e5.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \ttable.sort(nums, function(a, b)\n\t\tif sumOfDigits(a) < sumOfDigits(b) then\n\
    \t\t\treturn true\n\t\telseif sumOfDigits(a) > sumOfDigits(b) then\n\t\t\treturn\
    \ false\n\t\telse\n\t\t\treturn indexOf(nums, a) < indexOf(nums, b)\n\t\tend\n\
    \tend)\n\treturn nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpatc2p4p9.lua:10:\
    \ attempt to call a nil value (global 'sumOfDigits')\nstack traceback:\n\t/tmp/tmpatc2p4p9.lua:10:\
    \ in function </tmp/tmpatc2p4p9.lua:9>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpatc2p4p9.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpatc2p4p9.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6awr0dv.lua:14:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpd6awr0dv.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    table.sort(nums, function(a, b)\n        local a_sum = sum_of_digits(a)\n\
    \        local b_sum = sum_of_digits(b)\n        if a_sum == b_sum then\n    \
    \        return a < b\n        else\n            return a_sum < b_sum\n      \
    \  end\n    end)\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptwh938jx.lua:10:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmptwh938jx.lua:10:\
    \ in function </tmp/tmptwh938jx.lua:9>\n\t[C]: in function 'table.sort'\n\t/tmp/tmptwh938jx.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmptwh938jx.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function aux(t)\n        table.sort(t, function(e1, e2)\n         \
    \   local s1 = e1[1]\n            local s2 = e2[1]\n            if s1 ~= s2 then\n\
    \                return s1 < s2\n            else\n                return e1[2]\
    \ < e2[2]\n            end\n        end)\n        local result = {}\n        for\
    \ _,e in ipairs(t) do\n            table.insert(result, e[2])\n        end\n \
    \       return result\n    end\n    local t = {}\n    for i,n in ipairs(nums)\
    \ do\n        local sum = 0\n        for c in tostring(n):gmatch(\".\") do\n \
    \           sum = sum + tonumber(c)\n        end\n        table.insert(t, {sum,\
    \ n})\n    end\n    return aux(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwpqyy5j.lua:29:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmppwpqyy5j.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmppwpqyy5j.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfgzjrav.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpmfgzjrav.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpux6rhi8a.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpux6rhi8a.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7acejro.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpv7acejro.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function get_sum(n)\n        local res = 0\n        for digit in tostring(n):gmatch(\"\
    %d\") do\n            res = res + tonumber(digit)\n        end\n        return\
    \ res\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzsv31c8t.lua:28: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    if not nums then return nil end\n    if #nums == 0 then return {} end\n \
    \   local digits = {}\n    for i,v in ipairs(nums) do\n        local sum = 0\n\
    \        if v < 0 then\n            local t = v\n            repeat\n        \
    \        sum = sum + math.abs(math.fmod(t, 10))\n                t = math.floor(t\
    \ / 10)\n            until t == 0\n        else\n            repeat\n        \
    \        sum = sum + math.fmod(v, 10)\n                v = math.floor(v / 10)\n\
    \            until v == 0\n        end\n        digits[i] = sum\n    end\n   \
    \ table.sort(digits)\n    local out = {}\n    for i,v in ipairs(digits) do\n \
    \       for j, w in ipairs(nums) do\n            local sum = 0\n            if\
    \ w < 0 then\n                local t = w\n                repeat\n          \
    \          sum = sum + math.abs(math.fmod(t, 10))\n                    t = math.floor(t\
    \ / 10)\n                until t == 0\n            else\n                repeat\n\
    \                    sum = sum + math.fmod(w, 10)\n                    w = math.floor(w\
    \ / 10)\n                until w == 0\n            end\n            if sum ==\
    \ v then\n                table.insert(out, w)\n                table.remove(nums,\
    \ j)\n                break\n            end\n        end\n    end\n    return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5ol03ro.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpy5ol03ro.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1d9zmn5f.lua:14:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp1d9zmn5f.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function sumOfDigits(num)\n        local sum = 0\n        while num\
    \ > 0 do\n            sum = sum + num % 10\n            num = math.floor(num /\
    \ 10)\n        end\n        return sum\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptgsjq5yh.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- <YOUR IMPLEMENTATION>\n    local points_list = {}\n    for i, num in ipairs(nums)\
    \ do\n        local points = 0\n        for _, digit in ipairs(string.split(tostring(num),\
    \ \"\")) do\n            points = points + tonumber(digit)\n        end\n    \
    \    points_list[i] = {\n            num = num,\n            points = points\n\
    \        }\n    end\n    table.sort(points_list, function(a, b)\n        if a.points\
    \ == b.points then\n            return a.num < b.num\n        else\n         \
    \   return a.points < b.points\n        end\n    end)\n    local result = {}\n\
    \    for _, data in ipairs(points_list) do\n        table.insert(result, data.num)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcypy9c_a.lua:13:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpcypy9c_a.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpcypy9c_a.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m6wpwsd.lua:14:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp8m6wpwsd.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  if type(nums) ~= 'table' then\n    return nil\n  end\n  for _, num in ipairs(nums)\
    \ do\n    if type(num) ~= 'number' then\n      return nil\n    end\n  end\n  local\
    \ list = {}\n  for index, num in ipairs(nums) do\n    local sum = 0\n    local\
    \ temp = num\n    while temp ~= 0 do\n      sum = sum + temp % 10\n      temp\
    \ = math.floor(temp / 10)\n    end\n    table.insert(list, {index, sum, num})\n\
    \  end\n  table.sort(list, function(a, b)\n    if a[2] == b[2] then\n      return\
    \ a[1] < b[1]\n    else\n      return a[2] < b[2]\n    end\n  end)\n  local result\
    \ = {}\n  for _, item in ipairs(list) do\n    table.insert(result, item[3])\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \tlocal t, l = {}, {}\n\tfor i,v in ipairs(nums) do\n\t\tlocal s = tostring(v)\n\
    \t\tlocal sum = 0\n\t\tfor c in s:gmatch\".\" do\n\t\t\tsum = sum + tonumber(c)\n\
    \t\tend\n\t\tt[v] = {sum, i}\n\t\tl[#l+1] = v\n\tend\n\ttable.sort(l, function(a,\
    \ b)\n\t\tlocal ta, tb = t[a], t[b]\n\t\tif ta[1] == tb[1] then\n\t\t\treturn\
    \ ta[2] < tb[2]\n\t\telse\n\t\t\treturn ta[1] < tb[1]\n\t\tend\n\tend)\n\treturn\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe2neaohz.lua:14:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpe2neaohz.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpe2neaohz.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local sums = {}\n    for i, num in ipairs(nums) do\n        sums[num] = sums[num]\
    \ or {}\n        sums[num][1] = num\n        sums[num][2] = num < 0 and num *\
    \ -1 or num\n        sums[num][3] = 0\n        while sums[num][2] > 0 do\n   \
    \         sums[num][3] = sums[num][3] + sums[num][2] % 10\n            sums[num][2]\
    \ = sums[num][2] / 10\n        end\n        sums[num][2] = sums[num][3]\n    \
    \    sums[num][3] = i\n    end\n    table.sort(sums, function(a, b)\n        if\
    \ a[2] == b[2] then\n            return a[3] < b[3]\n        else\n          \
    \  return a[2] < b[2]\n        end\n    end)\n    local res = {}\n    for i, num\
    \ in ipairs(sums) do\n        res[i] = num[1]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb01vm4pd.lua:39:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1}\nstack traceback:\n\t/tmp/tmpb01vm4pd.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3n2ejudy.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmp3n2ejudy.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return sort(nums, function(x, y) return sum_of_digits(x) < sum_of_digits(y)\
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul_ml9hu.lua:9:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpul_ml9hu.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpul_ml9hu.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local function sum(n)\n    local tot = 0\n    while n > 0 do\n      tot = tot\
    \ + n % 10\n      n = math.floor(n / 10)\n    end\n    return tot\n  end\n  local\
    \ res = {}\n  for i, v in ipairs(nums) do\n    res[i] = {n = v, s = sum(v)}\n\
    \  end\n  table.sort(res, function(a, b)\n    return a.s < b.s or (a.s == b.s\
    \ and a.n < b.n)\n  end)\n  for i, v in ipairs(res) do\n    res[i] = v.n\n  end\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdiozlk99.lua:33:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpdiozlk99.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfm6ly07.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpdfm6ly07.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function sort_by_points(a, b)\n        local a_score = math.abs(a)\n\
    \        local b_score = math.abs(b)\n        local sum_a = 0\n        local sum_b\
    \ = 0\n        while a_score ~= 0 do\n            sum_a = sum_a + a_score % 10\n\
    \            a_score = math.floor(a_score / 10)\n        end\n        while b_score\
    \ ~= 0 do\n            sum_b = sum_b + b_score % 10\n            b_score = math.floor(b_score\
    \ / 10)\n        end\n        if sum_a < sum_b then\n            return true\n\
    \        elseif sum_a > sum_b then\n            return false\n        else\n \
    \           return table.indexof(nums, a) < table.indexof(nums, b)\n        end\n\
    \    end\n    table.sort(nums, sort_by_points)\n    return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl5e0iqy9.lua:27:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmpl5e0iqy9.lua:27:\
    \ in function </tmp/tmpl5e0iqy9.lua:9>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpl5e0iqy9.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpl5e0iqy9.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local sums = {}\n    for i, n in ipairs(nums) do\n        sums[i] = {\n \
    \           index = i,\n            sum = sum_of_digits(n)\n        }\n    end\n\
    \    table.sort(sums, function(a, b)\n        if a.sum < b.sum then\n        \
    \    return true\n        elseif a.sum > b.sum then\n            return false\n\
    \        else\n            return a.index < b.index\n        end\n    end)\n \
    \   local ordered = {}\n    for _, pair in ipairs(sums) do\n        table.insert(ordered,\
    \ nums[pair.index])\n    end\n    return ordered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_k5psfim.lua:13:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmp_k5psfim.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp_k5psfim.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    if not nums or #nums == 0 then\n        return nums\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk2e2pa7k.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local sums = {}\n  for i, num in ipairs(nums) do\n    local sum = 0\n    for\
    \ _, c in ipairs(tostring(num):chars()) do\n      sum = sum + tonumber(c)\n  \
    \  end\n    sums[i] = sum\n  end\n  return nums:sort_by(function(a, b)\n    return\
    \ sums[a] < sums[b]\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8yajnoqj.lua:12:\
    \ attempt to call a nil value (method 'chars')\nstack traceback:\n\t/tmp/tmp8yajnoqj.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp8yajnoqj.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8rb5zvli.lua:14:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp8rb5zvli.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- iterate each number\n    -- calculate the sum of their digits\n    --\
    \ save them as (number, sum of digits) pairs in a table\n    -- sort the table\
    \ by sum of digits\n    -- return a new list of the sorted numbers\n    local\
    \ points = {}\n    for i, num in ipairs(nums) do\n        local sum = 0\n    \
    \    for digit in tostring(num):gmatch(\"%d\") do\n            sum = sum + tonumber(digit)\n\
    \        end\n        table.insert(points, {num, sum})\n    end\n    table.sort(points,\
    \ function(p1, p2)\n        if p1[2] == p2[2] then\n            return p1[1] <\
    \ p2[1]\n        else\n            return p1[2] < p2[2]\n        end\n    end)\n\
    \    local result = {}\n    for _, pair in ipairs(points) do\n        table.insert(result,\
    \ pair[1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllm2hyp1.lua:39:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, 1, -11, 11, -12}\nstack traceback:\n\
    \t/tmp/tmpllm2hyp1.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local counter = 1\n    while counter < #nums do\n        if sum(math.abs(nums[counter]))\
    \ < sum(math.abs(nums[counter + 1])) then\n            nums[counter], nums[counter\
    \ + 1] = nums[counter + 1], nums[counter]\n            counter = 1\n        elseif\
    \ sum(math.abs(nums[counter])) == sum(math.abs(nums[counter + 1])) then\n    \
    \        if nums[counter] > nums[counter + 1] then\n                nums[counter],\
    \ nums[counter + 1] = nums[counter + 1], nums[counter]\n                counter\
    \ = 1\n            else\n                counter = counter + 1\n            end\n\
    \        else\n            counter = counter + 1\n        end\n    end\n    return\
    \ nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpowu4jc4i.lua:11:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpowu4jc4i.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpowu4jc4i.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function sum_digits(num)\n        local sum = 0\n        local num\
    \ = math.abs(num)\n        while num > 0 do\n            sum = sum + num % 10\n\
    \            num = math.floor(num / 10)\n        end\n        return sum\n   \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj6k_ce7j.lua:30: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdg850oo.lua:14:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpgdg850oo.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local sums = {}\n    for i, num in ipairs(nums) do\n        sums[i] = sum_of_digits(num)\n\
    \    end\n    for i = 1, #nums - 1 do\n        for j = i + 1, #nums do\n     \
    \       if sums[i] == sums[j] then\n                if nums[i] > nums[j] then\n\
    \                    sums[i], sums[j] = sums[j], sums[i]\n                   \
    \ nums[i], nums[j] = nums[j], nums[i]\n                end\n            elseif\
    \ sums[i] > sums[j] then\n                sums[i], sums[j] = sums[j], sums[i]\n\
    \                nums[i], nums[j] = nums[j], nums[i]\n            end\n      \
    \  end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5yuqh0wo.lua:11:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmp5yuqh0wo.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5yuqh0wo.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0f5bdamg.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp0f5bdamg.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    table.sort(nums, function(a, b)\n        local a_digits = string.gmatch(math.abs(a),\
    \ \"(%d)\")\n        local b_digits = string.gmatch(math.abs(b), \"(%d)\")\n \
    \       local a_sum = 0\n        local b_sum = 0\n        for d in a_digits do\n\
    \            a_sum = a_sum + d\n        end\n        for d in b_digits do\n  \
    \          b_sum = b_sum + d\n        end\n        if a_sum ~= b_sum then\n  \
    \          return a_sum < b_sum\n        else\n            return a < b\n    \
    \    end\n    end)\n    return nums\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvllrz7rr.lua:32:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, 1, -11, 11, -12}\nstack traceback:\n\
    \t/tmp/tmpvllrz7rr.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return order_by_points(nums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmesr7_xo.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpmesr7_xo.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function sum(n)\n        n = math.abs(n)\n        local total = 0\n\
    \        while n > 0 do\n            total = total + n % 10\n            n = math.floor(n\
    \ / 10)\n        end\n        return total\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpztx4rqjt.lua:30: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    if #nums == 0 then\n        return nums\n    end\n    local a = {}\n    for\
    \ i = 1, #nums do\n        local c = 0\n        for j = 1, #tostring(nums[i])\
    \ do\n            c = c + tonumber(tostring(nums[i]):sub(j, j))\n        end\n\
    \        a[i] = {num = nums[i], digit_sum = c}\n    end\n    table.sort(a, function(a,\
    \ b) return a.digit_sum < b.digit_sum end)\n    local res = {}\n    for i = 1,\
    \ #a do\n        res[i] = a[i].num\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf33lcebm.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpf33lcebm.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpf33lcebm.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local dict = {}\n  for index, value in ipairs(nums) do\n    local sum = 0\n\
    \    for i = 1, #tostring(value) do\n      sum = sum + tonumber(tostring(value):sub(i,\
    \ i))\n    end\n    if dict[sum] == nil then\n      dict[sum] = {}\n    end\n\
    \    table.insert(dict[sum], index)\n  end\n  local temp = {}\n  for key, value\
    \ in pairs(dict) do\n    table.insert(temp, {key, value})\n  end\n  table.sort(temp,\
    \ function(a, b) return a[1] < b[1] end)\n  local result = {}\n  for _, value\
    \ in ipairs(temp) do\n    for _, index in ipairs(value[2]) do\n      table.insert(result,\
    \ nums[index])\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_h8xhuuf.lua:13:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp_h8xhuuf.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp_h8xhuuf.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function get_points(n)\n        local s = 0\n        while n > 0 do\n\
    \            s = s + n % 10\n            n = math.floor(n / 10)\n        end\n\
    \        return s\n    end\n    local function cmp(a, b)\n        local ap = get_points(a)\n\
    \        local bp = get_points(b)\n        if ap == bp then\n            return\
    \ a < b\n        else\n            return ap < bp\n        end\n    end\n    table.sort(nums,\
    \ cmp)\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4z7828_4.lua:33:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmp4z7828_4.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5o5xkpvp.lua:14:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp5o5xkpvp.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local points = {}\n    for i, num in ipairs(nums) do\n        local point\
    \ = 0\n        while num ~= 0 do\n            point = point + num % 10\n     \
    \       num = math.floor(num / 10)\n        end\n        table.insert(points,\
    \ {index = i, point = point})\n    end\n    table.sort(points, function(a, b)\n\
    \        if a.point ~= b.point then\n            return a.point < b.point\n  \
    \      else\n            return a.index < b.index\n        end\n    end)\n   \
    \ local result = {}\n    for _, v in ipairs(points) do\n        table.insert(result,\
    \ nums[v.index])\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8nka4sh8.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmp8nka4sh8.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local fun = function(a, b)\n        if a % 10 == b % 10 then\n          \
    \  return a < b\n        else\n            return a % 10 < b % 10\n        end\n\
    \    end\n    local temp = {}\n    for i = 1, #nums do\n        table.insert(temp,\
    \ nums[i])\n    end\n    table.sort(temp, fun)\n    return temp\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqhlpgw8.lua:27:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -12, -11, -1}\nstack traceback:\n\
    \t/tmp/tmpiqhlpgw8.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function sum_of_digits(num)\n        local res = 0\n        while num\
    \ > 0 do\n            res = res + num % 10\n            num = math.floor(num /\
    \ 10)\n        end\n        return res\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8orn4dp9.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    function get_key(n)\n        local s = tostring(n)\n        local key = 0\n\
    \        for i = 1, string.len(s) do\n            key = key + string.byte(s, i)\
    \ - string.byte('0')\n        end\n        return key\n    end\n    local arr\
    \ = {}\n    for i, n in ipairs(nums) do\n        local key = get_key(n)\n    \
    \    if arr[key] == nil then\n            arr[key] = {}\n        end\n       \
    \ table.insert(arr[key], i)\n    end\n    local keys = {}\n    for k, _ in pairs(arr)\
    \ do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local\
    \ res = {}\n    for _, k in ipairs(keys) do\n        for _, i in ipairs(arr[k])\
    \ do\n            table.insert(res, nums[i])\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6y03vwnr.lua:42:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\
    \t/tmp/tmp6y03vwnr.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local t = {}\n    for k,v in pairs(nums) do\n        local s = 0\n      \
    \  for d in tostring(v):gmatch(\"%d\") do\n            s = s + tonumber(d)\n \
    \       end\n        table.insert(t, {index = k, sum = s, value = v})\n    end\n\
    \    table.sort(t, function(a, b)\n        if a.sum == b.sum then\n          \
    \  return a.index < b.index\n        else\n            return a.sum < b.sum\n\
    \        end\n    end)\n    local res = {}\n    for _, item in ipairs(t) do\n\
    \        table.insert(res, item.value)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4ywc49p.lua:34:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, -1, 11, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpq4ywc49p.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8s9_u_ce.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp8s9_u_ce.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function aux(a, b)\n        local a_digit_sum = 0\n        local b_digit_sum\
    \ = 0\n        while a > 0 do\n            a_digit_sum = a_digit_sum + a % 10\n\
    \            a = a // 10\n        end\n        while b > 0 do\n            b_digit_sum\
    \ = b_digit_sum + b % 10\n            b = b // 10\n        end\n        if a_digit_sum\
    \ == b_digit_sum then\n            return a < b\n        else\n            return\
    \ a_digit_sum < b_digit_sum\n        end\n    end\n    table.sort(nums, aux)\n\
    \    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wlot0m_.lua:33:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmp_wlot0m_.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local sums = {}\n    for i, v in ipairs(nums) do\n        sums[i] = v\n \
    \   end\n    local function sum_digits(num)\n        local sum = 0\n        for\
    \ i = 1, #num do\n            sum = sum + tonumber(num:sub(i, i))\n        end\n\
    \        return sum\n    end\n    table.sort(sums, function(a, b)\n        local\
    \ sa = sum_digits(tostring(a))\n        local sb = sum_digits(tostring(b))\n \
    \       if sa ~= sb then\n            return sa < sb\n        else\n         \
    \   return a < b\n        end\n    end)\n    return sums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppsmoeez2.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmppsmoeez2.lua:16:\
    \ in upvalue 'sum_digits'\n\t/tmp/tmppsmoeez2.lua:21: in function </tmp/tmppsmoeez2.lua:20>\n\
    \t[C]: in function 'table.sort'\n\t/tmp/tmppsmoeez2.lua:20: in local 'candidate'\n\
    \t/tmp/tmppsmoeez2.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local nums_sum = {}\n    for i, num in ipairs(nums) do\n        local num_list\
    \ = {}\n        local num_sum = 0\n        while num ~= 0 do\n            local\
    \ n = num % 10\n            num_sum = num_sum + n\n            num = math.floor(num\
    \ / 10)\n            table.insert(num_list, n)\n        end\n        table.insert(nums_sum,\
    \ {index = i, num = num_list, sum = num_sum})\n    end\n    table.sort(nums_sum,\
    \ function(a, b)\n        if a.sum ~= b.sum then\n            return a.sum < b.sum\n\
    \        else\n            return a.index < b.index\n        end\n    end)\n \
    \   local nums_sorted = {}\n    for _, v in ipairs(nums_sum) do\n        local\
    \ num = 0\n        for _, n in ipairs(v.num) do\n            num = num * 10 +\
    \ n\n        end\n        table.insert(nums_sorted, num)\n    end\n    return\
    \ nums_sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3nbhuo_.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmpz3nbhuo_.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function sum_of_digits(n)\n        local total = 0\n        while n\
    \ > 0 do\n            total = total + n % 10\n            n = math.floor(n / 10)\n\
    \        end\n        return total\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvssl3mra.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local sums = {}\n    for i,v in ipairs(nums) do\n        sums[v] = sum_digits(v)\n\
    \    end\n    local result = {}\n    for k,v in ipairs(nums) do\n        result[k]\
    \ = v\n    end\n    table.sort(result, function(a,b)\n        if sums[a] ~= sums[b]\
    \ then\n            return sums[a] < sums[b]\n        else\n            return\
    \ nums[a] < nums[b]\n        end\n    end)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo27ia1xz.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpo27ia1xz.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpo27ia1xz.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \tlocal function get_sum(num)\n\t\tlocal sum = 0\n\t\tfor i = 1, #tostring(num)\
    \ do\n\t\t\tsum = sum + tonumber(tostring(num):sub(i, i))\n\t\tend\n\t\treturn\
    \ sum\n\tend\n\tlocal function get_index(num)\n\t\tfor i = 1, #nums do\n\t\t\t\
    if nums[i] == num then\n\t\t\t\treturn i\n\t\t\tend\n\t\tend\n\tend\n\tlocal sorted\
    \ = {}\n\tlocal function help(nums)\n\t\tif #nums == 0 then\n\t\t\treturn\n\t\t\
    end\n\t\tlocal min = math.huge\n\t\tlocal min_sum = math.huge\n\t\tlocal index\n\
    \t\tfor i = 1, #nums do\n\t\t\tlocal sum = get_sum(nums[i])\n\t\t\tif sum <= min_sum\
    \ then\n\t\t\t\tmin_sum = sum\n\t\t\t\tmin = nums[i]\n\t\t\t\tindex = i\n\t\t\t\
    end\n\t\tend\n\t\ttable.insert(sorted, min)\n\t\ttable.remove(nums, index)\n\t\
    \thelp(nums)\n\tend\n\thelp(nums)\n\treturn sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_v1svscp.lua:12:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp_v1svscp.lua:12:\
    \ in upvalue 'get_sum'\n\t/tmp/tmp_v1svscp.lua:32: in local 'help'\n\t/tmp/tmp_v1svscp.lua:43:\
    \ in local 'candidate'\n\t/tmp/tmp_v1svscp.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function sum_digits(n)\n        local sum = 0\n        while n > 0\
    \ do\n            sum = sum + (n % 10)\n            n = math.floor(n / 10)\n \
    \       end\n        return sum\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpglxy8pv2.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk3l86wa5.lua:14:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpk3l86wa5.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local sum = {}\n    for i, v in ipairs(nums) do\n        sum[i] = 0\n   \
    \     for n in string.gmatch(tostring(v), '%d') do\n            sum[i] = sum[i]\
    \ + tonumber(n)\n        end\n    end\n    local t = {}\n    for i = 1, #nums\
    \ do\n        t[i] = i\n    end\n    table.sort(t, function(a, b)\n        if\
    \ sum[a] == sum[b] then\n            return a < b\n        else\n            return\
    \ sum[a] < sum[b]\n        end\n    end)\n    local r = {}\n    for i, v in ipairs(t)\
    \ do\n        r[i] = nums[v]\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporfw95l1.lua:37:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, -1, 11, -11, -12}\nstack traceback:\n\
    \t/tmp/tmporfw95l1.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local f = function(a, b)\n    local a_sum = sum_of_digits(a)\n    local b_sum\
    \ = sum_of_digits(b)\n    return a_sum < b_sum or (a_sum == b_sum and nums:index(a)\
    \ < nums:index(b))\n  end\n  return nums:sort(f)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpom8wo19a.lua:14:\
    \ attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmpom8wo19a.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpom8wo19a.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local order = {}\n    for i = 1, #nums do\n        local digits = nums[i]\n\
    \        local sum = 0\n        while digits > 0 do\n            sum = sum + digits\
    \ % 10\n            digits = math.floor(digits / 10)\n        end\n        table.insert(order,\
    \ {i, sum})\n    end\n    table.sort(order, function(a, b)\n        if a[2] ==\
    \ b[2] then\n            return a[1] < b[1]\n        else\n            return\
    \ a[2] < b[2]\n        end\n    end)\n    local result = {}\n    for i = 1, #order\
    \ do\n        table.insert(result, nums[order[i][1]])\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1oyvzkt.lua:36:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpt1oyvzkt.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local sum_digits = function(n)\n    return n % 10 + math.floor(n / 10)\n  end\n\
    \  table.sort(nums, function(x, y)\n    return sum_digits(x) < sum_digits(y)\n\
    \  end)\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpes_at5e4.lua:21:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -12, -11, -1}\nstack traceback:\n\
    \t/tmp/tmpes_at5e4.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local indices = {}\n    for i, num in ipairs(nums) do\n        indices[i]\
    \ = {sum_digits(num), num}\n    end\n    table.sort(indices, function(a, b) return\
    \ a[1] < b[1] end)\n    for i, v in ipairs(indices) do\n        indices[i] = v[2]\n\
    \    end\n    return indices\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8kgs2r1y.lua:11:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmp8kgs2r1y.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp8kgs2r1y.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    -- TODO: Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplw7ifc62.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmplw7ifc62.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local sums = {}\n    for i, n in ipairs(nums) do\n        local sum = 0\n\
    \        for _, d in ipairs(tostring(n)) do\n            sum = sum + tonumber(d)\n\
    \        end\n        sums[i] = sum\n    end\n    table.sort(sums)\n    local\
    \ sorted = {}\n    for _, sum in ipairs(sums) do\n        for i, n in ipairs(nums)\
    \ do\n            local s = 0\n            for _, d in ipairs(tostring(n)) do\n\
    \                s = s + tonumber(d)\n            end\n            if s == sum\
    \ then\n                table.insert(sorted, n)\n                table.remove(nums,\
    \ i)\n                break\n            end\n        end\n    end\n    return\
    \ sorted\nend\nassert(order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12,\
    \ 11})\nassert(order_by_points({}) == {})\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn_7jq4ny.lua:34: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpn_7jq4ny.lua:34: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local points = {}\n    for i, n in ipairs(nums) do\n        points[i] = n\
    \ % 10 + n // 10\n    end\n    local function comp(x, y)\n        return points[x]\
    \ < points[y]\n    end\n    local keys = {}\n    for i, _ in ipairs(nums) do\n\
    \        keys[i] = i\n    end\n    table.sort(keys, comp)\n    local res = {}\n\
    \    for i, k in ipairs(keys) do\n        res[i] = nums[k]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3e5ua43b.lua:31:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -12, -11, -1}\nstack traceback:\n\
    \t/tmp/tmp3e5ua43b.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local digits_table = {}\n    local result = {}\n    for i, num in ipairs(nums)\
    \ do\n        digits_table[i] = num\n        local pos = 1\n        local sum\
    \ = 0\n        while num > 0 do\n            sum = sum + num % 10\n          \
    \  num = math.floor(num / 10)\n        end\n        digits_table[i] = {sum, pos}\n\
    \        pos = pos + 1\n    end\n    table.sort(digits_table, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] < b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    for i, v in ipairs(digits_table)\
    \ do\n        result[i] = nums[v[2]]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp31o3mg9l.lua:38:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 1, 1, 1, 1}\nstack traceback:\n\
    \t/tmp/tmp31o3mg9l.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local numbers = {}\n    for i, n in ipairs(nums) do\n        numbers[i] =\
    \ {\n            num = n,\n            sum = sum_of_digits(n)\n        }\n   \
    \ end\n    table.sort(numbers, function(a, b)\n        if a.sum == b.sum then\n\
    \            return a.num < b.num\n        else\n            return a.sum < b.sum\n\
    \        end\n    end)\n    local ret = {}\n    for i, n in ipairs(numbers) do\n\
    \        ret[i] = n.num\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvytau4cr.lua:13:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpvytau4cr.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpvytau4cr.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local copy = {}\n    for i, v in ipairs(nums) do\n        copy[i] = {v, v\
    \ % 10 + math.floor(v / 10) % 10 + math.floor(v / 100)}\n    end\n    table.sort(copy,\
    \ function(a, b) return a[2] < b[2] end)\n    local ans = {}\n    for i, v in\
    \ ipairs(copy) do\n        ans[i] = v[1]\n    end\n    return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzw2vdcwt.lua:24:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -12, -11, -1}\nstack traceback:\n\
    \t/tmp/tmpzw2vdcwt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local function get_sum(num)\n    local sum = 0\n    while num > 0 do\n    \
    \  sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    return\
    \ sum\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplb05p_s1.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    if #nums == 0 then\n        return nums\n    end\n    return table.sort(nums,\
    \ function(a, b)\n        local da = digits_sum(a)\n        local db = digits_sum(b)\n\
    \        if da ~= db then\n            return da < db\n        end\n        return\
    \ a < b\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv4eq3xlu.lua:13:\
    \ attempt to call a nil value (global 'digits_sum')\nstack traceback:\n\t/tmp/tmpv4eq3xlu.lua:13:\
    \ in function </tmp/tmpv4eq3xlu.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpv4eq3xlu.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpv4eq3xlu.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local order = {}\n    for i,v in ipairs(nums) do\n        local s = 0\n \
    \       while v > 0 do\n            s = s + v % 10\n            v = math.floor(v\
    \ / 10)\n        end\n        order[i] = {sum = s, i = i}\n    end\n    table.sort(order,\
    \ function(a, b)\n        if a.sum == b.sum then\n            return a.i < b.i\n\
    \        else\n            return a.sum < b.sum\n        end\n    end)\n    local\
    \ result = {}\n    for i,v in ipairs(order) do\n        result[i] = nums[v.i]\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrj83_3_.lua:35:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpjrj83_3_.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local all_sums = {}\n    for i,v in ipairs(nums) do\n        local sum =\
    \ 0\n        while v > 0 do\n            sum = sum + v % 10\n            v = math.floor(v\
    \ / 10)\n        end\n        all_sums[i] = sum\n    end\n    for i = 1, #nums\
    \ - 1 do\n        for j = i + 1, #nums do\n            if all_sums[i] > all_sums[j]\
    \ or (all_sums[i] == all_sums[j] and i > j) then\n                all_sums[i],\
    \ all_sums[j] = all_sums[j], all_sums[i]\n                nums[i], nums[j] = nums[j],\
    \ nums[i]\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86eiwir7.lua:32:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\
    \t/tmp/tmp86eiwir7.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local temp_nums = {}\n  for i = 1, #nums do\n    local sum = 0\n    local num\
    \ = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = num\
    \ // 10\n    end\n    temp_nums[#temp_nums + 1] = {sum, i}\n  end\n  table.sort(temp_nums,\
    \ function(i, j)\n    if i[1] ~= j[1] then\n      return i[1] < j[1]\n    else\n\
    \      return i[2] < j[2]\n    end\n  end)\n  local new_nums = {}\n  for i = 1,\
    \ #temp_nums do\n    new_nums[#new_nums + 1] = nums[temp_nums[i][2]]\n  end\n\
    \  return new_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2se7h6e_.lua:36:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\
    \t/tmp/tmp2se7h6e_.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  -- write the code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39l5yge0.lua:15:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp39l5yge0.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktl3vfjl.lua:14:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpktl3vfjl.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local function sum_digits(x)\n        local s = 0\n        while x > 0 do\n\
    \            s = s + (x % 10)\n            x = math.floor(x / 10)\n        end\n\
    \        return s\n    end\n    local function sum_digits_compare(x, y)\n    \
    \    local sum_x = sum_digits(x)\n        local sum_y = sum_digits(y)\n      \
    \  if sum_x == sum_y then\n            return nums.index_of(x) < nums.index_of(y)\n\
    \        else\n            return sum_x < sum_y\n        end\n    end\n    return\
    \ nums.sorted(sum_digits_compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1f2wv7tc.lua:26:\
    \ attempt to call a nil value (field 'sorted')\nstack traceback:\n\t/tmp/tmp1f2wv7tc.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmp1f2wv7tc.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \    local sort_func = function(a, b)\n        local points_a = 0\n        local\
    \ points_b = 0\n        local a_str = tostring(a)\n        local b_str = tostring(b)\n\
    \        for i = 1, #a_str do\n            points_a = points_a + tonumber(a_str:sub(i,\
    \ i))\n        end\n        for i = 1, #b_str do\n            points_b = points_b\
    \ + tonumber(b_str:sub(i, i))\n        end\n        if points_a == points_b then\n\
    \            return a < b\n        end\n        return points_a < points_b\n \
    \   end\n    table.sort(nums, sort_func)\n    return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsf1bx4bh.lua:15:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpsf1bx4bh.lua:15:\
    \ in function </tmp/tmpsf1bx4bh.lua:9>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpsf1bx4bh.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpsf1bx4bh.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n\
    \  local counter = {}\n  for i, v in ipairs(nums) do\n    local sum = 0\n    for\
    \ j = 1, string.len(tostring(v)) do\n      sum = sum + tonumber(string.sub(tostring(v),\
    \ j, j))\n    end\n    if counter[sum] == nil then\n      counter[sum] = {}\n\
    \    end\n    table.insert(counter[sum], v)\n  end\n  return counters_to_list(counter)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb2xna9wk.lua:13:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpb2xna9wk.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpb2xna9wk.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
