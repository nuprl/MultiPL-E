name: HumanEval_15_string_sequence
language: lua
results:
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i+1] = tostring(i)\n  end\n  return table.concat(s, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local result = { }\n  for\
    \ i = 0, n do\n    result[i + 1] = tostring(i)\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n == 0 then\n    return\
    \ '0'\n  else\n    return string_sequence(n-1) .. ' ' .. tostring(n)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. tostring(i) .. ' '\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3a6j3l5.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpf3a6j3l5.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return '0'\n    else\n        return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = i\n  end\n  return concat(t, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaahsxpqe.lua:11:\
    \ attempt to call a nil value (global 'concat')\nstack traceback:\n\t/tmp/tmpaahsxpqe.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpaahsxpqe.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal seq = { 0 }\n\tfor\
    \ i = 1, n do\n\t\tseq[i + 1] = i\n\tend\n\treturn table.concat(seq, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. (i > 0 and ' ' or '') .. i\n  end\n  return s\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor i =\
    \ 0, n do t[#t+1] = tostring(i) end\n\treturn table.concat(t, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n == 0 then\n    return\
    \ '0'\n  else\n    return (string_sequence(n-1) .. ' ' .. tostring(n))\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local r = {}\n    for\
    \ i = 0, n do\n        r[#r + 1] = i\n    end\n    return table.concat(r, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n < 0 then return ''\
    \ end\n  local res = {}\n  for i = 0, n do res[#res+1] = tostring(i) end\n  return\
    \ table.concat(res, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return '0'\n    else\n        return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n == 0 then\n    return\
    \ \"0\"\n  else\n    return table.concat(map(tostring, range(n+1)), \" \")\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfm2sleg9.lua:10:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpfm2sleg9.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpfm2sleg9.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = \"\"\n  for i\
    \ = 0, n do\n    s = s .. i .. \" \"\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnyaeb47.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmplnyaeb47.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local str = ' '\n  if n\
    \ == 0 then\n    return '0'\n  end\n  local i = 0\n  while i <= n do\n    str\
    \ = str .. tostring(i) .. ' '\n    i = i + 1\n  end\n  return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfdymivul.lua:23:\
    \ expected: \"0 1 2 3\"\nactual: \" 0 1 2 3 \"\nstack traceback:\n\t/tmp/tmpfdymivul.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return '0'\n    else\n        return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local ret = {}\n  for i\
    \ = 0, n do\n    ret[i + 1] = i\n  end\n  return table.concat(ret, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local str = tostring(n)\n\
    \    for i = n - 1, 0, -1 do\n        str = tostring(i) .. ' ' .. str\n    end\n\
    \    return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local i = 0\n  local t\
    \ = {}\n  while i <= n do\n    t[#t+1] = i\n    i = i + 1\n  end\n  return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n > 0 then\n     \
    \   return string_sequence(n-1) .. ' ' .. tostring(n)\n    else\n        return\
    \ '0'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local table_result = {}\n\
    \  for i = 0, n do\n    table.insert(table_result, i)\n  end\n  return table.concat(table_result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5oqe_6vu.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp5oqe_6vu.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local out = {}\n    for\
    \ i = 0, n do\n        out[#out + 1] = tostring(i)\n    end\n    return table.concat(out,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return string.format((\"\
    %s%s\"):rep(n + 1), table.concat(range(n + 1), \" \"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkry1h8mv.lua:7:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpkry1h8mv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpkry1h8mv.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return table.concat({ '0'\
    \ , string_range(1, n) }, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm242y_v8.lua:7:\
    \ attempt to call a nil value (global 'string_range')\nstack traceback:\n\t/tmp/tmpm242y_v8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpm242y_v8.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0o60jsbq.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp0o60jsbq.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local numbers = {}\n  for\
    \ i = 0, n do\n    numbers[i + 1] = tostring(i)\n  end\n  return table.concat(numbers,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local sequence = { }\n\
    \    for i = 0, n do\n        table.insert(sequence, tostring(i))\n    end\n \
    \   return table.concat(sequence, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tif n == 0 then\n\t\treturn\
    \ '0'\n\telse\n\t\treturn string_sequence(n-1) .. ' ' .. tostring(n)\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local res = {}\n  for i\
    \ = 0, n do\n    res[i + 1] = tostring(i)\n  end\n  return concat(res, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe85fqyh8.lua:11:\
    \ attempt to call a nil value (global 'concat')\nstack traceback:\n\t/tmp/tmpe85fqyh8.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpe85fqyh8.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return concat((function()\n\
    \                   local _accum_0 = { }\n                   local _len_0 = 1\n\
    \                   for i = 0, n do\n                     _accum_0[_len_0] = tostring(i)\n\
    \                     _len_0 = _len_0 + 1\n                   end\n          \
    \         return _accum_0\n                 end)(), \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzio0jkor.lua:7:\
    \ attempt to call a nil value (global 'concat')\nstack traceback:\n\t/tmp/tmpzio0jkor.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpzio0jkor.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\treturn table.concat(table.map_to_array(function\
    \ (x) return tostring(x) end, sequence(n)), ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt15rzzh3.lua:7:\
    \ attempt to call a nil value (global 'sequence')\nstack traceback:\n\t/tmp/tmpt15rzzh3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpt15rzzh3.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. i .. ' '\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpebx_ym.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpdpebx_ym.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i+1] = i\n  end\n  return table.concat(s, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return '0'\n    else\n        return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local result = {}\n  for\
    \ i = 0, n do\n    result[i + 1] = tostring(i)\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return table.concat({table.unpack(sequence(n))},\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa3dgwsfo.lua:7:\
    \ attempt to call a nil value (global 'sequence')\nstack traceback:\n\t/tmp/tmpa3dgwsfo.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpa3dgwsfo.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local out = {}\n  for i\
    \ = 0, n do\n    out[#out + 1] = i\n  end\n  return table.concat(out, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat(array_sequence(n),\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppy357r7u.lua:7:\
    \ attempt to call a nil value (global 'array_sequence')\nstack traceback:\n\t\
    /tmp/tmppy357r7u.lua:7: in local 'candidate'\n\t/tmp/tmppy357r7u.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local buffer = {}\n \
    \   for i = 0, n do\n        buffer[#buffer + 1] = tostring(i)\n    end\n    return\
    \ table.concat(buffer, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return table.concat(seq(n),\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5u351_8f.lua:7:\
    \ attempt to call a nil value (global 'seq')\nstack traceback:\n\t/tmp/tmp5u351_8f.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5u351_8f.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal str = ''\n\tfor i\
    \ = 0, n do\n\t\tstr = str .. tostring(i) .. ' '\n\tend\n\treturn str\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qqfphh6.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp_qqfphh6.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local str = \"\"\n  \
    \  for i = 0, n do\n        str = str .. i .. \" \"\n    end\n    return str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewarr296.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpewarr296.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local tbl = {};\n   \
    \ for i = 0, n do\n        tbl[#tbl + 1] = tostring(i);\n    end\n    return table.concat(tbl,\
    \ ' ');\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat(slices(n+1,\
    \ 1, join, {}), ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc0nioblp.lua:7:\
    \ attempt to call a nil value (global 'slices')\nstack traceback:\n\t/tmp/tmpc0nioblp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpc0nioblp.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n == 0 then\n    return\
    \ '0'\n  else\n    return string_sequence(n-1) .. ' ' .. tostring(n)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = \"\"\n    for\
    \ i = 0, n do\n        s = s .. \" \" .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp83qiw5xm.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp83qiw5xm.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n <= 0 then\n    return\
    \ \"0\"\n  else\n    return string_sequence(n-1) .. \" \" .. tostring(n)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local seq = {}\n    for\
    \ i = 0, n do\n        seq[i + 1] = i\n    end\n    return table.concat(seq, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal result = ''\n\tfor\
    \ i = 0, n do\n\t\tresult = result .. tostring(i) .. ' '\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz6fe2qn.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmptz6fe2qn.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local res = ''\n    for\
    \ i = 0, n do\n        res = res .. i .. ' '\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpezbf7cfd.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpezbf7cfd.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local seq = \"\"\n  \
    \  for i = 0, n do\n        seq = seq .. tostring(i) .. \" \"\n    end\n    return\
    \ seq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8rykiqh7.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp8rykiqh7.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local buffer = { }\n\
    \    for i = 0, n do\n        buffer[#buffer + 1] = tostring(i)\n    end\n   \
    \ return table.concat(buffer, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local i = 0\n  local a\
    \ = {}\n  while i <= n do\n    a[#a+1] = i\n    i = i + 1\n  end\n  return table.concat(a,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local buf = {}\n    for\
    \ i = 0, n do\n        buf[#buf + 1] = tostring(i)\n    end\n    return table.concat(buf,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal result = {}\n\tfor\
    \ i = 0, n do\n\t\tresult[i + 1] = tostring(i)\n\tend\n\treturn table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local output = {}\n  for\
    \ i = 0, n do\n    output[#output + 1] = tostring(i)\n  end\n  return table.concat(output,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. tostring(i) .. ' '\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsswb7uc8.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpsswb7uc8.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local r = {}\n    for\
    \ i = 0, n do\n        r[#r + 1] = tostring(i)\n    end\n    return table.concat(r,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat(sequence(n),\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps4dxz5td.lua:7:\
    \ attempt to call a nil value (global 'sequence')\nstack traceback:\n\t/tmp/tmps4dxz5td.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmps4dxz5td.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local r = {}\n    for\
    \ i = 0, n do\n        r[#r + 1] = tostring(i)\n    end\n    return table.concat(r,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local str = \"\"\n  \
    \  for i = 0, n do\n        str = str .. \" \" .. i\n    end\n    return str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcts9fp06.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpcts9fp06.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat(sequences.number(n),\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq6lwstpi.lua:7:\
    \ attempt to index a nil value (global 'sequences')\nstack traceback:\n\t/tmp/tmpq6lwstpi.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpq6lwstpi.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return '0'\n    else\n        return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n <= 0 then\n    \
    \    return tostring(0)\n    else\n        return string_sequence(n-1) .. ' '\
    \ .. tostring(n)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat(table.mapi(function(i)\
    \ return tostring(i) end, table.new(n+1, 0)), ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp26xovtu9.lua:7:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmp26xovtu9.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp26xovtu9.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal ret = ''\n\tfor i\
    \ = 0, n do\n\t\tret = ret .. ' ' .. i\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o2_y6hw.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp3o2_y6hw.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local x = {}\n    for\
    \ i = 0, n do\n        x[i + 1] = tostring(i)\n    end\n    return table.concat(x,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local table = { }\n \
    \   for i = 0, n do\n        table[i] = tostring(i)\n    end\n    return table.concat(table,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiro7gh9m.lua:11:\
    \ attempt to call a nil value (field 'concat')\nstack traceback:\n\t/tmp/tmpiro7gh9m.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpiro7gh9m.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do t[#t+1] = tostring(i) end\n    return table.concat(t, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = \"\"\n  for i\
    \ = 0, n do\n    s = string.format(\"%s %i\", s, i)\n  end\n  return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirx1ryzf.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpirx1ryzf.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\treturn table.concat({string.range(0,\
    \ n)}, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ftf797h.lua:7:\
    \ attempt to call a nil value (field 'range')\nstack traceback:\n\t/tmp/tmp0ftf797h.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp0ftf797h.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    assert(type(n) == 'number')\n\
    \    assert(n >= 0)\n    local t = {}\n    for i = 0, n do\n        t[#t + 1]\
    \ = tostring(i)\n    end\n    return table.concat(t, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = \"\"\n  for i\
    \ = 0, n do\n    s = s .. i .. \" \"\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2nfk4n9.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpc2nfk4n9.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local res = { }\n   \
    \ for i = 0, n do\n        res[#res + 1] = tostring(i)\n    end\n    return table.concat(res,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal result = \"\"\n\t\
    local first = true\n\tfor i = 0, n do\n\t\tif first then\n\t\t\tfirst = false\n\
    \t\telse\n\t\t\tresult = result .. \" \"\n\t\tend\n\t\tresult = result .. tostring(i)\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n == 0 then\n    return\
    \ \"0\"\n  else\n    return string_sequence(n-1) .. \" \" .. tostring(n)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal ret = ''\n\tfor i\
    \ = 0, n do\n\t\tret = ret .. i .. ' '\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64pni6j8.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp64pni6j8.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local seq = ''\n    for\
    \ i = 0, n do\n        seq = seq .. ' ' .. i\n    end\n    return seq\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2wcp2oj1.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp2wcp2oj1.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return \"0\"\n    else\n        return string_sequence(n-1) .. \" \" .. tostring(n)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local result = {}\n  for\
    \ i = 0, n do\n    result[i+1] = tostring(i)\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return string.rep(\"\
    \ \" .. n, n) .. \" \" .. n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgf66wju.lua:13:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpsgf66wju.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return string.sub(s, 2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i + 1] = i\n  end\n  return table.concat(s, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n == 0 then\n    return\
    \ \"0\"\n  else\n    return string_sequence(n-1) .. \" \" .. tostring(n)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return \"0\"\n    else\n        return table.concat(table.range(0, n), \"\
    \ \")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvo5prm8i.lua:10:\
    \ attempt to call a nil value (field 'range')\nstack traceback:\n\t/tmp/tmpvo5prm8i.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpvo5prm8i.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n == 0 then\n    return\
    \ '0'\n  else\n    return string_sequence(n-1) .. ' ' .. tostring(n)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal result = { }\n\t\
    for i = 0, n do\n\t\tresult[#result + 1] = tostring(i)\n\tend\n\treturn table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return '0'\n    else\n        return table.concat(sequence(n), ' ')\n   \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8dpw_mlz.lua:10:\
    \ attempt to call a nil value (global 'sequence')\nstack traceback:\n\t/tmp/tmp8dpw_mlz.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp8dpw_mlz.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = i\n  end\n  return table.concat(t, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local r = {}\n    for\
    \ i = 0, n do\n        r[#r + 1] = tostring(i)\n    end\n    return table.concat(r,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n == 0 then\n    return\
    \ '0'\n  else\n    return string_sequence(n-1) .. ' ' .. tostring(n)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i + 1] = i\n  end\n  return table.concat(s, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = i\n    end\n    return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local result = \"\"\n\
    \    for i = 0, n do\n        result = result .. i .. \" \"\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzt7uv5gt.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpzt7uv5gt.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local seq = {}\n  for i\
    \ = 0, n do\n    seq[i + 1] = tostring(i)\n  end\n  return table.concat(seq, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return \"0\"\n    else\n        return string_sequence(n-1) .. \" \" .. tostring(n)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckae6uq3.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpckae6uq3.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = \"\"\n    for\
    \ i = 0, n do\n        s = s .. tostring(i) .. \" \"\n    end\n    return string.sub(s,\
    \ 1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal string = ''\n\tfor\
    \ i = 0, n do\n\t\tstring = string .. ' ' .. i\n\tend\n\treturn string\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64ndtqqx.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp64ndtqqx.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return table.concat(num_sequence(n),\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfbbleha6.lua:7:\
    \ attempt to call a nil value (global 'num_sequence')\nstack traceback:\n\t/tmp/tmpfbbleha6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpfbbleha6.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return List.concat(List.map(List.range(0,\
    \ n), tostring), ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6w57rndz.lua:7:\
    \ attempt to index a nil value (global 'List')\nstack traceback:\n\t/tmp/tmp6w57rndz.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6w57rndz.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat(number_sequence(n),\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl44lwt11.lua:7:\
    \ attempt to call a nil value (global 'number_sequence')\nstack traceback:\n\t\
    /tmp/tmpl44lwt11.lua:7: in local 'candidate'\n\t/tmp/tmpl44lwt11.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    return table.concat(util.range(n+1),\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo4mcijgf.lua:7:\
    \ attempt to index a nil value (global 'util')\nstack traceback:\n\t/tmp/tmpo4mcijgf.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpo4mcijgf.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpot5qyes2.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpot5qyes2.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local result = {}\n \
    \   for i = 0, n do\n        result[i+1] = tostring(i)\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local ret = {}\n  for i\
    \ = 0, n do\n    ret[i + 1] = tostring(i)\n  end\n  return table.concat(ret, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i + 1] = tostring(i)\n  end\n  return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local result = {}\n \
    \   for i = 0, n do\n        result[i + 1] = tostring(i)\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal s = ''\n\tfor i =\
    \ 0, n do\n\t\ts = s .. ' ' .. i\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4xldbhe.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpo4xldbhe.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7xel5y9d.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp7xel5y9d.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n <= 0 then\n    return\
    \ '0'\n  else\n    return string_sequence(n-1) .. ' ' .. tostring(n)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n == 0 then\n    return\
    \ '0'\n  else\n    return string_sequence(n-1) .. ' ' .. tostring(n)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local str = \"\"\n  \
    \  for i = 0, n do\n        str = str .. \" \" .. i\n    end\n    return str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpticanpfw.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpticanpfw.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal arr = {}\n\tfor i\
    \ = 0, n do\n\t\tarr[i] = i\n\tend\n\treturn table.concat(arr, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxrw80lk.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpbxrw80lk.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal res = {};\n\tfor\
    \ i = 0, n do\n\t\tres[#res + 1] = tostring(i);\n\tend\n\treturn table.concat(res,\
    \ ' ');\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = i\n    end\n    return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local seq = {}\n  for i\
    \ = 0, n do\n    seq[i+1] = tostring(i)\n  end\n  return table.concat(seq, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local i = 0\n    local\
    \ t = {}\n    while i <= n do\n        t[#t+1] = i\n        i = i + 1\n    end\n\
    \    return table.concat(t, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local result = \"\"\n \
    \ for i = 0, n do\n    result = result .. \" \" .. i\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztcya5ol.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpztcya5ol.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local result = ''\n  for\
    \ i = 0, n do\n    result = result .. ' ' .. i\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbjdb380d.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpbjdb380d.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local a = {}\n  for i =\
    \ 0, n do\n    a[i + 1] = i\n  end\n  return table.concat(a, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local list = {}\n   \
    \ for i = 0, n do\n        list[#list + 1] = i\n    end\n    return table.concat(list,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = \"\"\n    for\
    \ i = 0, n do\n        s = s .. \" \" .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbo_uh91.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpkbo_uh91.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = {}\n  for i =\
    \ 0, n do\n    s[i + 1] = tostring(i)\n  end\n  return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    assert(n >= 0, \"string_sequence()\
    \ expects a positive number or zero.\")\n    local sequence = \"\"\n    for i\
    \ = 0, n do\n        sequence = sequence .. tostring(i) .. \" \"\n    end\n  \
    \  return sequence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxyunq08.lua:18:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpoxyunq08.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = '0'\n  for i\
    \ = 1, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local str = ''\n    for\
    \ i = 0, n do\n        str = str .. tostring(i) .. ' '\n    end\n    return str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfswah8l.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpxfswah8l.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[#t + 1] = i\n\tend\n\treturn table.concat(t, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local sequence = {}\n\
    \    for i = 0, n do\n        table.insert(sequence, tostring(i))\n    end\n \
    \   return table.concat(sequence, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local sequence = {}\n \
    \ for i = 0, n do\n    table.insert(sequence, tostring(i))\n  end\n  return table.concat(sequence,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = \"\"\n  for i\
    \ = 0, n do\n    s = s .. i .. \" \"\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47af6vpx.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp47af6vpx.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local str = ''\n    for\
    \ i = 0, n do\n        str = str .. i .. ' '\n    end\n    return str\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl52xn3vq.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpl52xn3vq.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = {}\n    for\
    \ i = 0, n do\n        s[#s + 1] = i\n    end\n    return table.concat(s, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = i\n  end\n  return table.concat(t, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = \"\"\n    for\
    \ i = 0, n do\n        s = s .. \" \" .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa629qt47.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpa629qt47.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    assert(n >= 0, 'n must\
    \ be positive')\n    return table.concat(array_sequence(n), ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplcn0h5q8.lua:8:\
    \ attempt to call a nil value (global 'array_sequence')\nstack traceback:\n\t\
    /tmp/tmplcn0h5q8.lua:8: in local 'candidate'\n\t/tmp/tmplcn0h5q8.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[#t + 1] = tostring(i)\n\tend\n\treturn table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n > 0 then\n     \
    \   return table.concat({string_sequence(n-1), tostring(n)}, ' ')\n    else\n\
    \        return tostring(n)\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = \"\"\n    for\
    \ i = 0, n do\n        s = s .. \" \" .. i\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplv91xmqc.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmplv91xmqc.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local str = \"\"\n  for\
    \ i = 0, n do\n    str = str .. i .. \" \"\n  end\n  return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1l8l5fl.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpb1l8l5fl.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local l = {}\n    for\
    \ i = 0, n do\n        l[#l + 1] = tostring(i)\n    end\n    return table.concat(l,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal numbers = {}\n\t\
    for i = 0, n do\n\t\tnumbers[i] = i\n\tend\n\treturn table.concat(numbers, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0p9072j.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpz0p9072j.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = \"\"\n  for i\
    \ = 0, n do\n    s = s .. \" \" .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1ihjxf7.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpb1ihjxf7.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return \"0\"\n    else\n        return string_sequence(n-1) .. \" \" .. tostring(n)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local l = ''\n    for\
    \ i = 0, n do\n        l = l .. i .. ' '\n    end\n    return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcc2ci0is.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpcc2ci0is.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local str = \"\"\n  \
    \  for i = 0, n do\n        str = str .. tostring(i) .. ' '\n    end\n    return\
    \ str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5blq81kq.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp5blq81kq.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return '0'\n    else\n        return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxli8van.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpyxli8van.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return tostring(n):gsub(\"\
    %d\", \"%0 \"):gsub(\"^ *(.-) *$\", \"%1\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpejwuvznn.lua:14:\
    \ expected: \"0 1 2 3\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpejwuvznn.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tif n < 0 then return ''\
    \ end\n\tif n == 0 then return '0' end\n\tlocal res = {}\n\tfor i = 0, n do\n\t\
    \tres[#res + 1] = tostring(i)\n\tend\n\treturn table.concat(res, ' ')\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n, 1 do\n        s = s .. tostring(i) .. ' '\n    end\n    return s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplyvl1ohl.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmplyvl1ohl.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = \"\"\n    for\
    \ i = 0, n do\n        s = s .. \" \" .. i\n    end\n    return string.sub(s,\
    \ 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = i\n  end\n  return table.concat(t, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local x = {}\n  for i =\
    \ 0, n do\n    x[i+1] = tostring(i)\n  end\n  return table.concat(x, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 0, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3giidajv.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp3giidajv.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  return tostring(n):gsub('.',function(d)\n\
    \    return ' '..d\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvw2qy2ah.lua:15:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpvw2qy2ah.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do t[#t+1] = tostring(i) end\n  return table.concat(t, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n < 0 then\n     \
    \   error(\"string_sequence: negative argument not supported\")\n    end\n   \
    \ local s = {}\n    for i = 0, n do\n        s[#s + 1] = i\n    end\n    return\
    \ table.concat(s, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = i\n  end\n  return table.concat(t, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local arr = {}\n  for i\
    \ = 0, n do\n    arr[i] = tostring(i)\n  end\n  return table.concat(arr, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkd89qki.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpqkd89qki.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    if n == 0 then\n    \
    \    return '0'\n    else\n        return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local result = \"\"\n \
    \ for i = 0, n do\n    result = result .. \" \" .. i\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbe4kuo7.lua:17:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpkbe4kuo7.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = i\n  end\n  return table.concat(t, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local s = ''\n    for\
    \ i = 0, n, 1 do\n        s = s .. ' ' .. i\n    end\n    return string.gsub(s,\
    \ '^ ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  assert(type(n) == 'number')\n\
    \  local sequence = {}\n  for i = 0, n do table.insert(sequence, tostring(i))\
    \ end\n  return table.concat(sequence, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local t = {}\n  for i =\
    \ 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal s = \"\"\n\tfor i\
    \ = 0, n do\n\t\ts = s .. i .. \" \"\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9gaoxhv.lua:17:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpz9gaoxhv.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  if n == 0 then\n    return\
    \ '0'\n  else\n    return string_sequence(n-1) .. ' ' .. tostring(n)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n\tlocal s = {}\n\tfor i =\
    \ 0, n do\n\t\ts[i+1] = tostring(i)\n\tend\n\treturn table.concat(s, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
