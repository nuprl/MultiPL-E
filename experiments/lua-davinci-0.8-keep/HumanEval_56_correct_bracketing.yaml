name: HumanEval_56_correct_bracketing
language: lua
prompt: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
  \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
  )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
  <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
  \ correct_bracketing(brackets)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
  \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
  \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
  \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
  \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
  \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
  \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    -- Initialize an empty stack.\n    local stack = {}\n    -- Define\
    \ a function that pops one element from the stack and returns it,\n    -- or nil\
    \ if the stack is empty.\n    local function pop()\n        local result = table.remove(stack)\n\
    \        return result\n    end\n    -- Define a function that pushes an element\
    \ to the stack.\n    local function push(x)\n        table.insert(stack, x)\n\
    \    end\n    -- Check each character of brackets\n    for i = 1, #brackets do\n\
    \        local b = brackets:sub(i, i)\n        if b == \"<\" then\n          \
    \  -- Just push an opening bracket on the stack.\n            push(b)\n      \
    \  else\n            -- Try to pop one element from the stack.\n            local\
    \ opening_bracket = pop()\n            -- If the stack is empty, or the popped\
    \ element is not an opening\n            -- bracket, then the brackets are not\
    \ correct.\n            if opening_bracket == nil or opening_bracket ~= \"<\"\
    \ then\n                return false\n            end\n        end\n    end\n\
    \    -- All brackets are correct iff the stack is empty now.\n    return #stack\
    \ == 0\nend", "    local opening = 0\n    for i = 1, #brackets do\n        if\
    \ brackets:sub(i, i) == \"<\" then\n            opening = opening + 1\n      \
    \  else\n            opening = opening - 1\n        end\n        if opening <\
    \ 0 then\n            return false\n        end\n    end\n    return opening ==\
    \ 0\nend", "    -- body\n    local count = 0\n    for i=1,#brackets do\n     \
    \   local char = brackets:sub(i,i)\n        if char == \"<\" then\n          \
    \  count = count + 1\n        elseif char == \">\" then\n            count = count\
    \ - 1\n        end\n        if count < 0 then\n            return false\n    \
    \    end\n    end\n    return count == 0\nend", "    local balance = 0\n    for\
    \ c in brackets:gmatch(\".\") do\n        if c == \"<\" then\n            balance\
    \ = balance + 1\n        elseif c == \">\" then\n            balance = balance\
    \ - 1\n        end\n        if balance < 0 then\n            return false\n  \
    \      end\n    end\n    return balance == 0\nend", "\tlocal stack = {}\n\tfor\
    \ i = 1, string.len(brackets) do\n\t\tlocal bracket = string.sub(brackets, i,\
    \ i)\n\t\tif bracket == \"<\" then\n\t\t\ttable.insert(stack, bracket)\n\t\telseif\
    \ bracket == \">\" then\n\t\t\tlocal popped = table.remove(stack)\n\t\t\tif popped\
    \ == nil then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\tif #stack ==\
    \ 0 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "    local stack\
    \ = 0\n    for i = 1, #brackets do\n        if brackets:sub(i, i) == \"<\" then\n\
    \            stack = stack + 1\n        else\n            stack = stack - 1\n\
    \        end\n        if stack < 0 then\n            return false\n        end\n\
    \    end\n    return stack == 0\nend", "    -- TODO\n    local stack = {}\n  \
    \  for i = 1, #brackets do\n        local b = brackets:sub(i, i)\n        if b\
    \ == \"<\" then\n            table.insert(stack, b)\n        elseif b == \">\"\
    \ then\n            if #stack == 0 then\n                return false\n      \
    \      else\n                table.remove(stack)\n            end\n        end\n\
    \    end\n    return #stack == 0\nend", "\tlocal level = 0\n\tfor b in brackets:gmatch(\"\
    .\") do\n\t\tif b == \"<\" then\n\t\t\tlevel = level + 1\n\t\telseif b == \">\"\
    \ then\n\t\t\tlevel = level - 1\n\t\tend\n\t\tif level < 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn level == 0\nend", "  -- YOUR CODE HERE\n  numOpen\
    \ = 0\n  for i=1,string.len(brackets) do\n    if (string.sub(brackets,i,i) ==\
    \ \"<\") then\n      numOpen = numOpen + 1\n    elseif (string.sub(brackets,i,i)\
    \ == \">\") then\n      numOpen = numOpen - 1\n    end\n    if (numOpen < 0) then\n\
    \      return false\n    end\n  end\n  if (numOpen == 0) then\n    return true\n\
    \  else\n    return false\n  end\nend", "  local open_brackets = 0\n  for i =\
    \ 1, #brackets do\n    if brackets:sub(i, i) == \"<\" then\n      open_brackets\
    \ = open_brackets + 1\n    else\n      open_brackets = open_brackets - 1\n   \
    \ end\n    if open_brackets < 0 then\n      return false\n    end\n  end\n  return\
    \ open_brackets == 0\nend", "\tlocal n = brackets:len()\n\tif n == 0 then\n\t\t\
    return true\n\telseif n % 2 == 1 then\n\t\treturn false\n\telse\n\t\tlocal counter\
    \ = 0\n\t\tfor i = 1, n do\n\t\t\tlocal c = brackets:sub(i, i)\n\t\t\tif c ==\
    \ \"<\" then\n\t\t\t\tcounter = counter + 1\n\t\t\telseif c == \">\" then\n\t\t\
    \t\tcounter = counter - 1\n\t\t\tend\n\t\t\tif counter < 0 then\n\t\t\t\treturn\
    \ false\n\t\t\tend\n\t\tend\n\t\treturn counter == 0\n\tend\nend", "  local cnt\
    \ = 0\n  for c in brackets:gmatch\".\" do\n    if c == \"<\" then\n      cnt =\
    \ cnt + 1\n    elseif c == \">\" then\n      cnt = cnt - 1\n    end\n    if cnt\
    \ < 0 then\n      return false\n    end\n  end\n  return cnt == 0\nend", "\tlocal\
    \ stack = {}\n\tlocal len = brackets:len()\n\tfor i = 1, len do\n\t\tlocal b =\
    \ brackets:sub(i, i)\n\t\tif b == \"<\" then\n\t\t\ttable.insert(stack, b)\n\t\
    \telseif b == \">\" then\n\t\t\tif table.remove(stack) ~= \"<\" then\n\t\t\t\t\
    return false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend", "\tlocal\
    \ count = 0\n\tfor i=1,#brackets do\n\t\tif brackets:sub(i,i) == \"<\" then\n\t\
    \t\tcount = count + 1\n\t\telseif brackets:sub(i,i) == \">\" then\n\t\t\tcount\
    \ = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\treturn false\n\t\tend\n\t\
    end\n\treturn count == 0\nend", "    return brackets:gsub(\"[^<>]\", \"\"):len()\
    \ == 0\nend", "    local closed_count = 0\n    local opened_count = 0\n    for\
    \ i=1,#brackets do\n        if brackets:sub(i,i) == \"<\" then\n            opened_count\
    \ = opened_count + 1\n        elseif brackets:sub(i,i) == \">\" then\n       \
    \     closed_count = closed_count + 1\n        end\n        if closed_count >\
    \ opened_count then\n            return false\n        end\n    end\n    return\
    \ opened_count == closed_count\nend", "  while brackets:find(\"<>\") do\n    brackets\
    \ = brackets:gsub(\"<>\", \"\")\n  end\n  return brackets == \"\"\nend", "  local\
    \ stack = {}\n  for i = 1, #brackets do\n    local c = brackets:sub(i, i)\n  \
    \  if c == \"<\" then\n      table.insert(stack, c)\n    elseif c == \">\" then\n\
    \      if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "\tlocal bracket_count = 0\n\tfor\
    \ i = 1, #brackets do\n\t\tif brackets:sub(i, i) == \"<\" then\n\t\t\tbracket_count\
    \ = bracket_count + 1\n\t\telseif brackets:sub(i, i) == \">\" then\n\t\t\tbracket_count\
    \ = bracket_count - 1\n\t\tend\n\t\tif bracket_count < 0 then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn bracket_count == 0\nend", "  if string.find(brackets,\
    \ \"[^<>]\") then\n    error(\"invalid input string\")\n  end\n  local test =\
    \ 0\n  for i = 1, #brackets do\n    if brackets:sub(i, i) == \"<\" then\n    \
    \  test = test + 1\n    else\n      test = test - 1\n    end\n    if test < 0\
    \ then\n      return false\n    end\n  end\n  return test == 0\nend", "\tlocal\
    \ count = 0\n\tfor char in brackets:gmatch\".\" do\n\t\tif char == \"<\" then\n\
    \t\t\tcount = count + 1\n\t\telseif char == \">\" then\n\t\t\tcount = count -\
    \ 1\n\t\tend\n\t\tif count < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ count == 0\nend", "    local count = 0\n    for c in brackets:gmatch(\".\")\
    \ do\n        if c == \"<\" then\n            count = count + 1\n        elseif\
    \ c == \">\" then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend", "\tlocal opening = 0\n\tlocal closing = 0\n\tfor _, v in ipairs(brackets)\
    \ do\n\t\tif v == '<' then\n\t\t\topening = opening + 1\n\t\telseif v == '>' then\n\
    \t\t\tclosing = closing + 1\n\t\tend\n\tend\n\treturn opening == closing\nend",
  '  local count = 0', "    if type(brackets) ~= \"string\" then\n        error(\"\
    brackets must be a string.\")\n    end\n    local stack = Stack:new()\n    for\
    \ i = 1, string.len(brackets) do\n        local c = string.sub(brackets, i, i)\n\
    \        if c == \"<\" then\n            stack:push(c)\n        elseif c == \"\
    >\" then\n            if stack:pop() == nil then\n                return false\n\
    \            end\n        else\n            error(\"brackets must contain only\
    \ '<' and '>'.\")\n        end\n    end\n    return stack:isempty()\nend", " \
    \ return brackets:gsub(\"<>\", \"\"):len() == 0\nend", "  local stack = {}\n \
    \ for b in brackets:gmatch(\".\") do\n    local top = stack[#stack]\n    if b\
    \ == \"<\" then\n      table.insert(stack, \"<\")\n    elseif b == \">\" then\n\
    \      if not (top == \"<\") then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend", "    local open_brackets = 0\n  \
    \  for i = 1, #brackets do\n        if brackets:sub(i, i) == \"<\" then\n    \
    \        open_brackets = open_brackets + 1\n        elseif brackets:sub(i, i)\
    \ == \">\" then\n            open_brackets = open_brackets - 1\n        end\n\
    \        if open_brackets < 0 then\n            return false\n        end\n  \
    \  end\n    return open_brackets == 0\nend", "\tlocal open_brackets = 0\n\tfor\
    \ i = 1, #brackets do\n\t\tif brackets:sub(i, i) == \"<\" then\n\t\t\topen_brackets\
    \ = open_brackets + 1\n\t\telseif brackets:sub(i, i) == \">\" then\n\t\t\topen_brackets\
    \ = open_brackets - 1\n\t\tend\n\t\tif open_brackets < 0 then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn open_brackets == 0\nend", "\tlocal stack = Stack()\n\t\
    for b in brackets:gmatch(\".\") do\n\t\tif b == \"<\" then\n\t\t\tstack:push(b)\n\
    \t\telseif b == \">\" then\n\t\t\tif stack:top() == \"<\" then\n\t\t\t\tstack:pop()\n\
    \t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn stack:is_empty()\n\
    end", "    local stack = Stack()\n    for i = 1, #brackets do\n        local bracket\
    \ = brackets:sub(i, i)\n        if bracket == \"<\" then\n            stack:push(bracket)\n\
    \        elseif bracket == \">\" then\n            if stack:empty() then\n   \
    \             return false\n            else\n                stack:pop()\n  \
    \          end\n        end\n    end\n    return stack:empty()\nend", "    local\
    \ n_left = brackets:gsub(\"[^<]\", \"\"):len()\n    local n_right = brackets:gsub(\"\
    [^>]\", \"\"):len()\n    return n_left == n_right\nend", "  local bracket_count\
    \ = 0\n  for k = 1, #brackets do\n    if brackets:sub(k, k) == \"<\" then\n  \
    \    bracket_count = bracket_count + 1\n    elseif brackets:sub(k, k) == \">\"\
    \ then\n      bracket_count = bracket_count - 1\n    end\n    if bracket_count\
    \ < 0 then\n      return false\n    end\n  end\n  return bracket_count == 0\n\
    end", "  local _, n = brackets:gsub(\"[<>]\", \"\") -- number of brackets\n  if\
    \ n % 2 ~= 0 then -- if not even\n    return false\n  end\n  for i = 1, n, 2 do\n\
    \    if brackets:sub(i, i + 1) ~= \"<>\" then\n      return false\n    end\n \
    \ end\n  return true\nend", "    local stack = {}\n    for i = 1, #brackets do\n\
    \        local current = brackets:sub(i, i)\n        if current == \"<\" then\n\
    \            table.insert(stack, current)\n        elseif current == \">\" then\n\
    \            if #stack == 0 then\n                return false\n            else\n\
    \                table.remove(stack)\n            end\n        end\n    end\n\
    \    return #stack == 0\nend", "    local count = 0\n    for i=1,#brackets do\n\
    \        if brackets:sub(i,i) == \"<\" then\n            count = count + 1\n \
    \       elseif brackets:sub(i,i) == \">\" then\n            count = count - 1\n\
    \        end\n        if count < 0 then\n            return false\n        end\n\
    \    end\n    return count == 0\nend", "    local stack = Stack:new()\n    for\
    \ b in brackets:gmatch(\".\") do\n        if b == \"<\" then\n            stack:push(\"\
    <\")\n        elseif b == \">\" then\n            if stack:pop() == nil then\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ stack:pop() == nil\nend", "  local bracket_stack = {}\n  for i=1,#brackets do\n\
    \    local b = brackets:sub(i,i)\n    if b == \"<\" then\n      table.insert(bracket_stack,\
    \ b)\n    else\n      -- must be \">\"\n      if #bracket_stack == 0 then\n  \
    \      return false\n      else\n        table.remove(bracket_stack)\n      end\n\
    \    end\n  end\n  return #bracket_stack == 0\nend", "  local count = 0\n  for\
    \ i = 1, #brackets do\n    if brackets:sub(i, i) == \"<\" then\n      count =\
    \ count + 1\n    else\n      count = count - 1\n    end\n    if count < 0 then\n\
    \      return false\n    end\n  end\n  return count == 0\nend", "  local n_open\
    \ = 0\n  for i=1,#brackets do\n    if brackets:sub(i,i) == \"<\" then\n      n_open\
    \ = n_open + 1\n    elseif brackets:sub(i,i) == \">\" then\n      n_open = n_open\
    \ - 1\n    end\n    if n_open < 0 then\n      return false\n    end\n  end\n \
    \ return n_open == 0\nend", "    count = 0\n    for i=1,#brackets do\n       \
    \ count = count + (brackets:sub(i,i) == \"<\" and 1 or -1)\n        if count <\
    \ 0 then return false end\n    end\n    return count == 0\nend", "  local stack\
    \ = {}\n  for i = 1,#brackets do\n    local char = brackets:sub(i,i)\n    if char\
    \ == \"<\" then\n      table.insert(stack, char)\n    elseif char == \">\" then\n\
    \      if #stack == 0 then\n        return false\n      else\n        table.remove(stack)\n\
    \      end\n    end\n  end\n  return #stack == 0\nend", "\tlocal open = 0\n\t\
    for i = 1, #brackets do\n\t\tif brackets:sub(i, i) == \"<\" then\n\t\t\topen =\
    \ open + 1\n\t\telse\n\t\t\topen = open - 1\n\t\tend\n\t\tif open < 0 then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn open == 0\nend", "    local balanced,\
    \ level = true, 0\n    for c in brackets:gmatch(\".\") do\n        if c == \"\
    <\" then\n            level = level + 1\n        elseif c == \">\" then\n    \
    \        level = level - 1\n            if level < 0 then\n                balanced\
    \ = false\n                break\n            end\n        end\n    end\n    return\
    \ balanced and level == 0\nend", "    local sum = 0\n    for i = 1, #brackets\
    \ do\n        local ch = brackets:sub(i, i)\n        if ch == \"<\" then\n   \
    \         sum = sum + 1\n        elseif ch == \">\" then\n            sum = sum\
    \ - 1\n        end\n        if sum < 0 then\n            return false\n      \
    \  end\n    end\n    return sum == 0\nend", "\tlocal str = \"\"\n\tfor i = 1,\
    \ #brackets do\n\t\tif str == \"\" and brackets:sub(i, i) == \">\" then\n\t\t\t\
    return false\n\t\telseif brackets:sub(i, i) == \"<\" then\n\t\t\tstr = str ..\
    \ \"<\"\n\t\telseif brackets:sub(i, i) == \">\" then\n\t\t\tstr = str:sub(1, -2)\n\
    \t\tend\n\tend\n\tif str == \"\" then\n\t\treturn true\n\telse\n\t\treturn false\n\
    \tend\nend", "  local count = 0\n  for b in brackets:gmatch(\".\") do\n    if\
    \ b == \"<\" then\n      count = count + 1\n    elseif b == \">\" then\n     \
    \ count = count - 1\n    end\n    if count < 0 then\n      return false\n    end\n\
    \  end\n  return count == 0\nend", "  local OPEN_BRACKET = '<'\n  local CLOSE_BRACKET\
    \ = '>'\n  local _, opened = brackets:gsub(OPEN_BRACKET, \"\")\n  local _, closed\
    \ = brackets:gsub(CLOSE_BRACKET, \"\")\n  return opened == closed\nend", "\tlocal\
    \ n = 0\n\tfor _, ch in utf8.codes(brackets) do\n\t\tif ch == 60 then\n\t\t\t\
    n = n + 1\n\t\telseif ch == 62 then\n\t\t\tn = n - 1\n\t\t\tif n < 0 then\n\t\t\
    \t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn n == 0\nend", "    local\
    \ function check(str, num)\n        if #str < 1 then\n            return num ==\
    \ 0\n        elseif str:sub(1, 1) == \"<\" then\n            return check(str:sub(2),\
    \ num + 1)\n        elseif str:sub(1, 1) == \">\" then\n            return num\
    \ > 0 and check(str:sub(2), num - 1)\n        else\n            return false\n\
    \        end\n    end\n    return check(brackets, 0)\nend", "    local count =\
    \ 0\n    for c in brackets:gmatch\".\" do\n        if c == \"<\" then\n      \
    \      count = count + 1\n        elseif c == \">\" then\n            count =\
    \ count - 1\n        end\n        if count < 0 then\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "\t-- All opening brackets\
    \ are on a stack.  For every closing bracket, remove\n\t-- one opening bracket\
    \ from the stack.  Return true if the stack is empty\n\t-- at the end.\n\tlocal\
    \ stack = {}\n\tfor i = 1, #brackets do\n\t\tlocal bracket = brackets:sub(i, i)\n\
    \t\tif bracket == \"<\" then\n\t\t\ttable.insert(stack, bracket)\n\t\telseif bracket\
    \ == \">\" then\n\t\t\ttable.remove(stack)\n\t\tend\n\tend\n\treturn #stack ==\
    \ 0\nend", "  -- make sure the brackets start with an opening one\n  if brackets:sub(1,1)\
    \ == \">\" then\n    return false\n  end\n  -- make sure the brackets end with\
    \ a closing one\n  if brackets:sub(-1,-1) == \"<\" then\n    return false\n  end\n\
    \  -- any number of opening brackets can be followed by any number of closing\n\
    \  -- brackets\n  local function  good(br)\n    local close = br:find(\">\", 1,\
    \ true)\n    if close == nil then\n      return false\n    end\n    local open\
    \ = br:find(\"<\", 1, true)\n    if open == nil then\n      return true\n    end\n\
    \    if open > close then\n      return false\n    end\n    return good(br:sub(close\
    \ + 1))\n  end\n  return good(brackets)\nend", "  local bracket_count = 0\n  for\
    \ i=1,#brackets do\n    local c = brackets:sub(i,i)\n    if c == \"<\" then\n\
    \      bracket_count = bracket_count + 1\n    elseif c == \">\" then\n      bracket_count\
    \ = bracket_count - 1\n    end\n    if bracket_count < 0 then\n      return false\n\
    \    end\n  end\n  return bracket_count == 0\nend", "    local stack = Stack:new()\n\
    \    for _, bracket in ipairs(brackets:split(\"\")) do\n        if bracket ==\
    \ \"<\" then\n            stack:push(\"<\")\n        elseif bracket == \">\" then\n\
    \            if stack:is_empty() then\n                return false\n        \
    \    else\n                stack:pop()\n            end\n        end\n    end\n\
    \    return stack:is_empty()\nend", "  return brackets:gsub('<>', '') == ''\n\
    end", "    local open_brackets = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == \"<\" then\n            open_brackets = open_brackets + 1\n        elseif\
    \ brackets:sub(i, i) == \">\" then\n            open_brackets = open_brackets\
    \ - 1\n        end\n        if open_brackets < 0 then\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    local i = 1\n\
    \    local len = string.len(brackets)\n    local stack = Stack()\n    while i\
    \ <= len do\n        local ch = string.sub(brackets, i, i)\n        if ch == \"\
    <\" then\n            stack:push(ch)\n        elseif ch == \">\" then\n      \
    \      if stack:empty() then\n                return false\n            else\n\
    \                stack:pop()\n            end\n        end\n        i = i + 1\n\
    \    end\n    return stack:empty()\nend", "    local n = 0\n    for i=1,#brackets\
    \ do\n        if brackets:sub(i,i) == \"<\" then\n            n = n + 1\n    \
    \    else\n            n = n - 1\n        end\n        if n < 0 then\n       \
    \     return false\n        end\n    end\n    return n == 0\nend", "  local stack\
    \ = Stack()\n  for k, v in pairs(brackets) do\n    if v == \"<\" then\n      stack:push(v)\n\
    \    elseif v == \">\" then\n      if stack:pop() == nil then\n        return\
    \ false\n      end\n    end\n  end\n  return stack:pop() == nil\nend", "  local\
    \ depth = 0\n  for char in brackets:gmatch(\".\") do\n    if char == \"<\" then\n\
    \      depth = depth + 1\n    elseif char == \">\" then\n      depth = depth -\
    \ 1\n    end\n    if depth < 0 then\n      return false\n    end\n  end\n  return\
    \ depth == 0\nend", "  local len = string.len(brackets)\n  local opening = 0\n\
    \  local closing = 0\n  for i = 1, len do\n    local bracket = string.sub(brackets,\
    \ i, i)\n    if bracket == \"<\" then\n      opening = opening + 1\n    elseif\
    \ bracket == \">\" then\n      closing = closing + 1\n    end\n    if closing\
    \ > opening then\n      return false\n    end\n  end\n  return opening == closing\n\
    end", "  local bracket_count = 0\n  for ch in brackets:gmatch(\".\") do\n    if\
    \ ch == \"<\" then\n      bracket_count = bracket_count + 1\n    elseif ch ==\
    \ \">\" then\n      bracket_count = bracket_count - 1\n    end\n    if bracket_count\
    \ < 0 then\n      return false\n    end\n  end\n  return bracket_count == 0\n\
    end", "  local stack = {}\n  for char in brackets:gmatch(\".\") do\n    if char\
    \ == \"<\" then\n      table.insert(stack, char)\n    elseif char == \">\" then\n\
    \      if #stack == 0 then\n        return false\n      else\n        table.remove(stack)\n\
    \      end\n    end\n  end\n  return #stack == 0\nend", "    local stack = {}\n\
    \    for i = 1, #brackets do\n        local ch = brackets:sub(i, i)\n        if\
    \ ch == \"<\" then\n            table.insert(stack, ch)\n        elseif ch ==\
    \ \">\" then\n            if #stack == 0 then\n                return false\n\
    \            else\n                table.remove(stack)\n            end\n    \
    \    end\n    end\n    return #stack == 0\nend", "    local stack = Stack()\n\
    \    for i=1,brackets:len() do\n        if brackets:sub(i,i) == \"<\" then\n \
    \           stack:push(brackets:sub(i,i))\n        elseif brackets:sub(i,i) ==\
    \ \">\" then\n            if stack:empty() then\n                return false\n\
    \            else\n                stack:pop()\n            end\n        end\n\
    \    end\n    return stack:empty()\nend", "  local open = string.match(brackets,\
    \ \"^<*\")\n  local rest = string.match(brackets, \"<*>*$\")\n  if rest == \"\"\
    \ then\n    return true\n  elseif open == rest then\n    return correct_bracketing(string.sub(brackets,\
    \ string.len(open) + 1, -string.len(rest) - 1))\n  else\n    return false\n  end\n\
    end", "  local count = 0\n  for i = 1, #brackets do\n    if brackets:sub(i, i)\
    \ == \"<\" then\n      count = count + 1\n    else\n      count = count - 1\n\
    \    end\n    if count < 0 then\n      return false\n    end\n  end\n  return\
    \ count == 0\nend", "    local count = 0\n    for i = 1, #brackets do\n      \
    \  local letter = brackets:sub(i, i)\n        if letter == \"<\" then\n      \
    \      count = count + 1\n        elseif letter == \">\" then\n            count\
    \ = count - 1\n        end\n        if count < 0 then\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "    local count = 0\n   \
    \ for character in brackets:gmatch(\".\") do\n        if character == \"<\" then\n\
    \            count = count + 1\n        elseif character == \">\" then\n     \
    \       count = count - 1\n        end\n        if count < 0 then\n          \
    \  return false\n        end\n    end\n    return count == 0\nend", "  -- simple\
    \ implementation, by keeping a balance of opening and closing brackets.\n  local\
    \ balance = 0", "\tlocal count = 0\n\tfor _, bracket in brackets:gmatch(\"()(.)\"\
    ) do\n\t\tif bracket == \"<\" then\n\t\t\tcount = count + 1\n\t\telseif bracket\
    \ == \">\" then\n\t\t\tcount = count - 1\n\t\t\tif count < 0 then\n\t\t\t\treturn\
    \ false\n\t\t\tend\n\t\tend\n\tend\n\treturn count == 0\nend", "    local stack\
    \ = Stack:new()\n    for i = 1, #brackets do\n        local c = brackets:sub(i,\
    \ i)\n        if c == \"<\" then\n            stack:push(c)\n        elseif c\
    \ == \">\" then\n            if stack:is_empty() then\n                return\
    \ false\n            else\n                stack:pop()\n            end\n    \
    \    end\n    end\n    return stack:is_empty()\nend", "  local level = 0\n  for\
    \ c in brackets:gmatch(\".\") do\n    if c == \"<\" then\n      level = level\
    \ + 1\n    elseif c == \">\" then\n      level = level - 1\n    end\n    if level\
    \ < 0 then\n      return false\n    end\n  end\n  return level == 0\nend", " \
    \ local i, j, cnt = 1, #brackets, 0\n  while i <= j do\n    if brackets:sub(i,\
    \ i) == \"<\" then\n      cnt = cnt + 1\n    else\n      cnt = cnt - 1\n    end\n\
    \    if cnt < 0 then\n      return false\n    end\n    i = i + 1\n  end\n  return\
    \ cnt == 0\nend", "    local index = 0\n    for bracket in brackets:gmatch(\"\
    .\") do\n        if bracket == \"<\" then\n            index = index + 1\n   \
    \     elseif bracket == \">\" then\n            index = index - 1\n        end\n\
    \        if index < 0 then\n            return false\n        end\n    end\n \
    \   return index == 0\nend", "    local bracket_count = 0\n    for i = 1, #brackets\
    \ do\n        local char = brackets:sub(i, i)\n        if char == \"<\" then\n\
    \            bracket_count = bracket_count + 1\n        elseif char == \">\" then\n\
    \            bracket_count = bracket_count - 1\n        end\n        if bracket_count\
    \ < 0 then\n            return false\n        end\n    end\n    return bracket_count\
    \ == 0\nend", "  local depth = 0\n  for i = 1,#brackets do\n    if brackets:sub(i,i)\
    \ == \"<\" then\n      depth = depth + 1\n    elseif brackets:sub(i,i) == \">\"\
    \ then\n      depth = depth - 1\n    end\n    if depth < 0 then\n      return\
    \ false\n    end\n  end\n  return depth == 0\nend", "    -- Fill in the code here\n\
    \    local bracket_counter = 0\n    for i = 1, #brackets do\n        if string.sub(brackets,\
    \ i, i) == \"<\" then\n            bracket_counter = bracket_counter + 1\n   \
    \     elseif string.sub(brackets, i, i) == \">\" then\n            bracket_counter\
    \ = bracket_counter - 1\n        end\n        if bracket_counter < 0 then\n  \
    \          return false\n        end\n    end\n    if bracket_counter == 0 then\n\
    \        return true\n    else\n        return false\n    end\nend", "  for i\
    \ = 1, math.floor(#brackets / 2) do\n    if brackets:sub(i, i) == \"<\" and brackets:sub(#brackets\
    \ - i + 1, #brackets - i + 1) ~= \">\" then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local stack = {}\n  for idx = 1, #brackets do\n    local\
    \ b = brackets:sub(idx, idx)\n    if b == \"<\" then\n      table.insert(stack,\
    \ 1, \">\")\n    elseif b == \">\" then\n      if #stack == 0 then\n        return\
    \ false\n      end\n      table.remove(stack, 1)\n    end\n  end\n  return #stack\
    \ == 0\nend", "  -- TODO: implement function\n  return true\nend", "    local\
    \ count = 0\n    for b in brackets:gmatch(\".\") do\n        if b == \"<\" then\n\
    \            count = count + 1\n        elseif b == \">\" then\n            count\
    \ = count - 1\n        end\n        if count < 0 then\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "    -- Your code here\nend",
  "    local stack = Stack:new()\n    for i = 1, string.len(brackets) do\n       \
    \ local c = string.sub(brackets, i, i)\n        if c == \"<\" then\n         \
    \   stack:push(c)\n        elseif c == \">\" then\n            local top = stack:pop()\n\
    \            if top == nil then\n                return false\n            end\n\
    \        end\n    end\n    if stack:pop() ~= nil then\n        return false\n\
    \    end\n    return true\nend", "    local brackets_stack = Stack()\n    local\
    \ opening_brackets = \"<\"\n    local closing_brackets = \">\"\n    for i = 1,\
    \ #brackets do\n        if not brackets_stack:is_empty() and brackets_stack:peek()\
    \ == opening_brackets and brackets:sub(i, i) == closing_brackets then\n      \
    \      brackets_stack:pop()\n        else\n            brackets_stack:push(brackets:sub(i,\
    \ i))\n        end\n    end\n    return brackets_stack:is_empty()\nend", "   \
    \ local depth = 0\n    for char in brackets:gmatch(\".\") do\n        if char\
    \ == \"<\" then\n            depth = depth + 1\n        elseif char == \">\" then\n\
    \            depth = depth - 1\n        end\n        if depth < 0 then\n     \
    \       return false\n        end\n    end\n    return depth == 0\nend", "   \
    \ local count = 0\n    for i = 1, #brackets do\n        if brackets:sub(i, i)\
    \ == \"<\" then\n            count = count + 1\n        elseif brackets:sub(i,\
    \ i) == \">\" then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend", "    -- YOUR CODE HERE\n    if string.sub(brackets, -1) == \"<\" then\n\
    \        return false\n    end\n    local n, nopen = 0, 0\n    for i = 1, #brackets\
    \ do\n        if string.sub(brackets, i, i) == \"<\" then\n            nopen =\
    \ nopen + 1\n        else\n            nopen = nopen - 1\n        end\n      \
    \  if nopen < 0 then\n            return false\n        end\n    end\n    return\
    \ nopen == 0\nend", "    if brackets:find(\"^<\") == nil then return false end\n\
    \    if brackets:find(\">$\") == nil then return false end\n    if brackets:find(\"\
    >>\") ~= nil then return false end\n    if brackets:find(\"<<\") ~= nil then return\
    \ false end\n    if brackets:find(\"^<>$\") ~= nil then return true end\n    return\
    \ correct_bracketing(brackets:sub(2, -2))\nend", "    local bracketing = 0\n \
    \   for i = 1, #brackets do\n        if brackets:sub(i, i) == \"<\" then\n   \
    \         bracketing = bracketing + 1\n        else\n            bracketing =\
    \ bracketing - 1\n        end\n        if bracketing < 0 then\n            return\
    \ false\n        end\n    end\n    return bracketing == 0\nend", "  local bracket_length\
    \ = string.len(brackets)\n  local open_brackets = 0\n  for i = 1, bracket_length\
    \ do\n    local bracket = string.sub(brackets, i, i)\n    if bracket == \"<\"\
    \ then\n      open_brackets = open_brackets + 1\n    elseif bracket == \">\" then\n\
    \      open_brackets = open_brackets - 1\n    end\n    if open_brackets < 0 then\n\
    \      return false\n    end\n  end\n  return open_brackets == 0\nend", "  for\
    \ _, bracket in utf8.codes(brackets) do\n    if bracket == 60 then\n      table.insert(stack,\
    \ bracket)\n    elseif bracket == 62 then\n      table.remove(stack)\n    end\n\
    \  end\n  return #stack == 0\nend", "  local function helper(left, right, n)\n\
    \    -- base case\n    if n > #brackets then\n      return left == right\n   \
    \ end\n    -- recursive case\n    local char = brackets:sub(n, n)\n    if char\
    \ == \"<\" then\n      return helper(left + 1, right, n + 1)\n    elseif char\
    \ == \">\" then\n      if left > right then\n        return helper(left, right\
    \ + 1, n + 1)\n      else\n        return false\n      end\n    else\n      return\
    \ false\n    end\n  end\n  return helper(0, 0, 1)\nend", "  -- TODO: Implement.\n\
    \  return brackets == \"\"\nend", "  local bracket_types = {\n    [\"<\"] = 1,\n\
    \    [\">\"] = -1\n  }\n  local sum = 0\n  for i = 1, #brackets do\n    local\
    \ bracket = brackets:sub(i, i)\n    sum = sum + bracket_types[bracket]\n    if\
    \ sum < 0 then\n      return false\n    end\n  end\n  return sum == 0\nend", " \
    \   local count = 0\n    for b in brackets:gmatch(\".\") do\n        if b == \"\
    <\" then\n            count = count + 1\n        elseif b == \">\" then\n    \
    \        count = count - 1\n        end\n        if count < 0 then\n         \
    \   return false\n        end\n    end\n    return count == 0\nend", "\tlocal\
    \ count = 0\n\tfor b in brackets:gmatch(\".\") do\n\t\tif b == '<' then\n\t\t\t\
    count = count + 1\n\t\telseif b == '>' then\n\t\t\tcount = count - 1\n\t\t\tif\
    \ count < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn count\
    \ == 0\nend", "  while brackets ~= brackets:gsub(\"<>\", \"\") do\n    brackets\
    \ = brackets:gsub(\"<>\", \"\")\n  end\n  return brackets == \"\"\nend", "   \
    \ local open = 0\n    for b in brackets:gmatch(\".\") do\n        if b == \"<\"\
    \ then\n            open = open + 1\n        elseif b == \">\" then\n        \
    \    open = open - 1\n        end\n        if open < 0 then\n            return\
    \ false\n        end\n    end\n    return open == 0\nend", "    local size = #brackets\n\
    \    local result = true\n    local count = 0\n    for i = 1, size do\n      \
    \  local c = brackets:sub(i, i)\n        if c == \"<\" then\n            count\
    \ = count + 1\n        elseif c == \">\" then\n            count = count - 1\n\
    \        end\n        if count < 0 then\n            result = false\n        \
    \    break\n        end\n    end\n    if count ~= 0 then\n        result = false\n\
    \    end\n    return result\nend", '    local stack = {}', "  local found_match\
    \ = true\n  local unmatch = 0\n  local match = 0\n  local function test_bracket(b)\n\
    \    if b == '<' then\n      unmatch = unmatch + 1\n    elseif b == '>' then\n\
    \      match = match + 1\n    end\n    if match > unmatch then\n      found_match\
    \ = false\n    end\n  end\n  for i = 1, #brackets do\n    test_bracket(brackets:sub(i,\
    \ i))\n  end\n  return found_match and match == unmatch\nend", "    local open\
    \ = 0\n    for bracket in brackets:gmatch(\".\") do\n        if bracket == \"\
    <\" then\n            open = open + 1\n        elseif bracket == \">\" then\n\
    \            open = open - 1\n        end\n        if open < 0 then\n        \
    \    return false\n        end\n    end\n    return open == 0\nend", "    local\
    \ stack = {}\n    for i = 1, #brackets do\n        local b = brackets:sub(i, i)\n\
    \        if b == \"<\" then\n            table.insert(stack, b)\n        elseif\
    \ b == \">\" then\n            if #stack == 0 then\n                return false\n\
    \            else\n                table.remove(stack)\n            end\n    \
    \    end\n    end\n    return #stack == 0\nend", "  local stack = {}\n  for i=1,brackets:len()\
    \ do\n    local x = brackets:sub(i,i)\n    if x == \"<\" then\n      table.insert(stack,\
    \ i)\n    elseif x == \">\" then\n      if #stack == 0 then\n        return false\n\
    \      else\n        table.remove(stack)\n      end\n    end\n  end\n  return\
    \ #stack == 0\nend", "    local stack = new_stack()\n    local cb = brackets:gmatch(\"\
    .\")\n    local b = cb()\n    while b do\n        if b == \"<\" then\n       \
    \     stack:push(b)\n        else\n            if stack:is_empty() then\n    \
    \            return false\n            else\n                stack:pop()\n   \
    \         end\n        end\n        b = cb()\n    end\n    return stack:is_empty()\n\
    end", "  for i = 1, #brackets do\n    if brackets:sub(i, i) == \"<\" then\n  \
    \    for j = i + 1, #brackets do\n        if brackets:sub(j, j) == \">\" then\n\
    \          return correct_bracketing(brackets:sub(1, i - 1) .. brackets:sub(i\
    \ + 1, j - 1) .. brackets:sub(j + 1))\n        end\n      end\n      return false\n\
    \    end\n  end\n  return true\nend", "  local n = 0\n  for c in brackets:gmatch(\"\
    .\") do\n    if c == \"<\" then\n      n = n + 1\n    elseif c == \">\" then\n\
    \      n = n - 1\n    end\n    if n < 0 then\n      return false\n    end\n  end\n\
    \  return n == 0\nend", "  local count = 0\n  for char in brackets:gmatch(\".\"\
    ) do\n    if char == \"<\" then\n      count = count + 1\n    elseif char == \"\
    >\" then\n      count = count - 1\n    end\n    if count < 0 then\n      return\
    \ false\n    end\n  end\n  return count == 0\nend", "\tlocal count = 0\n\tfor\
    \ i=1,#brackets do\n\t\tlocal b = brackets:sub(i,i)\n\t\tif b == \"<\" then\n\t\
    \t\tcount = count + 1\n\t\telseif b == \">\" then\n\t\t\tcount = count - 1\n\t\
    \t\tif count < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ count == 0\nend", "\tlocal stack = Stack:new()\n\tfor i=1,#brackets do\n\t\t\
    if brackets:sub(i,i) == \"<\" then\n\t\t\tstack:push(1)\n\t\telse\n\t\t\tif stack:isempty()\
    \ then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tstack:pop()\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn stack:isempty()\nend", "    if #brackets % 2 ~= 0 then\n\
    \        return false\n    end\n    local bracket_depth = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"<\" then\n            bracket_depth =\
    \ bracket_depth + 1\n        else\n            bracket_depth = bracket_depth -\
    \ 1\n        end\n        if bracket_depth < 0 then\n            return false\n\
    \        end\n    end\n    return bracket_depth == 0\nend", "    local count =\
    \ 0\n    for i = 1, #brackets do\n        if brackets:sub(i, i) == \"<\" then\n\
    \            count = count + 1\n        elseif brackets:sub(i, i) == \">\" then\n\
    \            count = count - 1\n        end\n        if count < 0 then\n     \
    \       return false\n        end\n    end\n    return count == 0\nend", "\tlocal\
    \ stack = Stack()\n\tfor c in brackets:gmatch(\".\") do\n\t\tif c == \"<\" then\n\
    \t\t\tstack:push(\"<\")\n\t\telseif c == \">\" then\n\t\t\tif stack:empty() then\n\
    \t\t\t\treturn false\n\t\t\telse\n\t\t\t\tstack:pop()\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn stack:empty()\nend", "    local stack = Stack()\n    for i = 1,\
    \ #brackets do\n        local c = brackets:sub(i, i)\n        if c == \"<\" then\n\
    \            stack:push(c)\n        elseif c == \">\" then\n            if stack:empty()\
    \ then\n                return false\n            else\n                stack:pop()\n\
    \            end\n        end\n    end\n    return stack:empty()\nend", "    local\
    \ stack = Stack()\n    for i = 1, #brackets do\n        local bracket = brackets:sub(i,\
    \ i)\n        if bracket == \"<\" then\n            stack:push(bracket)\n    \
    \    elseif bracket == \">\" then\n            if stack:isempty() then\n     \
    \           return false\n            else\n                stack:pop()\n    \
    \        end\n        end\n    end\n    return stack:isempty()\nend", "  -- your\
    \ code goes here\nend", "\tlocal left_count = 0", "    local stack = {}\n    for\
    \ i = 1, brackets:len() do\n        local char = brackets:sub(i, i)\n        if\
    \ char == \"<\" then\n            stack[#stack + 1] = char\n        elseif char\
    \ == \">\" then\n            if #stack == 0 then\n                return false\n\
    \            end\n            stack[#stack] = nil\n        end\n    end\n    return\
    \ #stack == 0\nend", '    local open = 0', "    local brackets_num = string.len(brackets)\n\
    \    if brackets_num == 0 then\n        return true\n    end\n    if brackets_num\
    \ % 2 == 1 then\n        return false\n    end\n    for index = 1, brackets_num,\
    \ 2 do\n        if brackets:sub(index, index) ~= \"<\" then\n            return\
    \ false\n        end\n        if brackets:sub(index + 1, index + 1) ~= \">\" then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ bracket_count = 0\n    for i = 1, #brackets do\n        if brackets:sub(i, i)\
    \ == \"<\" then\n            bracket_count = bracket_count + 1\n        elseif\
    \ brackets:sub(i, i) == \">\" then\n            bracket_count = bracket_count\
    \ - 1\n        end\n        if bracket_count < 0 then\n            return false\n\
    \        end\n    end\n    return bracket_count == 0\nend", "  -- your code here\n\
    \  local curr = 0\n  for i=1,#brackets do\n  \tif brackets:sub(i,i) == \"<\" then\n\
    \  \t\tcurr = curr + 1\n  \telseif brackets:sub(i,i) == \">\" then\n  \t\tcurr\
    \ = curr - 1\n  \tend\n  \tif curr < 0 then\n  \t\treturn false\n  \tend\n  end\n\
    \  if curr == 0 then\n  \treturn true\n  else\n  \treturn false\n  end\nend",
  "  local stack = Stack:new()\n  for c in brackets:gmatch\".\" do\n    if c == \"\
    <\" then\n      stack:push(c)\n    elseif c == \">\" then\n      if stack:is_empty()\
    \ then\n        return false\n      else\n        stack:pop()\n      end\n   \
    \ end\n  end\n  return stack:is_empty()\nend", "  -- your code here\nend", " \
    \   local matches = {[\"><\"] = true, [\"<>\"] = true}\n    local num_left = 0\n\
    \    local total_left = 0\n    local total_right = 0\n    local current = \"\"\
    \n    local correct = true\n    local i = 1\n    while i <= #brackets do\n   \
    \     local char = brackets:sub(i, i)\n        if char == \"<\" then\n       \
    \     total_left = total_left + 1\n            current = current .. char\n   \
    \         num_left = num_left + 1\n        elseif char == \">\" then\n       \
    \     total_right = total_right + 1\n            current = current .. char\n \
    \           if num_left > 0 then\n                num_left = num_left - 1\n  \
    \          else\n                correct = false\n                break\n    \
    \        end\n        end\n        i = i + 1\n    end\n    return correct and\
    \ total_left == total_right\nend", "  local openings = 0\n  for i = 1, #brackets\
    \ do\n    if brackets:sub(i, i) == \"<\" then\n      openings = openings + 1\n\
    \    elseif openings == 0 then\n      return false\n    else\n      openings =\
    \ openings - 1\n    end\n  end\n  return openings == 0\nend", "  local count =\
    \ 0\n  for i = 1, #brackets do\n    local c = brackets:sub(i, i)\n    if c ==\
    \ \"<\" then\n      count = count + 1\n    elseif c == \">\" then\n      count\
    \ = count - 1\n    end\n    if count < 0 then\n      return false\n    end\n \
    \ end\n  return count == 0\nend", "    local s = Stack()\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"<\" then\n            s:push(\"<\")\n\
    \        else\n            if s:is_empty() then\n                return false\n\
    \            else\n                s:pop()\n            end\n        end\n   \
    \ end\n    return s:is_empty()\nend", "  local count = 0\n  for i = 1, #brackets\
    \ do\n    if brackets:sub(i, i) == \"<\" then\n      count = count + 1\n    else\n\
    \      count = count - 1\n    end\n    if count < 0 then\n      return false\n\
    \    end\n  end\n  return count == 0\nend", "    return brackets:match(\"^>*<>*$\"\
    )\nend", "    local stack = Stack()\n    for c in brackets:gmatch('.') do\n  \
    \      if c == '<' then\n            stack:push(c)\n        elseif c == '>' then\n\
    \            if stack:is_empty() then\n                return false\n        \
    \    else\n                stack:pop()\n            end\n        end\n    end\n\
    \    return stack:is_empty()\nend", "    local opened = 0\n    for c in brackets:gmatch(\"\
    .\") do\n        if c == \"<\" then\n            opened = opened + 1\n       \
    \ elseif c == \">\" then\n            opened = opened - 1\n        end\n     \
    \   if opened < 0 then\n            return false\n        end\n    end\n    return\
    \ opened == 0\nend", "\treturn true\nend", "\tlocal stack = {}\n\tlocal len =\
    \ string.len(brackets)\n\tfor i = 1, len do\n\t\tlocal c = string.sub(brackets,\
    \ i, i)\n\t\tif c == \"<\" then\n\t\t\ttable.insert(stack, c)\n\t\telseif c ==\
    \ \">\" then\n\t\t\tif #stack > 0 then\n\t\t\t\ttable.remove(stack)\n\t\t\telse\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend", " \
    \   local count = 0\n    for i=1, #brackets do\n        local c = brackets:sub(i,i)\n\
    \        if c == \"<\" then\n            count = count + 1\n        elseif c ==\
    \ \">\" then\n            count = count - 1\n        end\n        if count < 0\
    \ then\n            return false\n        end\n    end\n    return count == 0\n\
    end", "    local a = 0\n    for i = 1, string.len(brackets) do\n        if brackets:sub(i,\
    \ i) == \"<\" then\n            a = a + 1\n        elseif brackets:sub(i, i) ==\
    \ \">\" then\n            a = a - 1\n        end\n        if a < 0 then\n    \
    \        return false\n        end\n    end\n    if a == 0 then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    local stack = {}\n\
    \    for i = 1, #brackets do\n        local br = brackets:sub(i, i)\n        if\
    \ br == \"<\" then\n            table.insert(stack, br)\n        elseif br ==\
    \ \">\" then\n            local top = table.remove(stack)\n            if top\
    \ ~= \"<\" then\n                return false\n            end\n        end\n\
    \    end\n    return #stack == 0\nend", "    -- TODO\n    local index = 0\n  \
    \  local length = string.len(brackets)\n    while index < length do\n        local\
    \ b = string.sub(brackets, index, index)\n        if b == \"<\" then\n       \
    \     local a = string.sub(brackets, index + 1, index + 1)\n            if a ==\
    \ \">\" then\n                brackets = string.sub(brackets, 1, index - 1) ..\
    \ string.sub(brackets, index + 2, length)\n                length = length - 2\n\
    \                index = index - 1\n            else\n                return false\n\
    \            end\n        end\n        index = index + 1\n    end\n    if brackets\
    \ == \"\" then\n        return true\n    else\n        return false\n    end\n\
    end", "  local is_correct = true\n  local count = 0\n  for i = 1, #brackets do\n\
    \    if brackets:sub(i, i) == \"<\" then\n      count = count + 1\n    elseif\
    \ brackets:sub(i, i) == \">\" then\n      count = count - 1\n    end\n    if count\
    \ < 0 then\n      is_correct = false\n      break\n    end\n  end\n  if count\
    \ ~= 0 then\n    is_correct = false\n  end\n  return is_correct\nend", "\tlocal\
    \ level = 0\n\tfor c in brackets:gmatch(\".\") do\n\t\tif c == \"<\" then\n\t\t\
    \tlevel = level + 1\n\t\telseif c == \">\" then\n\t\t\tlevel = level - 1\n\t\t\
    \tif level < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ level == 0\nend", "  local stack = {}\n  for c in brackets:gmatch(\".\") do\n\
    \    if c == \"<\" then\n      table.insert(stack, c)\n    elseif c == \">\" then\n\
    \      if #stack == 0 then\n        return false\n      else\n        table.remove(stack)\n\
    \      end\n    end\n  end\n  return #stack == 0\nend", "    --local ret = 0\n\
    \    local stack = {0}", "  local matches = {[\"<\"] = \">\", [\"(\"] = \")\"\
    , [\"{\"] = \"}\"}\n  local stack = {}\n  for i = 1, #brackets do\n    local c\
    \ = brackets:sub(i, i)\n    local stack_top = stack[#stack]\n    if matches[stack_top]\
    \ == c then\n      stack[#stack] = nil\n    else\n      stack[#stack + 1] = c\n\
    \    end\n  end\n  return #stack == 0\nend", '  local stack = {}', "    error\
    \ \"implement me\"\nend", "\tlocal count = 0\n\tfor i=1,#brackets do\n\t\tif brackets:sub(i,i)\
    \ == \"<\" then\n\t\t\tcount = count + 1\n\t\telseif brackets:sub(i,i) == \">\"\
    \ then\n\t\t\tcount = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn count == 0\nend", "    -- YOUR CODE HERE\n \
    \   local counter = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == \"<\" then\n            counter = counter + 1\n        elseif brackets:sub(i,\
    \ i) == \">\" then\n            counter = counter - 1\n        end\n        if\
    \ counter < 0 then\n            return false\n        end\n    end\n    if counter\
    \ == 0 then\n        return true\n    else\n        return false\n    end\nend",
  "    local stack = {}\n    for char in brackets:gmatch(\".\") do\n        if char\
    \ == \"<\" then\n            table.insert(stack, char)\n        elseif char ==\
    \ \">\" then\n            if table.remove(stack) ~= \"<\" then\n             \
    \   return false\n            end\n        end\n    end\n    return #stack ==\
    \ 0\nend", '    local bracket_count = 0', "    return brackets:match(\"^[<>]*$\"\
    ) and brackets:match(\"^<*>>*$\")\nend", "\tlocal depth = 0\n\tfor i = 1, #brackets\
    \ do\n\t\tif brackets:sub(i, i) == \"<\" then\n\t\t\tdepth = depth + 1\n\t\telseif\
    \ brackets:sub(i, i) == \">\" then\n\t\t\tdepth = depth - 1\n\t\t\tif depth <\
    \ 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn depth == 0\n\
    end", "  local stack = Stack:new()\n  local n = string.len(brackets)\n  for i\
    \ = 1, n do\n    local c = string.sub(brackets, i, i)\n    if c == \"<\" then\n\
    \      stack:push(c)\n    else\n      if stack:size() == 0 then\n        return\
    \ false\n      end\n      local d = stack:pop()\n      if d ~= \"<\" then\n  \
    \      return false\n      end\n    end\n  end\n  return stack:size() == 0\nend",
  "    count = 0\n    for i = 1, #brackets do\n        if brackets:sub(i, i) == \"\
    <\" then\n            count = count + 1\n        elseif brackets:sub(i, i) ==\
    \ \">\" then\n            count = count - 1\n        end\n        if count < 0\
    \ then\n            return false\n        end\n    end\n    return count == 0\n\
    end", "    local open = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == \"<\" then\n            open = open + 1\n        else\n            open\
    \ = open - 1\n        end\n        if open < 0 then\n            return false\n\
    \        end\n    end\n    return open == 0\nend", "  brackets = brackets:gsub('%[%]',\
    \ '')\n  while brackets:find('%[%[%]%]') do\n    brackets = brackets:gsub('%[%[%]%]',\
    \ '')\n  end\n  return brackets == ''\nend", "  local o, c = 0, 0\n  for b in\
    \ brackets:gmatch(\".\") do\n    if b == \"<\" then\n      o = o + 1\n    elseif\
    \ b == \">\" then\n      c = c + 1\n    end\n  end\n  return o == c\nend", "\t\
    local stack = {}\n\tfor c in brackets:gmatch(\".\") do\n\t\tif c == \"<\" then\n\
    \t\t\ttable.insert(stack, c)\n\t\telseif c == \">\" then\n\t\t\tif #stack == 0\
    \ then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\ttable.remove(stack)\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn #stack == 0\nend", "\t-- YOUR CODE HERE\n\tlocal\
    \ stack = Stack.new()\n\tlocal right = Stack.new()\n\tfor i=1,#brackets do\n\t\
    \tstack:push(brackets:sub(i,i))\n\tend\n\twhile not stack:is_empty() do\n\t\t\
    local a = stack:pop()\n\t\tif a == \"<\" then\n\t\t\tright:push(a)\n\t\telse\n\
    \t\t\tif right:is_empty() then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tright:pop()\n\
    \t\t\tend\n\t\tend\n\tend\n\tif right:is_empty() then\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend", "  local count = 0\n  for i = 1, #brackets do\n\
    \    if brackets:sub(i, i) == \"<\" then\n      count = count + 1\n    else\n\
    \      count = count - 1\n    end\n    if count < 0 then\n      return false\n\
    \    end\n  end\n  return count == 0\nend", "  local count = 0\n  for i = 1, #brackets\
    \ do\n    local c = brackets:sub(i, i)\n    if c == \"<\" then\n      count =\
    \ count + 1\n    elseif c == \">\" then\n      count = count - 1\n    end\n  \
    \  if count < 0 then\n      return false\n    end\n  end\n  return count == 0\n\
    end", "    local open_count = 0\n    for i = 1, string.len(brackets) do\n    \
    \    local char = string.sub(brackets, i, i)\n        if char == \"<\" then\n\
    \            open_count = open_count + 1\n        elseif char == \">\" then\n\
    \            open_count = open_count - 1\n        end\n        if open_count <\
    \ 0 then\n            return false\n        end\n    end\n    return open_count\
    \ == 0\nend", "    local count = 0\n    for char in brackets:gmatch(\".\") do\n\
    \        if char == \"<\" then\n            count = count + 1\n        elseif\
    \ char == \">\" then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend", "  local stack = {}\n  for c in brackets:gmatch(\".\") do\n    if c\
    \ == \"<\" then\n      stack[#stack + 1] = \">\"\n    elseif c == \">\" then\n\
    \      if #stack == 0 then\n        return false\n      end\n      stack[#stack]\
    \ = nil\n    end\n  end\n  return #stack == 0\nend", "  local function next_close_bracket(i)\n\
    \    return brackets:find(\">\", i, true)\n  end\n  local function next_open_bracket(i)\n\
    \    return brackets:find(\"<\", i, true)\n  end\n  local i = 1\n  while i <=\
    \ #brackets do\n    local j = next_close_bracket(i)\n    if j then\n      local\
    \ k = next_open_bracket(j)\n      if k and k < j then\n        i = k\n      else\n\
    \        return false\n      end\n    else\n      return true\n    end\n  end\n\
    \  return true\nend", "    local depth = 0\n    for i = 1, #brackets do\n    \
    \    if brackets:sub(i, i) == \"<\" then\n            depth = depth + 1\n    \
    \    elseif brackets:sub(i, i) == \">\" then\n            depth = depth - 1\n\
    \        end\n        if depth < 0 then\n            return false\n        end\n\
    \    end\n    return depth == 0\nend", '    local stack = {}', "\tlocal count\
    \ = 0\n\tfor i = 1, #brackets do\n\t\tif brackets:sub(i, i) == \"<\" then\n\t\t\
    \tcount = count + 1\n\t\telseif brackets:sub(i, i) == \">\" then\n\t\t\tcount\
    \ = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\treturn false\n\t\tend\n\t\
    end\n\treturn count == 0\nend", "  local accum = 0\n  for i=1,#brackets do\n \
    \   if brackets:sub(i,i) == \"<\" then\n      accum = accum + 1\n    else\n  \
    \    accum = accum - 1\n    end\n    if accum < 0 then\n      return false\n \
    \   end\n  end\n  return accum == 0\nend", "  -- TODO\n  local count = 0\n  for\
    \ i = 1,#brackets do\n    if brackets:sub(i,i) == \"<\" then\n      count = count\
    \ + 1\n    elseif brackets:sub(i,i) == \">\" then\n      count = count - 1\n \
    \   end\n    if count < 0 then\n      return false\n    end\n  end\n  if count\
    \ ~= 0 then\n    return false\n  end\n  return true\nend", "  local bracket_count\
    \ = 0\n  for i=1, #brackets do\n    if brackets:sub(i,i) == \"<\" then\n     \
    \ bracket_count = bracket_count + 1\n    elseif brackets:sub(i,i) == \">\" then\n\
    \      bracket_count = bracket_count - 1\n    end\n    if bracket_count < 0 then\n\
    \      return false\n    end\n  end\n  return bracket_count == 0\nend", "    local\
    \ counter = 0\n    for i = 1, #brackets do\n        if brackets:sub(i, i) == \"\
    <\" then\n            counter = counter + 1\n        elseif brackets:sub(i, i)\
    \ == \">\" then\n            counter = counter - 1\n        end\n        if counter\
    \ < 0 then\n            return false\n        end\n    end\n    return counter\
    \ == 0\nend", "  local br_count = 0\n  for i=1, #brackets do\n    local br = brackets:sub(i,i)\n\
    \    if br == \"<\" then\n      br_count = br_count + 1\n    elseif br == \">\"\
    \ then\n      br_count = br_count - 1\n    end\n    if br_count < 0 then\n   \
    \   return false\n    end\n  end\n  return br_count == 0\nend", "    local left,\
    \ right = brackets:match(\"^(<*)(>*)$\")\n    return (left:len() == right:len())\n\
    end", "\tlocal opening_brackets = { [\"<\"] = true }\n\tlocal closing_brackets\
    \ = { [\">\"] = true }\n\treturn brackets_match(brackets, opening_brackets, closing_brackets)\n\
    end", "  local left = 0\n  for i = 1, #brackets do\n    if brackets:sub(i, i)\
    \ == \"<\" then\n      left = left + 1\n    else\n      left = left - 1\n    end\n\
    \    if left < 0 then\n      return false\n    end\n  end\n  return left == 0\n\
    end", "    local bracket_count = 0\n    for i = 1, #brackets do\n        local\
    \ c = brackets:sub(i, i)\n        if c == \"<\" then\n            bracket_count\
    \ = bracket_count + 1\n        elseif c == \">\" then\n            bracket_count\
    \ = bracket_count - 1\n        end\n        if bracket_count < 0 then\n      \
    \      return false\n        end\n    end\n    return bracket_count == 0\nend",
  "    -- init '<' and '>' count\n    local lt_count = 0\n    local gt_count = 0\n\
    \    -- iterate through the brackets\n    for i = 1, #brackets do\n        local\
    \ char = brackets:sub(i, i)\n        if char == '<' then\n            lt_count\
    \ = lt_count + 1\n        elseif char == '>' then\n            gt_count = gt_count\
    \ + 1\n        end\n    end\n    -- return false if '<' count is greater than\
    \ '>' count\n    if lt_count > gt_count then\n        return false\n    end\n\
    \    -- return true if '<' count is equal to '>' count\n    if lt_count == gt_count\
    \ then\n        return true\n    end\nend", "    local max_brackets = 0\n    local\
    \ _, count = brackets:gsub(\"<\", \"\")\n    for _, b in ipairs(brackets:totable())\
    \ do\n        if b == \"<\" then\n            max_brackets = max_brackets + 1\n\
    \        else\n            max_brackets = max_brackets - 1\n        end\n    \
    \    if max_brackets < 0 then\n            return false\n        end\n    end\n\
    \    return max_brackets == 0\nend", "    local last_bracket = nil\n    for i\
    \ = 1, #brackets do\n        local bracket = brackets:sub(i, i)\n        if bracket\
    \ == \"<\" then\n            last_bracket = bracket\n        elseif bracket ==\
    \ \">\" then\n            if last_bracket == nil then\n                return\
    \ false\n            end\n            last_bracket = nil\n        end\n    end\n\
    \    return last_bracket == nil\nend", "  local left = 0\n  for i = 1, string.len(brackets)\
    \ do\n    if (string.sub(brackets, i, i) == \"<\") then\n      left = left + 1\n\
    \    else\n      left = left - 1\n    end\n    if (left < 0) then\n      return\
    \ false\n    end\n  end\n  return left == 0\nend", "    local stack = Stack:new()\n\
    \    local bracket_map = {\n        ['<'] = '>',\n        ['['] = ']',\n     \
    \   ['{'] = '}',\n        ['('] = ')'\n    }\n    for i = 1, #brackets do\n  \
    \      local char = brackets:sub(i, i)\n        if bracket_map[char] then\n  \
    \          stack:push(char)\n        elseif char == '>' then\n            local\
    \ top = stack:pop()\n            if top ~= '<' then\n                return false\n\
    \            end\n        elseif char == ']' then\n            local top = stack:pop()\n\
    \            if top ~= '[' then\n                return false\n            end\n\
    \        elseif char == '}' then\n            local top = stack:pop()\n      \
    \      if top ~= '{' then\n                return false\n            end\n   \
    \     elseif char == ')' then\n            local top = stack:pop()\n         \
    \   if top ~= '(' then\n                return false\n            end\n      \
    \  end\n    end\n    return stack:empty()\nend", "    local n_left, n_right =\
    \ 0, 0\n    for i = 1, #brackets do\n        if brackets:sub(i, i) == \"<\" then\n\
    \            n_left = n_left + 1\n        else\n            n_right = n_right\
    \ + 1\n        end\n        if n_right > n_left then\n            return false\n\
    \        end\n    end\n    return n_left == n_right\nend", "    return brackets:len()\
    \ == 0 or brackets:match(\"^><.*\") == nil and\n        correct_bracketing(brackets:gsub(\"\
    <>\", \"\"))\nend", "  while brackets:find('><') do\n    brackets = brackets:gsub('><',\
    \ '')\n  end\n  return brackets == ''\nend", "    local opening = 0\n    for character\
    \ in brackets:gmatch('.') do\n        if character == '<' then\n            opening\
    \ = opening + 1\n        elseif character == '>' then\n            opening = opening\
    \ - 1\n        end\n        if opening < 0 then\n            return false\n  \
    \      end\n    end\n    return opening == 0\nend", "    local n = string.len(brackets)\n\
    \    local max_level = 0\n    local level = 0\n    for i = 1, n do\n        local\
    \ c = string.sub(brackets, i, i)\n        if c == \"<\" then\n            level\
    \ = level + 1\n            if level > max_level then\n                max_level\
    \ = level\n            end\n        elseif c == \">\" then\n            level\
    \ = level - 1\n            if level < 0 then\n                return false\n \
    \           end\n        else\n            error(\"unexpected character\")\n \
    \       end\n    end\n    return level == 0\nend", "    error(\"Not yet implemented!\"\
    )\nend", "  local open_brackets = 0\n  for i = 1, #brackets do\n    if brackets:sub(i,\
    \ i) == \"<\" then\n      open_brackets = open_brackets + 1\n    else\n      open_brackets\
    \ = open_brackets - 1\n    end\n    if open_brackets < 0 then\n      return false\n\
    \    end\n  end\n  return open_brackets == 0\nend", "    local opened = 0\n  \
    \  for c in brackets:gmatch(\".\") do\n        if c == \"<\" then\n          \
    \  opened = opened + 1\n        elseif c == \">\" then\n            opened = opened\
    \ - 1\n        end\n        if opened < 0 then\n            return false\n   \
    \     end\n    end\n    return opened == 0\nend", "  local stack = {}\n  for i\
    \ = 1, #brackets do\n    local c = brackets:sub(i, i)\n    if c == \"<\" then\n\
    \      table.insert(stack, c)\n    elseif c == \">\" then\n      local b = table.remove(stack)\n\
    \      if b ~= \"<\" then\n        return false\n      end\n    end\n  end\n \
    \ return true\nend", "    local last_open = 0\n    local last_close = 0\n    for\
    \ i = 1, #brackets do\n        if brackets:sub(i, i) == \"<\" then\n         \
    \   last_open = i\n        elseif brackets:sub(i, i) == \">\" then\n         \
    \   last_close = i\n        end\n        if last_close < last_open then\n    \
    \        return false\n        end\n    end\n    return true\nend", "  -- We want\
    \ to iterate over the entire string,\n  -- but we want to look ahead by one character\
    \ at each step.\n  -- So we begin by peeking at the first character.\n  local\
    \ prev_char = brackets:sub(1,1)\n  local index = 2\n  local string_length = brackets:len()\n\
    \  while index <= string_length do\n    local curr_char = brackets:sub(index,index)\n\
    \    if prev_char == \"<\" and curr_char == \">\" then\n      -- Remove the characters\
    \ we just consumed\n      -- The length will change as we delete characters\n\
    \      brackets = brackets:sub(1,index-2) .. brackets:sub(index+1)\n      -- We\
    \ need to look at the character after these.\n      -- To make sure to do this,\
    \ we decrement the index\n      -- by 2 rather than 1.\n      index = index -\
    \ 2\n      string_length = string_length - 2\n    end\n    prev_char = curr_char\n\
    \    index = index + 1\n  end\n  return brackets:len() == 0\nend", "  local open_count\
    \ = 0\n  for i=1,#brackets do\n    if brackets:sub(i,i) == \"<\" then\n      open_count\
    \ = open_count + 1\n    elseif brackets:sub(i,i) == \">\" then\n      open_count\
    \ = open_count - 1\n    end\n    if open_count < 0 then\n      return false\n\
    \    end\n  end\n  return open_count == 0\nend", "  local bcount = 0\n  for c\
    \ in brackets:gmatch\".\" do\n    if c == \"<\" then\n      bcount = bcount +\
    \ 1\n    elseif c == \">\" then\n      bcount = bcount - 1\n    end\n    if bcount\
    \ < 0 then\n      return false\n    end\n  end\n  return bcount == 0\nend", " \
    \   local open_count = 0\n    for c in brackets:gmatch(\".\") do\n        if c\
    \ == \"<\" then\n            open_count = open_count + 1\n        elseif c ==\
    \ \">\" then\n            open_count = open_count - 1\n        end\n        if\
    \ open_count < 0 then\n            return false\n        end\n    end\n    return\
    \ open_count == 0\nend", "    -- TODO: Your code here\nend", "  local stack =\
    \ {}\n  for i = 1, #brackets do\n    local c = brackets:sub(i, i)\n    if c ==\
    \ \"<\" then\n      table.insert(stack, i)\n    elseif c == \">\" then\n     \
    \ if #stack == 0 then\n        return false\n      else\n        table.remove(stack)\n\
    \      end\n    end\n  end\n  return #stack == 0\nend", "\tlocal num_seen = 0\n\
    \tfor i = 1, #brackets do\n\t\tlocal c = brackets:sub(i, i)\n\t\tif c == \"<\"\
    \ then\n\t\t\tnum_seen = num_seen + 1\n\t\telseif c == \">\" then\n\t\t\tnum_seen\
    \ = num_seen - 1\n\t\t\tif num_seen < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn num_seen == 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
