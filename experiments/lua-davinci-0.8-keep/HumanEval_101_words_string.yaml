name: HumanEval_101_words_string
language: lua
prompt: "-- You will be given a string of words separated by commas or spaces. Your\
  \ task is\n-- to split the string into words and return an array of the words.\n\
  -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"\
  name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five, six\"\
  ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal function\
  \ words_string(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
  \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
  \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One',\
  \ 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi, my\
  \ name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three,\
  \ four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''),\
  \ {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal word_array = {}\n\tlocal word = \"\"\n\tfor ch in s:gmatch(\"\
    .\") do\n\t\tif ch == \" \" or ch == \",\" then\n\t\t\tif word ~= \"\" then\n\t\
    \t\t\ttable.insert(word_array, word)\n\t\t\t\tword = \"\"\n\t\t\tend\n\t\telse\n\
    \t\t\tword = word .. ch\n\t\tend\n\tend\n\ttable.insert(word_array, word)\n\t\
    return word_array\nend", "  return {}\nend", "  -- Please write code here to return\
    \ your answer.\nend", "  local words = {}\n  for word in s:gmatch(\"%w+\") do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "    return s:match(\"\
    ([^, ]+)\")\nend", "    local words = {}\n    local i = 1\n    for word in string.gmatch(s,\
    \ '([^,%s]+)') do\n        words[i] = word\n        i = i + 1\n    end\n    return\
    \ words\nend", "    local r = {}\n    for w in string.gmatch(s, '([^,%s]+)') do\n\
    \        table.insert(r, w)\n    end\n    return r\nend", "\tif not s then return\
    \ {} end\n\treturn explode(',', s)\nend", "\t-- body\n\tlocal words = {}\n\tlocal\
    \ word_start = 1\n\tfor i = 1, #s do\n\t\tif s:sub(i, i) == \" \" or s:sub(i,\
    \ i) == \",\" then\n\t\t\ttable.insert(words, s:sub(word_start, i - 1))\n\t\t\t\
    word_start = i + 1\n\t\tend\n\tend\n\ttable.insert(words, s:sub(word_start, #s))\n\
    \treturn words\nend", "    local words = {}\n    for word in s:gmatch(\"[^%s,]+\"\
    ) do\n        table.insert(words, word)\n    end\n    return words\nend", "  local\
    \ t = {}\n  local i = 1\n  local words = s:gmatch(\"%S+\")\n  for word in words\
    \ do\n    t[i] = word\n    i = i + 1\n  end\n  return t\nend", "    return {}\n\
    end", "\treturn {}\nend", "  local l = {}\n  for w in s:gmatch(\"%S+\") do\n \
    \   l[#l+1] = w\n  end\n  return l\nend", "    local words = {}\n    for w in\
    \ string.gmatch(s, \"%S+\") do\n        table.insert(words, w)\n    end\n    return\
    \ words\nend", "    return nil\nend", "    local words = {}\n    for word in s:gmatch(\"\
    %S+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
  "  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "    -- your code here\n    return {}\n\
    end", "    local out = {}\n    local word = {}\n    for c in s:gmatch('.') do\n\
    \        if c == ' ' or c == ',' then\n            table.insert(out, table.concat(word))\n\
    \            word = {}\n        else\n            table.insert(word, c)\n    \
    \    end\n    end\n    table.insert(out, table.concat(word))\n    return out\n\
    end", "    local words = {}\n    for word in s:gmatch(\"[^%s,]+\") do\n      \
    \  table.insert(words, word)\n    end\n    return words\nend", "    local words\
    \ = {}\n    local i = 1\n    while true do\n        local j = string.find(s, \"\
    ,\", i)\n        if j then\n            words[#words + 1] = string.sub(s, i, j\
    \ - 1)\n            i = j + 1\n        else\n            words[#words + 1] = string.sub(s,\
    \ i)\n            break\n        end\n    end\n    return words\nend", "   local\
    \ words = {}\n   for word in s:gmatch(\"%S+\") do\n      words[#words+1] = word\n\
    \   end\n   return words\nend", "  local words = {}\n  for word in s:gmatch(\"\
    %S+\") do\n    table.insert(words, word)\n  end\n  return words\nend", "    --\
    \ get rid of leading and trailing spaces\n    s = s:gsub(\"^%s*(.-)%s*$\", \"\
    %1\")\n    -- make all spaces single spaces\n    s = s:gsub(\"%s+\", \" \")\n\
    \    -- split into words\n    local words = {}\n    for word in s:gmatch(\"%S+\"\
    ) do\n        table.insert(words, word)\n    end\n    return words\nend", "  return\
    \ {}\nend", "  return {}\nend", "\tlocal t = {}\n\tfor w in s:gmatch(\"%w+\")\
    \ do\n\t\ttable.insert(t, w)\n\tend\n\treturn t\nend", "  return s:split('%s*,%s*')\n\
    end", "  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend", "    local list = {}\n    for word in s:gmatch(\"\
    %S+\") do\n        table.insert(list, word)\n    end\n    return list\nend", " \
    \  local words = {}\n   for w in s:gmatch(\"[^,%s]+\") do\n      words[#words+1]\
    \ = w\n   end\n   return words\nend", "   local words = {}\n   for word in s:gmatch(\"\
    [^,%s]+\") do\n      words[#words + 1] = word\n   end\n   return words\nend",
  "  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "    local words = {}\n    for word in s:gmatch(\"\
    %w+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
  "   local ret = {}\n   for w in s:gmatch(\"%S+\") do\n      table.insert(ret, w)\n\
    \   end\n   return ret\nend", "  local words = {}\n  local pattern = '(%w+)'\n\
    \  for word in s:gmatch(pattern) do\n    table.insert(words, word)\n  end\n  return\
    \ words\nend", "\tlocal words = {}\n\tfor word in s:gmatch(\"[^,%s]+\") do\n\t\
    \ttable.insert(words, word)\n\tend\n\treturn words\nend", "    local result =\
    \ {}\n    for w in s:gmatch(\"%w+\") do\n        table.insert(result, w)\n   \
    \ end\n    return result\nend\nassert(words_string(\"Hi, my name is John\") ==\
    \ {\"Hi\", \"my\", \"name\", \"is\", \"John\"})\nassert(words_string(\"One, two,\
    \ three, four, five, six\") == {\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"})", "  return s:gmatch('%w+')\nend", "  local words = {}\n  for word\
    \ in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "\t--local i = 1\n\tlocal words = {}\n\tfor word in s:gmatch(\"%w+\") do\n\
    \t\ttable.insert(words, word)\n\tend\n\treturn words\nend", "    local words =\
    \ {}\n    for word in s:gmatch(\"%w+\") do\n        table.insert(words, word)\n\
    \    end\n    return words\nend", "    -- your code here\n    return {}\nend",
  "  local t = {}\n  for w in s:gmatch(\"%S+\") do\n    t[#t+1] = w\n  end\n  return\
    \ t\nend", "    return {}\nend", "  local res = {}\n  for word in s:gmatch(\"\
    [^ ,]+\") do\n    table.insert(res, word)\n  end\n  return res\nend", "  return\
    \ string.split(s, '%s+')\nend", "    return {}\nend", "    -- TODO: Implement\
    \ this function\n    return {}\nend", "    return s:split('[^%w+]')\nend", " \
    \ local res = {}\n  for word in s:gmatch(\"%w+\") do\n    table.insert(res, word)\n\
    \  end\n  return res\nend", "  local t = {}\n  for w in s:gmatch(\"%w+\") do\n\
    \    t[#t+1] = w\n  end\n  return t\nend", "  -- your code here\n  local words\
    \ = {}\n  local word = {}\n  for c in s:gmatch'.' do\n    if c == ' ' or c ==\
    \ ',' then\n      words[#words+1] = table.concat(word)\n      word = {}\n    else\n\
    \      word[#word+1] = c\n    end\n  end\n  words[#words+1] = table.concat(word)\n\
    \  return words\nend", "    return {s:match((s:gsub(\"[^, ]+\", \"(%1)\")))}\n\
    end", "  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = {}\n  for m in s:gmatch(\"\
    %S+\") do table.insert(words, m) end\n  return words\nend", "  local words = {}\n\
    \  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  return\
    \ words\nend", "    -- your code here\n    return s:split(\" \")\nend", "    return\
    \ {}\nend", "  return s:gmatch(\"%w+\")\nend", "    local result = {}\n    for\
    \ match in s:gmatch(\"[^,%s]+\") do\n        table.insert(result, match)\n   \
    \ end\n    return result\nend", "  local words = {}\n  for word in s:gmatch(\"\
    %S+\") do\n    table.insert(words, word)\n  end\n  return words\nend", "    local\
    \ words = {}\n    for word in s:gmatch(\"[^,%s]+\") do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "  return s:gmatch(\"%S+\")\nend", " \
    \ local words = {}\n  local word, quote\n  for w in s:gmatch(\"([^%s\\\"]+)|([\\\
    \"][^\\\"]+[\\\"])\") do\n    word = w:gsub(\"\\\"\", \"\")\n    words[#words\
    \ + 1] = word\n  end\n  return words\nend", "    local words = {}\n    for w in\
    \ s:gmatch(\"[^,%s]+\") do\n        table.insert(words, w)\n    end\n    return\
    \ words\nend", "  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "    -- TODO: split string into words\n\
    \    return string.split(s, \" \")\nend", "    local words = {}\n    for word\
    \ in s:gmatch(\"[^,%s]+\") do\n        table.insert(words, word)\n    end\n  \
    \  return words\nend", "\tlocal words = {}\n\tfor w in s:gmatch(\"%S+\") do\n\t\
    \ttable.insert(words, w)\n\tend\n\treturn words\nend", "  local words = {}\n \
    \ for word in s:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n  return\
    \ words\nend", "    return s:gmatch(\"%w+\")\nend", "  local t = {}\n  for w in\
    \ s:gmatch(\"%w+\") do\n    t[#t+1] = w\n  end\n  return t\nend", "  return {}\n\
    end", "\tlocal tab = {}\n\tfor word in s:gmatch(\"%S+\") do\n\t\ttable.insert(tab,\
    \ word)\n\tend\n\treturn tab\nend", "    -- TODO: Your code here\nend", "    --\
    \ https://stackoverflow.com/a/2453660/3337935\n    return s:gmatch(\"%S+\")\n\
    end", "  return string.gmatch(s, \"%w+\")\nend", "    local result = {}\n    for\
    \ word in s:gmatch(\"%w+\") do\n        table.insert(result, word)\n    end\n\
    \    return result\nend", "  local words = {}\n  local word = \"\"\n  local index\
    \ = 1\n  while s:sub(index, index) ~= \"\" do\n    if s:sub(index, index) == \"\
    \ \" or s:sub(index, index) == \",\" then\n      if word ~= \"\" then\n      \
    \  table.insert(words, word)\n        word = \"\"\n      end\n    else\n     \
    \ word = word .. s:sub(index, index)\n    end\n    index = index + 1\n  end\n\
    \  if word ~= \"\" then\n    table.insert(words, word)\n  end\n  return words\n\
    end", "   local words = {}\n   for i, word in ipairs(split(s, ' ')) do\n     \
    \ if word ~= \"\" then\n         words[i] = word\n      end\n   end\n   return\
    \ words\nend", "    return {}\nend", "  local res = {}\n  for word in s:gmatch(\"\
    [^%s,]+\") do\n    table.insert(res, word)\n  end\n  return res\nend", "  local\
    \ words = {}\n  for word in s:gmatch(\"[^%s,]+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "    if s == \"\" then\n        return {}\n\
    \    end\n    local words = {}\n    for word in s:gmatch(\"[^%s,]+\") do\n   \
    \     table.insert(words, word)\n    end\n    return words\nend", "    assert(s,\
    \ \"String is nil\")\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n\
    \        table.insert(words, w)\n    end\n    return words\nend", "    local result\
    \ = {}\n    for k in string.gmatch(s, \"[^%s]+\") do\n        table.insert(result,\
    \ k)\n    end\n    return result\nend", "  local result = {}\n  for word in s:gmatch(\"\
    %w+\") do\n    table.insert(result, word)\n  end\n  return result\nend", "   \
    \ return {}\nend", "    return split(s, ',%s')\nend", "  -- find indices of the\
    \ first and last character of each word\n  local indices = {}\n  for i, c in utf8.codes(s)\
    \ do\n    if c ~= 32 and c ~= 44 then -- not a space or comma\n      if #indices\
    \ == 0 or indices[#indices].end + 1 ~= i then\n        indices[#indices + 1] =\
    \ { start = i, end = i }\n      else\n        indices[#indices].end = i\n    \
    \  end\n    end\n  end", "  local temp = {}\n  for i in string.gmatch(s, \"%S+\"\
    ) do\n    table.insert(temp, i)\n  end\n  return temp\nend", "  local res = {}\n\
    \  local i = 1\n  local j = 1\n  while i <= #s do\n    while string.find(s, '[^,%s]',\
    \ i) do\n      i = i + 1\n    end\n    if i > j then\n      table.insert(res,\
    \ string.sub(s, j, i - 1))\n    end\n    i = i + 1\n    j = i\n  end\n  return\
    \ res\nend", "  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "    local words = {}\n    for word in s:gmatch(\"\
    %S+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
  "    -- and here is an implementation using simple pattern matching\n    return\
    \ string.gmatch(s, \"%w+\")\nend", "\tlocal words = {}\n\tfor w in s:gmatch(\"\
    %S+\") do\n\t\ttable.insert(words, w)\n\tend\n\treturn words\nend", "\tlocal ret\
    \ = {}\n\tlocal word = \"\"\n\tfor i = 1, s:len() do\n\t\tlocal ch = s:sub(i,\
    \ i)\n\t\tif ch == \" \" or ch == \",\" then\n\t\t\tif word ~= \"\" then\n\t\t\
    \t\ttable.insert(ret, word)\n\t\t\t\tword = \"\"\n\t\t\tend\n\t\telse\n\t\t\t\
    word = word .. ch\n\t\tend\n\tend\n\tif word ~= \"\" then\n\t\ttable.insert(ret,\
    \ word)\n\tend\n\treturn ret\nend", "    local tokens = {}\n    for match in string.gmatch(s,\
    \ '([^,%s]+)') do\n        table.insert(tokens, match)\n    end\n    return tokens\n\
    end", "    local r = {}\n    local rr = 1\n    local start = 1\n    local i =\
    \ 0\n    local n = string.len(s)\n    while i < n do\n        local c = string.sub(s,\
    \ i+1, i+1)\n        if c == ' ' or c == ',' then\n            local word = string.sub(s,\
    \ start, i)\n            if word ~= '' then\n                r[rr] = word\n  \
    \              rr = rr + 1\n            end\n            start = i + 2\n     \
    \   end\n        i = i + 1\n    end\n    local word = string.sub(s, start, i)\n\
    \    if word ~= '' then\n        r[rr] = word\n    end\n    return r\nend", "\t\
    local words = {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\ttable.insert(words,\
    \ word)\n\tend\n\treturn words\nend", "  -- your code here\n  words = {}\n  for\
    \ word in s:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n  return\
    \ words\nend", "    -- TODO: your code here\nend", "    return {}\nend", "  local\
    \ words = {}\n  for word in s:gmatch(\"%w+\") do table.insert(words, word) end\n\
    \  return words\nend", "\t-- YOUR CODE HERE\n\twords={}\n\ti=1\n\tfor word in\
    \ string.gmatch(s,\"%w+\") do\n\t\twords[i]=word\n\t\ti=i+1\n\tend\n\treturn words\n\
    end", "    if not s then return {} end\n    local t = {}\n    for w in s:gmatch(\"\
    %S+\") do\n        table.insert(t, w)\n    end\n    return t\nend", "    local\
    \ words = {}\n    for w in s:gmatch(\"[^,%s]+\") do\n        table.insert(words,\
    \ w)\n    end\n    return words\nend", "    return stringx.split(s)\nend", " \
    \ local words = {}\n  for word in s:gmatch(\"[^,%s]+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "    local words = {}\n    for w in string.gmatch(s,\
    \ '([^,%s]+)') do\n        table.insert(words, w)\n    end\n    return words\n\
    end", "    -- your code here\n    local t = {}\n    for word in s:gmatch(\"%w+\"\
    ) do\n        table.insert(t, word)\n    end\n    return t\nend", "    words =\
    \ {}\n    for word in s:gmatch(\"%w+\") do\n        table.insert(words, word)\n\
    \    end\n    return words\nend", "  local words = {}\n  for w in s:gmatch(\"\
    %S+\") do\n    table.insert(words, w)\n  end\n  return words\nend", "    return\
    \ utils.string_split(s, \",\")\nend", "    return {}\nend", "  -- body\nend",
  "    local arr = {}\n    for w in s:gmatch(\"%w+\") do\n        table.insert(arr,\
    \ w)\n    end\n    return arr\nend", "    return {}\nend", "\tlocal words = {}\n\
    \tfor w in s:gmatch(\"[^,%s]+\") do\n\t\ttable.insert(words, w)\n\tend\n\treturn\
    \ words\nend", "  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "    return p.split(s, \"[^%s,]+\")\nend",
  "    local t = {}\n    for word in s:gmatch(\"[^,%s]+\") do\n        table.insert(t,\
    \ word)\n    end\n    return t\nend", "\t-- your code here\nend", "   local words\
    \ = {}\n   for word in s:gmatch(\"%w+\") do table.insert(words, word) end\n  \
    \ return words\nend", "   -- TODO\nend", "    local words = {}\n    local i =\
    \ 1\n    while true do\n        local j = s:find(', ', i)\n        if j then\n\
    \            table.insert(words, s:sub(i, j - 1))\n            i = j + 2\n   \
    \     else\n            table.insert(words, s:sub(i))\n            break\n   \
    \     end\n    end\n    return words\nend", "  return string.gmatch(s, \"%w+\"\
    )\nend", "  local words = {}\n  local start = 1\n  local index = 1\n  local len\
    \ = #s\n  for i = 1, len do\n    local char = s:sub(i, i)\n    if char == ' '\
    \ or char == ',' then\n      words[index] = s:sub(start, i - 1)\n      index =\
    \ index + 1\n      start = i + 1\n    end\n  end\n  words[index] = s:sub(start,\
    \ len)\n  return words\nend", "  local words = {}\n  for w in s:gmatch(\"%S+\"\
    ) do\n    table.insert(words, w)\n  end\n  return words\nend", "    local t =\
    \ {}\n    for word in s:gmatch(\"%w+\") do\n        table.insert(t, word)\n  \
    \  end\n    return t\nend", "    local words = {}\n    for word in s:gmatch(\"\
    %S+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
  "    -- your code here\n    words = {}\n    for i in string.gmatch(s, \"%S+\") do\n\
    \        table.insert(words, i)\n    end\n    return words\nend", "  -- split\
    \ string into words\n  -- return an array of words\n  return s:gmatch(\"%S+\"\
    )\nend", "   return utils.split(s, \", \")\nend", "    -- your code here\n   \
    \ local res = {}\n    for w in s:gmatch(\"%w+\") do\n        table.insert(res,\
    \ w)\n    end\n    return res\nend", "  local words = {}\n  local pattern = \"\
    ([^,%s]+)\"\n  for word in s:gmatch(pattern) do\n    table.insert(words, word)\n\
    \  end\n  return words\nend", "\tlocal t = {}\n\tlocal i = 1\n\tfor word in s:gmatch(\"\
    [^%s,]+\") do\n\t\tt[i] = word\n\t\ti = i + 1\n\tend\n\treturn t\nend", "\t--[[\n\
    \t\tlocal function split(s, separator)\n\t\t\tlocal result = {}\n\t\t\tlocal regex\
    \ = ('([^%s]+)'):format(separator)\n\t\t\tfor each in s:gmatch(regex) do\n\t\t\
    \t\ttable.insert(result, each)\n\t\t\tend\n\t\t\treturn result\n\t\tend\n\t\t\
    local words = split(s, \",\")\n\t\tlocal result = {}\n\t\tfor k,v in pairs(words)\
    \ do\n\t\t\tfor _, word in pairs(split(v, \"%s\")) do\n\t\t\t\ttable.insert(result,\
    \ word)\n\t\t\tend\n\t\tend\n\t\treturn result\n\t]]\n\t--local words = s:gmatch(\"\
    ([^%s]+)\")\n\tlocal words = {}\n\tfor word in s:gmatch(\"([^%s]+)\") do\n\t\t\
    table.insert(words, word)\n\tend\n\treturn words\nend", "    local function helper(s,\
    \ len, ret)\n        if len < 1 then\n            return ret\n        end\n  \
    \      local i = string.find(s, ' ')\n        if i then\n            table.insert(ret,\
    \ string.sub(s, 1, i - 1))\n            return helper(string.sub(s, i + 1), len\
    \ - i, ret)\n        else\n            table.insert(ret, s)\n            return\
    \ ret\n        end\n    end\n    return helper(s, string.len(s), {})\nend", " \
    \ -- Your code here\nend", "  local words = {}\n  for word in s:gmatch(\"%S+\"\
    ) do\n    table.insert(words, word)\n  end\n  return words\nend", "    return\
    \ {}\nend", "  return {}\nend", "  local words = {}\n  for word in s:gmatch(\"\
    %w+\") do\n    table.insert(words, word)\n  end\n  return words\nend", "    local\
    \ words = {}\n    for word in s:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "   local res = {}\n   local string_view\
    \ = ffi.cast(\"const char *\", s)\n   local end_of_word\n   repeat\n      end_of_word\
    \ = string_view\n      while end_of_word[0] ~= 0 and not string.find(end_of_word[0],\
    \ \"[^ \\t\\n]\") do\n         end_of_word = end_of_word + 1\n      end\n    \
    \  if end_of_word[0] ~= 0 then\n         local start_of_word = end_of_word\n \
    \        while end_of_word[0] ~= 0 and not string.find(end_of_word[0], \"[ \\\
    t\\n]\") do\n            end_of_word = end_of_word + 1\n         end\n       \
    \  table.insert(res, ffi.string(start_of_word, end_of_word - start_of_word))\n\
    \      end\n   until end_of_word[0] == 0\n   return res\nend", "    local words\
    \ = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, w)\n  \
    \  end\n    return words\nend", "\tlocal res = {}\n\tlocal tmp = {}\n\tfor i =\
    \ 1, #s do\n\t\tif s:sub(i, i) == \" \" or s:sub(i, i) == \",\" then\n\t\t\tlocal\
    \ word = table.concat(tmp)\n\t\t\tif word ~= \"\" then\n\t\t\t\ttable.insert(res,\
    \ word)\n\t\t\tend\n\t\t\ttmp = {}\n\t\telse\n\t\t\ttable.insert(tmp, s:sub(i,\
    \ i))\n\t\tend\n\tend\n\tlocal word = table.concat(tmp)\n\tif word ~= \"\" then\n\
    \t\ttable.insert(res, word)\n\tend\n\treturn res\nend", "  return split(s, \"\
    ,%s\")\nend", "    return {}\nend", "   local words = {}\n   for w in string.gmatch(s,\
    \ \"[^%s,]+\") do\n      table.insert(words, w)\n   end\n   return words\nend",
  "  return filter(function(x) return x ~= '' end, split(s, '%s+'))\nend", "  local\
    \ res = {}\n  for word in s:gmatch(\"%w+\") do\n    table.insert(res, word)\n\
    \  end\n  return res\nend", "    local t = {}\n    for word in s:gmatch(\"[^%s,]+\"\
    ) do\n        table.insert(t, word)\n    end\n    return t\nend", "\tlocal res\
    \ = {}\n\tfor w in s:gmatch(\"%S+\") do\n\t\tres[#res+1] = w\n\tend\n\treturn\
    \ res\nend", "\tlocal s0 = s:gsub(\",\", \" \")\n\tlocal r = {}\n\tfor w in s0:gmatch(\"\
    %S+\") do\n\t\ttable.insert(r, w)\n\tend\n\treturn r\nend", "    if not s then\
    \ return {} end\n    local r = {}\n    for w in s:gmatch(\"%w+\") do\n       \
    \ r[#r+1] = w\n    end\n    return r\nend", "    return s:gmatch(\"%S+\")\nend",
  "  words = {}\n  word = ''\n  for c in s:gmatch\".\" do\n    if c == ' ' or c ==\
    \ ',' then\n      if word ~= '' then\n        table.insert(words, word)\n    \
    \    word = ''\n      end\n    else\n      word = word .. c\n    end\n  end\n\
    \  if word ~= '' then\n    table.insert(words, word)\n  end\n  return words\n\
    end", "    local r = {}\n    for w in s:gmatch(\"[^%s,]+\") do\n        r[#r+1]\
    \ = w\n    end\n    return r\nend", "    if not s then return nil end\n    local\
    \ s = s:gsub('%s+', ' ')\n    local words = {}\n    for w in s:gmatch('([^, ]+)')\
    \ do\n        table.insert(words, w)\n    end\n    return words\nend", "    --\
    \ your code here\n    -- return a table\n    t = {}\n    for word in string.gmatch(s,\
    \ \"%w+\") do\n        table.insert(t, word)\n    end\n    return t\nend", " \
    \   return {}\nend", "\twords = {}\n\tfor word in s:gmatch(\"%w+\") do table.insert(words,\
    \ word) end\n\treturn words\nend", "  words = {}\n  local pattern = '([^,%s]+)'\n\
    \  for word in string.gmatch(s, pattern) do\n    table.insert(words, word)\n \
    \ end\n  return words\nend", "    return split(s, \" \")\nend", "    -- TODO:\
    \ split the string and return an array of words\n    local a = {}\n    for p in\
    \ s:gmatch(\"%S+\") do\n        table.insert(a, p)\n    end\n    return a\nend",
  "    return split(s, \" \")\nend", "  local splitted = {}\n  for str in string.gmatch(s,\
    \ \"%w+\") do\n    table.insert(splitted, str)\n  end\n  return splitted\nend",
  "    local list = {}\n    local word = ''\n    local space = true\n    local count\
    \ = 1\n    for i = 1, #s do\n        if s:sub(i, i) == ' ' or s:sub(i, i) == ','\
    \ then\n            if not space then\n                list[count] = word\n  \
    \              count = count + 1\n                word = ''\n            end\n\
    \            space = true\n        else\n            space = false\n         \
    \   word = word .. s:sub(i, i)\n        end\n    end\n    if not space then\n\
    \        list[count] = word\n    end\n    return list\nend", "  return string.gmatch(s,\
    \ \"[^,%s]+\")\nend", "  local words = {}\n  for match in s:gmatch(\"%S+\") do\n\
    \    table.insert(words, match)\n  end\n  return words\nend", "    local words\
    \ = {}\n    for w in s:gmatch(\"[^,%s]+\") do\n        table.insert(words, w)\n\
    \    end\n    return words\nend", "  local words = {}\n  for word in s:gmatch(\"\
    [^%s,]+\") do\n    table.insert(words, word)\n  end\n  return words\nend", " \
    \  return match(s, '(%w+)')\nend", "    return {}\nend", "    return {}\nend",
  "  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "    local t = {}\n    for word in s:gmatch(\"\
    %w+\") do\n        table.insert(t, word)\n    end\n    return t\nend", "  local\
    \ words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n\
    \  end\n  return words\nend", "  -- TODO: Implement your solution here\n  local\
    \ result = {}\n  for word in s:gmatch(\"%w+\") do\n    table.insert(result, word)\n\
    \  end\n  return result\nend", "    local words = {}\n    for word in s:gmatch(\"\
    [^,%s]+\") do\n        table.insert(words, word)\n    end\n    return words\n\
    end", "\tlocal ret = {}\n\tfor word in s:gmatch(\"%S+\") do\n\t\ttable.insert(ret,\
    \ word)\n\tend\n\treturn ret\nend", "    return {}\nend", "    local res = {}\n\
    \    for i, j in string.gmatch(s, \"(%w+),*%s*\") do\n        table.insert(res,\
    \ i)\n    end\n    return res\nend", "   local words = {}\n   for w in string.gmatch(s,\
    \ \"%w+\") do\n      table.insert(words, w)\n   end\n   return words\nend", "\t\
    local arr = {}\n\tfor word in s:gmatch(\"[^, ]+\") do\n\t\ttable.insert(arr, word)\n\
    \tend\n\treturn arr\nend", "\tlocal t = {}\n\tfor w in s:gmatch(\"[^,%s]+\") do\n\
    \t\tt[#t+1] = w\n\tend\n\treturn t\nend", "  local lst = {}\n  local i = 1\n \
    \ while true do\n    local j = string.find(s, \"[%s,]+\", i)\n    if j == nil\
    \ then\n      lst[#lst + 1] = string.sub(s, i)\n      break\n    end\n    lst[#lst\
    \ + 1] = string.sub(s, i, j - 1)\n    i = j + 1\n  end\n  return lst\nend", " \
    \  local r = {}\n   local b\n   while 1 do\n      b = s:find(\"[ ,]\")\n     \
    \ if b == nil then\n         if #s > 0 then\n            table.insert(r, s)\n\
    \         end\n         break\n      end\n      table.insert(r, s:sub(1, b-1))\n\
    \      s = s:sub(b+1)\n   end\n   return r\nend", "   return s:gmatch(\"%S+\"\
    )\nend", "    return s:gmatch(\"%S+\")\nend", "    words = {}\n    for word in\
    \ s:gmatch(\"%w+\") do\n        table.insert(words, word)\n    end\n    return\
    \ words\nend", "  return s:split(',? ')\nend", "    local words = {}\n    local\
    \ w = ''\n    for c in s:gmatch('.') do\n        if c == ' ' or c == ',' then\n\
    \            if w ~= '' then\n                table.insert(words, w)\n       \
    \         w = ''\n            end\n        else\n            w = w .. c\n    \
    \    end\n    end\n    if w ~= '' then\n        table.insert(words, w)\n    end\n\
    \    return words\nend", "  -- Write your code here\nend", "    return table.concat(s:split('%s+'),\
    \ '')\nend", "  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
