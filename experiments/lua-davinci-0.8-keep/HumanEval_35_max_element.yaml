name: HumanEval_35_max_element
language: lua
prompt: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n--\
  \ 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
  \ function max_element(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
  \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
  \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #l == 0 then\n    return 0\n  end\n  local m = l[1]\n  for i =\
    \ 2, #l do\n    m = math.max(m, l[i])\n  end\n  return m\nend", "    local max\
    \ = -math.huge\n    for _, v in ipairs(l) do\n        if v > max then\n      \
    \      max = v\n        end\n    end\n    return max\nend", "  local m = l[1]\n\
    \  for i = 2, #l do\n    if l[i] > m then\n      m = l[i]\n    end\n  end\n  return\
    \ m\nend", "  assert(type(l) == \"table\", \"First argument must be a table\"\
    )\n  if #l == 0 then\n    return nil\n  end\n  local max = l[1]\n  for i = 2,\
    \ #l do\n    max = math.max(max, l[i])\n  end\n  return max\nend", "\tlocal max\
    \ = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] > max then\n\t\t\tmax = l[i]\n\t\tend\n\
    \tend\n\treturn max\nend", "  local max = l[1]\n  for i = 2, #l do\n    if l[i]\
    \ > max then\n      max = l[i]\n    end\n  end\n  return max\nend", "    local\
    \ max = l[1]\n    for i, v in ipairs(l) do\n        if v > max then\n        \
    \    max = v\n        end\n    end\n    return max\nend", "  local m = l[1]\n\
    \  for _, v in ipairs(l) do\n    if v > m then\n      m = v\n    end\n  end\n\
    \  return m\nend", "  assert(type(l) == \"table\", \"Argument must be a table.\"\
    )\n  local max = -math.huge\n  for _, v in ipairs(l) do\n    if v > max then\n\
    \      max = v\n    end\n  end\n  return max\nend", "    local max\n    for i,\
    \ v in ipairs(l) do\n        if max == nil or v > max then\n            max =\
    \ v\n        end\n    end\n    return max\nend", "    local max = 0\n    for _,\
    \ v in ipairs(l) do\n        if v > max then\n            max = v\n        end\n\
    \    end\n    return max\nend", "    local max = l[1]\n    for _,v in ipairs(l)\
    \ do\n        if v > max then\n            max = v\n        end\n    end\n   \
    \ return max\nend", "    if l[1] == nil then\n        return nil\n    end\n  \
    \  local result = l[1]\n    for i = 2, #l do\n        if l[i] > result then\n\
    \            result = l[i]\n        end\n    end\n    return result\nend", "\t\
    local max = l[1]\n\tfor i=2, #l do\n\t\tif l[i] > max then\n\t\t\tmax = l[i]\n\
    \t\tend\n\tend\n\treturn max\nend", "  local max_value = l[1]\n  for i = 2, #l\
    \ do\n    if l[i] > max_value then\n      max_value = l[i]\n    end\n  end\n \
    \ return max_value\nend", "\tlocal m = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] >\
    \ m then\n\t\t\tm = l[i]\n\t\tend\n\tend\n\treturn m\nend", "    local max = -math.huge\n\
    \    for i = 1, #l do\n        if l[i] > max then\n            max = l[i]\n  \
    \      end\n    end\n    return max\nend", "  local max = -math.huge\n  for _,v\
    \ in ipairs(l) do\n    if v > max then\n      max = v\n    end\n  end\n  return\
    \ max\nend", "\tlocal max = nil\n\tfor _, e in ipairs(l) do\n\t\tif max == nil\
    \ or e > max then\n\t\t\tmax = e\n\t\tend\n\tend\n\treturn max\nend", "    if\
    \ #l == 0 then\n        return nil\n    end\n    local max = l[1]\n    for i=2,#l\
    \ do\n        if l[i] > max then\n            max = l[i]\n        end\n    end\n\
    \    return max\nend", "\tlocal m = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] > m\
    \ then\n\t\t\tm = l[i]\n\t\tend\n\tend\n\treturn m\nend", "    assert(type(l)\
    \ == \"table\", \"l must be a table\")\n    local max = l[1]\n    for _, v in\
    \ ipairs(l) do\n        if v > max then\n            max = v\n        end\n  \
    \  end\n    return max\nend", "    return head(reverse(sort(l)))\nend", "  local\
    \ max = l[1]\n  for _,e in ipairs(l) do\n    if e > max then\n      max = e\n\
    \    end\n  end\n  return max\nend", "    local max = nil\n    for i = 1, #l do\n\
    \        if max == nil or l[i] > max then\n            max = l[i]\n        end\n\
    \    end\n    return max\nend", "\tassert(type(l) == \"table\")\n\tlocal max =\
    \ l[1]\n\tfor _, v in ipairs(l) do\n\t\tif v > max then\n\t\t\tmax = v\n\t\tend\n\
    \tend\n\treturn max\nend", "    local max = 0\n    for _, v in ipairs(l) do\n\
    \        if v > max then\n            max = v\n        end\n    end\n    return\
    \ max\nend", "\tif #l == 0 then\n\t\treturn nil\n\tend\n\tlocal max = l[1]\n\t\
    for i = 2, #l do\n\t\tif l[i] > max then\n\t\t\tmax = l[i]\n\t\tend\n\tend\n\t\
    return max\nend", "    assert(type(l) == \"table\", \"Argument must be a table.\"\
    )\n    assert(not is_empty(l), \"Argument must not be empty.\")\n    local max\
    \ = l[1]\n    for i = 2, #l do\n        if l[i] > max then\n            max =\
    \ l[i]\n        end\n    end\n    return max\nend", "  local max = l[1]\n  for\
    \ i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n  end\n  return\
    \ max\nend", "    local max_elem = 0\n    for k, v in pairs(l) do\n        if\
    \ v > max_elem then\n            max_elem = v\n        end\n    end\n    return\
    \ max_elem\nend", "    local max = l[1]\n    for _, v in ipairs(l) do\n      \
    \  if v > max then\n            max = v\n        end\n    end\n    return max\n\
    end", "    local result = l[1]\n    for i = 2, #l do\n        if l[i] > result\
    \ then\n            result = l[i]\n        end\n    end\n    return result\nend",
  "    local max = l[1]\n    for _, v in ipairs(l) do\n        if v > max then\n \
    \           max = v\n        end\n    end\n    return max\nend", "    local result\
    \ = l[1]\n    for _, i in ipairs(l) do\n        if i > result then\n         \
    \   result = i\n        end\n    end\n    return result\nend", "  local max =\
    \ l[1]\n  for _, x in ipairs(l) do\n    if x > max then\n      max = x\n    end\n\
    \  end\n  return max\nend", "  local max = l[1]\n  for _, v in ipairs(l) do\n\
    \    if v > max then\n      max = v\n    end\n  end\n  return max\nend", "\tlocal\
    \ max = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] > max then\n\t\t\tmax = l[i]\n\t\
    \tend\n\tend\n\treturn max\nend", "    local max = nil\n    for _, val in ipairs(l)\
    \ do\n        if not max or val > max then\n            max = val\n        end\n\
    \    end\n    return max\nend", "    return max(unpack(l))\nend", "    local max\
    \ = l[1]\n    for _, i in ipairs(l) do\n        if i > max then\n            max\
    \ = i\n        end\n    end\n    return max\nend", "  local max = l[1]\n  for\
    \ i=2,#l do\n    max = math.max(max, l[i])\n  end\n  return max\nend", "\tlocal\
    \ maximum = l[1]\n\tfor _, n in ipairs(l) do\n\t\tif n > maximum then\n\t\t\t\
    maximum = n\n\t\tend\n\tend\n\treturn maximum\nend", "    local max = l[1]\n \
    \   for i = 2, #l do\n        if l[i] > max then\n            max = l[i]\n   \
    \     end\n    end\n    return max\nend", "\tlocal max = l[1]\n\tfor _, n in ipairs(l)\
    \ do\n\t\tif n > max then\n\t\t\tmax = n\n\t\tend\n\tend\n\treturn max\nend",
  "    assert(type(l) == \"table\", \"Argument must be a table.\")\n    assert(#l\
    \ > 0, \"Table must not be empty.\")\n    local m = l[1]\n    for i = 2, #l do\n\
    \        if l[i] > m then\n            m = l[i]\n        end\n    end\n    return\
    \ m\nend", "  local m = -math.huge\n  for i = 1, #l do\n    if l[i] > m then\n\
    \      m = l[i]\n    end\n  end\n  return m\nend", "    local max = l[1]\n   \
    \ for i = 2, #l do\n        max = math.max(max, l[i])\n    end\n    return max\n\
    end", "    local max = -math.huge\n    for _, elem in ipairs(l) do\n        if\
    \ elem > max then\n            max = elem\n        end\n    end\n    return max\n\
    end", "\tassert(l, \"max_element: <list> cannot be nil\")\n\tlocal max = l[1]\n\
    \tfor _, el in ipairs(l) do\n\t\tif el > max then\n\t\t\tmax = el\n\t\tend\n\t\
    end\n\treturn max\nend", "    assert(type(l) == \"table\", \"'l' should be a table\"\
    )\n    local max = l[1]\n    for i = 2, #l do\n        if l[i] > max then\n  \
    \          max = l[i]\n        end\n    end\n    return max\nend", "\tlocal m\
    \ = l[1]\n\tfor i = 2, #l do\n\t\tm = max(m, l[i])\n\tend\n\treturn m\nend", " \
    \ return reduce(math.max, l)\nend", "\tlocal max = l[1]\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif v > max then\n\t\t\tmax = v\n\t\tend\n\tend\n\treturn max\nend",
  "  local max = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n\
    \    end\n  end\n  return max\nend", "  local max = l[1]\n  for i = 2, #l do\n\
    \    max = math.max(max, l[i])\n  end\n  return max\nend", "    return reduce(function(a,b)\
    \ return max(a,b) end,l)\nend", "    return fold(binary(max), l)\nend", "    local\
    \ max = l[1]\n    for _, element in ipairs(l) do\n        if element > max then\n\
    \            max = element\n        end\n    end\n    return max\nend", "\tlocal\
    \ max = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] > max then\n\t\t\tmax = l[i]\n\t\
    \tend\n\tend\n\treturn max\nend", "  local max = l[1]\n  for _, v in ipairs(l)\
    \ do\n    if v > max then\n      max = v\n    end\n  end\n  return max\nend",
  "    local max = l[1]\n    for _, v in ipairs(l) do\n        if v > max then\n \
    \           max = v\n        end\n    end\n    return max\nend", "    local max_element\
    \ = l[1]\n    for i = 2, #l do\n        if l[i] > max_element then\n         \
    \   max_element = l[i]\n        end\n    end\n    return max_element\nend", " \
    \   assert(type(l) == \"table\", string.format(\"bad argument #1 to 'max_element'\
    \ (table expected, got %s)\", type(l)))\n    local max = l[1]\n    for _, v in\
    \ ipairs(l) do\n        if v > max then\n            max = v\n        end\n  \
    \  end\n    return max\nend", "    local max = l[1]\n    for _, v in ipairs(l)\
    \ do\n        if v > max then\n            max = v\n        end\n    end\n   \
    \ return max\nend", "\tlocal max = l[1]\n\tfor _, v in ipairs(l) do\n\t\tif v\
    \ > max then\n\t\t\tmax = v\n\t\tend\n\tend\n\treturn max\nend", "  return reduce(math.max,\
    \ l)\nend", "    return reduce(function(a,b) return a > b and a or b end,l)\n\
    end", "    local m = nil\n    for i,x in ipairs(l) do\n        if not m or m <\
    \ x then\n            m = x\n        end\n    end\n    return m\nend", "\tassert(type(l)\
    \ == \"table\")\n\tlocal max = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] > max then\n\
    \t\t\tmax = l[i]\n\t\tend\n\tend\n\treturn max\nend", "  local max = l[1]\n  for\
    \ _,x in ipairs(l) do\n    if x > max then\n      max = x\n    end\n  end\n  return\
    \ max\nend", "  local max = l[1]\n  for _,x in ipairs(l) do\n    if x > max then\n\
    \      max = x\n    end\n  end\n  return max\nend", "    local max = l[1]\n  \
    \  for i = 2, #l do\n        if l[i] > max then\n            max = l[i]\n    \
    \    end\n    end\n    return max\nend", "    local max = -math.huge\n    for\
    \ _, v in ipairs(l) do\n        if v > max then\n            max = v\n       \
    \ end\n    end\n    return max\nend", "    local max = l[1]\n    for _, v in ipairs(l)\
    \ do\n        if v > max then\n            max = v\n        end\n    end\n   \
    \ return max\nend", "    assert(type(l) == \"table\", \"Expected table\")\n  \
    \  local max = l[1]\n    for i = 2, #l do\n        if l[i] > max then\n      \
    \      max = l[i]\n        end\n    end\n    return max\nend", "\treturn reduce(math.max,\
    \ -math.huge, l)\nend", "    return l[#l]\nend", "  local max = 0\n  for _, v\
    \ in ipairs(l) do\n    if v > max then\n      max = v\n    end\n  end\n  return\
    \ max\nend", "    local function go(l, m)\n        if #l == 0 then\n         \
    \   return m\n        else\n            local e = first(l)\n            local\
    \ r = rest(l)\n            if e > m then\n                return go(r, e)\n  \
    \          else\n                return go(r, m)\n            end\n        end\n\
    \    end\n    return go(l, -math.huge)\nend", "  return reduce(function(x, y)\
    \ return x > y and x or y end, l)\nend", "    local result = l[1]\n    for _,\
    \ x in ipairs(l) do\n        if x > result then\n            result = x\n    \
    \    end\n    end\n    return result\nend", "\tlocal max = l[1]\n\tfor i = 2,\
    \ #l do\n\t\tif l[i] > max then\n\t\t\tmax = l[i]\n\t\tend\n\tend\n\treturn max\n\
    end", "  local max = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max\
    \ = l[i]\n    end\n  end\n  return max\nend", "  local e = -math.huge\n  for _,\
    \ x in ipairs(l) do\n    if x > e then\n      e = x\n    end\n  end\n  return\
    \ e\nend", "    local max = l[1]\n    for _, v in ipairs(l) do\n        if v >\
    \ max then\n            max = v\n        end\n    end\n    return max\nend", " \
    \ return reduce(l, function(a, b) return math.max(a, b) end)\nend", "    local\
    \ max = l[1]\n    for i, v in ipairs(l) do\n        if v > max then\n        \
    \    max = v\n        end\n    end\n    return max\nend", "    local max_value\
    \ = l[1]\n    for i = 2, #l do\n        if l[i] > max_value then\n           \
    \ max_value = l[i]\n        end\n    end\n    return max_value\nend", "    if\
    \ not l or #l == 0 then\n        return nil\n    end\n    local max = l[1]\n \
    \   for i = 2, #l do\n        max = math.max(max, l[i])\n    end\n    return max\n\
    end", "    local max = l[1]\n    for i = 2, #l do\n        if l[i] > max then\n\
    \            max = l[i]\n        end\n    end\n    return max\nend", "    local\
    \ max = l[1]\n    for i = 2, #l do\n        if l[i] > max then\n            max\
    \ = l[i]\n        end\n    end\n    return max\nend", "    local m = l[1]\n  \
    \  for i = 2, #l do\n        if l[i] > m then\n            m = l[i]\n        end\n\
    \    end\n    return m\nend", "  local max = l[1]\n  for i=2, #l do\n    if l[i]\
    \ > max then\n      max = l[i]\n    end\n  end\n  return max\nend", "    local\
    \ m = l[1]\n    for _, v in ipairs(l) do\n        if v > m then\n            m\
    \ = v\n        end\n    end\n    return m\nend", "  assert(is_table(l), \"Invalid\
    \ input type. Expected table, got \" .. type(l))\n  local m = l[1]\n  for i =\
    \ 2, #l do\n    if l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\n\
    end", "  assert(type(l) == \"table\", \"list required for `max_element`\")\n \
    \ local max = l[1]\n  for _, v in ipairs(l) do\n    if v > max then\n      max\
    \ = v\n    end\n  end\n  return max\nend", "  local max = l[1]\n  for _, v in\
    \ ipairs(l) do\n    if v > max then\n      max = v\n    end\n  end\n  return max\n\
    end", "\tlocal max = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] > max then\n\t\t\t\
    max = l[i]\n\t\tend\n\tend\n\treturn max\nend", "  local m = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend",
  "\tlocal m = l[1]\n\tfor _, n in ipairs(l) do\n\t\tif n > m then\n\t\t\tm = n\n\t\
    \tend\n\tend\n\treturn m\nend", "    local max = l[1]\n    for _, v in ipairs(l)\
    \ do\n        if v > max then\n            max = v\n        end\n    end\n   \
    \ return max\nend", "    local max_value = math.mininteger\n    for _, value in\
    \ ipairs(l) do\n        if value > max_value then\n            max_value = value\n\
    \        end\n    end\n    return max_value\nend", "\tif #l == 0 then\n\t\treturn\
    \ nil\n\tend\n\tlocal x = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] > x then\n\t\t\
    \tx = l[i]\n\t\tend\n\tend\n\treturn x\nend", "\tlocal max = l[1]\n\tfor i = 2,\
    \ #l do\n\t\tif l[i] > max then\n\t\t\tmax = l[i]\n\t\tend\n\tend\n\treturn max\n\
    end", "\tif type(l) ~= \"table\" then\n\t\treturn nil\n\tend\n\tlocal max = l[1]\n\
    \tfor i, v in ipairs(l) do\n\t\tif v > max then\n\t\t\tmax = v\n\t\tend\n\tend\n\
    \treturn max\nend", "  local max = l[1]\n  for i = 2, #l do\n    if l[i] > max\
    \ then\n      max = l[i]\n    end\n  end\n  return max\nend", "    local max =\
    \ -math.huge\n    for _, v in ipairs(l) do\n        if v > max then\n        \
    \    max = v\n        end\n    end\n    return max\nend", "    if #l == 0 then\n\
    \        return nil\n    end\n    local max = l[1]\n    for i = 2, #l do\n   \
    \     if l[i] > max then\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    local max = l[1]\n    for i = 2, #l do\n        max = math.max(max,\
    \ l[i])\n    end\n    return max\nend", "    local max = l[1]\n    for i = 2,\
    \ #l do\n        if l[i] > max then\n            max = l[i]\n        end\n   \
    \ end\n    return max\nend", "    local m = l[1]\n    for _, v in ipairs(l) do\n\
    \        if v > m then\n            m = v\n        end\n    end\n    return m\n\
    end", "  local mx = 0\n  for i = 1, #l do\n    mx = math.max(mx, l[i])\n  end\n\
    \  return mx\nend", "  local n = l[1]\n  for _, elem in ipairs(l) do\n    if elem\
    \ > n then\n      n = elem\n    end\n  end\n  return n\nend", "  local v = l[1]\n\
    \  for _, i in ipairs(l) do\n    if v < i then\n      v = i\n    end\n  end\n\
    \  return v\nend", "    local m = l[1]\n    for _, e in ipairs(l) do\n       \
    \ if e > m then\n            m = e\n        end\n    end\n    return m\nend",
  "  local m = l[1]\n  for i = 2, #l do\n    if l[i] > m then\n      m = l[i]\n  \
    \  end\n  end\n  return m\nend", "    local m = l[1]\n    for i = 2, #l do\n \
    \       m = math.max(m, l[i])\n    end\n    return m\nend", "    local max = l[1]\n\
    \    for _, v in ipairs(l) do\n        if v > max then\n            max = v\n\
    \        end\n    end\n    return max\nend", "    if l == nil then return nil\
    \ end\n    local maximum = l[1]\n    for i = 2, #l do\n        if l[i] > maximum\
    \ then\n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end", "  assert(type(l) == \"table\")\n  local max_value = l[1]\n  for i, v in\
    \ ipairs(l) do\n    if v > max_value then\n      max_value = v\n    end\n  end\n\
    \  return max_value\nend", "    local max = l[1]\n    for _, v in ipairs(l) do\n\
    \        if v > max then\n            max = v\n        end\n    end\n    return\
    \ max\nend", "  local max = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n\
    \      max = l[i]\n    end\n  end\n  return max\nend", "    return unpack(l[ut.argmax(l)])\n\
    end", "    local max = l[1]\n    for i, v in ipairs(l) do\n        if v > max\
    \ then\n            max = v\n        end\n    end\n    return max\nend", "   \
    \ assert(#l > 0, \"The list is empty!\")\n    local max = l[1]\n    for i = 2,\
    \ #l do\n        if l[i] > max then\n            max = l[i]\n        end\n   \
    \ end\n    return max\nend", "\tlocal m = l[1]\n\tfor _,v in ipairs(l) do\n\t\t\
    if v > m then\n\t\t\tm = v\n\t\tend\n\tend\n\treturn m\nend", "\treturn math.max(unpack(l))\n\
    end", "  local curr_max = l[1]\n  for i = 2, #l do\n    if l[i] > curr_max then\n\
    \      curr_max = l[i]\n    end\n  end\n  return curr_max\nend", "  local max\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend", "\tlocal max = l[1]\n\tfor _, v in ipairs(l) do\n\t\
    \tif max < v then\n\t\t\tmax = v\n\t\tend\n\tend\n\treturn max\nend", "    local\
    \ max = l[1]\n    for _, v in ipairs(l) do\n        if v > max then\n        \
    \    max = v\n        end\n    end\n    return max\nend", "  local max = l[1]\n\
    \  for _, v in ipairs(l) do\n    if v > max then\n      max = v\n    end\n  end\n\
    \  return max\nend", "    local max = l[1]\n    for i = 2, #l do\n        if l[i]\
    \ > max then\n            max = l[i]\n        end\n    end\n    return max\nend",
  "\tlocal max = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] > max then\n\t\t\tmax = l[i]\n\
    \t\tend\n\tend\n\treturn max\nend", "  return fold(l, 0, function(a, b)\n    if\
    \ a > b then\n      return a\n    else\n      return b\n    end\n  end)\nend",
  "    local max = l[1]\n    for i = 2, #l do\n        max = math.max(max, l[i])\n\
    \    end\n    return max\nend", "    local max = l[1]\n    for i = 2, #l do\n\
    \        if l[i] > max then\n            max = l[i]\n        end\n    end\n  \
    \  return max\nend", "    local max_value = -math.huge\n    for _, v in ipairs(l)\
    \ do\n        if v > max_value then\n            max_value = v\n        end\n\
    \    end\n    return max_value\nend", "    local max = 0\n    for i, v in ipairs(l)\
    \ do\n        if v > max then\n            max = v\n        end\n    end\n   \
    \ return max\nend", "  return math.max(unpack(l))\nend", "\tlocal max = l[1]\n\
    \tfor i = 2, #l do\n\t\tif l[i] > max then\n\t\t\tmax = l[i]\n\t\tend\n\tend\n\
    \treturn max\nend", "    local t = 0\n    for k, v in pairs(l) do\n        if\
    \ v > t then\n            t = v\n        end\n    end\n    return t\nend", " \
    \ if #l == 0 then return nil end\n  local maximum = l[1]\n  for i=2,#l do\n  \
    \  maximum = math.max(maximum, l[i])\n  end\n  return maximum\nend", "\tlocal\
    \ max = l[1]\n\tfor i=2, #l do\n\t\tif l[i] > max then\n\t\t\tmax = l[i]\n\t\t\
    end\n\tend\n\treturn max\nend", "    local max = l[1]\n    for i = 2, #l do\n\
    \        if l[i] > max then\n            max = l[i]\n        end\n    end\n  \
    \  return max\nend", "    local max = l[1]\n    for i = 2, #l do\n        if l[i]\
    \ > max then\n            max = l[i]\n        end\n    end\n    return max\nend",
  "  local m = nil\n  for _,x in ipairs(l) do\n    if m == nil or x > m then\n   \
    \   m = x\n    end\n  end\n  return m\nend", "\tlocal result = l[1]\n\tfor _,\
    \ v in ipairs(l) do\n\t\tif v > result then\n\t\t\tresult = v\n\t\tend\n\tend\n\
    \treturn result\nend", "    local max = l[1]\n    for i = 2, #l do\n        if\
    \ l[i] > max then\n            max = l[i]\n        end\n    end\n    return max\n\
    end", "    assert(list.len(l) > 0, \"max_element: Input list cannot be empty.\"\
    )\n    return list.foldl(max, l[1], l)\nend", "    return reduce(function(x, y)\
    \ return math.max(x, y) end, l[1], l)\nend", "    local max = l[1]\n    for i\
    \ = 2, #l do\n        if l[i] > max then\n            max = l[i]\n        end\n\
    \    end\n    return max\nend", "  assert(type(l) == \"table\", \"List must be\
    \ table type.\")\n  local m = -math.huge\n  for i = 1, #l do\n    m = math.max(m,\
    \ l[i])\n  end\n  return m\nend", "    local cur_max = l[1]\n    for _, v in ipairs(l)\
    \ do\n        if v > cur_max then\n            cur_max = v\n        end\n    end\n\
    \    return cur_max\nend", "\tlocal max_el = nil\n\tfor i,v in ipairs(l) do\n\t\
    \tif max_el == nil or v > max_el then\n\t\t\tmax_el = v\n\t\tend\n\tend\n\treturn\
    \ max_el\nend", "    local max = l[1]\n    for i, v in ipairs(l) do\n        if\
    \ v > max then\n            max = v\n        end\n    end\n    return max\nend",
  "  return _reduce(function(a, b)\n                    if a < b then\n          \
    \            return b\n                    else\n                      return\
    \ a\n                    end\n                  end, l)\nend", "  local max =\
    \ l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend", "    local max = 0\n    for _, i in ipairs(l) do\n\
    \        if i > max then\n            max = i\n        end\n    end\n    return\
    \ max\nend", "    assert(type(l) == \"table\")\n    local m = l[1]\n    for i\
    \ = 2, #l do\n        m = math.max(m, l[i])\n    end\n    return m\nend", "  \
    \  local max = l[1]\n    for i = 2, #l do\n        if l[i] > max then\n      \
    \      max = l[i]\n        end\n    end\n    return max\nend", "  return reduce(math.max,\
    \ l[1], rest(l))\nend", "  return reduce(function(m, e) return m >= e and m or\
    \ e end, l)\nend", "    assert(type(l) == \"table\", \"max_element: l not a table\"\
    )\n    local max = l[1]\n    for i = 2, #l do\n        if l[i] > max then\n  \
    \          max = l[i]\n        end\n    end\n    return max\nend", "\tlocal a\
    \ = nil\n\tfor _, v in ipairs(l) do\n\t\tif a == nil or v > a then\n\t\t\ta =\
    \ v\n\t\tend\n\tend\n\treturn a\nend", "\tlocal result = l[1]\n\tfor i = 2, #l\
    \ do\n\t\tif result < l[i] then\n\t\t\tresult = l[i]\n\t\tend\n\tend\n\treturn\
    \ result\nend", "\tif #l == 0 then\n\t\treturn nil\n\tend\n\tlocal max_el = l[1]\n\
    \tfor i = 2, #l do\n\t\tif l[i] > max_el then\n\t\t\tmax_el = l[i]\n\t\tend\n\t\
    end\n\treturn max_el\nend", "\tlocal max = l[1]\n\tfor _, v in ipairs(l) do\n\t\
    \tif v > max then\n\t\t\tmax = v\n\t\tend\n\tend\n\treturn max\nend", "  local\
    \ max = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n \
    \   end\n  end\n  return max\nend", "  local m = l[1]\n  for i = 2, #l do\n  \
    \  m = math.max(m, l[i])\n  end\n  return m\nend", "  assert_type(l, 'table')\n\
    \  local max = nil\n  for _, v in ipairs(l) do\n    if max == nil or v > max then\n\
    \      max = v\n    end\n  end\n  return max\nend", "    local m = l[1]\n    for\
    \ i = 2, #l do\n        m = math.max(m, l[i])\n    end\n    return m\nend", " \
    \   local max = l[1]\n    for _, e in ipairs(l) do\n        if e > max then\n\
    \            max = e\n        end\n    end\n    return max\nend", "    local max\
    \ = l[1]\n    for i = 2, #l do\n        if l[i] > max then\n            max =\
    \ l[i]\n        end\n    end\n    return max\nend", "  local max = l[1]\n  for\
    \ i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n  end\n  return\
    \ max\nend", "    local max = -math.huge\n    for _, v in ipairs(l) do\n     \
    \   if v > max then\n            max = v\n        end\n    end\n    return max\n\
    end", "  local m = l[1]\n  for i = 2, #l do\n    if l[i] > m then\n      m = l[i]\n\
    \    end\n  end\n  return m\nend", "  local max = l[1]\n  for _,v in ipairs(l)\
    \ do\n    if v > max then\n      max = v\n    end\n  end\n  return max\nend",
  "    local cur = -math.huge\n    for _, v in ipairs(l) do\n        if v > cur then\n\
    \            cur = v\n        end\n    end\n    return cur\nend", "    local max_elem\
    \ = l[1]\n    for i = 2, #l do\n        if l[i] > max_elem then\n            max_elem\
    \ = l[i]\n        end\n    end\n    return max_elem\nend", "    if #l == 0 then\n\
    \        return nil\n    end\n    local max_element = l[1]\n    for i=2, #l do\n\
    \        if l[i] > max_element then\n            max_element = l[i]\n        end\n\
    \    end\n    return max_element\nend", "  assert(type(l) == \"table\", \"max_element,\
    \ bad argument #1, table expected\")\n  local m = -math.huge\n  for i = 1, #l\
    \ do\n    if m < l[i] then\n      m = l[i]\n    end\n  end\n  return m\nend",
  "\tif not l then return nil end\n\tlocal m = l[1]\n\tfor i=2,#l do\n\t\tif l[i]\
    \ > m then m = l[i] end\n\tend\n\treturn m\nend", "\tlocal result = l[1]\n\tfor\
    \ i = 2, #l do\n\t\tif l[i] > result then\n\t\t\tresult = l[i]\n\t\tend\n\tend\n\
    \treturn result\nend", "  if #l == 0 then return nil end\n  local m = l[1]\n \
    \ for i = 2, #l do\n    if l[i] > m then m = l[i] end\n  end\n  return m\nend",
  "  assert(type(l) == \"table\", \"`l` parameter is not a table.\")\n  local max\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend", "    local result = l[1]\n    for i = 2, #l do\n \
    \       if l[i] > result then\n            result = l[i]\n        end\n    end\n\
    \    return result\nend", "    local max = l[1]\n    for _, v in ipairs(l) do\n\
    \        if v > max then\n            max = v\n        end\n    end\n    return\
    \ max\nend", "    local max = l[1]\n    for i = 2, #l do\n        if l[i] > max\
    \ then\n            max = l[i]\n        end\n    end\n    return max\nend", " \
    \   local m = l[1]\n    for i = 2, #l do\n        if l[i] > m then\n         \
    \   m = l[i]\n        end\n    end\n    return m\nend", "    if l[1] > l[2] then\n\
    \        local m = l[1]\n        for i = 3, #l do\n            if l[i] > m then\n\
    \                m = l[i]\n            end\n        end\n        return m\n  \
    \  else\n        local m = l[2]\n        for i = 3, #l do\n            if l[i]\
    \ > m then\n                m = l[i]\n            end\n        end\n        return\
    \ m\n    end\nend", "\tlocal m = l[1]\n\tfor i = 2, #l do\n\t\tm = (l[i] > m)\
    \ and l[i] or m\n\tend\n\treturn m\nend", "  local max = nil\n  for _, v in ipairs(l)\
    \ do\n    if max == nil or v > max then\n      max = v\n    end\n  end\n  return\
    \ max\nend", "    local max = l[1]\n    for _, v in ipairs(l) do\n        if v\
    \ > max then\n            max = v\n        end\n    end\n    return max\nend",
  "    if #l == 0 then\n        return\n    end\n    local max = l[1]\n    for i =\
    \ 2, #l do\n        if l[i] > max then\n            max = l[i]\n        end\n\
    \    end\n    return max\nend", "  local max_el = l[1]\n  for i = 2, #l do\n \
    \   max_el = math.max(max_el, l[i])\n  end\n  return max_el\nend", "  local max_v\
    \ = l[1]\n  for _, v in ipairs(l) do\n    if v > max_v then\n      max_v = v\n\
    \    end\n  end\n  return max_v\nend", "    local x = nil\n    for i = 1, #l do\n\
    \        if x == nil or l[i] > x then\n            x = l[i]\n        end\n   \
    \ end\n    return x\nend", "    local result = l[1]\n    for _,v in ipairs(l)\
    \ do\n        if v > result then\n            result = v\n        end\n    end\n\
    \    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
