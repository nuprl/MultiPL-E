name: HumanEval_155_even_odd_count
language: lua
results:
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    if num == 0 then\n        return (0, 0)\n    end\n\
    \    while num ~= 0 do\n        local d = num % 10\n        if d % 2 == 0 then\n\
    \            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return (even_count, odd_count)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6p4_u8xn.lua:9: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  local n = math.abs(num)\n  while n > 0 do\n    local last = n % 10\n\
    \    if last % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd +\
    \ 1\n    end\n    n = (n - last) / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjme2urw_.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpjme2urw_.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local odd = 0\n  local even\
    \ = 0\n  local num = math.abs(num)\n  while num > 0 do\n    local digit = num\
    \ % 10\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrsxlm1y.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpjrsxlm1y.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  num = math.abs(num)\n  local\
    \ even, odd = 0, 0\n  while num > 0 do\n    local last_digit = num % 10\n    if\
    \ last_digit % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd +\
    \ 1\n    end\n    num = math.floor(num / 10)\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnf_uhzp1.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpnf_uhzp1.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local e = 0\n    local o\
    \ = 0\n    while num ~= 0 do\n        local k = num % 10\n        if k % 2 ==\
    \ 0 then\n            e = e + 1\n        else\n            o = o + 1\n       \
    \ end\n        num = math.floor(num / 10)\n    end\n    return e, o\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyahzchis.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpyahzchis.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- body\n  local even = 0\n\
    \  local odd = 0\n  while num>0 do\n    local digit = num%10\n    if digit%2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = (num - digit)/10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3r6hql93.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp3r6hql93.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    while num ~= 0 do\n        local digit = num % 10\n\
    \        if digit % 2 == 0 then\n            even_count = even_count + 1\n   \
    \     else\n            odd_count = odd_count + 1\n        end\n        num =\
    \ (num - digit) / 10\n    end\n    return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxrlnwe6.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpcxrlnwe6.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_cnt = 0\n  local\
    \ odd_cnt = 0\n  if num >= 0 then\n    while num > 0 do\n      if num % 2 == 0\
    \ then\n        even_cnt = even_cnt + 1\n      else\n        odd_cnt = odd_cnt\
    \ + 1\n      end\n      num = math.floor(num / 10)\n    end\n  else\n    num =\
    \ -num\n    while num > 0 do\n      if num % 2 == 0 then\n        even_cnt = even_cnt\
    \ + 1\n      else\n        odd_cnt = odd_cnt + 1\n      end\n      num = math.floor(num\
    \ / 10)\n    end\n  end\n  return even_cnt, odd_cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29skfvcp.lua:34:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp29skfvcp.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal evens, odds = 0, 0\n\
    \tfor digit in tostring(math.abs(num)):gmatch(\".\") do\n\t\tif tonumber(digit)\
    \ % 2 == 0 then\n\t\t\tevens = evens + 1\n\t\telse\n\t\t\todds = odds + 1\n\t\t\
    end\n\tend\n\treturn evens, odds\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj3ldvsg_.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpj3ldvsg_.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for d in tostring(num):gmatch('%d') do\n        if tonumber(d) % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mrzaxxi.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp6mrzaxxi.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for n in tostring(num):gmatch('%d') do\n    if tonumber(n) % 2 == 0 then\n \
    \     even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnmc2rk8.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpjnmc2rk8.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local evens, odds = 0, 0\n\
    \  num = math.abs(num)\n  while num > 0 do\n    local digit = num % 10\n    if\
    \ digit % 2 == 0 then\n      evens = evens + 1\n    else\n      odds = odds +\
    \ 1\n    end\n    num = math.floor(num / 10)\n  end\n  return evens, odds\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmtj7vt9a.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpmtj7vt9a.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  for digit in tostring(num):gmatch(\"%d\") do\n    digit = tonumber(digit)\n\
    \    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd\
    \ + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1nifx3su.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp1nifx3su.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal odd, even = 0, 0\n\t\
    num = math.abs(num)\n\twhile num > 0 do\n\t\tif num % 2 == 0 then\n\t\t\teven\
    \ = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\tnum = math.floor(num\
    \ / 10)\n\tend\n\treturn even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6zkkx_x.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpm6zkkx_x.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local function digit_count(num,\
    \ digit)\n    local result = 0\n    num = math.abs(num)\n    while num ~= 0 do\n\
    \      local digit = num % 10\n      if digit == digit then\n        result =\
    \ result + 1\n      end\n      num = math.floor(num / 10)\n    end\n    return\
    \ result\n  end\n  return digit_count(num, 2), digit_count(num, 1)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafmtvego.lua:24:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpafmtvego.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    local num = math.abs(num)\n    local tail\n    while num > 0 do\n       \
    \ tail = num % 10\n        if tail % 2 == 0 then\n            even = even + 1\n\
    \        else\n            odd = odd + 1\n        end\n        num = (num - tail)\
    \ / 10\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxw13mzgo.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpxw13mzgo.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    -- your code goes here\n\
    \    local even_count = 0\n    local odd_count = 0\n    local num_abs = math.abs(num)\n\
    \    if num == 0 then\n        even_count = 1\n    end\n    while num_abs > 0\
    \ do\n        if num_abs % 2 == 0 then\n            even_count = even_count +\
    \ 1\n        else\n            odd_count = odd_count + 1\n        end\n      \
    \  num_abs = math.floor(num_abs / 10)\n    end\n    return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zugqwoy.lua:27:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp4zugqwoy.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local e, o = 0, 0\n  for i\
    \ in tostring(num):gmatch(\"%d\") do\n    if tonumber(i) % 2 == 0 then\n     \
    \ e = e + 1\n    else\n      o = o + 1\n    end\n  end\n  return e, o\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkurinnoa.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpkurinnoa.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  for i = 0, (math.abs(num)):len() do\n    if num % 2 == 0 then\n\
    \      even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n\
    \    end\n    num = math.floor(num / 10)\n  end\n  return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfim0romk.lua:8:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmpfim0romk.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpfim0romk.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    local num_str = num .. \"\"\n    for i = 1, string.len(num_str)\
    \ do\n        local digit = tonumber(string.sub(num_str, i, i))\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return even_count,\
    \ odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpni2y8056.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpni2y8056.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local evn, odd = 0, 0\n\
    \    for i in tostring(num):gmatch('%d') do\n        i = tonumber(i)\n       \
    \ if i % 2 == 0 then\n            evn = evn + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return evn, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpff3i5h1h.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpff3i5h1h.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    while num ~= 0 do\n        if num % 2 == 0 then\n\
    \            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even_count, odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpecxb17op.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpecxb17op.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local n = math.abs(num)\n\
    \    local even, odd = 0, 0\n    repeat\n        local d = n % 10\n        if\
    \ d % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n        n = math.floor(n / 10)\n    until n == 0\n \
    \   return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50xdzwfp.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp50xdzwfp.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    if num == 0 then return\
    \ 0, 0 end\n    local even, odd = 0, 0\n    for digit in tostring(num):gmatch(\"\
    %d\") do\n        if tonumber(digit) % 2 == 0 then\n            even = even +\
    \ 1\n        else\n            odd = odd + 1\n        end\n    end\n    return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplaksnaq6.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmplaksnaq6.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    while num ~= 0 do\n        local digit = num % 10\n\
    \        if digit % 2 == 0 then\n            even_count = even_count + 1\n   \
    \     else\n            odd_count = odd_count + 1\n        end\n        num =\
    \ math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexcjl92o.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpexcjl92o.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local evens, odds = 0, 0\n\
    \  if num < 0 then num = -num end\n  while num > 0 do\n    if num % 2 == 0 then\n\
    \      evens = evens + 1\n    else\n      odds = odds + 1\n    end\n    num =\
    \ num // 10\n  end\n  return evens, odds\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7s4g0ct.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpu7s4g0ct.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\treturn 0, 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbap5jbbt.lua:12:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpbap5jbbt.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for c in tostring(num):gmatch(\".\") do\n    local n = tonumber(c)\n    if (n\
    \ % 2 == 0) then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeoqca1k1.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpeoqca1k1.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    if num > 0 then num = -num\
    \ end\n    local even, odd = 0, 0\n    local num = -num\n    while num > 0 do\n\
    \        if num % 2 == 0 then\n            even = even + 1\n        else\n   \
    \         odd = odd + 1\n        end\n        num = math.floor(num / 10)\n   \
    \ end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65qt4h9g.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp65qt4h9g.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    while num ~= 0 do\n        local digit = num % 10\n        if digit\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62tiufox.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp62tiufox.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_num = 0\n   \
    \ local odd_num = 0\n    local num = num\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu42y_tc_.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    while num > 0 do\n        if num % 2 == 0 then\n            even = even +\
    \ 1\n        else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0qrx8qt.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpe0qrx8qt.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal positive_num = math.abs(num)\n\
    \tlocal even = 0\n\tlocal odd = 0\n\twhile positive_num > 0 do\n\t\tlocal digit\
    \ = positive_num % 10\n\t\tif (digit % 2) == 0 then\n\t\t\teven = even + 1\n\t\
    \telse\n\t\t\todd = odd + 1\n\t\tend\n\t\tpositive_num = math.floor(positive_num\
    \ / 10)\n\tend\n\treturn even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40o9f0e7.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp40o9f0e7.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ num = math.abs(num)\n  while num > 0 do\n    if num % 2 == 0 then\n      even\
    \ = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1tt2hqj.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp_1tt2hqj.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even, odd = 0, 0\n\t\
    if (num < 0) then num = -num end\n\twhile (num > 0) do\n\t\tif (num % 2 == 0)\
    \ then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\tnum\
    \ = math.floor(num / 10)\n\tend\n\treturn even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmymjx0t0.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpmymjx0t0.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ while num ~= 0 do\n    local digit = num % 10\n    if digit % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num = (num\
    \ - digit) / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6s7sax6.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpc6s7sax6.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even = 0\n\tlocal odd\
    \ = 0\n\tfor i = 1, num_len(num) do\n\t\tif num_get(num, i) % 2 == 0 then\n\t\t\
    \teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\tend\n\treturn even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ke0y4r9.lua:8:\
    \ attempt to call a nil value (global 'num_len')\nstack traceback:\n\t/tmp/tmp8ke0y4r9.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp8ke0y4r9.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local odd_count = 0\n  \
    \  local even_count = 0\n    for _, d in ipairs(to_digits(num)) do\n        if\
    \ d % 2 == 0 then\n            even_count = even_count + 1\n        else\n   \
    \         odd_count = odd_count + 1\n        end\n    end\n    return even_count,\
    \ odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ffnvy2i.lua:8:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmp8ffnvy2i.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp8ffnvy2i.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    while num ~= 0 do\n        if num % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n        num = num\
    \ // 10\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0r5n1fju.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp0r5n1fju.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  for digit in num:gmatch(\"%d\") do\n    if tonumber(digit)\
    \ % 2 == 0 then\n      even_count = even_count + 1\n    else\n      odd_count\
    \ = odd_count + 1\n    end\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf_zhpbdy.lua:8:\
    \ attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmpf_zhpbdy.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpf_zhpbdy.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- body\n  local s = tostring(num)\n\
    \  local even = 0\n  local odd = 0\n  for i=1,#s do\n    local x = tonumber(s:sub(i,i))\n\
    \    if x % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpih5noski.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpih5noski.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxvx0sl4k.lua:11:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpxvx0sl4k.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- todo\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hzdtfqv.lua:12:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp2hzdtfqv.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if not num then\n    error('num\
    \ is nil')\n  end\n  if num == 0 then\n    return 0, 0\n  end\n  if num < 0 then\n\
    \    num = -num\n  end\n  local even, odd = 0, 0\n  while num > 0 do\n    local\
    \ last_digit = num % 10\n    if last_digit % 2 == 0 then\n      even = even +\
    \ 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkzyojn2.lua:31:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpwkzyojn2.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  return 1, 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5ritrmk.lua:12:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpa5ritrmk.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvuqx25q3.lua:11:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpvuqx25q3.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  if num > 0 then\n    for i=1,#tostring(num) do\n      local\
    \ digit = tonumber(tostring(num):sub(i,i))\n      if digit % 2 == 0 then\n   \
    \     even_count = even_count + 1\n      else\n        odd_count = odd_count +\
    \ 1\n      end\n    end\n  else\n    even_count = even_odd_count(-num)[1]\n  \
    \  odd_count = even_odd_count(-num)[2]\n  end\n  return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpril5hqe3.lua:27:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpril5hqe3.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    -- write your code here\n\
    \    return {1,2}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppocl_7d6.lua:13:\
    \ expected: {0, 1}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmppocl_7d6.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if type(num) ~= \"number\"\
    \ then return nil end\n  if num == 0 then return 0, 0 end\n  local even = 0\n\
    \  local odd = 0\n  local sign = (num > 0) and 1 or -1\n  num = math.abs(num)\n\
    \  while num > 0 do\n    local digit = num % 10\n    if digit % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t4nottv.lua:27:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp2t4nottv.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  for i = 1, #num do\n    local digit = num:sub(i, i)\n    if\
    \ digit == '-' then\n      even_count = even_count + 1\n    elseif tonumber(digit)\
    \ % 2 == 0 then\n      even_count = even_count + 1\n    else\n      odd_count\
    \ = odd_count + 1\n    end\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvx8o_5ei.lua:8:\
    \ attempt to get length of a number value (local 'num')\nstack traceback:\n\t\
    /tmp/tmpvx8o_5ei.lua:8: in local 'candidate'\n\t/tmp/tmpvx8o_5ei.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    if num > 0 then\n        for digit in num:tostring():gmatch(\"%d\") do\n\
    \            if tonumber(digit) % 2 == 0 then\n                even = even + 1\n\
    \            else\n                odd = odd + 1\n            end\n        end\n\
    \    else\n        for digit in num:tostring():gmatch(\"%d\") do\n           \
    \ if tonumber(digit) % 2 == 0 then\n                even = even + 1\n        \
    \    else\n                odd = odd + 1\n            end\n        end\n     \
    \   odd = odd - 1\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwwq8_oyg.lua:8:\
    \ attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmpwwq8_oyg.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpwwq8_oyg.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  if num < 0 then\n    num = math.abs(num)\n  end\n  while num\
    \ > 0 do\n    local digit = num % 10\n    if digit % 2 == 0 then\n      even_count\
    \ = even_count + 1\n    else\n      odd_count = odd_count + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2a5hqe45.lua:26:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp2a5hqe45.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for _, v in pairs(to_digits(num)) do\n        if v % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_d27zjb_.lua:7:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmp_d27zjb_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_d27zjb_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for d in tostring(num):gmatch('%d') do\n        if tonumber(d) % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpui1zsclx.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpui1zsclx.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  num = math.abs(num)\n  local\
    \ even = 0\n  local odd = 0\n  while num ~= 0 do\n    local mod = num % 10\n \
    \   if mod % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n\
    \    end\n    num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprh847k0e.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmprh847k0e.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  for _, digit in ipairs(get_digits(num)) do\n    if digit %\
    \ 2 == 0 then\n      even_count = even_count + 1\n    else\n      odd_count =\
    \ odd_count + 1\n    end\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpykhnh2eh.lua:8:\
    \ attempt to call a nil value (global 'get_digits')\nstack traceback:\n\t/tmp/tmpykhnh2eh.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpykhnh2eh.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if type(num) ~= \"number\"\
    \ then return nil end\n  if num == 0 then return 0, 0 end\n  num = math.abs(num)\n\
    \  local even, odd = 0, 0\n  while num > 0 do\n    local digit = num % 10\n  \
    \  if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd +\
    \ 1\n    end\n    num = math.floor(num / 10)\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpds_0ot64.lua:25:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpds_0ot64.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  local s = tostring(num)\n  for i = 1, #s do\n    local ch = string.sub(s,\
    \ i, i)\n    if tonumber(ch) % 2 == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgf59y07.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmptgf59y07.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\t-- Your code here!\n\tlocal\
    \ count_even, count_odd = 0, 0\n\tfor dig in tostring(num):gmatch(\"%d\") do\n\
    \t\tif tonumber(dig) % 2 == 0 then\n\t\t\tcount_even = count_even + 1\n\t\telse\n\
    \t\t\tcount_odd = count_odd + 1\n\t\tend\n\tend\n\treturn count_even, count_odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpai5nr2cj.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpai5nr2cj.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\treturn #tostring(num):gsub(\"\
    [13579]\", \"\"), #tostring(num):gsub(\"[02468]\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsttwcfeo.lua:12:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpsttwcfeo.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tif num < 0 then num = -num\
    \ end\n\tlocal cnt_even, cnt_odd = 0, 0\n\twhile num > 0 do\n\t\tif num % 2 ==\
    \ 0 then\n\t\t\tcnt_even = cnt_even + 1\n\t\telse\n\t\t\tcnt_odd = cnt_odd + 1\n\
    \t\tend\n\t\tnum = num / 10\n\tend\n\treturn cnt_even, cnt_odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxu_qxc5.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpjxu_qxc5.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num == 0 then return 1,\
    \ 0 end\n  local even, odd = 0, 0\n  for d in tostring(num):gmatch('%d') do\n\
    \    if d % 2 == 0 then even = even + 1 else odd = odd + 1 end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiwmsri4i.lua:17:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpiwmsri4i.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    return (num:gsub(\"%d\"\
    , \"%%%0\"):gsub(\"%%(%d)\",\"%1%%\"):format()..\"u\"):format(0,0)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpao05o67m.lua:6:\
    \ attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmpao05o67m.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpao05o67m.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local function parity(d)\n\
    \        return (d % 2 == 0) and \"even\" or \"odd\"\n    end\n    local even_count,\
    \ odd_count = 0, 0\n    for d in (num .. \"\"):gmatch(\"%d\") do\n        local\
    \ c = parity(d)\n        if c == \"even\" then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    end\n\
    \    return even_count, odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23utpesl.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp23utpesl.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3ccddbo.lua:11:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpo3ccddbo.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_nums = 0\n  \
    \  local odd_nums = 0\n    local num_str = num > 0 and tostring(num) or tostring(num):sub(2)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwd3vvufh.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for c in tostring(num):gmatch(\".\") do\n        if tonumber(c) % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp04z98jwu.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp04z98jwu.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = string.len(num), 1, -1 do\n        local n = tonumber(string.sub(num,\
    \ i, i))\n        if n % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjz5mzec.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpcjz5mzec.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    -- code here\n    local\
    \ even = 0\n    local odd = 0\n    for i = 1, string.len(tostring(num)) do\n \
    \       if tonumber(string.sub(tostring(num), i, i)) % 2 == 0 then\n         \
    \   even = even + 1\n        else\n            odd = odd + 1\n        end\n  \
    \  end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd03mlglq.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpd03mlglq.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  while num ~= 0 do\n    local r = num % 10\n    if r % 2 ==\
    \ 0 then\n      even_count = even_count + 1\n    else\n      odd_count = odd_count\
    \ + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpucykdnle.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpucykdnle.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for i = 1, #tostring(num) do\n        local n = tonumber(string.sub(tostring(num),\
    \ i, i))\n        if n%2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv85px_qn.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpv85px_qn.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    num = math.abs(num)\n  \
    \  local even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcsfrelwy.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpcsfrelwy.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ while num ~= 0 do\n    local digit = num % 10\n    if digit % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_hyqgvw.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpq_hyqgvw.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  local n = num\n  while n ~= 0 do\n    local d = n % 10\n    if d % 2\
    \ == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n \
    \   n = n // 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoehbpivv.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpoehbpivv.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tnum = math.abs(num)\n\tlocal\
    \ even, odd = 0, 0\n\trepeat\n\t\tlocal d = num % 10\n\t\tif d % 2 == 0 then\n\
    \t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\tnum = math.floor(num\
    \ / 10)\n\tuntil num == 0\n\treturn even, odd\nend\nassert_equal(even_odd_count(-12),\
    \ (1, 1))\nassert_equal(even_odd_count(123), (1, 2))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg4ykoyjc.lua:19: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ while num ~= 0 do\n    if (num % 2) == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1qo0zjj.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpx1qo0zjj.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    return 0, 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplp69nigs.lua:12:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmplp69nigs.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- insert your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vupqmld.lua:12:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp0vupqmld.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppfbck_cj.lua:12:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmppfbck_cj.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- Write your code here.\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlnle5bj.lua:12:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpqlnle5bj.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- your code here\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsmlba7q.lua:12:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpxsmlba7q.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal count_even, count_odd\
    \ = 0, 0\n\tfor d in tostring(num):gmatch('.') do\n\t\tif d:byte() % 2 == 0 then\n\
    \t\t\tcount_even = count_even + 1\n\t\telse\n\t\t\tcount_odd = count_odd + 1\n\
    \t\tend\n\tend\n\treturn count_even, count_odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1pwkmdnk.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp1pwkmdnk.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    while num > 0 do\n        if num % 2 == 0 then\n            even = even +\
    \ 1\n        else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ivdwgcj.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp4ivdwgcj.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even_count = 0\n\tlocal\
    \ odd_count = 0\n\tfor digit in tostring(num):gmatch(\"%d\") do\n\t\tdigit = tonumber(digit)\n\
    \t\tif (digit % 2 == 0) then\n\t\t\teven_count = even_count + 1\n\t\telse\n\t\t\
    \todd_count = odd_count + 1\n\t\tend\n\tend\n\treturn even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw94i5ghe.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw94i5ghe.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  assert(type(num) == \"number\"\
    , \"function expected number\")\n  local even = 0\n  local odd = 0\n  local rem\
    \ = 0\n  for i = 1, #tostring(num) do\n    rem = num % 10\n    if rem % 2 == 0\
    \ then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9cg5t4v.lua:25:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpu9cg5t4v.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  num = math.abs(num)\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyr9rtrq_.lua:21: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local number = math.abs(num)\n\
    \  local odd_count = 0\n  local even_count = 0\n  while number > 0 do\n    local\
    \ digit = number % 10\n    if digit % 2 == 0 then\n      even_count = even_count\
    \ + 1\n    else\n      odd_count = odd_count + 1\n    end\n    number = math.floor(number\
    \ / 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07bucqsm.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp07bucqsm.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    -- TODO: program here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmboynewz.lua:12:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpmboynewz.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- your code here\n  num =\
    \ tostring(num)\n  evens = 0\n  odds = 0\n  for i=1, #num do\n    if string.sub(num,\
    \ i, i) == \"0\" or string.sub(num, i, i) == \"2\" or string.sub(num, i, i) ==\
    \ \"4\" or string.sub(num, i, i) == \"6\" or string.sub(num, i, i) == \"8\" then\n\
    \      evens = evens + 1\n    else\n      odds = odds + 1\n    end\n  end\n  return\
    \ evens, odds\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprka1980p.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmprka1980p.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    if num >= 0 then\n     \
    \   num = tostring(num)\n    else\n        num = tostring(num * -1)\n    end\n\
    \    return num:gsub(\"%d\", function(l)\n        if l % 2 == 0 then\n       \
    \     return \"e\"\n        else\n            return \"o\"\n        end\n    end):gsub(\"\
    [^e]\", \"\"):len(), num:gsub(\"%d\", function(l)\n        if l % 2 == 0 then\n\
    \            return \"e\"\n        else\n            return \"o\"\n        end\n\
    \    end):gsub(\"[^o]\", \"\"):len()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpknwak4nl.lua:29:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpknwak4nl.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    for i = 1, #tostring(num) do\n        local char\
    \ = tostring(num):sub(i, i)\n        if tonumber(char) % 2 == 0 then\n       \
    \     even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qds9ezm.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp4qds9ezm.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    while num ~= 0 do\n        local digit = num % 10\n        if digit % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n        num = math.floor(num / 10)\n    end\n    return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo5icskk_.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpo5icskk_.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- your code here\n  return\
    \ 0, 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qjjc2my.lua:13:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp5qjjc2my.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    while num ~= 0 do\n        local dig = num % 10\n        if dig\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n        num = (num - dig) / 10\n    end\n    return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo300_dss.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpo300_dss.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  num = math.abs(num)\n  local\
    \ odd = 0\n  local even = 0\n  while num > 0 do\n    if num % 2 == 0 then\n  \
    \    even = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27hekirm.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp27hekirm.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal en,on = 0,0\n\tlocal\
    \ n = math.abs(num)\n\twhile n > 0 do\n\t\tif (n % 2) == 0 then\n\t\t\ten = en\
    \ + 1\n\t\telse\n\t\t\ton = on + 1\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\
    \treturn en,on\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfk9ph_a5.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpfk9ph_a5.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal n = math.abs(num)\n\t\
    local even, odd = 0, 0\n\twhile n > 0 do\n\t\tif n % 2 == 0 then\n\t\t\teven =\
    \ even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\tn = math.floor(n / 10)\n\
    \tend\n\treturn even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcy46dzoq.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpcy46dzoq.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for n in tostring(num):gmatch('[0-9]') do\n        if tonumber(n) % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjj31sdpv.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpjj31sdpv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    return 0, 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc49kuskr.lua:12:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpc49kuskr.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    num = math.abs(num)\n  \
    \  local even = 0\n    local odd = 0\n    while (num > 0) do\n        local temp\
    \ = num % 10\n        if (temp % 2 == 0) then\n            even = even + 1\n \
    \       else\n            odd = odd + 1\n        end\n        num = (num - temp)\
    \ / 10\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o38s2gw.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp2o38s2gw.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_cnt = 0\n   \
    \ local odd_cnt = 0\n    local s = num < 0 and '-' or ''\n    num = tostring(math.abs(num))\n\
    \    for _,v in ipairs(num:to_table()) do\n        if v % 2 == 0 then\n      \
    \      even_cnt = even_cnt + 1\n        else\n            odd_cnt = odd_cnt +\
    \ 1\n        end\n    end\n    return even_cnt, odd_cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi1dyamyo.lua:10:\
    \ attempt to call a nil value (method 'to_table')\nstack traceback:\n\t/tmp/tmpi1dyamyo.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpi1dyamyo.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal odd, even = 0, 0\n\t\
    num = num >= 0 and num or -num\n\twhile num > 0 do\n\t\tif num % 2 == 0 then\n\
    \t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\tnum = num //\
    \ 10\n\tend\n\treturn even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdj_l9kcb.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpdj_l9kcb.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local e, o = 0, 0\n    for\
    \ d in tostring(num):gmatch(\"%d\") do\n        if tonumber(d) % 2 == 0 then\n\
    \            e = e + 1\n        else\n            o = o + 1\n        end\n   \
    \ end\n    return e, o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_l_wpefo.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp_l_wpefo.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local e, o = 0, 0\n  while\
    \ num > 0 do\n    local r = num % 10\n    if r % 2 == 0 then\n      e = e + 1\n\
    \    else\n      o = o + 1\n    end\n    num = math.floor(num / 10)\n  end\n \
    \ return e, o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzoroo4qw.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpzoroo4qw.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_c, odd_c = 0,\
    \ 0\n    while num ~= 0 do\n        local digit = num % 10\n        if digit %\
    \ 2 == 0 then\n            even_c = even_c + 1\n        else\n            odd_c\
    \ = odd_c + 1\n        end\n        num = (num - digit) / 10\n    end\n    return\
    \ even_c, odd_c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7r1v86o.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpi7r1v86o.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  return nil, nil\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhr1d14o.lua:12:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpmhr1d14o.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for _, digit in pairs(digits(num)) do\n        if digit % 2 == 0 then\n \
    \           even = even + 1\n        else\n            odd = odd + 1\n       \
    \ end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzu90glll.lua:7:\
    \ attempt to call a nil value (global 'digits')\nstack traceback:\n\t/tmp/tmpzu90glll.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpzu90glll.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local odd_count = 0\n  local\
    \ even_count = 0\n  local num_str = num..\"\"\n  for i = 1, #num_str do\n    local\
    \ char = string.sub(num_str, i, i)\n    if tonumber(char) % 2 == 0 then\n    \
    \  even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n  \
    \  end\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjhq1qmio.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpjhq1qmio.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for _, v in string.gmatch(num, '-?%d') do\n    if tonumber(v) % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzuet_5mx.lua:8:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpzuet_5mx.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpzuet_5mx.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ num = math.abs(num)\n  for digit in tostring(num):gmatch(\"%d\") do\n    if\
    \ tonumber(digit) % 2 == 0 then\n      even = even + 1\n    else\n      odd =\
    \ odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_5k0eyx.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpf_5k0eyx.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    num = tostring(num)\n    for _, v in ipairs(num)\
    \ do\n        if tonumber(v) % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    end\n\
    \    return (even_count, odd_count)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6m0u5r62.lua:16: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local evens, odds = 0, 0\n\
    \    while num ~= 0 do\n        local digit = num % 10\n        if digit % 2 ==\
    \ 0 then\n            evens = evens + 1\n        else\n            odds = odds\
    \ + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return evens,\
    \ odds\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0tomgpo.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpy0tomgpo.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    if num == 0 then return\
    \ (0, 0) end\n    local neven = 0\n    local nodd = 0\n    while num ~= 0 do\n\
    \        local digit = num % 10\n        if digit % 2 == 0 then\n            neven\
    \ = neven + 1\n        else\n            nodd = nodd + 1\n        end\n      \
    \  num = math.floor(num / 10)\n    end\n    return (neven, nodd)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptzjxw8s6.lua:6: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local function _even_odd_count(num,\
    \ even_count, odd_count)\n        if num == 0 then\n            return even_count,\
    \ odd_count\n        end\n        if num % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        return _even_odd_count(num/10, even_count, odd_count)\n    end\n\
    \    local even_count, odd_count = _even_odd_count(num, 0, 0)\n    return even_count,\
    \ odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiupq76ra.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpiupq76ra.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local ev, od = 0, 0\n  if\
    \ num < 0 then\n    num = -num\n  end\n  while num > 0 do\n    local digit = num\
    \ % 10\n    if digit % 2 == 0 then\n      ev = ev + 1\n    else\n      od = od\
    \ + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return ev, od\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81mfhas6.lua:25:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp81mfhas6.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\t-- TODO: You may have to fix\
    \ the types of the parameters here,\n\t-- or add additional parameter checks.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp20in53y6.lua:22: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- Make sure num is an integer.\n\
    \  num = math.floor(num)\n  local even_count = 0\n  local odd_count = 0\n  while\
    \ num ~= 0 do\n    local rem = num % 10\n    if rem % 2 == 0 then\n      even_count\
    \ = even_count + 1\n    else\n      odd_count = odd_count + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ppbfopz.lua:25:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp_ppbfopz.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then num = -num\
    \ end\n  local even_cnt, odd_cnt = 0, 0\n  while num > 0 do\n    local m = num\
    \ % 10\n    if m % 2 == 0 then\n      even_cnt = even_cnt + 1\n    else\n    \
    \  odd_cnt = odd_cnt + 1\n    end\n    num = num / 10\n  end\n  return even_cnt,\
    \ odd_cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdgg98z4b.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpdgg98z4b.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even, odd = 0, 0\n\t\
    local digits = get_digits(num)\n\tfor _, v in ipairs(digits) do\n\t\tif v % 2\
    \ == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\
    end\n\treturn even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbx7fzwhy.lua:7:\
    \ attempt to call a nil value (global 'get_digits')\nstack traceback:\n\t/tmp/tmpbx7fzwhy.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpbx7fzwhy.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local odd_count = 0\n  local\
    \ even_count = 0\n  num = math.abs(num)\n  while num > 0 do\n    if num % 2 ==\
    \ 0 then\n      even_count = even_count + 1\n    else\n      odd_count = odd_count\
    \ + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1k72saw.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpz1k72saw.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  while num ~= 0 do\n    if (num % 2) == 0 then\n      even_count\
    \ = even_count + 1\n    else\n      odd_count = odd_count + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxumtz3lj.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpxumtz3lj.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  num = math.abs(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num ~= 0 do\n    local digit\
    \ = num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n\
    \    else\n      odd_count = odd_count + 1\n    end\n    num = (num - digit) /\
    \ 10\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamzpiu2v.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpamzpiu2v.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    -- write your code here\n\
    \    local even = 0\n    local odd = 0\n    while num ~= 0 do\n        if num\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n        num = num // 10\n    end\n    return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rnq12xd.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp3rnq12xd.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tassert(type(num) == \"number\"\
    , \"num must be number\")\n\tlocal nums = {}\n\twhile num ~= 0 do\n\t\tlocal digit\
    \ = num % 10\n\t\tnum = (num - digit) / 10\n\t\tnums[#nums + 1] = digit\n\tend\n\
    \tlocal even = 0\n\tlocal odd = 0\n\tfor _, v in ipairs(nums) do\n\t\tif v % 2\
    \ == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\
    end\n\treturn even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkew5nrci.lua:28:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpkew5nrci.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- if num < 0 then num = -num\
    \ end\n  -- local even = 0\n  -- local odd = 0\n  -- while num ~= 0 do\n  -- \
    \  if num % 2 == 0 then\n  --     even = even + 1\n  --   else\n  --     odd =\
    \ odd + 1\n  --   end\n  --   num = math.floor(num / 10)\n  -- end\n  -- return\
    \ even, odd\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9iby_efy.lua:32: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for _, n in pairs(to_digits(num)) do\n    if n % 2 == 0 then\n      even = even\
    \ + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqmbspmuv.lua:7:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmpqmbspmuv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpqmbspmuv.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local evens, odds = 0, 0\n\
    \    local n = num\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi27vtytv.lua:22: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  while num ~= 0 do\n    local last_digit = num % 10\n    if\
    \ last_digit % 2 == 0 then\n      even_count = even_count + 1\n    else\n    \
    \  odd_count = odd_count + 1\n    end\n    num = (num - last_digit) / 10\n  end\n\
    \  return even_count, odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdj_96ku0.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpdj_96ku0.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for digit in tostring(num):gmatch(\"%d\") do\n    if tonumber(digit) % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipur0ksy.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpipur0ksy.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbnojy79.lua:11:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpjbnojy79.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local e_count = 0\n    local\
    \ o_count = 0\n    if num == 0 then\n        return (1, 0)\n    end\n    while\
    \ num ~= 0 do\n        local d = num % 10\n        if d % 2 == 0 then\n      \
    \      e_count = e_count + 1\n        else\n            o_count = o_count + 1\n\
    \        end\n        num = math.floor(num / 10)\n    end\n    return (e_count,\
    \ o_count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdrncovc3.lua:9: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ while num > 0 do\n    if num % 2 == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 1\n    end\n    num = num // 10\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92rpja6c.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp92rpja6c.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  num = tostring(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #num do\n    if (tonumber(num:sub(i, i)) % 2\
    \ == 0) then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr29xy8h6.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpr29xy8h6.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    -- Write your code here\n\
    \    local a, b = 0, 0\n    for i in tostring(num):gmatch(\".\") do\n        if\
    \ tonumber(i) % 2 == 0 then\n            a = a + 1\n        else\n           \
    \ b = b + 1\n        end\n    end\n    return a, b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw32m561c.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpw32m561c.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- TODO: Implement\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5qxrkkh.lua:12:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpm5qxrkkh.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    return 1, 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdeu130kl.lua:12:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpdeu130kl.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  num = math.abs(num)\n  local\
    \ even = 0\n  local odd = 0\n  while num > 0 do\n    local last_digit = num %\
    \ 10\n    if last_digit % 2 == 0 then\n      even = even + 1\n    else\n     \
    \ odd = odd + 1\n    end\n    num = (num - last_digit) / 10\n  end\n  return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6x7i049.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpo6x7i049.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even = 0\n\tlocal odd\
    \ = 0\n\tfor char in tostring(num):gmatch(\"%d\") do\n\t\tif tonumber(char) %\
    \ 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\
    \tend\n\treturn even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_r73rwk.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpi_r73rwk.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even = 0\n\tlocal odd\
    \ = 0\n\tfor i = 1, #tostring(num) do\n\t\tlocal digit = tonumber(tostring(num):sub(i,\
    \ i))\n\t\tif digit % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd\
    \ = odd + 1\n\t\tend\n\tend\n\treturn even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxcl6876.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpjxcl6876.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    while num ~= 0 do\n        local digit = num % 10\n        if digit\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5bhr2ob.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpq5bhr2ob.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  for d in tostring(num):gmatch(\"%d\") do\n    if tonumber(d) % 2 == 0\
    \ then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmy0mwdyl.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpmy0mwdyl.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local t = 0\n    local s\
    \ = 0\n    for i = 1, string.len(tostring(num)) do\n        if tonumber(string.sub(tostring(num),\
    \ i, i)) % 2 == 0 then\n            t = t + 1\n        else\n            s = s\
    \ + 1\n        end\n    end\n    return t, s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcppnpv8n.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpcppnpv8n.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  for n in (\"\"..math.abs(num)):gmatch(\"%d\") do\n    if tonumber(n)\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcw16h13t.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpcw16h13t.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even, odd = 0, 0\n\t\
    for digit in tostring(num):gmatch(\"[%d]\") do\n\t\tdigit = tonumber(digit)\n\t\
    \tif digit % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\
    \t\tend\n\tend\n\treturn even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8qqfp0u.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpz8qqfp0u.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoduhm0sf.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpoduhm0sf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    for n in string.gmatch(math.abs(num), '%d') do\n        if tonumber(n) %\
    \ 2 == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbcciy6b.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpsbcciy6b.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ while num ~= 0 do\n    if num % 2 == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcvotaypj.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpcvotaypj.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local function count_even_odd(x,\
    \ accum)\n        if x == 0 then\n            return accum\n        else\n   \
    \         local digit = math.abs(x) % 10\n            local even_digit = digit\
    \ % 2 == 0\n            local even_count = accum[1] + (even_digit and 1 or 0)\n\
    \            local odd_count = accum[2] + (even_digit and 0 or 1)\n          \
    \  return count_even_odd(math.floor(x / 10), {even_count, odd_count})\n      \
    \  end\n    end\n    return count_even_odd(num, {0, 0})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  for d in num:gmatch(\"%d\") do\n    if (d % 2) == 0 then\n      even\
    \ = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuez95dh7.lua:8:\
    \ attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmpuez95dh7.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpuez95dh7.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  if num < 0 then\n    num = num * -1\n  end\n  for d in tostring(num):gmatch('%d')\
    \ do\n    if tonumber(d) % 2 == 0 then\n      even = even + 1\n    else\n    \
    \  odd = odd + 1\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdykbx5ox.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpdykbx5ox.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    if num >= 0 then\n     \
    \   local even_count = 0\n        local odd_count = 0\n        for i=1, #tostring(num)\
    \ do\n            if tonumber(string.sub(tostring(num), i, i)) % 2 == 0 then\n\
    \                even_count = even_count + 1\n            else\n             \
    \   odd_count = odd_count + 1\n            end\n        end\n        return even_count,\
    \ odd_count\n    else\n        local even_count = 0\n        local odd_count =\
    \ 0\n        for i=2, #tostring(num) do\n            if tonumber(string.sub(tostring(num),\
    \ i, i)) % 2 == 0 then\n                even_count = even_count + 1\n        \
    \    else\n                odd_count = odd_count + 1\n            end\n      \
    \  end\n        return even_count, odd_count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphlj5asvt.lua:34:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmphlj5asvt.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local count_even = 0\n  local\
    \ count_odd = 0\n  while num ~= 0 do\n    local digit = num % 10\n    if digit\
    \ % 2 == 0 then\n      count_even = count_even + 1\n    else\n      count_odd\
    \ = count_odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return count_even,\
    \ count_odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6fyxengv.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp6fyxengv.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  if num < 0 then\n    num = num * -1\n  end\n  while num > 0\
    \ do\n    if num % 2 == 0 then\n      even_count = even_count + 1\n    else\n\
    \      odd_count = odd_count + 1\n    end\n    num = num / 10\n  end\n  return\
    \ even_count, odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpke9kt4ht.lua:25:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpke9kt4ht.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local odd_count = 0\n  \
    \  local even_count = 0\n    while num ~= 0 do\n        local digit = num % 10\n\
    \        if digit % 2 == 0 then\n            even_count = even_count + 1\n   \
    \     else\n            odd_count = odd_count + 1\n        end\n        num =\
    \ math.floor(num / 10)\n    end\n    return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptll328md.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmptll328md.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_digits, odd_digits\
    \ = 0, 0\n  num = math.abs(num)\n  while num > 0 do\n    local digit = num % 10\n\
    \    if digit % 2 == 0 then\n      even_digits = even_digits + 1\n    else\n \
    \     odd_digits = odd_digits + 1\n    end\n    num = math.floor(num / 10)\n \
    \ end\n  return even_digits, odd_digits\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0tj65j5e.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp0tj65j5e.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  for i=1, string.len(num) do\n    local digit = string.sub(num,\
    \ i, i)\n    if(digit == \"0\" or digit == \"2\" or digit == \"4\" or digit ==\
    \ \"6\" or digit == \"8\") then\n      even_count = even_count + 1\n    else\n\
    \      odd_count = odd_count + 1\n    end\n  end\n  return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihrk42yt.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpihrk42yt.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    while num ~= 0 do\n        local digit = num % 10\n        if digit\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6unsj4vt.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp6unsj4vt.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local odd, even = 0, 0\n\
    \    while num ~= 0 do\n        if num % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf47qfl9f.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpf47qfl9f.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- Your code here\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppzjqnccu.lua:12:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmppzjqnccu.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local num = math.abs(num)\n\
    \  local even = 0\n  local odd = 0\n  while num > 0 do\n    if num % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9v38qzh7.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp9v38qzh7.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86yb55i5.lua:12:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp86yb55i5.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    local rest = 0\n    if num < 0 then\n        num = -num\n    end\n\
    \    rest = num\n    while rest > 0 do\n        local r = rest % 10\n        if\
    \ r % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n        rest = (rest - r) / 10\n    end\n    return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5eavvp8.lua:28:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpa5eavvp8.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    local num = math.abs(num)\n    local str = tostring(num)\n    for\
    \ _, v in ipairs(str) do\n        if tonumber(v) % 2 == 0 then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgpbpbw9.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpxgpbpbw9.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  num = math.abs(num)\n  while num > 0 do\n    local digit = num % 10\n\
    \    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd\
    \ + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfrbw68_.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpnfrbw68_.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local e_count = 0\n    local\
    \ o_count = 0\n    for i = 1, #tostring(num) do\n        if (tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0) then\n            e_count = e_count + 1\n        else\n      \
    \      o_count = o_count + 1\n        end\n    end\n    return e_count, o_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2weq83ac.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp2weq83ac.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    num = math.abs(num)\n    while num > 0 do\n        local digit = num % 10\n\
    \        if digit % 2 == 0 then\n            even = even + 1\n        else\n \
    \           odd = odd + 1\n        end\n        num = (num - digit) / 10\n   \
    \ end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9sumoj2m.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp9sumoj2m.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    while num ~= 0 do\n        local digit = num % 10\n        if digit\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbismu0bj.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpbismu0bj.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    while num ~= 0 do\n        local digit = num % 10\n        if digit\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopnl7829.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpopnl7829.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    for n in tostring(num):gmatch('.') do\n        if\
    \ tonumber(n) % 2 == 0 then\n            even_count = even_count + 1\n       \
    \ else\n            odd_count = odd_count + 1\n        end\n    end\n    return\
    \ even_count, odd_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkywywong.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpkywywong.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for d in tostring(num):gmatch(\"%d\") do\n    if tonumber(d) % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzo684d7.lua:20:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpqzo684d7.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local n_even, n_odd = 0,\
    \ 0\n    while num ~= 0 do\n        if math.abs(num % 10) % 2 == 0 then\n    \
    \        n_even = n_even + 1\n        else\n            n_odd = n_odd + 1\n  \
    \      end\n        num = math.floor(num / 10)\n    end\n    return n_even, n_odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdcnlkq1y.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpdcnlkq1y.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ while num > 0 do\n    if num % 2 == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsg0ndtvf.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpsg0ndtvf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ if num < 0 then num = -num end\n  while num > 0 do\n    if num % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrorl0kv.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpvrorl0kv.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for n in (num..''):gmatch('%d') do\n    n = tonumber(n)\n    if n % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3yskwcs.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmph3yskwcs.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    while num ~= 0 do\n        local r = num % 10\n        if r % 2\
    \ == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4xj3qbu.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpu4xj3qbu.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    num = math.abs(num)\n  \
    \  local even = 0\n    local odd = 0\n    while num > 0 do\n        local digit\
    \ = num % 10\n        if digit % 2 == 0 then\n            even = even + 1\n  \
    \      else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2m4edfb.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpd2m4edfb.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    return 0, 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxladskzq.lua:12:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpxladskzq.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even, odd = 0, 0\n\t\
    while num ~= 0 do\n\t\tlocal last_digit = num % 10\n\t\tif last_digit % 2 == 0\
    \ then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\tnum\
    \ = (num - last_digit) / 10\n\tend\n\treturn even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5f3kviul.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp5f3kviul.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  num = math.abs(num)\n  local\
    \ even, odd = 0, 0\n  while num > 0 do\n    local rem = num % 10\n    if rem %\
    \ 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \    num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qdcn84_.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp_qdcn84_.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even = 0\n  local odd\
    \ = 0\n  for i = 1, #tostring(num) do\n    if (num % 2 == 0) then\n      even\
    \ = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_fq81ct.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpi_fq81ct.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  -- your code goes here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhnkcu9l.lua:12:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpwhnkcu9l.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n \
    \   local odd_count = 0\n    local pos = 0\n    while num ~= 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = (num - digit) / 10\n    end\n    return even_count, odd_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwffjofwy.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpwffjofwy.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  for i = 0, #tostring(num) do\n    if math.abs(num % 10) % 2\
    \ == 0 then\n      even_count = even_count + 1\n    else\n      odd_count = odd_count\
    \ + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7t09mzr.lua:22:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpj7t09mzr.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ for _, d in utils.split(tostring(math.abs(num)), \"\") do\n    if d:match(\"\
    %d\") then\n      local n = tonumber(d)\n      if n % 2 == 0 then\n        even\
    \ = even + 1\n      else\n        odd = odd + 1\n      end\n    end\n  end\n \
    \ return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm9xmee3i.lua:7:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpm9xmee3i.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpm9xmee3i.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    num = math.abs(num)\n  \
    \  local even, odd = 0, 0\n    local mod, div\n    while num > 0 do\n        mod\
    \ = num % 10\n        div = num / 10\n        if mod % 2 == 0 then\n         \
    \   even = even + 1\n        else\n            odd = odd + 1\n        end\n  \
    \      num = math.floor(div)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp089_1wqk.lua:25:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp089_1wqk.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    -- your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkjlcei89.lua:12:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpkjlcei89.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    for c in tostring(num):gmatch(\".\") do\n        if tonumber(c)\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmj1j_6mc.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpmj1j_6mc.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  for c in num:gmatch(\"%d\") do\n    if tonumber(c) % 2 == 0\
    \ then\n      even_count = even_count + 1\n    else\n      odd_count = odd_count\
    \ + 1\n    end\n  end\n  return even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6mqybiwx.lua:8:\
    \ attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmp6mqybiwx.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp6mqybiwx.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tif type(num) ~= \"number\"\
    \ then return 0, 0 end\n\tlocal even, odd = 0, 0\n\tfor i in tostring(num):gmatch(\"\
    %d\") do\n\t\tif tonumber(i) % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\
    \t\todd = odd + 1\n\t\tend\n\tend\n\treturn even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfyzyo3vb.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpfyzyo3vb.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal even_count = 0\n\tlocal\
    \ odd_count = 0\n\tlocal number = math.abs(num)\n\twhile number ~= 0 do\n\t\t\
    local digit = number % 10\n\t\tif digit % 2 == 0 then\n\t\t\teven_count = even_count\
    \ + 1\n\t\telse\n\t\t\todd_count = odd_count + 1\n\t\tend\n\t\tnumber = math.floor(number\
    \ / 10)\n\tend\n\treturn even_count, odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1brbnhtb.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp1brbnhtb.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal evens, odds = 0, 0\n\
    \tfor digit in tostring(num):gmatch(\"%d\") do\n\t\tdigit = tonumber(digit)\n\t\
    \tif digit % 2 == 0 then\n\t\t\tevens = evens + 1\n\t\telse\n\t\t\todds = odds\
    \ + 1\n\t\tend\n\tend\n\treturn evens, odds\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptcwfh5bt.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmptcwfh5bt.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ local abs_num = math.abs(num)\n  while abs_num > 0 do\n    local last_digit\
    \ = abs_num % 10\n    if last_digit % 2 == 0 then\n      even = even + 1\n   \
    \ else\n      odd = odd + 1\n    end\n    abs_num = math.floor(abs_num / 10)\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpas_ft5q0.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpas_ft5q0.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  num = math.abs(num)\n  local\
    \ even, odd = 0, 0\n  while num > 0 do\n    local digit = num % 10\n    if digit\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \    num = (num - digit) / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5d110_g4.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp5d110_g4.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  if num < 0 then num = -num\
    \ end\n  return num:to_string():gsub(\"%d\", function(digit) return (digit % 2\
    \ == 0) and \"1\" or \"2\" end):gsub(\"2\", \"\"):len(), num:to_string():gsub(\"\
    %d\", function(digit) return (digit % 2 == 0) and \"2\" or \"1\" end):gsub(\"\
    2\", \"\"):len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa_5pryy2.lua:7:\
    \ attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmpa_5pryy2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpa_5pryy2.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local count = {even = 0,\
    \ odd = 0}\n    while num ~= 0 do\n        local digit = num % 10\n        if\
    \ digit % 2 == 0 then\n            count.even = count.even + 1\n        else\n\
    \            count.odd = count.odd + 1\n        end\n        num = (num - digit)\
    \ / 10\n    end\n    return count.even, count.odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9wcwcsr.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpo9wcwcsr.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  for digit in string.gmatch(math.abs(num), \"%d\") do\n    if\
    \ tonumber(digit) % 2 == 0 then\n      even_count = even_count + 1\n    else\n\
    \      odd_count = odd_count + 1\n    end\n  end\n  return even_count, odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhtdl0mh.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpuhtdl0mh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local\
    \ odd = 0\n    while num ~= 0 do\n        local digit = num % 10\n        if digit\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplfrf7_8l.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmplfrf7_8l.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n\
    \    if num < 0 then num = -num end\n    while num > 0 do\n        if (num % 2)\
    \ == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5p1lhfo0.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp5p1lhfo0.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n\tlocal evens, odds = 0, 0\n\
    \tfor digit in num:gmatch('%d') do\n\t\tdigit = tonumber(digit)\n\t\tif digit\
    \ % 2 == 0 then\n\t\t\tevens = evens + 1\n\t\telse\n\t\t\todds = odds + 1\n\t\t\
    end\n\tend\n\treturn evens, odds\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmgou_67m.lua:7:\
    \ attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmpmgou_67m.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpmgou_67m.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
    \ ==> (1, 2)\nlocal function even_odd_count(num)\n  local even, odd = 0, 0\n \
    \ num = math.abs(num)\n  while num > 0 do\n    if num % 2 == 0 then\n      even\
    \ = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6nfkwg9y.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp6nfkwg9y.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
