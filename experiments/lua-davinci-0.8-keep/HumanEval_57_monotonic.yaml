name: HumanEval_57_monotonic
language: lua
prompt: "-- Return True is list elements are monotonically increasing or decreasing.\n\
  -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n\
  -- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
  \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n   \
  \ lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
  \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
  \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local increasing = l[1] <= l[2]\n    for i = 2, #l - 1 do\n   \
    \     if l[i] < l[i + 1] then\n            if not increasing then\n          \
    \      return false\n            end\n        elseif l[i] > l[i + 1] then\n  \
    \          if increasing then\n                return false\n            end\n\
    \        end\n    end\n    return true\nend", "    local prev = nil\n    local\
    \ increasing = nil\n    for _, v in ipairs(l) do\n        if prev ~= nil then\n\
    \            if increasing == nil then\n                if v > prev then\n   \
    \                 increasing = true\n                elseif v < prev then\n  \
    \                  increasing = false\n                end\n            elseif\
    \ increasing then\n                if v < prev then\n                    return\
    \ false\n                end\n            else\n                if v > prev then\n\
    \                    return false\n                end\n            end\n    \
    \    end\n        prev = v\n    end\n    return true\nend", "    if #l < 2 then\n\
    \        return true\n    end\n    if l[1] > l[2] then\n        for i = 2, #l\
    \ - 1 do\n            if l[i] < l[i + 1] then\n                return false\n\
    \            end\n        end\n    else\n        for i = 2, #l - 1 do\n      \
    \      if l[i] > l[i + 1] then\n                return false\n            end\n\
    \        end\n    end\n    return true\nend", "    local is_mono = true\n    local\
    \ is_inc = (l[1] < l[2])\n    for i = 2, #l do\n        if l[i] == l[i-1] then\n\
    \            -- nothing\n        elseif l[i] > l[i-1] then\n            if not\
    \ is_inc then\n                is_mono = false\n                break\n      \
    \      end\n        else\n            if is_inc then\n                is_mono\
    \ = false\n                break\n            end\n        end\n    end\n    return\
    \ is_mono\nend", "  if l[1] < l[2] then\n    for i = 2, #l - 1 do\n      if l[i]\
    \ > l[i + 1] then\n        return false\n      end\n    end\n  else\n    for i\
    \ = 2, #l - 1 do\n      if l[i] < l[i + 1] then\n        return false\n      end\n\
    \    end\n  end\n  return true\nend", "    local previous = l[1]\n    local increasing\
    \ = previous < l[2]\n    for i = 2, #l do\n        if l[i] == previous then\n\
    \            return false\n        end\n        if (increasing and previous >\
    \ l[i]) or (not increasing and previous < l[i]) then\n            return false\n\
    \        end\n        previous = l[i]\n    end\n    return true\nend", "    local\
    \ n = #l\n    local order = l[1] <= l[2]\n    for i = 2, n - 1 do\n        if\
    \ l[i] <= l[i + 1] ~= order then\n            return false\n        end\n    end\n\
    \    return true\nend", "    if #l <= 1 then\n        return true\n    end\n \
    \   if l[1] <= l[2] then\n        for i = 2, #l - 1 do\n            if l[i] >\
    \ l[i + 1] then\n                return false\n            end\n        end\n\
    \    else\n        for i = 2, #l - 1 do\n            if l[i] < l[i + 1] then\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend", "    if l[1] > l[2] then\n        for i = 1, #l - 1 do\n       \
    \     if l[i] < l[i + 1] then\n                return false\n            end\n\
    \        end\n    else\n        for i = 1, #l - 1 do\n            if l[i] > l[i\
    \ + 1] then\n                return false\n            end\n        end\n    end\n\
    \    return true\nend", "  for i = 2, #l do\n    if l[i - 1] > l[i] then\n   \
    \   for j = i, #l do\n        if l[j - 1] < l[j] then\n          return false\n\
    \        end\n      end\n      return true\n    elseif l[i - 1] < l[i] then\n\
    \      for j = i, #l do\n        if l[j - 1] > l[j] then\n          return false\n\
    \        end\n      end\n      return true\n    end\n  end\n  return true\nend",
  "    return (l[2] >= l[1]) == (l[#l] >= l[#l-1])\nend", "  local ord = math.abs(l[2]\
    \ - l[1]) <= math.abs(l[3] - l[2]) and 1 or -1\n  for i = 2, #l - 1 do\n    if\
    \ ord * (l[i + 1] - l[i]) <= 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local sgn = function(x) return x>0 and 1 or x<0 and -1 or 0 end\n\
    \  local xs = map(sgn, l)\n  return all(function(x) return x>=0 end, xs) or all(function(x)\
    \ return x<=0 end, xs)\nend", "    -- monotonic(l) = (monotonic_increase(l) ||\
    \ monotonic_decrease(l))\n    local n = #l\n    if n <= 1 then\n        return\
    \ true\n    end\n    local b = l[1]\n    for i = 2, n do\n        if not(l[i]\
    \ == b or l[i] - b == 1 or b - l[i] == 1) then\n            return false\n   \
    \     end\n        b = l[i]\n    end\n    return true\nend", "    local direction\
    \ = 0\n    for i = 2, #l do\n        local prev = l[i - 1]\n        local curr\
    \ = l[i]\n        if prev ~= curr then\n            if direction == 0 then\n \
    \               direction = prev < curr and 1 or -1\n            elseif prev <\
    \ curr and direction == -1 or\n                    prev > curr and direction ==\
    \ 1 then\n                return false\n            end\n        end\n    end\n\
    \    return true\nend", "    local up = true\n    local down = true\n    for i\
    \ = 2, #l do\n        if l[i] > l[i - 1] then\n            down = false\n    \
    \    elseif l[i] < l[i - 1] then\n            up = false\n        end\n    end\n\
    \    return up or down\nend", "    local dir = sign(l[2] - l[1])\n    if dir ==\
    \ 0 then return true end\n    for i = 3, #l do\n        if sign(l[i] - l[i - 1])\
    \ ~= dir then return false end\n    end\n    return true\nend", "    local x,\
    \ y = l[1], l[2]\n    if not (x < y or x > y) then\n        return false\n   \
    \ end\n    for i = 3, #l do\n        x, y = y, l[i]\n        if not (x < y or\
    \ x > y) then\n            return false\n        end\n    end\n    return true\n\
    end", "\treturn #l <= 1 or all(l, function(x, y) return x < y end) or all(l, function(x,\
    \ y) return x > y end)\nend", "\tlocal sign = math.abs(l[2] - l[1]) / (l[2] -\
    \ l[1])\n\tfor i = 3, #l do\n\t\tlocal nsign = math.abs(l[i] - l[i - 1]) / (l[i]\
    \ - l[i - 1])\n\t\tif nsign ~= sign then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend", "    local i = l[1]\n    local increase = i < l[2]\n    for\
    \ n = 2, #l do\n        if l[n] ~= nil then\n            if (l[n] > i) ~= increase\
    \ then\n                return false\n            end\n            i = l[n]\n\
    \        end\n    end\n    return true\nend", "  local flag = (l[2] - l[1]) >\
    \ 0\n  for i = 2, #l - 1 do\n    if (l[i + 1] - l[i]) * (l[i] - l[i - 1]) < 0\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  if #l < 2\
    \ then return true end\n  local d = l[2] - l[1]\n  for i = 3, #l do\n    if (l[i]\
    \ - l[i-1]) * d < 0 then return false end\n  end\n  return true\nend", "  local\
    \ increasing = l[1] < l[2]\n  local decreasing = l[1] > l[2]\n  for i = 2, #l\
    \ - 1 do\n    local val = l[i]\n    local next_val = l[i + 1]\n    if increasing\
    \ and not (val < next_val) then\n      return false\n    elseif decreasing and\
    \ not (val > next_val) then\n      return false\n    end\n  end\n  return true\n\
    end", "  if #l == 0 then return true end\n  local str = function(a, b)\n    return\
    \ a > b and 1 or a < b and -1 or 0\n  end\n  local mode = str(l[1], l[2])\n  if\
    \ mode == 0 then return true end\n  for i = 2, #l do\n    if str(l[i], l[i + 1])\
    \ ~= mode then return false end\n  end\n  return true\nend", "  local n = #l\n\
    \  local isAscending = l[1] < l[n]\n  for i = 2, n do\n    if isAscending then\n\
    \      if l[i - 1] > l[i] then\n        return false\n      end\n    else\n  \
    \    if l[i - 1] < l[i] then\n        return false\n      end\n    end\n  end\n\
    \  return true\nend", "    if #l < 2 then\n        return true\n    end\n    local\
    \ sign = 1\n    local inc = l[2] - l[1]\n    if inc < 0 then\n        sign = -1\n\
    \    end\n    for i = 2, #l - 1 do\n        if sign * (l[i + 1] - l[i]) < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ asc = true\n  local dsc = true\n  for i = 2, #l do\n    if l[i] < l[i - 1] then\n\
    \      asc = false\n    end\n    if l[i] > l[i - 1] then\n      dsc = false\n\
    \    end\n  end\n  return asc or dsc\nend", "\tlocal inc = true\n\tlocal dec =\
    \ true\n\tfor i = 2, #l do\n\t\tinc = inc and l[i] >= l[i - 1]\n\t\tdec = dec\
    \ and l[i] <= l[i - 1]\n\tend\n\treturn inc or dec\nend", "\tfor i = 2, #l do\n\
    \t\tif ((l[i] > l[i - 1]) and (l[i - 1] < l[i - 2])) or ((l[i] < l[i - 1]) and\
    \ (l[i - 1] > l[i - 2])) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "    if #l < 2 then\n        return true\n    end\n    local is_increasing\
    \ = l[1] < l[2]\n    for i = 2, #l - 1 do\n        if l[i] < l[i + 1] then\n \
    \           if not is_increasing then\n                return false\n        \
    \    end\n        elseif l[i] > l[i + 1] then\n            if is_increasing then\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend", "    -- TODO\n    local monotonic, descending, ascnding = true,\
    \ true, true\n    for i=1, #l-1 do\n        if l[i] < l[i+1] then\n          \
    \  descending = false\n        elseif l[i] > l[i+1] then\n            ascnding\
    \ = false\n        end\n    end\n    if (descending and ascnding) or (not descending\
    \ and not ascnding) then\n        monotonic = false\n    end\n    return monotonic\n\
    end", "\tif l[1] < l[2] then\n\t\tfor i = 2, #l do\n\t\t\tif l[i] < l[i - 1] then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\telse\n\t\tfor i = 2, #l do\n\t\t\t\
    if l[i] > l[i - 1] then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ true\nend", "  local mode = false\n  for i = 2, #l do\n    if l[i] == l[i -\
    \ 1] then\n      mode = 0\n    elseif l[i] > l[i - 1] then\n      if mode == 0\
    \ then mode = false end\n      if mode and mode ~= 1 then return false end\n \
    \     mode = 1\n    else\n      if mode == 0 then mode = false end\n      if mode\
    \ and mode ~= -1 then return false end\n      mode = -1\n    end\n  end\n  return\
    \ true\nend", "  local direction = nil\n  for i = 2, #l do\n    local cur_delta\
    \ = l[i] - l[i - 1]\n    if direction == nil then\n      direction = cur_delta\n\
    \    elseif direction * cur_delta < 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  return (l[1] <= l[2] and _.all(l, function(item, i)\n\
    \           return not (item > l[i + 1])\n         end)) or\n           (l[1]\
    \ >= l[2] and _.all(l, function(item, i)\n             return not (item < l[i\
    \ + 1])\n           end))\nend", "  local increasing = l[1] < l[2]\n  for i =\
    \ 2, #l do\n    if (l[i-1] < l[i]) ~= increasing then\n      return false\n  \
    \  end\n  end\n  return true\nend", "    local is_inc = false\n    local is_dec\
    \ = false\n    for i = 2, #l do\n        if l[i - 1] < l[i] then\n           \
    \ is_inc = true\n        elseif l[i - 1] > l[i] then\n            is_dec = true\n\
    \        end\n        if is_inc and is_dec then\n            return false\n  \
    \      end\n    end\n    return true\nend", "    local decreasing = true\n   \
    \ local increasing = true\n    for i = 2, #l do\n        if l[i] < l[i - 1] then\n\
    \            increasing = false\n        elseif l[i] > l[i - 1] then\n       \
    \     decreasing = false\n        end\n    end\n    return increasing or decreasing\n\
    end", "  local ix_last = #l\n  if ix_last < 2 then return true end\n  local first\
    \ = l[1]\n  local last = l[ix_last]\n  local increasing = first < last\n  for\
    \ ix = 2, ix_last do\n    local next = l[ix]\n    if increasing then\n      if\
    \ not (first < next) then return false end\n    else\n      if not (next < first)\
    \ then return false end\n    end\n    first = next\n  end\n  return true\nend",
  "  local is_inc = l[1] < l[2]\n  for i = 2, #l - 1 do\n    if l[i] < l[i + 1] ~=\
    \ is_inc then\n      return false\n    end\n  end\n  return true\nend", "    if\
    \ #l == 0 then\n        return true\n    end\n    local inc = l[1] < l[2]\n  \
    \  for i = 2, #l - 1 do\n        if inc ~= (l[i] < l[i + 1]) then\n          \
    \  return false\n        end\n    end\n    return true\nend", "  local dir = 0\n\
    \  for i=2,#l do\n    local inc = (l[i] - l[i-1])\n    if dir==0 then\n      dir\
    \ = inc\n    elseif inc*dir<0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    return sorted(l, '>=') or sorted(l, '<=')\nend", "  local inc,\
    \ dec = false, false\n  for i = 2, #l do\n    if l[i] > l[i - 1] then\n      inc\
    \ = true\n    elseif l[i] < l[i - 1] then\n      dec = true\n    end\n    if inc\
    \ and dec then\n      return false\n    end\n  end\n  return true\nend", "   \
    \ local res = {}\n    local l_len = #l\n    local direction = \"increasing\"\n\
    \    if l[1] > l[l_len] then\n        direction = \"decreasing\"\n    end\n  \
    \  for i=1,l_len-1 do\n        if direction == \"increasing\" then\n         \
    \   res[i] = l[i] <= l[i+1]\n        else\n            res[i] = l[i] >= l[i+1]\n\
    \        end\n    end\n    return (#res == 0) or not (#res % 2 == 0)\nend", " \
    \ -- brute force\n  if #l <= 1 then return true end", "  local n = #l\n  if n\
    \ <= 1 then return true end\n  if l[1] < l[2] then\n    for i = 2, n - 1 do\n\
    \      if l[i] > l[i + 1] then return false end\n    end\n  else\n    for i =\
    \ 2, n - 1 do\n      if l[i] < l[i + 1] then return false end\n    end\n  end\n\
    \  return true\nend", "    if (#l <= 1) then\n        return true\n    end\n \
    \   local d = l[2] - l[1]\n    for i = 2, #l do\n        if (l[i] - l[i - 1])\
    \ * d < 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "  local mode = nil\n  for i = 2, #l do\n    if l[i] > l[i - 1] then\n \
    \     if mode == false then\n        return false\n      end\n      mode = true\n\
    \    elseif l[i] < l[i - 1] then\n      if mode == true then\n        return false\n\
    \      end\n      mode = false\n    end\n  end\n  return true\nend", "\tlocal\
    \ direction\n\tfor i = 2, #l do\n\t\tif not direction then\n\t\t\tdirection =\
    \ l[i] - l[i - 1]\n\t\telseif direction * (l[i] - l[i - 1]) < 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "    if #l == 0 then\n        return\
    \ true\n    end\n    local prev = l[1]\n    local increasing = nil\n    for i\
    \ = 2, #l do\n        if l[i] == prev then\n            -- Ignore equal values.\n\
    \        elseif increasing == nil then\n            increasing = l[i] > prev\n\
    \        elseif increasing ~= (l[i] > prev) then\n            return false\n \
    \       end\n        prev = l[i]\n    end\n    return true\nend", "    local found_asc,\
    \ found_dsc = false, false\n    for i = 2, #l do\n        if l[i] > l[i - 1] then\n\
    \            found_asc = true\n        elseif l[i] < l[i - 1] then\n         \
    \   found_dsc = true\n        end\n        if found_asc and found_dsc then\n \
    \           return false\n        end\n    end\n    return true\nend", "  local\
    \ inc, dec = true, true\n  for i = 2, #l do\n    if l[i-1] >= l[i] then inc =\
    \ false end\n    if l[i-1] <= l[i] then dec = false end\n  end\n  return inc or\
    \ dec\nend", "    local m1 = mono1(l)\n    if m1 ~= nil then\n        return m1\n\
    \    end\n    local m2 = mono2(l)\n    if m2 ~= nil then\n        return m2\n\
    \    end\n    return false\nend", "    local last = 0\n    local increasing =\
    \ true\n    local decreasing = true\n    for _, v in ipairs(l) do\n        if\
    \ v == last then\n            -- continue\n        elseif v > last then\n    \
    \        decreasing = false\n        elseif v < last then\n            increasing\
    \ = false\n        end\n        last = v\n    end\n    return increasing or decreasing\n\
    end", "    local is_increasing = l[1] < l[2]\n    for i = 2, #l - 1 do\n     \
    \   if l[i] < l[i+1] ~= is_increasing then\n            return false\n       \
    \ end\n    end\n    return true\nend", "    local i = 1\n    local c = 0\n   \
    \ while i < #l do\n        if l[i] < l[i + 1] then\n            c = c + 1\n  \
    \      elseif l[i] > l[i + 1] then\n            c = c - 1\n        end\n     \
    \   i = i + 1\n    end\n    return c == 0 or c == #l - 1 or c == -(#l - 1)\nend",
  "  local n = #l\n  if n < 2 then return true end\n  local inc = 0\n  local d = l[2]\
    \ - l[1]\n  for i = 3, n do\n    local dd = l[i] - l[i-1]\n    if dd == 0 then\
    \ -- repeat\n      inc = 0\n    elseif dd > 0 then\n      if inc < 0 then return\
    \ false end\n      inc = 1\n    elseif dd < 0 then\n      if inc > 0 then return\
    \ false end\n      inc = -1\n    end\n  end\n  return true\nend", "  local order\
    \ = 0\n  for i = 2, #l do\n    local diff = l[i] - l[i - 1]\n    if diff ~= 0\
    \ then\n      if order == 0 then\n        order = diff\n      elseif diff * order\
    \ < 0 then\n        return false\n      end\n    end\n  end\n  return true\nend",
  "  local increasing = true\n  local decreasing = true\n  for i = 2, #l do\n    increasing\
    \ = increasing and l[i] >= l[i - 1]\n    decreasing = decreasing and l[i] <= l[i\
    \ - 1]\n  end\n  return increasing or decreasing\nend", "  local inc, dec = true,\
    \ true\n  for i = 2, #l do\n    if l[i] < l[i - 1] then inc = false end\n    if\
    \ l[i] > l[i - 1] then dec = false end\n  end\n  return inc or dec\nend", "\t\
    local increasing = l[1] < l[2]\n\tfor i = 3, #l do\n\t\tif increasing then\n\t\
    \t\tif l[i] < l[i - 1] then\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\t\
    if l[i] > l[i - 1] then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ true\nend", "\tlocal inc, dec = true, true\n\tfor i = 2, #l do\n\t\tif l[i]\
    \ < l[i - 1] then\n\t\t\tinc = false\n\t\tend\n\t\tif l[i] > l[i - 1] then\n\t\
    \t\tdec = false\n\t\tend\n\tend\n\treturn inc or dec\nend", "\tif #l < 2 then\
    \ return true end\n\tlocal monotonic = true\n\tlocal decreasing = false\n\tlocal\
    \ last = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] > last then\n\t\t\tif decreasing\
    \ then\n\t\t\t\tmonotonic = false\n\t\t\t\tbreak\n\t\t\tend\n\t\telseif l[i] <\
    \ last then\n\t\t\tif not decreasing then\n\t\t\t\tdecreasing = true\n\t\t\tend\n\
    \t\telse\n\t\t\tmonotonic = false\n\t\t\tbreak\n\t\tend\n\t\tlast = l[i]\n\tend\n\
    \treturn monotonic\nend", "  if type(l) ~= 'table' then return false end\n  if\
    \ #l <= 1 then return true end\n  local ascending = l[1] < l[2]\n  for i = 2,\
    \ #l do\n    if ascending then\n      if l[i-1] > l[i] then return false end\n\
    \    else\n      if l[i-1] < l[i] then return false end\n    end\n  end\n  return\
    \ true\nend", "  local up = false\n  local down = false\n  local previous = 0\n\
    \  for i, v in ipairs(l) do\n    if i > 1 then\n      if v < previous then\n \
    \       down = true\n      elseif v > previous then\n        up = true\n     \
    \ end\n    end\n    previous = v\n  end\n  return not (up and down)\nend", " \
    \   if #l < 2 then\n        return true\n    end\n    local inc = l[2] - l[1]\n\
    \    local i = 3\n    while l[i] ~= nil do\n        if (l[i] - l[i - 1]) * inc\
    \ < 0 then\n            return false\n        end\n        i = i + 1\n    end\n\
    \    return true\nend", "    local inc = 0\n    local diff\n    local el\n   \
    \ local prev = l[1]\n    for i = 2, #l do\n        el = l[i]\n        diff = el\
    \ - prev\n        if diff > 0 then\n            if inc >= 0 then\n           \
    \     inc = 1\n            else\n                return false\n            end\n\
    \        elseif diff < 0 then\n            if inc <= 0 then\n                inc\
    \ = -1\n            else\n                return false\n            end\n    \
    \    end\n        prev = el\n    end\n    return true\nend", "  local increasing\
    \ = l[1] <= l[2]\n  for i = 2, #l-1 do\n    if increasing and l[i] > l[i+1] or\
    \ not increasing and l[i] < l[i+1] then\n      return false\n    end\n  end\n\
    \  return true\nend", "    local lc = cpy(l)\n    table.sort(lc)\n    if cmp(l,\
    \ lc) then\n        return true\n    end\n    table.sort(lc, function(a, b) return\
    \ a > b end)\n    if cmp(l, lc) then\n        return true\n    end\n    return\
    \ false\nend", "  local c = #l\n  if c < 2 then return true end\n  local d = l[1]\
    \ < l[2] and 1 or -1\n  for i = 2, c do\n    if l[i]*d < l[i-1]*d then return\
    \ false end\n  end\n  return true\nend", "  if #l < 2 then return true end\n \
    \ local inc = l[2] > l[1]\n  for i = 2, #l - 1 do\n    if l[i + 1] > l[i] ~= inc\
    \ then return false end\n  end\n  return true\nend", "    local dir = l[2] - l[1]\n\
    \    for i = 3, #l do\n        if l[i] - l[i - 1] ~= dir then\n            return\
    \ false\n        end\n    end\n    return true\nend", "\tfor i = 2, #l do\n\t\t\
    if l[i] < l[i - 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
  "\tlocal x = l[1]\n\tlocal a = 0\n\tfor _, y in ipairs(l) do\n\t\tif a == 0 then\n\
    \t\t\tif y < x then\n\t\t\t\ta = -1\n\t\t\telseif y > x then\n\t\t\t\ta = 1\n\t\
    \t\tend\n\t\telseif a == -1 and y > x then\n\t\t\treturn false\n\t\telseif a ==\
    \ 1 and y < x then\n\t\t\treturn false\n\t\tend\n\t\tx = y\n\tend\n\treturn true\n\
    end", "  for i = 2, #l do\n    if not ((l[i] - l[i - 1]) * l[1] > 0) then\n  \
    \    return false\n    end\n  end\n  return true\nend", "    local t = (l[2] >\
    \ l[1]) and 1 or -1\n    for i = 2, #l - 1 do\n        if not ((l[i + 1] - l[i])\
    \ * t > 0) then\n            return false\n        end\n    end\n    return true\n\
    end", "  local v = l[1]\n  local a = 0\n  for _, w in ipairs(l) do\n    local\
    \ a0 = a\n    if w > v then\n      a = 1\n    elseif w < v then\n      a = -1\n\
    \    end\n    if a0 * a < 0 then\n      return false\n    end\n    v = w\n  end\n\
    \  return true\nend", "  return _.all(l, function(a, b) return (a < b) or (a >\
    \ b) end)\nend", "  if #l < 2 then return true end\n  local e1, e2 = l[1], l[2]\n\
    \  local decreasing = (e1 > e2)\n  for i = 2, #l - 1 do\n    local e = l[i]\n\
    \    if decreasing then\n      if e < e2 then return false end\n    else\n   \
    \   if e > e2 then return false end\n    end\n    e2 = e\n  end\n  return true\n\
    end", "    local dec = false\n    local inc = false\n    for i = 2, #l do\n  \
    \      if l[i] > l[i - 1] then\n            inc = true\n        elseif l[i] <\
    \ l[i - 1] then\n            dec = true\n        end\n        if inc and dec then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ m = increase(l)\n  if m == 0 then\n    return true\n  else\n    return m ==\
    \ decrease(l)\n  end\nend", "    local prev = l[1]\n    local decreasing = nil\n\
    \    for _, x in ipairs(l) do\n        if prev < x then\n            if decreasing\
    \ then\n                return false\n            end\n        elseif prev > x\
    \ then\n            if not decreasing then\n                decreasing = true\n\
    \            end\n        end\n        prev = x\n    end\n    return true\nend",
  "  local res = true\n  local op = l[2] > l[1] and gt or lt\n  for i = 3, #l do\n\
    \    if not op(l[i], l[i - 1]) then\n      res = false\n      break\n    end\n\
    \  end\n  return res\nend", "    local len = #l\n    local increasing = nil\n\
    \    for i = 1, len - 1 do\n        if l[i] ~= l[i + 1] then\n            if increasing\
    \ == nil then\n                increasing = l[i] < l[i + 1]\n            elseif\
    \ increasing and l[i] > l[i + 1] then\n                return false\n        \
    \    elseif not increasing and l[i] < l[i + 1] then\n                return false\n\
    \            end\n        end\n    end\n    return true\nend", "    local set\
    \ = {}\n    for _, i in ipairs(l) do\n        if set[i] then\n            return\
    \ false\n        end\n        set[i] = true\n    end\n    return true\nend", " \
    \   local function iter(prev, curr)\n        if not prev then return true end\n\
    \        if curr then\n            return iter(curr, getnext(curr))\n        else\n\
    \            return true\n        end\n    end\n    return iter(l, getnext(l))\n\
    end", "  local prev = l[1]\n  local increasing = true\n  for i, v in ipairs(l)\
    \ do\n    if i > 1 then\n      if v > prev then\n        increasing = true\n \
    \     elseif v < prev then\n        increasing = false\n      else\n        return\
    \ false\n      end\n    end\n    prev = v\n  end\n  return true\nend", "    if\
    \ l[1] < l[2] then\n        for i = 2, #l - 1 do\n            if l[i] > l[i +\
    \ 1] then\n                return false\n            end\n        end\n    else\n\
    \        for i = 2, #l - 1 do\n            if l[i] < l[i + 1] then\n         \
    \       return false\n            end\n        end\n    end\n    return true\n\
    end", "    local len = #l\n    local inc = (l[len] > l[1])\n    for i = 2, len\
    \ do\n        if (inc and l[i] < l[i - 1]) or (not inc and l[i] > l[i - 1]) then\n\
    \            return false\n        end\n    end\n    return true\nend", "  return\
    \ all(function(a, b) return a > b end, l) or all(function(a, b) return a < b end,\
    \ l)\nend", "  local direction = (l[2] - l[1])/math.abs(l[2] - l[1])\n  for i\
    \ = 3, #l do\n    if (l[i] - l[i-1])/math.abs(l[i] - l[i-1]) ~= direction then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local d = {}\n  for\
    \ i = 2, #l do\n    local x = l[i] - l[i - 1]\n    if x < 0 then\n      x = -1\n\
    \    elseif x > 0 then\n      x = 1\n    end\n    d[i] = x\n  end\n  return d[2]\
    \ == 0 or d[2] == d[#d]\nend", "  local sign\n  for i=2,#l do\n    local diff\
    \ = l[i] - l[i-1]\n    if diff == 0 then\n      -- ignore\n    elseif not sign\
    \ then\n      sign = diff\n    elseif diff > 0 and sign < 0 then\n      return\
    \ false\n    elseif diff < 0 and sign > 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local prev = nil\n  local dir = nil\n  for _,\
    \ x in ipairs(l) do\n    if prev then\n      if not dir then\n        dir = x\
    \ > prev and 1 or x < prev and -1\n      elseif x > prev and dir ~= 1 or x < prev\
    \ and dir ~= -1 then\n        return false\n      end\n    end\n    prev = x\n\
    \  end\n  return true\nend", "  local direction\n  for i = 2, #l do\n    if not\
    \ direction then\n      if l[i] > l[i - 1] then\n        direction = 'increasing'\n\
    \      elseif l[i] < l[i - 1] then\n        direction = 'decreasing'\n      end\n\
    \    elseif (direction == 'increasing' and l[i] < l[i - 1]) or\n      (direction\
    \ == 'decreasing' and l[i] > l[i - 1]) then\n      return false\n    end\n  end\n\
    \  return true\nend", "    for i = 2, #l do\n        if l[i] > l[i - 1] then\n\
    \            for i = 2, #l do\n                if l[i] < l[i - 1] then\n     \
    \               return false\n                end\n            end\n         \
    \   return true\n        elseif l[i] < l[i - 1] then\n            for i = 2, #l\
    \ do\n                if l[i] > l[i - 1] then\n                    return false\n\
    \                end\n            end\n            return true\n        end\n\
    \    end\n    return true\nend", "    local inc = 0  -- -1: decreasing, 0: unkown,\
    \ 1: increasing\n    for i = 2, #l do\n        if l[i] > l[i - 1] then\n     \
    \       if inc == -1 then\n                return false\n            end\n   \
    \         inc = 1\n        elseif l[i] < l[i - 1] then\n            if inc ==\
    \ 1 then\n                return false\n            end\n            inc = -1\n\
    \        end\n    end\n    return true\nend", "\tlocal increasing = true\n\tlocal\
    \ decreasing = true\n\tfor i = 2, #l do\n\t\tincreasing = increasing and l[i -\
    \ 1] <= l[i]\n\t\tdecreasing = decreasing and l[i - 1] >= l[i]\n\tend\n\treturn\
    \ increasing or decreasing\nend", "    local last = l[1]\n    local direction\
    \ = 0", "  local i = 2\n  local len = #l\n  local d = l[2] - l[1]\n  if d > 0\
    \ then\n    while i <= len do\n      if l[i] < l[i - 1] then\n        return false\n\
    \      end\n      i = i + 1\n    end\n  elseif d < 0 then\n    while i <= len\
    \ do\n      if l[i] > l[i - 1] then\n        return false\n      end\n      i\
    \ = i + 1\n    end\n  end\n  return true\nend", "  local m = sign(l[2] - l[1])\n\
    \  for i = 3, #l do\n    if m ~= sign(l[i] - l[i - 1]) then\n      return false\n\
    \    end\n  end\n  return true\nend", "\tlocal increasing = l[1] <= l[2]\n\tfor\
    \ i = 2, #l-1 do\n\t\tif (increasing and l[i] > l[i+1]) or\n\t\t\t(not increasing\
    \ and l[i] < l[i+1]) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "  return (#l < 2) or\n    (l[1] <= l[2] and monotonic(l[2]) or\n     l[1]\
    \ >= l[2] and monotonic({unpack(l, 2)})\n    )\nend", "  local direction = l[2]\
    \ > l[1] and 1 or -1\n  for i = 3, #l do\n    if l[i] - l[i - 1] ~= direction\
    \ then\n      return false\n    end\n  end\n  return true\nend", "\tif l[1] <=\
    \ l[2] then\n\t\tfor i = 2, #l - 1 do\n\t\t\tif l[i] > l[i + 1] then\n\t\t\t\t\
    return false\n\t\t\tend\n\t\tend\n\telse\n\t\tfor i = 2, #l - 1 do\n\t\t\tif l[i]\
    \ < l[i + 1] then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn true\n\
    end", "  if #l == 0 then return true end\n  local sign = sign(l[2] - l[1])\n \
    \ for i = 2, #l - 1 do\n    if sign * (l[i + 1] - l[i]) < 0 then return false\
    \ end\n  end\n  return true\nend", "    if #l <= 1 then\n        return true\n\
    \    end\n    local direction = l[2] > l[1]\n    for i = 3, #l do\n        if\
    \ direction ~= (l[i] > l[i - 1]) then\n            return false\n        end\n\
    \    end\n    return true\nend", "  local inc, dec = true, true\n  for i = 2,\
    \ #l do\n    if l[i] < l[i - 1] then inc = false end\n    if l[i] > l[i - 1] then\
    \ dec = false end\n  end\n  return inc or dec\nend", "    local direction = nil\n\
    \    for i = 2, #l do\n        local d = l[i-1] < l[i] and 1 or l[i-1] > l[i]\
    \ and -1 or 0\n        if d == 0 then return false end\n        if direction and\
    \ d ~= direction then return false end\n        direction = d\n    end\n    return\
    \ true\nend", "  local inc = false\n  local dec = false\n  for i=2,#l do\n   \
    \ local u = l[i-1]\n    local v = l[i]\n    if u < v then\n      inc = true\n\
    \    elseif u > v then\n      dec = true\n    end\n    if inc and dec then\n \
    \     return false\n    end\n  end\n  return true\nend", "\tlocal function pred(a,\
    \ b)\n\t\treturn a <= b\n\tend\n\tlocal function anti(a, b)\n\t\treturn a >= b\n\
    \tend\n\tlocal function just_return(a, b)\n\t\treturn true\n\tend\n\tlocal compare\
    \ = just_return\n\tfor i = 2, #l do\n\t\tif l[i] ~= l[i - 1] then\n\t\t\tif compare\
    \ ~= just_return then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tif l[i] > l[i -\
    \ 1] then\n\t\t\t\tcompare = pred\n\t\t\telse\n\t\t\t\tcompare = anti\n\t\t\t\
    end\n\t\tend\n\t\tif not compare(l[i], l[i - 1]) then\n\t\t\treturn false\n\t\t\
    end\n\tend\n\treturn true\nend", "    return all(lt, zip(l, tail(l))) or all(gt,\
    \ zip(l, tail(l)))\nend", "    local i = 2\n    local inc = l[i] > l[i - 1]\n\
    \    while l[i] ~= nil do\n        if (l[i] > l[i - 1]) ~= inc then\n        \
    \    return false\n        end\n        i = i + 1\n    end\n    return true\n\
    end", "    if #l < 2 then\n        return true\n    end\n    local diff = l[2]\
    \ - l[1]\n    for i = 3, #l do\n        if diff * (l[i] - l[i - 1]) < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "\tlocal\
    \ incr = true\n\tlocal prev = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] < prev then\n\
    \t\t\tincr = false\n\t\t\tbreak\n\t\tend\n\t\tprev = l[i]\n\tend\n\tlocal decr\
    \ = true\n\tlocal prev = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] > prev then\n\t\
    \t\tdecr = false\n\t\t\tbreak\n\t\tend\n\t\tprev = l[i]\n\tend\n\treturn incr\
    \ or decr\nend", "\tlocal order = nil\n\tfor i = 2, #l do\n\t\tlocal curr = l[i]\n\
    \t\tlocal prev = l[i - 1]\n\t\tif curr == prev then goto continue end\n\t\tlocal\
    \ diff = curr - prev\n\t\tif order == nil then\n\t\t\torder = diff\n\t\telseif\
    \ (order > 0 and diff < 0) or (order < 0 and diff > 0) then\n\t\t\treturn false\n\
    \t\tend\n\t\t::continue::\n\tend\n\treturn true\nend", "  return all_elements(function(a,\
    \ b) return a <= b end, l) or\n         all_elements(function(a, b) return a >=\
    \ b end, l)\nend", "    local d = l[2] - l[1]\n    local m = d > 0 and true or\
    \ d < 0 and false or nil\n    for i = 3, #l do\n        d = l[i] - l[i - 1]\n\
    \        if d > 0 and not m or d < 0 and m then\n            return false\n  \
    \      end\n    end\n    return true\nend", "    local d = l[2] - l[1]\n    for\
    \ i = 3, #l do\n        if l[i] - l[i - 1] ~= d then\n            return false\n\
    \        end\n    end\n    return true\nend", "    if #l < 3 then\n        return\
    \ true\n    end\n    local d = (l[2] - l[1]) * (l[3] - l[2])\n    if d < 0 then\n\
    \        for i = 3, #l do\n            if (l[i] - l[i - 1]) * (l[i - 1] - l[i\
    \ - 2]) >= 0 then\n                return false\n            end\n        end\n\
    \    elseif d > 0 then\n        for i = 3, #l do\n            if (l[i] - l[i -\
    \ 1]) * (l[i - 1] - l[i - 2]) <= 0 then\n                return false\n      \
    \      end\n        end\n    else\n        return false\n    end\n    return true\n\
    end", "\tlocal cmp = l[1] < l[2] and 1 or -1\n\tfor i = 2, #l - 1 do\n\t\tif cmp\
    \ == 0 then\n\t\t\tcmp = l[i] < l[i + 1] and 1 or -1\n\t\telseif l[i] * cmp <\
    \ l[i + 1] * cmp then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
  "    local direction = 0\n    local previous = nil\n    for _, v in ipairs(l) do\n\
    \        if previous ~= nil then\n            if v < previous then\n         \
    \       if direction == 1 then\n                    return false\n           \
    \     else\n                    direction = -1\n                end\n        \
    \    elseif v > previous then\n                if direction == -1 then\n     \
    \               return false\n                else\n                    direction\
    \ = 1\n                end\n            end\n        end\n        previous = v\n\
    \    end\n    return true\nend", "    local d = {\n        [0] = true,\n     \
    \   [1] = true,\n        [-1] = true\n    }\n    local prev = l[1]\n    local\
    \ direction = 0\n    for i, v in ipairs(l) do\n        if v ~= prev then\n   \
    \         local d_ = v - prev\n            if direction == 0 then\n          \
    \      direction = d_\n            elseif d_ * direction < 0 then\n          \
    \      return false\n            end\n        end\n        prev = v\n    end\n\
    \    return d[direction]\nend", "    if #l == 0 then\n        return true\n  \
    \  end\n    local delta = l[2] - l[1]\n    for i = 3, #l do\n        if l[i] -\
    \ l[i - 1] ~= delta then\n            return false\n        end\n    end\n   \
    \ return true\nend", "    local x = l[1]\n    local s = math.abs(l[2] - x) < 0.00001\n\
    \    for i = 2, #l - 1 do\n        local y = l[i]\n        local z = l[i + 1]\n\
    \        if math.abs(y - x) < 0.00001 and math.abs(z - y) < 0.00001 then\n   \
    \         return false\n        end\n        if s ~= (math.abs(z - y) < 0.00001)\
    \ then\n            return false\n        end\n        x = y\n    end\n    return\
    \ true\nend", "\tlocal direction = nil\n\tfor i = 2, #l do\n\t\tlocal diff = l[i]\
    \ - l[i - 1]\n\t\tif diff > 0 then\n\t\t\tif direction == false then\n\t\t\t\t\
    return false\n\t\t\tend\n\t\t\tdirection = true\n\t\telseif diff < 0 then\n\t\t\
    \tif direction == true then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tdirection\
    \ = false\n\t\tend\n\tend\n\treturn true\nend", "\tlocal incr, prev = nil, nil\n\
    \tfor _,v in ipairs(l) do\n\t\tif not prev then\n\t\t\tprev = v\n\t\telseif not\
    \ incr then\n\t\t\tincr = v > prev\n\t\telseif incr and v < prev then\n\t\t\t\
    return false\n\t\telseif not incr and v > prev then\n\t\t\treturn false\n\t\t\
    end\n\t\tprev = v\n\tend\n\treturn true\nend", "\tlocal d = (l[2] - l[1]) > 0\n\
    \tfor i = 2, #l do\n\t\tif (l[i] - l[i - 1]) > 0 ~= d then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "\tlocal direction = (l[2] - l[1]) > 0 and\
    \ 1 or -1\n\tfor i = 2, #l - 1 do\n\t\tif (l[i + 1] - l[i]) * direction < 0 then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    local ordered\n\
    \    for i=2,#l do\n        local prev = l[i-1]\n        local curr = l[i]\n \
    \       if ordered == nil then\n            if prev < curr then\n            \
    \    ordered = true\n            elseif prev > curr then\n                ordered\
    \ = false\n            end\n        elseif ordered then\n            if prev >\
    \ curr then\n                return false\n            end\n        elseif prev\
    \ < curr then\n            return false\n        end\n    end\n    return true\n\
    end", "  return (l[1] - l[2]) * (l[2] - l[3]) > 0\nend", "    local monotonic\
    \ = false\n    if #l >= 2 then\n        local slope = l[2] - l[1]\n        for\
    \ i = 2, #l - 1 do\n            local next_slope = l[i + 1] - l[i]\n         \
    \   if slope * next_slope < 0 then\n                return false\n           \
    \ end\n        end\n        monotonic = true\n    end\n    return monotonic\n\
    end", "    local diff = {[0] = l[1] - l[2]}\n    local prev = diff[0]\n    for\
    \ i = 2, #l - 1 do\n        diff[i] = l[i] - l[i + 1]\n        if diff[i] * prev\
    \ < 0 then\n            return false\n        end\n        prev = diff[i]\n  \
    \  end\n    return true\nend", "  local d = (l[2] > l[1]) and 1 or -1\n  for i\
    \ = 2, #l - 1 do\n    if l[i + 1] * d < l[i] * d then\n      return false\n  \
    \  end\n  end\n  return true\nend", "    local a = l[1]\n    local b = a\n   \
    \ local c = a", "    local direction = l[2] - l[1]\n    for i = 3, #l do\n   \
    \     if direction > 0 and l[i] < l[i - 1] then\n            return false\n  \
    \      elseif direction < 0 and l[i] > l[i - 1] then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local n = #l\n    if n <= 1\
    \ then\n        return true\n    end\n    local direction = l[2] - l[1]\n    for\
    \ i = 2, n - 1 do\n        if direction * (l[i + 1] - l[i]) < 0 then\n       \
    \     return false\n        end\n    end\n    return true\nend", "\tlocal last\
    \ = l[1]\n\tlocal increasing = nil\n\tfor i = 2, #l do\n\t\tif increasing == nil\
    \ then\n\t\t\tincreasing = l[i] >= last\n\t\telseif increasing and l[i] < last\
    \ then\n\t\t\treturn false\n\t\telseif not increasing and l[i] > last then\n\t\
    \t\treturn false\n\t\tend\n\t\tlast = l[i]\n\tend\n\treturn true\nend", "  local\
    \ n = #l\n  if n < 2 then return true end\n  local s = l[2] - l[1]\n  if s ==\
    \ 0 then return false end\n  local inc = s > 0\n  for i = 3, n do\n    s = l[i]\
    \ - l[i - 1]\n    if s * (inc and 1 or -1) < 0 then return false end\n  end\n\
    \  return true\nend", "    local a = l[1]\n    local b = l[2]\n    local op =\
    \ lt\n    if a < b then\n        op = lt\n    elseif a > b then\n        op =\
    \ gt\n    else\n        return true\n    end\n    for i = 3, #l do\n        if\
    \ not op(b, l[i]) then\n            return false\n        end\n        b = l[i]\n\
    \    end\n    return true\nend", "  return all(zipWith(op.lt, l, tail(l))) or\
    \ all(zipWith(op.gt, l, tail(l)))\nend", "  if #l < 2 then return true end\n \
    \ local direction = l[2] - l[1]\n  for i = 3, #l do\n    if direction * (l[i]\
    \ - l[i - 1]) < 0 then return false end\n  end\n  return true\nend", "    return\
    \ (increasing(l) or decreasing(l))\nend", "    local increasing = l[1] < l[2]\n\
    \    for i = 2, #l - 1 do\n        if l[i] < l[i + 1] ~= increasing then\n   \
    \         return false\n        end\n    end\n    return true\nend", "    if #l\
    \ <= 1 then\n        return true\n    end\n    local decreasing = l[1] > l[2]\n\
    \    for i = 2, #l - 1 do\n        if l[i] > l[i + 1] and not decreasing then\n\
    \            return false\n        elseif l[i] < l[i + 1] and decreasing then\n\
    \            return false\n        end\n    end\n    return true\nend", "    if\
    \ #l < 2 then\n        return true\n    end\n    local direction = (l[2] - l[1])\
    \ / math.abs(l[2] - l[1])\n    for i = 2, #l - 1 do\n        if (l[i + 1] - l[i])\
    \ / math.abs(l[i + 1] - l[i]) ~= direction then\n            return false\n  \
    \      end\n    end\n    return true\nend", "    if #l < 2 then\n        return\
    \ true\n    end\n    local inc = l[2] > l[1]\n    for i = 3, #l do\n        if\
    \ l[i] > l[i - 1] ~= inc then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local deltas = zip(l, tail(l))\n    deltas = map(function(d)\
    \ return d[2] - d[1] end, deltas)\n    deltas = filter(function(d) return d ~=\
    \ 0 end, deltas)\n    local delta = deltas[1]\n    for _, d in ipairs(deltas)\
    \ do\n        if d * delta < 0 then\n            return false\n        end\n \
    \   end\n    return true\nend", "  local d = l[2] - l[1]\n  local f = (d >= 0)\
    \ and math.max or math.min\n  for i = 3, #l do\n    if f(l[i], l[i - 1]) ~= l[i]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local inc\
    \ = l[1] < l[2]\n  for i = 2, #l - 1 do\n    if l[i] < l[i + 1] then\n      if\
    \ not inc then return false end\n    elseif l[i] > l[i + 1] then\n      if inc\
    \ then return false end\n    end\n  end\n  return true\nend", "    local t = l[1]\n\
    \    local inc = nil\n    for i = 2, #l do\n        if l[i] ~= t then\n      \
    \      if inc == nil then\n                inc = l[i] > t\n            elseif\
    \ inc ~= (l[i] > t) then\n                return false\n            end\n    \
    \    end\n        t = l[i]\n    end\n    return true\nend", "\tlocal m\n\tfor\
    \ i, v in ipairs(l) do\n\t\tif m == nil then\n\t\t\tm = v\n\t\telseif m > v then\n\
    \t\t\tm = m - 1\n\t\telseif m < v then\n\t\t\tm = m + 1\n\t\telse\n\t\t\tm = m\n\
    \t\tend\n\tend\n\treturn true\nend", "    local direction = (l[2] >= l[1]) and\
    \ 1 or -1\n    for i = 3, #l do\n        if l[i] * direction < l[i - 1] * direction\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "  local direction = l[2] - l[1]\n  local prev = l[1]\n  for i = 2, #l do\n    if\
    \ direction * (l[i] - prev) < 0 then\n      return false\n    end\n    prev =\
    \ l[i]\n  end\n  return true\nend", "  local prev = l[1]\n  local direction =\
    \ 0\n  for i = 2, #l do\n    local curr = l[i]\n    if curr ~= prev then\n   \
    \   if direction == 0 then\n        direction = curr - prev\n      elseif (curr\
    \ - prev) * direction < 0 then\n        return false\n      end\n    end\n   \
    \ prev = curr\n  end\n  return true\nend", "  local last = l[1]\n  local increasing\
    \ = true\n  for _, e in ipairs(l) do\n    if e ~= last then\n      increasing\
    \ = e > last\n      break\n    end\n  end\n  for _, e in ipairs(l) do\n    if\
    \ e ~= last then\n      if e > last ~= increasing then\n        return false\n\
    \      end\n      last = e\n    end\n  end\n  return true\nend", "    if #l ==\
    \ 0 then\n        return true\n    end\n    local inc, dec = false, false\n  \
    \  local prev = l[1]\n    for i=2,#l do\n        local current = l[i]\n      \
    \  if current == prev then\n            prev = current\n        elseif current\
    \ > prev then\n            if dec then\n                return false\n       \
    \     end\n            inc = true\n            prev = current\n        elseif\
    \ current < prev then\n            if inc then\n                return false\n\
    \            end\n            dec = true\n            prev = current\n       \
    \ end\n    end\n    return true\nend", "  local v\n  for i, x in ipairs(l) do\n\
    \    if i == 1 then\n      v = x\n    elseif v < x then\n      v = x\n    elseif\
    \ v > x then\n      return false\n    end\n  end\n  return true\nend", "    local\
    \ d = 0\n    for i = 2, #l do\n        if l[i] > l[i - 1] then\n            if\
    \ d < 0 then\n                return false\n            end\n            d = 1\n\
    \        elseif l[i] < l[i - 1] then\n            if d > 0 then\n            \
    \    return false\n            end\n            d = -1\n        end\n    end\n\
    \    return true\nend", "\tlocal inc = l[1] < l[2]\n\tfor i = 2, #l - 1 do\n\t\
    \tif l[i] < l[i + 1] ~= inc then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "  if #l == 0 then return true end\n  if #l == 1 then return true\
    \ end\n  local z = l[1]\n  local increasing = l[2] > z\n  for i = 2, #l do\n \
    \   if increasing and l[i] < z then return false end\n    if not increasing and\
    \ l[i] > z then return false end\n    z = l[i]\n  end\n  return true\nend", " \
    \ local b\n  for i, v in ipairs(l) do\n    if i > 1 then\n      if b == nil then\n\
    \        if v > l[i - 1] then\n          b = true\n        elseif v < l[i - 1]\
    \ then\n          b = false\n        end\n      else\n        if b then\n    \
    \      if v < l[i - 1] then\n            return false\n          end\n       \
    \ else\n          if v > l[i - 1] then\n            return false\n          end\n\
    \        end\n      end\n    end\n  end\n  return true\nend", "    local idx =\
    \ 1\n    while (idx < #l and l[idx] <= l[idx + 1]) or (idx < #l and l[idx] >=\
    \ l[idx + 1]) do\n        idx = idx + 1\n    end\n    return idx == #l\nend",
  "    local n = #l\n    if n < 2 then\n        return true\n    end\n    local i\
    \ = 0\n    local diff = l[2] - l[1]\n    for i = 3, n do\n        if diff * (l[i]\
    \ - l[i - 1]) < 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local prev, is_increasing = nil, true\n    for i, v in ipairs(l)\
    \ do\n        if prev and v ~= prev then\n            is_increasing = v > prev\n\
    \        end\n        prev = v\n    end\n    local prev, is_decreasing = nil,\
    \ true\n    for i, v in ipairs(l) do\n        if prev and v ~= prev then\n   \
    \         is_decreasing = v < prev\n        end\n        prev = v\n    end\n \
    \   return is_increasing or is_decreasing\nend", "    local direction = 0\n  \
    \  for i = 2, #l do\n        local sign = (l[i] - l[i - 1]) / math.abs(l[i] -\
    \ l[i - 1])\n        if direction == 0 then\n            direction = sign\n  \
    \      elseif direction ~= sign then\n            return false\n        end\n\
    \    end\n    return true\nend", "    local i, count, sign = 2, #l, false\n  \
    \  while i <= count do\n        if sign == false then\n            if l[i] < l[i\
    \ - 1] then\n                sign = -1\n            elseif l[i] > l[i - 1] then\n\
    \                sign = 1\n            end\n        elseif sign == -1 and l[i]\
    \ > l[i - 1] then\n            return false\n        elseif sign == 1 and l[i]\
    \ < l[i - 1] then\n            return false\n        end\n        i = i + 1\n\
    \    end\n    return true\nend", "  local n = #l\n  local less_or_equal = l[1]\
    \ <= l[2]\n  for i = 2, n - 1 do\n    if less_or_equal then\n      if l[i] > l[i\
    \ + 1] then\n        return false\n      end\n    else\n      if l[i] < l[i +\
    \ 1] then\n        return false\n      end\n    end\n  end\n  return true\nend",
  "  return (l[1] <= l[2] and monotonic(l, l[1], l[2], l[2])) or\n         (l[1] >\
    \ l[2] and monotonic(l, l[1], l[2], l[2]))\nend", "    local state = (l[2] - l[1])\
    \ > 0\n    for i = 3, #l do\n        if (l[i] - l[i - 1]) > 0 ~= state then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ m = l[1]\n    local d = nil\n    for i, e in ipairs(l) do\n        if e ~= m\
    \ then\n            if d == nil then\n                d = e > m\n            elseif\
    \ e > m and not d then\n                return false\n            elseif e < m\
    \ and d then\n                return false\n            end\n        end\n   \
    \     m = e\n    end\n    return true\nend", "\tif #l < 3 then return true end\n\
    \tlocal sign = signum(l[2] - l[1])\n\tfor i = 3, #l do\n\t\tif signum(l[i] - l[i\
    \ - 1]) ~= sign then return false end\n\tend\n\treturn true\nend", "\tif #l ==\
    \ 0 then return false end\n\tlocal s = l[1]\n\tlocal d = s - l[2]\n\tfor i = 2,\
    \ #l do\n\t\tif s ~= l[i] then\n\t\t\tif d == 0 then\n\t\t\t\td = s - l[i]\n\t\
    \t\telseif s > l[i] and d < 0 then\n\t\t\t\treturn false\n\t\t\telseif s < l[i]\
    \ and d > 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\ts = l[i]\n\tend\n\
    \treturn true\nend", '    local inc = l[1] <= l[2]', "    local d = l[2] - l[1]\n\
    \    for i = 2, #l - 1 do\n        if d * (l[i + 1] - l[i]) < 0 then\n       \
    \     return false\n        end\n    end\n    return true\nend", "  local order\
    \ = l[2] - l[1]\n  for i = 2, #l - 1 do\n    if l[i + 1] - l[i] > 0 then\n   \
    \   if order > 0 then\n        return false\n      end\n      order = l[i + 1]\
    \ - l[i]\n    elseif l[i + 1] - l[i] < 0 then\n      if order < 0 then\n     \
    \   return false\n      end\n      order = l[i + 1] - l[i]\n    end\n  end\n \
    \ return true\nend", "  if #l == 0 then return true end\n  local increasing =\
    \ l[1] < l[2]\n  for i = 2, #l - 1 do\n    if increasing and l[i] > l[i + 1] then\
    \ return false end\n    if not increasing and l[i] < l[i + 1] then return false\
    \ end\n  end\n  return true\nend", "    local increasing = nil\n    for i=2,#l\
    \ do\n        if l[i] ~= l[i-1] then\n            if increasing == nil then\n\
    \                increasing = l[i] > l[i-1]\n            elseif increasing ~=\
    \ (l[i] > l[i-1]) then\n                return false\n            end\n      \
    \  end\n    end\n    return true\nend", "    local a = l[1]\n    local i = 1\n\
    \    local d = 0\n    while i <= #l do\n        if a == l[i] then\n          \
    \  i = i + 1\n        else\n            d = d + 1\n            if a < l[i] then\n\
    \                a = l[i]\n            else\n                a = -l[i]\n     \
    \       end\n            i = i + 1\n        end\n    end\n    return d <= 1\n\
    end", "    local ok = true\n    local monotonic_increasing = true\n    local monotonic_decreasing\
    \ = true\n    local i = 1\n    while i < #l and ok do\n        ok = ok and l[i]\
    \ < l[i + 1]\n        monotonic_increasing = monotonic_increasing and l[i] <=\
    \ l[i + 1]\n        monotonic_decreasing = monotonic_decreasing and l[i] >= l[i\
    \ + 1]\n        i = i + 1\n    end\n    return ok and (monotonic_increasing or\
    \ monotonic_decreasing)\nend", "  local isIncreasing = l[1] < l[2]\n  for i =\
    \ 2, #l - 1 do\n    if isIncreasing and l[i] > l[i + 1] then\n      return false\n\
    \    elseif not isIncreasing and l[i] < l[i + 1] then\n      return false\n  \
    \  end\n  end\n  return true\nend", "    local mode = nil\n    for i = 2, #l do\n\
    \        if l[i] ~= l[i - 1] then\n            local inc = l[i] > l[i - 1]\n \
    \           if mode == nil then\n                mode = inc\n            elseif\
    \ mode ~= inc then\n                return false\n            end\n        end\n\
    \    end\n    return true\nend", "  local h, i = #l, 1\n  -- Handle case when\
    \ #l <= 1\n  if h == 1 then return true end\n  -- Check if list is increasing\n\
    \  if l[2] > l[1] then\n    for j = 3, h do\n      if l[j] <= l[j - 1] then return\
    \ false end\n    end\n  -- Check if list is decreasing\n  elseif l[2] < l[1] then\n\
    \    for j = 3, h do\n      if l[j] >= l[j - 1] then return false end\n    end\n\
    \  else\n    return false\n  end\n  return true\nend", "    local d = l[2] - l[1]\n\
    \    for i = 2, #l do\n        if d * (l[i + 1] - l[i]) < 0 then\n           \
    \ return false\n        end\n    end\n    return true\nend", "    local is_decreasing\
    \ = true\n    local is_increasing = true\n    for i = 2, #l do\n        is_decreasing\
    \ = is_decreasing and l[i - 1] > l[i]\n        is_increasing = is_increasing and\
    \ l[i - 1] < l[i]\n    end\n    return is_decreasing or is_increasing\nend", " \
    \ local n = #l\n  if n < 2 then return true end\n  local is_inc = l[1] < l[2]\n\
    \  for i = 1, n - 1 do\n    if (is_inc and l[i] > l[i + 1]) or (not is_inc and\
    \ l[i] < l[i + 1]) then\n      return false\n    end\n  end\n  return true\nend",
  "  local prev = l[1]\n  local increasing = prev < l[2]\n  for _, n in ipairs(l)\
    \ do\n    if prev ~= n then\n      if increasing then\n        if n < prev then\n\
    \          return false\n        end\n      else\n        if n > prev then\n \
    \         return false\n        end\n      end\n      prev = n\n    end\n  end\n\
    \  return true\nend", "    if #l < 2 then\n        return true\n    end\n    local\
    \ i = 2\n    local f\n    while i <= #l do\n        if l[i - 1] == l[i] then\n\
    \            i = i + 1\n        else\n            f = l[i - 1] < l[i]\n      \
    \      break\n        end\n    end\n    if not f then\n        i = 2\n       \
    \ while i <= #l do\n            if l[i - 1] == l[i] then\n                i =\
    \ i + 1\n            else\n                f = l[i - 1] > l[i]\n             \
    \   break\n            end\n        end\n    end\n    if not f then\n        return\
    \ false\n    end\n    while i <= #l do\n        if l[i - 1] == l[i] then\n   \
    \         i = i + 1\n        elseif f and l[i - 1] > l[i] then\n            return\
    \ false\n        elseif not f and l[i - 1] < l[i] then\n            return false\n\
    \        else\n            i = i + 1\n        end\n    end\n    return true\n\
    end", "  local inc = true\n  local dec = true\n  for i = 2, #l do\n    inc = inc\
    \ and l[i] >= l[i - 1]\n    dec = dec and l[i] <= l[i - 1]\n  end\n  return inc\
    \ or dec\nend", "    local f = l[1]\n    local c = nil\n    for _, v in ipairs(l)\
    \ do\n        if c == nil then\n            c = f\n        elseif c < f then\n\
    \            if not (c >= v) then\n                return false\n            end\n\
    \        elseif c > f then\n            if not (c <= v) then\n               \
    \ return false\n            end\n        end\n        c = v\n    end\n    return\
    \ true\nend", "  local inc, dec = true, true\n  for i = 2, #l do\n    if l[i]\
    \ > l[i - 1] then\n      dec = false\n    elseif l[i] < l[i - 1] then\n      inc\
    \ = false\n    end\n  end\n  return inc or dec\nend", "    local prev = l[1]\n\
    \    local increasing = nil\n    for i = 2, #l do\n        if l[i] > prev then\n\
    \            if increasing == false then\n                return false\n     \
    \       end\n            increasing = true\n        elseif l[i] < prev then\n\
    \            if increasing == true then\n                return false\n      \
    \      end\n            increasing = false\n        end\n        prev = l[i]\n\
    \    end\n    return true\nend", "\tlocal l = l or {}\n\tlocal sign = sign(l[2]\
    \ - l[1])\n\tlocal l = map(l, function(i) return sign * i end)\n\treturn sign\
    \ == sign(l[2] - l[1])\nend", "    local increasing = true\n    local decreasing\
    \ = true\n    for i = 2, #l do\n        if l[i] < l[i - 1] then\n            increasing\
    \ = false\n        elseif l[i] > l[i - 1] then\n            decreasing = false\n\
    \        end\n    end\n    return increasing or decreasing\nend", "    if not\
    \ is_list(l) then\n        return false\n    end\n    if #l < 2 then\n       \
    \ return true\n    end\n    local incr = l[2] > l[1]\n    for i = 3, #l do\n \
    \       if incr and l[i] < l[i - 1] then\n            return false\n        elseif\
    \ not incr and l[i] > l[i - 1] then\n            return false\n        end\n \
    \   end\n    return true\nend", "    local len = #l\n    local increasing = true\n\
    \    local decreasing = true\n    for i = 1, len - 1 do\n        if l[i] > l[i\
    \ + 1] then\n            increasing = false\n        end\n        if l[i] < l[i\
    \ + 1] then\n            decreasing = false\n        end\n    end\n    return\
    \ increasing or decreasing\nend", "  local inc = l[1] <= l[2]\n  for i = 2, #l\
    \ - 1 do\n    if l[i] == l[i + 1] then\n      -- ok\n    elseif l[i] <= l[i +\
    \ 1] then\n      if not inc then\n        return false\n      end\n    elseif\
    \ l[i] >= l[i + 1] then\n      if inc then\n        return false\n      end\n\
    \    end\n  end\n  return true\nend", "  local sign, n = 0, 0\n  for i, x in ipairs(l)\
    \ do\n    local s = sign(x - n)\n    if s == 0 then\n      -- do nothing\n   \
    \ elseif sign == 0 then\n      sign = s\n    elseif sign ~= s then\n      return\
    \ false\n    end\n    n = x\n  end\n  return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
