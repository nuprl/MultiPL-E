name: HumanEval_29_filter_by_prefix
language: lua
prompt: "-- Filter an input list of strings only for ones that start with a given\
  \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
  \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
  \ prefix)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
  \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
  \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = {}\n    for _,str in ipairs(strings) do\n      \
    \  if string.startswith(str, prefix) then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend", "    local filter = {}\n    for\
    \ _, string in ipairs(strings) do\n        if string:startswith(prefix) then\n\
    \            table.insert(filter, string)\n        end\n    end\n    return filter\n\
    end", "    local filtered = {}\n    for _, string in ipairs(strings) do\n    \
    \    if string:startswith(prefix) then\n            filtered[#filtered + 1] =\
    \ string\n        end\n    end\n    return filtered\nend", "   return util.select(strings,\
    \ function(s) return s:starts_with(prefix) end)\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, prefix:len()) == prefix\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "    return {}\nend", "    local out = {}\n    for _, word in\
    \ ipairs(strings) do\n        if string.sub(word, 1, 1) == prefix then\n     \
    \       table.insert(out, word)\n        end\n    end\n    return out\nend", " \
    \ local r = {}\n  for i = 1, #strings do\n    if strings[i]:starts(prefix) then\n\
    \      r[#r + 1] = strings[i]\n    end\n  end\n  return r\nend", "  local matches\
    \ = {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, #prefix)\
    \ == prefix then\n      table.insert(matches, str)\n    end\n  end\n  return matches\n\
    end", "  local ret = {}\n  for _, s in ipairs(strings) do\n    if string.find(s,\
    \ '^' .. prefix) then\n      table.insert(ret, s)\n    end\n  end\n  return ret\n\
    end", "  local res = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1,\
    \ #prefix) == prefix then\n      table.insert(res, str)\n    end\n  end\n  return\
    \ res\nend", "    local filtered = {}\n    for i = 1, #strings do\n        if\
    \ util.startswith(strings[i], prefix) then\n            filtered[#filtered + 1]\
    \ = strings[i]\n        end\n    end\n    return filtered\nend", "  local filtered\
    \ = {}\n  for _, v in ipairs(strings) do\n    if string.startswith(v, prefix)\
    \ then\n      table.insert(filtered, v)\n    end\n  end\n  return filtered\nend",
  "  local function has_prefix(s)\n    return s:sub(1, #prefix) == prefix\n  end\n\
    \  return filter(has_prefix, strings)\nend", "    local result = {}\n    for _,v\
    \ in ipairs(strings) do\n        if (prefix == '' or v:sub(1, prefix:len()) ==\
    \ prefix) then\n            table.insert(result, v)\n        end\n    end\n  \
    \  return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if (s:sub(1, #prefix) == prefix) then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "  local result = {}\n  for\
    \ _, str in ipairs(strings) do\n    if str:sub(1, #prefix) == prefix then\n  \
    \    table.insert(result, str)\n    end\n  end\n  return result\nend", "    local\
    \ result = {}\n    for _, s in ipairs(strings) do\n        if string.startswith(s,\
    \ prefix) then\n            table.insert(result, s)\n        end\n    end\n  \
    \  return result\nend", "  return util.filter(strings, function(s) return s:find('^'\
    \ .. prefix) end)\nend", "  local filtered = {}\n  for _, str in ipairs(strings)\
    \ do\n    if str:startswith(prefix) then\n      table.insert(filtered, str)\n\
    \    end\n  end\n  return filtered\nend", "   local filtered = {}\n   for _, s\
    \ in ipairs(strings) do\n      if s:startswith(prefix) then\n         table.insert(filtered,\
    \ s)\n      end\n   end\n   return filtered\nend", "    local result = {}\n  \
    \  for _, s in ipairs(strings) do\n        if s:starts_with(prefix) then\n   \
    \         table.insert(result, s)\n        end\n    end\n    return result\nend",
  "   local res = {}\n   for _, s in ipairs(strings) do\n      if s:sub(1, #prefix)\
    \ == prefix then\n         table.insert(res, s)\n      end\n   end\n   return\
    \ res\nend", "  local result = {}\n  for i, v in ipairs(strings) do\n    if string.find(v,\
    \ '^' .. prefix) then\n      table.insert(result, v)\n    end\n  end\n  return\
    \ result\nend", "    local function aux(strings, prefix, result)\n        if not\
    \ strings then\n            return result\n        elseif is_substring(prefix,\
    \ head(strings)) then\n            return aux(tail(strings), prefix, insert(head(strings),\
    \ result))\n        else\n            return aux(tail(strings), prefix, result)\n\
    \        end\n    end\n    return aux(strings, prefix, {})\nend", "  local result\
    \ = {}\n  for i, s in ipairs(strings) do\n    if string.sub(s, 1, string.len(prefix))\
    \ == prefix then\n      table.insert(result, s)\n    end\n  end\n  return result\n\
    end", "   return tablex.imap(function(str) return str:match(prefix) end, strings)\n\
    end", "  return filter(strings, function(value)\n    return utils.startswith(value,\
    \ prefix)\n  end)\nend", "  local result = {}\n  for i, v in ipairs(strings) do\n\
    \    if v:find(\"^\" .. prefix) then\n      table.insert(result, v)\n    end\n\
    \  end\n  return result\nend", "  local result = {}\n  for _, s in ipairs(strings)\
    \ do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(result, s)\n\
    \    end\n  end\n  return result\nend", "    local new_list = {}\n    for i =\
    \ 1, #strings do\n        if starts_with(strings[i], prefix) then\n          \
    \  table.insert(new_list, strings[i])\n        end\n    end\n    return new_list\n\
    end", "  local result = {}\n  for _, str in ipairs(strings) do\n    if str:find('^'\
    \ .. prefix) then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end", "    local ret = {}\n    for _, str in ipairs(strings) do\n        if str:startswith(prefix)\
    \ then\n            table.insert(ret, str)\n        end\n    end\n    return ret\n\
    end", "  local filtered = {}\n  for _, s in ipairs(strings) do\n    if string.sub(s,\
    \ 1, #prefix) == prefix then\n      table.insert(filtered, s)\n    end\n  end\n\
    \  return filtered\nend", "    local results = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:startswith(prefix) then\n            table.insert(results,\
    \ s)\n        end\n    end\n    return results\nend", "    return filter(lambda('string',\
    \ 'prefix', 'return (string:sub(1, #prefix) == prefix)'), strings, prefix)\nend",
  "  local filtered = {}\n  for i = 1, #strings do\n    if string.sub(strings[i],\
    \ 1, #prefix) == prefix then\n      table.insert(filtered, strings[i])\n    end\n\
    \  end\n  return filtered\nend", "    local t = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:startswith(prefix) then\n            table.insert(t, s)\n \
    \       end\n    end\n    return t\nend", "  local result = {}\n  for _, v in\
    \ ipairs(strings) do\n    if string.sub(v, 1, string.len(prefix)) == prefix then\n\
    \      table.insert(result, v)\n    end\n  end\n  return result\nend", "    local\
    \ result = {}\n    for _, s in ipairs(strings) do\n        if s:startswith(prefix)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "    local ret = {}\n    for _, string in ipairs(strings) do\n\
    \        if string:sub(1, prefix:len()) == prefix then\n            table.insert(ret,\
    \ string)\n        end\n    end\n    return ret\nend", "    local filtered = {}\n\
    \    for _, str in ipairs(strings) do\n        if string.startswith(str, prefix)\
    \ then\n            table.insert(filtered, str)\n        end\n    end\n    return\
    \ filtered\nend", "    local res = {}\n    for i = 1, #strings do\n        if\
    \ strings[i]:startswith(prefix) then\n            table.insert(res, strings[i])\n\
    \        end\n    end\n    return res\nend", "  return array.filter(strings, function(str)\n\
    \    return vim.startswith(str, prefix)\n  end)\nend", "  local result = {}\n\
    \  for _, s in ipairs(strings) do\n    if s:startswith(prefix) then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "    local filtered = {}\n    for\
    \ _, s in ipairs(strings) do\n        if s:startswith(prefix) then\n         \
    \   table.insert(filtered, s)\n        end\n    end\n    return filtered\nend",
  "    return tablex.filter(strings, function(x) return x:startswith(prefix) end)\n\
    end", "   local results = {}\n   for _, str in ipairs(strings) do\n      if str:sub(1,\
    \ #prefix) == prefix then\n         table.insert(results, str)\n      end\n  \
    \ end\n   return results\nend", "  local out = {}\n  for _, str in ipairs(strings)\
    \ do\n    if str:sub(1, #prefix) == prefix then\n      table.insert(out, str)\n\
    \    end\n  end\n  return out\nend", "   local filtered = {}\n   for _, str in\
    \ ipairs(strings) do\n      if str:starts_with(prefix) then\n         table.insert(filtered,\
    \ str)\n      end\n   end\n   return filtered\nend", "    local output = {}\n\
    \    for _, v in ipairs(strings) do\n        if starts_with(v, prefix) then\n\
    \            table.insert(output, v)\n        end\n    end\n    return output\n\
    end", "    local ret = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(ret, s)\n        end\n   \
    \ end\n    return ret\nend", "  return filter(strings, function(str) return string.sub(str,\
    \ 1, string.len(prefix)) == prefix end)\nend", "    return _.filter(strings, function(x)\
    \ return _.starts_with(x, prefix) end)\nend", "  local results = {}\n  for _,\
    \ name in ipairs(strings) do\n    if name:startswith(prefix) then\n      table.insert(results,\
    \ name)\n    end\n  end\n  return results\nend", "  local len = #prefix\n  local\
    \ results = {}\n  for _, string in ipairs(strings) do\n    if string:sub(1, len)\
    \ == prefix then\n      table.insert(results, string)\n    end\n  end\n  return\
    \ results\nend", "  local output = {}\n  for _,s in ipairs(strings) do\n    if\
    \ s:startswith(prefix) then\n      table.insert(output, s)\n    end\n  end\n \
    \ return output\nend", "    if prefix == '' then\n        return strings\n   \
    \ end\n    local ret = {}\n    for _, s in ipairs(strings) do\n        if string.find(s,\
    \ prefix, 1, true) == 1 then\n            table.insert(ret, s)\n        end\n\
    \    end\n    return ret\nend", "  return pipes.filter_list(strings, function(s)\
    \ return starts_with(s, prefix) end)\nend", "   return array.filter(strings, function(string)\n\
    \      return string.starts_with(string, prefix)\n   end)\nend", "  local prefix_len\
    \ = #prefix\n  local out = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1,\
    \ prefix_len) == prefix then\n      table.insert(out, str)\n    end\n  end\n \
    \ return out\nend", "    local result = {}\n    for _, v in ipairs(strings) do\n\
    \        if v:startswith(prefix) then\n            table.insert(result, v)\n \
    \       end\n    end\n    return result\nend", "    local function starts_with(s)\n\
    \        return string.sub(s, 1, #prefix) == prefix\n    end\n    return filter(strings,\
    \ starts_with)\nend", "    if prefix == nil or #prefix == 0 then\n        return\
    \ strings\n    end\n    local result = {}\n    for _,v in ipairs(strings) do\n\
    \        if v:find(\"^\" .. prefix) == 1 then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "  local result = {}\n  for\
    \ i,v in ipairs(strings) do\n    if string.sub(v, 1, 1) == prefix then\n     \
    \ table.insert(result, v)\n    end\n  end\n  return result\nend", "  if not strings\
    \ then return {} end\n  local ret = {}\n  for _, str in ipairs(strings) do\n \
    \   if str:sub(1, #prefix) == prefix then\n      table.insert(ret, str)\n    end\n\
    \  end\n  return ret\nend", "    local prefix_len = #prefix\n    local res = {}\n\
    \    for _, s in ipairs(strings) do\n        if #s >= prefix_len and s:sub(1,\
    \ prefix_len) == prefix then\n            table.insert(res, s)\n        end\n\
    \    end\n    return res\nend", "  local results = {}\n  for i, str in ipairs(strings)\
    \ do\n    if starts_with(str, prefix) then\n      table.insert(results, str)\n\
    \    end\n  end\n  return results\nend", "  return filter(strings, function(s)\
    \ return string.startswith(s, prefix) end)\nend", "  local ret = {}\n  for _,\
    \ str in ipairs(strings) do\n    if str:find('^' .. prefix) then\n      table.insert(ret,\
    \ str)\n    end\n  end\n  return ret\nend", "    local prefix_len = #prefix\n\
    \    local res = {}\n    for _,s in ipairs(strings) do\n        if #s >= prefix_len\
    \ and s:sub(1, prefix_len) == prefix then\n            table.insert(res, s)\n\
    \        end\n    end\n    return res\nend", "  local result = {}\n  for _, string\
    \ in ipairs(strings) do\n    if string:find(\"^\" .. prefix) then\n      table.insert(result,\
    \ string)\n    end\n  end\n  return result\nend", "   local result = {}\n   for\
    \ _, str in ipairs(strings) do\n      if str:sub(1, prefix:len()) == prefix then\n\
    \         table.insert(result, str)\n      end\n   end\n   return result\nend",
  "  local out = {}\n  for _, s in ipairs(strings) do\n    if (s:sub(1, prefix:len())\
    \ == prefix) then\n      table.insert(out, s)\n    end\n  end\n  return out\n\
    end", "  local result = {}\n  for i, v in ipairs(strings) do\n    if string.sub(v,\
    \ 1, string.len(prefix)) == prefix then\n      table.insert(result, v)\n    end\n\
    \  end\n  return result\nend", "  return conky_parse('${lua_parse table.concat(table.map(c,\
    \ function(v) return \"${if_match ' .. string.format('\"^%s\"', prefix) .. ' \"\
    ${v}\" \"\"}\"; end), \" \")}')\nend", "  local result = {}\n  for _, value in\
    \ ipairs(strings) do\n    if string.match(value, '^' .. prefix) then\n      table.insert(result,\
    \ value)\n    end\n  end\n  return result\nend", "  local result = {}\n  for _,\
    \ s in ipairs(strings) do\n    if s:startswith(prefix) then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "   local out = {}\n   for _, str\
    \ in ipairs(strings) do\n      if string.sub(str, 1, string.len(prefix)) == prefix\
    \ then\n         table.insert(out, str)\n      end\n   end\n   return out\nend",
  "    local ret = {}\n    for _, str in ipairs(strings) do\n        if string.startswith(str,\
    \ prefix) then\n            table.insert(ret, str)\n        end\n    end\n   \
    \ return ret\nend", "    local strings_filtered = {}\n    for _, str in ipairs(strings)\
    \ do\n        if string.find(str, '^' .. prefix) then\n            table.insert(strings_filtered,\
    \ str)\n        end\n    end\n    return strings_filtered\nend", "    local results\
    \ = {}\n    for _, v in ipairs(strings) do\n        if v:startswith(prefix) then\n\
    \            results[#results + 1] = v\n        end\n    end\n    return results\n\
    end", "  local res = {}\n  for _, s in ipairs(strings) do\n    if utils.str_startswith(s,\
    \ prefix) then\n      table.insert(res, s)\n    end\n  end\n  return res\nend",
  "  if not strings then return {} end\n  local res = {}\n  for _, s in ipairs(strings)\
    \ do\n    if s:starts_with(prefix) then\n      table.insert(res, s)\n    end\n\
    \  end\n  return res\nend", "  local filtered = {}\n  for _, str in ipairs(strings)\
    \ do\n    if str:find('^' .. prefix) then\n      table.insert(filtered, str)\n\
    \    end\n  end\n  return filtered\nend", "    local result = {}\n    for _, str\
    \ in ipairs(strings) do\n        if string.sub(str, 1, #prefix) == prefix then\n\
    \            table.insert(result, str)\n        end\n    end\n    return result\n\
    end", "  local filtered = {}\n  for _, s in ipairs(strings) do\n    if s:find('^'\
    \ .. prefix) then\n      table.insert(filtered, s)\n    end\n  end\n  return filtered\n\
    end", "  local filtered = {}\n  for _, str in ipairs(strings) do\n    if string.sub(str,\
    \ 1, string.len(prefix)) == prefix then\n      table.insert(filtered, str)\n \
    \   end\n  end\n  return filtered\nend", "   local ret = {}\n   for _,str in ipairs(strings)\
    \ do\n      if string.sub(str, 1, #prefix) == prefix then\n         table.insert(ret,\
    \ str)\n      end\n   end\n   return ret\nend", "  local result = {}\n  for _,\
    \ s in ipairs(strings) do\n    if s:startswith(prefix) then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "  local res = {}\n  for i, v in\
    \ ipairs(strings) do\n    if string.sub(v, 1, 1) == prefix then\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend", "  local filtered = {}\n  for _, string\
    \ in ipairs(strings) do\n    if string:sub(1, #prefix) == prefix then\n      table.insert(filtered,\
    \ string)\n    end\n  end\n  return filtered\nend", "    local filtered = {}\n\
    \    for _, string in ipairs(strings) do\n        if string:startswith(prefix)\
    \ then\n            table.insert(filtered, string)\n        end\n    end\n   \
    \ return filtered\nend", "  local ret = {}\n  for _, v in ipairs(strings) do\n\
    \    if v:sub(1, #prefix) == prefix then\n      table.insert(ret, v)\n    end\n\
    \  end\n  return ret\nend", "  local ret = {}\n  for _, s in ipairs(strings) do\n\
    \    if string.find(s, '^' .. prefix) then\n      table.insert(ret, s)\n    end\n\
    \  end\n  return ret\nend", "    return l.filter(function(string) return str.startswith(string,\
    \ prefix) end, strings)\nend", "  local prefix_len = #prefix\n  local res = {}\n\
    \  for _, s in ipairs(strings) do\n    if s:sub(1, prefix_len) == prefix then\n\
    \      table.insert(res, s)\n    end\n  end\n  return res\nend", "    local result\
    \ = {}\n    for _, s in ipairs(strings) do\n        if s:starts_with(prefix) then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "  local ret = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(ret, s)\n    end\n  end\n  return ret\nend", "  return\
    \ filter(strings, function(s) return string.sub(s, 1, #prefix) == prefix end)\n\
    end", "  return filter(strings, function(str) return str:startswith(prefix) end)\n\
    end", "    assert(type(strings) == 'table')\n    assert(type(prefix) == 'string')",
  "    -- This is a naive and inefficient implementation.\n    -- A more efficient\
    \ one is left as an exercise for\n    -- the reader.\n    local ret = {}\n   \
    \ for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(ret, s)\n        end\n    end\n    return ret\nend",
  "  local result = {}\n  for _,str in ipairs(strings) do\n    if str:sub(1, #prefix)\
    \ == prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end", "    local filtered = {}\n    for _, value in ipairs(strings) do\n     \
    \   if starts_with(value, prefix) then\n            filtered[#filtered + 1] =\
    \ value\n        end\n    end\n    return filtered\nend", "  return tablex.filter(strings,\
    \ stringx.startswith, prefix)\nend", "    local res = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:startswith(prefix) then\n            table.insert(res, s)\n\
    \        end\n    end\n    return res\nend", "    local result = {}\n    for _,\
    \ string in ipairs(strings) do\n        if string.startswith(string, prefix) then\n\
    \            table.insert(result, string)\n        end\n    end\n    return result\n\
    end", "  local r = {}\n  for _, s in ipairs(strings) do\n    if string.sub(s,\
    \ 1, #prefix) == prefix then\n      table.insert(r, s)\n    end\n  end\n  return\
    \ r\nend", "   return strings:filter(function(s) return s:startswith(prefix) end)\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:starts_with(prefix)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "   local new_strings = {}\n   for _, s in ipairs(strings) do\n\
    \      if s:sub(1, #prefix) == prefix then\n         table.insert(new_strings,\
    \ s)\n      end\n   end\n   return new_strings\nend", "    local ret = {}\n  \
    \  for _, str in ipairs(strings) do\n        if str:starts_with(prefix) then\n\
    \            table.insert(ret, str)\n        end\n    end\n    return ret\nend",
  "    local ret = {}\n    for _, v in ipairs(strings) do\n        if string.sub(v,\
    \ 1, #prefix) == prefix then\n            table.insert(ret, v)\n        end\n\
    \    end\n    return ret\nend", "    local t = {}\n    for i, s in ipairs(strings)\
    \ do\n        if s:startswith(prefix) then\n            table.insert(t, s)\n \
    \       end\n    end\n    return t\nend", "  local result = {}\n  for _, string\
    \ in ipairs(strings) do\n    if string.startswith(string, prefix) then\n     \
    \ table.insert(result, string)\n    end\n  end\n  return result\nend", "  return\
    \ filter(startswith(prefix), strings)\nend", "    local result = {}\n    for _,\
    \ str in ipairs(strings) do\n        if str:startswith(prefix) then\n        \
    \    table.insert(result, str)\n        end\n    end\n    return result\nend",
  "    -- meta is the metatable for a metamethod lookup table for a pattern that\n\
    \    -- matches the start of a string\n    local meta = {\n        __index = function(self,\
    \ key)\n            self[key] = key:match('^' .. prefix)\n            return self[key]\n\
    \        end\n    }\n    -- create a table with the above metatable\n    -- this\
    \ lets us do table[str] which is the same as str:match('^' .. prefix)\n    local\
    \ prefixed = setmetatable({}, meta)\n    -- return all strings that are matched\n\
    \    return filter(strings, function(str) return prefixed[str] end)\nend", " \
    \ local result = {}\n  for _, name in ipairs(strings) do\n    if name:sub(1, prefix:len())\
    \ == prefix then\n      table.insert(result, name)\n    end\n  end\n  return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:starts_with(prefix)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "  local new_list = {}\n  for _, s in ipairs(strings) do\n   \
    \ if s:sub(1, #prefix) == prefix then\n      table.insert(new_list, s)\n    end\n\
    \  end\n  return new_list\nend", "  local prefix_len = prefix:len()\n  local filtered\
    \ = {}\n  for _, string in ipairs(strings) do\n    if string:sub(1, prefix_len)\
    \ == prefix then\n      table.insert(filtered, string)\n    end\n  end\n  return\
    \ filtered\nend", "   local strings_filtered = {}\n   for _, string in ipairs(strings)\
    \ do\n      if string:sub(1, #prefix) == prefix then\n         table.insert(strings_filtered,\
    \ string)\n      end\n   end\n   return strings_filtered\nend", "  local result\
    \ = {}\n  for _, str in ipairs(strings) do\n    if string.startswith(str, prefix)\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend",
  "  local res = {}\n  for _,s in ipairs(strings) do\n    if string.sub(s, 1, #prefix)\
    \ == prefix then\n      table.insert(res, s)\n    end\n  end\n  return res\nend",
  "  return List.map(List.filter(strings, s -> s:startswith(prefix)),\n          \
    \        s -> s:gsub('^' .. prefix, ''))\nend", "  local prefix_len = prefix:len()\n\
    \  local filtered = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, prefix_len)\
    \ == prefix then\n      table.insert(filtered, s)\n    end\n  end\n  return filtered\n\
    end", "  local result = {}\n  for _,s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then table.insert(result, s) end\n  end\n  return result\nend", "    return\
    \ map(\n        function(str)\n            return string.sub(str, 1, string.len(prefix))\
    \ == prefix and str or nil\n        end,\n        strings\n    )\nend", "  local\
    \ prefix_len = string.len(prefix)\n  local res = {}\n  for _, str in ipairs(strings)\
    \ do\n    if str:sub(1, prefix_len) == prefix then\n      table.insert(res, str)\n\
    \    end\n  end\n  return res\nend", "  return filter(strings, function(s) return\
    \ startswith(s, prefix) end)\nend", "    local output = {}\n    for _, v in ipairs(strings)\
    \ do\n        if is_prefix(v, prefix) then\n            table.insert(output, v)\n\
    \        end\n    end\n    return output\nend", "    local result = {}\n    for\
    \ _, string in ipairs(strings) do\n        if string:sub(1, prefix:len()) == prefix\
    \ then\n            table.insert(result, string)\n        end\n    end\n    return\
    \ result\nend", "   local new_list = {}\n   for _, s in ipairs(strings) do\n \
    \     if string.find(s, '^' .. prefix) then\n         table.insert(new_list, s)\n\
    \      end\n   end\n   return new_list\nend", "  local ret = {}\n  for _,str in\
    \ ipairs(strings) do\n    if string.startswith(str, prefix) then\n      table.insert(ret,\
    \ str)\n    end\n  end\n  return ret\nend", "   local new = {}\n   for i = 1,\
    \ #strings do\n      if string.sub(strings[i], 1, #prefix) == prefix then\n  \
    \       new[#new + 1] = strings[i]\n      end\n   end\n   return new\nend", " \
    \ local filtered = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix)\
    \ == prefix then\n      table.insert(filtered, s)\n    end\n  end\n  return filtered\n\
    end", "    local prefix = prefix or ''\n    local ret = {}\n    for i,s in ipairs(strings)\
    \ do\n        if s:sub(1,#prefix) == prefix then\n            table.insert(ret,\
    \ s)\n        end\n    end\n    return ret\nend", "    local filtered = {}\n \
    \   for _, str in ipairs(strings) do\n        if str:sub(1, #prefix) == prefix\
    \ then\n            table.insert(filtered, str)\n        end\n    end\n    return\
    \ filtered\nend", "    local result = {}\n    for _, s in ipairs(strings) do\n\
    \        if string.starts_with(s, prefix) then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "  local result = {}\n  for\
    \ _, str in ipairs(strings) do\n    if str:sub(1, #prefix) == prefix then\n  \
    \    table.insert(result, str)\n    end\n  end\n  return result\nend", "    if\
    \ type(strings) ~= 'table' then\n        error(\"Input not a table\")\n    end\n\
    \    if type(prefix) ~= 'string' then\n        error(\"Prefix not a string\")\n\
    \    end\n    local rtn = {}\n    for _, v in ipairs(strings) do\n        if v:starts(prefix)\
    \ then\n            table.insert(rtn, v)\n        end\n    end\n    return rtn\n\
    end", "  local result = {}\n  for i,s in ipairs(strings) do\n    if string.sub(s,\
    \ 1, #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n\
    \  return result\nend", "  local result = {}\n  for i, s in ipairs(strings) do\n\
    \    if s:sub(1, #prefix) == prefix then\n      table.insert(result, s)\n    end\n\
    \  end\n  return result\nend", "    local matched = {}\n    for _, str in ipairs(strings)\
    \ do\n        if is_prefix(str, prefix) then\n            matched[#matched + 1]\
    \ = str\n        end\n    end\n    return matched\nend", "    assert(type(strings)\
    \ == 'table')\n    assert(type(prefix) == 'string')", "  local result = {}\n \
    \ for _,s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n   \
    \   table.insert(result, s)\n    end\n  end\n  return result\nend", "  local regex\
    \ = '^' .. string.gsub(prefix, '[%(%)%.%%%+%-%*%?%[%]%^%$]', '%%%1')\n  local\
    \ filtered = {}\n  for _, str in ipairs(strings) do\n    if str:match(regex) then\n\
    \      table.insert(filtered, str)\n    end\n  end\n  return filtered\nend", " \
    \ return util.filter(strings, string.startswith, prefix)\nend", "  local filtered\
    \ = {}\n  for _, s in ipairs(strings) do\n    if starts_with(s, prefix) then\n\
    \      table.insert(filtered, s)\n    end\n  end\n  return filtered\nend", " \
    \   local result = {}\n    for _, str in ipairs(strings) do\n        if str:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, str)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:starts_with(prefix) then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "  local out = {}\n  for\
    \ _, str in ipairs(strings) do\n    if str:startswith(prefix) then\n      table.insert(out,\
    \ str)\n    end\n  end\n  return out\nend", "    local res = {}\n    for _, value\
    \ in ipairs(strings) do\n        if value:starts(prefix) then\n            table.insert(res,\
    \ value)\n        end\n    end\n    return res\nend", "    local filtered = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:find('^' .. prefix) then\n \
    \           table.insert(filtered, s)\n        end\n    end\n    return filtered\n\
    end", "    local r = {}\n    for _, s in ipairs(strings) do\n        if string.startswith(s,\
    \ prefix) then\n            table.insert(r, s)\n        end\n    end\n    return\
    \ r\nend", "    local result = {}\n    for _, s in ipairs(strings) do\n      \
    \  if s:sub(1, #prefix) == prefix then\n            table.insert(result, s)\n\
    \        end\n    end\n    return result\nend", "   local result = {}\n   for\
    \ _, s in ipairs(strings) do\n      if s:startswith(prefix) then\n         table.insert(result,\
    \ s)\n      end\n   end\n   return result\nend", "  local ret = {}\n  local len\
    \ = prefix:len()\n  for _, s in ipairs(strings) do\n    if s:sub(1, len) == prefix\
    \ then\n      table.insert(ret, s)\n    end\n  end\n  return ret\nend", "    local\
    \ result = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix)\
    \ == prefix then\n            table.insert(result, s)\n        end\n    end\n\
    \    return result\nend", "  local output = {}\n  for _, s in ipairs(strings)\
    \ do\n    if s:startswith(prefix) then\n      table.insert(output, s)\n    end\n\
    \  end\n  return output\nend", "   assert(type(strings) == 'table')\n   assert(type(prefix)\
    \ == 'string')\n   local res = {}\n   for _, name in ipairs(strings) do\n    \
    \  if stringx.startswith(name, prefix) then\n         table.insert(res, name)\n\
    \      end\n   end\n   return res\nend", "  return lume.filter(strings, function(str)\n\
    \    return string.sub(str, 1, #prefix) == prefix\n  end)\nend", "    assert(type(strings)\
    \ == 'table')\n    assert(type(prefix) == 'string')", "  local result = {}\n \
    \ for _,s in ipairs(strings) do\n    if s:find('^' .. prefix) then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "    local new_list = {}\n    for\
    \ _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n  \
    \          table.insert(new_list, s)\n        end\n    end\n    return new_list\n\
    end", "    local matches = {}\n    for _,str in ipairs(strings) do\n        if\
    \ str:sub(1, #prefix) == prefix then\n            table.insert(matches, str)\n\
    \        end\n    end\n    return matches\nend", "    local r = {}\n    for _,v\
    \ in ipairs(strings) do\n        if v:startswith(prefix) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local out = {}\n    for _,\
    \ str in ipairs(strings) do\n        if (str:starts(prefix)) then\n          \
    \  table.insert(out, str)\n        end\n    end\n    return out\nend", "  return\
    \ filter(function(s) return is_prefix(s, prefix) end, strings)\nend", "    local\
    \ result = {}\n    for _, str in ipairs(strings) do\n        if str:startswith(prefix)\
    \ then\n            table.insert(result, str)\n        end\n    end\n    return\
    \ result\nend", "    local out = {}\n    for _, v in ipairs(strings) do\n    \
    \    if v:sub(1, #prefix) == prefix then\n            table.insert(out, v)\n \
    \       end\n    end\n    return out\nend", "    assert(type(strings) == 'table',\
    \ \"bad argument #1 to 'filter_by_prefix' (table expected, got \" .. type(strings)\
    \ .. \")\")\n    assert(type(prefix) == 'string', \"bad argument #2 to 'filter_by_prefix'\
    \ (string expected, got \" .. type(prefix) .. \")\")", "  local results = {}\n\
    \  for i, s in ipairs(strings) do\n    if string.sub(s, 1, string.len(prefix))\
    \ == prefix then\n      table.insert(results, s)\n    end\n  end\n  return results\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:startswith(prefix)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "    return array_map(\n        function(string)\n           \
    \ if string.starts_with(string, prefix) then\n                return string\n\
    \            end\n        end,\n        strings\n    )\nend", "  local result\
    \ = {}\n  for _, s in ipairs(strings) do\n    if s:starts(prefix) then table.insert(result,\
    \ s) end\n  end\n  return result\nend", "    return list.filter(strings, function(s)\
    \ return s:startswith(prefix) end)\nend", "  local result = {}\n  for i = 1, #strings\
    \ do\n    if strings[i]:starts(prefix) then\n      table.insert(result, strings[i])\n\
    \    end\n  end\n  return result\nend", "  local out = {}\n  for _, v in ipairs(strings)\
    \ do\n    if v:starts(prefix) then\n      table.insert(out, v)\n    end\n  end\n\
    \  return out\nend", "  local result = {}\n  for _, val in ipairs(strings) do\n\
    \    if val:startswith(prefix) then\n      table.insert(result, val)\n    end\n\
    \  end\n  return result\nend", "    local filtered = {}\n    for _, string in\
    \ ipairs(strings) do\n        if string.startswith(string, prefix) then\n    \
    \        table.insert(filtered, string)\n        end\n    end\n    return filtered\n\
    end", "  local ret = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix)\
    \ == prefix then\n      table.insert(ret, s)\n    end\n  end\n  return ret\nend",
  "    local result = {}\n    for _, value in ipairs(strings) do\n        if starts_with(value,\
    \ prefix) then\n            table.insert(result, value)\n        end\n    end\n\
    \    return result\nend", "  local result = {}\n  for i, v in ipairs(strings)\
    \ do\n    if starts_with(v, prefix) then\n      table.insert(result, v)\n    end\n\
    \  end\n  return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:startswith(prefix) then\n            table.insert(result, s)\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ _, s in ipairs(strings) do\n        if prefix == string.sub(s, 1, #prefix) then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "  local ret = {}\n  for i, s in ipairs(strings) do\n    if (s:find(\"^\"\
    \ .. prefix .. \".*\") == 1) then\n      table.insert(ret, s)\n    end\n  end\n\
    \  return ret\nend", "   assert(type(strings) == 'table')\n   assert(type(prefix)\
    \ == 'string')\n   local res = {}\n   for i, str in ipairs(strings) do\n     \
    \ if str:sub(1, #prefix) == prefix then\n         table.insert(res, str)\n   \
    \   end\n   end\n   return res\nend", "  local filtered = {}\n  for _, s in ipairs(strings)\
    \ do\n    if string.sub(s, 1, #prefix) == prefix then\n      table.insert(filtered,\
    \ s)\n    end\n  end\n  return filtered\nend", "  local filtered = {}\n  for _,\
    \ str in ipairs(strings) do\n    if str:sub(1, #prefix) == prefix then\n     \
    \ table.insert(filtered, str)\n    end\n  end\n  return filtered\nend", "    local\
    \ result = {}\n    for _,str in ipairs(strings) do\n        if string.startswith(str,\
    \ prefix) then\n            table.insert(result, str)\n        end\n    end\n\
    \    return result\nend", "  local result = {}\n  for _, s in ipairs(strings)\
    \ do\n    if s:startswith(prefix) then\n      table.insert(result, s)\n    end\n\
    \  end\n  return result\nend", "    local function starts_with(s)\n        return\
    \ s:match('^' .. prefix) ~= nil\n    end\n    return filter(starts_with, strings)\n\
    end", "    local res = {}\n    for i = 1, #strings do\n        if string.sub(strings[i],\
    \ 1, string.len(prefix)) == prefix then\n            res[#res + 1] = strings[i]\n\
    \        end\n    end\n    return res\nend", "    local t = {}\n    for _,s in\
    \ ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n          \
    \  table.insert(t, s)\n        end\n    end\n    return t\nend", "    local result\
    \ = {}\n    for _, s in ipairs(strings) do\n        if s:startswith(prefix) then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "  return filter(strings, function(str) return str:startswith(prefix) end)\n\
    end", "   return list.map(\n      function(s)\n         if s:startswith(prefix)\
    \ then\n            return s\n         end\n      end,\n      strings\n   )\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
