name: HumanEval_60_sum_to_n
language: lua
prompt: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
  -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
  -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
  \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n \
  \   lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
  \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local sum = 0\n    for i = 1, n do\n        sum = sum + i\n   \
    \ end\n    return sum\nend", "  local total = 0\n  for i = 1, n do\n    total\
    \ = total + i\n  end\n  return total\nend", "    --[[\n    >>> sum_to_n(100)\n\
    \    5050\n    --]]\n    return n * (n + 1) / 2\nend", "  -- sum_to_n :: Int ->\
    \ Int\n  local function sums(n, acc)\n    if n == 0 then\n      return acc\n \
    \   else\n      return sums(n - 1, acc + n)\n    end\n  end\n  return sums(n,\
    \ 0)\nend", "  return n*(n+1)/2\nend", "\tif n == 1 then\n\t\treturn 1\n\telse\n\
    \t\treturn n + sum_to_n(n-1)\n\tend\nend", "  -- TODO: complete this function\n\
    \  -- hint: you can use recursion.\n  if n == 1 then return 1 end\n  return n\
    \ + sum_to_n(n-1)\nend", "    if n == 1 then\n        return 1\n    else\n   \
    \     return n + sum_to_n(n - 1)\n    end\nend", "    if n == 1 then\n       \
    \ return 1\n    else\n        return n + sum_to_n(n - 1)\n    end\nend", "   \
    \ return (n*(n+1))/2\nend", "\tlocal total = 0\n\tfor i = 1, n do\n\t\ttotal =\
    \ total + i\n\tend\n\treturn total\nend", "    local result = 0\n    for i = 1,\
    \ n do\n        result = result + i\n    end\n    return result\nend", "  if n\
    \ == 1 then\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend",
  "    if n == 1 then\n        return 1\n    else\n        return n + sum_to_n(n -\
    \ 1)\n    end\nend", "    local result = 0\n    for i = 1, n do\n        result\
    \ = result + i\n    end\n    return result\nend", "    return n * (n + 1) / 2\n\
    end", "\tif n < 1 then return 0 end\n\treturn n + sum_to_n(n-1)\nend", "    return\
    \ n * (n + 1) / 2\nend", "    return n * (n + 1) / 2\nend", "\treturn math.floor(n\
    \ * (n + 1) / 2)\nend", "  return (n + 1) * n / 2\nend", "    return n * (n +\
    \ 1) / 2\nend", "    return n * (n + 1) / 2\nend", "    local sum = 0\n    for\
    \ i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend", "\treturn\
    \ n * (n + 1) / 2\nend", "    local sum = 0\n    for i = 1, n do\n        sum\
    \ = sum + i\n    end\n    return sum\nend", "\treturn n*(n+1)/2\nend", "    if\
    \ n == 1 then\n        return 1\n    else\n        return n + sum_to_n(n - 1)\n\
    \    end\nend", "    return n * (n + 1) / 2\nend", "    local acc = 0\n    for\
    \ i = 1, n do\n        acc = acc + i\n    end\n    return acc\nend", "    return\
    \ n * (n + 1) / 2\nend", "    local sum = 0\n    for i = 1, n do\n        sum\
    \ = sum + i\n    end\n    return sum\nend", "    return (n * (n + 1)) / 2\nend",
  "\tif (n == 1) then\n\t\treturn 1\n\telse\n\t\treturn n + sum_to_n(n-1)\n\tend\n\
    end", "  if n <= 0 then\n    return 0\n  else\n    return n + sum_to_n(n-1)\n\
    \  end\nend", "    return (n * (n + 1)) / 2\nend", "  return n * (n + 1) / 2\n\
    end", "  local sum = 0\n  for i = 1, n do\n    sum = sum + i\n  end\n  return\
    \ sum\nend", "    return n * (n + 1) / 2\nend", "  return (n * (n + 1)) / 2\n\
    end", "  if n == 1 then\n    return 1\n  else\n    return n + sum_to_n(n-1)\n\
    \  end\nend", "    return n * (n + 1) / 2\nend", "    if n == 1 then\n       \
    \ return 1\n    else\n        return n + sum_to_n(n - 1)\n    end\nend", "  return\
    \ n * (n + 1) / 2\nend", "    local sum = 0\n    for i = 1, n do\n        sum\
    \ = sum + i\n    end\n    return sum\nend", "    return n * (n + 1) / 2\nend",
  "\treturn n * (n + 1) / 2\nend", "  if n < 1 then\n    return 0\n  else\n    return\
    \ n + sum_to_n(n - 1)\n  end\nend", "    -- Check our input is a number, return\
    \ nil if not.\n    if type(n) ~= \"number\" then\n        return nil\n    end",
  "    if n <= 0 then\n        return 0\n    else\n        return n + sum_to_n(n -\
    \ 1)\n    end\nend", "  return n * (n + 1) / 2\nend", "    local sum = 0\n   \
    \ for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend", "\t--\
    \ Add up numbers from 1 to n\n\tlocal accum = 0\n\tfor i = 1, n do\n\t\taccum\
    \ = accum + i\n\tend\n\treturn accum\nend", "  return n * (n + 1) / 2\nend", " \
    \   local sum = 0\n    for i = 1, n do\n        sum = sum + i\n    end\n    return\
    \ sum\nend", "\tlocal result = 0\n\tfor i = 1, n do\n\t\tresult = result + i\n\
    \tend\n\treturn result\nend", "    local sum = 0\n    for i = 1, n do\n      \
    \  sum = sum + i\n    end\n    return sum\nend", "    if n == 1 then\n       \
    \ return 1\n    else\n        return n + sum_to_n(n - 1)\n    end\nend", "\treturn\
    \ (n * (n + 1)) / 2\nend", "    if n < 0 then\n        return 0\n    else\n  \
    \      return (n * (n + 1)) / 2\n    end\nend", "  local sum = 0\n  for i = 1,\
    \ n do\n    sum = sum + i\n  end\n  return sum\nend", "    local sum = 0\n   \
    \ for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend", "  if\
    \ n > 0 then\n    return n + sum_to_n(n - 1)\n  else\n    return 0\n  end\nend",
  "    if n == 1 then\n        return 1\n    else\n        return n + sum_to_n(n -\
    \ 1)\n    end\nend", "  return n*(n+1)/2\nend", "\treturn (n+1)*n/2\nend", " \
    \   return n * (n + 1) / 2\nend", "  if n == 1 then\n    return 1\n  else\n  \
    \  return n + sum_to_n(n-1)\n  end\nend", "\treturn n * (n + 1) / 2\nend", " \
    \ return (n * (n + 1)) / 2\nend", "\tif n == 1 then return 1\n\telse return n\
    \ + sum_to_n(n-1)\n\tend\nend", "  --Use a while loop to sum numbers from 1 to\
    \ n.\n  while sum < n do\n    sum = sum + n\n    n = n - 1\n  end\n  return sum\n\
    end", "\tif n == 1 then return 1 end\n\treturn n + sum_to_n(n-1)\nend", "\tlocal\
    \ total = 0\n\tfor i = 1, n do\n\t\ttotal = total + i\n\tend\n\treturn total\n\
    end", "    return n * (n + 1) / 2\nend", "    return n * (n + 1) / 2\nend", " \
    \   return (n+1)*n/2\nend", "\treturn n*(n+1)/2\nend", "  return n*(n+1)/2\nend",
  "    if n == 1 then\n        return 1\n    else\n        return n + sum_to_n(n -\
    \ 1)\n    end\nend", "  return ((n * (n + 1)) / 2)\nend", "    local sum = 0\n\
    \    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend", " \
    \ if n == 1 then\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\n\
    end", "    return n * (n + 1) / 2\nend", "  local s = 0\n  for i = 1, n do\n \
    \   s = s + i\n  end\n  return s\nend", "  return (n * (n + 1)) / 2\nend", "\t\
    if n == 1 then\n\t\treturn 1\n\telse\n\t\treturn n + sum_to_n(n-1)\n\tend\nend",
  "  local sum = 0\n  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend",
  "  if n == 1 then\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend",
  "    --[[\n        WRITE YOUR CODE HERE\n    ]]\nend", "  return n*(n+1)/2\nend",
  "    return n * (n + 1) / 2\nend", "  if n == 1 then\n    return 1\n  else\n   \
    \ return n + sum_to_n(n-1)\n  end\nend", "    if n < 0 then\n        return nil\n\
    \    end\n    return n * (n + 1) / 2\nend", "    local sum = 0\n    for i = 1,\
    \ n do\n        sum = sum + i\n    end\n    return sum\nend", "    if n < 0 then\n\
    \        return 0\n    else\n        return (n * (n + 1)) / 2\n    end\nend",
  "\treturn n * (n + 1) / 2\nend", "    return ((n * (n + 1)) / 2)\nend", "    --\
    \ TODO: Implement\n    return 0\nend", "\t-- Base case\n\tif n == 1 then\n\t\t\
    return 1\n\tend\n\t-- Recursive case\n\treturn n + sum_to_n(n-1)\nend", "\t--\
    \ check for edge cases\n\tif n == 0 then\n\t\treturn 0\n\telseif n == 1 then\n\
    \t\treturn 1\n\tend", "    return n * (n + 1) / 2\nend", "    return n * (n +\
    \ 1) / 2\nend", "    local sum = 0\n    for i = 1, n do\n        sum = sum + i\n\
    \    end\n    return sum\nend", "  return n * (n + 1) / 2\nend", "  if n == 1\
    \ then\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend", "   \
    \ return n * (n + 1) / 2\nend", "  local sum = 0\n  for x = 1, n do\n    sum =\
    \ sum + x\n  end\n  return sum\nend", "    return (n*(n+1))/2\nend", "\tlocal\
    \ total = 0\n\tfor i = 1, n do\n\t\ttotal = total + i\n\tend\n\treturn total\n\
    end", "  local sum = 0\n  for i = 1, n do\n    sum = sum + i\n  end\n  return\
    \ sum\nend", "    local sum = 0\n    for i = 1, n do\n        sum = sum + i\n\
    \    end\n    return sum\nend", "  local count = 0\n  local total = 0\n  while\
    \ count < n do\n    count = count + 1\n    total = total + count\n  end\n  return\
    \ total\nend", "\t-- YOUR CODE GOES HERE\nend", "    sum = 0\n    for i = 1, n\
    \ do\n        sum = sum + i\n    end\n    return sum\nend", "\treturn n*(n+1)/2\n\
    end", "  -- YOUR CODE HERE\n  if n == 1 then\n    return 1\n  else\n    return\
    \ n + sum_to_n(n-1)\n  end\nend", "  return n * (n + 1) / 2\nend", "    local\
    \ result = 0\n    for i = 1, n do\n        result = result + i\n    end\n    return\
    \ result\nend", "    if n == 1 then\n        return 1\n    else\n        return\
    \ n + sum_to_n(n - 1)\n    end\nend", "  if n == 1 then\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend", "\tlocal sum = 0\n\tfor i = 1, n do\n\
    \t\tsum = sum + i\n\tend\n\treturn sum\nend", "    local sum = 0\n    for i =\
    \ 1, n do\n        sum = sum + i\n    end\n    return sum\nend", "    return (n\
    \ * (n + 1)) / 2\nend", "  if n == 1 then\n    return 1\n  else\n    return n\
    \ + sum_to_n(n-1)\n  end\nend", "  return n*(n+1)/2\nend", "    sum = 0\n    if\
    \ n > 0 then\n        while n > 0 do\n            sum = sum + n\n            n\
    \ = n - 1\n        end\n    else\n        while n < 0 do\n            sum = sum\
    \ + n\n            n = n + 1\n        end\n    end\n    return sum\nend", "  return\
    \ n*(n+1)/2\nend", "    if n <= 0 then\n        return 0\n    else\n        return\
    \ n + sum_to_n(n - 1)\n    end\nend", "    -- TODO: implement this function\n\
    \    -- calculate the sum of n numbers\nend", "    if n == 1 then\n        return\
    \ 1\n    else\n        return n + sum_to_n(n - 1)\n    end\nend", "  if n == 1\
    \ then\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend", "   \
    \ return n * (n + 1) / 2\nend", "  return (n * (n + 1)) / 2\nend", "  return n\
    \ * (n + 1) / 2\nend", "  if n == 1 then\n    return 1\n  else\n    return n +\
    \ sum_to_n(n-1)\n  end\nend", "  local sum = 0\n  local i = 1\n  while i <= n\
    \ do\n    sum = sum + i\n    i = i + 1\n  end\n  return sum\nend", "    local\
    \ sum = 0\n    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\n\
    end", "    if n==1 then\n        return 1\n    else\n        return n + sum_to_n(n-1)\n\
    \    end\nend", "    local n = n + 1\n    return n * (n - 1) / 2\nend", "    if\
    \ n <= 0 then\n        return 0\n    else\n        return n + sum_to_n(n - 1)\n\
    \    end\nend", "\tlocal sum = 0\n\tfor i = 1, n do\n\t\tsum = sum + i\n\tend\n\
    \treturn sum\nend", "  return (n * (n + 1)) / 2\nend", "  return 0.5 * n * (n\
    \ + 1)\nend", "    return n * (n + 1) / 2\nend", "    return n * (n + 1) / 2\n\
    end", "  return n * (n + 1) / 2\nend", "\tlocal nSum = 0;\n\tlocal nCount = 1;\n\
    \twhile nCount <= n do\n\t\tnSum = nSum + nCount;\n\t\tnCount = nCount + 1;\n\t\
    end\n\treturn nSum;\nend", "    local sum = 0\n    for i = 1, n do\n        sum\
    \ = sum + i\n    end\n    return sum\nend", "    local sum = 0\n    for i = 1,\
    \ n do\n        sum = sum + i\n    end\n    return sum\nend", "  local sum = 0\n\
    \  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend", "    local sum\
    \ = 0\n    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend",
  "  return n * (n + 1) / 2\nend", "  local answer = 0\n  local i = 1\n  while i <=\
    \ n do\n    answer = answer + i\n    i = i + 1\n  end\n  return answer\nend",
  "\tif (n == 1) then return 1 end\n\treturn n + sum_to_n(n-1)\nend", "\tlocal sum\
    \ = 0\n\tfor i = 1, n do\n\t\tsum = sum + i\n\tend\n\treturn sum\nend", "    sum\
    \ = 0\n    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend",
  "\tif (n <= 0) then return 0\n\telse return n + sum_to_n(n-1)\n\tend\nend", "  \
    \  return n * (n + 1) / 2\nend", "    return n * (n + 1) / 2\nend", "    -- TODO:\
    \ Write sum_to_n function\n    return 0\nend", "    return n * (n + 1) / 2\nend",
  "    -- TODO your code here\n    return nil\nend", "  if n == 1 then\n    return\
    \ 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend", "  return (n + 1) * n\
    \ / 2\nend", "    local sum = 0\n    for i = 1, n do\n        sum = sum + i\n\
    \    end\n    return sum\nend", "  return (n * (n + 1)) / 2\nend", "  if n ==\
    \ 1 then\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend", " \
    \ local sum = 0\n  for i = 1, n do\n    sum = sum + i\n  end\n  return sum\nend",
  "\tlocal sum = 0\n\tfor i = 1, n do\n\t\tsum = sum + i\n\tend\n\treturn sum\nend",
  "    return n * (n + 1) / 2\nend", "  local sum = 0\n  for i = 1, n do\n    sum\
    \ = sum + i\n  end\n  return sum\nend", "  return n * (n + 1) / 2\nend", "   \
    \ if n == 1 then\n        return 1\n    else\n        return n + sum_to_n(n -\
    \ 1)\n    end\nend", "    local sum = 0\n    for i = 1, n do\n        sum = sum\
    \ + i\n    end\n    return sum\nend", "    return n * (n + 1) / 2\nend", "   \
    \ local sum = 0\n    for i = 1, n do\n        sum = sum + i\n    end\n    return\
    \ sum\nend", "    local sum = 0\n    for i = 1, n do\n        sum = sum + i\n\
    \    end\n    return sum\nend", "\tlocal sum = 0\n\tfor i = 1, n do\n\t\tsum =\
    \ sum + i\n\tend\n\treturn sum\nend", "    local sum = 0\n    for i = 1, n do\n\
    \        sum = sum + i\n    end\n    return sum\nend\nprint(\"The sum of the first\
    \ 30 numbers is \" .. sum_to_n(30))\nprint(\"The sum of the first 100 numbers\
    \ is \" .. sum_to_n(100))\nprint(\"The sum of the first 5 numbers is \" .. sum_to_n(5))\n\
    print(\"The sum of the first 10 numbers is \" .. sum_to_n(10))\nprint(\"The sum\
    \ of the first 1 number is \" .. sum_to_n(1))", "    return n * (n + 1) / 2\n\
    end", "    -- YOUR CODE HERE\n    if n == 1 then\n        return 1\n    else\n\
    \        return n + sum_to_n(n-1)\n    end\nend", "    return n * (n + 1) / 2\n\
    end", "    local sum = 0\n    for i = 1, n do\n        sum = sum + i\n    end\n\
    \    return sum\nend", '    local sum = 0', "\tif n == 1 then\n\t\treturn 1\n\t\
    else\n\t\treturn n + sum_to_n(n-1)\n\tend\nend", "  local sum = 0\n  for i = 1,\
    \ n do\n    sum = sum + i\n  end\n  return sum\nend", "    local sum = 0\n   \
    \ for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend", "  return\
    \ n * (n + 1) / 2\nend", "  if n == 1 then\n    return 1\n  else\n    return n\
    \ + sum_to_n(n-1)\n  end\nend", "    return n * (n + 1) / 2\nend", "\t-- Add your\
    \ code here.", "  local sum = 0\n  for i = 1, n do\n    sum = sum + i\n  end\n\
    \  return sum\nend", "  local result = 0\n  for i = 1, n do\n    result = result\
    \ + i\n  end\n  return result\nend", "  if n == 1 then\n    return 1\n  else\n\
    \    return n + sum_to_n(n-1)\n  end\nend", "    -- Accept input n and sum together\
    \ up to n.\n    local sum = 0\n    for i = 1, n do\n        sum = sum + i\n  \
    \  end\n    return sum\nend", "    local r = 0\n    local i = 1\n    while i <=\
    \ n do\n        r = r + i\n        i = i + 1\n    end\n    return r\nend", " \
    \   if n == 1 then\n        return 1\n    else\n        return n + sum_to_n(n\
    \ - 1)\n    end\nend", "  if n <= 0 then\n    return 0\n  else\n    return n +\
    \ sum_to_n(n-1)\n  end\nend", "\t-- check if n is a integer\n\tif n < 1 or n ~=\
    \ math.floor(n) then\n\t\terror(\"sum_to_n: \" .. \"n has to be a integer greater\
    \ than 0\")\n\tend\n\t-- 0 and 1\n\tif n == 0 then\n\t\treturn 0\n\telseif n ==\
    \ 1 then\n\t\treturn 1\n\tend\n\t-- recursive\n\treturn n + sum_to_n(n - 1)\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
