name: HumanEval_62_derivative
language: lua
prompt: "-- xs represent coefficients of a polynomial.\n-- xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n-- Return derivative of this polynomial in the same form.\n-- >>>\
  \ derivative([3, 1, 2, 4, 5])\n-- [1, 4, 12, 20]\n-- >>> derivative([1, 2, 3])\n\
  -- [2, 6]\nlocal function derivative(xs)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = derivative\n\
  \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), {1, 4, 12, 20})\n    lu.assertEquals(candidate({1,\
  \ 2, 3}), {2, 6})\n    lu.assertEquals(candidate({3, 2, 1}), {2, 2})\n    lu.assertEquals(candidate({3,\
  \ 2, 1, 0, 4}), {2, 2, 0, 16})\n    lu.assertEquals(candidate({1}), {})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["    local n = table.getn(xs)\n    local ys = {}\n    for i = 1, n -\
    \ 1 do\n        ys[i] = xs[i + 1] * i\n    end\n    return ys\nend", "    local\
    \ ys = {}\n    for i, x in ipairs(xs) do\n        ys[i - 1] = (i - 1) * x\n  \
    \  end\n    return ys\nend", "    local ret = {}\n    for i = 1, #xs - 1 do\n\
    \        table.insert(ret, xs[i] * i)\n    end\n    return ret\nend", "  local\
    \ res = {}\n  local size = #xs\n  for i = 1, size - 1 do\n    local d = i * xs[i\
    \ + 1]\n    table.insert(res, d)\n  end\n  return res\nend", "    local dx = {}\n\
    \    for i, x in ipairs(xs) do\n        if i > 1 then\n            table.insert(dx,\
    \ (i - 1) * x)\n        end\n    end\n    return dx\nend", "  local rs = {}\n\
    \  for i = 1, #xs - 1 do\n    rs[i] = xs[i] * i\n  end\n  return rs\nend", " \
    \   local dx = {}\n    for i = 1, #xs - 1 do\n        dx[i] = (i + 1) * xs[i +\
    \ 1]\n    end\n    return dx\nend", "    local n = #xs\n    local ret = {}\n \
    \   for i = 1, n-1 do\n        ret[i] = xs[i] * (n-i)\n    end\n    return ret\n\
    end", "  local n = #xs\n  local dxs = table.create(n-1)\n  for i = 2, n do\n \
    \   dxs[i-1] = xs[i] * (i-1)\n  end\n  return dxs\nend", "    local n = #xs\n\
    \    if n == 0 then\n        return {}\n    end\n    local ys = {}\n    for i\
    \ = 1, n - 1 do\n        ys[i] = xs[i + 1] * i\n    end\n    return ys\nend",
  "\tlocal n = #xs\n\tlocal dxs = {}\n\tfor i = 2, n do\n\t\tdxs[i - 1] = (i - 1)\
    \ * xs[i]\n\tend\n\treturn dxs\nend", "  local result = {}\n  for i = 1, #xs -\
    \ 1 do\n    table.insert(result, xs[i] * i)\n  end\n  return result\nend", " \
    \ local n = #xs - 1\n  local p = {}\n  for i=1,n do\n    p[i] = xs[i+1] * i\n\
    \  end\n  return p\nend", "  local dxs = {}\n  for i = 1, #xs do\n    dxs[i -\
    \ 1] = xs[i] * i\n  end\n  return dxs\nend", "  local ys = {}\n  for i = 1, #xs\
    \ - 1 do\n    ys[i] = (i + 1) * xs[i + 1]\n  end\n  return ys\nend", "    local\
    \ n = #xs\n    local dxs = {}\n    for i = 1, n-1 do\n        dxs[i] = (i + 1)\
    \ * xs[i + 1]\n    end\n    return dxs\nend", "    local dy = {}\n    for i =\
    \ #xs - 1, 1, -1 do\n        table.insert(dy, i * xs[i + 1])\n    end\n    return\
    \ dy\nend", "    if #xs == 0 then\n        return {}\n    end\n    local d = {}\n\
    \    for i = 1, #xs - 1 do\n        table.insert(d, xs[i] * i)\n    end\n    return\
    \ d\nend", "   assert(#xs >= 1)\n   local ys = {}\n   for i = 1, #xs-1 do\n  \
    \    ys[i] = (i+1) * xs[i+1]\n   end\n   return ys\nend", "    local ys = {}\n\
    \    for i = 1, #xs - 1 do\n        ys[i] = (i + 1) * xs[i + 1]\n    end\n   \
    \ return ys\nend", "    local result = {}\n    for i = 2, #xs do\n        table.insert(result,\
    \ xs[i] * (i - 1))\n    end\n    return result\nend", "    local ys = {}\n   \
    \ for i = 1, #xs - 1 do\n        table.insert(ys, (i + 1) * xs[i + 1])\n    end\n\
    \    return ys\nend", "    local res = {}\n    for i = 1, #xs - 1 do\n       \
    \ res[i] = xs[i] * i\n    end\n    return res\nend", "  local new_xs = {}\n  for\
    \ i, x in ipairs(xs) do\n    new_xs[i] = (i - 1) * x\n  end\n  return new_xs\n\
    end", "    local n = #xs - 1\n    local der = {}\n    local b = 1\n    for i =\
    \ 1, n do\n        table.insert(der, b * xs[i + 1])\n        b = b + 1\n    end\n\
    \    return der\nend", "  local n = #xs\n  local res = {}\n  for i = 1, n - 1\
    \ do\n    res[i] = xs[i] * (n - i)\n  end\n  return res\nend", "  local result\
    \ = {}\n  for i = 2, #xs do\n    table.insert(result, (i - 1) * xs[i])\n  end\n\
    \  return result\nend", "    local d = {}\n    for i = 2, #xs do\n        d[i\
    \ - 1] = xs[i] * (i - 1)\n    end\n    return d\nend", "    local res = {}\n \
    \   for i = 1, #xs - 1 do\n        res[i] = xs[i] * i\n    end\n    return res\n\
    end", "  if #xs == 0 then\n    return {}\n  end\n  local dxs = {}\n  for i = 1,\
    \ #xs - 1 do\n    dxs[i] = xs[i] * (i)\n  end\n  return dxs\nend", "\tlocal result\
    \ = {}\n\tfor i, x in ipairs(xs) do\n\t\tif i == 1 then\n\t\t\ttable.insert(result,\
    \ 0)\n\t\telse\n\t\t\ttable.insert(result, (i - 1) * x)\n\t\tend\n\tend\n\treturn\
    \ result\nend", "    local new_xs = {}\n    for i = 1, #xs - 1 do\n        new_xs[i]\
    \ = (i + 1) * xs[i + 1]\n    end\n    return new_xs\nend", "    local ret = {}\n\
    \    for i = 2, #xs do\n        table.insert(ret, xs[i] * (i - 1))\n    end\n\
    \    return ret\nend", "    local ys = {}\n    for i, x in ipairs(xs) do\n   \
    \     if i > 1 then\n            table.insert(ys, (i - 1) * x)\n        end\n\
    \    end\n    return ys\nend", "    local result = {}\n    local n = #xs - 1\n\
    \    for i = 0, n - 1 do\n        result[i + 1] = xs[i + 1] * (n - i)\n    end\n\
    \    return result\nend", "  local dx = {}\n  local n = #xs - 1\n  for i = 0,\
    \ n - 1 do\n    dx[i] = (n - i) * xs[i + 1]\n  end\n  return dx\nend", "    local\
    \ dx = {}\n    for i = 2, #xs do\n        dx[i - 1] = xs[i] * (i - 1)\n    end\n\
    \    return dx\nend", "    local n = #xs\n    if n == 0 then\n        return {}\n\
    \    end\n    local ys = {}\n    for i = 1, n-1 do\n        table.insert(ys, xs[i]\
    \ * (n-i))\n    end\n    return ys\nend", "   local dx = { }\n   for i = 1, #xs\
    \ - 1 do\n      dx[i] = (i + 1) * xs[i + 1]\n   end\n   return dx\nend", "   local\
    \ dxs = {}\n   for i = 2, #xs do\n      dxs[i - 1] = (i - 1) * xs[i]\n   end\n\
    \   return dxs\nend", "   local dx = {}\n   local exponent = 1\n   for i = 1,\
    \ #xs do\n      dx[i] = xs[i] * exponent\n      exponent = exponent + 1\n   end\n\
    \   return dx\nend", "    assert(xs, \"xs is nil\")\n    local n = #xs\n    if\
    \ n <= 1 then\n        return {}\n    end\n    local result = {}\n    for i =\
    \ 2, n do\n        result[i - 1] = xs[i] * (i - 1)\n    end\n    return result\n\
    end", "    local dxs = {}\n    for i = 1, #xs do\n        if i == 1 then\n   \
    \         dxs[i] = 0\n        else\n            dxs[i] = xs[i] * i\n        end\n\
    \    end\n    return dxs\nend", "\tlocal ret = {}\n\tfor i = 2, #xs do\n\t\tret[i\
    \ - 1] = (i - 1) * xs[i]\n\tend\n\treturn ret\nend", "  local res = {}\n  for\
    \ i = 2, #xs do\n    res[i - 1] = xs[i] * (i - 1)\n  end\n  return res\nend",
  "  local n = #xs\n  local result = {}\n  for i = 1, n - 1 do\n    table.insert(result,\
    \ xs[i] * (n - i))\n  end\n  return result\nend", "  local dxs = {}\n  local len\
    \ = #xs\n  for i = 2, len do\n    dxs[i - 1] = (i - 1) * xs[i]\n  end\n  return\
    \ dxs\nend", "    -- TODO\n    local count = #xs\n    local dxs = {}\n    for\
    \ i = 0, count - 2 do\n        table.insert(dxs, (i + 1) * xs[i + 1])\n    end\n\
    \    return dxs\nend", "  local n = #xs\n  local new_xs = {}\n  local i\n  for\
    \ i = 1, n - 1 do\n    new_xs[i] = (i + 1) * xs[i + 1]\n  end\n  return new_xs\n\
    end", "    local res = {}\n    for i = 2, #xs do\n        res[i - 1] = xs[i] *\
    \ (i - 1)\n    end\n    return res\nend", "    assert(#xs >= 1)\n    local d =\
    \ #xs - 1\n    local r = {}\n    for i = 1, d do\n        r[i] = xs[i + 1] * i\n\
    \    end\n    return r\nend", "    local n = #xs\n    local dy = {}\n    for i\
    \ = 1, n - 1 do\n        dy[i] = xs[i] * (n - i)\n    end\n    return dy\nend",
  "  local rs = {}\n  local n = #xs\n  for i = 1, n-1 do\n    rs[i] = (i+1) * xs[i+1]\n\
    \  end\n  return rs\nend", "    local derivative_xs = {}\n    for i, v in ipairs(xs)\
    \ do\n        if i > 1 then\n            derivative_xs[i - 1] = v * (i - 1)\n\
    \        end\n    end\n    return derivative_xs\nend", "  local derivative_xs\
    \ = {}\n  for i, x in ipairs(xs) do\n    table.insert(derivative_xs, (i - 1) *\
    \ x)\n  end\n  return derivative_xs\nend", "  local ys = {}\n  for k = 1, #xs\
    \ - 1 do\n    ys[k] = xs[k] * k\n  end\n  return ys\nend", "    local dxs = {}\n\
    \    for i = 1, #xs - 1 do\n        dxs[i] = (i + 1) * xs[i + 1]\n    end\n  \
    \  return dxs\nend", "    local n = #xs\n    local ys = array(n - 1)\n    for\
    \ i = 1, n - 1 do\n        ys[i] = xs[i + 1] * i\n    end\n    return ys\nend",
  "    local d = {}\n    for i = 1, #xs - 1 do\n        d[i] = (i + 1) * xs[i + 1]\n\
    \    end\n    return d\nend", "    local n = #xs\n    local ys = {}\n    for i\
    \ = 1, n-1 do\n        ys[i] = xs[i+1] * i\n    end\n    return ys\nend", "  local\
    \ dx = {}\n  for i, x in ipairs(xs) do\n    table.insert(dx, (i - 1) * x)\n  end\n\
    \  return dx\nend", "  local dxs = {}\n  for i = 1, #xs - 1 do\n    dxs[i] = (i\
    \ + 1) * xs[i + 1]\n  end\n  return dxs\nend", "    local dxs = {}\n    for i,\
    \ x in ipairs(xs) do\n        dxs[i] = (i - 1) * x\n    end\n    return dxs\n\
    end", "\tlocal ys = {}\n\tfor i, x in ipairs(xs) do\n\t\tif x ~= 0 then\n\t\t\t\
    table.insert(ys, (i - 1) * x)\n\t\tend\n\tend\n\treturn ys\nend", "    local f\
    \ = function(i)\n        return (i - 1) * xs[i]\n    end\n    return map(f, arr(#xs\
    \ - 1))\nend", "    local result = {}\n    for k, x in ipairs(xs) do\n       \
    \ if k > 1 then\n            table.insert(result, (k - 1) * x)\n        end\n\
    \    end\n    return result\nend", "  local n = #xs\n  if n == 0 then\n    return\
    \ {}\n  end\n  local dx = {}\n  for i = 1, n - 1 do\n    dx[i] = xs[i] * (n -\
    \ i)\n  end\n  return dx\nend", "    local r = {}\n    for i = 1, #xs - 1 do\n\
    \        table.insert(r, (i + 1) * xs[i + 1])\n    end\n    return r\nend", " \
    \   local ret = {}\n    for i = 1, #xs - 1 do\n        table.insert(ret, (i) *\
    \ xs[i + 1])\n    end\n    return ret\nend", "  local ret = {}\n  for i = 2, #xs\
    \ do\n    ret[i - 1] = xs[i] * (i - 1)\n  end\n  return ret\nend", "  local n\
    \ = #xs\n  local res = {}\n  for i = 2, n do\n    res[i - 1] = xs[i] * (i - 1)\n\
    \  end\n  return res\nend", "    local n = #xs\n    local ys = {}\n    for i =\
    \ 1, n - 1 do\n        ys[i] = xs[i] * (n - i)\n    end\n    return ys\nend",
  "    -- YOUR CODE HERE\n    local t = {}\n    local n = #xs\n    if n > 1 then\n\
    \        for i = 1, n - 1 do\n            table.insert(t, xs[i] * i)\n       \
    \ end\n    end\n    return t\nend", "    local n = #xs\n    local ys = {}\n  \
    \  for i = 2, n do\n        ys[i - 1] = (i - 1) * xs[i]\n    end\n    return ys\n\
    end", "    local dxs = {}\n    for i, x in ipairs(xs) do\n        if i ~= 1 then\n\
    \            table.insert(dxs, i * x)\n        end\n    end\n    return dxs\n\
    end", "    local derivative = {}\n    for i = 1, #xs - 1 do\n        derivative[i]\
    \ = xs[i] * (i)\n    end\n    return derivative\nend", "    local res = {}\n \
    \   for i, x in ipairs(xs) do\n        res[i - 1] = x * (i - 1)\n    end\n   \
    \ return res\nend", "    local dxs = {}\n    for i = 1, #xs - 1 do\n        dxs[i]\
    \ = xs[i] * i\n    end\n    return dxs\nend", "\tlocal len = #xs\n\tlocal rs =\
    \ {}\n\tfor i = 1, len - 1 do\n\t\trs[i] = xs[i] * (len - i)\n\tend\n\treturn\
    \ rs\nend", "    local rs = {}\n    for i = 1, #xs - 1 do\n        rs[i] = xs[i]\
    \ * (i)\n    end\n    return rs\nend", "    local dxs = {}\n    for i = 1, #xs\
    \ - 1 do\n        dxs[i] = xs[i] * i\n    end\n    return dxs\nend", "    assert(type(xs)\
    \ == \"table\")\n    local new_xs = {}\n    for i = 1, #xs - 1 do\n        new_xs[i]\
    \ = (i + 1) * xs[i + 1]\n    end\n    return new_xs\nend", "    local n = #xs\n\
    \    if n == 0 then\n        return xs\n    end\n    local ys = {}\n    for i\
    \ = 1, n - 1 do\n        ys[i] = xs[i + 1] * i\n    end\n    return ys\nend",
  "    -- return map(multiply, iter(range(1, len(xs))), drop(1, xs))\n    local xs2\
    \ = iter(xs)\n    local res = {}\n    for i = 1, len(xs) do\n        res[i] =\
    \ xs2[i] * i\n    end\n    return res\nend", "  local result = {}\n  for i = 2,\
    \ #xs do\n    table.insert(result, (i - 1) * xs[i])\n  end\n  return result\n\
    end", "  local coeffs = {}\n  for i = 1, #xs - 1 do\n    coeffs[i] = (i + 1) *\
    \ xs[i + 1]\n  end\n  return coeffs\nend", "    local dx = {}\n    for i = 1,\
    \ #xs do\n        dx[i - 1] = xs[i] * i\n    end\n    return dx\nend", "    local\
    \ n = #xs\n    local ys = {}\n    for i = 1, n - 1 do\n        ys[i] = (i + 1)\
    \ * xs[i + 1]\n    end\n    return ys\nend", "    local der = {}\n    for i =\
    \ 1, #xs - 1 do\n        der[i] = (i + 1) * xs[i + 1]\n    end\n    return der\n\
    end", "    local n = #xs\n    local derivative_xs = {}\n    for i=2,n do\n   \
    \     derivative_xs[i-1] = xs[i] * (i-1)\n    end\n    return derivative_xs\n\
    end", "  local size = #xs\n  local result = {}\n  for i = 1, size - 1 do\n   \
    \ result[i] = xs[i] * (size - i)\n  end\n  return result\nend", "  local res =\
    \ {}\n  for i = 2, #xs do\n    res[i - 1] = (i - 1) * xs[i]\n  end\n  return res\n\
    end", "  -- YOUR CODE HERE\n  local new_list = {}\n  for i = 2, #xs do\n    new_list[i-1]\
    \ = xs[i] * (i-1)\n  end\n  return new_list\nend", "    local s = #xs\n    local\
    \ r = {}\n    for i = 2, s do\n        r[i - 1] = (i - 1) * xs[i]\n    end\n \
    \   return r\nend", "\tlocal n = #xs\n\tif n <= 1 then\n\t\treturn {}\n\tend\n\
    \tlocal k = 1\n\tlocal ys = {}\n\tfor i = 2, n do\n\t\tys[k] = xs[i] * (i - 1)\n\
    \t\tk = k + 1\n\tend\n\treturn ys\nend", "  local len = #xs\n  local result =\
    \ {}\n  local i = 1\n  while i < len do\n    result[i] = xs[i + 1] * i\n    i\
    \ = i + 1\n  end\n  return result\nend", "  local n = #xs\n  local dxs = {}\n\
    \  for i = 1, n - 1 do\n    dxs[i] = xs[i] * (n - i)\n  end\n  return dxs\nend",
  "  local ys = {}\n  for i = 2, #xs do\n    ys[i - 1] = xs[i] * (i - 1)\n  end\n\
    \  return ys\nend", "    local result = {}\n    for i = #xs - 1, 1, -1 do\n  \
    \      table.insert(result, xs[i + 1] * i)\n    end\n    return result\nend",
  "    local len = #xs\n    local result = {}\n    for i = 1, len - 1 do\n       \
    \ result[i] = xs[i] * (len - i)\n    end\n    return result\nend", "  local result\
    \ = {}\n  for i = 2, #xs do\n    result[i - 1] = (i - 1) * xs[i]\n  end\n  return\
    \ result\nend", "    local new_xs = {}\n    for i, x in ipairs(xs) do\n      \
    \  new_xs[i] = (i - 1) * x\n    end\n    return new_xs\nend", "   local result\
    \ = {}\n   for i, v in ipairs(xs) do\n      if i > 1 then\n         table.insert(result,\
    \ (i - 1) * v)\n      end\n   end\n   return result\nend", "  -- fill it in\n\
    end", "  local der = {}\n  for i, x in ipairs(xs) do\n    if i ~= 1 then\n   \
    \   der[i - 1] = i * x\n    end\n  end\n  return der\nend", "    local n = #xs\
    \ - 1\n    local r = {}\n    for i = 1, n do\n        r[i] = xs[i + 1] * i\n \
    \   end\n    return r\nend", "    local n = #xs\n    local dxs = {}\n    for i\
    \ = 1, n - 1 do\n        dxs[i] = xs[i] * (n - i)\n    end\n    return dxs\nend",
  "    local result = {}\n    local k = #xs - 1\n    while k > 0 do\n        result[k]\
    \ = xs[k] * k\n        k = k - 1\n    end\n    return result\nend", "    local\
    \ xs_ = {}\n    for i = 1, #xs do\n        xs_[i] = xs[i] * i\n    end\n    table.remove(xs_,\
    \ 1)\n    return xs_\nend", "   local ys = {}\n   for i, x in ipairs(xs) do\n\
    \      ys[i] = x * i\n   end\n   return ys\nend", "  local dxs = {}\n  for i =\
    \ 1, #xs - 1 do\n    table.insert(dxs, (i+1) * xs[i+1])\n  end\n  return dxs\n\
    end", "   local drv = {}\n   for i = 1, #xs - 1 do\n      drv[i] = (i + 1) * xs[i\
    \ + 1]\n   end\n   return drv\nend", "  local derivative = {}\n  for i = 1, #xs\
    \ - 1 do\n    derivative[i] = xs[i] * i\n  end\n  return derivative\nend", " \
    \ local n = #xs\n  local derivative_xs = {}\n  for i = 2, n do\n    table.insert(derivative_xs,\
    \ (i - 1) * xs[i])\n  end\n  return derivative_xs\nend", "    local res = {}\n\
    \    for i = 1, #xs - 1 do\n        res[i] = xs[i] * i\n    end\n    return res\n\
    end", "   local ys = {}\n   for i = 2, #xs do\n      ys[i - 1] = (i - 1) * xs[i]\n\
    \   end\n   return ys\nend", "  local n = #xs\n  local d = {}\n  for i = 1, n\
    \ - 1 do\n    d[i] = (i + 1) * xs[i + 1]\n  end\n  return d\nend", "    local\
    \ n = #xs\n    if n == 0 then\n        return {}\n    end\n    local dxs = {}\n\
    \    for i = 2, n do\n        dxs[i - 1] = (i - 1) * xs[i]\n    end\n    return\
    \ dxs\nend", "  assert(#xs > 0)\n  local ret = {}\n  for i = 1, #xs - 1 do\n \
    \   table.insert(ret, xs[i] * i)\n  end\n  return ret\nend", "    local dxs =\
    \ {}\n    for i, x in ipairs(xs) do\n        if i >= 2 then\n            dxs[i\
    \ - 1] = (i - 1) * x\n        end\n    end\n    return dxs\nend", "    assert(#xs\
    \ >= 1)\n    local dxs = {}\n    for i = 2, #xs do\n        dxs[i - 1] = (i -\
    \ 1) * xs[i]\n    end\n    return dxs\nend", "  local k = #xs\n  local dxs = {}\n\
    \  for i = 1, k - 1 do\n    dxs[i] = (i + 1) * xs[i + 1]\n  end\n  return dxs\n\
    end", "  if type(xs) ~= 'table' then return nil end\n  local dy_dx = {}\n  for\
    \ i,v in ipairs(xs) do\n    if i > 1 then\n      dy_dx[i-1] = v * (i-1)\n    end\n\
    \  end\n  return dy_dx\nend", "   if #xs == 0 then\n      return xs\n   end\n\
    \   if #xs == 1 then\n      return {0}\n   end\n   local dxs = {}\n   for i =\
    \ 2, #xs do\n      table.insert(dxs, (i - 1) * xs[i])\n   end\n   return dxs\n\
    end", "    local ys = {}\n    for i = 2, #xs do\n        ys[i - 1] = xs[i] * (i\
    \ - 1)\n    end\n    return ys\nend", "  local dxs = {}\n  for i = 2, #xs do\n\
    \    dxs[i - 1] = xs[i] * (i - 1)\n  end\n  return dxs\nend", "    local result\
    \ = {}\n    for i, x in ipairs(xs) do\n        result[i] = x * i\n    end\n  \
    \  return utils.dropFirst(result)\nend", "    local n = #xs - 1\n    local ret\
    \ = {}\n    for i = 1, n do\n        ret[i] = xs[i] * i\n    end\n    return ret\n\
    end", "   local n = #xs\n   local dxs = {}\n   for i = 1, n-1 do\n      dxs[i]\
    \ = (i+1) * xs[i+1]\n   end\n   return dxs\nend", "  local ys = {}\n  for i, x\
    \ in ipairs(xs) do\n    if i > 1 then\n      ys[i - 1] = x * (i - 1)\n    end\n\
    \  end\n  return ys\nend", "  local ys = {}\n  for i = 1, #xs - 1 do\n    ys[i]\
    \ = (i + 1) * xs[i + 1]\n  end\n  return ys\nend", "    local n = #xs\n    if\
    \ n == 0 then\n        return xs\n    end\n    local ys = {}\n    for i = 2, n\
    \ do\n        ys[i - 1] = xs[i] * (i - 1)\n    end\n    return ys\nend", "  local\
    \ n = #xs - 1\n  local ys = {}\n  for i = 1, n do\n    ys[i] = xs[i + 1] * i\n\
    \  end\n  return ys\nend", "    local r = {}\n    for i = 1, #xs - 1 do\n    \
    \    r[i] = xs[i] * i\n    end\n    return r\nend", "    local n = #xs - 1\n \
    \   local dxs = {}\n    for i = 0, n-1 do\n        dxs[i+1] = (n-i) * xs[i+1]\n\
    \    end\n    return dxs\nend", "   local ret = {}\n   for i = 1, #xs - 1 do\n\
    \      ret[i] = (i + 1) * xs[i + 1]\n   end\n   return ret\nend", "    local result\
    \ = {}\n    for i, x in ipairs(xs) do\n        table.insert(result, (i - 1) *\
    \ x)\n    end\n    return result\nend", "    assert(#xs > 0)\n    local n = #xs\n\
    \    local ys = {}\n    for i = 2, n do\n        table.insert(ys, (i - 1) * xs[i])\n\
    \    end\n    return ys\nend", "  local xs_len = #xs\n  if xs_len < 2 then\n \
    \   return {}\n  end\n  local result = {}\n  for i = 1, xs_len - 1 do\n    result[i]\
    \ = xs[i + 1] * i\n  end\n  return result\nend", "    if #xs <= 1 then\n     \
    \   return {0}\n    end\n    local result = {}\n    for i = 1, #xs - 1 do\n  \
    \      result[i] = xs[i + 1] * i\n    end\n    return result\nend", "    local\
    \ dxs = {}\n    for i, x in ipairs(xs) do\n        dxs[i] = (i - 1) * x\n    end\n\
    \    return dxs\nend", "    local result = {}\n    for i = 1, #xs - 1 do\n   \
    \     table.insert(result, (i + 1) * xs[i + 1])\n    end\n    return result\n\
    end", "   local ys = {}\n   for i = 2, #xs do\n      ys[i - 1] = (i - 1) * xs[i]\n\
    \   end\n   return ys\nend", "    local res = {}\n    for i = 1, #xs do\n    \
    \    res[i - 1] = xs[i] * i\n    end\n    return res\nend", "    local dxs = {}\n\
    \    for i = 1, #xs - 1 do\n        dxs[i] = xs[i] * i\n    end\n    return dxs\n\
    end", "  local dx = {}\n  for i = 2, #xs do\n    dx[i - 1] = xs[i] * (i - 1)\n\
    \  end\n  return dx\nend", "  local ret = {}\n  for i = 1, #xs - 1 do\n    ret[i]\
    \ = (i + 1) * xs[i + 1]\n  end\n  return ret\nend", "  local n = #xs - 1\n  local\
    \ ys = {}\n  for i = 1, n do\n    ys[i] = xs[i] * i\n  end\n  return ys\nend",
  "    local derivative = {}\n    for i = 1, #xs - 1 do\n        table.insert(derivative,\
    \ xs[i] * i)\n    end\n    return derivative\nend", "   local result = {}\n  \
    \ for i = 1, #xs - 1 do\n      table.insert(result, xs[i] * i)\n   end\n   return\
    \ result\nend", "  local dxs = {}\n  local n = #xs - 1\n  for i = 0, n - 1 do\n\
    \    dxs[i] = (n - i) * xs[i + 1]\n  end\n  return dxs\nend", "    assert(#xs\
    \ >= 1)\n    local ys = {}\n    for i = 2, #xs do\n        ys[i - 1] = xs[i] *\
    \ (i - 1)\n    end\n    return ys\nend", "    local coeffs = {}\n    local i =\
    \ 1\n    for x in each(xs) do\n        if (i > 1) then\n            add(coeffs,\
    \ i * x)\n        end\n        i = i + 1\n    end\n    return coeffs\nend", " \
    \   local n = #xs\n    local ret = {}\n    for i = 2, n do\n        ret[i - 1]\
    \ = xs[i] * (i - 1)\n    end\n    return ret\nend", "    local ret = {}\n    local\
    \ n = #xs - 1\n    for i = 1, n do\n        table.insert(ret, i * xs[i + 1])\n\
    \    end\n    return ret\nend", "    local dx = {}\n    local len = #xs\n    if\
    \ len == 0 then\n        return dx\n    end\n    for i = 1, len - 1 do\n     \
    \   dx[i] = (i + 1) * xs[i + 1]\n    end\n    return dx\nend", "  local size =\
    \ #xs\n  if size <= 1 then\n    return {}\n  end\n  local res = {}\n  for i =\
    \ 2, size do\n    res[i - 1] = (i - 1) * xs[i]\n  end\n  return res\nend", " \
    \   local size = #xs - 1\n    if size <= 0 then\n        return {}\n    end\n\
    \    local ys = {}\n    for i = size, 1, -1 do\n        ys[size - i + 1] = xs[i]\
    \ * i\n    end\n    return ys\nend", "  local n = #xs - 1\n  local c = {}\n  for\
    \ i = 1, n do\n    c[i] = (i + 1) * xs[i + 1]\n  end\n  return c\nend", "  local\
    \ result = {}\n  for i, x in ipairs(xs) do\n    result[i] = x * i\n  end\n  return\
    \ result\nend", "  local derivative = {}\n  for i = 1, #xs - 1 do\n    derivative[i]\
    \ = (i + 1) * xs[i + 1]\n  end\n  return derivative\nend", "    local n = #xs\n\
    \    if n == 0 then\n        return {}\n    end\n    local dxs = {}\n    for i\
    \ = 2, n do\n        dxs[i - 1] = xs[i] * (i - 1)\n    end\n    return dxs\nend",
  "    local dxs = {}\n    for i = 1, #xs - 1 do\n        dxs[i] = xs[i] * i\n   \
    \ end\n    return dxs\nend", "    local n = #xs\n    if n == 0 then\n        return\
    \ {}\n    end\n    local result = {}\n    for i = 2, n do\n        result[i -\
    \ 1] = (i - 1) * xs[i]\n    end\n    return result\nend", "\tlocal result = {}\n\
    \tfor i = 1, #xs - 1 do\n\t\ttable.insert(result, (i) * xs[i + 1])\n\tend\n\t\
    return result\nend", "    local dxs = {}\n    local n = #xs\n    for i = 1, n-1\
    \ do\n        dxs[i] = (i + 1) * xs[i + 1]\n    end\n    return dxs\nend", " \
    \ local x2 = {}\n  for i, x in ipairs(xs) do\n    x2[i] = (i-1) * x\n  end\n \
    \ table.remove(x2, 1)\n  return x2\nend", "  local n = #xs\n  local ys = {}\n\
    \  for i = 2, n do\n    ys[i - 1] = (i - 1) * xs[i]\n  end\n  return ys\nend",
  "\tlocal n = #xs - 1\n\tlocal new = {}\n\tfor i = 1, n do\n\t\tnew[i] = xs[i + 1]\
    \ * i\n\tend\n\treturn new\nend", "  local n = #xs\n  local res = {}\n  for i\
    \ = 1, n - 1 do\n    res[i] = xs[i] * (n - i)\n  end\n  return res\nend", "  \
    \  local ret = {}\n    for i = 1, #xs do\n        ret[i - 1] = (i) * xs[i]\n \
    \   end\n    return ret\nend", "    local n = #xs - 1\n    local xs2 = {}\n  \
    \  for i = 0, n - 1 do\n        xs2[i] = (n - i) * xs[i + 1]\n    end\n    return\
    \ xs2\nend", "  local result = {}\n  for i = 1, #xs - 1 do\n    table.insert(result,\
    \ (i + 1) * xs[i + 1])\n  end\n  return result\nend", "\tlocal n = #xs - 1\n\t\
    local qs = {}\n\tfor i = 1, n do\n\t\tqs[i] = xs[i] * (n - i + 1)\n\tend\n\treturn\
    \ qs\nend", "\tlocal dxs = {}\n\tlocal n = #xs\n\tif n == 0 then\n\t\treturn xs\n\
    \tend\n\tif n == 1 then\n\t\treturn {0}\n\tend\n\tfor i = 1, n - 1 do\n\t\ttable.insert(dxs,\
    \ (n - i) * xs[i])\n\tend\n\treturn dxs\nend", "  if #xs == 0 then\n    return\
    \ {}\n  end\n  local r = {}\n  for i=2,#xs do\n    table.insert(r, (i-1) * xs[i])\n\
    \  end\n  return r\nend", "  if #xs < 2 then\n    return {0}\n  end\n  local n\
    \ = #xs - 1\n  local res = {}\n  for i = 2, n do\n    res[i - 1] = xs[i] * (i\
    \ - 1)\n  end\n  return res\nend", "    local res = {}\n    for i = 2, #xs do\n\
    \        res[i - 1] = xs[i] * (i - 1)\n    end\n    return res\nend", "\tlocal\
    \ n = #xs\n\tlocal new_xs = {}\n\tfor i = 1, n - 1 do\n\t\tnew_xs[i] = xs[i] *\
    \ (n - i)\n\tend\n\treturn new_xs\nend", "  local result = {}\n  for i = 2, #xs\
    \ do\n    table.insert(result, (i - 1) * xs[i])\n  end\n  return result\nend",
  "    local ys = {}\n    for i = 1, #xs - 1 do\n        ys[i] = (i + 1) * xs[i +\
    \ 1]\n    end\n    return ys\nend", "    local n = #xs\n    local res = {}\n \
    \   for i = 1, n - 1 do\n        res[i] = xs[i] * (n - i)\n    end\n    return\
    \ res\nend", "    local r = {}\n    for i = 1, #xs do\n        table.insert(r,\
    \ xs[i] * i)\n    end\n    return r\nend", "  local ys = {}\n  for i = 2, #xs\
    \ do\n    ys[i - 1] = xs[i] * (i - 1)\n  end\n  return ys\nend", "    local n\
    \ = #xs - 1\n    local ys = {}\n    for i = n, 1, -1 do\n        ys[i] = i * xs[i\
    \ + 1]\n    end\n    return ys\nend", "  local ys = {}\n  for i = 1, #xs - 1 do\n\
    \    ys[i] = xs[i] * i\n  end\n  return ys\nend", "  local n = #xs\n  local dxs\
    \ = {}\n  for i = 1, n - 1 do\n    dxs[i] = xs[i] * (n - i)\n  end\n  return dxs\n\
    end", "\tlocal ret = {}\n\tfor i = 1, #xs - 1 do\n\t\ttable.insert(ret, xs[i]\
    \ * i)\n\tend\n\treturn ret\nend", "    if (xs == nil) then\n        error(\"\
    Argument of derivative() is nil\")\n    end\n    if (#xs == 0) then\n        return\
    \ {}\n    end\n    local result = {}\n    for i=2,#xs do\n        result[i-1]\
    \ = xs[i] * (i-1)\n    end\n    return result\nend", "  local res = {}\n  for\
    \ i, v in ipairs(xs) do\n    table.insert(res, (i - 1) * v)\n  end\n  table.remove(res,\
    \ 1)\n  return res\nend", "    local new_xs = {}\n    for i = 2, #xs do\n    \
    \    table.insert(new_xs, (i - 1) * xs[i])\n    end\n    return new_xs\nend",
  "    local ys = {}\n    for i = 1, #xs - 1 do\n        table.insert(ys, (i + 1)\
    \ * xs[i + 1])\n    end\n    return ys\nend", "    if #xs < 2 then\n        return\
    \ xs\n    end\n    local ys = {}\n    for i = 2, #xs do\n        ys[i - 1] = xs[i]\
    \ * (i - 1)\n    end\n    return ys\nend", "  local ret = {}\n  local n = #xs\n\
    \  if n == 0 then\n    return ret\n  end\n  for i = 2, n do\n    ret[i - 1] =\
    \ xs[i] * (i - 1)\n  end\n  return ret\nend", "  local ys = {}\n  for i = 2, #xs\
    \ do\n    ys[i - 1] = xs[i] * (i - 1)\n  end\n  return ys\nend", "  local result\
    \ = {}\n  local len = #xs\n  for i = 1, len - 1 do\n    result[i] = xs[i] * (len\
    \ - i)\n  end\n  return result\nend", "    local result = {}\n    for i = 2, #xs\
    \ do\n        table.insert(result, xs[i] * (i - 1))\n    end\n    return result\n\
    end", "    local function drop_first(xs)\n        local c = 0\n        local function\
    \ gen()\n            c = c + 1\n            if c == 1 then\n                return\
    \ nil\n            else\n                return xs[c - 1]\n            end\n \
    \       end\n        return gen\n    end\n    local a = {}\n    local s = 0\n\
    \    for x in drop_first(xs) do\n        s = s + 1\n        a[s] = s * x\n   \
    \ end\n    return a\nend", "    assert(#xs > 0)\n    local res = {}\n    for i\
    \ = 2, #xs do\n        res[i - 1] = (i - 1) * xs[i]\n    end\n    return res\n\
    end", "    local sz = #xs\n    if sz <= 1 then\n        return {}\n    end\n \
    \   local r = {}\n    for i = 1, sz - 1 do\n        r[i] = xs[i + 1] * i\n   \
    \ end\n    return r\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
