name: HumanEval_7_filter_by_substring
language: lua
prompt: "-- Filter an input list of strings only for ones that contain given substring\n\
  -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd',\
  \ 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
  \ substring)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
  \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
  \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
  \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'},\
  \ 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
  \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local ret = {}\n    for _, s in ipairs(strings) do\n        if\
    \ string.find(s, substring) then\n            table.insert(ret, s)\n        end\n\
    \    end\n    return ret\nend", "    local matches = {}\n    for i,str in ipairs(strings)\
    \ do\n        if str:find(substring) then\n            table.insert(matches, str)\n\
    \        end\n    end\n    return matches\nend", "    local result = {}\n    for\
    \ _, string in ipairs(strings) do\n        if string.find(string, substring) then\n\
    \            table.insert(result, string)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for k, s in pairs(strings) do\n        if s:find(substring)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "  local results = {}\n  for _, v in ipairs(strings) do\n    if\
    \ string.find(v, substring) then\n      table.insert(results, v)\n    end\n  end\n\
    \  return results\nend", "  local filtered = {}\n  for _, str in ipairs(strings)\
    \ do\n    if string.find(str, substring) then\n      table.insert(filtered, str)\n\
    \    end\n  end\n  return filtered\nend", "    local filtered = {}\n    for i,\
    \ s in ipairs(strings) do\n        if string.find(s, substring) then\n       \
    \     table.insert(filtered, s)\n        end\n    end\n    return filtered\nend",
  "  local result = {}\n  for _, str in ipairs(strings) do\n    if str:find(substring)\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend",
  "    local ret = {}\n    for _, string in ipairs(strings) do\n        if string.find(string,\
    \ substring) then\n            table.insert(ret, string)\n        end\n    end\n\
    \    return ret\nend", "\tlocal ret = {}\n\tfor _, str in ipairs(strings) do\n\
    \t\tif string.find(str, substring) then\n\t\t\ttable.insert(ret, str)\n\t\tend\n\
    \tend\n\treturn ret\nend", "  if string.len(substring) == 0 then\n    return strings\n\
    \  end\n  local res = {}\n  for _, str in ipairs(strings) do\n    if string.find(str,\
    \ substring) then\n      table.insert(res, str)\n    end\n  end\n  return res\n\
    end", "    local ret = {}\n    for _, str in ipairs(strings) do\n        if str:find(substring)\
    \ then\n            table.insert(ret, str)\n        end\n    end\n    return ret\n\
    end", "\tlocal to_return = {}\n\tfor _, value in ipairs(strings) do\n\t\tif string.find(value,\
    \ substring) then\n\t\t\ttable.insert(to_return, value)\n\t\tend\n\tend\n\treturn\
    \ to_return\nend", "  local filtered = {}\n  for _, str in ipairs(strings) do\n\
    \    if string.find(str, substring) then\n      table.insert(filtered, str)\n\
    \    end\n  end\n  return filtered\nend", "  local new_strings = {}\n  for i,\
    \ string in ipairs(strings) do\n    if string:find(substring) then\n      table.insert(new_strings,\
    \ string)\n    end\n  end\n  return new_strings\nend", "\tlocal result = {}\n\t\
    for i, str in ipairs(strings) do\n\t\tif str:find(substring) then\n\t\t\ttable.insert(result,\
    \ str)\n\t\tend\n\tend\n\treturn result\nend", "    local res = {}\n    for i,\
    \ s in ipairs(strings) do\n        if s:find(substring) then\n            table.insert(res,\
    \ s)\n        end\n    end\n    return res\nend", "  local result = {}\n  for\
    \ _, str in ipairs(strings) do\n    if string.find(str, substring) then\n    \
    \  table.insert(result, str)\n    end\n  end\n  return result\nend", "  local\
    \ result = {}\n  for _, str in ipairs(strings) do\n    if str:find(substring)\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend",
  "  return tbl_filter(strings, function(s) return s:find(substring) end)\nend", " \
    \   local result = {}\n    for _, s in ipairs(strings) do\n        if string.find(s,\
    \ substring) then\n            table.insert(result, s)\n        end\n    end\n\
    \    return result\nend", "  if type(strings) ~= 'table' then\n    return {}\n\
    \  end\n  local res = {}\n  for _, s in ipairs(strings) do\n    if string.find(s,\
    \ substring) then\n      table.insert(res, s)\n    end\n  end\n  return res\n\
    end", "    local result = {}\n    for _, string in ipairs(strings) do\n      \
    \  if string:find(substring) then\n            table.insert(result, string)\n\
    \        end\n    end\n    return result\nend", "  local result = {}\n  for _,\
    \ s in ipairs(strings) do\n    if s:find(substring) then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "    local result = {}\n    for _,\
    \ word in ipairs(strings) do\n        if string.find(word, substring) then\n \
    \           table.insert(result, word)\n        end\n    end\n    return result\n\
    end", "    if #strings == 0 then\n        return {}\n    end\n    local ret =\
    \ {}\n    for _, value in ipairs(strings) do\n        if (value:find(substring)\
    \ ~= nil) then\n            table.insert(ret, value)\n        end\n    end\n \
    \   return ret\nend", "    local filtered = {}\n    for _, v in ipairs(strings)\
    \ do\n        if v:find(substring) then\n            table.insert(filtered, v)\n\
    \        end\n    end\n    return filtered\nend", "  local substring_lower = substring:lower()\n\
    \  local result = {}\n  for _, str in ipairs(strings) do\n    if str:lower():find(substring_lower)\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend",
  "  local result = {}\n  for _, str in ipairs(strings) do\n    if str:find(substring)\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend",
  "  local results = {}\n  for i, s in ipairs(strings) do\n    if string.find(s, substring)\
    \ then\n      table.insert(results, s)\n    end\n  end\n  return results\nend",
  "  local filtered = {}\n  for i, string in ipairs(strings) do\n    if string.find(string,\
    \ substring) then\n      table.insert(filtered, string)\n    end\n  end\n  return\
    \ filtered\nend", "  local result = {}\n  for _, s in ipairs(strings) do\n   \
    \ if (vim.fn.match(s, substring) > 0) then\n      table.insert(result, s)\n  \
    \  end\n  end\n  return result\nend", "  local result = {}\n  for _, value in\
    \ ipairs(strings) do\n    if string.find(value, substring) then\n      table.insert(result,\
    \ value)\n    end\n  end\n  return result\nend", "    local res = {}\n    for\
    \ _, string in ipairs(strings) do\n        if string.find(string, substring) then\n\
    \            table.insert(res, string)\n        end\n    end\n    return res\n\
    end", "  local result = {}\n  for _, value in ipairs(strings) do\n    if vim.fn.stridx(value,\
    \ substring) ~= -1 then\n      table.insert(result, value)\n    end\n  end\n \
    \ return result\nend", "    local filtered = {}\n    for _, s in ipairs(strings)\
    \ do\n        if string.find(s, substring) then\n            table.insert(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend", "  local result = {}\n\
    \  for _, string in ipairs(strings) do\n    if string.find(string, substring)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end", "  local substrings = {}\n  for _, line in ipairs(strings) do\n    if string.find(line,\
    \ substring) then\n      table.insert(substrings, line)\n    end\n  end\n  return\
    \ substrings\nend", "\tlocal filtered = {}\n\tfor _,v in ipairs(strings) do\n\t\
    \tif v:find(substring) then\n\t\t\ttable.insert(filtered, v)\n\t\tend\n\tend\n\
    \treturn filtered\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if string.find(str, substring) then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "  local result = {}\n\
    \  for _, value in ipairs(strings) do\n    if value:find(substring) then\n   \
    \   table.insert(result, value)\n    end\n  end\n  return result\nend", "  local\
    \ res = {}\n  for _, s in ipairs(strings) do\n    if string.find(s, substring)\
    \ then\n      table.insert(res, s)\n    end\n  end\n  return res\nend", "  local\
    \ filtered = {}\n  for _, v in ipairs(strings) do\n    if string.find(v, substring)\
    \ then\n      table.insert(filtered, v)\n    end\n  end\n  return filtered\nend",
  "    --[[\n        Args:\n            strings (array): Array of strings\n      \
    \      substring (string): Substring\n        Returns:\n            Array of strings\n\
    \    ]]--\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if string.find(str, substring) then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend", "  local new_strings = {}\n  for\
    \ _, cur_string in ipairs(strings) do\n    if string.find(cur_string, substring)\
    \ then\n      table.insert(new_strings, cur_string)\n    end\n  end\n  return\
    \ new_strings\nend", "  local res = {}\n  for _, v in ipairs(strings) do\n   \
    \ if v:find(substring) then\n      table.insert(res, v)\n    end\n  end\n  return\
    \ res\nend", "  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ str:find(substring) then\n      table.insert(result, str)\n    end\n  end\n\
    \  return result\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:find(substring) then\n            table.insert(result, s)\n\
    \        end\n    end\n    return result\nend", "  local result = {}\n  for _,\
    \ str in ipairs(strings) do\n    if string.find(str, substring) then\n      table.insert(result,\
    \ str)\n    end\n  end\n  return result\nend", "    if type(strings) ~= 'table'\
    \ then\n        return {}\n    end\n    return f.reduce(function(acc, elem)\n\
    \        if type(elem) == 'string' and elem:find(substring) then\n           \
    \ table.insert(acc, elem)\n        end\n        return acc\n    end, {}, strings)\n\
    end", "    local ret = {}\n    for _, s in ipairs(strings) do\n        if s:find(substring)\
    \ then\n            table.insert(ret, s)\n        end\n    end\n    return ret\n\
    end", "    local res = {}\n    for _, s in ipairs(strings) do\n        if s:find(substring)\
    \ then\n            table.insert(res, s)\n        end\n    end\n    return res\n\
    end", "    local result = {}\n    for _, v in ipairs(strings) do\n        if v:match(substring)\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "    return filter(has_substring(substring), strings)\nend", " \
    \ local result = {}\n  for _, s in ipairs(strings) do\n    if string.find(s, substring)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend",
  "    return filter(strings, function(string)\n        return string.find(string,\
    \ substring) ~= nil\n    end)\nend", "    local res = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:find(substring) then\n            table.insert(res, s)\n  \
    \      end\n    end\n    return res\nend", "    local res = {}\n    for _, str\
    \ in ipairs(strings) do\n        if string.find(str, substring) then\n       \
    \     table.insert(res, str)\n        end\n    end\n    return res\nend", "\t\
    local strings_filtered = {}\n\tfor _, string in ipairs(strings) do\n\t\tif string:find(substring)\
    \ then\n\t\t\ttable.insert(strings_filtered, string)\n\t\tend\n\tend\n\treturn\
    \ strings_filtered\nend", "    local ret = {}\n    for _, s in ipairs(strings)\
    \ do\n        if string.find(s, substring) then\n            table.insert(ret,\
    \ s)\n        end\n    end\n    return ret\nend", "    local filtered = {}\n \
    \   for _, str in ipairs(strings) do\n        if string.find(str, substring) then\n\
    \            table.insert(filtered, str)\n        end\n    end\n    return filtered\n\
    end", "  return filter(\n    function(s)\n      return string.find(s, substring)\
    \ ~= nil\n    end,\n    strings\n  )\nend", "    -- Filter only those strings\
    \ that contain given substring\n    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if string.find(str, substring) then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "  local result = {}\n\
    \  for _, str in ipairs(strings) do\n    if (string.find(str, substring)) then\n\
    \      table.insert(result, str)\n    end\n  end\n  return result\nend", "   \
    \ local result = {}\n    for _, str in ipairs(strings) do\n        if str:match(substring)\
    \ then\n            table.insert(result, str)\n        end\n    end\n    return\
    \ result\nend", "    local filtered = {}\n    for i = 1, #strings do\n       \
    \ if string.find(strings[i], substring) then\n            table.insert(filtered,\
    \ strings[i])\n        end\n    end\n    return filtered\nend", "    local result\
    \ = {}\n    for _, s in ipairs(strings) do\n        if s:find(substring) then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "  local filtered = {}\n  for i, s in ipairs(strings) do\n    if string.find(s,\
    \ substring) then\n      table.insert(filtered, s)\n    end\n  end\n  return filtered\n\
    end", "    return f.filter(function(s) return string.find(s, substring) end, strings)\n\
    end", "    local filtered = {}\n    for _, str in ipairs(strings) do\n       \
    \ if str:find(substring) then\n            table.insert(filtered, str)\n     \
    \   end\n    end\n    return filtered\nend", "  local result = {}\n  local count\
    \ = 0\n  for _, s in ipairs(strings) do\n    if s:find(substring) then\n     \
    \ count = count + 1\n      result[count] = s\n    end\n  end\n  return result\n\
    end", "  return filter(function(str) return str:match(substring) end, strings)\n\
    end", "  local ret = {}\n  for _, str in ipairs(strings) do\n    if string.find(str,\
    \ substring) then\n      table.insert(ret, str)\n    end\n  end\n  return ret\n\
    end", "  local result = {}\n  for i, s in ipairs(strings) do\n    if string.find(s,\
    \ substring) then\n      table.insert(result, s)\n    end\n  end\n  return result\n\
    end", "    local list = {}\n    for _, s in ipairs(strings) do\n        if s:find(substring)\
    \ then\n            table.insert(list, s)\n        end\n    end\n    return list\n\
    end", "  local result = {}\n  for _, string in ipairs(strings) do\n    if string:find(substring)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if string.find(s,\
    \ substring) then\n            table.insert(result, s)\n        end\n    end\n\
    \    return result\nend", "  local out = {}\n  for _, s in ipairs(strings) do\n\
    \    if string.find(s, substring) then\n      table.insert(out, s)\n    end\n\
    \  end\n  return out\nend", "    -- >>> local strings = {\"abc\", \"bacd\", \"\
    cde\", \"array\"}\n    -- >>> local substring = \"a\"\n    -- >>> filter(function(s)\
    \ return string.find(s, substring) end, strings)\n    -- { \"abc\", \"bacd\",\
    \ \"array\" }\n    return filter(function(s) return string.find(s, substring)\
    \ end, strings)\nend", "\treturn util.filter(strings, function(str)\n\t\treturn\
    \ str.find(str, substring) ~= nil\n\tend)\nend", "  local filtered = {}\n  for\
    \ i, s in ipairs(strings) do\n    if not vim.tbl_isempty(vim.tbl_filter(function(c)\
    \ return vim.str_byte(c) == vim.str_byte(substring) end, vim.fn.split(s, '.')))\
    \ then\n      table.insert(filtered, s)\n    end\n  end\n  return filtered\nend",
  "    local result = {}\n    for i, string in ipairs(strings) do\n        if string.find(string,\
    \ substring) then\n            table.insert(result, string)\n        end\n   \
    \ end\n    return result\nend", "    local result = {}\n    for _,str in ipairs(strings)\
    \ do\n        if str:find(substring) then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ _, v in ipairs(strings) do\n        if v:match(substring) then\n           \
    \ table.insert(result, v)\n        end\n    end\n    return result\nend", "  \
    \  local filtered = {}\n    for _, str in ipairs(strings) do\n        if string.find(str,\
    \ substring) then\n            table.insert(filtered, str)\n        end\n    end\n\
    \    return filtered\nend", "    local out = {}\n    for _, str in ipairs(strings)\
    \ do\n        if string.find(str, substring) then\n            table.insert(out,\
    \ str)\n        end\n    end\n    return out\nend", "    local found_strings =\
    \ {}\n    for _, string in ipairs(strings) do\n        if string:find(substring)\
    \ then\n            table.insert(found_strings, string)\n        end\n    end\n\
    \    return found_strings\nend", "  local pattern = string.format('%s.*', substring)\n\
    \  local filtered = {}\n  for _, string in ipairs(strings) do\n    if string:match(pattern)\
    \ then\n      table.insert(filtered, string)\n    end\n  end\n  return filtered\n\
    end", "    return lume.filter(strings, function(s) return lume.find(s, substring)\
    \ end)\nend", "    local filtered = {}\n    for _, string in ipairs(strings) do\n\
    \        if string:find(substring) then\n            table.insert(filtered, string)\n\
    \        end\n    end\n    return filtered\nend", "    local result = {}\n   \
    \ for _, str in ipairs(strings) do\n        if string.find(str, substring) then\n\
    \            table.insert(result, str)\n        end\n    end\n    return result\n\
    end", "    local filtered = {}\n    for _,string in ipairs(strings) do\n     \
    \   if string:find(substring) then\n            table.insert(filtered, string)\n\
    \        end\n    end\n    return filtered\nend", "    local filtered = {}\n \
    \   for i, string in ipairs(strings) do\n        if string:find(substring) then\n\
    \            table.insert(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend", "\tlocal t = {}\n\tlocal idx = 1\n\tfor _, s in ipairs(strings)\
    \ do\n\t\tif s:find(substring) then\n\t\t\tt[idx] = s\n\t\t\tidx = idx + 1\n\t\
    \tend\n\tend\n\treturn t\nend", "  return filter(strings, function(word)\n   \
    \ return (string.find(word, substring) ~= nil)\n  end)\nend", "    local filtered\
    \ = {}\n    for _, str in ipairs(strings) do\n        if str:find(substring) then\n\
    \            table.insert(filtered, str)\n        end\n    end\n    return filtered\n\
    end", "  local out = {}\n  for _, v in ipairs(strings) do\n    if string.find(v,\
    \ substring) then\n      table.insert(out, v)\n    end\n  end\n  return out\n\
    end", "    local filtered = {}\n    for _,s in ipairs(strings) do\n        if\
    \ s:find(substring) then\n            table.insert(filtered, s)\n        end\n\
    \    end\n    return filtered\nend", "  local result = {}\n  for i, v in ipairs(strings)\
    \ do\n    if string.find(v, substring) then\n      table.insert(result, v)\n \
    \   end\n  end\n  return result\nend", "    local output = {}\n    for _, str\
    \ in ipairs(strings) do\n        if str:find(substring) then\n            table.insert(output,\
    \ str)\n        end\n    end\n    return output\nend", "  local new_strings =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string:find(substring) then\n\
    \      table.insert(new_strings, string)\n    end\n  end\n  return new_strings\n\
    end", "\tlocal result = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:find(substring)\
    \ then\n\t\t\ttable.insert(result, s)\n\t\tend\n\tend\n\treturn result\nend",
  "    local result = {}\n    for _, v in ipairs(strings) do\n        if v:find(substring)\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "    local filtered = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string.find(string, substring) then\n            table.insert(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "    local function\
    \ has_substring(str)\n        return str:find(substring) ~= nil\n    end\n   \
    \ return List.filter(strings, has_substring)\nend", "    local res = {}\n    for\
    \ _, s in ipairs(strings) do\n        if (string.find(s, substring) ~= nil) then\n\
    \            table.insert(res, s)\n        end\n    end\n    return res\nend",
  "  if substring == '' then\n    return strings\n  end\n  local result = {}\n  for\
    \ _, str in ipairs(strings) do\n    if string.find(str, substring) then\n    \
    \  table.insert(result, str)\n    end\n  end\n  return result\nend", "  local\
    \ filtered = {}\n  local contains = function(s) return string.find(s, substring)\
    \ ~= nil end\n  for _, s in ipairs(strings) do\n    if contains(s) then\n    \
    \  table.insert(filtered, s)\n    end\n  end\n  return filtered\nend", "  return\
    \ vim.tbl_filter(strings, function(string)\n    return string:find(substring)\n\
    \  end)\nend", "    local filtered = {}\n    for _, value in ipairs(strings) do\n\
    \        if string.find(value, substring) then\n            table.insert(filtered,\
    \ value)\n        end\n    end\n    return filtered\nend", "\treturn vim.tbl_filter(function(s)\
    \ return string.find(s, substring) end, strings)\nend", "  local substring_length\
    \ = #substring\n  local function iter(acc, str)\n    local found_index = str:find(substring,\
    \ 1, true)\n    if found_index and found_index <= substring_length then\n    \
    \  table.insert(acc, str)\n    end\n    return acc\n  end\n  return table.reduce(strings,\
    \ iter, {})\nend", "    return filter(strings, function(s) return s:find(substring)\
    \ end)\nend", "  local result = {}\n  for _, value in ipairs(strings) do\n   \
    \ if value:match(substring) then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend", "  local strings_filtered = {}\n  for i, s in ipairs(strings)\
    \ do\n    if string.find(s, substring) then\n      table.insert(strings_filtered,\
    \ s)\n    end\n  end\n  return strings_filtered\nend", "    local function match(s)\n\
    \        if s == nil then return nil end\n        return string.find(s, substring)\
    \ ~= nil\n    end\n    return filter(strings, match)\nend", "  local result =\
    \ {}\n  for _, item in ipairs(strings) do\n    if item:find(substring) then\n\
    \      table.insert(result, item)\n    end\n  end\n  return result\nend", "  local\
    \ rv = {}\n  for i,s in ipairs(strings) do\n    if s:find(substring) then\n  \
    \    rv[#rv+1] = s\n    end\n  end\n  return rv\nend", "  local res = {}\n  for\
    \ _, x in ipairs(strings) do\n    if string.find(x, substring) then\n      table.insert(res,\
    \ x)\n    end\n  end\n  return res\nend", "\treturn util.filter(function(val)\
    \ return string.find(val, substring) end, strings)\nend", "    local res = {}\n\
    \    for _, s in ipairs(strings) do\n        if string.find(s, substring) then\n\
    \            table.insert(res, s)\n        end\n    end\n    return res\nend",
  "\tlocal filtered = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:find(substring)\
    \ then\n\t\t\ttable.insert(filtered, s)\n\t\tend\n\tend\n\treturn filtered\nend",
  "    local filtered = {}\n    for _, v in ipairs(strings) do\n        if string.find(v,\
    \ substring) then\n            table.insert(filtered, v)\n        end\n    end\n\
    \    return filtered\nend", "    local res = {}\n    for i, v in ipairs(strings)\
    \ do\n        if v:find(substring) then\n            table.insert(res, v)\n  \
    \      end\n    end\n    return res\nend", "    local t = {}\n    for _, str in\
    \ ipairs(strings) do\n        if string.find(str, substring) then\n          \
    \  table.insert(t, str)\n        end\n    end\n    return t\nend", "  local result\
    \ = {}\n  for _, s in ipairs(strings) do\n    if string.find(s, substring) then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend", "    local\
    \ results = {}\n    for i, v in ipairs(strings) do\n        if string.find(v,\
    \ substring) then\n            table.insert(results, v)\n        end\n    end\n\
    \    return results\nend", "    local res = {}\n    for i = 1, #strings do\n \
    \       if string.find(strings[i], substring) then\n            table.insert(res,\
    \ strings[i])\n        end\n    end\n    return res\nend", "  local ret = {}\n\
    \  if #strings == 0 then\n    return ret\n  end\n  for i = 1, #strings do\n  \
    \  if strings[i]:match(substring) then\n      ret[#ret + 1] = strings[i]\n   \
    \ end\n  end\n  return ret\nend", "  local ret = {}\n  if type(strings) == 'table'\
    \ then\n    for k, v in pairs(strings) do\n      if string.find(v, substring)\
    \ then\n        table.insert(ret, v)\n      end\n    end\n  end\n  return ret\n\
    end", "  local result = {}\n  for _, v in ipairs(strings) do\n    if v:find(substring)\
    \ then\n      table.insert(result, v)\n    end\n  end\n  return result\nend",
  "    local filtered = {}\n    for i = 1, #strings do\n        if strings[i]:match(substring)\
    \ then\n            table.insert(filtered, strings[i])\n        end\n    end\n\
    \    return filtered\nend", "  local ret = {}\n  for _, str in ipairs(strings)\
    \ do\n    if string.find(str, substring) then\n      table.insert(ret, str)\n\
    \    end\n  end\n  return ret\nend", "  return vim.tbl_filter(function(x) return\
    \ string.find(x, substring) end, strings)\nend", "  local filtered = {}\n  for\
    \ _,str in ipairs(strings) do\n    if string.find(str, substring) then\n     \
    \ table.insert(filtered, str)\n    end\n  end\n  return filtered\nend", "  local\
    \ res = {}\n  for _, s in ipairs(strings) do\n    if s:find(substring) then\n\
    \      table.insert(res, s)\n    end\n  end\n  return res\nend", "    local res\
    \ = {}\n    for _, s in ipairs(strings) do\n        if s:find(substring) then\n\
    \            table.insert(res, s)\n        end\n    end\n    return res\nend",
  "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.find(string,\
    \ substring) then\n            table.insert(result, string)\n        end\n   \
    \ end\n    return result\nend", "  local result = {}\n  for _, str in ipairs(strings)\
    \ do\n    if string.find(str, substring) then\n      table.insert(result, str)\n\
    \    end\n  end\n  return result\nend", "  local res = {}\n  for i, s in ipairs(strings)\
    \ do\n    if string.find(s, substring) then\n      table.insert(res, s)\n    end\n\
    \  end\n  return res\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if string.find(s, substring) then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "  local filtered = {}\n\
    \  for i, str in ipairs(strings) do\n    if string.find(str, substring) then\n\
    \      table.insert(filtered, str)\n    end\n  end\n  return filtered\nend", " \
    \ local result = {}\n  for _, s in ipairs(strings) do\n    if s:find(substring)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend",
  "  local r = {}\n  for _, s in ipairs(strings) do\n    if string.find(s, substring)\
    \ then\n      table.insert(r, s)\n    end\n  end\n  return r\nend", "  local new_strings\
    \ = {}\n  for _, str in ipairs(strings) do\n    if string.find(str, substring)\
    \ then\n      table.insert(new_strings, str)\n    end\n  end\n  return new_strings\n\
    end", "  local result = {}\n  for _, word in ipairs(strings) do\n    if vim.startswith(word,\
    \ substring) then\n      table.insert(result, word)\n    end\n  end\n  return\
    \ result\nend", "    local lut = {}\n    for _, str in ipairs(strings) do\n  \
    \      if str:find(substring) then\n            table.insert(lut, str)\n     \
    \   end\n    end\n    return lut\nend", "  local filtered = {}\n  for _, string\
    \ in ipairs(strings) do\n    if string:find(substring) then\n      table.insert(filtered,\
    \ string)\n    end\n  end\n  return filtered\nend", "  local retval = {}\n  for\
    \ i, v in ipairs(strings) do\n    if string.find(v, substring) then\n      table.insert(retval,\
    \ v)\n    end\n  end\n  return retval\nend", "    return filter(strings, function(s)\
    \ return s:find(substring) end)\nend", "    local out = {}\n    for _, v in ipairs(strings)\
    \ do\n        if string.find(v, substring) then\n            table.insert(out,\
    \ v)\n        end\n    end\n    return out\nend", "    return vim.tbl_filter(function(element)\n\
    \                              return string.find(element, substring) ~= nil\n\
    \                          end,\n                          strings)\nend", "\t\
    local res = {}\n\tfor _, v in ipairs(strings) do\n\t\tif string.find(v, substring)\
    \ then\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\treturn res\nend", "    local\
    \ result = {}\n    for i, v in ipairs(strings) do\n        if string.find(v, substring)\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "  local matches = {}\n  for i, str in ipairs(strings) do\n  \
    \  if string.find(str, substring) then\n      table.insert(matches, str)\n   \
    \ end\n  end\n  return matches\nend", "  return lc.filter(strings, function(s)\
    \ return lc.find(s, substring) end)\nend", "  local filtered = {}\n  for _, name\
    \ in ipairs(strings) do\n    if name:find(substring) then\n      table.insert(filtered,\
    \ name)\n    end\n  end\n  return filtered\nend", "  local function contains_substring(s)\n\
    \    return string.find(s, substring) ~= nil\n  end\n  return vim.tbl_filter(contains_substring,\
    \ strings)\nend", "  local filtered = {}\n  for _, s in ipairs(strings) do\n \
    \   if s:find(substring) then\n      table.insert(filtered, s)\n    end\n  end\n\
    \  return filtered\nend", "  local function filter_func(str)\n    if (str:find(substring)\
    \ ~= nil) then\n      return true\n    else\n      return false\n    end\n  end\n\
    \  return vim.tbl_filter(filter_func, strings)\nend", "  return filter(strings,\
    \ lambda 'x', find(arg1, substring, 1, true))\nend", "  local result = {}\n  for\
    \ _, word in ipairs(strings) do\n    if string.find(word, substring) then\n  \
    \    table.insert(result, word)\n    end\n  end\n  return result\nend", "    local\
    \ result = {}\n    local substring_len = #substring\n    for _, s in ipairs(strings)\
    \ do\n        local i = 1\n        repeat\n            local s_len = #s\n    \
    \        local idx = string.find(s, substring, i, true)\n            if idx then\n\
    \                if idx == 1 or s:sub(idx - 1, idx - 1) == '.' then\n        \
    \            if idx + substring_len == s_len + 1 or s:sub(idx + substring_len,\
    \ idx + substring_len) == '.' then\n                        result[#result + 1]\
    \ = s\n                        break\n                    end\n              \
    \  end\n                i = idx + substring_len\n            end\n        until\
    \ not idx\n    end\n    return result\nend", "    return filter(strings, function(string)\n\
    \        return string.find(string, substring) ~= nil\n    end)\nend", "    local\
    \ result = {}\n    for _,s in ipairs(strings) do\n        if string.find(s, substring)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "\tlocal result = {}\n\tfor _, string in ipairs(strings) do\n\t\
    \tif string.find(string, substring) then\n\t\t\ttable.insert(result, string)\n\
    \t\tend\n\tend\n\treturn result\nend", "  local tab = {}\n  for _, s in ipairs(strings)\
    \ do\n    if vim.fn.match(s, '.*'..substring..'.*') ~= -1 then\n      table.insert(tab,\
    \ s)\n    end\n  end\n  return tab\nend", "  local filtered = {}\n  for _,string\
    \ in ipairs(strings) do\n    if string:find(substring) then\n      table.insert(filtered,\
    \ string)\n    end\n  end\n  return filtered\nend", "  local strings_filtered\
    \ = {}\n  for _,str in ipairs(strings) do\n    if str:find(substring) then\n \
    \     table.insert(strings_filtered, str)\n    end\n  end\n  return strings_filtered\n\
    end", "\tif not strings then return nil end\n\tif not substring then return nil\
    \ end\n\tlocal i = 1\n\twhile i <= #strings do\n\t\tif not string.find(strings[i],\
    \ substring) then\n\t\t\ttable.remove(strings, i)\n\t\telse\n\t\t\ti = i + 1\n\
    \t\tend\n\tend\n\treturn strings\nend", "  local substrings = {}\n  for _, value\
    \ in ipairs(strings) do\n    if string.find(value, substring) then\n      table.insert(substrings,\
    \ value)\n    end\n  end\n  return substrings\nend", "  local filtered = {}\n\
    \  for _, str in ipairs(strings) do\n    if is_substring(str, substring) then\n\
    \      table.insert(filtered, str)\n    end\n  end\n  return filtered\nend", " \
    \   local filtered = {}\n    for _, str in ipairs(strings) do\n        if str:find(substring)\
    \ then\n            table.insert(filtered, str)\n        end\n    end\n    return\
    \ filtered\nend", "    local result = {}\n    for i = 1, #strings do\n       \
    \ if strings[i]:find(substring) then\n            table.insert(result, strings[i])\n\
    \        end\n    end\n    return result\nend", "  local filtered = {}\n  for\
    \ _, s in ipairs(strings) do\n    if string.find(s, substring) then\n      table.insert(filtered,\
    \ s)\n    end\n  end\n  return filtered\nend", "    if #strings == 0 then\n  \
    \      return {}\n    end\n    local filtered = {}\n    for _, word in ipairs(strings)\
    \ do\n        if string.find(word, substring) then\n            table.insert(filtered,\
    \ word)\n        end\n    end\n    return filtered\nend", "  local result = {}\n\
    \  for _, string in ipairs(strings) do\n    if string:find(substring) then\n \
    \     table.insert(result, string)\n    end\n  end\n  return result\nend", " \
    \   local res = {}\n    for _, s in ipairs(strings) do\n        if s:find(substring)\
    \ then\n            table.insert(res, s)\n        end\n    end\n    return res\n\
    end", "  local results = {}\n  for _, s in ipairs(strings) do\n    if s:find(substring)\
    \ then\n      table.insert(results, s)\n    end\n  end\n  return results\nend",
  "  local res = {}\n  for _, str in ipairs(strings) do\n    if str:find(substring)\
    \ then\n      table.insert(res, str)\n    end\n  end\n  return res\nend", "  local\
    \ res = {}\n  for i, v in ipairs(strings) do\n    if string.find(v, substring)\
    \ then\n      table.insert(res, v)\n    end\n  end\n  return res\nend", "    local\
    \ result = {}\n    for i, s in ipairs(strings) do\n        if (string.find(s,\
    \ substring) ~= nil) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "  local subs = {}\n  for _, str in ipairs(strings)\
    \ do\n    if string.find(str, substring) then\n      table.insert(subs, str)\n\
    \    end\n  end\n  return subs\nend", "  local t = {}\n  for _, word in ipairs(strings)\
    \ do\n    if string.find(word, substring) then\n      table.insert(t, word)\n\
    \    end\n  end\n  return t\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:find(substring) then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend", "  return List.filter(is_substring(substring),\
    \ strings)\nend", "    return vim.tbl_filter(function(s) return string.find(s,\
    \ substring) end, strings)\nend", "  local result = {}\n  for i, v in ipairs(strings)\
    \ do\n    if string.find(v, substring) then\n      table.insert(result, v)\n \
    \   end\n  end\n  return result\nend", "\tlocal result = {}\n\tfor _, string in\
    \ ipairs(strings) do\n\t\tif string:find(substring) then\n\t\t\ttable.insert(result,\
    \ string)\n\t\tend\n\tend\n\treturn result\nend", "\tlocal results = {}\n\tfor\
    \ _, string in ipairs(strings) do\n\t\tif string:match(substring) then\n\t\t\t\
    table.insert(results, string)\n\t\tend\n\tend\n\treturn results\nend", "  local\
    \ result = {}\n  for i, string in ipairs(strings) do\n    if string:find(substring)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end", "\treturn tablex.filter(strings, function(s) return not not s:find(substring)\
    \ end)\nend", "  if not strings then return nil end\n  local result = {}\n  for\
    \ _, str in ipairs(strings) do\n    if str:find(substring) then\n      table.insert(result,\
    \ str)\n    end\n  end\n  return result\nend", "  return filter(bind(partial(string.find,\
    \ _, substring), strings))\nend", "  local res = {}\n  for _, str in ipairs(strings)\
    \ do\n    if string.find(str, substring) then\n      table.insert(res, str)\n\
    \    end\n  end\n  return res\nend", "  local result = {}\n  for _, s in ipairs(strings)\
    \ do\n    if string.find(s, substring) then\n      table.insert(result, s)\n \
    \   end\n  end\n  return result\nend", "    local substrings = {}\n    for i,\
    \ str in ipairs(strings) do\n        if has_substring(str, substring) then\n \
    \           table.insert(substrings, str)\n        end\n    end\n    return substrings\n\
    end", "  local ret = {}\n  for _, s in ipairs(strings) do\n    if s:find(substring)\
    \ then\n      table.insert(ret, s)\n    end\n  end\n  return ret\nend", "    local\
    \ result = {}\n    for _, name in ipairs(strings) do\n        if string.find(name,\
    \ substring) then\n            table.insert(result, name)\n        end\n    end\n\
    \    return result\nend", "  return utils.filter(strings, function(s) return string.find(s,\
    \ substring) end)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
