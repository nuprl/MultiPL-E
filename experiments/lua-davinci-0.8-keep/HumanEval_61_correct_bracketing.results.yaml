name: HumanEval_61_correct_bracketing
language: lua
results:
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = Stack()\n    for c in brackets:gmatch(\"\
    .\") do\n        if c == \"(\" then\n            stack:push(c)\n        elseif\
    \ c == \")\" then\n            if stack:empty() then\n                return false\n\
    \            else\n                stack:pop()\n            end\n        end\n\
    \    end\n    return stack:empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2a92nb_6.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp2a92nb_6.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp2a92nb_6.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal stack = luajava.newInstance(\"java.util.Stack\"\
    )\n\tfor i = 1, #brackets do\n\t\tlocal c = brackets:sub(i, i)\n\t\tif c == \"\
    (\" then\n\t\t\tstack:push(c)\n\t\telseif c == \")\" then\n\t\t\tif stack:empty()\
    \ then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tstack:pop()\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn stack:empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4xj5g8ap.lua:12:\
    \ attempt to index a nil value (global 'luajava')\nstack traceback:\n\t/tmp/tmp4xj5g8ap.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp4xj5g8ap.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- TODO: implement this function\n    local\
    \ br = {['('] = ')', [')'] = '('}\n    local stack = Stack()\n    for i = 1, #brackets\
    \ do\n        local ch = brackets:sub(i, i)\n        if ch == '(' then\n     \
    \       stack:push(ch)\n        elseif ch == ')' then\n            if stack:empty()\
    \ then\n                return false\n            else\n                local\
    \ op = stack:pop()\n                if br[op] ~= ch then\n                   \
    \ return false\n                end\n            end\n        end\n    end\n \
    \   return stack:empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5u2dy96v.lua:14:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp5u2dy96v.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp5u2dy96v.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- count the number of opening and closing\
    \ brackets.\n    local open_brackets = 0\n    local close_brackets = 0\n    for\
    \ i = 1, #brackets do\n        local bracket = brackets:sub(i, i)\n        if\
    \ bracket == \"(\" then\n            open_brackets = open_brackets + 1\n     \
    \   elseif bracket == \")\" then\n            close_brackets = close_brackets\
    \ + 1\n        end\n    end\n    return open_brackets == close_brackets\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpommvu9b0.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpommvu9b0.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local n = #brackets\n    local count = 0\n\
    \    for i = 1, n do\n        local b = brackets:sub(i, i)\n        if b == \"\
    (\" then\n            count = count + 1\n        elseif b == \")\" then\n    \
    \        count = count - 1\n        end\n        if count < 0 then\n         \
    \   return false\n        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open, close = \"(\", \")\"\n  local open_count\
    \ = 0\n  for char in brackets:gmatch(\".\") do\n    if char == open then\n   \
    \   open_count = open_count + 1\n    elseif char == close then\n      open_count\
    \ = open_count - 1\n    end\n    if open_count < 0 then\n      return false\n\
    \    end\n  end\n  return open_count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\t-- check number of opening and closing brackets\n\
    \tlocal n_open = 0\n\tlocal n_close = 0\n\tfor i = 1, brackets:len() do\n\t\t\
    if brackets:sub(i, i) == \"(\" then\n\t\t\tn_open = n_open + 1\n\t\telseif brackets:sub(i,\
    \ i) == \")\" then\n\t\t\tn_close = n_close + 1\n\t\tend\n\tend\n\tif n_open ~=\
    \ n_close then\n\t\treturn false\n\tend\n\t-- check matching\n\tlocal matching\
    \ = 0\n\tfor i = 1, brackets:len() do\n\t\tif brackets:sub(i, i) == \"(\" then\n\
    \t\t\tmatching = matching + 1\n\t\telseif brackets:sub(i, i) == \")\" then\n\t\
    \t\tmatching = matching - 1\n\t\tend\n\t\tif matching < 0 then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets:find(\"%(%)\") then\n        return\
    \ correct_bracketing(brackets:gsub(\"%(%)\", \"\"))\n    else\n        return\
    \ brackets == \"\"\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal unmatched = 0\n\tfor bracket in brackets:gmatch(\"\
    .\") do\n\t\tif bracket == \"(\" then\n\t\t\tunmatched = unmatched + 1\n\t\telseif\
    \ bracket == \")\" then\n\t\t\tunmatched = unmatched - 1\n\t\tend\n\t\tif unmatched\
    \ < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn unmatched == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets:gsubn\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdm5x641h.lua:12: unfinished string nearn"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open = 0\n    for _, ch in utf8.codes(brackets)\
    \ do\n        if utf8.char(ch) == \"(\" then\n            open = open + 1\n  \
    \      elseif utf8.char(ch) == \")\" then\n            open = open - 1\n     \
    \   end\n        if open < 0 then\n            return false\n        end\n   \
    \ end\n    return open == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal stack = Stack:new()\n\tfor c in brackets:gmatch(\"\
    .\") do\n\t\tif c == \"(\" then\n\t\t\tstack:push(c)\n\t\telseif c == \")\" then\n\
    \t\t\tif stack:empty() then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tstack:pop()\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn stack:empty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8erha9ws.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp8erha9ws.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp8erha9ws.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- TO DO\n  local len = #brackets\n  local len_c\
    \ = 0\n  local len_o = 0\n  local flag = true\n  local i = 1\n  while i <= len\
    \ do\n    if brackets:sub(i,i) == \"(\" then\n      len_o = len_o + 1\n    elseif\
    \ brackets:sub(i,i) == \")\" then\n      len_c = len_c + 1\n    end\n    if len_c\
    \ > len_o then\n      flag = false\n      break\n    end\n    i = i + 1\n  end\n\
    \  if len_c ~= len_o then\n    flag = false\n  end\n  return flag\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local balance = 0\n  for c in brackets:gmatch\"\
    .\" do\n    if c == \"(\" then\n      balance = balance + 1\n    elseif c == \"\
    )\" then\n      balance = balance - 1\n    end\n    if balance < 0 then\n    \
    \  return false\n    end\n  end\n  return balance == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for i=1, #brackets do\n \
    \   if brackets:sub(i,i) == \"(\" then\n      count = count + 1\n    elseif brackets:sub(i,i)\
    \ == \")\" then\n      count = count - 1\n    end\n    if count < 0 then\n   \
    \   return false\n    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for c in brackets:gmatch(\"\
    .\") do\n    if c == \"(\" then\n      count = count + 1\n    elseif c == \")\"\
    \ then\n      count = count - 1\n    end\n    if count < 0 then\n      return\
    \ false\n    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal stack = Stack()\n\tfor i = 1, #brackets\
    \ do\n\t\tlocal b = brackets:sub(i, i)\n\t\tif b == \"(\" then\n\t\t\tstack:push(b)\n\
    \t\telseif b == \")\" then\n\t\t\tif stack:empty() then\n\t\t\t\treturn false\n\
    \t\t\telse\n\t\t\t\tstack:pop()\n\t\t\tend\n\t\tend\n\tend\n\treturn stack:empty()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp8jjhcqb.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpp8jjhcqb.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpp8jjhcqb.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  for i = 1, #brackets do\n\
    \    local b = brackets:sub(i, i)\n    if b == \"(\" then\n      table.insert(stack,\
    \ \")\")\n    elseif b == \")\" then\n      if #stack == 0 then\n        return\
    \ false\n      end\n      table.remove(stack)\n    end\n  end\n  return #stack\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal stack = Stack()\n\tfor bracket in brackets:gmatch(\"\
    .\") do\n\t\tif bracket == \"(\" then\n\t\t\tstack:push(bracket)\n\t\telseif bracket\
    \ == \")\" then\n\t\t\tif stack:is_empty() then\n\t\t\t\treturn false\n\t\t\t\
    else\n\t\t\t\tstack:pop()\n\t\t\tend\n\t\tend\n\tend\n\treturn stack:is_empty()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprgq1wdec.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmprgq1wdec.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmprgq1wdec.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local n_open = 0\n  for i=1,#brackets do\n \
    \   local bracket = brackets:sub(i,i)\n    if bracket == \"(\" then\n      n_open\
    \ = n_open + 1\n    elseif bracket == \")\" then\n      n_open = n_open - 1\n\
    \      if n_open < 0 then\n        return false\n      end\n    end\n  end\n \
    \ return n_open == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local bracket_stack = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiw2oubdl.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\t-- YOUR CODE HERE\n\tlocal count = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp24ik4903.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\t-- TODO: implement this function\n\t-- Think\
    \ about the use of a stack\n\treturn false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5864780.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz5864780.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    return brackets:gsub(\"%(%(\", function()\
    \ return \"\" end):gsub(\"%)%)\", function() return \"\" end):gsub(\"%(%)\", function()\
    \ return \"\" end) == \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_0qgjjr2.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_0qgjjr2.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- First check if there are the same number\
    \ of \"(\" and \")\".\n    local num_open = brackets:count(\"%(\")\n    local\
    \ num_close = brackets:count(\"%)\")\n    if num_open ~= num_close then\n    \
    \    return false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplj9cafsb.lua:36: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_count = 0\n  for c in brackets:gmatch(\"\
    .\") do\n    if c == \"(\" then\n      open_count = open_count + 1\n    elseif\
    \ c == \")\" then\n      open_count = open_count - 1\n    end\n    if open_count\
    \ < 0 then\n      return false\n    end\n  end\n  return open_count == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  for i = 1, #brackets do\n\
    \    local s = brackets:sub(i, i)\n    if s == \"(\" then\n      stack[#stack\
    \ + 1] = s\n    elseif s == \")\" then\n      if #stack == 0 then\n        return\
    \ false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- string of \"(\" and \")\"\n    local open_count\
    \ = 0\n    for i = 1, #brackets do\n        if brackets:sub(i, i) == \"(\" then\n\
    \            open_count = open_count + 1\n        elseif brackets:sub(i, i) ==\
    \ \")\" then\n            open_count = open_count - 1\n        end\n        if\
    \ open_count < 0 then\n            return false\n        end\n    end\n    return\
    \ open_count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\treturn brackets:gsub(\"%(%+\",\"\"):gsub(\"\
    %)%-\",\"\") == \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1w8xfa6.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc1w8xfa6.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local balance = 0\n  for bracket in brackets:gmatch(\"\
    %(\") do\n    balance = balance + 1\n  end\n  for bracket in brackets:gmatch(\"\
    %)\") do\n    balance = balance - 1\n  end\n  return balance == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_w1bmbct.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_w1bmbct.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local balance = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"(\" then\n            balance = balance\
    \ + 1\n        elseif brackets:sub(i, i) == \")\" then\n            balance =\
    \ balance - 1\n        end\n        if balance < 0 then\n            return false\n\
    \        end\n    end\n    return balance == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- REPLACE THIS LINE\n    -- return False\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2oacv6a.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpw2oacv6a.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  for i = 1, #brackets do\n\
    \    local bracket = brackets:sub(i, i)\n    if bracket == \"(\" then\n      stack[#stack\
    \ + 1] = bracket\n    elseif bracket == \")\" then\n      if #stack == 0 then\n\
    \        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n\
    \  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal opening = 0\n\tfor b in brackets:gmatch(\"\
    .\") do\n\t\tif b == \"(\" then\n\t\t\topening = opening + 1\n\t\telseif b ==\
    \ \")\" then\n\t\t\topening = opening - 1\n\t\tend\n\t\tif opening < 0 then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn opening == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open = 0\n    for i=1,#brackets do\n\
    \        if brackets:sub(i,i) == \"(\" then\n            open = open + 1\n   \
    \     elseif brackets:sub(i,i) == \")\" then\n            open = open - 1\n  \
    \      end\n        if open < 0 then\n            return false\n        end\n\
    \    end\n    return open == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = Stack()\n    for c in brackets:gmatch(\"\
    .\") do\n        if c == \"(\" then\n            stack:push(\"(\")\n        elseif\
    \ c == \")\" then\n            if stack:empty() then\n                return false\n\
    \            else\n                stack:pop()\n            end\n        end\n\
    \    end\n    return stack:empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4cos3xl_.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp4cos3xl_.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp4cos3xl_.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- implement here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgg5y7pge.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpgg5y7pge.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal bracket_count = 0\n\tlocal correct = true\n\
    \tfor c in brackets:gmatch(\".\") do\n\t\tif c == \"(\" then\n\t\t\tbracket_count\
    \ = bracket_count + 1\n\t\telseif c == \")\" then\n\t\t\tbracket_count = bracket_count\
    \ - 1\n\t\t\tif bracket_count < 0 then\n\t\t\t\tcorrect = false\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\tend\n\tend\n\tif bracket_count ~= 0 then\n\t\tcorrect = false\n\
    \tend\n\treturn correct\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal match = { ['('] = ')' }\n\tlocal stack\
    \ = {}\n\tfor c in brackets:gmatch('.') do\n\t\tif match[c] then\n\t\t\ttable.insert(stack,\
    \ match[c])\n\t\telseif #stack > 0 and c == stack[#stack] then\n\t\t\ttable.remove(stack)\n\
    \t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn #stack == 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- TODO: implement a function that checks if\
    \ brackets are correctly\n  --   bracketed.\n  -- Note:\n  --   You must use a\
    \ stack to implement this function.\n  local stack = Stack:new()\n  for i = 1,\
    \ #brackets do\n    if brackets:sub(i, i) == \"(\" then\n      stack:push(\"(\"\
    )\n    elseif brackets:sub(i, i) == \")\" then\n      if stack:top() == \"(\"\
    \ then\n        stack:pop()\n      else\n        return false\n      end\n   \
    \ end\n  end\n  if stack:top() == nil then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8wi5pep.lua:16:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpo8wi5pep.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpo8wi5pep.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local n = 0\n  for i = 1, #brackets do\n   \
    \ if brackets:sub(i, i) == \"(\" then\n      n = n + 1\n    elseif brackets:sub(i,\
    \ i) == \")\" then\n      n = n - 1\n    end\n    if n < 0 then\n      return\
    \ false\n    end\n  end\n  return n == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local counter = 0\n    for i = 1, #brackets\
    \ do\n        if string.sub(brackets, i, i) == \"(\" then\n            counter\
    \ = counter + 1\n        elseif string.sub(brackets, i, i) == \")\" then\n   \
    \         counter = counter - 1\n        end\n        if counter < 0 then\n  \
    \          return false\n        end\n    end\n    return counter == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local function balanced(brackets, depth)\n\
    \        if #brackets == 0 then\n            return depth == 0\n        elseif\
    \ brackets:sub(1, 1) == \"(\" then\n            return balanced(brackets:sub(2),\
    \ depth + 1)\n        elseif brackets:sub(1, 1) == \")\" then\n            return\
    \ depth > 0 and balanced(brackets:sub(2), depth - 1)\n        else\n         \
    \   return false\n        end\n    end\n    return balanced(brackets, 0)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- iterate over the characters, counting the\
    \ number of \"(\"\n    -- and the number of \")\"\n    local count = 0\n    for\
    \ paren in brackets:gmatch(\".\") do\n        if paren == \"(\" then\n       \
    \     count = count + 1\n        elseif paren == \")\" then\n            count\
    \ = count - 1\n        end\n        -- there are no negative counts that are also\
    \ correct\n        if count < 0 then\n            return false\n        end\n\
    \    end\n    -- the final count must be zero\n    return count == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    count = 0\n    for i = 1, #brackets do\n \
    \       count = count + (brackets:sub(i, i) == \"(\" and 1 or (brackets:sub(i,\
    \ i) == \")\" and -1 or 0))\n        if count < 0 then\n            return false\n\
    \        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local len = string.len(brackets)\n    local\
    \ stack = Stack()\n    for i = 1, len do\n        local symbol = string.sub(brackets,\
    \ i, i)\n        if symbol == \"(\" then\n            stack:push(symbol)\n   \
    \     elseif symbol == \")\" then\n            if stack:is_empty() then\n    \
    \            return false\n            else\n                stack:pop()\n   \
    \         end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphf73j2wh.lua:13:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmphf73j2wh.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmphf73j2wh.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwi5erc__.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpwi5erc__.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- return false if string is empty\n  if brackets\
    \ == '' then\n    return false\n  end\n  -- check if first char is \"(\"\n  local\
    \ is_open = brackets:sub(1,1) == '('\n  -- if so, check if the next character\
    \ is a closing bracket.\n  if is_open then\n    if brackets:sub(2,2) == ')' then\n\
    \      -- if so, remove those two characters from the string and try again\n \
    \     return correct_bracketing(brackets:sub(3))\n    else\n      -- if not, we're\
    \ finished\n      return false\n    end\n  else\n    -- if not, return false\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cevlb57.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5cevlb57.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets == \"\" then\n    return true\n\
    \  elseif brackets:find(\"%(%)\") then\n    return correct_bracketing(brackets:gsub(\"\
    %(%)\", \"\"))\n  elseif brackets:find(\"%)\") then\n    return false\n  else\n\
    \    return correct_bracketing(brackets:sub(2))\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6sr63wgr.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6sr63wgr.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqxerleml.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal brackets_stack = Stack:new()\n\tfor i\
    \ = 1, #brackets do\n\t\tlocal bracket = brackets:sub(i, i)\n\t\tif bracket ==\
    \ \"(\" then\n\t\t\tbrackets_stack:push(bracket)\n\t\telseif bracket == \")\"\
    \ then\n\t\t\tif brackets_stack:is_empty() then\n\t\t\t\treturn false\n\t\t\t\
    else\n\t\t\t\tbrackets_stack:pop()\n\t\t\tend\n\t\tend\n\tend\n\treturn brackets_stack:is_empty()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp584pirr4.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp584pirr4.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp584pirr4.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- TODO: write code here\n    local count\
    \ = 0\n    for i = 1, string.len(brackets) do\n        if string.sub(brackets,\
    \ i, i) == \"(\" then\n            count = count + 1\n        elseif string.sub(brackets,\
    \ i, i) == \")\" then\n            count = count - 1\n        end\n        if\
    \ count < 0 then\n            return false\n        end\n    end\n    if count\
    \ == 0 then\n        return true\n    else\n        return false\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = {}\n    for i = 1, #brackets\
    \ do\n        local bracket = brackets:sub(i, i)\n        if bracket == \"(\"\
    \ then\n            table.insert(stack, bracket)\n        elseif bracket == \"\
    )\" then\n            if #stack == 0 then\n                return false\n    \
    \        else\n                table.remove(stack)\n            end\n        end\n\
    \    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- YOUR CODE HERE\n  return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpldxkzuck.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpldxkzuck.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for b in brackets:gmatch(\"\
    .\") do\n    if b == \"(\" then\n      count = count + 1\n    elseif b == \")\"\
    \ then\n      count = count - 1\n    end\n    if count < 0 then\n      return\
    \ false\n    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal pos, count = 1, 0\n\twhile pos <= #brackets\
    \ do\n\t\tlocal c = brackets:sub(pos, pos)\n\t\tif c == \"(\" then\n\t\t\tcount\
    \ = count + 1\n\t\telseif c == \")\" then\n\t\t\tcount = count - 1\n\t\t\tif count\
    \ < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\tpos = pos + 1\n\tend\n\
    \treturn count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = {}\n    for i = 1, #brackets\
    \ do\n        local char = brackets:sub(i, i)\n        if char == \"(\" then\n\
    \            table.insert(stack, \")\")\n        elseif char == \")\" then\n \
    \           if #stack == 0 then\n                return false\n            end\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for b in brackets:gmatch(\"\
    .\") do\n        if b == \"(\" then\n            count = count + 1\n        elseif\
    \ b == \")\" then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local z = #brackets\n    if z == 0 then\n\
    \        return true\n    elseif z < 2 then\n        return false\n    else\n\
    \        local paren = brackets:sub(1,1)\n        if paren == \"(\" then\n   \
    \         local j = z\n            while brackets:sub(j,j) ~= \")\" do\n     \
    \           j = j - 1\n                if j == 0 then\n                    return\
    \ false\n                end\n            end\n            return correct_bracketing(brackets:sub(2,j-1))\
    \ and correct_bracketing(brackets:sub(j+1))\n        else\n            return\
    \ false\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfjazxbhn.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfjazxbhn.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opens = 0\n  for i = 1, #brackets do\n\
    \    if brackets:sub(i, i) == \"(\" then\n      opens = opens + 1\n    elseif\
    \ brackets:sub(i, i) == \")\" then\n      opens = opens - 1\n    end\n    if opens\
    \ < 0 then\n      return false\n    end\n  end\n  return opens == 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for i = 1, #brackets do\n\
    \    local c = brackets:sub(i, i)\n    if c == \"(\" then\n      count = count\
    \ + 1\n    elseif c == \")\" then\n      count = count - 1\n    end\n    if count\
    \ < 0 then\n      return false\n    end\n  end\n  return count == 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open = 0\n    for i = 1, #brackets do\n\
    \        if brackets:sub(i, i) == \"(\" then\n            open = open + 1\n  \
    \      elseif brackets:sub(i, i) == \")\" then\n            open = open - 1\n\
    \        end\n        if open < 0 then\n            return false\n        end\n\
    \    end\n    return open == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local bracket_stack = {}\n    for i = 1, #brackets\
    \ do\n        local b = brackets:sub(i, i)\n        if b == \"(\" then\n     \
    \       table.insert(bracket_stack, b)\n        elseif b == \")\" then\n     \
    \       if #bracket_stack == 0 then\n                return false\n          \
    \  else\n                table.remove(bracket_stack)\n            end\n      \
    \  end\n    end\n    return #bracket_stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9p9mkgca.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- is the stack empty?\n  if not brackets then\n\
    \    return true\n  end\n  -- check if the first bracket is an opening bracket\n\
    \  if brackets:sub(1,1) == \"(\" then\n    -- search for the matching closing\
    \ bracket\n    local open_brackets = 1\n    for i = 2, #brackets do\n      if\
    \ brackets:sub(i,i) == \"(\" then\n        open_brackets = open_brackets + 1\n\
    \      else\n        open_brackets = open_brackets - 1\n      end\n      if open_brackets\
    \ == 0 then\n        -- check if the bracketing was correct in the remaining brackets\n\
    \        return correct_bracketing(brackets:sub(i+1))\n      end\n    end\n  \
    \  -- if no matching closing bracket was found, then it is not correct\n    return\
    \ false\n  else\n    -- if it is not an opening bracket, then it is a closing\
    \ bracket,\n    -- so it is not correct\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlrt5e7q.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqlrt5e7q.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local brackets_stack = Stack()\n  for i = 1,\
    \ brackets:len() do\n    local bracket = brackets:sub(i, i)\n    if bracket ==\
    \ \"(\" then\n      brackets_stack:push(bracket)\n    elseif bracket == \")\"\
    \ then\n      if brackets_stack:isempty() then\n        return false\n      else\n\
    \        brackets_stack:pop()\n      end\n    end\n  end\n  return brackets_stack:isempty()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5w8zoecu.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp5w8zoecu.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp5w8zoecu.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = {}\n    for i = 1, brackets:len()\
    \ do\n        local ch = brackets:sub(i, i)\n        if ch == \"(\" then\n   \
    \         table.insert(stack, i)\n        elseif ch == \")\" then\n          \
    \  local j = table.remove(stack)\n            if not j then\n                return\
    \ false\n            end\n        end\n    end\n    return #stack == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\t-- if no brackets, return True\n\tif brackets\
    \ == \"\" then\n\t\treturn true\n\t-- else check if string is just \"()\"\n\t\
    elseif brackets == \"()\" then\n\t\treturn true\n\t-- if string starts with \"\
    )\", return False\n\telseif brackets:sub(1,1) == \")\" then\n\t\treturn false\n\
    \t-- if string ends with \"(\", return False\n\telseif brackets:sub(-1,-1) ==\
    \ \"(\" then\n\t\treturn false\n\t-- if string length is not even, return False\n\
    \telseif string.len(brackets) % 2 ~= 0 then\n\t\treturn false\n\t-- else return\
    \ if string is balanced or not\n\telse\n\t\treturn is_bracket_balanced(brackets)\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb0so4bqr.lua:29:\
    \ attempt to call a nil value (global 'is_bracket_balanced')\nstack traceback:\n\
    \t/tmp/tmpb0so4bqr.lua:29: in local 'candidate'\n\t/tmp/tmpb0so4bqr.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal open, close = 0, 0\n\tfor c in brackets:gmatch(\"\
    .\") do\n\t\tif c == \"(\" then\n\t\t\topen = open + 1\n\t\telseif c == \")\"\
    \ then\n\t\t\tclose = close + 1\n\t\t\tif close > open then\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn open == close\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal opened = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7iiktr1n.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local c = 0\n  for char in brackets:gmatch\"\
    .\" do\n    if char == \"(\" then\n      c = c + 1\n    elseif char == \")\" then\n\
    \      c = c - 1\n    end\n    if c < 0 then\n      return false\n    end\n  end\n\
    \  return c == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local brace_stack = {}\n    for char in brackets:gmatch(\"\
    .\") do\n        if char == \"(\" then\n            brace_stack[#brace_stack +\
    \ 1] = char\n        elseif char == \")\" then\n            if #brace_stack ==\
    \ 0 then\n                return false\n            else\n                brace_stack[#brace_stack]\
    \ = nil\n            end\n        end\n    end\n    return #brace_stack == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local n_open = 0\n  for c in brackets:gmatch(\"\
    .\") do\n    if c == \"(\" then\n      n_open = n_open + 1\n    elseif c == \"\
    )\" then\n      n_open = n_open - 1\n    end\n    if n_open < 0 then\n      return\
    \ false\n    end\n  end\n  return n_open == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- TODO: implement this function\n  local stack\
    \ = {}\n  for c in brackets:gmatch(\".\") do\n    if c == \"(\" then\n      table.insert(stack,\
    \ 1, c)\n    elseif c == \")\" then\n      if #stack == 0 then\n        return\
    \ false\n      else\n        table.remove(stack, 1)\n      end\n    end\n  end\n\
    \  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal depth = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgk7pd21u.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal stack = Stack()\n\tfor idx = 1, #brackets\
    \ do\n\t\tlocal current = brackets:sub(idx, idx)\n\t\tif current == \"(\" then\n\
    \t\t\tstack:push(\"(\")\n\t\telseif current == \")\" then\n\t\t\tif stack:isempty()\
    \ then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tstack:pop()\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn stack:isempty()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprjyg1rnk.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmprjyg1rnk.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmprjyg1rnk.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local function iter(brackets, stack)\n   \
    \     if brackets == \"\" then\n            if stack == 0 then\n             \
    \   return true\n            else\n                return false\n            end\n\
    \        else\n            local ch = brackets:sub(1, 1)\n            if ch ==\
    \ \"(\" then\n                return iter(brackets:sub(2), stack + 1)\n      \
    \      elseif ch == \")\" then\n                if stack > 0 then\n          \
    \          return iter(brackets:sub(2), stack - 1)\n                else\n   \
    \                 return false\n                end\n            else\n      \
    \          return iter(brackets:sub(2), stack)\n            end\n        end\n\
    \    end\n    return iter(brackets, 0)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  assert(type(brackets) == \"string\")\n  if brackets\
    \ == \"\" then\n    return true\n  elseif brackets:sub(1,1) == \")\" then\n  \
    \  return false\n  elseif brackets:sub(1,1) == \"(\" then\n    local depth = 1\n\
    \    for i = 2, #brackets do\n      if brackets:sub(i,i) == \"(\" then\n     \
    \   depth = depth + 1\n      elseif brackets:sub(i,i) == \")\" then\n        depth\
    \ = depth - 1\n        if depth == 0 then\n          return correct_bracketing(brackets:sub(i+1))\n\
    \        end\n      end\n    end\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal count = 0\n\tfor i = 1, #brackets do\n\
    \t\tif brackets:sub(i, i) == \"(\" then\n\t\t\tcount = count + 1\n\t\telseif brackets:sub(i,\
    \ i) == \")\" then\n\t\t\tcount = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = {}\n    for i = 1, string.len(brackets)\
    \ do\n        local c = string.sub(brackets, i, i)\n        if c == \"(\" then\n\
    \            table.insert(stack, 1, c)\n        elseif c == \")\" then\n     \
    \       if #stack == 0 then\n                return false\n            else\n\
    \                table.remove(stack, 1)\n            end\n        end\n    end\n\
    \    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets:len()%2 == 1 then\n        return\
    \ false\n    end\n    local open = 0\n    for i = 1, brackets:len() do\n     \
    \   if brackets:sub(i,i) == \"(\" then\n            open = open + 1\n        else\n\
    \            open = open - 1\n        end\n        if open < 0 then\n        \
    \    return false\n        end\n    end\n    return open == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  for i = 1, string.len(brackets)\
    \ do\n    local curr = string.sub(brackets, i, i)\n    if curr == \"(\" then\n\
    \      table.insert(stack, \")\")\n    elseif curr == \")\" then\n      if #stack\
    \ == 0 then\n        return false\n      else\n        table.remove(stack)\n \
    \     end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local s = 0\n  for i = 1, #brackets do\n   \
    \ local c = brackets:sub(i, i)\n    if c == \"(\" then\n      s = s + 1\n    elseif\
    \ c == \")\" then\n      s = s - 1\n    end\n    if s < 0 then\n      return false\n\
    \    end\n  end\n  return s == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal diff = 0\n\tfor i = 1, #brackets do\n\t\
    \tlocal bracket = brackets:sub(i, i)\n\t\tif bracket == \"(\" then\n\t\t\tdiff\
    \ = diff + 1\n\t\telseif bracket == \")\" then\n\t\t\tdiff = diff - 1\n\t\t\t\
    if diff < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn diff\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- go through brackets, check that each bracket\
    \ is matched\n    local matches = 0\n    for i=1, #brackets do\n        if brackets:sub(i,i)\
    \ == \"(\" then\n            matches = matches + 1\n        elseif brackets:sub(i,i)\
    \ == \")\" then\n            matches = matches - 1\n        end\n        if matches\
    \ < 0 then return false end\n    end\n    return matches == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- if brackets have closing brackets, but\
    \ no opening bracket, then fail\n    local current_bracket = brackets:sub(1,1)\n\
    \    while current_bracket ~= \"\" do\n        if current_bracket == \")\" then\n\
    \            return false\n        end\n        brackets = brackets:sub(2)\n \
    \       current_bracket = brackets:sub(1,1)\n    end\n    return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkuqpg4os.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkuqpg4os.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    while brackets:find(\"()\") do\n        brackets\
    \ = brackets:gsub(\"()\", \"\")\n    end\n    return brackets == \"\"\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal stack = {}\n\tfor i = 1, #brackets do\n\
    \t\tlocal c = brackets:sub(i, i)\n\t\tif c == \"(\" then\n\t\t\ttable.insert(stack,\
    \ c)\n\t\telseif c == \")\" then\n\t\t\tif #stack > 0 then\n\t\t\t\ttable.remove(stack)\n\
    \t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {n = 0}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn_78_q14.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal opening_brackets = {};\n\tfor i = 1, #brackets\
    \ do\n\t\tlocal bracket = brackets:sub(i, i);\n\t\tif bracket == \"(\" then\n\t\
    \t\topening_brackets[#opening_brackets + 1] = true;\n\t\telseif bracket == \"\
    )\" then\n\t\t\tif #opening_brackets > 0 then\n\t\t\t\topening_brackets[#opening_brackets]\
    \ = nil;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ #opening_brackets == 0;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local bracket_count = 0\n  for i = 1, #brackets\
    \ do\n    local br = brackets:sub(i, i)\n    if br == \"(\" then\n      bracket_count\
    \ = bracket_count + 1\n    elseif br == \")\" then\n      bracket_count = bracket_count\
    \ - 1\n    end\n    if bracket_count < 0 then\n      return false\n    end\n \
    \ end\n  return bracket_count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local level = 0\n    for b in brackets:gmatch(\"\
    .\") do\n        if b == \"(\" then\n            level = level + 1\n        elseif\
    \ b == \")\" then\n            level = level - 1\n        end\n        if level\
    \ < 0 then\n            return false\n        end\n    end\n    return level ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {\n    top = 0\n  }\n  local open_brackets\
    \ = \"(\"\n  local close_brackets = \")\"\n  for i = 1, string.len(brackets) do\n\
    \    local token = string.sub(brackets, i, i)\n    if string.find(open_brackets,\
    \ token) then\n      stack:push(token)\n    elseif string.find(close_brackets,\
    \ token) then\n      if not stack:isempty() then\n        stack:pop()\n      else\n\
    \        return false\n      end\n    end\n  end\n  return stack:isempty()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa95oi2m8.lua:19:\
    \ unfinished capture\nstack traceback:\n\t/tmp/tmpa95oi2m8.lua:19: in local 'candidate'\n\
    \t/tmp/tmpa95oi2m8.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal count = 0\n\tlocal i = 1\n\twhile i <=\
    \ #brackets do\n\t\tif brackets:sub(i, i) == \"(\" then\n\t\t\tcount = count +\
    \ 1\n\t\telseif brackets:sub(i, i) == \")\" then\n\t\t\tcount = count - 1\n\t\t\
    end\n\t\tif count < 0 then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local n = #brackets\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgqwxt2yj.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\t-- This program uses a while loop to check if\
    \ every opening bracket has a\n\t-- corresponding closing bracket.\n\t-- It uses\
    \ a counter, starting with 0.\n\t-- Every time an opening bracket is encountered,\
    \ the counter is increased.\n\t-- Every time a closing bracket is encountered,\
    \ the counter is decreased.\n\t-- If there are too many closing brackets at any\
    \ point, it should exit early\n\t-- with the correct result.\n\t-- In the end,\
    \ the counter should be 0, otherwise there were unbalanced\n\t-- brackets.\n\t\
    local counter = 0\n\tfor i = 1, #brackets do\n\t\tlocal current_char = brackets:sub(i,\
    \ i)\n\t\tif current_char == \"(\" then\n\t\t\tcounter = counter + 1\n\t\telseif\
    \ current_char == \")\" then\n\t\t\tcounter = counter - 1\n\t\t\tif counter <\
    \ 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn counter ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local n = 0\n    for i = 1, #brackets do\n\
    \        if brackets:sub(i, i) == \"(\" then\n            n = n + 1\n        else\n\
    \            n = n - 1\n        end\n        if n < 0 then\n            return\
    \ false\n        end\n    end\n    return n == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open, close = \"(\", \")\"\n    local\
    \ stack = Stack()\n    for _, p in ipairs(brackets) do\n        if p == open then\n\
    \            stack:push(p)\n        elseif p == close then\n            if stack:is_empty()\
    \ then\n                return false\n            else\n                stack:pop()\n\
    \            end\n        end\n    end\n    return stack:is_empty()\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbj87_c2d.lua:13:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpbj87_c2d.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpbj87_c2d.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local level = 0\n    for i = 1, #brackets\
    \ do\n        local b = brackets:sub(i, i)\n        if b == \"(\" then\n     \
    \       level = level + 1\n        elseif b == \")\" then\n            level =\
    \ level - 1\n        end\n        if level < 0 then\n            return false\n\
    \        end\n    end\n    return level == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  while brackets:match(\"%(%(%)%)\") do\n    brackets\
    \ = brackets:gsub(\"%(%(%)%)\", \"\")\n  end\n  while brackets:match(\"%)%(\"\
    ) do\n    brackets = brackets:gsub(\"%)%(\", \"\")\n  end\n  while brackets:match(\"\
    %(%)\") do\n    brackets = brackets:gsub(\"%(%)\", \"\")\n  end\n  return brackets\
    \ == \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptowjsxs5.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptowjsxs5.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return #brackets:gsub(\"%(%)\", \"\") == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcwf0s48h.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcwf0s48h.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open = 0\n  for i = 1, #brackets do\n\
    \    if brackets:sub(i, i) == \"(\" then\n      open = open + 1\n    elseif brackets:sub(i,\
    \ i) == \")\" then\n      open = open - 1\n    end\n    if open < 0 then\n   \
    \   return false\n    end\n  end\n  return open == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for i = 1, string.len(brackets)\
    \ do\n        if brackets:sub(i, i) == \"(\" then\n            count = count +\
    \ 1\n        elseif brackets:sub(i, i) == \")\" then\n            count = count\
    \ - 1\n        end\n        if count < 0 then\n            return false\n    \
    \    end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for i = 1, brackets:len()\
    \ do\n        if brackets:sub(i, i) == \"(\" then\n            count = count +\
    \ 1\n        elseif brackets:sub(i, i) == \")\" then\n            count = count\
    \ - 1\n        end\n        if count < 0 then\n            return false\n    \
    \    end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = 0\n  for i = 1, #brackets\
    \ do\n    if brackets:sub(i, i) == \"(\" then\n      opening_brackets = opening_brackets\
    \ + 1\n    elseif brackets:sub(i, i) == \")\" then\n      opening_brackets = opening_brackets\
    \ - 1\n    end\n    if opening_brackets < 0 then\n      return false\n    end\n\
    \  end\n  return opening_brackets == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = Stack:new()\n    for c in brackets:gmatch(\"\
    .\") do\n        if c == \"(\" then\n            stack:push(c)\n        elseif\
    \ c == \")\" then\n            if stack:empty() then\n                return false\n\
    \            else\n                stack:pop()\n            end\n        end\n\
    \    end\n    return stack:empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ct58_ts.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp1ct58_ts.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp1ct58_ts.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = 0\n    for character in brackets:gmatch(\"\
    .\") do\n        if character == \"(\" then\n            stack = stack + 1\n \
    \       elseif character == \")\" then\n            stack = stack - 1\n      \
    \  end\n        if stack < 0 then\n            return false\n        end\n   \
    \ end\n    return stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- we keep track of the bracketing balance\n\
    \  local balance = 0\n  -- loop over each bracket\n  for _, bracket in brackets:gmatch(\"\
    .\") do\n    -- increase or decrease the balance\n    if bracket == \"(\" then\n\
    \      balance = balance + 1\n    elseif bracket == \")\" then\n      balance\
    \ = balance - 1\n    end\n    -- if the balance is negative, then we found a closing\
    \ bracket before an opening bracket\n    if balance < 0 then\n      return false\n\
    \    end\n  end\n  -- if the balance is zero, then we found the same number of\
    \ opening and closing brackets\n  return balance == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaoigqfft.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpaoigqfft.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local left = 0\n  for i = 1, #brackets do\n\
    \    if brackets:sub(i, i) == \"(\" then\n      left = left + 1\n    else\n  \
    \    left = left - 1\n    end\n    if left < 0 then\n      return false\n    end\n\
    \  end\n  return left == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- Your code here.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkx1tzj2.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpmkx1tzj2.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local n = #brackets\n  local stack = {}\n  for\
    \ i = 1, n do\n    local b = brackets:sub(i, i)\n    if b == \"(\" then\n    \
    \  stack[#stack + 1] = b\n    elseif b == \")\" then\n      stack[#stack] = nil\n\
    \    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24nepdhf.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp24nepdhf.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local n_open = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"(\" then\n            n_open = n_open\
    \ + 1\n        elseif brackets:sub(i, i) == \")\" then\n            n_open = n_open\
    \ - 1\n        end\n        if n_open < 0 then\n            return false\n   \
    \     end\n    end\n    return n_open == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for c in brackets:gmatch(\"\
    .\") do\n    if c == \"(\" then\n      count = count + 1\n    elseif c == \")\"\
    \ then\n      count = count - 1\n    end\n    if count < 0 then\n      return\
    \ false\n    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local n = 0\n  for c in brackets:gmatch(\".\"\
    ) do\n    if c == \"(\" then\n      n = n + 1\n    elseif c == \")\" then\n  \
    \    n = n - 1\n    end\n    if n < 0 then\n      return false\n    end\n  end\n\
    \  return n == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_p857ebj.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_p857ebj.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal function correct_bracketing_cps(brackets,\
    \ x)\n\t\tif #brackets == 0 then\n\t\t\treturn x == 0\n\t\telseif brackets:sub(1,\
    \ 1) == \"(\" then\n\t\t\treturn correct_bracketing_cps(brackets:sub(2), x + 1)\n\
    \t\telse\n\t\t\treturn x > 0 and correct_bracketing_cps(brackets:sub(2), x - 1)\n\
    \t\tend\n\tend\n\treturn correct_bracketing_cps(brackets, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opened = 0\n  for i = 1, #brackets do\n\
    \    if brackets:sub(i, i) == \"(\" then\n      opened = opened + 1\n    elseif\
    \ brackets:sub(i, i) == \")\" then\n      opened = opened - 1\n    end\n    if\
    \ opened < 0 then\n      return false\n    end\n  end\n  return opened == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local bracket_stack = Stack:new()\n    for\
    \ c in brackets:gmatch(\".\") do\n        if c == \"(\" then\n            bracket_stack:push(c)\n\
    \        elseif c == \")\" then\n            if bracket_stack:size() == 0 then\n\
    \                return false\n            else\n                bracket_stack:pop()\n\
    \            end\n        end\n    end\n    return bracket_stack:size() == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn75qqg5f.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpn75qqg5f.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpn75qqg5f.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = 0\n  for i = 1, #brackets\
    \ do\n    if brackets:sub(i, i) == \"(\" then\n      open_brackets = open_brackets\
    \ + 1\n    elseif brackets:sub(i, i) == \")\" then\n      open_brackets = open_brackets\
    \ - 1\n    end\n    if open_brackets < 0 then\n      return false\n    end\n \
    \ end\n  return open_brackets == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  for i = 1, string.len(brackets)\
    \ do\n    if brackets:sub(i, i) == \"(\" then\n      table.insert(stack, 1, brackets:sub(i,\
    \ i))\n    elseif brackets:sub(i, i) == \")\" then\n      if #stack == 0 then\n\
    \        return false\n      else\n        table.remove(stack, 1)\n      end\n\
    \    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local depth = 0\n  for i = 1, #brackets do\n\
    \    local bracket = brackets:sub(i, i)\n    if bracket == \"(\" then\n      depth\
    \ = depth + 1\n    elseif bracket == \")\" then\n      depth = depth - 1\n   \
    \ end\n    if depth < 0 then\n      return false\n    end\n  end\n  return depth\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for x in brackets:gmatch(\"\
    %S\") do\n        if x == \"(\" then\n            count = count + 1\n        elseif\
    \ x == \")\" then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- TODO: finish this.\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56m8c7yv.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp56m8c7yv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for c in brackets:gmatch(\"\
    .\") do\n    if c == \"(\" then\n      count = count + 1\n    elseif c == \")\"\
    \ then\n      count = count - 1\n    end\n    if count < 0 then\n      return\
    \ false\n    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal depth = 0\n\tfor i = 1, string.len(brackets)\
    \ do\n\t\tlocal char = string.sub(brackets, i, i)\n\t\tif char == \"(\" then\n\
    \t\t\tdepth = depth + 1\n\t\telseif char == \")\" then\n\t\t\tdepth = depth -\
    \ 1\n\t\t\tif depth < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn depth == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opens = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"(\" then\n            opens = opens +\
    \ 1\n        elseif brackets:sub(i, i) == \")\" then\n            opens = opens\
    \ - 1\n        end\n        if opens < 0 then\n            return false\n    \
    \    end\n    end\n    return opens == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    for i=1,#brackets do\n        local c = brackets:sub(i,i)\n\
    \        if c == \"(\" then\n            table.insert(bracket_stack, c)\n    \
    \    elseif c == \")\" then\n            if #bracket_stack == 0 then\n       \
    \         return false\n            else\n                table.remove(bracket_stack)\n\
    \            end\n        end\n    end\n    return #bracket_stack == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9o8b8m8f.lua:15:\
    \ bad argument #1 to 'insert' (table expected, got nil)\nstack traceback:\n\t\
    /tmp/tmp9o8b8m8f.lua:15: in local 'candidate'\n\t/tmp/tmp9o8b8m8f.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets:len() % 2 ~= 0 then\n    return\
    \ false\n  end\n  local count = 0\n  for i=1, brackets:len() do\n    if brackets:sub(i,i)\
    \ == \"(\" then\n      count = count + 1\n    else\n      count = count - 1\n\
    \    end\n    if count < 0 then\n      return false\n    end\n  end\n  return\
    \ count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = Stack()\n  for i = 1, #brackets\
    \ do\n    local char = brackets:sub(i, i)\n    if char == \"(\" then\n      stack:push(char)\n\
    \    elseif char == \")\" then\n      if stack:empty() then\n        return false\n\
    \      else\n        stack:pop()\n      end\n    end\n  end\n  return stack:empty()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzsf90rlo.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpzsf90rlo.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpzsf90rlo.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for _, bracket in ipairs(brackets)\
    \ do\n    if bracket == \"(\" then\n      count = count + 1\n    elseif bracket\
    \ == \")\" then\n      count = count - 1\n    end\n    if count < 0 then\n   \
    \   return false\n    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmparxzaj38.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmparxzaj38.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- Initialization\n    local stack = Stack:new()\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmvgd1lpr.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = {}\n  for i = 1, #brackets\
    \ do\n    local bracket = brackets:sub(i, i)\n    if bracket == \"(\" then\n \
    \     open_brackets[#open_brackets + 1] = bracket\n    elseif bracket == \")\"\
    \ then\n      if #open_brackets == 0 then\n        return false\n      end\n \
    \     table.remove(open_brackets)\n    end\n  end\n  return #open_brackets ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tif brackets:len() == 0 then\n\t\treturn true\n\
    \tend\n\tif brackets:len() == 1 then\n\t\treturn false\n\tend\n\tlocal open_cnt\
    \ = 0\n\tlocal close_cnt = 0\n\tfor i=1,brackets:len() do\n\t\tif brackets:sub(i,i)\
    \ == \"(\" then\n\t\t\topen_cnt = open_cnt + 1\n\t\telseif brackets:sub(i,i) ==\
    \ \")\" then\n\t\t\tclose_cnt = close_cnt + 1\n\t\tend\n\tend\n\treturn open_cnt\
    \ == close_cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0hnhttm6.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0hnhttm6.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if not brackets:find(\"%(\") then return true\
    \ end\n    if not brackets:find(\"%)\") then return false end\n    local count\
    \ = brackets:gsub(\"%(\", \"%1\"):gsub(\"%)\", \"%1\"):gsub(\"%(\", \"\"):gsub(\"\
    %)\", \"\"):len()\n    return count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q7w7pvi.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0q7w7pvi.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- ...\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp85fveugt.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp85fveugt.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = Stack()\n    for idx, char in\
    \ ipairs(brackets) do\n        if char == \"(\" then\n            stack:push(char)\n\
    \        elseif char == \")\" then\n            if stack:is_empty() then\n   \
    \             return false\n            else\n                stack:pop()\n  \
    \          end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwqfvwj0m.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpwqfvwj0m.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpwqfvwj0m.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local counter = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt423frnc.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for c in brackets:gmatch\"\
    .\" do\n    if c == \"(\" then\n      count = count + 1\n    elseif c == \")\"\
    \ then\n      count = count - 1\n    end\n    if count < 0 then\n      return\
    \ false\n    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_count = 0\n  for bracket in brackets:gmatch(\"\
    .\") do\n    if bracket == \"(\" then\n      opening_count = opening_count + 1\n\
    \    elseif bracket == \")\" then\n      opening_count = opening_count - 1\n \
    \   end\n    if opening_count < 0 then\n      return false\n    end\n  end\n \
    \ return opening_count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local bracket_count = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"(\" then\n            bracket_count =\
    \ bracket_count + 1\n        elseif brackets:sub(i, i) == \")\" then\n       \
    \     bracket_count = bracket_count - 1\n        end\n        if bracket_count\
    \ < 0 then\n            return false\n        end\n    end\n    return bracket_count\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local n = 0\n  for i = 1, #brackets do\n   \
    \ if brackets:sub(i, i) == \"(\" then\n      n = n + 1\n    elseif brackets:sub(i,\
    \ i) == \")\" then\n      n = n - 1\n    end\n    if n < 0 then\n      return\
    \ false\n    end\n  end\n  return n == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for i = 1,#brackets do\n\
    \    if brackets:sub(i,i) == \"(\" then\n      count = count + 1\n    elseif brackets:sub(i,i)\
    \ == \")\" then\n      count = count - 1\n    end\n    if count < 0 then\n   \
    \   return false\n    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- Your code here\n    return 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpme6880o6.lua:19:\
    \ expected: true, actual: 0\nstack traceback:\n\t/tmp/tmpme6880o6.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local level = 0\n  for i=1,#brackets do\n  \
    \  local b = brackets:sub(i,i)\n    if b == \"(\" then\n      level = level +\
    \ 1\n    elseif b == \")\" then\n      level = level - 1\n    end\n    if level\
    \ < 0 then\n      return false\n    end\n  end\n  return level == 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local n = 0 -- n is number of \"(\" we have\
    \ seen but not matched\n    for char in brackets:gmatch(\".\") do\n        if\
    \ char == \"(\" then\n            n = n + 1\n        elseif char == \")\" then\n\
    \            n = n - 1\n            if n < 0 then\n                return false\n\
    \            end\n        end\n    end\n    return n == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local depth = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpirzl4lg4.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\t-- your code here\n\treturn brackets:match('^%(+%)*$')\
    \ ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_16q29vt.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_16q29vt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_count = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp56acf04l.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if not brackets:find('%(') and not brackets:find('%)')\
    \ then\n    return true\n  end\n  local str = brackets:gsub('^()%(', 'x')\n  local\
    \ str = str:gsub('^(()%()', 'y')\n  local str = str:gsub('%)', ')x')\n  local\
    \ str = str:gsub('%(%)', 'y)')\n  local str = str:gsub('%)$', ')x')\n  local str\
    \ = str:gsub('%(%)$', 'y)')\n  local str = str:gsub('(()%()', 'yy')\n  local str\
    \ = str:gsub('())', 'x)')\n  local str = str:gsub('%(%)', 'yy')\n  if str:find('%(')\
    \ then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz3stl1pe.lua:22:\
    \ invalid pattern capture\nstack traceback:\n\t/tmp/tmpz3stl1pe.lua:22: in local\
    \ 'candidate'\n\t/tmp/tmpz3stl1pe.lua:33: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for i = 1, #brackets do\n\
    \    local c = brackets:sub(i, i)\n    if c == \"(\" then\n      count = count\
    \ + 1\n    elseif c == \")\" then\n      count = count - 1\n    end\n    if count\
    \ < 0 then\n      return false\n    end\n  end\n  return count == 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = {}\n    for i = 1, #brackets\
    \ do\n        local char = brackets:sub(i, i)\n        if char == \"(\" then\n\
    \            table.insert(stack, char)\n        elseif char == \")\" then\n  \
    \          local p = table.remove(stack)\n            if p ~= \"(\" then\n   \
    \             return false\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local i = 0\n  for c in brackets:gmatch(\".\"\
    ) do\n    if c == \"(\" then\n      i = i + 1\n    elseif c == \")\" then\n  \
    \    i = i - 1\n    end\n    if i < 0 then\n      return false\n    end\n  end\n\
    \  return i == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for i=1,#brackets do\n  \
    \  if brackets:sub(i,i) == \"(\" then\n      count = count + 1\n    elseif brackets:sub(i,i)\
    \ == \")\" then\n      count = count - 1\n    end\n    if count < 0 then\n   \
    \   return false\n    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local acc = 0\n    for i = 1, #brackets do\n\
    \        local c = brackets:sub(i, i)\n        if c == \"(\" then\n          \
    \  acc = acc + 1\n        elseif c == \")\" then\n            acc = acc - 1\n\
    \        end\n        if acc < 0 then\n            return false\n        end\n\
    \    end\n    return acc == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local n = 0\n    for i = 1, #brackets do\n\
    \        local c = brackets:sub(i, i)\n        if c == \"(\" then\n          \
    \  n = n + 1\n        elseif c == \")\" then\n            n = n - 1\n        end\n\
    \        if n < 0 then\n            return false\n        end\n    end\n    return\
    \ n == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local newbrackets = brackets:gsub(\"[^%(%)]\"\
    , \"\")\n    if brackets == newbrackets then\n        newbrackets = brackets:gsub(\"\
    %(\",\"1\"):gsub(\"%)\",\"-1\")\n        local sum = 0\n        for i in string.gmatch(newbrackets,\
    \ \".\") do\n            sum = sum + tonumber(i)\n            if sum < 0 then\n\
    \                return false\n            end\n        end\n        return sum\
    \ == 0\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphukuiixn.lua:17:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmphukuiixn.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmphukuiixn.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal n = #brackets\n\tlocal count = 0\n\tfor\
    \ i = 1, n do\n\t\tif brackets:sub(i, i) == \"(\" then\n\t\t\tcount = count +\
    \ 1\n\t\telse\n\t\t\tcount = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\t\
    return false\n\t\tend\n\tend\n\treturn count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for i=1,#brackets do\n  \
    \  if brackets:sub(i,i) == \"(\" then\n      count = count + 1\n    elseif brackets:sub(i,i)\
    \ == \")\" then\n      count = count - 1\n    end\n    if count < 0 then\n   \
    \   return false\n    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local cb = 0\n  for i=1,#brackets do\n    local\
    \ ch = brackets:sub(i,i)\n    if ch == \"(\" then\n      cb = cb + 1\n    elseif\
    \ ch == \")\" then\n      cb = cb - 1\n    end\n    if cb < 0 then\n      return\
    \ false\n    end\n  end\n  return cb == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal stack = {}\n\tlocal opening = \"(\"\n\t\
    local closing = \")\"\n\t\n\t-- loop through each character\n\tfor i = 1, #brackets\
    \ do\n\t\tlocal char = brackets:sub(i, i)\n\t\t\n\t\t-- push onto stack for opening\
    \ brackets\n\t\tif char == opening then\n\t\t\ttable.insert(stack, char)\n\t\t\
    elseif char == closing then\n\t\t\t-- check if stack is empty when seeing a closing\
    \ bracket\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\t\n\
    \t\t\t-- pop the stack for a closing bracket\n\t\t\ttable.remove(stack)\n\t\t\
    end\n\tend\n\t\n\t-- if stack is empty, then bracketing is correct\n\treturn #stack\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local n = #brackets\n  if n == 0 then\n    return\
    \ true\n  elseif n % 2 == 1 then\n    return false\n  else\n    local left = brackets:sub(1,\
    \ n / 2)\n    local right = brackets:sub(n / 2 + 1, n)\n    return (left:gsub(\"\
    [()]\", {[\"(\"] = \")\", [\")\"] = \"(\"}) == right)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso7k7wc5.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpso7k7wc5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local i = 0\n    for c in brackets:gmatch('.')\
    \ do\n        if c == '(' then\n            i = i + 1\n        elseif c == ')'\
    \ then\n            i = i - 1\n        end\n        if i < 0 then\n          \
    \  return false\n        end\n    end\n    return i == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local bracket_count = 0\n    for i = 1, #brackets\
    \ do\n        local char = brackets:sub(i, i)\n        if char == \"(\" then\n\
    \            bracket_count = bracket_count + 1\n        elseif char == \")\" then\n\
    \            bracket_count = bracket_count - 1\n        end\n        if bracket_count\
    \ < 0 then\n            return false\n        end\n    end\n    return bracket_count\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tif brackets == \"\" then\n\t\treturn true\n\t\
    elseif brackets:sub(1,1) == \")\" then\n\t\treturn false\n\telse\n\t\tlocal first\
    \ = brackets:sub(1,1)\n\t\tlocal rest = brackets:sub(2)\n\t\tlocal pos = rest:find(\"\
    %b()\")\n\t\tif pos then\n\t\t\treturn correct_bracketing(rest:sub(1,pos-1) ..\
    \ rest:sub(pos+2))\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9orzcj_q.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9orzcj_q.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for c in brackets:gmatch(\"\
    .\") do\n    if c == \"(\" then\n      count = count + 1\n    elseif c == \")\"\
    \ then\n      count = count - 1\n    end\n    if count < 0 then\n      return\
    \ false\n    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for i = 1, #brackets\
    \ do\n        local bracket = brackets:sub(i, i)\n        if bracket == \"(\"\
    \ then\n            count = count + 1\n        elseif bracket == \")\" then\n\
    \            count = count - 1\n        end\n        if count < 0 then\n     \
    \       return false\n        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = 0\n  for character in\
    \ brackets:gmatch(\".\") do\n    if character == \"(\" then\n      open_brackets\
    \ = open_brackets + 1\n    elseif character == \")\" then\n      open_brackets\
    \ = open_brackets - 1\n    end\n    if open_brackets < 0 then\n      return false\n\
    \    end\n  end\n  return open_brackets == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal expected = 0\n\tfor bracket in brackets:gmatch\"\
    .\" do\n\t\tif bracket == \"(\" then\n\t\t\texpected = expected + 1\n\t\telseif\
    \ bracket == \")\" then\n\t\t\texpected = expected - 1\n\t\t\tif expected < 0\
    \ then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn expected ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local n = #brackets\n    local open = 0\n\
    \    for i = 1, n do\n        local c = brackets:sub(i, i)\n        if c == \"\
    (\" then\n            open = open + 1\n        elseif c == \")\" then\n      \
    \      open = open - 1\n        end\n        if open < 0 then\n            return\
    \ false\n        end\n    end\n    return open == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for c in brackets:gmatch(\"\
    .\") do\n        if c == \"(\" then\n            count = count + 1\n        elseif\
    \ c == \")\" then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = Stack()\n    for i=1, #brackets\
    \ do\n        local c = brackets:sub(i,i)\n        if c == \"(\" then\n      \
    \      stack:push(c)\n        elseif c == \")\" then\n            local b = stack:pop()\n\
    \            if b ~= \"(\" then\n                return false\n            end\n\
    \        end\n    end\n    return stack:empty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5azg9jq.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmph5azg9jq.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmph5azg9jq.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local balance = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"(\" then\n            balance = balance\
    \ + 1\n        elseif brackets:sub(i, i) == \")\" then\n            balance =\
    \ balance - 1\n        end\n        if balance < 0 then\n            return false\n\
    \        end\n    end\n    return balance == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local bracket_stack = {}\n    for i = 1, brackets:len()\
    \ do\n        local c = brackets:sub(i, i)\n        if c == \"(\" then\n     \
    \       table.insert(bracket_stack, c)\n        elseif c == \")\" then\n     \
    \       if #bracket_stack == 0 then\n                return false\n          \
    \  end\n            local b = table.remove(bracket_stack)\n            if b ~=\
    \ \"(\" then\n                return false\n            end\n        end\n   \
    \ end\n    return #bracket_stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets == \"(\" then\n        return\
    \ false\n    end\n    local open_count = 0\n    for character in brackets:gmatch(\"\
    .\") do\n        if character == \"(\" then\n            open_count = open_count\
    \ + 1\n        elseif character == \")\" then\n            open_count = open_count\
    \ - 1\n        end\n        if open_count < 0 then\n            return false\n\
    \        end\n    end\n    return open_count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local bracket_stack = { }\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_vcdadjp.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- TODO: Implement this function.\n    local\
    \ open_count = 0\n    local close_count = 0\n    for i = 1, #brackets do\n   \
    \     if string.sub(brackets, i, i) == \"(\" then\n            open_count = open_count\
    \ + 1\n        elseif string.sub(brackets, i, i) == \")\" then\n            close_count\
    \ = close_count + 1\n        end\n    end\n    if open_count == close_count then\n\
    \        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw54pgog_.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw54pgog_.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local n = #brackets\n    local n_opening =\
    \ 0\n    local n_closing = 0\n    for i = 1, n do\n        local character = brackets:sub(i,\
    \ i)\n        if character == \"(\" then\n            n_opening = n_opening +\
    \ 1\n        elseif character == \")\" then\n            n_closing = n_closing\
    \ + 1\n        else\n            error(\"brackets string must only contain '('\
    \ and ')'\")\n        end\n        if n_closing > n_opening then\n           \
    \ return false\n        end\n    end\n    return n_opening == n_closing\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local bracket_table = {}\n    for bracket\
    \ in brackets:gmatch(\".\") do\n        if bracket == \"(\" then\n           \
    \ table.insert(bracket_table, bracket)\n        elseif bracket == \")\" then\n\
    \            if #bracket_table == 0 then\n                return false\n     \
    \       else\n                table.remove(bracket_table)\n            end\n \
    \       end\n    end\n    return #bracket_table == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local top_level_brackets = brackets:gsub(\"\
    ^%(%(.-%)%)\", \"\")\n  if top_level_brackets:match(\"^%(\") then\n    return\
    \ false\n  end\n  local first_level_brackets = top_level_brackets:gsub(\"%(.-%)\"\
    , \"\")\n  if first_level_brackets:match(\"%(\") then\n    return false\n  end\n\
    \  local second_level_brackets = first_level_brackets:gsub(\"%(%(.-%)%)\", \"\"\
    )\n  if second_level_brackets:match(\"%(\") then\n    return false\n  end\n  local\
    \ third_level_brackets = second_level_brackets:gsub(\"%(%(%(.-%)%)%)\", \"\")\n\
    \  if third_level_brackets:match(\"%(\") then\n    return false\n  end\n  local\
    \ fourth_level_brackets = third_level_brackets:gsub(\"%(%(%(%(.-%)%)%)%)\", \"\
    \")\n  if fourth_level_brackets:match(\"%(\") then\n    return false\n  end\n\
    \  local fifth_level_brackets = fourth_level_brackets:gsub(\"%(%(%(%(%(.-%)%)%)%)%)\"\
    , \"\")\n  if fifth_level_brackets:match(\"%(\") then\n    return false\n  end\n\
    \  local sixth_level_brackets = fifth_level_brackets:gsub(\"%(%(%(%(%(%(.-%)%)%)%)%)%)\"\
    , \"\")\n  if sixth_level_brackets:match(\"%(\") then\n    return false\n  end\n\
    \  local seventh_level_brackets = sixth_level_brackets:gsub(\"%(%(%(%(%(%(%(.-%)%)%)%)%)%)%)\"\
    , \"\")\n  if seventh_level_brackets:match(\"%(\") then\n    return false\n  end\n\
    \  local eighth_level_brackets = seventh_level_brackets:gsub(\"%(%(%(%(%(%(%(%(.-%)%)%)%)%)%)%)%)\"\
    , \"\")\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp35pxddz3.lua:64: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tif brackets:len() == 0 then\n\t\treturn true\n\
    \tend\n\t\n\tif brackets:sub(1,1) == \")\" then\n\t\treturn false\n\tend\n\t\n\
    \t-- use our existing function to count how many brackets we have\n\tlocal count\
    \ = bracket_count(brackets)\n\t\n\t-- if the count is zero, then we are balanced\
    \ and can return true.\n\tif count == 0 then\n\t\treturn true\n\telseif count\
    \ < 0 then\n\t\t-- if the count is negative, then we have more closing brackets\
    \ than opening, which is illegal.\n\t\treturn false\n\telse\n\t\t-- if we get\
    \ here, we have more opening brackets than closing ones.\n\t\t-- we can try removing\
    \ each closing bracket, and see if the rest is legal.\n\t\t-- if any of them are,\
    \ then return true, otherwise we have no choice but to fail.\n\t\tfor i = 1, brackets:len()\
    \ do\n\t\t\tif brackets:sub(i,i) == \")\" then\n\t\t\t\tif correct_bracketing(brackets:sub(1,i-1)\
    \ .. brackets:sub(i+1)) then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\
    \tend\n\t\t\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcasfuoqa.lua:21:\
    \ attempt to call a nil value (global 'bracket_count')\nstack traceback:\n\t/tmp/tmpcasfuoqa.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpcasfuoqa.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- TODO Write your code here\n  local count\
    \ = 0\n  for i=1,#brackets do\n    if brackets:sub(i,i) == \"(\" then\n      count\
    \ = count + 1\n    elseif brackets:sub(i,i) == \")\" then\n      count = count\
    \ - 1\n    end\n    if count < 0 then\n      return false\n    end\n  end\n  if\
    \ count ~= 0 then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for i = 1, #brackets do\n\
    \    local char = brackets:sub(i, i)\n    if char == \"(\" then\n      count =\
    \ count + 1\n    elseif char == \")\" then\n      count = count - 1\n    end\n\
    \    if count < 0 then\n      return false\n    end\n  end\n  return count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for i = 1, #brackets do\n\
    \    if brackets:sub(i, i) == \"(\" then\n      count = count + 1\n    elseif\
    \ brackets:sub(i, i) == \")\" then\n      count = count - 1\n    end\n    if count\
    \ < 0 then\n      return false\n    end\n  end\n  return count == 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\t-- TODO: write your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbsizvvx8.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpbsizvvx8.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local counter = 0\n    for i=1,#brackets do\n\
    \        if brackets:sub(i,i) == \"(\" then\n            counter = counter + 1\n\
    \        elseif brackets:sub(i,i) == \")\" then\n            counter = counter\
    \ - 1\n        end\n        if counter < 0 then\n            return false\n  \
    \      end\n    end\n    return counter == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local n = 0 -- number of unmatched opening\
    \ brackets\n    local function check(c)\n        if c == \"(\" then\n        \
    \    n = n + 1\n        else\n            n = n - 1\n            if n < 0 then\
    \ return false end\n        end\n        return true\n    end\n    return string.gsub(brackets,\
    \ \"[()]\", check) == #brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu7theloq.lua:22:\
    \ invalid replacement value (a boolean)\nstack traceback:\n\t/tmp/tmpu7theloq.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpu7theloq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local len = #brackets\n    local count = 0\n\
    \    for i = 1, len do\n        if brackets:sub(i, i) == \"(\" then\n        \
    \    count = count + 1\n        elseif brackets:sub(i, i) == \")\" then\n    \
    \        count = count - 1\n        end\n        if count < 0 then\n         \
    \   return false\n        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for c in brackets:gmatch(\"\
    %(\") do\n    count = count + 1\n  end\n  for c in brackets:gmatch(\"%)\") do\n\
    \    count = count - 1\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8yzypumk.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8yzypumk.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal open, closed = 0, 0\n\tfor i = 1, #brackets\
    \ do\n\t\tif brackets:sub(i, i) == \"(\" then\n\t\t\topen = open + 1\n\t\telse\n\
    \t\t\tclosed = closed + 1\n\t\tend\n\t\tif closed > open then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn closed == open\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local N = brackets:len()\n  local stack = {}\n\
    \  for i = 1, N do\n    local c = brackets:sub(i, i)\n    if c == \"(\" then\n\
    \      table.insert(stack, 1, c)\n    elseif c == \")\" then\n      local o =\
    \ table.remove(stack, 1)\n      if o ~= \"(\" then\n        return false\n   \
    \   end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return not brackets:find(\"%(%)\") and brackets:find(\"\
    ^%(*%)*$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gviyjup.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_gviyjup.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpizwe24rc.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local left_brackets = 0\n  for i = 1, #brackets\
    \ do\n    if brackets:sub(i, i) == \"(\" then\n      left_brackets = left_brackets\
    \ + 1\n    else\n      left_brackets = left_brackets - 1\n      if left_brackets\
    \ < 0 then\n        return false\n      end\n    end\n  end\n  return left_brackets\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local n_opened = 0\n    for char in brackets:gmatch(\"\
    .\") do\n        if char == \"(\" then\n            n_opened = n_opened + 1\n\
    \        elseif char == \")\" then\n            n_opened = n_opened - 1\n    \
    \        if n_opened < 0 then\n                return false\n            end\n\
    \        end\n    end\n    return n_opened == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local check = 0\n    for i=1,#brackets do\n\
    \        if brackets:sub(i,i) == \"(\" then\n            check = check + 1\n \
    \       elseif brackets:sub(i,i) == \")\" then\n            check = check - 1\n\
    \        end\n        if check < 0 then\n            return false\n        end\n\
    \    end\n    return check == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local bracket_stack = {}\n    for i = 1, #brackets\
    \ do\n        local c = brackets:sub(i, i)\n        if c == \"(\" then\n     \
    \       bracket_stack[#bracket_stack + 1] = \"(\"\n        elseif c == \")\" then\n\
    \            if #bracket_stack == 0 then\n                return false\n     \
    \       end\n            bracket_stack[#bracket_stack] = nil\n        end\n  \
    \  end\n    return #bracket_stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = Stack:new()\n  for char in brackets:gmatch(\"\
    %p\") do\n    if char == \"(\" then\n      stack:push(char)\n    else\n      if\
    \ stack:is_empty() then\n        return false\n      end\n      stack:pop()\n\
    \    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprk3eeolp.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmprk3eeolp.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmprk3eeolp.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- Your solution here.\n  local cnt = 0\n  for\
    \ i = 1, #brackets do\n    if brackets:sub(i, i) == \"(\" then\n      cnt = cnt\
    \ + 1\n    else\n      cnt = cnt - 1\n    end\n    if cnt < 0 then\n      return\
    \ false\n    end\n  end\n  return cnt == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for i = 1, string.len(brackets)\
    \ do\n        local bracket = string.sub(brackets, i, i)\n        if bracket ==\
    \ \"(\" then\n            count = count + 1\n        elseif bracket == \")\" then\n\
    \            count = count - 1\n        end\n        if count < 0 then\n     \
    \       return false\n        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- YOUR CODE HERE\n    local stack = Stack:new()\n\
    \    for i = 1,#brackets do\n        if brackets:sub(i,i) == \"(\" then\n    \
    \        stack:push(brackets:sub(i,i))\n        elseif brackets:sub(i,i) == \"\
    )\" then\n            stack:pop()\n        end\n    end\n    return stack:empty()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjdhnl5ej.lua:13:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpjdhnl5ej.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpjdhnl5ej.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
