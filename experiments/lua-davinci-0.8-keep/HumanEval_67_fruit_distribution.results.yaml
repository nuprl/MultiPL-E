name: HumanEval_67_fruit_distribution
language: lua
results:
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local fruit1\
    \ = tonumber(s:match(\"(%d+) apples\"))\n    local fruit2 = tonumber(s:match(\"\
    (%d+) oranges\"))\n    return n - fruit1 - fruit2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- body\n\ta,b\
    \ = string.match(s, \"(%d+) apples and (%d+) oranges\")\n\treturn n - a - b\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = s:match(\"(%d+) apples\")\n    local oranges = s:match(\"(%d+) oranges\")\n\
    \    return n - (apples or 0) - (oranges or 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- extract\
    \ and parse the fruit numbers\n    local f1, f2 = s:match(\"(%d+) apples and (%d+)\
    \ oranges\")\n    -- subtract the total fruit numbers from the given total\n \
    \   return n - f1 - f2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- WRITE YOUR\
    \ CODE HERE\n  local fruit = {}\n  local apples = string.match(s, \"%d+\")\n \
    \ local oranges = string.match(s, \"%d+\", (apples + 1))\n  local mango = n -\
    \ apples - oranges\n  fruit[\"mango\"] = mango\n  return fruit\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz034rntv.lua:24:\
    \ expected: 8, actual: {mango=8}\nstack traceback:\n\t/tmp/tmpz034rntv.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdrd9_lgp.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpdrd9_lgp.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t\n\tlocal a,\
    \ o = string.match(s, \"(%d+) apples and (%d+) oranges\")\n\t\n\treturn n - a\
    \ - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- Write your\
    \ code here\n\t\n\t-- note: the first parameter is a string (s) and the second\
    \ parameter is an integer (n)\n\t-- also, the function should return an integer\
    \ (the number of mango fruits)\n\tlocal numApples = tonumber(string.match(s, \"\
    (%d+) apples\"))\n\tlocal numOranges = tonumber(string.match(s, \"(%d+) oranges\"\
    ))\n\treturn n - numApples - numOranges\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- body\n \
    \   local pattern = \"(%d+) apples and (%d+) oranges\"\n    local apples, oranges\
    \ = s:match(pattern)\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local a, b =\
    \ string.match(s, \"^(%d+)%s*apples%s*and%s*(%d+)%s*oranges$\")\n  return n -\
    \ a - b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- Write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhxwc7uf.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpmhxwc7uf.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local x, y =\
    \ s:match(\"(%d+) apples and (%d+) oranges\")\n  return n - x - y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajqzzbmv.lua:17:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpajqzzbmv.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal num_apples,\
    \ num_oranges = string.match(s, \"(%d+) apples and (%d+) oranges\")\n\treturn\
    \ n - tonumber(num_apples) - tonumber(num_oranges)\nend\nassert(fruit_distribution(\"\
    5 apples and 6 oranges\", 19) == 8)\nassert(fruit_distribution(\"0 apples and\
    \ 1 oranges\",3) == 2)\nassert(fruit_distribution(\"2 apples and 3 oranges\",\
    \ 100) == 95)\nassert(fruit_distribution(\"100 apples and 1 oranges\",120) ==\
    \ 19)\nassert(fruit_distribution(\"0 apples and 0 oranges\",0) == 0)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- body\n\t\n\
    \tlocal a,o = string.match(s, \"(%d+) apples and (%d+) oranges\")\n\t\n\treturn\
    \ n - tonumber(a) - tonumber(o)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a, o,\
    \ m = 0, 0, 0\n    a = string.match(s, \"([%d]+) apples\")\n    o = string.match(s,\
    \ \"([%d]+) oranges\")\n    if a then\n        a = tonumber(a)\n    end\n    if\
    \ o then\n        o = tonumber(o)\n    end\n    m = n - a - o\n    return m\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal s_num =\
    \ s:match( \"(%d+) apples\" )\n\tif not s_num then\n\t\treturn n\n\tend\n\tlocal\
    \ num = tonumber(s_num)\n\tif not num then\n\t\treturn n\n\tend\n\ts_num = s:match(\
    \ \"(%d+) oranges\" )\n\tif not s_num then\n\t\treturn n\n\tend\n\tnum = num +\
    \ tonumber(s_num)\n\treturn n - num\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apple = s:match('%d+%s+apples')\n    local orange = s:match('%d+%s+oranges')\n\
    \    local num_apple = apple:match('%d+')\n    local num_orange = orange:match('%d+')\n\
    \    return n - num_apple - num_orange\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = string.match(s, \"(%d+) apples and (%d+) oranges\")\n    apples, oranges\
    \ = tonumber(apples), tonumber(oranges)\n    local mangoes = n - apples - oranges\n\
    \    return mangoes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    return math.abs(n\
    \ - (string.match(s, \"(%d+) apples\") + string.match(s, \"(%d+) oranges\")))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\"\
    )\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\treturn n - tonumber(s:match(\"\
    %d+ apples\")) - tonumber(s:match(\"%d+ oranges\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7u1e4yqg.lua:12:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp7u1e4yqg.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp7u1e4yqg.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tn = n - string.gsub(s,\
    \ \" apples\", \"\")\n\tn = n - string.gsub(s, \" oranges\", \"\")\n\treturn n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk1dj8eqr.lua:12:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpk1dj8eqr.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpk1dj8eqr.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9h58u9i.lua:17:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpl9h58u9i.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal function\
    \ mysub(s, i, j)\n\t\tif i == -1 then\n\t\t\treturn s\n\t\telse\n\t\t\tlocal str\
    \ = string.sub(s, 0, i)\n\t\t\tif j == -1 then\n\t\t\t\treturn str\n\t\t\telse\n\
    \t\t\t\treturn str .. string.sub(s, j + 1)\n\t\t\tend\n\t\tend\n\tend\n\tlocal\
    \ i = string.find(s, \"apples\")\n\ts = mysub(s, i - 1, -1)\n\ti = string.find(s,\
    \ \"oranges\")\n\ts = mysub(s, i - 1, -1)\n\tn = n - tonumber(s)\n\treturn n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzmv1ptgp.lua:27:\
    \ attempt to perform arithmetic on a nil value (local 'i')\nstack traceback:\n\
    \t/tmp/tmpzmv1ptgp.lua:27: in local 'candidate'\n\t/tmp/tmpzmv1ptgp.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local apples = s:match(\"(%d+)%sapples\")\n    local oranges = s:match(\"\
    (%d+)%soranges\")\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local function\
    \ find_num(s)\n        local i = string.find(s, \" \")\n        local n = string.sub(s,\
    \ 1, i-1)\n        return tonumber(n)\n    end\n    local i = string.find(s, \"\
    \ and \")\n    local apples = find_num(string.sub(s, 1, i-1))\n    local oranges\
    \ = find_num(string.sub(s, i+5))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\treturn n - tonumber(s:match(\"\
    ^(%d+) .* and .*$\")) - tonumber(s:match(\"^.* and (%d+) .*$\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tif type(s) ~=\
    \ \"string\" or type(n) ~= \"number\" then\n\t\treturn nil\n\tend\n\tlocal n_apples\
    \ = 0\n\tlocal n_oranges = 0\n\tfor num in s:gmatch(\"%d+\") do\n\t\tif s:find(\"\
    apples\") then\n\t\t\tn_apples = tonumber(num)\n\t\telseif s:find(\"oranges\"\
    ) then\n\t\t\tn_oranges = tonumber(num)\n\t\tend\n\tend\n\treturn n - n_apples\
    \ - n_oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl1v6niwx.lua:30:\
    \ expected: 8, actual: 13\nstack traceback:\n\t/tmp/tmpl1v6niwx.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples\
    \ = tonumber(s:match(\"%d+\"))\n\tlocal oranges = tonumber(s:match(\"%d+ oranges\"\
    ))\n\treturn n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzx19w4dx.lua:14:\
    \ attempt to perform arithmetic on a nil value (local 'oranges')\nstack traceback:\n\
    \t/tmp/tmpzx19w4dx.lua:14: in local 'candidate'\n\t/tmp/tmpzx19w4dx.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- body\n\tlocal\
    \ apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n -\
    \ apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- Write your\
    \ code here\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0gbh451v.lua:26: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- body\n\tlocal\
    \ fruit_num_1 = tonumber(string.match(s, \"%d+\"))\n\tlocal fruit_num_2 = tonumber(string.match(s,\
    \ \"%d+\", string.find(s, \"and\") + 1))\n\treturn n - fruit_num_1 - fruit_num_2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = string.match(s, \"(%d+) apples\")\n    local oranges = string.match(s, \"\
    (%d+) oranges\")\n    if apples and oranges then\n        apples = tonumber(apples)\n\
    \        oranges = tonumber(oranges)\n        return n - apples - oranges\n  \
    \  end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - tonumber(apples)\
    \ - tonumber(oranges)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- TODO: coding\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpddajcn8d.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpddajcn8d.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- your code\
    \ here\n\tlocal fruit1, fruit2 = s:match(\"(%d+) apples and (%d+) oranges\")\n\
    \treturn n - fruit1 - fruit2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- do your stuff\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5as6y8x.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpa5as6y8x.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\n    local sum = 0\n    for i in string.gmatch(s, \"%d+\") do\n  \
    \      sum = sum + tonumber(i)\n    end\n    return n - sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- Write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrcra_ob.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmplrcra_ob.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local nA, nO\
    \ = s:match(\"(%d+) apples and (%d+) oranges\")\n  return n - nA - nO\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n   -- Write your\
    \ code here\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp531a0dj1.lua:26: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal function\
    \ check_distribution(a,b)\n\t\tlocal sum_of_fruit = n - a - b\n\t\treturn sum_of_fruit\n\
    \tend\n\tlocal apple_count,orange_count = s:match(\"(%d+)%sapples%sand%s(%d+)%soranges\"\
    )\n\tapple_count = tonumber(apple_count)\n\torange_count = tonumber(orange_count)\n\
    \treturn check_distribution(apple_count,orange_count)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    return n -\
    \ tonumber(s:sub(1, s:find(\" \"))) - tonumber(s:sub(s:find(\"and\") + 4))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph8tmjrcj.lua:12:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmph8tmjrcj.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmph8tmjrcj.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a, o,\
    \ d\n    for word in s:gmatch(\"%d+\") do\n        if s:find(\"apple\") then a\
    \ = tonumber(word)\n        elseif s:find(\"orange\") then o = tonumber(word)\
    \ end\n    end\n    return n - a - o\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi5or3qg3.lua:17:\
    \ attempt to perform arithmetic on a nil value (local 'o')\nstack traceback:\n\
    \t/tmp/tmpi5or3qg3.lua:17: in local 'candidate'\n\t/tmp/tmpi5or3qg3.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\n    --print(s)\n    local apples, oranges = string.match(s, \"(%d+)\
    \ apples and (%d+) oranges\")\n    apples = tonumber(apples)\n    oranges = tonumber(oranges)\n\
    \    --print(apples, oranges)\n    local mangos = n - apples - oranges\n    return\
    \ mangos\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local split\
    \ = {}\n    for i in string.gmatch(s, \"%d+\") do\n        table.insert(split,\
    \ i)\n    end\n    return n - tonumber(split[1]) - tonumber(split[2])\nend\nprint(fruit_distribution(\"\
    5 apples and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\"\
    ,3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"\
    100 apples and 1 oranges\",120))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "8\n2\n95\n19\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\n\
    OK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local n_apples,\
    \ n_oranges = s:match(\"([%d]+) apples and ([%d]+) oranges\")\n  n_apples, n_oranges\
    \ = tonumber(n_apples), tonumber(n_oranges)\n  return n - n_apples - n_oranges\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local fruit = {\n        apple = \"apple\",\n        orange = \"orange\"\
    ,\n        mango = \"mango\"\n    }\n    local num_of_apple = tonumber(string.match(s,\
    \ \"(%d+)\"))\n    local num_of_orange = tonumber(string.match(s, \"%d+ \" ..\
    \ fruit.apple .. \" and (%d+) \" .. fruit.orange))\n    return n - num_of_apple\
    \ - num_of_orange\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_6tny2i_.lua:20:\
    \ attempt to perform arithmetic on a nil value (local 'num_of_orange')\nstack\
    \ traceback:\n\t/tmp/tmp_6tny2i_.lua:20: in local 'candidate'\n\t/tmp/tmp_6tny2i_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal x, y =\
    \ s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - x - y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuouad_n7.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpuouad_n7.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  return n - s:match('%d+')\
    \ - s:match('%d+$')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplwv_mean.lua:12:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmplwv_mean.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmplwv_mean.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local sum_apples\
    \ = tonumber(s:match('(%d+)%s+apples'))\n  local sum_oranges = tonumber(s:match('(%d+)%s+oranges'))\n\
    \  return n - sum_apples - sum_oranges\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphdi53igd.lua:17:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmphdi53igd.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgn8vbcq1.lua:17:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpgn8vbcq1.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal a = 0\n\
    \tlocal o = 0\n\tfor i in s:gmatch(\"%d+\") do\n\t\tif s:match(\"apples\") then\n\
    \t\t\ta = tonumber(i)\n\t\telse\n\t\t\to = tonumber(i)\n\t\tend\n\tend\n\treturn\
    \ n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1wswbzu3.lua:27:\
    \ expected: 8, actual: 13\nstack traceback:\n\t/tmp/tmp1wswbzu3.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- YOUR CODE\
    \ HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpocknispd.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpocknispd.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- YOUR CODE\
    \ HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xbbii27.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp5xbbii27.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local appleCount\
    \ = tonumber(s:match(\"%d+%s*apple\"))\n    local orangeCount = tonumber(s:match(\"\
    %d+%s*orange\"))\n    return n - appleCount - orangeCount\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7rdw6o3_.lua:14:\
    \ attempt to perform arithmetic on a nil value (local 'appleCount')\nstack traceback:\n\
    \t/tmp/tmp7rdw6o3_.lua:14: in local 'candidate'\n\t/tmp/tmp7rdw6o3_.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a,o =\
    \ s:match(\"(%d+) apples and (%d+) oranges\")\n    a,o = tonumber(a), tonumber(o)\n\
    \    return n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\n    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf127ahfj.lua:19:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpf127ahfj.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"^%d+\"))\n    local oranges = tonumber(s:match(\"(%d+)\
    \ oranges$\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  \n  -- Write\
    \ your code here\n  local dist,apple,orange = {},0,0\n  dist = s:split(\" \")\n\
    \  apple = tonumber(dist[1])\n  orange = tonumber(dist[3])\n  return n - apple\
    \ - orange\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyw_90na7.lua:15:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpyw_90na7.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpyw_90na7.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- your code\
    \ goes here ...\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnledqi0t.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpnledqi0t.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = tonumber(s:match(\"^%d+\"))\n    local oranges = tonumber(s:match(\"^%d+ apples\
    \ and (%d+) oranges\"))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoglutn26.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpoglutn26.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- get the nubmer\
    \ of apples and oranges from the given string s\n  local apples, oranges = string.match(s,\
    \ \"^(%d+) apples and (%d+) oranges$\")\n  -- convert the number of apples and\
    \ oranges from string to integer\n  apples = tonumber(apples)\n  oranges = tonumber(oranges)\n\
    \  -- return the number of the mango fruits\n  return n - apples - oranges\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local app,\
    \ ora = s:match('(%d+) apples and (%d+) oranges')\n    return n - app - ora\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- TODO: your\
    \ code here\n    local a, o = s:match('(%d+) apples and (%d+) oranges')\n    return\
    \ n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- write your\
    \ code here\n    local apple = string.match(s, \"(%d+) apples\")\n    local orange\
    \ = string.match(s, \"(%d+) oranges\")\n    local mango = n - apple - orange\n\
    \    return mango\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local words\
    \ = split(s, \" \")\n    local t = {}\n    for i = 1, #words, 2 do\n        t[words[i\
    \ + 1]] = tonumber(words[i])\n    end\n    return n - t.apples - t.oranges\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9o4_rn4z.lua:12:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp9o4_rn4z.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp9o4_rn4z.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n\tlocal oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n\treturn n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - tonumber(apples)\
    \ - tonumber(oranges)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    s = s:gsub(\"\
    \ and \",\" \")\n    s = s:gsub(\" apples \",\" \")\n    s = s:gsub(\" oranges\
    \ \",\" \")\n    local total = 0\n    for part in s:gmatch(\"%d+\") do\n     \
    \   total = total + tonumber(part)\n    end\n    return n - total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- Your code\
    \ goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmv0flpv.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmplmv0flpv.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal a, o =\
    \ s:match(\"(%d+) apples and (%d+) oranges\")\n\ta, o = tonumber(a), tonumber(o)\n\
    \tlocal mangoes = n - a - o\n\treturn mangoes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- write your\
    \ code here\n    -- To get the number of apples and oranges from the string\n\
    \    local apples = string.match(s,\"%d+\")\n    local oranges = string.match(s,\"\
    %d+ oranges\")\n    -- then convert them to integer\n    apples = tonumber(apples)\n\
    \    oranges = tonumber(oranges)\n    -- then return the number of mangoes\n \
    \   return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadsl13ym.lua:20:\
    \ attempt to perform arithmetic on a nil value (local 'oranges')\nstack traceback:\n\
    \t/tmp/tmpadsl13ym.lua:20: in local 'candidate'\n\t/tmp/tmpadsl13ym.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples\
    \ = tonumber(s:match(\"^%d+\"))\n\tlocal oranges = tonumber(s:match(\"%d+$\"))\n\
    \treturn n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00_j8ms_.lua:14:\
    \ attempt to perform arithmetic on a nil value (local 'oranges')\nstack traceback:\n\
    \t/tmp/tmp00_j8ms_.lua:14: in local 'candidate'\n\t/tmp/tmp00_j8ms_.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local fruits\
    \ = {}\n  local  fruit_sum, temp\n  for num, fruit in s:gmatch(\"(%d+) (%a+)\"\
    ) do\n    fruits[fruit] = num\n  end\n  fruit_sum = 0\n  for k, v in pairs(fruits)\
    \ do\n    fruit_sum = fruit_sum + tonumber(v)\n  end\n  return n - fruit_sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t--your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpduxf4zzv.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpduxf4zzv.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\n    local temp = \"\";\n    local fruits = {};\n    local i = 1;\n\
    \    while i <= #s do\n        if s:sub(i, i) == \" \" then\n            fruits[#fruits\
    \ + 1] = temp;\n            temp = \"\";\n        else\n            temp = temp\
    \ .. s:sub(i, i);\n        end\n        i = i + 1;\n    end\n    fruits[#fruits\
    \ + 1] = temp;\n    local mango_num = n - tonumber(fruits[1]) - tonumber(fruits[4]);\n\
    \    return mango_num;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local ap =\
    \ string.match(s, \"(%d+) apples\")\n    local ora = string.match(s, \"(%d+) oranges\"\
    )\n    return n - ap - ora\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local fruit\
    \ = {}\n    local pos = string.find(s, \" apples and \") or string.find(s, \"\
    \ oranges and \") or string.find(s, \" apples and \")\n    fruit.apples = tonumber(string.sub(s,\
    \ 0, pos - 1))\n    fruit.oranges = tonumber(string.sub(s, pos + 12))\n    return\
    \ n - fruit.apples - fruit.oranges\nend\nfruit_distribution(\"100 apples and 1\
    \ oranges\",120) -->19\nfruit_distribution(\"0 apples and 1 oranges\",3) -->2\n\
    fruit_distribution(\"2 apples and 3 oranges\", 100) -->95\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdnnqug8_.lua:16: attempt to perform arithmetic on a nil value\
    \ (field 'oranges')\nstack traceback:\n\t/tmp/tmpdnnqug8_.lua:16: in local 'fruit_distribution'\n\
    \t/tmp/tmpdnnqug8_.lua:18: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\n    local n_apple = s:match(\"(%d+) apples\") or 0\n    local n_orange\
    \ = s:match(\"(%d+) oranges\") or 0\n    local n_mango = n - n_apple - n_orange\n\
    \    return n_mango\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local app =\
    \ string.match(s, \"%d+ apples\")\n    app = tonumber(app)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq42dco5d.lua:27: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96ruuf5e.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp96ruuf5e.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc5dpkc5.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpxc5dpkc5.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    return n -\
    \ tonumber(s:match(\"(%d+) apples\")) - tonumber(s:match(\"(%d+) oranges\"))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- body\n \
    \   local res = {string.match(s,\"(%d+) apples and (%d+) oranges\")}\n    local\
    \ num_of_apples = tonumber(res[1])\n    local num_of_oranges = tonumber(res[2])\n\
    \    return n - num_of_apples - num_of_oranges\nend\nprint(fruit_distribution(\"\
    5 apples and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\"\
    ,3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"\
    100 apples and 1 oranges\",120))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "8\n2\n95\n19\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\n\
    OK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- body\n \
    \   local apples, oranges = 0, 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpykos_tvs.lua:27: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    return n -\
    \ tonumber(s:match(\"%d+\") or 0) - tonumber(s:match(\"%d+$\") or 0)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw475j9bx.lua:18:\
    \ expected: 8, actual: 14\nstack traceback:\n\t/tmp/tmpw475j9bx.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- write your\
    \ code here\n    --use string.match()\n    local a, o = string.match(s, \"(%d+)\
    \ apples and (%d+) oranges\")\n    local mango = n - a - o\n    return mango\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n  return n - tonumber(apples)\
    \ - tonumber(oranges)\nend\nprint(fruit_distribution(\"5 apples and 6 oranges\"\
    , 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\",3))\nprint(fruit_distribution(\"\
    2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\"\
    ,120))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "8\n2\n95\n19\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\n\
    OK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    return n -\
    \ tonumber(s:match'^(%d+)' or 0) - tonumber(s:match'%d+ ([%w ]+)$' or 0)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfzi5pxwo.lua:12:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpfzi5pxwo.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpfzi5pxwo.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local function\
    \ read_number(s)\n        local i = 1\n        while i <= #s and s:sub(i, i) >=\
    \ '0' and s:sub(i, i) <= '9' do\n            i = i + 1\n        end\n        local\
    \ num = tonumber(s:sub(1, i - 1))\n        return num, s:sub(i + 1)\n    end\n\
    \    local function read_and_skip(s, word)\n        local len = #word\n      \
    \  if s:sub(1, len) == word then\n            return s:sub(len + 1)\n        end\n\
    \        return nil\n    end\n    local function read_fruit(s)\n        local\
    \ s = read_and_skip(s, 'apples')\n        if s then\n            return read_and_skip(s,\
    \ 'and')\n        end\n        s = read_and_skip(s, 'oranges')\n        if s then\n\
    \            return read_and_skip(s, 'and')\n        end\n        return nil\n\
    \    end\n    local num, s = read_number(s)\n    s = read_fruit(s)\n    num =\
    \ num + read_number(s)\n    return n - num\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdu3qv46v.lua:14:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmpdu3qv46v.lua:14:\
    \ in local 'read_number'\n\t/tmp/tmpdu3qv46v.lua:40: in local 'candidate'\n\t\
    /tmp/tmpdu3qv46v.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local apples\
    \ = string.match(s, \"(%d+) apples\")\n  local oranges = string.match(s, \"(%d+)\
    \ oranges\")\n  return n - apples - oranges\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal a = tonumber(s:match(\"\
    (%d+) apples\")) or 0\n\tlocal o = tonumber(s:match(\"(%d+) oranges\")) or 0\n\
    \treturn n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local app,\
    \ ora = s:match(\"(%d+) apples and (%d+) oranges\")\n    app, ora = tonumber(app),\
    \ tonumber(ora)\n    return n - app - ora\nend\nprint(fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\",3))\n\
    print(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"\
    100 apples and 1 oranges\",120))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "8\n2\n95\n19\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\n\
    OK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local t = {}\n\
    \  for i in s:gmatch(\"%d+\") do\n    table.insert(t, i)\n  end\n  return n -\
    \ tonumber(t[1]) - tonumber(t[2])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5znbedc2.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp5znbedc2.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal pattern\
    \ = \"([0-9]+) apples and ([0-9]+) oranges\"\n\tlocal x, y = string.match(s, pattern)\n\
    \treturn n - x - y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local t={}\n\
    \    for i in s:gmatch(\"%d+\") do\n        table.insert(t,i)\n    end\n    return\
    \ n - t[1] - t[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- body\n\tlocal\
    \ apples = tonumber(string.match(s, \"(%d+) apples\"))\n\tlocal oranges = tonumber(string.match(s,\
    \ \"(%d+) oranges\"))\n\treturn n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal total_apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n\tlocal total_oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n\treturn n - total_apples - total_oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7vc68ndj.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp7vc68ndj.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal a, o =\
    \ string.match(s, \"(%d+) apples and (%d+) oranges\")\n\treturn n - tonumber(a)\
    \ - tonumber(o)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a, o\
    \ = string.match(s, \"(%d+) apples and (%d+) oranges\")\n    return n - tonumber(a)\
    \ - tonumber(o)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- body\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gzpv933.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp9gzpv933.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- your code\
    \ here\n  \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9twsk2zn.lua:19:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp9twsk2zn.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\n    local x = s:match(\"^(%d+) apples and (%d+) oranges$\")\n   \
    \ local apples, oranges = tonumber(x:match(\"^(%d+) apples and (%d+) oranges$\"\
    ))\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkvpd73ca.lua:15:\
    \ attempt to perform arithmetic on a nil value (local 'apples')\nstack traceback:\n\
    \t/tmp/tmpkvpd73ca.lua:15: in local 'candidate'\n\t/tmp/tmpkvpd73ca.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal _, _, apples,\
    \ oranges = s:find(\"(%d+) apples and (%d+) oranges\")\n\treturn n - apples -\
    \ oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- your code\
    \ here\n  \n  local function tonumber(s)\n    local v = 0\n    for i = 1, #s do\n\
    \      v = v * 10 + (s:byte(i) - 48)\n    end\n    return v\n  end\n  \n  return\
    \ n - tonumber(s:match(\"(%d+)%s%a+\")) - tonumber(s:match(\"%d+%s%a+%sand%s(%d+)%s%a+\"\
    ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\nend\n```\n- Smallest\
    \ multiple\n```\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfa9u7xwb.lua:13: unexpected symbol near '`'\n"
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n   local a, o =\
    \ s:match('(%d) apples and (%d) oranges')\n   return n - a - o\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb2oggg08.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'a')\nstack traceback:\n\
    \t/tmp/tmpb2oggg08.lua:13: in local 'candidate'\n\t/tmp/tmpb2oggg08.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- your code\
    \ here\n  \nend\n```\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpms_zj8gf.lua:15: unexpected symbol near '`'\n"
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- get the\
    \ oranges count\n    local apples = tonumber(s:match('^%d+'))\n    -- get the\
    \ apples count\n    local oranges = tonumber(s:match('%d+$'))\n    -- return the\
    \ number of the mango fruits\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5x9_xcw0.lua:17:\
    \ attempt to perform arithmetic on a nil value (local 'oranges')\nstack traceback:\n\
    \t/tmp/tmp5x9_xcw0.lua:17: in local 'candidate'\n\t/tmp/tmp5x9_xcw0.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin6ajm3_.lua:17:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpin6ajm3_.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- body\n\t--s\
    \ = '5 apples and 6 oranges'\n\t--s = '0 apples and 1 oranges'\n\t--s = '2 apples\
    \ and 3 oranges'\n\t--s = '100 apples and 1 oranges'\n\tassert(type(s) == 'string')\n\
    \tassert(type(n) == 'number')\n\tlocal _, apples = string.find(s, '%d+ apples')\n\
    \tlocal _, oranges = string.find(s, '%d+ oranges')\n\tif apples then apples =\
    \ string.match(apples, '%d+') end\n\tif oranges then oranges = string.match(oranges,\
    \ '%d+') end\n\t--log(apples, oranges)\n\tlocal total = n - (tonumber(apples)\
    \ or 0) - (tonumber(oranges) or 0)\n\tlog(total)\n\treturn total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxy7ijdna.lua:25:\
    \ attempt to call a nil value (global 'log')\nstack traceback:\n\t/tmp/tmpxy7ijdna.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpxy7ijdna.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- YOUR CODE\
    \ HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpil18yce2.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpil18yce2.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- split the\
    \ string and extract the number of the apples and oranges\n    local apples, oranges\
    \ = s:match(\"(%d+) apples and (%d+) oranges\")\n    -- calculate the number of\
    \ the mango fruits\n    return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local m = {}\n\
    \    local i = 1\n    for w in s:gmatch(\"%w+\") do\n        m[i] = tonumber(w)\n\
    \        i = i + 1\n    end\n    return n - m[1] - m[3]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpngf6yoew.lua:18:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpngf6yoew.lua:18: in local 'candidate'\n\t/tmp/tmpngf6yoew.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local apples,\
    \ oranges, mangoes = 0, 0, 0\n  apples = string.match(s, \"^%d+\")\n  oranges\
    \ = string.match(s, \"%d+$\")\n  if apples then apples = tonumber(apples) else\
    \ apples = 0 end\n  if oranges then oranges = tonumber(oranges) else oranges =\
    \ 0 end\n  return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5t_h6aqm.lua:23:\
    \ expected: 8, actual: 14\nstack traceback:\n\t/tmp/tmp5t_h6aqm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- Write your\
    \ code here\n\t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_zfx10i.lua:19:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpl_zfx10i.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local function\
    \ remove_comma(s)\n        local res = \"\"\n        for i = 1, #s do\n      \
    \      if string.sub(s, i, i) ~= \",\" then\n                res = res .. string.sub(s,\
    \ i, i)\n            end\n        end\n        return res\n    end\n    local\
    \ s = remove_comma(s)\n    local has_and = string.find(s, \"and\")\n    local\
    \ num_apples = tonumber(string.sub(s, 1, has_and - 2))\n    local num_oranges\
    \ = tonumber(string.sub(s, has_and + 3, #s))\n    return n - num_apples - num_oranges\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdb2sr1we.lua:25:\
    \ attempt to perform arithmetic on a nil value (local 'num_apples')\nstack traceback:\n\
    \t/tmp/tmpdb2sr1we.lua:25: in local 'candidate'\n\t/tmp/tmpdb2sr1we.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- put your\
    \ code here\n    -- local startString = string.find(s, \"and\")\n    -- local\
    \ newString = string.sub(s, 1, startString - 1)\n    -- local totalFruit = 0\n\
    \    -- for str in string.gmatch(newString, \"%S+\") do\n    --     totalFruit\
    \ = totalFruit + tonumber(str)\n    -- end\n    -- return n - totalFruit\n   \
    \ if (string.find(s, \"and\")) then\n        return n - tonumber(string.sub(s,\
    \ 1, string.find(s, \"and\") - 1)) - tonumber(string.sub(s, string.find(s, \"\
    and\") + 4))\n    else\n        return n - tonumber(string.sub(s, 0, string.find(s,\
    \ \" \") - 1)) - tonumber(string.sub(s, string.find(s, \" \") + 1))\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwwzy1rhn.lua:21:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpwwzy1rhn.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpwwzy1rhn.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local t = {}\n\
    \    local _, _, apple, orange = s:find(\"(%d+) apples and (%d+) oranges\")\n\
    \    local mango = n - tonumber(apple) - tonumber(orange)\n    t.apple = tonumber(apple)\n\
    \    t.orange = tonumber(orange)\n    t.mango = mango\n    return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s7z8zgn.lua:24:\
    \ expected: 8, actual: {apple=5, mango=8, orange=6}\nstack traceback:\n\t/tmp/tmp3s7z8zgn.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- WRITE YOUR\
    \ CODE HERE\n    local s = string.split(s, \" \")\n    local apples = tonumber(s[1])\n\
    \    local oranges = tonumber(s[3])\n    return n - apples - oranges\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4wn485xk.lua:13:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp4wn485xk.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4wn485xk.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal function\
    \ findindex(s,st,e)\n\t\treturn string.find(s,st,e,true)\n\tend\n\tlocal a = findindex(s,\"\
    a\",1)\n\tlocal a2 = findindex(s,\"a\",a+1)\n\tlocal o = findindex(s,\"o\",1)\n\
    \tlocal o2 = findindex(s,\"o\",o+1)\n\treturn n - tonumber(string.sub(s,a+1,a2-2))\
    \ - tonumber(string.sub(s,o+1,o2-2))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpan5iqhi9.lua:19:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpan5iqhi9.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpan5iqhi9.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    return n -\
    \ tonumber(s:match(\"(%d+)\")) - tonumber(s:match(\"(%d+)\", s:find(\"and \")\
    \ + 4))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t--write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mxaiwyf.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp7mxaiwyf.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local index\
    \ = string.find(s, \" \")\n    local num1 = tonumber(string.sub(s, 1, index -\
    \ 1))\n    local index2 = string.find(s, \" \", index + 1)\n    local num2 = tonumber(string.sub(s,\
    \ index2 + 1, #s))\n    return n - num1 - num2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeda36izp.lua:16:\
    \ attempt to perform arithmetic on a nil value (local 'num2')\nstack traceback:\n\
    \t/tmp/tmpeda36izp.lua:16: in local 'candidate'\n\t/tmp/tmpeda36izp.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal pat = \"\
    (%d+)\"\n\tlocal apples = string.match(s, pat)\n\tlocal oranges = string.match(s,\
    \ pat, #apples + 9)\n\treturn n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal a, b =\
    \ string.match(s, \"(%d+) apples and (%d+) oranges\")\n\treturn n - a - b\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- body\n\tlocal\
    \ s_ = s:gsub(\" apples and \", \" \")\n\tlocal s_1 = s_:gsub(\" oranges\", \"\
    \")\n\tlocal nums = s_1:split(\" \")\n\treturn n - tonumber(nums[1]) - tonumber(nums[2])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfi83wyko.lua:15:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpfi83wyko.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpfi83wyko.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local s = string.gsub(s,\
    \ '%D', ' ')\n    local t = {}\n    for w in string.gmatch(s, \"%d+\") do\n  \
    \      table.insert(t, tonumber(w))\n    end\n    return n - t[1] - t[2]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apple,\
    \ orange = s:match(\"(%d+) apples and (%d+) oranges\")\n    return n - tonumber(apple)\
    \ - tonumber(orange)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- body\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe2i_u9wl.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpe2i_u9wl.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- write your\
    \ code here\n    local a , o = s:match('(%d+)%sapples%sand%s(%d+)%soranges')\n\
    \    return n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- your code\
    \ here\n  local i = 0\n  local str = ''\n  for i = 1, #s do\n    if s:sub(i, i)\
    \ == ' ' then\n      str = str .. ','\n    elseif s:sub(i, i) == 'a' then\n  \
    \    str = str .. ' '\n    elseif s:sub(i, i) == 'o' then\n      str = str ..\
    \ ' '\n    else\n      str = str .. s:sub(i, i)\n    end\n  end\n  return n -\
    \ str:match('(%d+),(%d+)')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgb4n5qol.lua:26:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpgb4n5qol.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmpgb4n5qol.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local space =\
    \ string.find(s, \" \")\n  local apples = string.sub(s, 1, space-1)\n  local oranges\
    \ = string.sub(s, space+6, space+6)\n  local mangoes = n - apples - oranges\n\
    \  return mangoes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6s7mtle9.lua:15:\
    \ attempt to perform arithmetic on a string value (local 'oranges')\nstack traceback:\n\
    \t/tmp/tmp6s7mtle9.lua:15: in local 'candidate'\n\t/tmp/tmp6s7mtle9.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vyn3jyq.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp3vyn3jyq.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- your code\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi6kb83ov.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpi6kb83ov.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr06k9_wu.lua:19:\
    \ expected: 8, actual: 0\nstack traceback:\n\t/tmp/tmpr06k9_wu.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- body\n  local\
    \ n1, n2 = string.match(s, \"(%d+) apples and (%d+) oranges\")\n  return n - n1\
    \ - n2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- write code\
    \ here\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00x_c7xd.lua:19:\
    \ expected: 8, actual: 0\nstack traceback:\n\t/tmp/tmp00x_c7xd.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    return n - tonumber(s:match(\"^%d+\")) - tonumber(s:match(\"%d+$\"\
    ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzixpxicf.lua:13:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpzixpxicf.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpzixpxicf.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- your code\
    \ here\n  local i, j, str1, str2 = string.find(s, \" apples and \")\n  local i,\
    \ j, str3, str4 = string.find(s, \" oranges\")\n  local apples = tonumber(str1)\n\
    \  local oranges = tonumber(str3)\n  return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj9ya7w9j.lua:17:\
    \ attempt to perform arithmetic on a nil value (local 'apples')\nstack traceback:\n\
    \t/tmp/tmpj9ya7w9j.lua:17: in local 'candidate'\n\t/tmp/tmpj9ya7w9j.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- TODO: \nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_gah_us.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpf_gah_us.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a = tonumber(s:match(\"\
    (%d+) apples\"))\n    local o = tonumber(s:match(\"(%d+) oranges\"))\n    return\
    \ n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local a = tonumber(s:match(\"\
    (%d+)\"))\n    local o = tonumber(s:match(\"(%d+) oranges\"))\n    return n -\
    \ a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local num_apples\
    \ = s:match('(%d+) apples')\n    local num_oranges = s:match('(%d+) oranges')\n\
    \    return n - num_apples - num_oranges\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\n    local n1, n2 = string.match(s, \"(%d+) apples and (%d+) oranges\"\
    )\n    return n - n1 - n2\nend\nprint(fruit_distribution(\"5 apples and 6 oranges\"\
    , 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\",3))\nprint(fruit_distribution(\"\
    2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\"\
    ,120))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "8.0\n2.0\n95.0\n19.0\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\n\
    OK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local fruit_num\
    \ = s:match(\"^(%d+)\")\n    fruit_num = tonumber(fruit_num)\n    if fruit_num\
    \ then\n        return n - fruit_num\n    end\n    return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu08r9w46.lua:23:\
    \ expected: 8, actual: 14\nstack traceback:\n\t/tmp/tmpu08r9w46.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local a,o = string.match(s,\"\
    (%d+) apples and (%d+) oranges\")\n  local num = n - a - o\n  return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- your code\
    \ here\nend\n```\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpltav626m.lua:14: unexpected symbol near '`'\n"
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\treturn n - string.match(s,\
    \ \"(%d+) apples\") - string.match(s, \"(%d+) oranges\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70lbnvd0.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp70lbnvd0.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = 0\n    local oranges = 0\n    for i = 1, #s do\n        if string.sub(s, i,\
    \ i) == \"a\" then\n            apples = apples + 1\n        elseif string.sub(s,\
    \ i, i) == \"o\" then\n            oranges = oranges + 1\n        end\n    end\n\
    \    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6scoblh.lua:27:\
    \ expected: 8, actual: 15\nstack traceback:\n\t/tmp/tmpq6scoblh.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- TODO: Write\
    \ your code here\n    -- Extract numbers\n    local words = string_split(s, '\
    \ ')\n    local apple = tonumber(words[1])\n    local orange = tonumber(words[3])\n\
    \    return n - apple - orange\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpljpepgqf.lua:14:\
    \ attempt to call a nil value (global 'string_split')\nstack traceback:\n\t/tmp/tmpljpepgqf.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpljpepgqf.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\n    local apple = string.match(s,\"%d+%s%a+\")\n    local orange\
    \ = string.match(s,\"%d+%s%a+%s%a+\")\n    local total = n - apple - orange\n\
    \    return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpac2fkkwk.lua:15:\
    \ attempt to perform arithmetic on a string value (local 'apple')\nstack traceback:\n\
    \t/tmp/tmpac2fkkwk.lua:15: in local 'candidate'\n\t/tmp/tmpac2fkkwk.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgipgait1.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpgipgait1.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t\t-- your code\
    \ goes here\n\t\n\t \n\t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t7dm60u.lua:21:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp3t7dm60u.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0s0n1t7x.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp0s0n1t7x.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- Write your\
    \ code here\nend\n```\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5w14med3.lua:14: unexpected symbol near '`'\n"
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal s = s:lower()\n\
    \tlocal apples = tonumber(s:match(\"(%d+) apples\"))\n\tlocal oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n\treturn n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local total_apples\
    \ = 0\n  local total_oranges = 0\n  for apple, oranges in s:gmatch(\"([0-9]+)\
    \ apples and ([0-9]+) oranges\") do\n    total_apples = total_apples + tonumber(apple)\n\
    \    total_oranges = total_oranges + tonumber(oranges)\n  end\n  return n - total_apples\
    \ - total_oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - tonumber(apples)\
    \ - tonumber(oranges)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- write your\
    \ code here\nend\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))\n\
    print(fruit_distribution(\"0 apples and 1 oranges\",3))\nprint(fruit_distribution(\"\
    2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\"\
    ,120))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "\n\n\n\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshg5j5ff.lua:22:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpshg5j5ff.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local function\
    \ count(st)\n    local sum = 0\n    for num in st:gmatch(\"%d+\") do\n      sum\
    \ = sum + tonumber(num)\n    end\n    return sum\n  end\n  return n - count(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplule949q.lua:17:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmplule949q.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local t = string.split(s,\"\
    \ \")\n    local t1 = tonumber(t[1])\n    local t2 = tonumber(t[3])\n    return\
    \ n - t1 - t2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd2_6h944.lua:12:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpd2_6h944.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpd2_6h944.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal a, o =\
    \ tonumber(s:match(\"^(%d+) apples\")), tonumber(s:match(\"(%d+) oranges$\"))\n\
    \treturn n - a - o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    return n -\
    \ s:gsub(\"%d+\", function(n) return tonumber(n) end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2g7v94_9.lua:12:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmp2g7v94_9.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp2g7v94_9.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match('(%d+) apples and (%d+) oranges')\n    return n - tonumber(apples)\
    \ - tonumber(oranges)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9y3alt60.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmp9y3alt60.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  local apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n  local oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n  return n - apples - oranges\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal a,o,m\n\
    \ta,o = s:match(\"(%d+) apples and (%d+) oranges\")\n\tm = n - a - o\n\treturn\
    \ m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local t = {}\n\
    \    local words = s:gmatch(\"%d+\")\n    for v in words do\n        table.insert(t,\
    \ tonumber(v))\n    end\n    return n - t[1] - t[2]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngvphkgh.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpngvphkgh.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    --your code\
    \ here\n    local apples = tonumber(s:match(\"%d+ apples\"))\n    local oranges\
    \ = tonumber(s:match(\"%d+ oranges\"))\n    return n - apples - oranges\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphsg5fyb4.lua:15:\
    \ attempt to perform arithmetic on a nil value (local 'apples')\nstack traceback:\n\
    \t/tmp/tmphsg5fyb4.lua:15: in local 'candidate'\n\t/tmp/tmphsg5fyb4.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxdygrla.lua:18:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpdxdygrla.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    -- Write your\
    \ code here\n    local Apples, Oranges = 0, 0\n    local Num = 0\n    local mul\
    \ = 1\n    local cur = ''\n    for i = #s, 1, -1 do\n        if s:sub(i, i) ==\
    \ 'l' then\n            Num = Num + Apples * mul\n            Apples = 0\n   \
    \         mul = 1\n        elseif s:sub(i, i) == 'n' then\n            Num = Num\
    \ + Oranges * mul\n            Oranges = 0\n            mul = 1\n        elseif\
    \ s:sub(i, i) == 'd' then\n            break\n        elseif s:sub(i, i) == 's'\
    \ then\n            Apples = Apples + 1\n        elseif s:sub(i, i) == 'g' then\n\
    \            Oranges = Oranges + 1\n        elseif s:sub(i, i) == ' ' then\n \
    \           break\n        elseif tonumber(s:sub(i, i)) ~= nil then\n        \
    \    cur = s:sub(i, i) .. cur\n            if tonumber(cur) ~= nil then\n    \
    \            mul = tonumber(cur)\n            end\n        end\n    end\n    return\
    \ n - Num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fruit_distribution\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)\n\
    \    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1\
    \ apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2 apples and 3\
    \ oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and 3 oranges',\
    \ 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb9ibjvyk.lua:47:\
    \ expected: 8, actual: 18\nstack traceback:\n\t/tmp/tmpb9ibjvyk.lua:47: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local words\
    \ = {}\n    local val1 = 0\n    local val2 = 0\n    for w in s:gmatch(\"%w+\"\
    ) do\n        table.insert(words, w)\n    end\n    for i = 1, #words do\n    \
    \    if words[i] == \"apples\" then\n            val1 = words[i - 1]\n       \
    \ elseif words[i] == \"oranges\" then\n            val2 = words[i - 1]\n     \
    \   end\n    end\n    return n - val1 - val2\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf840t783.lua:17:\
    \ expected: 8, actual: nil\nstack traceback:\n\t/tmp/tmpf840t783.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal a, o, s\
    \ = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n - a - o\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples\
    \ = 0\n    local oranges = 0\n    local i = 1\n    while i <= string.len(s) do\n\
    \        local digit = tonumber(string.sub(s, i, i))\n        if digit then\n\
    \            if string.sub(s, i + 1, i + 5) == \" apples\" then\n            \
    \    apples = digit\n            elseif string.sub(s, i + 1, i + 6) == \" oranges\"\
    \ then\n                oranges = digit\n            end\n            i = i +\
    \ 6\n        else\n            i = i + 1\n        end\n    end\n    return n -\
    \ apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl436wine.lua:34:\
    \ expected: 8, actual: 19\nstack traceback:\n\t/tmp/tmpl436wine.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\t-- TODO: Write\
    \ your code here\n\t-- \"1 apples and 2 oranges\"\n\tlocal split = function(str,\
    \ pat)\n\t\tlocal t = {}\n\t\tlocal fpat = \"(.-)\" .. pat\n\t\tlocal last_end\
    \ = 1\n\t\tlocal s, e, cap = str:find(fpat, 1)\n\t\twhile s do\n\t\t\tif s ~=\
    \ 1 or cap ~= \"\" then\n\t\t\t\ttable.insert(t,cap)\n\t\t\tend\n\t\t\tlast_end\
    \ = e+1\n\t\t\ts, e, cap = str:find(fpat, last_end)\n\t\tend\n\t\tif last_end\
    \ <= #str then\n\t\t\tcap = str:sub(last_end)\n\t\t\ttable.insert(t, cap)\n\t\t\
    end\n\t\treturn t\n\tend\n\tlocal word = split(s, \" \")\n\tlocal apples = word[1]\n\
    \tlocal oranges = word[3]\n\tlocal mangoes = n - apples - oranges\n\treturn mangoes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnzv9odm.lua:35:\
    \ attempt to perform arithmetic on a string value (local 'oranges')\nstack traceback:\n\
    \t/tmp/tmplnzv9odm.lua:35: in local 'candidate'\n\t/tmp/tmplnzv9odm.lua:42: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\treturn n - tonumber(s:match(\"\
    (%d+) apples\")) - tonumber(s:match(\"(%d+) oranges\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = string.match(s, \"(%d+) apples and (%d+) oranges\")\n    apples, oranges\
    \ = tonumber(apples), tonumber(oranges)\n    return n - apples - oranges\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal num = {\n\
    \t\t[\"one\"] = 1,\n\t\t[\"two\"] = 2,\n\t\t[\"three\"] = 3,\n\t\t[\"four\"] =\
    \ 4,\n\t\t[\"five\"] = 5,\n\t\t[\"six\"] = 6,\n\t\t[\"seven\"] = 7,\n\t\t[\"eight\"\
    ] = 8,\n\t\t[\"nine\"] = 9,\n\t\t[\"ten\"] = 10,\n\t\t[\"eleven\"] = 11,\n\t\t\
    [\"twelve\"] = 12,\n\t\t[\"thirteen\"] = 13,\n\t\t[\"fourteen\"] = 14,\n\t\t[\"\
    fifteen\"] = 15,\n\t\t[\"sixteen\"] = 16,\n\t\t[\"seventeen\"] = 17,\n\t\t[\"\
    eighteen\"] = 18,\n\t\t[\"nineteen\"] = 19,\n\t\t[\"twenty\"] = 20,\n\t\t[\"thirty\"\
    ] = 30,\n\t\t[\"forty\"] = 40,\n\t\t[\"fifty\"] = 50,\n\t\t[\"sixty\"] = 60,\n\
    \t\t[\"seventy\"] = 70,\n\t\t[\"eighty\"] = 80,\n\t\t[\"ninety\"] = 90,\n\t\t\
    [\"hundred\"] = 100,\n\t\t[\"thousand\"] = 1000,\n\t\t[\"million\"] = 1000000,\n\
    \t\t[\"billion\"] = 1000000000,\n\t\t[\"and\"] = 0,\n\t}\n\tlocal total = 0\n\t\
    local word = \"\"\n\tfor w in s:gmatch(\"%w+\") do\n\t\tif num[w] then\n\t\t\t\
    total = total + num[w]\n\t\tend\n\tend\n\treturn n - total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35tb9url.lua:59:\
    \ expected: 8, actual: 19\nstack traceback:\n\t/tmp/tmp35tb9url.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\tlocal apple,\
    \ orange = string.match(s, \"(%d+) apples and (%d+) oranges\")\n\treturn tonumber(n)\
    \ - tonumber(apple) - tonumber(orange)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n  \n  -- your code\
    \ here\n  local apples, oranges = string.match(s, \"^(%d+) apples and (%d+) oranges$\"\
    )\n  apples = tonumber(apples)\n  oranges = tonumber(oranges)\n  return n - apples\
    \ - oranges\n  \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local t = string.split(s,\
    \ \" \")\n    local apples = tonumber(t[1])\n    local oranges = tonumber(t[3])\n\
    \    return n - apples - oranges\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprnapm1ni.lua:12:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmprnapm1ni.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmprnapm1ni.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n\treturn n - tonumber(s:match(\"\
    ^%d+\")) - tonumber(s:match(\"%d+$\"))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_5sqsslu.lua:12:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp_5sqsslu.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp_5sqsslu.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local function\
    \ extract_num(s)\n        local sum = 0\n        for x in s:gmatch(\"%d+\") do\n\
    \            sum = sum + tonumber(x)\n        end\n        return sum\n    end\n\
    \    return n - extract_num(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local apples,\
    \ oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n    return tonumber(n)\
    \ - tonumber(apples) - tonumber(oranges)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fruit_distribution\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and\
    \ 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n   \
    \ lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
    \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    local t = string.split(s,\
    \ \" \")\n    local apple_num = tonumber(t[1])\n    local orange_num = tonumber(t[3])\n\
    \    local mango_num = n - apple_num - orange_num\n    return mango_num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
    \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
    \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and\
    \ 1 oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges',\
    \ 3), 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n\
    \    lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1\
    \ apples and 100 oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzro_9api.lua:12:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpzro_9api.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpzro_9api.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this task, you will be given a string that represents a number of\
    \ apples and oranges \n-- that are distributed in a basket of fruit this basket\
    \ contains \n-- apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n-- the oranges and apples and an integer that represent\
    \ the total number of the fruits \n-- in the basket return the number of the mango\
    \ fruits in the basket.\n-- for examble:\n-- fruit_distribution(\"5 apples and\
    \ 6 oranges\", 19) ->19 - 5 - 6 = 8\n-- fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n-- fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n-- fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\nlocal function fruit_distribution(s, n)\n    print(s)\n\
    \    local i, j, a, o = s:find(\"%d+%s+apples%s+and%s+%d+%s+oranges\")\n    print(i,\
    \ j, a, o)\n    if i then\n        print(s:sub(i, j))\n        a = tonumber(s:sub(i,\
    \ j))\n        i, j = s:find(\"%d+%s+oranges\", j + 1)\n        print(i, j)\n\
    \        o = tonumber(s:sub(i, j))\n        print(a, o)\n        return n - a\
    \ - o\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fruit_distribution\n    lu.assertEquals(candidate('5 apples\
    \ and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5 apples and 6 oranges',\
    \ 21), 10)\n    lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)\n \
    \   lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)\n    lu.assertEquals(candidate('2\
    \ apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2 apples and\
    \ 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100 oranges',\
    \ 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "5 apples and 6 oranges\n1\t22\tnil\tnil\n5 apples and 6 oranges\nnil\t\
    nil\nE\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqda_gfpd.lua:20:\
    \ bad argument #1 to 'sub' (number expected, got nil)\nstack traceback:\n\t/tmp/tmpqda_gfpd.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpqda_gfpd.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
