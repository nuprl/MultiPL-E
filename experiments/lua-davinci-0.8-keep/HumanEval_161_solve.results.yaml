name: HumanEval_161_solve
language: lua
results:
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    if\
    \ #s == 0 then return s end\n    local r = \"\"\n    for i = 1, #s do\n      \
    \  local a = s:sub(i, i)\n        if a:match(\"%a\") then\n            if a ==\
    \ a:upper() then r = r .. a:lower() else r = r .. a:upper() end\n        else\n\
    \            r = r .. a\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7fp9qnvw.lua:28:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp7fp9qnvw.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ letters = {}\n    local non_letters = {}\n    local idx = 1\n    local i = 1\n\
    \    while i <= #s do\n        local c = s:sub(i, i)\n        if c:match(\"%a\"\
    ) then\n            letters[idx] = c\n            idx = idx + 1\n        else\n\
    \            non_letters[#non_letters + 1] = c\n        end\n        i = i + 1\n\
    \    end\n    local pos = 1\n    idx = 1\n    if #letters > 0 then\n        while\
    \ idx <= #letters do\n            local c = letters[idx]\n            local uc\
    \ = c:upper()\n            local lc = c:lower()\n            if c == uc then\n\
    \                s = s:sub(1, pos - 1) .. lc .. s:sub(pos + 1)\n            else\n\
    \                s = s:sub(1, pos - 1) .. uc .. s:sub(pos + 1)\n            end\n\
    \            pos = pos + 1\n            idx = idx + 1\n        end\n    else\n\
    \        s = s:reverse()\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn13k51c6.lua:52:\
    \ expected: \"#A@c\"\nactual: \"Ac@C\"\nstack traceback:\n\t/tmp/tmpn13k51c6.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ (s:gsub(\"[%a]\", {[\"a\"] = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\", [\"d\"\
    ] = \"D\", [\"e\"] = \"E\", [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"] = \"H\"\
    , [\"i\"] = \"I\", [\"j\"] = \"J\", [\"k\"] = \"K\", [\"l\"] = \"L\", [\"m\"]\
    \ = \"M\", [\"n\"] = \"N\", [\"o\"] = \"O\", [\"p\"] = \"P\", [\"q\"] = \"Q\"\
    , [\"r\"] = \"R\", [\"s\"] = \"S\", [\"t\"] = \"T\", [\"u\"] = \"U\", [\"v\"]\
    \ = \"V\", [\"w\"] = \"W\", [\"x\"] = \"X\", [\"y\"] = \"Y\", [\"z\"] = \"Z\"\
    , [\"A\"] = \"a\", [\"B\"] = \"b\", [\"C\"] = \"c\", [\"D\"] = \"d\", [\"E\"]\
    \ = \"e\", [\"F\"] = \"f\", [\"G\"] = \"g\", [\"H\"] = \"h\", [\"I\"] = \"i\"\
    , [\"J\"] = \"j\", [\"K\"] = \"k\", [\"L\"] = \"l\", [\"M\"] = \"m\", [\"N\"]\
    \ = \"n\", [\"O\"] = \"o\", [\"P\"] = \"p\", [\"Q\"] = \"q\", [\"R\"] = \"r\"\
    , [\"S\"] = \"s\", [\"T\"] = \"t\", [\"U\"] = \"u\", [\"V\"] = \"v\", [\"W\"]\
    \ = \"w\", [\"X\"] = \"x\", [\"Y\"] = \"y\", [\"Z\"] = \"z\" }))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppfuztlrz.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmppfuztlrz.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  return\
    \ (string.gsub(s, \"[%a]\", {a = \"A\", b = \"B\", c = \"C\", d = \"D\", e = \"\
    E\", f = \"F\", g = \"G\", h = \"H\", i = \"I\", j = \"J\", k = \"K\", l = \"\
    L\", m = \"M\", n = \"N\", o = \"O\", p = \"P\", q = \"Q\", r = \"R\", s = \"\
    S\", t = \"T\", u = \"U\", v = \"V\", w = \"W\", x = \"X\", y = \"Y\", z = \"\
    Z\", A = \"a\", B = \"b\", C = \"c\", D = \"d\", E = \"e\", F = \"f\", G = \"\
    g\", H = \"h\", I = \"i\", J = \"j\", K = \"k\", L = \"l\", M = \"m\", N = \"\
    n\", O = \"o\", P = \"p\", Q = \"q\", R = \"r\", S = \"s\", T = \"t\", U = \"\
    u\", V = \"v\", W = \"w\", X = \"x\", Y = \"y\", Z = \"z\"}))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9dbbvud.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpc9dbbvud.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ ss = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match(\"\
    %a\") then\n            if c:match(\"%u\") then\n                c = c:lower()\n\
    \            else\n                c = c:upper()\n            end\n        end\n\
    \        ss[#ss + 1] = c\n    end\n    if #ss > 0 then\n        return table.concat(ss)\n\
    \    else\n        return s:reverse()\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0uk4aqe.lua:34:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpm0uk4aqe.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ c = {}\n  for i = 1, #s do\n    local ci = s:sub(i, i)\n    if ci:match(\"%a\"\
    ) then\n      c[i] = ci:lower() == ci and ci:upper() or ci:lower()\n    else\n\
    \      c[i] = ci\n    end\n  end\n  return #c > 0 and table.concat(c) or s:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfb28cera.lua:27:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpfb28cera.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ t = {}\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c:match(\"%a\"\
    ) then\n      c = c:lower() == c and c:upper() or c:lower()\n    end\n    t[#t\
    \ + 1] = c\n  end\n  return #t > 0 and table.concat(t) or s:reverse()\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4tpf8q1l.lua:26:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp4tpf8q1l.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n\tlocal\
    \ t, s2, s3 = {}, \"\", \"\"\n\tfor i = 1, string.len(s) do\n\t\tif string.match(s[i],\
    \ \"%l\") then\n\t\t\tt[#t + 1] = string.lower(s[i])\n\t\tend\n\tend\n\tif #t\
    \ == 0 then \n\t\tfor i = 1, string.len(s) do\n\t\t\tt[#t + 1] = s[i]\n\t\tend\n\
    \tend\n\tfor i = #t, 1, -1 do\n\t\ts2 = s2 .. t[i]\n\tend\n\tfor i = 1, string.len(s)\
    \ do\n\t\tif string.match(s[i], \"%l\") then\n\t\t\ts3 = s3 .. s2[i]\n\t\telse\n\
    \t\t\ts3 = s3 .. s[i]\n\t\tend\n\tend\n\treturn s3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplajsxtd7.lua:13:\
    \ bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmplajsxtd7.lua:13: in local 'candidate'\n\t/tmp/tmplajsxtd7.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ new_s = \"\"\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if\
    \ c == c:upper() then\n            new_s = new_s .. c:lower()\n        elseif\
    \ c == c:lower() then\n            new_s = new_s .. c:upper()\n        else\n\
    \            new_s = new_s .. c\n        end\n    end\n    return #new_s > 0 and\
    \ new_s or s:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb8wkd2i.lua:29:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpsb8wkd2i.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  return\
    \ s:gsub('[a-zA-Z]',function(c) return c:lower() == c and c:upper() or c:lower()\
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8s81u5r3.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp8s81u5r3.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  return\
    \ s:gsub(\"%a\",function(c) return c:lower()==c and c:upper() or c:lower() end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6h8nrk4.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpe6h8nrk4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n\treturn\
    \ (s:gsub(\"%a\", {[\"a\"]=\"A\",[\"b\"]=\"B\",[\"c\"]=\"C\",[\"d\"]=\"D\",[\"\
    e\"]=\"E\",[\"f\"]=\"F\",[\"g\"]=\"G\",[\"h\"]=\"H\",[\"i\"]=\"I\",[\"j\"]=\"\
    J\",[\"k\"]=\"K\",[\"l\"]=\"L\",[\"m\"]=\"M\",[\"n\"]=\"N\",[\"o\"]=\"O\",[\"\
    p\"]=\"P\",[\"q\"]=\"Q\",[\"r\"]=\"R\",[\"s\"]=\"S\",[\"t\"]=\"T\",[\"u\"]=\"\
    U\",[\"v\"]=\"V\",[\"w\"]=\"W\",[\"x\"]=\"X\",[\"y\"]=\"Y\",[\"z\"]=\"Z\",[\"\
    A\"]=\"a\",[\"B\"]=\"b\",[\"C\"]=\"c\",[\"D\"]=\"d\",[\"E\"]=\"e\",[\"F\"]=\"\
    f\",[\"G\"]=\"g\",[\"H\"]=\"h\",[\"I\"]=\"i\",[\"J\"]=\"j\",[\"K\"]=\"k\",[\"\
    L\"]=\"l\",[\"M\"]=\"m\",[\"N\"]=\"n\",[\"O\"]=\"o\",[\"P\"]=\"p\",[\"Q\"]=\"\
    q\",[\"R\"]=\"r\",[\"S\"]=\"s\",[\"T\"]=\"t\",[\"U\"]=\"u\",[\"V\"]=\"v\",[\"\
    W\"]=\"w\",[\"X\"]=\"x\",[\"Y\"]=\"y\",[\"Z\"]=\"z\"}))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp867qnais.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp867qnais.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  if s:match(\"\
    %a\") then\n    return s:gsub(\"%a\",\n    function(ch)\n      return ch:upper()\
    \ == ch and ch:lower() or ch:upper()\n    end)\n  else\n    return s:reverse()\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ r = s:gsub(\"%a\",\n        function(c)\n            if c:upper() == c then\n\
    \                return c:lower()\n            else\n                return c:upper()\n\
    \            end\n        end)\n    if r == s then\n        return r:reverse()\n\
    \    else\n        return r\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  return\
    \ s:gsub('%a', function(c) return c == c:upper() and c:lower() or c:upper() end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixcj7vs8.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpixcj7vs8.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ res = {}\n    for k, v in ipairs(s:lower():gmatch(\"[a-z]\")) do\n        res[k]\
    \ = s:find(v) and (v:match(\"%u\") and v:lower() or v:upper()) or v\n    end\n\
    \    return #res > 0 and table.concat(res) or s:reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  return\
    \ s:gsub(\"[a-zA-Z]\", function(c) return c:lower() == c and c:upper() or c:lower()\
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jz072cr.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp2jz072cr.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    s\
    \ = string.gsub(s, \"%a\", function(c) return c:lower() == c and c:upper() or\
    \ c:lower() end)\n    return s:reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvr5lrl_.lua:18:\
    \ expected: \"aSdF\"\nactual: \"FdSa\"\nstack traceback:\n\t/tmp/tmptvr5lrl_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  return\
    \ string.gsub(s,\"%a\",function(x) return x == x:upper() and x:lower() or x:upper()\
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pl_0jdm.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp3pl_0jdm.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  if s:match('%a')\
    \ then\n    for c in s:gmatch('.') do\n      if c:match('%a') then\n        s\
    \ = s:gsub(c, c:lower() == c and c:upper() or c:lower())\n      end\n    end\n\
    \  else\n    s = s:reverse()\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    --\
    \ your code goes here\n    -- using string.reverse()\n    local str_list = {}\n\
    \    for i=1,#s do\n        if s:sub(i,i):find(\"%a\") ~= nil then\n         \
    \   if s:sub(i,i):lower() == s:sub(i,i) then\n                str_list[#str_list+1]\
    \ = s:sub(i,i):upper()\n            else\n                str_list[#str_list+1]\
    \ = s:sub(i,i):lower()\n            end\n        else\n            str_list[#str_list+1]\
    \ = s:sub(i,i)\n        end\n    end\n    str_list = table.concat(str_list, \"\
    \")\n    return str_list:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrrz5tpq.lua:32:\
    \ expected: \"aSdF\"\nactual: \"FdSa\"\nstack traceback:\n\t/tmp/tmpxrrz5tpq.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ replace = {['a'] = 'A', ['b'] = 'B', ['c'] = 'C', ['d'] = 'D', ['e'] = 'E',\
    \ ['f'] = 'F', ['g'] = 'G', ['h'] = 'H', ['i'] = 'I', ['j'] = 'J', ['k'] = 'K',\
    \ ['l'] = 'L', ['m'] = 'M', ['n'] = 'N', ['o'] = 'O', ['p'] = 'P', ['q'] = 'Q',\
    \ ['r'] = 'R', ['s'] = 'S', ['t'] = 'T', ['u'] = 'U', ['v'] = 'V', ['w'] = 'W',\
    \ ['x'] = 'X', ['y'] = 'Y', ['z'] = 'Z', ['A'] = 'a', ['B'] = 'b', ['C'] = 'c',\
    \ ['D'] = 'd', ['E'] = 'e', ['F'] = 'f', ['G'] = 'g', ['H'] = 'h', ['I'] = 'i',\
    \ ['J'] = 'j', ['K'] = 'k', ['L'] = 'l', ['M'] = 'm', ['N'] = 'n', ['O'] = 'o',\
    \ ['P'] = 'p', ['Q'] = 'q', ['R'] = 'r', ['S'] = 's', ['T'] = 't', ['U'] = 'u',\
    \ ['V'] = 'v', ['W'] = 'w', ['X'] = 'x', ['Y'] = 'y', ['Z'] = 'z'}\n  local res\
    \ = ''\n  for i = 1, #s do\n    if replace[s:sub(i, i)] then\n      res = res\
    \ .. replace[s:sub(i, i)]\n    else\n      res = res .. s:sub(i, i)\n    end\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67dg9p5r.lua:27:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp67dg9p5r.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ res = {}\n    for i = 1, #s do\n        if string.match(s[i], \"%l\") then\n\
    \            if string.lower(s[i]) == s[i] then\n                res[i] = string.upper(s[i])\n\
    \            else\n                res[i] = string.lower(s[i])\n            end\n\
    \        else\n            res[i] = s[i]\n        end\n    end\n    return table.concat(res)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnvkvmbz5.lua:13:\
    \ bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpnvkvmbz5.lua:13: in local 'candidate'\n\t/tmp/tmpnvkvmbz5.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ ans = {}\n    local count = 0\n    for ch in s:gmatch\".\" do\n        if ch:match\"\
    %a\" then\n            count = count + 1\n            ans[#ans+1] = ch:upper()\
    \ == ch and ch:lower() or ch:upper()\n        else\n            ans[#ans+1] =\
    \ ch\n        end\n    end\n    return count == 0 and s:reverse() or table.concat(ans)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n\tlocal\
    \ res\n\tif string.match(s, \"%l\") then\n\t\tres = string.gsub(s, \"%l\", function(x)\n\
    \t\t\treturn string.upper(x)\n\t\tend)\n\t\tres = string.gsub(res, \"%u\", function(x)\n\
    \t\t\treturn string.lower(x)\n\t\tend)\n\telse\n\t\tres = string.reverse(s)\n\t\
    end\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdf_59jn.lua:28:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpqdf_59jn.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  if not\
    \ s:match(\"%l\") then\n    return s:reverse()\n  end\n  return s:gsub(\"(%a)\"\
    , function(c) return c == c:upper() and c:lower() or c:upper() end)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  return\
    \ s:gsub(\"%l\",function(c)\n    return c:upper()==c and c:lower() or c:upper()\n\
    \  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprocwjjey.lua:19:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmprocwjjey.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  if string.find(s,\
    \ \"[%a]\") then\n    local new_s = \"\"\n    for c in s:gmatch(\".\") do\n  \
    \    if c:match(\"%l\") then\n        new_s = new_s .. c:upper()\n      elseif\
    \ c:match(\"%u\") then\n        new_s = new_s .. c:lower()\n      else\n     \
    \   new_s = new_s .. c\n      end\n    end\n    return new_s\n  else\n    return\
    \ s:reverse()\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ count = 0\n    local n = #s\n    local res = ''\n    for i = 1, n do\n     \
    \   local c = s:sub(i, i)\n        if c:match('%a') then\n            count =\
    \ count + 1\n            if c:match('%u') then\n                res = res .. c:lower()\n\
    \            else\n                res = res .. c:upper()\n            end\n \
    \       else\n            res = res .. c\n        end\n    end\n    if count ==\
    \ 0 then\n        res = s:reverse()\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  return\
    \ (s:gsub(\"%a\", function(ch)\n    if ch:lower() == ch then\n      return ch:upper()\n\
    \    else\n      return ch:lower()\n    end\n  end))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_ugjx_h.lua:24:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpn_ugjx_h.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n\treturn\
    \ (string.gsub(s, \"%a\", \n\t\tfunction(c)\n\t\t\tif string.match(c, \"%a\")\
    \ then\n\t\t\t\tif string.match(c, \"%l\") then\n\t\t\t\t\treturn string.upper(c)\n\
    \t\t\t\telse\n\t\t\t\t\treturn string.lower(c)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \t))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23ii9cbq.lua:28:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp23ii9cbq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ t = {}\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c:match('%a')\
    \ then\n      if c:match('%u') then\n        c = c:lower()\n      else\n     \
    \   c = c:upper()\n      end\n    end\n    t[#t + 1] = c\n  end\n  return #t ==\
    \ 0 and s:reverse() or table.concat(t)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxv3hk2ls.lua:30:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpxv3hk2ls.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n\tlocal\
    \ str = {}\n\tlocal res = {}\n\tfor v in s:gmatch(\"%a\") do table.insert(str,\
    \ v) end\n\tif #str == 0 then\n\t\tfor v in s:gmatch(\"%S\") do table.insert(res,\
    \ v) end\n\t\treturn table.concat(res):reverse()\n\tend\n\tfor v in s:gmatch(\"\
    %S\") do table.insert(res, v) end\n\tfor i = 1, #res do\n\t\tfor k, v in pairs(str)\
    \ do\n\t\t\tif res[i] == v then res[i] = res[i]:upper() end\n\t\t\tif res[i] ==\
    \ v:upper() then res[i] = res[i]:lower() end\n\t\tend\n\tend\n\treturn table.concat(res)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9zvpr5r.lua:31:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmps9zvpr5r.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ (s:gsub(\"%a\",function(x)\n        return x == x:upper() and x:lower() or x:upper()\
    \ end))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoq__ke0s.lua:19:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpoq__ke0s.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ bool = {}\n  for i=1, string.len(s) do\n    if string.find(s, \"%a\") then\n\
    \      bool[i] = true\n    else\n      bool[i] = false\n    end\n  end\n  local\
    \ new = \"\"\n  for i=1, string.len(s) do\n    if bool[i] then\n      new = new\
    \ .. string.char(string.byte(s[i])^32)\n    else\n      new = new .. s[i]\n  \
    \  end\n  end\n  return new\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi3e2ds5m.lua:22:\
    \ bad argument #1 to 'byte' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpi3e2ds5m.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpi3e2ds5m.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    s\
    \ = s:gsub(\"([%a])\", function(c)\n        if c:lower() == c then\n         \
    \   return c:upper()\n        else\n            return c:lower()\n        end\n\
    \    end)\n    if s:lower() == s then\n        return s:reverse()\n    end\n \
    \   return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ str = \"\"\n  for i = #s, 1, -1 do\n    local ch = s:sub(i, i)\n    if ch:match(\"\
    %a\") then\n      str = str .. ch:reverse()\n    else\n      str = str .. ch\n\
    \    end\n  end\n  return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw577hszh.lua:26:\
    \ expected: \"aSdF\"\nactual: \"fDsA\"\nstack traceback:\n\t/tmp/tmpw577hszh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  if not\
    \ s:match(\"%a\") then\n    return s:reverse()\n  end\n  return s:gsub(\"[a-zA-Z]\"\
    , function(x)\n    return x:lower() == x and x:upper() or x:lower()\n  end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ t, r = {}, ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n       \
    \ if c == c:upper() then\n            t[i] = c:lower()\n        elseif c == c:lower()\
    \ then\n            t[i] = c:upper()\n        else\n            t[i] = c\n   \
    \     end\n    end\n    for i = #t, 1, -1 do\n        r = r .. t[i]\n    end\n\
    \    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmg_9znp0.lua:31:\
    \ expected: \"aSdF\"\nactual: \"FdSa\"\nstack traceback:\n\t/tmp/tmpmg_9znp0.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ r = {}\n    for c in s:gmatch('.') do\n        if c:match('%a') then\n     \
    \       if c:match('%l') then r[#r+1] = c:upper()\n            else r[#r+1] =\
    \ c:lower() end\n        else r[#r+1] = c end\n    end\n    return #r>0 and table.concat(r)\
    \ or s:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxbvtu5e3.lua:25:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpxbvtu5e3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ t = {}\n    for c in s:gmatch(\"%a\") do\n        t[#t+1] = c:lower() == c and\
    \ c:upper() or c:lower()\n    end\n    local t2 = {}\n    for i = #t, 1, -1 do\n\
    \        t2[#t2+1] = t[i]\n    end\n    return #t == 0 and s:reverse() or table.concat(t2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpth8qr5pj.lua:25:\
    \ expected: \"aSdF\"\nactual: \"FdSa\"\nstack traceback:\n\t/tmp/tmpth8qr5pj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ t = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match(\"\
    %a\") then\n            t[#t + 1] = c:lower() == c and c:upper() or c:lower()\n\
    \        else\n            t[#t + 1] = c\n        end\n    end\n    return #t\
    \ == 0 and s:reverse() or table.concat(t)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wpxsic9.lua:27:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp6wpxsic9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s2 = \"\"\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c\
    \ == c:upper() then\n            s2 = s2 .. c:lower()\n        elseif c == c:lower()\
    \ then\n            s2 = s2 .. c:upper()\n        else\n            s2 = s2 ..\
    \ c\n        end\n    end\n    if #s2 == #s then\n        return s2\n    else\n\
    \        return s:reverse()\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0td2htb.lua:33:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmph0td2htb.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    --\
    \ TODO: Write your code here\n    if(string.find(s,\"%l\")) then\n        local\
    \ pattern = \"(%l)\"\n        local p = string.gsub(s,pattern,string.upper)\n\
    \        return string.gsub(p,pattern,string.lower)\n    else\n        return\
    \ string.reverse(s)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpit_qt5qq.lua:24:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpit_qt5qq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n\tif s:match(\"\
    %a\") then\n\t\treturn s:gsub(\"(%a)\", {[\"a\"] = \"A\", [\"A\"] = \"a\", [\"\
    b\"] = \"B\", [\"B\"] = \"b\", [\"c\"] = \"C\", [\"C\"] = \"c\", [\"d\"] = \"\
    D\", [\"D\"] = \"d\", [\"e\"] = \"E\", [\"E\"] = \"e\", [\"f\"] = \"F\", [\"F\"\
    ] = \"f\", [\"g\"] = \"G\", [\"G\"] = \"g\", [\"h\"] = \"H\", [\"H\"] = \"h\"\
    , [\"i\"] = \"I\", [\"I\"] = \"i\", [\"j\"] = \"J\", [\"J\"] = \"j\", [\"k\"]\
    \ = \"K\", [\"K\"] = \"k\", [\"l\"] = \"L\", [\"L\"] = \"l\", [\"m\"] = \"M\"\
    , [\"M\"] = \"m\", [\"n\"] = \"N\", [\"N\"] = \"n\", [\"o\"] = \"O\", [\"O\"]\
    \ = \"o\", [\"p\"] = \"P\", [\"P\"] = \"p\", [\"q\"] = \"Q\", [\"Q\"] = \"q\"\
    , [\"r\"] = \"R\", [\"R\"] = \"r\", [\"s\"] = \"S\", [\"S\"] = \"s\", [\"t\"]\
    \ = \"T\", [\"T\"] = \"t\", [\"u\"] = \"U\", [\"U\"] = \"u\", [\"v\"] = \"V\"\
    , [\"V\"] = \"v\", [\"w\"] = \"W\", [\"W\"] = \"w\", [\"x\"] = \"X\", [\"X\"]\
    \ = \"x\", [\"y\"] = \"Y\", [\"Y\"] = \"y\", [\"z\"] = \"Z\", [\"Z\"] = \"z\"\
    })\n\telse\n\t\treturn s:reverse()\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ t = {}\n    for i = 1, #s do\n        t[i] = s:sub(i, i)\n    end\n    local\
    \ newt = {}\n    for i = 1, #t do\n        if t[i]:match(\"%l\") then\n      \
    \      newt[i] = t[i]:upper()\n        elseif t[i]:match(\"%u\") then\n      \
    \      newt[i] = t[i]:lower()\n        else\n            newt[i] = t[i]\n    \
    \    end\n    end\n    return #newt > 0 and table.concat(newt) or s:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2xn5brg.lua:32:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpd2xn5brg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  s =\
    \ s:gsub(\"%l\", function(c)\n    return c:upper() == c and c:lower() or c:upper()\n\
    \  end)\n  return s:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0d8drr3d.lua:20:\
    \ expected: \"aSdF\"\nactual: \"FDSA\"\nstack traceback:\n\t/tmp/tmp0d8drr3d.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ t = {}\n    for v in s:gmatch('.') do\n        if v:match('%a') then\n     \
    \       t[#t+1] = v:lower() == v and v:upper() or v:lower()\n        else\n  \
    \          t[#t+1] = v\n        end\n    end\n    return #t > 0 and table.concat(t)\
    \ or s:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzlgmtmxx.lua:26:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpzlgmtmxx.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ final_string = \"\"\n    local new_char\n    for i=1, string.len(s) do\n   \
    \     local char = string.sub(s, i, i)\n        local lowercase = string.lower(char)\n\
    \        if char == lowercase then\n            new_char = string.upper(char)\n\
    \        else\n            new_char = string.lower(char)\n        end\n      \
    \  final_string = final_string .. new_char\n    end\n    return final_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3rjj0vh.lua:30:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpd3rjj0vh.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ t = \"\"\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match(\"\
    %a\") then\n            c = c:lower() == c and c:upper() or c:lower()\n      \
    \  end\n        t = t .. c\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5pjy1q1.lua:26:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpi5pjy1q1.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = #s, 1, -1 do\n        if string.match(s[i], \"%l\")\
    \ then\n            str = str .. string.lower(s[i])\n        elseif string.match(s[i],\
    \ \"%u\") then\n            str = str .. string.upper(s[i])\n        else\n  \
    \          str = str .. s[i]\n        end\n    end\n    return str\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv0n9wuun.lua:13:\
    \ bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpv0n9wuun.lua:13: in local 'candidate'\n\t/tmp/tmpv0n9wuun.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ string.gsub(s, \"(%a)\", function(c) return string.lower(c) == c and string.upper(c)\
    \ or string.lower(c) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppssz6rjp.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmppssz6rjp.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    if\
    \ not s:find(\"%a\") then\n        return s:reverse()\n    end\n    return s:gsub(\"\
    %a\", function(c)\n        return c:lower() == c and c:upper() or c:lower()\n\
    \    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    s\
    \ = s:gsub(\"[a-z]\", function(c)\n        if string.lower(c) == c then\n    \
    \        return string.upper(c)\n        else\n            return string.lower(c)\n\
    \        end\n    end)\n    return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqkiwvda.lua:24:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpzqkiwvda.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n\tlocal\
    \ res = {}\n\tlocal letters = {}\n\tif not s:match('%a') then\n\t\treturn s:reverse()\n\
    \tend\n\tfor i = 1, #s do\n\t\tif s:sub(i, i):match('%a') then\n\t\t\tlocal letter\
    \ = s:sub(i, i)\n\t\t\tif letter == letter:upper() then\n\t\t\t\ttable.insert(letters,\
    \ letter:lower())\n\t\t\telse\n\t\t\t\ttable.insert(letters, letter:upper())\n\
    \t\t\tend\n\t\telse\n\t\t\ttable.insert(res, s:sub(i, i))\n\t\tend\n\tend\n\t\
    for i = 1, #letters do\n\t\ttable.insert(res, letters[i])\n\tend\n\treturn table.concat(res)\n\
    end\nreturn solve\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl93is29z.lua:34: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ str = ''\n  local t = {}\n  for w in s:gmatch(\".\") do\n    t[#t+1] = w\n \
    \ end\n  for i = #t, 1, -1 do\n    if t[i]:match(\"%w\") then\n      if t[i] ==\
    \ t[i]:upper() then\n        str = str .. t[i]:lower()\n      else\n        str\
    \ = str .. t[i]:upper()\n      end\n    else\n      str = str .. t[i]\n    end\n\
    \  end\n  return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5ch8cku.lua:33:\
    \ expected: \"aSdF\"\nactual: \"FdSa\"\nstack traceback:\n\t/tmp/tmpf5ch8cku.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result, letter = {}, \"abcdefghijklmnopqrstuvwxyz\"\n    for i = #s, 1, -1 do\n\
    \        local letter_upper = letter:upper()\n        local current_char = s:sub(i,\
    \ i)\n        if letter:find(current_char) or letter_upper:find(current_char)\
    \ then\n            local upper_char = current_char:upper()\n            if upper_char\
    \ == current_char then\n                current_char = current_char:lower()\n\
    \            else\n                current_char = upper_char\n            end\n\
    \        end\n        table.insert(result, current_char)\n    end\n    return\
    \ table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprb6b_x3u.lua:31:\
    \ expected: \"aSdF\"\nactual: \"FdSa\"\nstack traceback:\n\t/tmp/tmprb6b_x3u.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if\
    \ c:match(\"%a\") then\n            str = str .. c:gsub(\"%l\", string.upper):gsub(\"\
    %u\", string.lower)\n        else\n            str = str .. c\n        end\n \
    \   end\n    return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6vxqmnw.lua:26:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpz6vxqmnw.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ new_s = ''\n    for i = 1, #s do\n        if s[i]:match('%l') then\n       \
    \     new_s = new_s .. s[i]:upper()\n        elseif s[i]:match('%L') then\n  \
    \          new_s = new_s .. s[i]:lower()\n        else\n            new_s = new_s\
    \ .. s[i]\n        end\n    end\n    return #new_s > 0 and new_s or s:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5zpagdxo.lua:13:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp5zpagdxo.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp5zpagdxo.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ res = \"\"\n  for i = 1, #s do\n    if s[i]:match(\"%a\") then\n      res =\
    \ res .. s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()\n    else\n   \
    \   res = res .. s[i]\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0vrwn3o8.lua:13:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp0vrwn3o8.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp0vrwn3o8.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    --\
    \ your code here\n    local reverseStr = ''\n    local switchTable = {\n     \
    \   ['a'] = 'A',\n        ['b'] = 'B',\n        ['c'] = 'C',\n        ['d'] =\
    \ 'D',\n        ['e'] = 'E',\n        ['f'] = 'F',\n        ['g'] = 'G',\n   \
    \     ['h'] = 'H',\n        ['i'] = 'I',\n        ['j'] = 'J',\n        ['k']\
    \ = 'K',\n        ['l'] = 'L',\n        ['m'] = 'M',\n        ['n'] = 'N',\n \
    \       ['o'] = 'O',\n        ['p'] = 'P',\n        ['q'] = 'Q',\n        ['r']\
    \ = 'R',\n        ['s'] = 'S',\n        ['t'] = 'T',\n        ['u'] = 'U',\n \
    \       ['v'] = 'V',\n        ['w'] = 'W',\n        ['x'] = 'X',\n        ['y']\
    \ = 'Y',\n        ['z'] = 'Z',\n        ['A'] = 'a',\n        ['B'] = 'b',\n \
    \       ['C'] = 'c',\n        ['D'] = 'd',\n        ['E'] = 'e',\n        ['F']\
    \ = 'f',\n        ['G'] = 'g',\n        ['H'] = 'h',\n        ['I'] = 'i',\n \
    \       ['J'] = 'j',\n        ['K'] = 'k',\n        ['L'] = 'l',\n        ['M']\
    \ = 'm',\n        ['N'] = 'n',\n        ['O'] = 'o',\n        ['P'] = 'p',\n \
    \       ['Q'] = 'q',\n        ['R'] = 'r',\n        ['S'] = 's',\n        ['T']\
    \ = 't',\n        ['U'] = 'u',\n        ['V'] = 'v',\n        ['W'] = 'w',\n \
    \       ['X'] = 'x',\n        ['Y'] = 'y',\n        ['Z'] = 'z',\n    }\n    for\
    \ i = 1, #s do\n        local code = string.byte(s,\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvrjb8rxm.lua:69: ')' expected (to close '(' at line 68) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  if not\
    \ string.match(s, '%a') then return string.reverse(s) end\n  return string.gsub(s,\
    \ '%a', function(c)\n      if string.match(c, '%l') then return string.upper(c)\n\
    \      else return string.lower(c) end\n    end)\nend\nreturn solve\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb5diqbq9.lua:18: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  if #s\
    \ == 0 then\n    return \"\"\n  end\n  s = s:gsub('.', {['A'] = 'a', ['B'] = 'b',\
    \ ['C'] = 'c', ['D'] = 'd', ['E'] = 'e', ['F'] = 'f', ['G'] = 'g', ['H'] = 'h',\
    \ ['I'] = 'i', ['J'] = 'j', ['K'] = 'k', ['L'] = 'l', ['M'] = 'm', ['N'] = 'n',\
    \ ['O'] = 'o', ['P'] = 'p', ['Q'] = 'q', ['R'] = 'r', ['S'] = 's', ['T'] = 't',\
    \ ['U'] = 'u', ['V'] = 'v', ['W'] = 'w', ['X'] = 'x', ['Y'] = 'y', ['Z'] = 'z',\
    \ ['a'] = 'A', ['b'] = 'B', ['c'] = 'C', ['d'] = 'D', ['e'] = 'E', ['f'] = 'F',\
    \ ['g'] = 'G', ['h'] = 'H', ['i'] = 'I', ['j'] = 'J', ['k'] = 'K', ['l'] = 'L',\
    \ ['m'] = 'M', ['n'] = 'N', ['o'] = 'O', ['p'] = 'P', ['q'] = 'Q', ['r'] = 'R',\
    \ ['s'] = 'S', ['t'] = 'T', ['u'] = 'U', ['v'] = 'V', ['w'] = 'W', ['x'] = 'X',\
    \ ['y'] = 'Y', ['z'] = 'Z'})\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4ml5ftt.lua:22:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpq4ml5ftt.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = ''\n    for c in s:gmatch('.') do\n        if c:match('%a') then\n   \
    \         if c:match('%l') then\n                str = str .. c:upper()\n    \
    \        else\n                str = str .. c:lower()\n            end\n     \
    \   else\n            str = str .. c\n        end\n    end\n    return (str ==\
    \ '') and s:reverse() or str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4cbxpude.lua:30:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp4cbxpude.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ num = 0\n    for i = 1, string.len(s) do\n        if string.match(s, \"%a\"\
    ) then\n            num = num + 1\n        end\n    end\n    if num == 0 then\n\
    \        return string.reverse(s)\n    end\n    local s2 = \"\"\n    for i = 1,\
    \ string.len(s) do\n        if string.match(s, \"%a\") then\n            s2 =\
    \ s2 .. string.lower(string.sub(s, i, i))\n        else\n            s2 = s2 ..\
    \ string.sub(s, i, i)\n        end\n    end\n    local s3 = \"\"\n    for i =\
    \ 1, string.len(s) do\n        if string.match(s, \"%a\") then\n            if\
    \ string.lower(string.sub(s, i, i)) == string.sub(s2, i, i) then\n           \
    \     s3 = s3 .. string.upper(string.sub(s, i, i))\n            else\n       \
    \         s3 = s3 .. string.lower(string.sub(s, i, i))\n            end\n    \
    \    else\n            s3 = s3 .. string.sub(s, i, i)\n        end\n    end\n\
    \    return s3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgs7p9ac9.lua:46:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpgs7p9ac9.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    --\
    \ Write your code here\n    local n = #s\n    local result\n    if n == 0 then\n\
    \        result = s\n    else\n        result = {}\n        for i = 1, n do\n\
    \            local c = s:sub(i, i)\n            local _, num = string.find(c,\
    \ \"%a\")\n            if num then\n                result[i] = c:lower() == c\
    \ and c:upper() or c:lower()\n            else\n                result[i] = c\n\
    \            end\n        end\n        result = table.concat(result)\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7r26k1d4.lua:36:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp7r26k1d4.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ res = \"\"\n  local sLen = #s\n  if sLen > 0 then\n    for i = 1, sLen do\n\
    \      local c = s:sub(i, i)\n      local cCase = c:lower()\n      if c ~= cCase\
    \ then\n        res = res .. cCase\n      else\n        res = res .. c:upper()\n\
    \      end\n    end\n  else\n    res = s\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq441h8x9.lua:33:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpq441h8x9.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ t = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c ==\
    \ c:upper() then\n            t[#t + 1] = c:lower()\n        elseif c == c:lower()\
    \ then\n            t[#t + 1] = c:upper()\n        else\n            t[#t + 1]\
    \ = c\n        end\n    end\n    return #t == 0 and s or table.concat(t)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1c9p5c3.lua:29:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp_1c9p5c3.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for char in s:gmatch(\".\") do\n        local ascii = string.byte(char)\n\
    \        if ascii >= 97 and ascii <= 122 then\n            result = result ..\
    \ string.char(ascii - 32)\n        elseif ascii >= 65 and ascii <= 90 then\n \
    \           result = result .. string.char(ascii + 32)\n        else\n       \
    \     result = result .. char\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphyv77g97.lua:29:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmphyv77g97.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ res = ''\n    for i = 1, #s do\n        if string.match(s[i], '[a-zA-Z]') then\n\
    \            res = res .. string.reverse(s[i])\n        else\n            res\
    \ = res .. s[i]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_cnru0fp.lua:13:\
    \ bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmp_cnru0fp.lua:13: in local 'candidate'\n\t/tmp/tmp_cnru0fp.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ s:gsub('%a',function(c)return c==c:upper()and c:lower()or c:upper()end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrv0z95i.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpxrv0z95i.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ s:gsub(\"%a\", {[\"a\"] = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\", [\"d\"] =\
    \ \"D\", [\"e\"] = \"E\", [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"] = \"H\", [\"\
    i\"] = \"I\", [\"j\"] = \"J\", [\"k\"] = \"K\", [\"l\"] = \"L\", [\"m\"] = \"\
    M\", [\"n\"] = \"N\", [\"o\"] = \"O\", [\"p\"] = \"P\", [\"q\"] = \"Q\", [\"r\"\
    ] = \"R\", [\"s\"] = \"S\", [\"t\"] = \"T\", [\"u\"] = \"U\", [\"v\"] = \"V\"\
    , [\"w\"] = \"W\", [\"x\"] = \"X\", [\"y\"] = \"Y\", [\"z\"] = \"Z\", [\"A\"]\
    \ = \"a\", [\"B\"] = \"b\", [\"C\"] = \"c\", [\"D\"] = \"d\", [\"E\"] = \"e\"\
    , [\"F\"] = \"f\", [\"G\"] = \"g\", [\"H\"] = \"h\", [\"I\"] = \"i\", [\"J\"]\
    \ = \"j\", [\"K\"] = \"k\", [\"L\"] = \"l\", [\"M\"] = \"m\", [\"N\"] = \"n\"\
    , [\"O\"] = \"o\", [\"P\"] = \"p\", [\"Q\"] = \"q\", [\"R\"] = \"r\", [\"S\"]\
    \ = \"s\", [\"T\"] = \"t\", [\"U\"] = \"u\", [\"V\"] = \"v\", [\"W\"] = \"w\"\
    , [\"X\"] = \"x\", [\"Y\"] = \"y\", [\"Z\"] = \"z\"})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xu4nsr9.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp2xu4nsr9.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  -- check\
    \ if the string has any letters\n  local hasLetters = false\n  for i = 1, #s do\n\
    \    if s:find(\"%a\") then\n      hasLetters = true\n      break\n    end\n \
    \ end\n  if not hasLetters then return s:reverse() end\n  local res = \"\"\n \
    \ for i = 1, #s do\n    local s_i = s:sub(i, i)\n    if s_i:find(\"%a\") then\n\
    \      if s_i:find(\"%l\") then\n        res = res .. s_i:upper()\n      else\n\
    \        res = res .. s_i:lower()\n      end\n    else\n      res = res .. s_i\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ a = {}\n  for c in s:gmatch'.' do\n    if c:match'%l' then\n      a[#a+1] =\
    \ c:upper()\n    elseif c:match'%u' then\n      a[#a+1] = c:lower()\n    else\n\
    \      a[#a+1] = c\n    end\n  end\n  return #a>0 and table.concat(a) or s:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41vitr5o.lua:28:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp41vitr5o.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ function rev(c)\n        return (c:match(\"%a\") and c:lower() or c:upper())\n\
    \    end\n    return s:gsub(\"%a\", rev)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36pcp4y5.lua:20:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmp36pcp4y5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ res = {}\n  for c in s:gmatch(\".\") do\n    if c:match(\"%a\") then\n     \
    \ if c:match(\"%u\") then\n        table.insert(res, c:lower())\n      else\n\
    \        table.insert(res, c:upper())\n      end\n    else\n      table.insert(res,\
    \ c)\n    end\n  end\n  return #res == 0 and s or table.concat(res)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvwk_5gl.lua:30:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpqvwk_5gl.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    if\
    \ string.match(s, '%a') then\n        return string.gsub(s, '%a', function(c)\n\
    \            if c:upper() == c then return c:lower() else return c:upper() end\n\
    \        end)\n    else\n        return string.reverse(s)\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ res = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:match('%l') then res = res .. c:upper() else res = res\
    \ .. c:lower() end\n        else\n            res = res .. c\n        end\n  \
    \  end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjcv8zmst.lua:27:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpjcv8zmst.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ s:gsub(\"[a-zA-Z]\", {[\"a\"] = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\", [\"\
    d\"] = \"D\", [\"e\"] = \"E\", [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"] = \"\
    H\", [\"i\"] = \"I\", [\"j\"] = \"J\", [\"k\"] = \"K\", [\"l\"] = \"L\", [\"m\"\
    ] = \"M\", [\"n\"] = \"N\", [\"o\"] = \"O\", [\"p\"] = \"P\", [\"q\"] = \"Q\"\
    , [\"r\"] = \"R\", [\"s\"] = \"S\", [\"t\"] = \"T\", [\"u\"] = \"U\", [\"v\"]\
    \ = \"V\", [\"w\"] = \"W\", [\"x\"] = \"X\", [\"y\"] = \"Y\", [\"z\"] = \"Z\"\
    , [\"A\"] = \"a\", [\"B\"] = \"b\", [\"C\"] = \"c\", [\"D\"] = \"d\", [\"E\"]\
    \ = \"e\", [\"F\"] = \"f\", [\"G\"] = \"g\", [\"H\"] = \"h\", [\"I\"] = \"i\"\
    , [\"J\"] = \"j\", [\"K\"] = \"k\", [\"L\"] = \"l\", [\"M\"] = \"m\", [\"N\"]\
    \ = \"n\", [\"O\"] = \"o\", [\"P\"] = \"p\", [\"Q\"] = \"q\", [\"R\"] = \"r\"\
    , [\"S\"] = \"s\", [\"T\"] = \"t\", [\"U\"] = \"u\", [\"V\"] = \"v\", [\"W\"]\
    \ = \"w\", [\"X\"] = \"x\", [\"Y\"] = \"y\", [\"Z\"] = \"z\"})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ijk2f93.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp3ijk2f93.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ newStr = ''\n  local isLetterPresent = false\n  for i = 1, s:len() do\n    local\
    \ c = s:sub(i, i)\n    if c:find('%a') then\n      isLetterPresent = true\n  \
    \    newStr = newStr .. c:lower() == c and c:upper() or c:lower()\n    else\n\
    \      newStr = newStr .. c\n    end\n  end\n  return isLetterPresent and newStr\
    \ or newStr:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6m10az7.lua:28:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpw6m10az7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n\tlocal\
    \ revS = \"\"\n\tif s:match(\"%l\") then\n\t\tfor i=1, #s do\n\t\t\tif s:sub(i,i):match(\"\
    %a\") then\n\t\t\t\tif s:sub(i,i):lower() == s:sub(i,i) then\n\t\t\t\t\trevS =\
    \ revS .. s:sub(i,i):upper()\n\t\t\t\telse\n\t\t\t\t\trevS = revS .. s:sub(i,i):lower()\n\
    \t\t\t\tend\n\t\t\telse\n\t\t\t\trevS = revS .. s:sub(i,i)\n\t\t\tend\n\t\tend\n\
    \telse\n\t\trevS = s:reverse()\n\tend\n\treturn revS\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  return\
    \ s:gsub('.', function(c)\n    return c:lower() == c and c:upper() or c:lower()\n\
    \  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkvt6zdl.lua:20:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpjkvt6zdl.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ len = #s\n    local letters, t = {}, {}\n    for i = 1, len do\n        table.insert(t,\
    \ s:sub(i, i))\n    end\n    local j = 0\n    for i = 1, len do\n        if t[i]:match(\"\
    %a\") then\n            j = j + 1\n            table.insert(letters, t[i])\n \
    \       end\n    end\n    if j == 0 then return s:reverse() end\n    for i = 1,\
    \ len do\n        if t[i]:match(\"%a\") then\n            t[i] = letters[j]\n\
    \            j = j - 1\n        end\n    end\n    return table.concat(t)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz266gpo.lua:36:\
    \ expected: \"aSdF\"\nactual: \"fDsA\"\nstack traceback:\n\t/tmp/tmprz266gpo.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ res = {}\n  for c in s:gmatch(\".\") do\n    if c:match(\"%a\") then\n     \
    \ if c:match(\"%u\") then\n        table.insert(res, c:lower())\n      else\n\
    \        table.insert(res, c:upper())\n      end\n    else\n      table.insert(res,\
    \ c)\n    end\n  end\n  return #res == 0 and s or table.concat(res)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfsg9x57f.lua:30:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpfsg9x57f.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  if (s:match('%a'))\
    \ then\n    return s:gsub('%a', function(c) return c:lower() == c and c:upper()\
    \ or c:lower() end)\n  else\n    return s:reverse()\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = {}\n    for i = 1, #s do\n        if s[i]:match(\"%l\") then\n    \
    \        table.insert(result, s[i]:upper())\n        elseif s[i]:match(\"%u\"\
    ) then\n            table.insert(result, s[i]:lower())\n        else\n       \
    \     table.insert(result, s[i])\n        end\n    end\n    return #result > 0\
    \ and table.concat(result) or s:reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn4tyasqx.lua:13:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpn4tyasqx.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpn4tyasqx.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ s:gsub(\"(%w)\", {a = \"A\", b = \"B\", c = \"C\", d = \"D\", e = \"E\", f =\
    \ \"F\", g = \"G\", h = \"H\", i = \"I\", j = \"J\", k = \"K\", l = \"L\", m =\
    \ \"M\", n = \"N\", o = \"O\", p = \"P\", q = \"Q\", r = \"R\", s = \"S\", t =\
    \ \"T\", u = \"U\", v = \"V\", w = \"W\", x = \"X\", y = \"Y\", z = \"Z\", A =\
    \ \"a\", B = \"b\", C = \"c\", D = \"d\", E = \"e\", F = \"f\", G = \"g\", H =\
    \ \"h\", I = \"i\", J = \"j\", K = \"k\", L = \"l\", M = \"m\", N = \"n\", O =\
    \ \"o\", P = \"p\", Q = \"q\", R = \"r\", S = \"s\", T = \"t\", U = \"u\", V =\
    \ \"v\", W = \"w\", X = \"x\", Y = \"y\", Z = \"z\"})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5eg51fmi.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp5eg51fmi.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ res = {}\n    for i, c in ipairs(s) do\n        if string.match(c, \"[a-zA-Z]\"\
    ) then\n            if string.match(c, \"[a-z]\") then\n                table.insert(res,\
    \ string.upper(c))\n            else\n                table.insert(res, string.lower(c))\n\
    \            end\n        else\n            table.insert(res, c)\n        end\n\
    \    end\n    return table.concat(res)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2075sl_.lua:29:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpw2075sl_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ tmp = s:gsub(\"%a\", function(c) return c:upper() == c and c:lower() or c:upper()\
    \ end)\n    return s:match(\"%a\") and tmp or s:reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ c=\"\"\n    local new=\"\"\n    local s=\"\"\n    local chars = {}\n    for\
    \ c in s:gmatch\".\" do table.insert(chars, c) end\n    for i=#chars,1,-1 do\n\
    \        if chars[i]:match(\"%a\") then\n            if chars[i] == chars[i]:upper()\
    \ then\n                new = new..chars[i]:lower()\n            else\n      \
    \          new = new..chars[i]:upper()\n            end\n        else\n      \
    \      new = new..chars[i]\n        end\n    end\n    return new\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyffcalgm.lua:33:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpyffcalgm.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ s:gsub(\"%l\", function(c) return c:upper() end):gsub(\"%u\", function(c) return\
    \ c:lower() end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4ln0q2c.lua:17:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpx4ln0q2c.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ res = {}\n    for i = 1, #s do\n        if s[i]:find('%a') then\n          \
    \  res[i] = s[i]:gsub('%a', function(c)\n                return c:upper() == c\
    \ and c:lower() or c:upper()\n            end)\n        else\n            res[i]\
    \ = s[i]\n        end\n    end\n    return #res == 0 and s:reverse() or table.concat(res)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplc0v3o73.lua:13:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmplc0v3o73.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmplc0v3o73.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ solved = ''\n    for i = 1, #s do\n        if s[i]:find('%a') then\n       \
    \     solved = solved .. s[i]:gsub('%a', {['A'] = 'a', ['a'] = 'A'})\n       \
    \ else\n            solved = solved .. s[i]\n        end\n    end\n    return\
    \ solved\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe86sd150.lua:13:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpe86sd150.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpe86sd150.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ (s:gsub(\"[%a]\",function(ch)\n        return ch:upper()==ch and ch:lower()\
    \ or ch:upper()\n    end))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1qbzm7z.lua:20:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpn1qbzm7z.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    if\
    \ not s:find(\"%a\") then return s:reverse() end\n    local t = \"\"\n    for\
    \ c in s:gmatch\".\" do\n        if c:find(\"%a\") then\n            t = t ..\
    \ c:lower() == c and c:upper() or c:lower()\n        else\n            t = t ..\
    \ c\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t8fhh8t.lua:26:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmp2t8fhh8t.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    if\
    \ s:match(\"%a\") then\n        return (s:gsub(\"%a\", function(c) return c:upper()==c\
    \ and c:lower() or c:upper() end))\n    else\n        return (s:reverse())\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n\tlocal\
    \ t = {}\n\tfor k in s:gmatch('%a') do\n\t\tif k == k:upper() then\n\t\t\tt[#t+1]\
    \ = k:lower()\n\t\telse\n\t\t\tt[#t+1] = k:upper()\n\t\tend\n\tend\n\treturn #t>0\
    \ and table.concat(t) or s:reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_if67ms_.lua:28:\
    \ expected: \"#A@c\"\nactual: \"Ac\"\nstack traceback:\n\t/tmp/tmp_if67ms_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    --\
    \ your code here\n    local str = \"\"\n    for i = 1, #s do\n        if s[i]\
    \ == string.upper(s[i]) then\n            str = str .. string.lower(s[i])\n  \
    \      elseif s[i] == string.lower(s[i]) then\n            str = str .. string.upper(s[i])\n\
    \        else\n            str = str .. s[i]\n        end\n    end\n    if str\
    \ == \"\" then\n        return s\n    else\n        return str\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ohjvzbn.lua:14:\
    \ bad argument #1 to 'upper' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmp6ohjvzbn.lua:14: in local 'candidate'\n\t/tmp/tmp6ohjvzbn.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ sLen = #s\n    if sLen == 0 then\n        return ''\n    end\n    local res\
    \ = ''\n    for i = 1, sLen do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:lower() == c then\n                res = res .. c:upper()\n\
    \            else\n                res = res .. c:lower()\n            end\n \
    \       else\n            res = res .. c\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ggjumej.lua:35:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp4ggjumej.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ x = string.reverse(s)\n    local y = ''\n    for i = 1, #x do\n        local\
    \ a = string.sub(x, i, i)\n        if (a == string.upper(a)) then\n          \
    \  y = y .. string.lower(a)\n        elseif (a == string.lower(a)) then\n    \
    \        y = y .. string.upper(a)\n        else \n            y = y .. a\n   \
    \     end\n    end\n    return y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigvr7slm.lua:29:\
    \ expected: \"aSdF\"\nactual: \"FdSa\"\nstack traceback:\n\t/tmp/tmpigvr7slm.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ s:gsub('(%a)', function(c)\n        return c:upper() == c and c:lower() or c:upper()\n\
    \    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp826y1zhl.lua:20:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp826y1zhl.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  return\
    \ s:gsub(\"%a\", function(c)\n    if c:lower() == c then\n      return c:upper()\n\
    \    else\n      return c:lower()\n    end\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprded2wy3.lua:24:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmprded2wy3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    if\
    \ string.match(s, \"[%a]\") then\n        return s:gsub(\"[%a]\", function(char)\n\
    \            if char == char:upper() then\n                return char:lower()\n\
    \            else\n                return char:upper()\n            end\n    \
    \    end)\n    else\n        return s:reverse()\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match(\"\
    %a\") then\n            str[i] = c:lower() == c and c:upper() or c:lower()\n \
    \       else\n            str[i] = c\n        end\n    end\n    return (#str >\
    \ 0 and table.concat(str) or s):reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfi3u4jo.lua:26:\
    \ expected: \"aSdF\"\nactual: \"FdSa\"\nstack traceback:\n\t/tmp/tmpwfi3u4jo.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ (s:gsub(\"([%a])\", function(x)\n        return x:upper() == x and x:lower()\
    \ or x:upper()\n    end))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5sruhson.lua:20:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp5sruhson.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n\tlocal\
    \ abc = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n\tlocal res\
    \ = ''\n\tfor i=1, #s do\n\t\tif abc:find(s[i]) then\n\t\t\tif s[i] == s[i]:upper()\
    \ then\n\t\t\t\tres = res .. s[i]:lower()\n\t\t\telse\n\t\t\t\tres = res .. s[i]:upper()\n\
    \t\t\tend\n\t\telse\n\t\t\tres = res .. s[i]\n\t\tend\n\tend\n\tif res == '' then\n\
    \t\treturn s:reverse()\n\telse\n\t\treturn res\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3hy0cyb_.lua:14:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp3hy0cyb_.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp3hy0cyb_.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    for\
    \ i = 1, string.len(s) do\n        local s = string.char(string.byte(s, i))\n\
    \        local l = string.match(s, \"%a\")\n        if l then\n            if\
    \ l == string.lower(l) then\n                s = string.upper(s)\n           \
    \ else\n                s = string.lower(s)\n            end\n        end\n  \
    \      print(s)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "a\nS\nd\nF\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gsgmq04.lua:28:\
    \ expected: \"aSdF\"\nactual: nil\nstack traceback:\n\t/tmp/tmp9gsgmq04.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  return\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4lliocp.lua:17:\
    \ expected: \"aSdF\"\nactual: nil\nstack traceback:\n\t/tmp/tmpo4lliocp.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    if\
    \ s == '' then\n        return s\n    end\n    local s_ = {}\n    for w in s:gmatch(\"\
    %a\") do\n        table.insert(s_, w)\n    end\n    for i = 1, #s_ do\n      \
    \  if s_[i] == s_[i]:lower() then\n            s_[i] = s_[i]:upper()\n       \
    \ else\n            s_[i] = s_[i]:lower()\n        end\n    end\n    return table.concat(s_)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5qixsib.lua:32:\
    \ expected: \"4321\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmph5qixsib.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ rev = {}\n    local len = string.len(s)\n    local last = len - 1\n    for i\
    \ = 0, last do\n        local c = string.sub(s, i, i)\n        if c:match(\"%a\"\
    ) then\n            rev[i] = string.upper(c) == c and string.lower(c) or string.upper(c)\n\
    \        else\n            rev[i] = c\n        end\n    end\n    return table.concat(rev)\n\
    end\nreturn solve\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc84ccfaf.lua:25: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  return\
    \ s:gsub(\".\", function(s)\n    if s:match(\"%a\") then\n      return s:lower()\
    \ == s and s:upper() or s:lower()\n    else\n      return s\n    end\n  end):reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2a_uoyg.lua:23:\
    \ expected: \"aSdF\"\nactual: \"FdSa\"\nstack traceback:\n\t/tmp/tmpb2a_uoyg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ c = ''\n  for i=1,#s do\n    local char = s:sub(i,i)\n    if char:match('%l')\
    \ then\n      c = c .. char:upper()\n    elseif char:match('%u') then\n      c\
    \ = c .. char:lower()\n    else\n      c = c .. char\n    end\n  end\n  return\
    \ c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbtz6o5n.lua:29:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpmbtz6o5n.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ s:gsub('%a', function(c) return c:lower() == c and c:upper() or c:lower() end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea0hzz2q.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpea0hzz2q.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ t = {}\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c == c:upper()\
    \ then\n      t[#t + 1] = c:lower()\n    elseif c == c:lower() then\n      t[#t\
    \ + 1] = c:upper()\n    else\n      t[#t + 1] = c\n    end\n  end\n  if #t ==\
    \ 0 then\n    return s:reverse()\n  end\n  return table.concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6n4i6ho.lua:32:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpj6n4i6ho.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ function tog(c)\n    if c:match('%l') then\n      return c:upper()\n    elseif\
    \ c:match('%u') then\n      return c:lower()\n    else\n      return c\n    end\n\
    \  end\n  local function rev(str)\n    return str:reverse()\n  end\n  return not\
    \ s:match('%l') and rev(s) or s:gsub('%l', tog)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp80h_6rsg.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp80h_6rsg.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  return\
    \ s:gsub(\"%a\", function(ch)\n    if ch:upper() == ch then return ch:lower()\
    \ end\n    return ch:upper()\n  end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmuk03jnh.lua:21:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpmuk03jnh.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  if not\
    \ s:find('%a') then\n    return s:reverse()\n  end\n  local t = {}\n  for i =\
    \ 1, #s do\n    local c = s:sub(i, i)\n    if c:find('%a') then\n      t[#t +\
    \ 1] = c:find('%l') and c:upper() or c:lower()\n    else\n      t[#t + 1] = c\n\
    \    end\n  end\n  return table.concat(t)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ r = {}\n    for i = #s, 1, -1 do\n        r[#r + 1] = (s:byte(i) > 96 and s:byte(i)\
    \ < 123) and s:byte(i) - 32 or (s:byte(i) > 64 and s:byte(i) < 91) and s:byte(i)\
    \ + 32 or s:byte(i)\n    end\n    return #r > 0 and string.char(unpack(r)) or\
    \ \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqe74aex.lua:15:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpvqe74aex.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpvqe74aex.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    --\
    \ code\n    return s:gsub(\"[%a]\", {['a']='A', ['b']='B', ['c']='C', ['d']='D',\
    \ ['e']='E', ['f']='F', ['g']='G', ['h']='H', ['i']='I', ['j']='J', ['k']='K',\
    \ ['l']='L', ['m']='M', ['n']='N', ['o']='O', ['p']='P', ['q']='Q', ['r']='R',\
    \ ['s']='S', ['t']='T', ['u']='U', ['v']='V', ['w']='W', ['x']='X', ['y']='Y',\
    \ ['z']='Z', ['A']='a', ['B']='b', ['C']='c', ['D']='d', ['E']='e', ['F']='f',\
    \ ['G']='g', ['H']='h', ['I']='i', ['J']='j', ['K']='k', ['L']='l', ['M']='m',\
    \ ['N']='n', ['O']='o', ['P']='p', ['Q']='q', ['R']='r', ['S']='s', ['T']='t',\
    \ ['U']='u', ['V']='v', ['W']='w', ['X']='x', ['Y']='y', ['Z']='z'})\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9yrazkwi.lua:19:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp9yrazkwi.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ ns = \"\"\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c:match(\"\
    %a\") then\n      ns = ns .. c:lower() == c and c:upper() or c:lower()\n    else\n\
    \      ns = ns .. c\n    end\n  end\n  return #ns > 0 and ns or s:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm05_rcj9.lua:26:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpm05_rcj9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  if s\
    \ == nil then\n    return nil\n  end\n  local res = \"\"\n  for i = 1, string.len(s)\
    \ do\n    local c = string.sub(s, i, i)\n    if string.match(c, \"%a\") then\n\
    \      res = res .. string.gsub(c, \"[%a]\", {\n        [\"a\"] = \"A\",\n   \
    \     [\"b\"] = \"B\",\n        [\"c\"] = \"C\",\n        [\"d\"] = \"D\",\n \
    \       [\"e\"] = \"E\",\n        [\"f\"] = \"F\",\n        [\"g\"] = \"G\",\n\
    \        [\"h\"] = \"H\",\n        [\"i\"] = \"I\",\n        [\"j\"] = \"J\",\n\
    \        [\"k\"] = \"K\",\n        [\"l\"] = \"L\",\n        [\"m\"] = \"M\",\n\
    \        [\"n\"] = \"N\",\n        [\"o\"] = \"O\",\n        [\"p\"] = \"P\",\n\
    \        [\"q\"] = \"Q\",\n        [\"r\"] = \"R\",\n        [\"s\"] = \"S\",\n\
    \        [\"t\"] = \"T\",\n        [\"u\"] = \"U\",\n        [\"v\"] = \"V\",\n\
    \        [\"w\"] = \"W\",\n        [\"x\"] = \"X\",\n        [\"y\"] = \"Y\",\n\
    \        [\"z\"] = \"Z\",\n        [\"A\"] = \"a\",\n        [\"B\"] = \"b\",\n\
    \        [\"C\"] = \"c\",\n        [\"D\"] = \"d\",\n        [\"E\"] = \"e\",\n\
    \        [\"F\"] = \"f\",\n        [\"G\"] = \"g\",\n        [\"H\"] = \"h\",\n\
    \        [\"I\"] = \"i\",\n        [\"J\"] = \"j\",\n        [\"K\"] = \"k\",\n\
    \        [\"L\"] = \"l\",\n        [\"M\"] = \"m\",\n        [\"N\"] = \"n\",\n\
    \        [\"O\"] = \"o\",\n        [\"P\"] = \"p\",\n        [\"Q\"] = \"q\",\n\
    \        [\"R\"] = \"r\",\n        [\"S\"] = \"s\",\n        [\"T\"] = \"t\",\n\
    \        [\"U\"] = \"u\",\n        [\"V\"] = \"v\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_rmxirlg.lua:66: unfinished string near '\"v'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    --\n\
    \    -- \u041D\u0435 \u0440\u0430\u0431\u043E\u0442\u0430\u0435\u0442 \u043D\u0430\
    \ \u0440\u0443\u0441\u0441\u043A\u0438\u0445 \u0431\u0443\u043A\u0432\u0430\u0445\
    \n    --\n    if s:gsub(\"%a\", \"\"):len() == s:len() then\n        return s:reverse()\n\
    \    end\n    local res = \"\"\n    for c in s:gmatch(\".\") do\n        if c:match(\"\
    %a\") then\n            if c:match(\"%u\") then\n                res = res ..\
    \ c:lower()\n            else\n                res = res .. c:upper()\n      \
    \      end\n        else\n            res = res .. c\n        end\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ r = {}\n  for i = #s, 1, -1 do\n    r[#r + 1] = s:sub(i, i):match(\"%a\") and\
    \ (s:sub(i, i):lower() == s:sub(i, i) and s:sub(i, i):upper() or s:sub(i, i):lower())\
    \ or s:sub(i, i)\n  end\n  return table.concat(r)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21y78hxn.lua:21:\
    \ expected: \"aSdF\"\nactual: \"FdSa\"\nstack traceback:\n\t/tmp/tmp21y78hxn.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ string.reverse(s):gsub(\"%a\", function(c) return c:lower() end)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgna_sxt9.lua:17:\
    \ expected: \"aSdF\"\nactual: \"fdsa\"\nstack traceback:\n\t/tmp/tmpgna_sxt9.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  return\
    \ (string.gsub(s, \"%a\", function(c) return c:lower() == c and c:upper() or c:lower()\
    \ end))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnktsht4g.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpnktsht4g.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    s\
    \ = s:gsub(\"%a\", function(c) return c:lower() == c and c:upper() or c:lower()\
    \ end)\n    return s:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqsw6t9z5.lua:18:\
    \ expected: \"aSdF\"\nactual: \"FdSa\"\nstack traceback:\n\t/tmp/tmpqsw6t9z5.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ r = s:gsub(\"%a\", function(c)\n        return (c == c:upper() and c:lower()\
    \ or c:upper())\n    end)\n    return (#r > 0 and r or r:reverse())\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpj07wep.lua:21:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmprpj07wep.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    --\
    \ check if the string is empty\n    if not s or s == \"\" then\n        return\
    \ \"\"\n    end\n    local rs = \"\"\n    for i = 1, #s do\n        local c =\
    \ s:sub(i, i)\n        if c:match(\"%a\") then\n            if c:match(\"%u\"\
    ) then\n                rs = rs .. c:lower()\n            else\n             \
    \   rs = rs .. c:upper()\n            end\n        else\n            rs = rs ..\
    \ c\n        end\n    end\n    return rs\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdikrjkkv.lua:35:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpdikrjkkv.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ res = ''\n  for i=1,#s do\n    local c = s:sub(i,i)\n    if c:match('%a') then\n\
    \      if c:lower() == c then res = res .. c:upper() else res = res .. c:lower()\
    \ end\n    else\n      res = res .. c\n    end\n  end\n  return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiy8fewqe.lua:27:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpiy8fewqe.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ arr = {}\n  for i = 1, #s do\n    if string.match(s[i], \"[a-zA-Z]\") then\n\
    \      if string.lower(s[i]) == s[i] then\n        arr[i] = string.upper(s[i])\n\
    \      else\n        arr[i] = string.lower(s[i])\n      end\n    else\n      arr[i]\
    \ = s[i]\n    end\n  end\n  if #arr == 0 then return string.reverse(s) end\n \
    \ return table.concat(arr)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeyb1xa58.lua:13:\
    \ bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpeyb1xa58.lua:13: in local 'candidate'\n\t/tmp/tmpeyb1xa58.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ r = \"\"\n    for c in s:gmatch(\".\") do\n        if c:match(\"%a\") then r\
    \ = r .. c:reverse()\n        else r = r .. c end\n    end\n    return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqm8a4rn.lua:22:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpeqm8a4rn.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    if\
    \ not s:match(\"%a\") then\n        return s:reverse()\n    end\n    local a =\
    \ s:gsub(\"%a\", function(ch)\n        if ch:find(\"%l\") then\n            return\
    \ ch:upper()\n        else\n            return ch:lower()\n        end\n    end)\n\
    \    return a\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"\
    #a@C\"))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "4321\nAB\n#A@c\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\n\
    OK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s2 = ''\n    for i = 1, #s do\n        if string.match(s[i], '[A-Za-z]') then\n\
    \            s2 = s2 .. string.lower(s[i])\n        else\n            s2 = s2\
    \ .. s[i]\n        end\n    end\n    if s2 == string.lower(s2) then\n        return\
    \ string.upper(s)\n    else\n        return string.lower(s)\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqch1_ziz.lua:13:\
    \ bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpqch1_ziz.lua:13: in local 'candidate'\n\t/tmp/tmpqch1_ziz.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ t = {}\n    for c in s:gmatch(\".\") do\n        if c:match(\"%w\") then\n \
    \           t[#t+1] = c:lower() == c and c:upper() or c:lower()\n        else\n\
    \            t[#t+1] = c\n        end\n    end\n    return #t == 0 and s:reverse()\
    \ or table.concat(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxt1gfc7.lua:26:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpkxt1gfc7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if\
    \ c:match(\"%a\") then\n            local u = c:upper()\n            local l =\
    \ c:lower()\n            if c == u then\n                table.insert(result,\
    \ l)\n            else\n                table.insert(result, u)\n            end\n\
    \        else\n            table.insert(result, c)\n        end\n    end\n   \
    \ return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpma273nqw.lua:33:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpma273nqw.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = ''\n    for i=1, #s do\n        local c = s:sub(i,i)\n        if c:match('%a')\
    \ then\n            if c:match('%l') then\n                str = str .. c:upper()\n\
    \            else\n                str = str .. c:lower()\n            end\n \
    \       else\n            str = str .. c\n        end\n    end\n    return #str\
    \ == 0 and s:reverse() or str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0l1fc76o.lua:31:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp0l1fc76o.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s = s:gsub(\"(%a)\",\n        function(letter)\n            return letter:lower()\
    \ == letter and letter:upper() or letter:lower()\n        end\n    )\n    if s:match(\"\
    %a\") then\n        return s\n    else\n        return s:reverse()\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  s =\
    \ s:gsub(\"%a\",function(c)\n    if c:lower() == c then\n      return c:upper()\n\
    \    else\n      return c:lower()\n    end\n  end)\n  if #s:gsub(\"%a\",\"\")\
    \ == #s then\n    return s:reverse()\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ t = {}\n  local is_letter = false\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    local letter = c:find(\"%a\")\n    if letter then\n      is_letter =\
    \ true\n      t[i] = c:lower() == c and c:upper() or c:lower()\n    else\n   \
    \   t[i] = c\n    end\n  end\n  if not is_letter then\n    t = table.reverse(t)\n\
    \  end\n  return table.concat(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaxc74tfn.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpaxc74tfn.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpaxc74tfn.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    s\
    \ = s:gsub(\"[a-z]\", function(c)\n        return c:upper()\n    end)\n    s =\
    \ s:gsub(\"[A-Z]\", function(c)\n        return c:lower()\n    end)\n    return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpl4vdi2.lua:23:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmplpl4vdi2.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    --\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2k43bbjf.lua:17:\
    \ expected: \"aSdF\"\nactual: nil\nstack traceback:\n\t/tmp/tmp2k43bbjf.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ str = s:reverse()\n  local result = \"\"\n  for i = 1, #str do\n    local c\
    \ = str:sub(i, i)\n    if c:find(\"%a\") then\n      if c:lower() == c then\n\
    \        result = result .. c:upper()\n      else\n        result = result ..\
    \ c:lower()\n      end\n    else\n      result = result .. c\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqevo5mx_.lua:31:\
    \ expected: \"aSdF\"\nactual: \"FdSa\"\nstack traceback:\n\t/tmp/tmpqevo5mx_.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ res = {}\n  for c in s:gmatch('.') do\n    local i = string.byte(c)\n    if\
    \ c:match('%a') then\n      if i >= 97 and i <= 122 then\n        table.insert(res,\
    \ string.char(i - 32))\n      elseif i >= 65 and i <= 90 then\n        table.insert(res,\
    \ string.char(i + 32))\n      end\n    else\n      table.insert(res, c)\n    end\n\
    \  end\n  if #res > 0 then\n    return table.concat(res)\n  else\n    return s:reverse()\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkm4d8n7f.lua:35:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpkm4d8n7f.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ res = \"\"\n  local str = \"\"\n  local letter = nil\n  if type(s) ~= \"string\"\
    \ then return s end\n  for i=1,#s do\n    if tonumber(s:sub(i,i)) == nil then\n\
    \      if letter ~= nil then \n        str = str .. s:sub(i,i)\n      else\n \
    \       letter = true\n        str = s:sub(i,i)\n      end\n    else\n      if\
    \ letter ~= nil then \n        res = res .. (str):reverse()\n        str = \"\"\
    \n        letter = nil\n      end\n      res = res .. s:sub(i,i)\n    end\n  end\n\
    \  if letter ~= nil then \n    res = res .. (str):reverse()\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4bbgrspq.lua:41:\
    \ expected: \"aSdF\"\nactual: \"fDsA\"\nstack traceback:\n\t/tmp/tmp4bbgrspq.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ n = #s\n  local chars = {}\n  for i = 1, n do\n    local c = s:sub(i, i)\n \
    \   local uc = c:upper()\n    if c == uc then\n      chars[i] = c:lower()\n  \
    \  else\n      chars[i] = uc\n    end\n  end\n  if #chars > 0 then\n    return\
    \ table.concat(chars)\n  else\n    return s:reverse()\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcahhwoi0.lua:33:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpcahhwoi0.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ res = {}\n    for i=1,string.len(s) do\n        local char = string.sub(s,i,i)\n\
    \        if string.match(char,\"%a\") then\n            if string.match(char,\"\
    %a\") then\n                char = string.lower(char)\n            else\n    \
    \            char = string.upper(char)\n            end\n        end\n       \
    \ table.insert(res,char)\n    end\n    return table.concat(res)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wiqe9qb.lua:29:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmp6wiqe9qb.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ string.reverse(string.gsub(s, \"([A-Za-z])\", function(c) return c:upper() ==\
    \ c and c:lower() or c:upper() end))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebdxpa93.lua:17:\
    \ expected: \"aSdF\"\nactual: \"FdSa\"\nstack traceback:\n\t/tmp/tmpebdxpa93.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ s:gsub('[a-zA-Z]', function(c) return c:upper() == c and c:lower() or c:upper()\
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4m6eraze.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp4m6eraze.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n\tlocal\
    \ function solve_(s)\n\t\tlocal i = 0\n\t\tlocal result = {}\n\t\tfor k, v in\
    \ pairs(s) do\n\t\t\ti = i + 1\n\t\t\tif ((string.lower(v) == v) and (string.upper(v)\
    \ ~= v)) then\n\t\t\t\tresult[i] = string.upper(v)\n\t\t\telseif ((string.upper(v)\
    \ == v) and (string.lower(v) ~= v)) then\n\t\t\t\tresult[i] = string.lower(v)\n\
    \t\t\telse\n\t\t\t\tresult[i] = v\n\t\t\tend\n\t\tend\n\t\treturn table.concat(result)\n\
    \tend\n\tlocal function solve__(s)\n\t\tlocal result = {}\n\t\tlocal i = 0\n\t\
    \tfor k, v in pairs(s) do\n\t\t\ti = i + 1\n\t\t\tif ((string.lower(v) == v) and\
    \ (string.upper(v) ~= v)) then\n\t\t\t\tresult[i] = string.upper(v)\n\t\t\telseif\
    \ ((string.upper(v) == v) and (string.lower(v) ~= v)) then\n\t\t\t\tresult[i]\
    \ = string.lower(v)\n\t\t\telse\n\t\t\t\tresult[i] = v\n\t\t\tend\n\t\tend\n\t\
    \treturn table.concat(result)\n\tend\n\tlocal function solve___(s)\n\t\tlocal\
    \ i = 0\n\t\tlocal result = {}\n\t\tfor k, v in pairs(s) do\n\t\t\ti = i + 1\n\
    \t\t\tif ((string.lower(v) == v) and (string.upper(v) ~= v)) then\n\t\t\t\tresult[i]\
    \ = string.upper(v)\n\t\t\telseif ((string.upper(v) == v) and (string.lower(v)\
    \ ~= v)) then\n\t\t\t\tresult[i] = string.lower(v)\n\t\t\telse\n\t\t\t\tresult[i]\
    \ = v\n\t\t\tend\n\t\tend\n\t\treturn table.concat\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdg_cjhsw.lua:55: 'end' expected (to close 'function' at line\
    \ 41) near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ s:gsub(\"%a\",function(c) return c:upper()==c and c:lower() or c:upper() end)\n\
    end\nprint(solve(\"#a@C\"))\nprint(solve(\"ab\"))\nprint(solve(\"1234\"))\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "#A@c\t2\nAB\t2\n1234\t0\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmpwtols7fz.lua:21: expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\
    \t/tmp/tmpwtols7fz.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    if\
    \ #s == 0 then return s end\n    local chars = {}\n    for i = 1, #s do\n    \
    \    local c = s:sub(i, i)\n        if c:match(\"%a\") then\n            table.insert(chars,\
    \ c:gsub(\"%l\", string.upper):gsub(\"%u\", string.lower))\n        else\n   \
    \         table.insert(chars, c)\n        end\n    end\n    return table.concat(chars)\n\
    end\nreturn solve\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1f1q8z1m.lua:24: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ s:gsub(\"[a-zA-Z]\", {\n        [\"a\"] = \"A\",\n        [\"b\"] = \"B\",\n\
    \        [\"c\"] = \"C\",\n        [\"d\"] = \"D\",\n        [\"e\"] = \"E\",\n\
    \        [\"f\"] = \"F\",\n        [\"g\"] = \"G\",\n        [\"h\"] = \"H\",\n\
    \        [\"i\"] = \"I\",\n        [\"j\"] = \"J\",\n        [\"k\"] = \"K\",\n\
    \        [\"l\"] = \"L\",\n        [\"m\"] = \"M\",\n        [\"n\"] = \"N\",\n\
    \        [\"o\"] = \"O\",\n        [\"p\"] = \"P\",\n        [\"q\"] = \"Q\",\n\
    \        [\"r\"] = \"R\",\n        [\"s\"] = \"S\",\n        [\"t\"] = \"T\",\n\
    \        [\"u\"] = \"U\",\n        [\"v\"] = \"V\",\n        [\"w\"] = \"W\",\n\
    \        [\"x\"] = \"X\",\n        [\"y\"] = \"Y\",\n        [\"z\"] = \"Z\",\n\
    \        [\"A\"] = \"a\",\n        [\"B\"] = \"b\",\n        [\"C\"] = \"c\",\n\
    \        [\"D\"] = \"d\",\n        [\"E\"] = \"e\",\n        [\"F\"] = \"f\",\n\
    \        [\"G\"] = \"g\",\n        [\"H\"] = \"h\",\n        [\"I\"] = \"i\",\n\
    \        [\"J\"] = \"j\",\n        [\"K\"] = \"k\",\n        [\"L\"] = \"l\",\n\
    \        [\"M\"] = \"m\",\n        [\"N\"] = \"n\",\n        [\"O\"] = \"o\",\n\
    \        [\"P\"] = \"p\",\n        [\"Q\"] = \"q\",\n        [\"R\"] = \"r\",\n\
    \        [\"S\"] = \"s\",\n        [\"T\"] = \"t\",\n        [\"U\"] = \"u\",\n\
    \        [\"V\"] = \"v\",\n        [\"W\"] = \"w\",\n        [\"X\"] = \"x\",\n\
    \        [\"Y\"] = \"y\",\n        [\"Z\"] = \"z\",\n    })\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6_ay0vb.lua:71:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpg6_ay0vb.lua:71:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    if\
    \ #s:gsub(\"%a\",\"\") == #s then\n        return s:reverse()\n    end\n    local\
    \ res = \"\"\n    for i = 1, #s do\n        local c = s:sub(i,i)\n        if c:match(\"\
    %a\") then\n            c = c:upper() == c and c:lower() or c:upper()\n      \
    \  end\n        res = res .. c\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ str = \"\"\n  for i = 1, #s do\n    if s[i]:match(\"%a\") then\n      str =\
    \ str .. (s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower())\n    else\n \
    \     str = str .. s[i]\n    end\n  end\n  return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx01103lx.lua:13:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpx01103lx.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpx01103lx.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  if not\
    \ s:match(\"%a\") then return s:reverse() end\n  return s:gsub(\"%a\", function(l)\
    \ return l:upper() == l and l:lower() or l:upper() end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        local char = s:sub(i, i)\n       \
    \ if char:match(\"%a\") then\n            if char == char:upper() then\n     \
    \           str = str .. char:lower()\n            else\n                str =\
    \ str .. char:upper()\n            end\n        else\n            str = str ..\
    \ char\n        end\n    end\n    return str\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvt_dygu5.lua:31:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpvt_dygu5.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  -- your\
    \ code here\n  if string.match(s, \"%a\") then\n    local r = \"\"\n    for i\
    \ = 1, #s do\n      local c = string.sub(s, i, i)\n      if string.match(c, \"\
    %a\") then\n        r = r .. string.upper(c)\n      else\n        r = r .. string.lower(c)\n\
    \      end\n    end\n    return r\n  else\n    return string.reverse(s)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_hxyk3k.lua:31:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpl_hxyk3k.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    s\
    \ = s:gsub(\"([%a])\",function(v) return (v == v:upper() and v:lower() or v:upper())\
    \ end)\n    return s\nend\nreturn solve\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkd89y4va.lua:15: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    for\
    \ i = 1, #s do\n        if s[i]:find(\"%a\") then s = s:gsub(s[i], s[i]:upper()\
    \ == s[i] and s[i]:lower() or s[i]:upper()) end\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbrvr4cz0.lua:12:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpbrvr4cz0.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpbrvr4cz0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ res = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            res = res .. c:upper()\n        else\n            res = res\
    \ .. c:lower()\n        end\n    end\n    return #res > 0 and res or s:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqj_n2oys.lua:26:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpqj_n2oys.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ res = {}\n    local uppers = {}\n    local lowers = {}\n    for i = 1, string.len(s)\
    \ do\n        local c = string.sub(s, i, i)\n        local upper = string.upper(c)\n\
    \        local lower = string.lower(c)\n        if upper == lower then\n     \
    \       table.insert(res, c)\n        else\n            if c == upper then\n \
    \               table.insert(uppers, i)\n            else\n                table.insert(lowers,\
    \ i)\n            end\n        end\n    end\n    if #uppers == 0 and #lowers ==\
    \ 0 then\n        s = string.reverse(s)\n    else\n        for i = 1, #uppers\
    \ do\n            local c = string.sub(s, uppers[i], uppers[i])\n            res[uppers[i]]\
    \ = string.lower(c)\n        end\n        for i = 1, #lowers do\n            local\
    \ c = string.sub(s, lowers[i], lowers[i])\n            res[lowers[i]] = string.upper(c)\n\
    \        end\n        s = table.concat(res)\n    end\n    return s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm_r1o8_s.lua:39:\
    \ invalid value (nil) at index 3 in table for 'concat'\nstack traceback:\n\t/tmp/tmpm_r1o8_s.lua:39:\
    \ in local 'candidate'\n\t/tmp/tmpm_r1o8_s.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ t,r = {}, \"\"\n  for i = 1, #s do\n    local c = s:sub(i,i)\n    if c:match(\"\
    %a\") then\n      t[#t+1] = c:lower() == c and c:upper() or c:lower()\n    else\n\
    \      t[#t+1] = c\n    end\n  end\n  if #t > 0 then\n    r = table.concat(t,\"\
    \")\n  else\n    r = s:reverse()\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipedv3tx.lua:32:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpipedv3tx.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ new_s = ''\n    local letter\n    local i = 1\n    while i <= #s do\n      \
    \  letter = s:sub(i, i)\n        if letter:match('%a') then\n            if letter:match('%l')\
    \ then\n                new_s = new_s .. letter:upper()\n            else\n  \
    \              new_s = new_s .. letter:lower()\n            end\n        else\n\
    \            new_s = new_s .. letter\n        end\n        i = i + 1\n    end\n\
    \    if new_s:match('%a') then\n        return new_s\n    else\n        return\
    \ new_s:reverse()\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s_ = s:gsub(\"([%a])\", function(x)\n        if x == x:upper() then return x:lower()\n\
    \        else return x:upper() end\n    end)\n    return #s_ > 0 and s_ or s:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_21rfba.lua:22:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpu_21rfba.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ r = \"\"\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match(\"\
    %a\") then\n            r = r .. (c:lower() == c and c:upper() or c:lower())\n\
    \        else\n            r = r .. c\n        end\n    end\n    return r:len()\
    \ == 0 and s or r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfn974az.lua:27:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpbfn974az.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    if\
    \ not string.match(s, \"[%a]\") then return string.reverse(s) end\n    local t,\
    \ s2 = {}, \"\"\n    for i = 1, #s do\n        local l = string.sub(s, i, i)\n\
    \        table.insert(t, l)\n    end\n    for k, v in pairs(t) do\n        if\
    \ string.match(v, \"[%a]\") then\n            s2 = s2 .. string.lower(v) == v\
    \ and string.upper(v) or string.lower(v)\n        else\n            s2 = s2 ..\
    \ v\n        end\n    end\n    return s2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2zmcex8.lua:30:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpy2zmcex8.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ res = ''\n    for i = 1, #s do\n        if s[i]:find('%a') then\n          \
    \  if s[i]:find('%u') then\n                res = res .. s[i]:lower()\n      \
    \      else\n                res = res .. s[i]:upper()\n            end\n    \
    \    else\n            res = res .. s[i]\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplh69h7u5.lua:13:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmplh69h7u5.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmplh69h7u5.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ res = ''\n  for i = 1, #s do\n    local ch = s:sub(i, i)\n    if ch:match('%a')\
    \ then\n      if ch:lower() == ch then\n        res = res .. ch:upper()\n    \
    \  else\n        res = res .. ch:lower()\n      end\n    else\n      res = res\
    \ .. ch\n    end\n  end\n  return #res == 0 and s:reverse() or res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprx7qbm5r.lua:31:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmprx7qbm5r.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ s:gsub('%a', function(c) return c:lower() == c and c:upper() or c:lower() end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72yepcdp.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp72yepcdp.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    if\
    \ s == nil then return \"\" end\n    if #s == 0 then return \"\" end\n    local\
    \ a = \"\"\n    for i = 1, #s do\n        if s[i] == string.upper(s[i]) then\n\
    \            a = a .. string.lower(s[i])\n        elseif s[i] == string.lower(s[i])\
    \ then\n            a = a .. string.upper(s[i])\n        else\n            a =\
    \ a .. s[i]\n        end\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0c710980.lua:15:\
    \ bad argument #1 to 'upper' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmp0c710980.lua:15: in local 'candidate'\n\t/tmp/tmp0c710980.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n\tlocal\
    \ str = s:gsub(\"%a\", function(c) return c == c:upper() and c:lower() or c:upper()\
    \ end)\n\treturn #str == 0 and s:reverse() or str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptr7ebmr2.lua:19:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmptr7ebmr2.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ s:gsub(\"%a\", {[\"a\"] = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\", [\"d\"] =\
    \ \"D\", [\"e\"] = \"E\", [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"] = \"H\", [\"\
    i\"] = \"I\", [\"j\"] = \"J\", [\"k\"] = \"K\", [\"l\"] = \"L\", [\"m\"] = \"\
    M\", [\"n\"] = \"N\", [\"o\"] = \"O\", [\"p\"] = \"P\", [\"q\"] = \"Q\", [\"r\"\
    ] = \"R\", [\"s\"] = \"S\", [\"t\"] = \"T\", [\"u\"] = \"U\", [\"v\"] = \"V\"\
    , [\"w\"] = \"W\", [\"x\"] = \"X\", [\"y\"] = \"Y\", [\"z\"] = \"Z\", [\"A\"]\
    \ = \"a\", [\"B\"] = \"b\", [\"C\"] = \"c\", [\"D\"] = \"d\", [\"E\"] = \"e\"\
    , [\"F\"] = \"f\", [\"G\"] = \"g\", [\"H\"] = \"h\", [\"I\"] = \"i\", [\"J\"]\
    \ = \"j\", [\"K\"] = \"k\", [\"L\"] = \"l\", [\"M\"] = \"m\", [\"N\"] = \"n\"\
    , [\"O\"] = \"o\", [\"P\"] = \"p\", [\"Q\"] = \"q\", [\"R\"] = \"r\", [\"S\"]\
    \ = \"s\", [\"T\"] = \"t\", [\"U\"] = \"u\", [\"V\"] = \"v\", [\"W\"] = \"w\"\
    , [\"X\"] = \"x\", [\"Y\"] = \"y\", [\"Z\"] = \"z\"})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wdwrrp4.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp9wdwrrp4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ res = {}\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c:match('%a')\
    \ then\n      if c:lower() == c then\n        c = c:upper()\n      else\n    \
    \    c = c:lower()\n      end\n    end\n    res[#res + 1] = c\n  end\n  return\
    \ table.concat(res)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp1kja821.lua:30:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpp1kja821.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    s\
    \ = s:gsub(\"%a\", function(x)\n        return x:upper() == x and x:lower() or\
    \ x:upper()\n    end)\n    return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphr8m2t_2.lua:21:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmphr8m2t_2.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = string.reverse(s)\n    local result = {}\n    for i = 1, string.len(str)\
    \ do\n        local char = string.sub(str, i, i)\n        if char >= 'a' and char\
    \ <= 'z' then\n            char = string.upper(char)\n        elseif char >= 'A'\
    \ and char <= 'Z' then\n            char = string.lower(char)\n        end\n \
    \       table.insert(result, char)\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkony18j7.lua:28:\
    \ expected: \"aSdF\"\nactual: \"FdSa\"\nstack traceback:\n\t/tmp/tmpkony18j7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ sz = #s\n    local str = \"\"\n    local lower, upper = string.lower, string.upper\n\
    \    for i = 1, sz do\n        local c = string.sub(s, i, i)\n        if string.find(c,\
    \ \"%a\") then\n            str = str .. (lower(c) == c and upper(c) or lower(c))\n\
    \        else\n            str = str .. c\n        end\n    end\n    return sz\
    \ == str:gsub(\"%a\", \"\"):len() and str:reverse() or str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ s:gsub('%a', function(c) return c:lower() == c and c:upper() or c:lower() end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0cbkv1p1.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp0cbkv1p1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    if\
    \ type(s) ~= \"string\" then return nil end\n    if #s == 0 then return s end\n\
    \    local res = \"\"\n    for i = 1, #s do\n        local byte = string.byte(s,\
    \ i)\n        if byte >= 65 and byte <= 90 then\n            byte = byte + 32\n\
    \        elseif byte >= 97 and byte <= 122 then\n            byte = byte - 32\n\
    \        end\n        res = res .. string.char(byte)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2vs2dt7.lua:30:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpt2vs2dt7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    if\
    \ s:gsub(\"%a\", \"\"):len() == s:len() then\n        return s:reverse()\n   \
    \ end\n    local t = {}\n    for i = 1, s:len() do\n        local c = s:sub(i,\
    \ i)\n        if c:match(\"%a\") then\n            c = c:lower() == c and c:upper()\
    \ or c:lower()\n        end\n        table.insert(t, c)\n    end\n    return table.concat(t)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ (s:gsub(\"%a\", function(c) return c:lower() == c and c:upper() or c:lower()\
    \ end))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47fk7by8.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp47fk7by8.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ t = {}\n    for u in s:gmatch('.') do\n        if u:match('%a') then\n     \
    \       u = u:upper() == u and u:lower() or u:upper()\n        end\n        table.insert(t,\
    \ u)\n    end\n    return t[1] and table.concat(t) or t[1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtt7he79.lua:25:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmprtt7he79.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ t = {}\n    for char in s:gmatch(\"%a\") do\n        t[#t+1] = char:lower()\
    \ == char and char:upper() or char:lower()\n    end\n    return #t == 0 and s:reverse()\
    \ or s:gsub(\"%a\", function(char)\n        return char:lower() == char and char:upper()\
    \ or char:lower()\n    end)\nend\nreturn solve\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp50pz4w77.lua:20: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ s:gsub(\"%a\", {[\"a\"] = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\", [\"d\"] =\
    \ \"D\", [\"e\"] = \"E\", [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"] = \"H\", [\"\
    i\"] = \"I\", [\"j\"] = \"J\", [\"k\"] = \"K\", [\"l\"] = \"L\", [\"m\"] = \"\
    M\", [\"n\"] = \"N\", [\"o\"] = \"O\", [\"p\"] = \"P\", [\"q\"] = \"Q\", [\"r\"\
    ] = \"R\", [\"s\"] = \"S\", [\"t\"] = \"T\", [\"u\"] = \"U\", [\"v\"] = \"V\"\
    , [\"w\"] = \"W\", [\"x\"] = \"X\", [\"y\"] = \"Y\", [\"z\"] = \"Z\", [\"A\"]\
    \ = \"a\", [\"B\"] = \"b\", [\"C\"] = \"c\", [\"D\"] = \"d\", [\"E\"] = \"e\"\
    , [\"F\"] = \"f\", [\"G\"] = \"g\", [\"H\"] = \"h\", [\"I\"] = \"i\", [\"J\"]\
    \ = \"j\", [\"K\"] = \"k\", [\"L\"] = \"l\", [\"M\"] = \"m\", [\"N\"] = \"n\"\
    , [\"O\"] = \"o\", [\"P\"] = \"p\", [\"Q\"] = \"q\", [\"R\"] = \"r\", [\"S\"]\
    \ = \"s\", [\"T\"] = \"t\", [\"U\"] = \"u\", [\"V\"] = \"v\", [\"W\"] = \"w\"\
    , [\"X\"] = \"x\", [\"Y\"] = \"y\", [\"Z\"] = \"z\" }):reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvrnan9q.lua:17:\
    \ expected: \"aSdF\"\nactual: \"FdSa\"\nstack traceback:\n\t/tmp/tmplvrnan9q.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ len = #s\n  local res = {}\n  local letter\n  for i = 1, len do\n    letter\
    \ = s:sub(i, i)\n    if letter:match(\"%l\") then\n      letter = letter:upper()\n\
    \    elseif letter:match(\"%u\") then\n      letter = letter:lower()\n    end\n\
    \    res[i] = letter\n  end\n  if #res > 0 then\n    return table.concat(res)\n\
    \  else\n    return s:reverse()\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepzllhjj.lua:34:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpepzllhjj.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ res = {}\n  local st, ed = 1, #s\n  if string.match(s, '%a') then\n    for i\
    \ = 1, #s do\n      if string.match(s[i], '%a') then\n        if string.lower(s[i])\
    \ == s[i] then\n          res[i] = string.upper(s[i])\n        else\n        \
    \  res[i] = string.lower(s[i])\n        end\n      else\n        res[i] = s[i]\n\
    \      end\n    end\n  else\n    for i = 1, #s do\n      res[i] = s[#s - i + 1]\n\
    \    end\n  end\n  return table.concat(res)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn7cxwwig.lua:15:\
    \ bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpn7cxwwig.lua:15: in local 'candidate'\n\t/tmp/tmpn7cxwwig.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  if #s\
    \ == 0 then return string.reverse(s) end\n  local i, result = 1, \"\"\n  while\
    \ s[i] do\n    if string.match(s[i], \"%a\") then\n      if string.match(s[i],\
    \ \"%u\") then\n        result = result .. string.lower(s[i])\n      else\n  \
    \      result = result .. string.upper(s[i])\n      end\n    else\n      result\
    \ = result .. s[i]\n    end\n    i = i + 1\n  end\n  return result\nend\nprint(solve(\"\
    1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"\"))\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "\n\n\n\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbjaocn_.lua:35:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmptbjaocn_.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ n = #s\n    local t = {}\n    local found = false\n    for i = 1, n do\n   \
    \     local c = s:sub(i, i)\n        if c:match(\"%a\") then\n            found\
    \ = true\n            if c:match(\"%u\") then\n                t[#t + 1] = c:lower()\n\
    \            else\n                t[#t + 1] = c:upper()\n            end\n  \
    \      else\n            t[#t + 1] = c\n        end\n    end\n    if not found\
    \ then\n        return s:reverse()\n    end\n    return table.concat(t)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s1 = s:gsub(\"%a\",\"%u%1\"):gsub(\"%u%u\",\"%l%1\")\n    return #s1~=#s and\
    \ s1 or s:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfmb1gg31.lua:11:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpfmb1gg31.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpfmb1gg31.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  if not\
    \ s:match(\"%a\") then return s:reverse() end\n  s = s:gsub(\".\", function(c)\
    \ return c:lower() == c and c:upper() or c:lower() end)\n  return s\nend\nprint(solve(\"\
    1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "4321\nAB\n#A@c\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\n\
    OK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    return\
    \ s:gsub('%a', function(c) return c:lower() == c and c:upper() or c:lower() end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpma70_0pr.lua:18:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpma70_0pr.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    local reverse = function(ch)\n        if ch >= 'a' and ch <=\
    \ 'z' then\n            return string.upper(ch)\n        elseif ch >= 'A' and\
    \ ch <= 'Z' then\n            return string.lower(ch)\n        else\n        \
    \    return ch\n        end\n    end\n    if string.find(s, \"%a\") then\n   \
    \     for i = 1, #s do\n            str = str .. reverse(s:sub(i, i))\n      \
    \  end\n    else\n        for i = #s, 1, -1 do\n            str = str .. s:sub(i,\
    \ i)\n        end\n    end\n    return str\nend\nreturn solve\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa2mtk4sz.lua:33: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    if\
    \ not s:match(\"%a\") then\n        return s:reverse()\n    end\n    local letters\
    \ = {}\n    for i in s:gmatch(\"%a\") do\n        letters[#letters + 1] = i\n\
    \    end\n    local res = \"\"\n    for i = 1, #s do\n        if s:sub(i, i):match(\"\
    %a\") then\n            local idx = utils.table.indexOf(letters, s:sub(i, i))\n\
    \            if idx % 2 == 0 then\n                res = res .. s:sub(i, i):lower()\n\
    \            else\n                res = res .. s:sub(i, i):upper()\n        \
    \    end\n        else\n            res = res .. s:sub(i, i)\n        end\n  \
    \  end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu46_a2iq.lua:21:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpu46_a2iq.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpu46_a2iq.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    --\
    \ tolower and toupper are locale-dependent functions\n    -- function get lowercase\
    \ letter from string\n    local function lower(c)\n        return c:lower()\n\
    \    end\n    -- function get uppercase letter from string\n    local function\
    \ upper(c)\n        return c:upper()\n    end\n    -- convert string to array\
    \ of letters\n    local t = {s:byte(1, -1)}\n    -- convert letters to lowercase\n\
    \    for k, v in pairs(t) do\n        t[k] = lower(string.char(v))\n    end\n\
    \    -- if striong contains no letters, reverse the string\n    if table.concat(t)\
    \ == s then\n        return s:reverse()\n    end\n    -- convert letters to uppercase\n\
    \    for k, v in pairs(t) do\n        t[k] = upper(string.char(v))\n    end\n\
    \    -- return string\n    return table.concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc61v3kck.lua:32:\
    \ bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpc61v3kck.lua:32: in local 'candidate'\n\t/tmp/tmpc61v3kck.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = ''\n    for i = 1, #s do\n        if s[i]:match('%l') then\n      \
    \      result = result .. s[i]:upper()\n        elseif s[i]:match('%u') then\n\
    \            result = result .. s[i]:lower()\n        else\n            result\
    \ = result .. s[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprold2pe0.lua:13:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmprold2pe0.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmprold2pe0.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n\tlocal\
    \ found = false\n\tlocal ret = {}\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,\
    \ i)\n\t\tif string.match(c, \"[a-zA-Z]\") then\n\t\t\tfound = true\n\t\t\tret[#ret\
    \ + 1] = c:upper() == c and c:lower() or c:upper()\n\t\telse\n\t\t\tret[#ret +\
    \ 1] = c\n\t\tend\n\tend\n\tif not found then\n\t\tfor i = 1, #ret do\n\t\t\t\
    ret[i] = ret[#ret - i + 1]\n\t\tend\n\tend\n\treturn table.concat(ret)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp592f84pp.lua:34:\
    \ expected: \"4321\"\nactual: \"4334\"\nstack traceback:\n\t/tmp/tmp592f84pp.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ t,r = {},{}\n    for i in s:gmatch\".\" do\n        table.insert(t,i)\n    end\n\
    \    for i,v in ipairs(t) do\n        if v == v:upper() then\n            table.insert(r,v:lower())\n\
    \        elseif v == v:lower() then\n            table.insert(r,v:upper())\n \
    \       else\n            table.insert(r,v)\n        end\n    end\n    return\
    \ table.concat(r)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dnyd8nn.lua:31:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp2dnyd8nn.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ function isLetter(c)\n        return (c >= \"a\" and c <= \"z\") or (c >= \"\
    A\" and c <= \"Z\")\n    end\n    local function reverseCase(c)\n        if c\
    \ >= \"a\" and c <= \"z\" then return c:upper()\n        elseif c >= \"A\" and\
    \ c <= \"Z\" then return c:lower()\n        else return c end\n    end\n    local\
    \ temp = \"\"\n    local len = #s\n    for i = 1, len do\n        if isLetter(s:sub(i,\
    \ i)) then\n            temp = temp .. reverseCase(s:sub(i, i))\n        else\n\
    \            temp = temp .. s:sub(i, i)\n        end\n    end\n    return temp\n\
    end\nreturn solve\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpag9q5h57.lua:31: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ t = {}\n    for c in s:gmatch(\".\") do\n        if c:match(\"%a\") then\n \
    \           t[#t+1] = c:lower() == c and c:upper() or c:lower()\n        else\n\
    \            t[#t+1] = c\n        end\n    end\n    return #t > 0 and table.concat(t)\
    \ or s:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g1pwsmp.lua:26:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp_g1pwsmp.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  -- ...\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ur1ni02.lua:17:\
    \ expected: \"aSdF\"\nactual: nil\nstack traceback:\n\t/tmp/tmp7ur1ni02.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ _, count = s:gsub(\"%a\", \"\")\n    if count == 0 then return s:reverse() end\n\
    \    local res = \"\"\n    for i = 1, #s do\n        if s:sub(i, i):match(\"%a\"\
    ) then\n            res = res .. s:sub(i, i):lower() == s:sub(i, i) and s:sub(i,\
    \ i):upper() or s:sub(i, i):lower()\n        else\n            res = res .. s:sub(i,\
    \ i)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppzq0p746.lua:27:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmppzq0p746.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
