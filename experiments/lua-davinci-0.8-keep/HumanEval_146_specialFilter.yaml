name: HumanEval_146_specialFilter
language: lua
prompt: "-- Write a function that takes an array of numbers as input and returns \n\
  -- the number of elements in the array that are greater than 10 and both \n-- first\
  \ and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- specialFilter([15,\
  \ -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlocal\
  \ function specialFilter(nums)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
  \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
  \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
  \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
  \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
  \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal ret = 0\n\tfor i,v in ipairs(nums) do\n\t\tlocal a = math.abs(v)\n\
    \t\tif a > 10 and a % 2 == 1 and (a % 10) % 2 == 1 then\n\t\t\tret = ret + 1\n\
    \t\tend\n\tend\n\treturn ret\nend", "    local count = 0\n    for _, num in ipairs(nums)\
    \ do\n        if num > 10 then\n            local first = num % 10\n         \
    \   while num >= 10 do\n                num = num / 10\n            end\n    \
    \        local last = num\n            if first % 2 == 1 and last % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend", "\tlocal function checkNum(n)\n\t\tlocal firstDigit = n\
    \ % 10\n\t\tlocal lastDigit = n\n\t\twhile lastDigit >= 10 do\n\t\t\tlastDigit\
    \ = lastDigit / 10\n\t\tend\n\t\tlastDigit = math.floor(lastDigit)\n\t\treturn\
    \ n > 10 and firstDigit % 2 == 1 and lastDigit % 2 == 1\n\tend\n\tlocal function\
    \ iter(acc, i)\n\t\tif i > #nums then\n\t\t\treturn acc\n\t\telse\n\t\t\tif checkNum(nums[i])\
    \ then\n\t\t\t\treturn iter(acc + 1, i + 1)\n\t\t\telse\n\t\t\t\treturn iter(acc,\
    \ i + 1)\n\t\t\tend\n\t\tend\n\tend\n\treturn iter(0, 1)\nend", "    local result\
    \ = 0\n    for _,v in ipairs(nums) do\n        local digit = v%10 -- last digit\n\
    \        while v>0 do\n            v = math.floor(v/10)\n            if v==0 then\n\
    \                if digit%2==1 then -- last digit is odd\n                   \
    \ result = result + 1\n                end\n                break\n          \
    \  end\n            digit = v%10 -- new last digit\n        end\n    end\n   \
    \ return result\nend", end, "    return\nend", "    local counter = 0\n    for\
    \ i = 1, #nums do\n        local num = nums[i]\n        if num > 10 and num %\
    \ 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            counter = counter\
    \ + 1\n        end\n    end\n    return counter\nend", "  local count = 0\n  for\
    \ i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and math.abs(num)\
    \ % 2 == 1 and num % 10 % 2 == 1 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local count = 0\n    for i, v in ipairs(nums) do\n\
    \        if v > 10 and math.abs(v % 10) % 2 == 1 and math.abs(v / 10) % 2 == 1\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    -- YOUR CODE HERE\n    local function oddFirstAndLast(n)\n        if\
    \ n<10 then return n%2~=0 end\n        while n>=10 do\n            if n%10==0\
    \ then return false end\n            n=math.floor(n/10)\n        end\n       \
    \ return n%2~=0\n    end\n    local count=0\n    for _,n in ipairs(nums) do\n\
    \        if n>10 and oddFirstAndLast(n) then count=count+1 end\n    end\n    return\
    \ count\nend", "    local count = 0\n    for _, num in ipairs(nums) do\n     \
    \   if num > 10 and isFirstLastOdd(num) then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local function numberTest(n)\n\
    \        local lastDigit = n % 10\n        local fstDigit = n\n        while fstDigit\
    \ >= 10 do\n            fstDigit = fstDigit / 10\n        end\n        if n >\
    \ 10 and lastDigit % 2 == 1 and fstDigit % 2 == 1 then\n            return true\n\
    \        else\n            return false\n        end\n    end\n    local k = 0\n\
    \    for i, v in ipairs(nums) do\n        if numberTest(v) then\n            k\
    \ = k + 1\n        end\n    end\n    return k\nend", "    local cnt = 0\n    for\
    \ i = 1, #nums do\n        local n = nums[i]\n        if n > 10 and math.abs(n)\
    \ % 10 % 2 ~= 0 and math.floor(math.abs(n)/10) % 2 ~= 0 then\n            cnt\
    \ = cnt + 1\n        end\n    end\n    return cnt\nend", "\tlocal count = 0\n\t\
    local len = #nums\n\t\n\tfor i = 1, len do\n\t\tlocal num = nums[i]\n\t\tlocal\
    \ first = num % 10\n\t\tlocal last = math.floor(num / 10)\n\t\t\n\t\tif (num >\
    \ 10) and (first % 2 ~= 0) and (last % 2 ~= 0) then\n\t\t\tcount = count + 1\n\
    \t\tend\n\tend\n\t\n\treturn count\nend", "\tlocal cnt = 0\n\tfor i, num in ipairs(nums)\
    \ do\n\t\tif num > 10 and math.floor(num / 10) % 2 ~= 0 and num % 2 ~= 0 then\n\
    \t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\treturn cnt\nend", "    local count = 0\n\
    \    for _, v in ipairs(nums) do\n        if v > 10 and math.abs(v) % 10 % 2 ==\
    \ 1 and math.abs(v) // 10 % 10 % 2 == 1 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "  local count = 0\n  for _, num\
    \ in ipairs(nums) do\n    if num > 10 and isOdd(num) and isOdd(num % 10) then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    local count\
    \ = 0\n    for i, num in ipairs(nums) do\n        if num > 10 and math.fmod(math.floor(num\
    \ / 10), 2) ~= 0 and math.fmod(num, 2) ~= 0 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", "  -- TODO\nend", "    -- your\
    \ code here\nend", "  local numSpecial = 0\n  for i, n in ipairs(nums) do\n  \
    \  if n > 10 and n % 2 == 1 and n % 10 % 2 == 1 then\n      numSpecial = numSpecial\
    \ + 1\n    end\n  end\n  return numSpecial\nend", "  local count = 0\n  for i\
    \ = 1, #nums do\n    if (nums[i] > 10) and (nums[i] % 2 ~= 0) and (nums[1] % 2\
    \ ~= 0) and (nums[#nums] % 2 ~= 0) then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    --[[\n    local new = {}\n    for k, v in pairs(nums)\
    \ do\n        if v > 10 and (v % 2 ~= 0) and \n            (math.floor(v / 10)\
    \ % 2 ~= 0) and (v % 10 % 2 ~= 0) then\n            table.insert(new, v)\n   \
    \     end\n    end\n    return #new\n    ]]\n    local r = 0\n    for k, v in\
    \ pairs(nums) do\n        if v > 10 and (v % 2 ~= 0) and \n            (math.floor(v\
    \ / 10) % 2 ~= 0) and (v % 10 % 2 ~= 0) then\n            r = r + 1\n        end\n\
    \    end\n    return r\nend", "    local count = 0\n    for i, v in ipairs(nums)\
    \ do\n        if v > 10 and (v % 10) % 2 == 1 and (v / 10) % 2 == 1 then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend", "\t\
    count = 0\n\tfor i, val in ipairs(nums) do\n\t\tif (val > 10) then\n\t\t\tif(val%2\
    \ == 1) then\n\t\t\t\tif(math.floor(val/10)%2 == 1) then\n\t\t\t\t\tcount = count\
    \ + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "  local\
    \ count = 0\n  for i = 1, #nums do\n    if nums[i] > 10 and nums[i] % 2 == 1 and\n\
    \      math.floor(nums[i] / 10) % 2 == 1 and\n      nums[i] % 10 % 2 == 1 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", '  local count
    = 0', "    local count = 0\n    for i = 1, #nums do\n        local number = nums[i]\n\
    \        if number > 10 and math.abs(number) % 2 == 1 and (number % 10) % 2 ==\
    \ 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    -- Implementation goes here\nend", "    local n = 0\n    for i, num\
    \ in ipairs(nums) do\n        if num > 10 and num % 2 == 1 and (num // 10) % 2\
    \ == 1 then\n            n = n + 1\n        end\n    end\n    return n\nend",
  "    local counter = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and\
    \ math.abs(num) % 10 % 2 ~= 0 and math.abs(num) / 10 % 2 ~= 0 then\n         \
    \   counter = counter + 1\n        end\n    end\n    return counter\nend", "\t\n\
    end", "  -- your code here\nend", "    local counter = 0\n    for i = 1, #nums\
    \ do\n        if nums[i] > 10 and nums[i] % 2 == 1 and string.sub(tostring(nums[i]),\
    \ 1, 1) % 2 == 1 and string.sub(tostring(nums[i]), -1) % 2 == 1 then\n       \
    \     counter = counter + 1\n        end\n    end\n    return counter\nend", " \
    \   local count = 0\n    for i = 1, #nums do\n        if (nums[i] > 10) and (nums[i]\
    \ % 2 ~= 0) and (math.floor(nums[i] / 10) % 2 ~= 0) then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend", "    local total =\
    \ 0\n    for i = 1, #nums do\n        if nums[i] > 10 and string.sub(tostring(nums[i]),\
    \ 1, 1) % 2 ~= 0 and string.sub(tostring(nums[i]), #nums[i], #nums[i]) % 2 ~=\
    \ 0 then\n            total = total + 1\n        end\n    end\n    return total\n\
    end", "  local cnt = 0\n  for _,v in ipairs(nums) do\n    local v = v < 0 and\
    \ -v or v\n    local has_odd_first_digit = v % 2 == 1\n    local has_odd_last_digit\
    \ = v % 10 == 1 or v % 10 == 3 or v % 10 == 5 or v % 10 == 7 or v % 10 == 9\n\
    \    if v > 10 and has_odd_first_digit and has_odd_last_digit then\n      cnt\
    \ = cnt + 1\n    end\n  end\n  return cnt\nend", "    local count = 0\n    for\
    \ _,num in ipairs(nums) do\n        if (math.abs(num) > 10) and ((num%2) == 1)\
    \ and ((num%10) == 1 or (num%10) == 3 or (num%10) == 5 or (num%10) == 7 or (num%10)\
    \ == 9) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    local count = 0\n    for i = 1, #nums do\n        local num\
    \ = nums[i]\n        if num > 10 and getFirstDigit(num) % 2 ~= 0 and getLastDigit(num)\
    \ % 2 ~= 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "\tlocal count = 0\n\tfor i = 1, #nums do\n\t\tlocal num = nums[i]\n\
    \t\tlocal first = num % 10\n\t\twhile (num > 0) do\n\t\t\tlocal last = num % 10\n\
    \t\t\tif (first % 2 == 1 and last % 2 == 1 and nums[i] > 10) then\n\t\t\t\tcount\
    \ = count + 1\n\t\t\tend\n\t\t\tnum = num / 10\n\t\tend\n\tend\n\treturn count\n\
    end", "  \nend", "  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 10\
    \ and string.match(tostring(nums[i]), '^%d+$') and \n      string.match(tostring(nums[i]),\
    \ '^[13579]%d+$') and \n      string.match(tostring(nums[i]), '%d+[13579]$') then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "\treturn #(Filter(nums,\
    \ function(num)\n\t\treturn num > 10 and (num % 2 == 1 and num // 10 % 2 == 1)\n\
    \tend))\nend", "    local count = 0\n    for _, num in ipairs(nums) do\n     \
    \   local first = tostring(num):sub(1, 1)\n        local last = tostring(num):sub(-1)\n\
    \        if num > 10 and first % 2 ~= 0 and last % 2 ~= 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    return \n  \
    \      table.reduce(\n            table.filter(\n                nums, \n    \
    \            function(n) \n                    return math.abs(n) > 10 and \n\
    \                        math.abs(n) % 10 % 2 == 1 and \n                    \
    \    math.abs(n) % 10^(math.floor(math.log10(math.abs(n)))) == 1\n           \
    \     end\n            ), \n            function(a,b) return a + b end, \n   \
    \         0\n        )\nend", "\tlocal count = 0\n\tfor _, num in ipairs(nums)\
    \ do\n\t\tif num > 10 and num % 2 == 1 and \n\t\t\tstring.sub(tostring(num), 1,\
    \ 1) % 2 == 1 and \n\t\t\tstring.sub(tostring(num), -1, -1) % 2 == 1 then\n\t\t\
    \tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    return #filter(hasOddFirstAndLastDigits,\
    \ greaterThanTen, nums)\nend", "    local counter = 0\n    for _, v in ipairs(nums)\
    \ do\n        if v > 10 and math.abs(v) % 10 % 2 == 1 and \n            math.floor(math.abs(v)\
    \ / 10) % 2 == 1 then\n            counter = counter + 1\n        end\n    end\n\
    \    return counter\nend", "    local count = 0\n    for _, num in ipairs(nums)\
    \ do\n        local numDigits =  string.len(tostring(num))\n        local firstDigit\
    \ = string.sub(tostring(num), 1, 1)\n        local lastDigit = string.sub(tostring(num),\
    \ numDigits, numDigits)\n        if (num > 10) and (firstDigit % 2 ~= 0) and (lastDigit\
    \ % 2 ~= 0) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "\tlocal count = 0\n\tfor i, v in ipairs(nums) do\n\t\tif v > 10\
    \ and math.abs(v) % 10 % 2 ~= 0 and math.floor(math.abs(v) / 10) % 2 ~= 0 then\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local count\
    \ = 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      local str\
    \ = num..\"\"\n      local firstDigit = tonumber(str:sub(1, 1))\n      local lastDigit\
    \ = tonumber(str:sub(str:len()))\n      if firstDigit%2 == 1 and lastDigit%2 ==\
    \ 1 then\n        count = count + 1\n      end\n    end\n  end\n  return count\n\
    end", "\t-- body\nend", "\tlocal function firstDigit(num)\n\t\tlocal t = tostring(num)\n\
    \t\treturn tonumber(t:sub(1, 1))\n\tend\n\tlocal function lastDigit(num)\n\t\t\
    local t = tostring(num)\n\t\treturn tonumber(t:sub(-1))\n\tend\n\tlocal function\
    \ isGreaterThanTen(num)\n\t\treturn num > 10\n\tend\n\tlocal function isFirstAndLastDigitOdd(num)\n\
    \t\treturn firstDigit(num) % 2 ~= 0 and lastDigit(num) % 2 ~= 0\n\tend\n\treturn\
    \ #filter(isGreaterThanTen, filter(isFirstAndLastDigitOdd, nums))\nend", "  local\
    \ count = 0\n  for _, n in ipairs(nums) do\n    if n > 10 and n // 10 % 2 == 1\
    \ and n % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "\tlocal count = 0\n\tfor i, v in ipairs(nums) do\n\t\tlocal first, last\
    \ = math.floor(v / 10), v % 10\n\t\tif v > 10 and first % 2 == 1 and last % 2\
    \ == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", end,
  "  local count = 0\n  for i = 1, #nums do\n    local number = nums[i]\n    if number\
    \ > 10 and math.fmod(number, 2) == 1 and math.fmod(number % 10, 2) == 1 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", end, "  -- TODO\n\
    end", "\tlocal count = 0\n\tfor i = 1, #nums do\n\t\tlocal num = nums[i]\n\t\t\
    if num > 10 and math.abs(num) % 2 == 1 and (num % 10) % 2 == 1 then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend", "\tlocal counter = 0\n\t\
    for i,v in ipairs(nums) do\n\t\tif v > 10 and (v % 2 == 1) and (v - v % 10) /\
    \ 10 % 2 == 1 and v % 10 % 2 == 1 then\n\t\t\tcounter = counter + 1\n\t\tend\n\
    \tend\n\treturn counter\nend", end, "\tlocal result = 0\n\tfor i = 1, #nums do\n\
    \t\tif (nums[i] > 10) and (firstDigit(nums[i]) % 2 ~= 0) and (lastDigit(nums[i])\
    \ % 2 ~= 0) then\n\t\t\tresult = result + 1\n\t\tend\n\tend\n\treturn result\n\
    end", "    local count = 0\n    for i = 1, #nums do\n        local num = nums[i]\n\
    \        if num > 10 and math.abs(num) % 2 == 1 and math.abs(num // 10) % 2 ==\
    \ 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for i, v in ipairs(nums) do\n    if math.abs(v) >\
    \ 10 and (math.abs(v) % 10) % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", end, " \
    \   local count = 0\n    for i,n in ipairs(nums) do\n        if n > 10 and (n%10)%2==1\
    \ and (n//10)%2==1 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "  local count = 0\n  for _, v in ipairs(nums) do\n \
    \   if v > 10 and math.abs(v) % 10 % 2 == 1 and math.abs(v) // 10 % 2 == 1 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "\t\nend", " \
    \   local counter = 0\n    for i = 1, #nums do\n        local num = nums[i]\n\
    \        if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n\
    \            counter = counter + 1\n        end\n    end\n    return counter\n\
    end", "  -- YOUR CODE HERE\n  local count = 0\n  for i = 1, #nums do\n    local\
    \ value = nums[i]\n    if value > 10 and math.fmod(value,2) == 1 and math.fmod(value,10)\
    \ == 1 then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \   local result = 0\n    for i, num in ipairs(nums) do\n        if num > 10 and\
    \ (num % 2 == 1) and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num %\
    \ 10 == 7 or num % 10 == 9) then\n            result = result + 1\n        end\n\
    \    end\n    return result\nend", "    local count = 0\n    for i = 1, #nums\
    \ do\n        if nums[i] > 10 and nums[i]%2 ~= 0 and string.sub(tostring(nums[i]),1,1)%2\
    \ ~= 0 and string.sub(tostring(nums[i]),-1,-1)%2 ~= 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local res =\
    \ 0\n    for _,num in ipairs(nums) do\n        local numStr = tostring(num)\n\
    \        if tonumber(numStr:sub(1,1)) % 2 == 1 and tonumber(numStr:sub(-1,-1))\
    \ % 2 == 1 and num > 10 then\n            res = res + 1\n        end\n    end\n\
    \    return res\nend", "    local count = 0\n    for i,v in ipairs(nums) do\n\
    \        if v > 10 and math.fmod(math.floor(v/10),2)~=0 and math.fmod(v,2)~=0\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "\tlocal function firstAndLastDigitsAreOdd(num)\n\t\tlocal sign = 0\n\t\t\
    local last = 0\n\t\tlocal first = 0\n\t\tif num < 0 then\n\t\t\tsign = -1\n\t\t\
    \tnum = -num\n\t\telse\n\t\t\tsign = 1\n\t\tend\n\t\tif num == 0 then\n\t\t\t\
    return false\n\t\tend\n\t\twhile num > 0 do\n\t\t\tlast = num % 10\n\t\t\tif num\
    \ > 9 then\n\t\t\t\tnum = math.floor(num / 10)\n\t\t\telse\n\t\t\t\tfirst = num\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif last % 2 == 1 and first % 2 == 1 then\n\
    \t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\tlocal count\
    \ = 0\n\tfor i = 1, #nums do\n\t\tif firstAndLastDigitsAreOdd(nums[i]) and nums[i]\
    \ > 10 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", '  count
    = 0', "   local count = 0\n   for _, num in ipairs(nums) do\n      if num > 10\
    \ then\n         local first = num % 10\n         local last = num % 10\n    \
    \     while num >= 10 do\n            num = num / 10\n         end\n         if\
    \ first % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n      \
    \   end\n      end\n   end\n   return count\nend", "    local count = 0\n    for\
    \ i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[1] %\
    \ 2 == 1 and nums[#nums[i]] % 2 == 1 then\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend", '  local total = 0', "    local count\
    \ = 0\n    for i,v in ipairs(nums) do\n        if v > 10 and v%2 == 1 and (v%10)%2\
    \ == 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "\treturn reduce(function(acc, n)\n\t\treturn acc + (n > 10 and isFirstAndLastDigitOdd(n)\
    \ and 1 or 0)\n\tend, 0, nums)\nend", "    local counter = 0\n    for _,num in\
    \ ipairs(nums) do\n        if num > 10 and num % 2 == 1 and (num // 10) % 2 ==\
    \ 1 then\n            counter = counter + 1\n        end\n    end\n    return\
    \ counter\nend", "    -- your code here\nend", "  local function isSpecial(x)\n\
    \    local first, last = x % 10, math.floor(x / 10) % 10\n    return x > 10 and\
    \ (first % 2 ~= 0) and (last % 2 ~= 0)\n  end\n  local count = 0\n  for i = 1,\
    \ #nums do\n    if isSpecial(nums[i]) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "    -- Implementation goes here\nend", "    local\
    \ result = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if\
    \ num > 10 and (num // 10) % 2 ~= 0 and num % 2 ~= 0 then\n            result\
    \ = result + 1\n        end\n    end\n    return result\nend", end, "    local\
    \ n = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and\n        \
    \    string.find(tostring(num), \"^[13579]\") and\n            string.find(tostring(num),\
    \ \"[13579]$\") then\n            n = n + 1\n        end\n    end\n    return\
    \ n\nend", "    local count = 0\n    for i = 1, #nums do\n        local num =\
    \ nums[i]\n        if num > 10 and isFirstAndLastDigitOdd(num) then\n        \
    \    count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ sum = 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 ==\
    \ 1 and nums[i] % 10 % 2 == 1 then\n            sum = sum + 1\n        end\n \
    \   end\n    return sum\nend", "  local count = 0\n  for i = 1, #nums do\n   \
    \ local num = nums[i]\n    if num > 10 and num % 2 == 1 and (num // 10) % 2 ==\
    \ 1 then\n      count = count + 1\n    end\n  end\n  return count\nend", "  \n\
    end", "\treturn _.reduce(nums, function(acc, num)\n\t\tif num > 10 and \n\t\t\t\
    _(tostring(num)):sub(1, 1) % 2 == 1 and \n\t\t\t_(tostring(num)):sub(-1) % 2 ==\
    \ 1 then\n\t\t\treturn acc + 1\n\t\telse\n\t\t\treturn acc\n\t\tend\n\tend, 0)\n\
    end", "    local c = 0\n    for i = 1, #nums do\n        local n = nums[i]\n \
    \       if n > 10 and (math.fmod(n, 2) ~= 0 and math.fmod(n % 10, 2) ~= 0) then\n\
    \            c = c + 1\n        end\n    end\n    return c\nend\nassert(specialFilter({15,\
    \ -73, 14, -15}) == 1)\nassert(specialFilter({33, -2, -3, 45, 21, 109}) == 2)\n\
    assert(specialFilter({-2, 0, 10, 20, -30, 100, 110, 120, -130}) == 0)", "  local\
    \ function isMoreThan10AndOdd(num)\n    local str = num .. ''\n    return #str\
    \ > 1 and num > 10 and tonumber(str:sub(1, 1)) % 2 ~= 0 and tonumber(str:sub(#str,\
    \ #str)) % 2 ~= 0\n  end\n  local count = 0\n  for i = 1, #nums do\n    if isMoreThan10AndOdd(nums[i])\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "  -- your\
    \ code here\n  -- Write your code below:\n  local count = 0\n  for i = 1, #nums\
    \ do\n    local lastDigit = nums[i] % 10\n    local ten = 10\n    local firstDigit\
    \ = 0\n    if nums[i] < 0 then \n      ten = 11\n    end\n    while nums[i] >\
    \ 0 do\n      if nums[i] / ten == 0 then\n        break\n      end\n      firstDigit\
    \ = nums[i] / ten\n      nums[i] = nums[i] / ten\n    end\n    if (nums[i] >=\
    \ 10) and (math.floor(firstDigit) % 2 == 1) and (lastDigit % 2 == 1) then\n  \
    \    count = count + 1\n    end\n  end\n  return count\nend", "  local count =\
    \ 0\n  for _, n in ipairs(nums) do\n    if n > 10 and (n % 2 == 1) and (n % 10\
    \ == 1 or n % 10 == 3 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9) then\n   \
    \   count = count + 1\n    end\n  end\n  return count\nend", "    local res =\
    \ 0\n    for _, num in ipairs(nums) do\n        local str = tostring(num)\n  \
    \      if #str > 1 and str:match(\"^[1-9]%d*[13579]$\") then\n            res\
    \ = res + 1\n        end\n    end\n    return res\nend", "  -- TODO\nend", " \
    \ local count = 0\n  for i, v in ipairs(nums) do\n    local first = math.abs(v)\n\
    \    local last = v % 10\n    if first > 10 and (first % 2 == 1 and last % 2 ==\
    \ 1) then\n      count = count + 1\n    end\n  end\n  return count\nend", "  \
    \  local count = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and\
    \ math.fmod(num, 2) ~= 0 then\n            local firstDigit = math.floor(num/10)\n\
    \            local lastDigit = math.fmod(num, 10)\n            if math.fmod(firstDigit,\
    \ 2) ~= 0 and math.fmod(lastDigit, 2) ~= 0 then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend", "    local\
    \ count = 0\n    for _, num in ipairs(nums) do\n        local num_str = tostring(num)\n\
    \        local first_num = tonumber(string.sub(num_str, 1, 1))\n        local\
    \ last_num = tonumber(string.sub(num_str, -1))\n        if num > 10 and first_num\
    \ % 2 ~= 0 and last_num % 2 ~= 0 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend", "    --[[\n    local ln = 0\n    for _,\
    \ num in ipairs(nums) do\n        local str = tostring(num)\n        if tonumber(str:sub(1,\
    \ 1)) % 2 ~= 0 and tonumber(str:sub(-1)) % 2 ~= 0 and num > 10 then\n        \
    \    ln = ln + 1\n        end\n    end\n    --]]\n    local ln = 0\n    for _,\
    \ num in ipairs(nums) do\n        local first = num // 100\n        local last\
    \ = num % 10\n        if first % 2 ~= 0 and last % 2 ~= 0 and num > 10 then\n\
    \            ln = ln + 1\n        end\n    end\n    return ln\nend", "  local\
    \ count = 0\n  for i, v in ipairs(nums) do\n    if v > 10 and isFirstLastOdd(v)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "  -- YOUR\
    \ CODE HERE\n  local sum=0\n  for i=1,#nums do\n    local num=math.abs(nums[i])\n\
    \    if num>10 and num%2~=0 and num%10~=0 then\n      sum=sum+1\n    end\n  end\n\
    \  return sum\nend", "    return 0\nend", "    local count = 0\n    for i = 1,\
    \ #nums do\n        local num = nums[i]\n        if num > 10 and nums[i] % 2 ==\
    \ 1 and math.floor(num / 10) % 2 == 1 then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend", "    return #nums\nend", "  local\
    \ ct = 0\n  for i = 1, #nums do\n    local n = nums[i]\n    if n > 10 and n %\
    \ 2 == 1 and math.floor(n / 10) % 2 == 1 then\n      ct = ct + 1\n    end\n  end\n\
    \  return ct\nend", "  local count = 0\n  for i = 1, #nums do\n    if nums[i]\
    \ > 10 and math.fmod(nums[i], 2) == 1 and math.fmod(nums[i] / 10, 2) == 1 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", end, "\tlocal\
    \ count = 0\n\tfor i = 1, #nums do\n\t\tlocal number = nums[i]\n\t\tlocal lastDigit\
    \ = math.floor(number%10)\n\t\tlocal firstDigit = math.floor(number/math.pow(10,\
    \ math.floor(math.log10(number))))\n\t\t\n\t\tif math.floor(number/10) ~= 0 then\n\
    \t\t\tif math.abs(number) > 10 and firstDigit%2 ~= 0 and lastDigit%2 ~= 0 then\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", " \
    \   -- write your code here\nend", "   local function isFiltered(num)\n      return\
    \ num > 10 and (num % 2 == 1) and (math.floor(num / 10) % 2 == 1)\n   end\n  \
    \ local result = 0\n   for _, num in ipairs(nums) do\n      if isFiltered(num)\
    \ then\n         result = result + 1\n      end\n   end\n   return result\nend",
  "    local greater10andOddFandL = 0\n    for i = 1, #nums do\n        if nums[i]\
    \ > 10 then\n            local firstDigit = string.sub(tostring(nums[i]), 1, 1)\n\
    \            local lastDigit = string.sub(tostring(nums[i]), 2, 2)\n         \
    \   if firstDigit % 2 ~= 0 and lastDigit % 2 ~= 0 then\n                greater10andOddFandL\
    \ = greater10andOddFandL + 1\n            end\n        end\n    end\n    return\
    \ greater10andOddFandL\nend", "  local counter = 0\n  for i,v in ipairs(nums)\
    \ do\n    if v > 10 and math.abs(v) % 10 % 2 == 1 and math.abs(v) % 10 % 2 ==\
    \ 1 then\n      counter = counter + 1\n    end\n  end\n  return counter\nend",
  "  -- YOUR CODE HERE\n  local count = 0\n  for _, v in ipairs(nums) do\n    if v\
    \ > 10 and math.abs(v) % 10 % 2 ~= 0 and math.floor(math.abs(v) / 10) % 2 ~= 0\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "\tlocal\
    \ function firstDigit(num)\n\t\treturn math.floor(math.abs(num) / 10)\n\tend\n\
    \tlocal function lastDigit(num)\n\t\treturn math.abs(num) % 10\n\tend\n\t\n\t\
    local count = 0\n\tfor _, v in ipairs(nums) do\n\t\tif v > 10 and firstDigit(v)\
    \ % 2 ~= 0 and lastDigit(v) % 2 ~= 0 then\n\t\t\tcount = count + 1\n\t\tend\n\t\
    end\n\treturn count\nend", "    return 0 -- TODO\nend", "    -- write your code\
    \ here\n    return 0\nend", "  -- body\nend", "  local count = 0\n  for i = 1,\
    \ #nums do\n    local num = nums[i]\n    if num > 10 and num % 2 == 1 and num\
    \ < 10 then\n      count = count + 1\n    elseif num > 10 and num % 2 == 1 and\
    \ num > 10 then\n      local lastDigit = num % 10\n      while num > 0 do\n  \
    \      if num < 10 then\n          if num % 2 == 1 and lastDigit % 2 == 1 then\n\
    \            count = count + 1\n          end\n          break\n        end\n\
    \        num = num / 10\n      end\n    end\n  end\n  return count\nend", "  local\
    \ count = 0\n  for i = 1, #nums do\n    if nums[i] > 10 and lastDigit(nums[i])\
    \ % 2 ~= 0 and firstDigit(nums[i]) % 2 ~= 0 then\n      count = count + 1\n  \
    \  end\n  end\n  return count\nend", "    local count = 0\n    for i = 1, #nums\
    \ do\n        local num = nums[i]\n        if num > 10 and isOdd(num) and isOdd(num\
    \ % 10) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    local count = 0\n    for _, n in ipairs(nums) do\n       \
    \ local first = n % 10\n        local last = n\n        while last >= 10 do\n\
    \            last = last / 10\n        end\n        last = math.floor(last)\n\
    \        if first > 0 and first % 2 ~= 0 and last > 0 and last % 2 ~= 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local count = 0\n    for _, v in ipairs(nums) do\n        if v > 10 and isOdd(v\
    \ % 10) and isOdd(math.floor(v / math.pow(10, #tostring(v) - 1))) then\n     \
    \       count = count + 1\n        end\n    end\n    return count\nend", "   \
    \ local count = 0\n    for _, n in ipairs(nums) do\n        if n > 10 and math.abs(n)\
    \ % 10 % 2 ~= 0 and math.abs(n) % 10 ~= 5 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local count = 0\n    for _,\
    \ value in ipairs(nums) do\n        if math.abs(value) > 10 and value % 2 ~= 0\
    \ and math.abs(value) % 10 % 2 ~= 0 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend", "  local count = 0\n  local index =\
    \ 1\n  while index <= #nums do\n    local num = nums[index]\n    if num > 10 and\
    \ num % 2 == 1 and\n        num % 10 % 2 == 1 and num / 100 % 2 == 1 then\n  \
    \    count = count + 1\n    end\n    index = index + 1\n  end\n  return count\n\
    end", "\tlocal count = 0\n\tfor _, num in ipairs(nums) do\n\t\tlocal first_digit\
    \ = num % 10\n\t\tlocal last_digit = num % 2\n\t\tif first_digit ~= 0 and last_digit\
    \ ~= 0 and num > 10 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "    -- You need to write this function.\nend", "    local counter = 0\n\
    \    for i = 1, #nums do\n        local num = nums[i]\n        if num > 10 and\
    \ num % 2 == 1 and floor(num / 10) % 2 == 1 then\n            counter = counter\
    \ + 1\n        end\n    end\n    return counter\nend", "\tlocal count = 0\n\t\
    for i = 1, #nums do\n\t\tlocal number = nums[i]\n\t\tif number > 10 and number\
    \ % 2 == 1 and math.floor(number / 10) % 2 == 1 then\n\t\t\tcount = count + 1\n\
    \t\tend\n\tend\n\treturn count\nend", "    -- YOUR CODE HERE\n    local count\
    \ = 0\n    for i,v in ipairs(nums) do\n        if(v > 10 and v ~= 0) then\n  \
    \          local mod = v % 10\n            if(mod == 1 or mod == 3 or mod == 5\
    \ or mod == 7 or mod == 9) then\n                v = v // 10\n               \
    \ mod = v % 10\n                if(mod == 1 or mod == 3 or mod == 5 or mod ==\
    \ 7 or mod == 9) then\n                    count = count + 1\n               \
    \ end\n            end\n        end\n    end\n    return count\nend", "  local\
    \ count = 0\n  for i = 1, #nums do\n    if nums[i] > 10 and nums[i] % 2 == 1 and\
    \ math.floor(nums[i] / 10) % 2 == 1 then\n      count = count + 1\n    end\n \
    \ end\n  return count\nend", "    -- insert your code here\n    local count =\
    \ 0\n    for i, n in ipairs(nums) do\n        if n > 10 and\n        (n % 10)\
    \ % 2 ~= 0 and\n        (n // 100) % 2 ~= 0 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", '    local count = 0', "\t\
    local count = 0\n\tfor _, v in ipairs(nums) do\n\t\tif v > 10 and (v % 2 == 1)\
    \ and (math.floor(v / 10) % 2 == 1) then\n\t\t\tcount = count + 1\n\t\tend\n\t\
    end\n\treturn count\nend", "    -- your code here\nend", "    local count = 0\n\
    \    for i = 1, #nums do\n        local num = nums[i]\n        if num > 10 and\
    \ math.fmod(num, 2) == 1 and\n           math.fmod(math.abs(num), 10) == 1 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  local count = 0\n  for _,num in ipairs(nums) do\n    local firstDigit = num %\
    \ 10\n    local lastDigit = math.floor(num / 10) % 10\n    if num > 10 and firstDigit\
    \ % 2 == 1 and lastDigit % 2 == 1 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local count = 0\n    for i = 1, #nums do\n       \
    \ local num = nums[i]\n        if num > 10 and (num % 2 == 1) and (string.sub(tostring(num),\
    \ 1, 1) % 2 == 1) and (string.sub(tostring(num), #tostring(num), #tostring(num))\
    \ % 2 == 1) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    local count = 0\n    for i = 1, #nums do\n        if nums[i]\
    \ > 10 and (nums[i]%2 == 1 or math.floor(nums[i]/10)%2 == 1) then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ counter = 0\n    for i = 1, #nums do\n        local temp = nums[i]\n       \
    \ if temp > 10 and temp % 2 ~= 0 and temp % 10 ~= 0 then\n            local temp2\
    \ = 0\n            while temp > 10 do\n                temp = temp / 10\n    \
    \            temp2 = temp\n            end\n            if temp2 % 2 ~= 0 then\n\
    \                counter = counter + 1\n            end\n        end\n    end\n\
    \    return counter\nend", "    -- TODO: Write your code here\nend", "    local\
    \ count = 0\n    for _, v in ipairs(nums) do\n        if v >= 10 and math.abs(v)\
    \ % 10 % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local counter\
    \ = 0\n    for i = 1, #nums do\n        local str = tostring(nums[i])\n      \
    \  if #str > 1 and tonumber(str:sub(1, 1)) % 2 ~= 0 and tonumber(str:sub(-1))\
    \ % 2 ~= 0 and nums[i] > 10 then\n            counter = counter + 1\n        end\n\
    \    end\n    return counter\nend", "\tlocal count = 0\n\tfor _, num in ipairs(nums)\
    \ do\n\t\tif num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "   local counter\
    \ = 0\n   for i, v in ipairs(nums) do\n      local first_digit = math.floor(v\
    \ / 10)\n      local last_digit = v % 10\n      if v > 10 and (first_digit % 2\
    \ == 1 or last_digit % 2 == 1) then\n         counter = counter + 1\n      end\n\
    \   end\n   return counter\nend", "  local count = 0\n  for _, num in ipairs(nums)\
    \ do\n    if (num > 10) and (num % 2 == 1) and (math.floor(num / 10) % 2 == 1)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "\tlocal\
    \ counter = 0\n\tfor i,v in ipairs(nums) do\n\t\tif v > 10 and v%2 ~= 0 and math.floor(v/10)%2\
    \ ~= 0 and v%10%2 ~= 0 then\n\t\t\tcounter = counter + 1\n\t\tend\n\tend\n\treturn\
    \ counter\nend", "    local count = 0\n    for i = 1, #nums do\n        local\
    \ c = nums[i]\n        local fd = math.floor(c / 10) % 10\n        local ld =\
    \ c % 10\n        if c > 10 and (fd % 2 ~= 0 and ld % 2 ~= 0) then\n         \
    \   count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ count = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if\
    \ num >= 10 and string.sub(tostring(num), 1, 1) % 2 ~= 0 \n            and string.sub(tostring(num),\
    \ -1) % 2 ~= 0 then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend", "  local count = 0\n  for i, v in ipairs(nums) do\n    local\
    \ d1 = v%10\n    local d2 = math.floor(v/10)%10\n    if v > 10 and d1%2==1 and\
    \ d2%2==1 then\n      count = count + 1\n    end\n  end\n  return count\nend",
  '    local count = 0', "    -- code goes here\nend", "\tlocal count = 0\n\tlocal\
    \ nums = nums\n\tfor key, val in pairs(nums) do\n\t\tif val > 10 and string.sub(val,1,1)\
    \ % 2 == 1 and string.sub(val, -1) % 2 == 1 then\n\t\t\tcount = count + 1\n\t\t\
    end\n\tend\n\treturn count\nend", "    local n = 0\n    for i = 1, #nums do\n\
    \        local x = nums[i]\n        if (x > 10) and (x // 10 % 2 == 1) and (x\
    \ % 2 == 1) then\n            n = n + 1\n        end\n    end\n    return n\n\
    end", "\tlocal cnt = 0\n\tfor i, v in ipairs(nums) do\n\t\tif v >= 10 and v %\
    \ 2 == 1 and (math.floor(v / 10) % 2 == 1 or v % 10 % 2 == 1) then\n\t\t\tcnt\
    \ = cnt + 1\n\t\tend\n\tend\n\treturn cnt\nend", "\tlocal a=0\n\tfor k,v in pairs(nums)\
    \ do\n\t\tif ((v>10) and (math.floor(v/10)%2~=0) and (v%2~=0)) then\n\t\t\ta=a+1\n\
    \t\tend\n\tend\n\treturn a\nend", "    local count = 0\n    for _, num in ipairs(nums)\
    \ do\n        if num > 10 then\n            local firstDigit = num % 10\n    \
    \        local lastDigit = num // 10 % 10\n            if firstDigit % 2 == 1\
    \ and lastDigit % 2 == 1 then\n                count = count + 1\n           \
    \ end\n        end\n    end\n    return count\nend", "\t-- your code here\nend",
  "    local count = 0\n    for _,num in ipairs(nums) do\n        local numString\
    \ = tostring(num)\n        local firstDigit = tonumber(numString:sub(1,1))\n \
    \       local lastDigit = tonumber(numString:sub(-1))\n        if firstDigit %\
    \ 2 ~= 0 and lastDigit % 2 ~= 0 and num > 10 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", "    local num = 0\n    for\
    \ _, n in ipairs(nums) do\n        if n > 10 and n % 2 == 1 and n // 10 % 2 ==\
    \ 1 then\n            num = num + 1\n        end\n    end\n    return num\nend",
  "  local count = 0\n  for i, v in ipairs(nums) do\n    if v > 10 and (v % 2 ~= 0)\
    \ and ((v % 10) % 2 ~= 0) then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "    -- your code here\nend", "    -- Code goes here\nend", " \
    \   local cnt = 0\n    for i = 1, #nums do\n        local num = nums[i]\n    \
    \    if num >= 10 and (num % 2 == 1) and (num // 10 % 2 == 1) then\n         \
    \   cnt = cnt + 1\n        end\n    end\n    return cnt\nend", "    -- write your\
    \ code here\n    local sum = 0\n    for i, v in ipairs(nums) do\n        if v\
    \ > 10 and v % 2 == 1 and math.abs(v) % 10 % 2 == 1 then\n            sum = sum\
    \ + 1\n        end\n    end\n    return sum\nend", "\tlocal res = 0\n\tfor _,\
    \ v in ipairs(nums) do\n\t\tif (v > 10) and ((v % 2 == 1) and (v % 10 == 1 or\
    \ v % 10 == 3 or v % 10 == 5 or v % 10 == 7 or v % 10 == 9)) then\n\t\t\tres =\
    \ res + 1\n\t\tend\n\tend\n\treturn res\nend", "\t-- write your code here\nend",
  end, "  -- @TODO: Implement this function\n  local num = 0\n  for i, v in ipairs(nums)\
    \ do\n    if v > 10 and math.abs(v) % 10 % 2 ~= 0 and math.abs(v) % 10 ~= math.abs(v)\
    \ % 10 ^ 10 % 10 then\n      num = num + 1\n    end\n  end\n  return num\nend",
  "    local count = 0\n    for _, num in ipairs(nums) do\n        local str = tostring(num)\n\
    \        if num > 10 and (#str > 1) and (str:sub(1, 1) % 2 ~= 0) and (str:sub(-1)\
    \ % 2 ~= 0) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nprint(specialFilter({15, -73, 14, -15}))\nprint(specialFilter({33,\
    \ -2, -3, 45, 21, 109}))\nprint(\"---------------------------------------\")",
  "  local count = 0\n  local function first_and_last_odd(n)\n    local first, last\
    \ = string.sub(n, 1, 1), string.sub(n, #n, #n)\n    return tonumber(first) % 2\
    \ ~= 0 and tonumber(last) % 2 ~= 0\n  end\n  for _, v in ipairs(nums) do\n   \
    \ if v > 10 and first_and_last_odd(v) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "  local count = 0\n  for i,v in ipairs(nums) do\n\
    \    if ((v > 10) and (v % 2 ~= 0) and (string.len(v) > 1) and (math.floor(v /\
    \ 10) % 2 ~= 0)) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "    local num = 0\n    for i = 1, #nums do\n        if nums[i] > 10 and\
    \ nums[i] % 2 == 1 and nums[1] % 2 == 1 and nums[#nums[i]] % 2 == 1 then\n   \
    \         num = num + 1\n        end\n    end\n    return num\nend", "    local\
    \ numsFiltered = 0\n    for i = 1, #nums do\n        local num = nums[i]\n   \
    \     if num > 10 and isOdd(math.floor(num / 10)) and isOdd(num % 10) then\n \
    \           numsFiltered = numsFiltered + 1\n        end\n    end\n    return\
    \ numsFiltered\nend", "\tlocal count = 0\n\tfor _, num in ipairs(nums) do\n\t\t\
    if num > 10 and math.abs(num) % 10 % 2 == 1 and num // 10 % 2 == 1 then\n\t\t\t\
    count = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    -- your code here\n\
    \    local cnt = 0\n    for i = 1, #nums do\n        if nums[i] > 10 then\n  \
    \          -- \u4E24\u4F4D\u6570\n            if nums[i] >= 10 and nums[i] < 100\
    \ then\n                if nums[i] % 2 == 1 then\n                    cnt = cnt\
    \ + 1\n                end\n            else\n                -- \u5148\u7B97\u51FA\
    \u6570\u5B57\u7684\u957F\u5EA6\n                local length = 1\n           \
    \     local v = nums[i]\n                while v >= 10 do\n                  \
    \  v = v / 10\n                    length = length + 1\n                end\n\
    \                local first = 0\n                local last = 0\n           \
    \     if length % 2 == 1 then\n                    local start = math.floor(length\
    \ / 2)\n                    first = math.floor(nums[i] / (10 ^ start)) % 10\n\
    \                    last = nums[i] % 10\n                else\n             \
    \       local start = math.floor(length / 2)\n                    first = math.floor(nums[i]\
    \ / (10 ^ start)) % 10\n                    last = math.floor(nums[i] / (10 ^\
    \ (start - 1))) % 10\n                end\n                if first % 2 == 1 and\
    \ last % 2 == 1 then\n                    cnt = cnt + 1\n                end\n\
    \            end\n        end\n    end\n    return cnt\nend", '  local count =
    0', "    local count = 0\n    for _, num in ipairs(nums) do\n        if (num >\
    \ 10) and (num % 2 == 1) and (math.floor(num/10) % 2 == 1) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "\tlocal c = 0\n\t\
    for i,v in ipairs(nums) do\n\t\tlocal mod = v\n\t\tlocal f = v\n\t\twhile f >\
    \ 0 do\n\t\t\tf = math.floor(f / 10)\n\t\t\tmod = mod % 10\n\t\tend\n\t\tif mod\
    \ % 2 ~= 0 and v > 10 then\n\t\t\tc = c + 1\n\t\tend\n\tend\n\treturn c\nend",
  '  local count = 0', "  local cnt = 0\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    if num > 10 and math.abs(num) % 2 == 1 and math.abs(num) % 10 % 2 == 1 then\n\
    \      cnt = cnt + 1\n    end\n  end\n  return cnt\nend", "  -- your code here\n\
    \  local counter = 0\n  for i = 1, #nums do\n    if nums[i] > 10 then\n      local\
    \ last_digit = nums[i] % 10\n      local first_digit = nums[i]\n      while first_digit\
    \ > 10 do\n        first_digit = first_digit / 10\n      end\n      if last_digit\
    \ % 2 == 1 and first_digit % 2 == 1 then\n        counter = counter + 1\n    \
    \  end\n    end\n  end\n  return counter\nend", "    local function first_last_odd(num)\n\
    \        if num < 10 or num > 100 then\n            return false\n        end\n\
    \        local first = num % 10\n        local last = num // 10\n        return\
    \ first % 2 == 1 and last % 2 == 1\n    end\n    local function greater_than_10(num)\n\
    \        return num > 10\n    end\n    local function my_filter(nums, predicate)\n\
    \        local filtered = {}\n        for i, num in ipairs(nums) do\n        \
    \    if predicate(num) then\n                table.insert(filtered, num)\n   \
    \         end\n        end\n        return filtered\n    end\n    local greater_than_10_odd\
    \ = my_filter(nums, first_last_odd)\n    local odd_greater_than_10 = my_filter(greater_than_10_odd,\
    \ greater_than_10)\n    return #odd_greater_than_10\nend", "  local res = 0\n\
    \  for i = 1, #nums do\n    local num = nums[i]\n    if num >= 10 and num % 2\
    \ == 1 and num // 10 % 2 == 1 then\n      res = res + 1\n    end\n  end\n  return\
    \ res\nend", "\tlocal count = 0\n\tfor i = 1, #nums do\n\t\tlocal n = nums[i]\n\
    \t\tif math.abs(n) > 10 and math.abs(n) % 2 == 1 and \n\t\t\tn % 10 % 2 == 1 and\
    \ n // 10 % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "    local count = 0\n    for _, num in ipairs(nums) do\n        if num\
    \ > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "\tif #nums == 0\
    \ then return 0 end\n\tlocal cnt = 0\n\tfor i,v in ipairs(nums) do\n\t\tif v >\
    \ 10 and math.floor(v/10)%2 == 1 and v%2 == 1 then\n\t\t\tcnt = cnt + 1\n\t\t\
    end\n\tend\n\treturn cnt\nend", "    local count = 0\n    for i, v in ipairs(nums)\
    \ do\n        if v > 10 and math.abs(v) % 10 % 2 == 1 and v % 2 == 1 then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend", " \
    \ local res = 0\n  for i, v in ipairs(nums) do\n    if v > 10 and (v % 2 == 1\
    \ and v // 10 % 2 == 1) then\n      res = res + 1\n    end\n  end\n  return res\n\
    end", "  local result = 0\n  for _, num in ipairs(nums) do\n    if num >= 10 and\
    \ math.fmod(num, 2) == 1 and\n      math.fmod(math.floor(num / 10), 2) == 1 and\n\
    \      math.fmod(num % 10, 2) == 1 then\n      result = result + 1\n    end\n\
    \  end\n  return result\nend", "    return nil\nend", "    local c = 0\n    for\
    \ _, num in ipairs(nums) do\n        if num > 10 and math.abs(num) % 10 % 2 ~=\
    \ 0 and math.abs(num) / 10 % 2 ~= 0 then\n            c = c + 1\n        end\n\
    \    end\n    return c\nend", "  local count = 0\n  for i, num in ipairs(nums)\
    \ do\n    if num > 10 and num % 2 == 1 and (num // 10) % 2 == 1 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "\tlocal count = 0\n\tfor\
    \ _, n in ipairs(nums) do\n\t\tif n > 10 and math.fmod(n, 2) == 1 and math.fmod(math.floor(n\
    \ / 10), 2) == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "    local res = 0\n    for _, num in ipairs(nums) do\n        local first\
    \ = num % 10\n        local last = num\n        while last >= 10 do\n        \
    \    last = last / 10\n        end\n        if num > 10 and first % 2 == 1 and\
    \ last % 2 == 1 then\n            res = res + 1\n        end\n    end\n    return\
    \ res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
