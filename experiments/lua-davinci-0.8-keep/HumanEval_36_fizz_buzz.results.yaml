name: HumanEval_36_fizz_buzz
language: lua
results:
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 0, n - 1 do\n    if (i % 11 == 0 or i % 13 == 0) and i % 7 == 0\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3im2__7c.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3im2__7c.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local sum =\
    \ 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n   \
    \         local str = tostring(i)\n            for j = 1, #str do\n          \
    \      if str:sub(j, j) == '7' then\n                    sum = sum + 1\n     \
    \           end\n            end\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.040 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal count =\
    \ 0\n\tfor i = 1, n-1 do\n\t\tif (i % 11 == 0 or i % 13 == 0) and i % 10 == 7\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgu3eku8f.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpgu3eku8f.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 0, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n \
    \           while i > 0 do\n                local digit = i % 10\n           \
    \     if digit == 7 then\n                    count = count + 1\n            \
    \    end\n                i = math.floor(i / 10)\n            end\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.040 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n do\n    if ((i % 11 == 0) or (i % 13 == 0)) and num_of_7s(i)\
    \ > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaituyk_6.lua:11:\
    \ attempt to call a nil value (global 'num_of_7s')\nstack traceback:\n\t/tmp/tmpaituyk_6.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpaituyk_6.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local r = 0\n\
    \  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n      local t = tostring(i)\n\
    \      for c in t:gmatch('.') do\n        if c == '7' then\n          r = r +\
    \ 1\n        end\n      end\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12anz8hz.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp12anz8hz.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal sum = 0\n\
    \tlocal count = 0\n\tfor i = 1, n - 1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\
    \t\t\tcount = count + 1\n\t\t\tsum = sum + count_7(i)\n\t\tend\n\tend\n\treturn\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ehh83wq.lua:14:\
    \ attempt to call a nil value (global 'count_7')\nstack traceback:\n\t/tmp/tmp6ehh83wq.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp6ehh83wq.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local cnt = 0\n\
    \  for i = 1, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      local s\
    \ = tostring(i)\n      for j = 1, #s do\n        if s:sub(j, j) == '7' then\n\
    \          cnt = cnt + 1\n        end\n      end\n    end\n  end\n  return cnt\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal c = 0\n\
    \tfor i = 1, n - 1 do\n\t\tif (i % 11 == 0 or i % 13 == 0) and string.find(i,\
    \ '7') then\n\t\t\tc = c + 1\n\t\tend\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkk8pwcvs.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpkk8pwcvs.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local sum =\
    \ 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and i %\
    \ 7 == 0 then\n            local str = tostring(i)\n            local c\n    \
    \        for c in str:gmatch(\".\") do\n                if c == \"7\" then\n \
    \                   sum = sum + 1\n                end\n            end\n    \
    \    end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxhl2mu_.lua:29:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpbxhl2mu_.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    if n < 7 then\n\
    \        return 0\n    end\n    local count = 0\n    for i = math.floor(n / 11)\
    \ * 11, 7, -11 do\n        if string.find(i, '7') then\n            count = count\
    \ + 1\n        end\n    end\n    for i = math.floor(n / 13) * 13, 7, -13 do\n\
    \        if string.find(i, '7') then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplk6rrkrx.lua:31:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmplk6rrkrx.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    n = n - 1\n\
    \    return n ~= 0 and (fizz_buzz(n) + (n % 11 == 0 and n % 13 == 0 and 1 or 0)\
    \ + (string.find(tostring(n), \"7\") and 1 or 0)) or 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuej_hiun.lua:16:\
    \ expected: 0, actual: 5\nstack traceback:\n\t/tmp/tmpuej_hiun.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local total =\
    \ 0\n  for i = 7, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      local\
    \ j = i\n      while j > 0 do\n        if j % 10 == 7 then\n          total =\
    \ total + 1\n        end\n        j = j // 10\n      end\n    end\n  end\n  return\
    \ total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n   local t = {11,\
    \ 13}\n   local count = 0\n   for i = 1, #t do\n      local divisor = t[i]\n \
    \     local d = n / divisor\n      while d > 0 do\n         if tostring(d):match('7')\
    \ then\n            count = count + 1\n         end\n         d = d / 10\n   \
    \   end\n   end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7959x056.lua:27:\
    \ expected: 0, actual: 127\nstack traceback:\n\t/tmp/tmp7959x056.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local function\
    \ is_divisible_by_11_or_13(num)\n        return num % 11 == 0 or num % 13 == 0\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3ks1toz3.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local i, j, k\
    \ = 0, 0, 0\n  for x=1,n-1 do\n    if x % 11 == 0 then i = i + 1 end\n    if x\
    \ % 13 == 0 then j = j + 1 end\n    if x % 11 == 0 or x % 13 == 0 then k = k +\
    \ 1 end\n  end\n  return i + j - k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4x0_a4f.lua:22:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpw4x0_a4f.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    -- TODO\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpma2m0g3j.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpma2m0g3j.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n - 1 do\n    if (i % 11 == 0 or i % 13 == 0) and i % 10 ==\
    \ 7 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbbfit4f.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphbbfit4f.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tif (n <= 0) then\n\
    \t\treturn 0\n\tend\n\tlocal s = 0\n\tif (n % 11 == 0) then\n\t\tlocal r = n /\
    \ 11\n\t\twhile (r > 0) do\n\t\t\tif (r % 10 == 7) then\n\t\t\t\ts = s + 1\n\t\
    \t\tend\n\t\t\tr = math.floor(r / 10)\n\t\tend\n\telseif (n % 13 == 0) then\n\t\
    \tlocal r = n / 13\n\t\twhile (r > 0) do\n\t\t\tif (r % 10 == 7) then\n\t\t\t\t\
    s = s + 1\n\t\t\tend\n\t\t\tr = math.floor(r / 10)\n\t\tend\n\tend\n\treturn s\
    \ + fizz_buzz(n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7lghrcn.lua:37:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpa7lghrcn.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local counter\
    \ = 0\n    for i = 1, n do\n        if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n            counter = counter + 1\n        end\n    end\n    return\
    \ counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9uja2xd.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpa9uja2xd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local c = 0\n\
    \    for i = 1, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n       \
    \     local t = i\n            while t > 0 do\n                c = c + (t % 10\
    \ == 7 and 1 or 0)\n                t = math.floor(t / 10)\n            end\n\
    \        end\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.030 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n   -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8otz_84.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpm8otz_84.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local result\
    \ = 0\n  local divs = {11, 13}\n  for i = 1, n - 1 do\n    local digit_7 = false\n\
    \    for j = 1, #divs do\n      if i % divs[j] == 0 then\n        for c in tostring(i):gmatch('7')\
    \ do\n          digit_7 = true\n        end\n        if digit_7 then\n       \
    \   result = result + 1\n        end\n      end\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpji8o2j0p.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpji8o2j0p.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       while i > 0 do\n                if i % 10 == 7 then\n                \
    \    count = count + 1\n                end\n                i = i // 10\n   \
    \         end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptowik3_v.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmptowik3_v.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if math.fmod(i, 11) == 0 or math.fmod(i,\
    \ 13) == 0 then\n            local temp = i\n            while temp > 0 do\n \
    \               local digit = math.fmod(temp, 10)\n                if digit ==\
    \ 7 then\n                    count = count + 1\n                end\n       \
    \         temp = math.floor(temp / 10)\n            end\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.050 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  -- your code\
    \ here\n  local n7 = 0\n  local n11 = 0\n  local n13 = 0\n  for i = 1,n do\n \
    \   local c = tostring(i)\n    for s in c:gmatch('7') do\n      n7 = n7 + 1\n\
    \    end\n    if (i%11 == 0) then\n      n11 = n11 + 1\n    end\n    if (i%13\
    \ == 0) then\n      n13 = n13 + 1\n    end\n  end\n  return n7 - n11 - n13\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1d0h6zos.lua:31:\
    \ expected: 0, actual: -2\nstack traceback:\n\t/tmp/tmp1d0h6zos.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local sevens\
    \ = 0\n  for i = 1, n - 1 do\n    if (i % 11 == 0 or i % 13 == 0) and math.floor(i\
    \ % 10) == 7 then\n      sevens = sevens + 1\n    end\n  end\n  return sevens\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqnlwbnr.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzqnlwbnr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        local is_divisible_by_eleven = i % 11 == 0\n\
    \        local is_divisible_by_thirteen = i % 13 == 0\n        if is_divisible_by_eleven\
    \ or is_divisible_by_thirteen then\n            local str = tostring(i)\n    \
    \        for digit in str:gmatch(\".\") do\n                if digit == \"7\"\
    \ then\n                    count = count + 1\n                end\n         \
    \   end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3up6wbw.lua:29:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpt3up6wbw.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 0, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n \
    \           for _, digit in utf8.codes(tostring(i)) do\n                if digit\
    \ == string.byte('7') then\n                    count = count + 1\n          \
    \      end\n            end\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.040 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local res =\
    \ 0\n    for i = 0, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and string.find(i,\
    \ '7') then\n            res = res + 1\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4b7sk0r.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpn4b7sk0r.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n - 1 do\n    if i % 11 == 0 then\n      if i % 13 == 0 then\n\
    \        count = count + 2\n      else\n        count = count + 1\n      end\n\
    \    elseif i % 13 == 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4d_ibkx.lua:27:\
    \ expected: 0, actual: 7\nstack traceback:\n\t/tmp/tmpk4d_ibkx.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal counter\
    \ = 0\n\tfor i = 0, n do\n\t\tif (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n\t\t\tcounter = counter + 1\n\t\tend\n\tend\n\treturn counter\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpecbs1ddh.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpecbs1ddh.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = n, n - 49, -1 do\n        if i % 11 == 0 or i % 13 == 0 then\n\
    \            for digit in i:gmatch('.') do\n                if digit == '7' then\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpetkedkz9.lua:12:\
    \ attempt to index a number value (local 'i')\nstack traceback:\n\t/tmp/tmpetkedkz9.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpetkedkz9.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n      local s\
    \ = tostring(i)\n      for j = 1, #s do\n        if s:sub(j, j) == '7' then\n\
    \          count = count + 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqd_05tq5.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpqd_05tq5.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  return 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu78xpngu.lua:16:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpu78xpngu.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  if n < 11 then\
    \ return 0 end\n  local count = 0\n  local fizz = 11\n  local buzz = 13\n  while\
    \ fizz < n do\n    local p = fizz\n    while p > 0 do\n      if p % 10 == 7 then\
    \ count = count + 1 end\n      p = math.floor(p / 10)\n    end\n    p = buzz\n\
    \    while p > 0 do\n      if p % 10 == 7 then count = count + 1 end\n      p\
    \ = math.floor(p / 10)\n    end\n    fizz = fizz + 11\n    buzz = buzz + 13\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7v894gm.lua:34:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpr7v894gm.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 0, n do\n    if (i % 11 == 0 or i % 13 == 0) and math.floor(i/10)\
    \ % 10 == 7 then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps2yvrvp0.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmps2yvrvp0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    if n == 0 then\n\
    \        return 0\n    end\n    local num = 0\n    local a = n % 10\n    local\
    \ b = n % 100\n    local c = n % 1000\n    if b > 6 and b < 14 then\n        num\
    \ = num + 1\n    end\n    if c > 60 and c < 70 then\n        num = num + 1\n \
    \   end\n    if a == 7 then\n        num = num + 1\n    end\n    if (n % 11 ==\
    \ 0) or (n % 13 == 0) then\n        num = num + fizz_buzz(n - 1)\n    end\n  \
    \  return num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplt_x4_wh.lua:35:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmplt_x4_wh.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    return reduce(function(v,\
    \ acc) return v:match(\"%d\") == \"7\" and acc + 1 or acc end, 0, filter(function(v)\
    \ return (tonumber(v) < n) and ((tonumber(v) % 11 == 0) or (tonumber(v) % 13 ==\
    \ 0)) end, map(function(v) return v:match(\"%d+\") end, generate(\"fizzbuzz\"\
    ))))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp448ctn07.lua:9:\
    \ attempt to call a nil value (global 'generate')\nstack traceback:\n\t/tmp/tmp448ctn07.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp448ctn07.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 0, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and i\
    \ % 7 == 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cv82c_i.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp1cv82c_i.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local res =\
    \ 0\n    local i, j = 0, 1\n    while i + j < n do\n        if i % 11 == 0 or\
    \ j % 13 == 0 then\n            local sum = i + j\n            while sum > 0 do\n\
    \                if sum % 10 == 7 then\n                    res = res + 1\n  \
    \              end\n                sum = sum // 10\n            end\n       \
    \ end\n        i, j = j, i + j\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55bfdju4.lua:30:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp55bfdju4.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n - 1 do\n    if (i % 11 == 0 or i % 13 == 0) and tostring(i):find('7')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq59_cl6t.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpq59_cl6t.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  return 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfl41un6u.lua:16:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpfl41un6u.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    -- Your code\
    \ here\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ms5pdr0.lua:17:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp2ms5pdr0.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local cnt = 0\n\
    \  for i = 1, n do\n    if (i % 11 == 0 or i % 13 == 0) and contains_7(i) then\n\
    \      cnt = cnt + 1\n    end\n  end\n  return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo0m5d1cl.lua:11:\
    \ attempt to call a nil value (global 'contains_7')\nstack traceback:\n\t/tmp/tmpo0m5d1cl.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpo0m5d1cl.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 0, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      if string.find(i,\
    \ \"7\") then\n        count = count + 1\n      end\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5e6srzd.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg5e6srzd.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local r=0\n \
    \ for i=1,n do\n    local s=tostring(i)\n    if s:find\"7\" and (i%11==0 or i%13==0)\
    \ then\n      r=r+1\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppsss0q0i.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmppsss0q0i.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    n = n - 1\n\
    \    local count = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 ==\
    \ 0 then\n            count = count + count_7(i)\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd34bxsi2.lua:13:\
    \ attempt to call a nil value (global 'count_7')\nstack traceback:\n\t/tmp/tmpd34bxsi2.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpd34bxsi2.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    -- write your\
    \ code here\n    local cnt = 0\n    for i = 1, n - 1 do\n        if i % 11 ==\
    \ 0 or i % 13 == 0 then\n            local s = tostring(i)\n            for j\
    \ = 1, #s do\n                if s:sub(j, j) == '7' then\n                   \
    \ cnt = cnt + 1\n                end\n            end\n        end\n    end\n\
    \    return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local function\
    \ fizz(m)\n        if m % 11 == 0 or m % 13 == 0 then\n            return count_digits(m,\
    \ 7)\n        else\n            return 0\n        end\n    end\n    local function\
    \ fizz_buzz_helper(m, sum)\n        if m == 0 then\n            return sum\n \
    \       else\n            return fizz_buzz_helper(m - 1, sum + fizz(m))\n    \
    \    end\n    end\n    return fizz_buzz_helper(n - 1, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7v7c1pdn.lua:11:\
    \ attempt to call a nil value (global 'count_digits')\nstack traceback:\n\t/tmp/tmp7v7c1pdn.lua:11:\
    \ in upvalue 'fizz'\n\t/tmp/tmp7v7c1pdn.lua:20: in function </tmp/tmp7v7c1pdn.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmp7v7c1pdn.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 0, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       count = count + count_sevens(i)\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9w1ysvaf.lua:12:\
    \ attempt to call a nil value (global 'count_sevens')\nstack traceback:\n\t/tmp/tmp9w1ysvaf.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp9w1ysvaf.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if (i % 11 == 0 or i % 13 == 0) and i % 7\
    \ == 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_pc203q.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpv_pc203q.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local c=0\n \
    \ for i=1,n-1 do\n    local a = i%11==0\n    local b = i%13==0\n    if a or b\
    \ then\n      local s = tostring(i)\n      for j=1,#s do\n        if s:sub(j,j)=='7'\
    \ then\n          c=c+1\n        end\n      end\n    end\n  end\n  return c\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    assert(type(n)\
    \ == \"number\", \"fizz_buzz expects a number\")\n    assert(n > 0, \"fizz_buzz\
    \ expects positive integer\")\n    local num, d = n, 0\n    while n > 0 do\n \
    \       n, d = n // 10, n % 10\n        if d == 7 then num = num - 1 end\n   \
    \ end\n    local result = num // 78\n    local fb = num % 78\n    if fb < 13 then\
    \ result = result + 1 end\n    if fb < 11 then result = result + 1 end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8bdgc3q.lua:27:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpx8bdgc3q.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local i = 0\n\
    \    local count = 0\n    while i < n do\n        if i % 11 == 0 or i % 13 ==\
    \ 0 then\n            local str = tostring(i)\n            for index = 1, #str\
    \ do\n                if str:sub(index, index) == \"7\" then\n               \
    \     count = count + 1\n                end\n            end\n        end\n \
    \       i = i + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal fizz_buzz\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvwjpgrvu.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local function\
    \ fizz_buzz_helper(n, n_mod_11, n_mod_13, counter)\n    if n < 0 then\n      return\
    \ counter\n    elseif n_mod_11 == 0 or n_mod_13 == 0 then\n      local digit_7_count\
    \ = 0\n      if n_mod_11 == 0 then\n        digit_7_count = digit_7_count + occurrences_of_7(n,\
    \ 11)\n      end\n      if n_mod_13 == 0 then\n        digit_7_count = digit_7_count\
    \ + occurrences_of_7(n, 13)\n      end\n      return fizz_buzz_helper(n - 1, (n_mod_11\
    \ + 10) % 11, (n_mod_13 + 12) % 13, counter + digit_7_count)\n    else\n     \
    \ return fizz_buzz_helper(n - 1, (n_mod_11 + 10) % 11, (n_mod_13 + 12) % 13, counter)\n\
    \    end\n  end\n  return fizz_buzz_helper(n - 1, 10, 12, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq9ra_wsc.lua:15:\
    \ attempt to call a nil value (global 'occurrences_of_7')\nstack traceback:\n\t\
    /tmp/tmpq9ra_wsc.lua:15: in function </tmp/tmpq9ra_wsc.lua:9>\n\t(...tail calls...)\n\
    \t/tmp/tmpq9ra_wsc.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if math.fmod(i, 11) == 0 or math.fmod(i, 13)\
    \ == 0 then\n            while i > 0 do\n                if math.fmod(i, 10) ==\
    \ 7 then\n                    count = count + 1\n                end\n       \
    \         i = math.floor(i / 10)\n            end\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5djcni5x.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp5djcni5x.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local c = 0\n\
    \    for i = 1, n-1 do\n        if math.fmod(i, 11) == 0 or math.fmod(i, 13) ==\
    \ 0 then\n            local d = i\n            while d > 0 do\n              \
    \  local d2 = math.fmod(d, 10)\n                if d2 == 7 then\n            \
    \        c = c + 1\n                end\n                d = math.floor(d / 10)\n\
    \            end\n        end\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.030 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 0, n - 1 do\n    if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6amb57wt.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6amb57wt.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local function\
    \ g(i)\n        if i < n then\n            if i % 11 == 0 or i % 13 == 0 then\n\
    \                return 1 + g(i + 1)\n            else\n                return\
    \ g(i + 1)\n            end\n        else\n            return 0\n        end\n\
    \    end\n    return g(0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9kmg_vn5.lua:26:\
    \ expected: 0, actual: 8\nstack traceback:\n\t/tmp/tmp9kmg_vn5.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    local i = 7\n    while i < n do\n        if i % 11 == 0 or i % 13 ==\
    \ 0 then\n            if i == 77 then\n                count = count + 2\n   \
    \         else\n                local s = tostring(i)\n                for j =\
    \ 1, #s do\n                    if s:sub(j, j) == '7' then\n                 \
    \       count = count + 1\n                    end\n                end\n    \
    \        end\n        end\n        i = i + 1\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  -- TODO(pierre-thirouin):\
    \ fill this in\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5skz8jg.lua:16:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpv5skz8jg.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  if n < 11 then\
    \ return 0 end\n  local sum = 0\n  if n % 11 == 0 then\n    sum = sum + floor(n/11)\n\
    \  else\n    sum = sum + floor(n/11) + 1\n  end\n  if n % 13 == 0 then\n    sum\
    \ = sum + floor(n/13)\n  else\n    sum = sum + floor(n/13) + 1\n  end\n  return\
    \ sum - (floor(n/143) + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzas0swzr.lua:14:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmpzas0swzr.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpzas0swzr.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  -- TODO\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjfmwhdh.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpzjfmwhdh.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local function\
    \ gcd(a, b)\n        while b ~= 0 do\n            a, b = b, a % b\n        end\n\
    \        return a\n    end\n    local function count(a, b)\n        return string.len(tostring(a\
    \ * (n - 1) + b)):gsub(\"7\", \"\")\n    end\n    local p = gcd(11, 13)\n    return\
    \ count(11, 13) - count(11 * 13 / p, p)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9k6sk0o.lua:16:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmpt9k6sk0o.lua:16:\
    \ in local 'count'\n\t/tmp/tmpt9k6sk0o.lua:19: in local 'candidate'\n\t/tmp/tmpt9k6sk0o.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    n = n - n %\
    \ 11\n    local function _fizz_buzz(n, last_n, m, sum)\n        if n >= m then\n\
    \            if n >= last_n + 13 then\n                return _fizz_buzz(n, n,\
    \ m + 13, sum)\n            else\n                return _fizz_buzz(n, last_n,\
    \ m + 11, sum + 1)\n            end\n        else\n            return sum\n  \
    \      end\n    end\n    return _fizz_buzz(n, n, 11, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzha97lwi.lua:27:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmpzha97lwi.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      local\
    \ str = tostring(i)\n      for j = 1, string.len(str) do\n        if string.sub(str,\
    \ j, j) == \"7\" then\n          count = count + 1\n        end\n      end\n \
    \   end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.030 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local res = 0\n\
    \  local nums = {11, 13}\n  local last = {1, 1}\n  local digits = {}\n  while\
    \ n > 0 do\n    n = n - 1\n    if n % 11 == 0 or n % 13 == 0 then\n      digits\
    \ = {}\n      for i = 1, #nums do\n        last[i] = (last[i] * 10) % nums[i]\n\
    \      end\n      local x = n\n      repeat\n        local d = x % 10\n      \
    \  if d == 7 then\n          res = res + 1\n        end\n        digits[d] = 1\n\
    \        x = (x - d) / 10\n      until x == 0\n      for i = 1, #nums do\n   \
    \     if not digits[last[i]] then\n          break\n        end\n        if i\
    \ == #nums then\n          res = res + 1\n        end\n      end\n    end\n  end\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8jsc9bp.lua:45:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpx8jsc9bp.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzeyi51xz.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpzeyi51xz.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 0, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86gdoh8i.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp86gdoh8i.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal count =\
    \ 0\n\tlocal fizz, buzz = false, false\n\tfor i = 1, n do\n\t\tfizz = i % 11 ==\
    \ 0\n\t\tbuzz = i % 13 == 0\n\t\tif fizz or buzz then\n\t\t\tfor j = 1, math.floor(math.log10(i))\
    \ do\n\t\t\t\tif math.floor(i / math.pow(10, j)) % 10 == 7 then\n\t\t\t\t\tcount\
    \ = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4jcnbui.lua:30:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpi4jcnbui.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and string.find(tostring(i),\
    \ \"7\") then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkr6vcqbf.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpkr6vcqbf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local cnt = 0\n\
    \  for i = 0, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      cnt = cnt\
    \ + table.count_char(tostring(i), '7')\n    end\n  end\n  return cnt\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplkw1tq2u.lua:12:\
    \ attempt to call a nil value (field 'count_char')\nstack traceback:\n\t/tmp/tmplkw1tq2u.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmplkw1tq2u.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local s = 0\n\
    \  local t = 0\n  for i = 1, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n\
    \      t = 0\n      while i > 0 do\n        t = t + 1\n        if i % 10 == 7\
    \ then\n          s = s + 1\n        end\n        i = math.floor(i / 10)\n   \
    \   end\n    end\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  local n_str = tostring(n)\n  for i = 1, #n_str do\n    local char = n_str:sub(i,\
    \ i)\n    if char == '7' then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0luhp74v.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0luhp74v.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local r = 0\n\
    \    for i = 11, n - 1 do\n        local j = i\n        while j ~= 0 do\n    \
    \        if j % 10 == 7 then\n                r = r + 1\n            end\n   \
    \         j = math.floor(j / 10)\n        end\n    end\n    return r\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssugafu9.lua:25:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmpssugafu9.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n   local cnt =\
    \ 0\n   for i = n - 1, 1, -1 do\n      if i % 11 == 0 or i % 13 == 0 then\n  \
    \       for c in tostring(i):gmatch('7') do\n            cnt = cnt + 1\n     \
    \    end\n      end\n   end\n   return cnt\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local nfizz =\
    \ n//13\n  local nbuzz = n//11\n  local nfizzbuzz = n//(13*11)\n  local ndig7\
    \ = 0\n  local i = 0\n  while i < nfizz do\n    ndig7 = ndig7 + count_7(13*i)\n\
    \    i = i + 1\n  end\n  i = 0\n  while i < nbuzz do\n    ndig7 = ndig7 + count_7(11*i)\n\
    \    i = i + 1\n  end\n  i = 0\n  while i < nfizzbuzz do\n    ndig7 = ndig7 +\
    \ count_7(13*11*i)\n    i = i + 1\n  end\n  return ndig7\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz2w5r_ht.lua:15:\
    \ attempt to call a nil value (global 'count_7')\nstack traceback:\n\t/tmp/tmpz2w5r_ht.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpz2w5r_ht.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  \n  if n < 0\
    \ then return nil end\n  if n == 0 then return 0 end\n  \n  local count = 0\n\
    \  local i = 1\n  while i < n do\n    \n    if i % 11 == 0 or i % 13 == 0 then\n\
    \      local j = i\n      while j > 0 do\n        \n        if j % 10 == 7 then\n\
    \          count = count + 1\n        end\n        \n        j = math.floor(j\
    \ / 10)\n      end\n    end\n    \n    i = i + 1\n  end\n  \n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local res =\
    \ 0\n    for i = 1, n-1 do\n        if (i % 11 == 0 or i % 13 == 0) and i % 10\
    \ == 7 then\n            res = res + 1\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5h2dikg.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg5h2dikg.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal count =\
    \ 0\n\tfor i = 1, n-1 do\n\t\tif (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp78ly71rr.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp78ly71rr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  assert(n > 0)\n\
    \  local count = 0\n  local i = 0\n  while i < n do\n    i = i + 1\n    if (i\
    \ % 11 == 0 or i % 13 == 0) and\n       string.find(tostring(i), '7') then\n \
    \     count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9vucdcy.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpu9vucdcy.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local num =\
    \ 0\n    for i = 1, n do\n        local mod_11 = (i % 11 == 0)\n        local\
    \ mod_13 = (i % 13 == 0)\n        if (mod_11 or mod_13) and i < n then\n     \
    \       local str = tostring(i)\n            for j = 1, #str do\n            \
    \    local c = string.sub(str, j, j)\n                if c == \"7\" then\n   \
    \                 num = num + 1\n                end\n            end\n      \
    \  end\n    end\n    return num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.040 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    -- YOUR CODE\
    \ HERE\n    local count = 0\n    for i = 1, n-1 do\n        if i % 11 == 0 or\
    \ i % 13 == 0 then\n            local k = i\n            while k > 0 do\n    \
    \            if k % 10 == 7 then\n                    count = count + 1\n    \
    \            end\n                k = math.floor(k / 10)\n            end\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal counter\
    \ = 0\n\tfor i = 1, n-1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tlocal\
    \ string = tostring(i)\n\t\t\tfor j = 1, string.len(string) do\n\t\t\t\tif string.sub(string,\
    \ j, j) == \"7\" then\n\t\t\t\t\tcounter = counter + 1\n\t\t\t\tend\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n      count =\
    \ count + count_7(i)\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzco6vzrd.lua:12:\
    \ attempt to call a nil value (global 'count_7')\nstack traceback:\n\t/tmp/tmpzco6vzrd.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpzco6vzrd.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  if n < 0 then\
    \ return 0 end\n  local c = 0\n  if n >= 11 then\n    c = c + 1\n    local p =\
    \ 11\n    while p + 11 <= n do\n      p = p + 11\n      c = c + 1\n    end\n \
    \ end\n  if n >= 13 then\n    c = c + 1\n    local p = 13\n    while p + 13 <=\
    \ n do\n      p = p + 13\n      c = c + 1\n    end\n  end\n  return c\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvv8yi6yq.lua:33:\
    \ expected: 0, actual: 7\nstack traceback:\n\t/tmp/tmpvv8yi6yq.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n - 1 do\n    if (i % 11 == 0 or i % 13 == 0) and tostring(i):find('7')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppumnm0xb.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmppumnm0xb.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\t-- SOLUTION:\n\
    \tlocal count = 0\n\tfor i = 1, n do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\
    \t\t\tfor _, d in pairs(tostring(i)) do\n\t\t\t\tif d == '7' then\n\t\t\t\t\t\
    count = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfiej693d.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpfiej693d.lua:13: in local 'candidate'\n\t/tmp/tmpfiej693d.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local ct = 0\n\
    \  for i = 1, n do\n    if math.fmod(i, 11) == 0 or math.fmod(i, 13) == 0 then\n\
    \      local str = tostring(i)\n      for c in str:gmatch(\".\") do\n        if\
    \ c == \"7\" then\n          ct = ct + 1\n        end\n      end\n    end\n  end\n\
    \  return ct\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp61eglnn6.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp61eglnn6.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local seven\
    \ = 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 then\n            seven\
    \ = seven + string.gsub(tostring(i), \"7\", \"\")\n        elseif i % 13 == 0\
    \ then\n            seven = seven + string.gsub(tostring(i), \"7\", \"\")\n  \
    \      end\n    end\n    return seven\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvx9pqfh5.lua:23:\
    \ expected: 0, actual: 188\nstack traceback:\n\t/tmp/tmpvx9pqfh5.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n   local count\
    \ = 0\n   for i = 0, n-1 do\n      if (i % 11 == 0 or i % 13 == 0) and contains_digit(i,\
    \ 7) then\n         count = count + 1\n      end\n   end\n   return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphc888oe9.lua:11:\
    \ attempt to call a nil value (global 'contains_digit')\nstack traceback:\n\t\
    /tmp/tmphc888oe9.lua:11: in local 'candidate'\n\t/tmp/tmphc888oe9.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local result\
    \ = 0\n    local i = 1\n    while i < n do\n        if i % 11 == 0 or i % 13 ==\
    \ 0 then\n            result = result + count_seven(i)\n        end\n        i\
    \ = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2k4pfylw.lua:13:\
    \ attempt to call a nil value (global 'count_seven')\nstack traceback:\n\t/tmp/tmp2k4pfylw.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp2k4pfylw.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local total =\
    \ 0\n  for i = 11, n-1 do\n    if (i % 11 == 0 or i % 13 == 0) and string.find(tostring(i),\
    \ \"7\") then\n      total = total + 1\n    end\n  end\n  return total\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyf0gegck.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpyf0gegck.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal count =\
    \ 0\n\tlocal digit = 1\n\tfor x = 1, n do\n\t\tif x % 11 == 0 or x % 13 == 0 then\n\
    \t\t\twhile digit <= x do\n\t\t\t\tif digit % 10 == 7 then\n\t\t\t\t\tcount =\
    \ count + 1\n\t\t\t\tend\n\t\t\t\tdigit = digit * 10\n\t\t\tend\n\t\t\tdigit =\
    \ 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnzn9wtq.lua:29:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmptnzn9wtq.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqisexnu0.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpqisexnu0.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    -- TODO\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2_s1iwm.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpo2_s1iwm.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local n7, n11,\
    \ n13 = 0, 0, 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 or i % 13 ==\
    \ 0 then\n            n7 = n7 + get_count(i, 7)\n        end\n    end\n    return\
    \ n7\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyvrbufle.lua:12:\
    \ attempt to call a nil value (global 'get_count')\nstack traceback:\n\t/tmp/tmpyvrbufle.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpyvrbufle.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local z = n\
    \ - n % 11\n    local count = 0\n    while z >= 11 do\n        if z % 13 == 0\
    \ then\n            count = count + 1\n        end\n        z = z - 11\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0erd25z9.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp0erd25z9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 0, n do\n        if i % 13 == 0 or i % 11 == 0 then\n     \
    \       local str = tostring(i)\n            for j = 1, string.len(str) do\n \
    \               if string.sub(str, j, j) == \"7\" then\n                    count\
    \ = count + 1\n                end\n            end\n        end\n    end\n  \
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjstp8ch1.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpjstp8ch1.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       local str = tostring(i)\n            for char in str:gmatch\".\" do\n\
    \                if char == '7' then\n                    count = count + 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnd1jgrm.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmphnd1jgrm.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local t = {}\n\
    \    for i = 1, math.floor(n/11) do\n        local j = i * 11\n        while j\
    \ < n do\n            local s = tostring(j)\n            if s:find('7') then\n\
    \                table.insert(t, j)\n            end\n            j = j + 11\n\
    \        end\n    end\n    for i = 1, math.floor(n/13) do\n        local j = i\
    \ * 13\n        while j < n do\n            local s = tostring(j)\n          \
    \  if s:find('7') then\n                table.insert(t, j)\n            end\n\
    \            j = j + 13\n        end\n    end\n    return #t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2bnkvz2k.lua:37:\
    \ expected: 2, actual: 7\nstack traceback:\n\t/tmp/tmp2bnkvz2k.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local total\
    \ = 0\n    local times = 11\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0frp1rrc.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local sevens\
    \ = 0\n  for i = 1, n - 1 do\n    if (i % 11 == 0 or i % 13 == 0) and i % 10 ==\
    \ 7 then\n      sevens = sevens + 1\n    end\n  end\n  return sevens\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lec_u3q.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1lec_u3q.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local sum =\
    \ 0\n    for i = 7, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and tostring(i):find('7')\
    \ then\n            sum = sum + 1\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u0t4phr.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0u0t4phr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n \
    \           local curr = i\n            while curr > 0 do\n                local\
    \ digit = curr % 10\n                if digit == 7 then\n                    count\
    \ = count + 1\n                end\n                curr = math.floor(curr / 10)\n\
    \            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local num_sevens\
    \ = 0\n    local quotient, remainder\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp4v9l5uo.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph46iubbd.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmph46iubbd.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local result\
    \ = 0\n  local mod11, mod13 = math.floor(n / 11), math.floor(n / 13)\n  local\
    \ num1, num2 = mod11, mod13\n  while true do\n    num1, num2 = num1 - 1, num2\
    \ - 1\n    if num1 < 0 and num2 < 0 then\n      break\n    end\n    if num1 %\
    \ 11 == 0 and num1 % 13 == 0 then\n      result = result + fizz_buzz_get_count(num1)\n\
    \    elseif num1 % 11 == 0 then\n      result = result + fizz_buzz_get_count(num1)\n\
    \    elseif num1 % 13 == 0 then\n      result = result + fizz_buzz_get_count(num1)\n\
    \    end\n    if num2 % 11 == 0 and num2 % 13 == 0 then\n      result = result\
    \ + fizz_buzz_get_count(num2)\n    elseif num2 % 11 == 0 then\n      result =\
    \ result + fizz_buzz_get_count(num2)\n    elseif num2 % 13 == 0 then\n      result\
    \ = result + fizz_buzz_get_count(num2)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptv93wkkg.lua:25:\
    \ attempt to call a nil value (global 'fizz_buzz_get_count')\nstack traceback:\n\
    \t/tmp/tmptv93wkkg.lua:25: in local 'candidate'\n\t/tmp/tmptv93wkkg.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 0, n-1 do\n        if i % 11 == 0 or i % 13 == 0 then\n   \
    \         count = count + count_digit(i, 7)\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz8jc3uwr.lua:12:\
    \ attempt to call a nil value (global 'count_digit')\nstack traceback:\n\t/tmp/tmpz8jc3uwr.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpz8jc3uwr.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local function\
    \ check_digit(n)\n        local d = n % 10\n        return d == 7\n    end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1ze4qhek.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       for _, d in ipairs(tostring(i)) do\n                if d == '7' then\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4tyazy_g.lua:26:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp4tyazy_g.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n - 1 do\n    if (i % 11 == 0 or i % 13 == 0) and get_digit(i,\
    \ 1) == 7 then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpud0v1fk0.lua:11:\
    \ attempt to call a nil value (global 'get_digit')\nstack traceback:\n\t/tmp/tmpud0v1fk0.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpud0v1fk0.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  -- Insert your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppjn38q86.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmppjn38q86.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n do\n    if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7fv5aexz.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp7fv5aexz.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n do\n    if i % 11 == 0 then\n      if string.find(i, \"7\"\
    ) then\n        count = count + 1\n      end\n    elseif i % 13 == 0 then\n  \
    \    if string.find(i, \"7\") then\n        count = count + 1\n      end\n   \
    \ end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nz8kb2d.lua:29:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp3nz8kb2d.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local i = 0\n\
    \  local c = 0\n  while i < n do\n    if (i % 11 == 0 or i % 13 == 0) and i %\
    \ 10 == 7 then\n      c = c + 1\n    end\n    i = i + 1\n  end\n  return c\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q569p2o.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp2q569p2o.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and string.find(tostring(i),\
    \ \"7\") then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppfjpslmr.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmppfjpslmr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for x = 1, n - 1 do\n    if (x % 11 == 0 or x % 13 == 0) and string.find(x,\
    \ \"7\") then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2bdpc7og.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp2bdpc7og.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n do\n    if (i % 11 == 0 or i % 13 == 0) and i % 10 == 7 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtymxoi9.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprtymxoi9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local string_num\
    \ = \"\"\n  local result = 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13\
    \ == 0 then\n      string_num = tostring(i)\n      for j = 1, #string_num do\n\
    \        if string_num:sub(j, j) == \"7\" then\n          result = result + 1\n\
    \        end\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhqtp5sp.lua:28:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpbhqtp5sp.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 0, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       count = count + string.gsub(tostring(i), '7', '')\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja2wv7dx.lua:21:\
    \ expected: 0, actual: 188\nstack traceback:\n\t/tmp/tmpja2wv7dx.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    if n < 0 then\n\
    \        return -1\n    end\n    local count = 0\n    for i = 1, n do\n      \
    \  if i % 11 == 0 or i % 13 == 0 then\n            for j = 1, #(tostring(i)) do\n\
    \                if string.sub(tostring(i), j, j) == \"7\" then\n            \
    \        count = count + 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_7av9bd.lua:29:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpj_7av9bd.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       count = count + count_7s(i)\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5386v39.lua:12:\
    \ attempt to call a nil value (global 'count_7s')\nstack traceback:\n\t/tmp/tmpd5386v39.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpd5386v39.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  -- your code\
    \ here\n  local count = 0\n  for i = 1, n - 1 do\n    if (i % 11 == 0 or i % 13\
    \ == 0) and i % 10 == 7 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_xck_la.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpw_xck_la.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    return string.len(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.format(\"\
    %w\", n), \"7\", \"7 \"), \"11\", \"\"), \"13\", \"\"), \" \", \"\"), \" \", \"\
    \"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv5p2t6jk.lua:9:\
    \ invalid option '%w' to 'format'\nstack traceback:\n\t/tmp/tmpv5p2t6jk.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpv5p2t6jk.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local x = 0\n\
    \    local y = 0\n    local z = 0\n    local w = 0\n    local count = 0\n    local\
    \ add = 1\n    local ans = ''\n    local i = 1\n    while i <= n do\n        if\
    \ i % 3 == 0 then\n            ans = ans .. 'fizz'\n        end\n        if i\
    \ % 5 == 0 then\n            ans = ans .. 'buzz'\n        end\n        if i %\
    \ 11 == 0 then\n            count = count + 1\n        end\n        if i % 13\
    \ == 0 then\n            count = count + 1\n        end\n        if i % 11 ==\
    \ 0 and i % 13 == 0 then\n            count = count - 1\n        end\n       \
    \ if i % 3 == 0 or i % 5 == 0 then\n            io.write(ans .. '\\n')\n     \
    \       ans = ''\n        else\n            io.write(i .. '\\n')\n        end\n\
    \        i = i + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "1\n2\nfizz\n4\nbuzz\nfizz\n7\n8\nfizz\nbuzz\n11\nfizz\n13\n14\nfizzbuzz\n\
    16\n17\nfizz\n19\nbuzz\nfizz\n22\n23\nfizz\nbuzz\n26\nfizz\n28\n29\nfizzbuzz\n\
    31\n32\nfizz\n34\nbuzz\nfizz\n37\n38\nfizz\nbuzz\n41\nfizz\n43\n44\nfizzbuzz\n\
    46\n47\nfizz\n49\nbuzz\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9tcwdm84.lua:47:\
    \ expected: 0, actual: 7\nstack traceback:\n\t/tmp/tmp9tcwdm84.lua:47: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    if n <= 0 then\n\
    \        return 0\n    end\n    return fizz_buzz(n - 1) + fizz_buzz(n - 2) + 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local counter\
    \ = 0\n    for i = 7, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and i\
    \ % 10 == 7 then\n            counter = counter + 1\n        end\n    end\n  \
    \  return counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxm46gm3s.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpxm46gm3s.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n   local function\
    \ fb(i, c)\n      if i < n then\n         if i % 11 == 0 or i % 13 == 0 then\n\
    \            return fb(i + 1, c + count_7(i))\n         else\n            return\
    \ fb(i + 1, c)\n         end\n      else\n         return c\n      end\n   end\n\
    \   return fb(0, 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwj8sh_g4.lua:12:\
    \ attempt to call a nil value (global 'count_7')\nstack traceback:\n\t/tmp/tmpwj8sh_g4.lua:12:\
    \ in function </tmp/tmpwj8sh_g4.lua:9>\n\t(...tail calls...)\n\t/tmp/tmpwj8sh_g4.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  return 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8a9ib23.lua:16:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpr8a9ib23.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n \
    \           local str = tostring(i)\n            local j = 1\n            while\
    \ j <= #str do\n                if str:sub(j, j) == '7' then\n               \
    \     count = count + 1\n                end\n                j = j + 1\n    \
    \        end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal count =\
    \ 0\n\tfor i = 1, n-1 do\n\t\tif(i % 11 == 0 or i % 13 == 0) then\n\t\t\tif string.find(i,\
    \ '7') then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3k2gm4pj.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3k2gm4pj.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  -- TODO\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprf7vpw8.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpprf7vpw8.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local counter\
    \ = 0\n    local number_string\n    for i = 1, n-1 do\n        number_string =\
    \ tostring(i)\n        if i % 11 == 0 or i % 13 == 0 then\n            for j =\
    \ 1, string.len(number_string) do\n                if number_string:sub(j, j)\
    \ == \"7\" then\n                    counter = counter + 1\n                end\n\
    \            end\n        end\n    end\n    return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.060 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local divisibleBy_7\
    \ = 0\n  for i = 0, n do\n    if i % 7 == 0 then\n      divisibleBy_7 = divisibleBy_7\
    \ + 1\n    end\n  end\n  return divisibleBy_7\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpla_mic93.lua:21:\
    \ expected: 0, actual: 8\nstack traceback:\n\t/tmp/tmpla_mic93.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8l1rq1o.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpw8l1rq1o.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if divisible_by(i, 11) or divisible_by(i,\
    \ 13) then\n            local i_str = tostring(i)\n            for _,c in ipairs(i_str)\
    \ do\n                if c == '7' then\n                    count = count + 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp196780v3.lua:11:\
    \ attempt to call a nil value (global 'divisible_by')\nstack traceback:\n\t/tmp/tmp196780v3.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp196780v3.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local num =\
    \ 0\n    local count = 0\n    while num < n do\n        if num % 11 == 0 or num\
    \ % 13 == 0 then\n            if tostring(num):find(\"7\") then\n            \
    \    count = count + 1\n            end\n        end\n        num = num + 1\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph7oobj_y.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmph7oobj_y.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local v = 0\n\
    \  local f, b = 0, 0\n  for i = 1, n do\n    if (i % 11 == 0) or (i % 13 == 0)\
    \ then\n      f, b = 0, 0\n      for c in tostring(i):gmatch('.') do\n       \
    \ if c == '7' then\n          v = v + 1\n        end\n        if c == '3' then\n\
    \          f = f + 1\n        end\n        if c == '5' then\n          b = b +\
    \ 1\n        end\n      end\n      if f > b then\n        v = v + f\n      else\n\
    \        v = v + b\n      end\n    end\n  end\n  return v\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfohcnuza.lua:38:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmpfohcnuza.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal nb7 = 0\n\
    \tfor i = 1, n-1 do\n\t\tif (i % 11 == 0 or i % 13 == 0) and i % 7 == 0 then\n\
    \t\t\tnb7 = nb7 + 1\n\t\tend\n\tend\n\treturn nb7\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4btf46u.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpl4btf46u.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal t = {}\n\
    \tfor i = 1, n do\n\t\tt[i] = i\n\tend\n\tlocal c = 0\n\tfor i = 1, n do\n\t\t\
    if t[i] % 11 == 0 or t[i] % 13 == 0 then\n\t\t\tlocal s = tostring(t[i])\n\t\t\
    \tfor j = 1, #s do\n\t\t\t\tif s:sub(j, j) == '7' then\n\t\t\t\t\tc = c + 1\n\t\
    \t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm46l6s5j.lua:31:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpm46l6s5j.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local sum =\
    \ 0\n    for i = 1, n do\n        if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n            sum = sum + 1\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs0h8di8.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpqs0h8di8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal n = n\n\
    \tlocal count = 0\n\twhile n >= 1 do\n\t\tif n % 11 == 0 or n % 13 == 0 then\n\
    \t\t\tlocal str = tostring(n)\n\t\t\tlocal i = 1\n\t\t\twhile str:sub(i, i) do\n\
    \t\t\t\tif str:sub(i, i) == \"7\" then\n\t\t\t\t\tcount = count + 1\n\t\t\t\t\
    end\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\tend\n\t\tn = n - 1\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n   return 1 + fizz_buzz(n\
    \ - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxqse06cc.lua:9:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpxqse06cc.lua:9: in upvalue 'fizz_buzz'\n\
    \t/tmp/tmpxqse06cc.lua:9: in upvalue 'fizz_buzz'\n\t/tmp/tmpxqse06cc.lua:9: in\
    \ upvalue 'fizz_buzz'\n\t/tmp/tmpxqse06cc.lua:9: in upvalue 'fizz_buzz'\n\t/tmp/tmpxqse06cc.lua:9:\
    \ in upvalue 'fizz_buzz'\n\t/tmp/tmpxqse06cc.lua:9: in upvalue 'fizz_buzz'\n\t\
    /tmp/tmpxqse06cc.lua:9: in upvalue 'fizz_buzz'\n\t/tmp/tmpxqse06cc.lua:9: in upvalue\
    \ 'fizz_buzz'\n\t/tmp/tmpxqse06cc.lua:9: in upvalue 'fizz_buzz'\n\t...\n\t/tmp/tmpxqse06cc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxqse06cc.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.220 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n   local count\
    \ = 0\n   for i = 1, n-1 do\n      if i % 11 == 0 or i % 13 == 0 then\n      \
    \   while i > 0 do\n            if i % 10 == 7 then\n               count = count\
    \ + 1\n            end\n            i = math.floor(i / 10)\n         end\n   \
    \   end\n   end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\t-- TODO: Your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxqmhbg9.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpcxqmhbg9.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal m, d =\
    \ n - 1, 7\n\tlocal a, b = m // 11, m // 13\n\treturn b - a + (a // d) - (b //\
    \ d)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqq_p4scl.lua:17:\
    \ expected: 0, actual: -1\nstack traceback:\n\t/tmp/tmpqq_p4scl.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n   local count\
    \ = 0\n   for i = 1, n-1 do\n      if i % 11 == 0 or i % 13 == 0 then\n      \
    \   -- Convert integer to string, then get counts\n         count = count + string.gsub(i,\
    \ '7', '')\n      end\n   end\n   return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8_6ja16.lua:22:\
    \ expected: 0, actual: 188\nstack traceback:\n\t/tmp/tmpe8_6ja16.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    local first = 0\n    local second = 0\n    while n > 0 do\n       \
    \ local d = n % 10\n        if d == 7 then\n            count = count + 1\n  \
    \      end\n        n = math.floor(n / 10)\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobmx60up.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpobmx60up.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local i = 0\n\
    \    local s = 0\n    for a = 0, 99 do\n        for b = 0, 99 do\n           \
    \ for c = 0, 99 do\n                for d = 0, 99 do\n                    local\
    \ x = 1111 * a + 1110 * b + 1100 * c + 1000 * d\n                    if x < n\
    \ then\n                        local xx = x\n                        while xx\
    \ > 0 do\n                            if xx % 10 == 7 then\n                 \
    \               i = i + 1\n                            end\n                 \
    \           xx = math.floor(xx / 10)\n                        end\n          \
    \              s = s + 1\n                    end\n                end\n     \
    \       end\n        end\n    end\n    return i / s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    local function helper(i)\n        local string = tostring(i)\n    \
    \    local num = tonumber(string)\n        if num == i then\n            if string:find(\"\
    7\") ~= nil then\n                count = count + 1\n            end\n       \
    \ end\n    end\n    for i = 1, n-1 do\n        if i % 11 == 0 or i % 13 == 0 then\n\
    \            helper(i)\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvt_xr1om.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvt_xr1om.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal count =\
    \ 0\n\tfor i = 1, n do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tfor d in\
    \ tostring(i):gmatch('%d') do\n\t\t\t\tif d == '7' then\n\t\t\t\t\tcount = count\
    \ + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbwudrj_x.lua:26:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpbwudrj_x.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n   local total\
    \ = 0\n   for i = 0, n do\n      if (i % 11 == 0 or i % 13 == 0) and i % 7 ==\
    \ 0 then\n         total = total + 1\n      end\n   end\n   return total\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdswwtana.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdswwtana.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local ret =\
    \ 0\n    if n < 7 then\n        return ret\n    end\n    local mid = math.floor(n\
    \ / 10)\n    local begin = math.floor(mid / 10) * 10\n    if mid % 11 == 0 or\
    \ mid % 13 == 0 then\n        ret = 1\n    end\n    return ret + fizz_buzz(mid)\
    \ + fizz_buzz(begin)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpulh2wn73.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpulh2wn73.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local function\
    \ f(m)\n    if m > n then\n      return 0\n    elseif m % 11 == 0 or m % 13 ==\
    \ 0 then\n      return count_digit(m, 7) + f(m + 1)\n    else\n      return f(m\
    \ + 1)\n    end\n  end\n  return f(1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprly7oztx.lua:13:\
    \ attempt to call a nil value (global 'count_digit')\nstack traceback:\n\t/tmp/tmprly7oztx.lua:13:\
    \ in function </tmp/tmprly7oztx.lua:9>\n\t(...tail calls...)\n\t/tmp/tmprly7oztx.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  if n <= 0 then\n\
    \    return 0\n  end\n  local divisor = 11 * 13\n  local min = n\n  if n % divisor\
    \ == 0 then\n    min = min - divisor\n  elseif n % 11 == 0 then\n    min = min\
    \ - 11\n  elseif n % 13 == 0 then\n    min = min - 13\n  end\n  local n_elevens\
    \ = math.floor(min / 11)\n  local n_thirteens = math.floor(min / 13)\n  local\
    \ n_divisors = math.floor(min / divisor)\n  local new_ones = 0\n  local new_sevens\
    \ = 0\n  if min % divisor < 11 then\n    new_ones = 1\n  elseif min % divisor\
    \ < 12 then\n    new_sevens = 1\n  elseif min % divisor < 13 then\n    new_ones\
    \ = 2\n  elseif min % divisor < 22 then\n    new_sevens = 1\n  elseif min % divisor\
    \ < 23 then\n    new_ones = 3\n  elseif min % divisor < 33 then\n    new_sevens\
    \ = 2\n  elseif min % divisor < 34 then\n    new_ones = 4\n  elseif min % divisor\
    \ < 44 then\n    new_sevens = 3\n  elseif min % divisor < 45 then\n    new_ones\
    \ = 5\n  elseif min % divisor < 55 then\n    new_sevens = 4\n  elseif min % divisor\
    \ < 56 then\n    new_ones = 6\n  elseif min % divisor < 66 then\n    new_sevens\
    \ = 5\n  elseif min % divisor < 67 then\n    new_ones = 7\n  elseif min % divisor\
    \ < 77 then\n    new_sevens = 6\n  elseif min % divisor < 78 then\n    new_ones\
    \ = 8\n  elseif min % divisor < 88 then\n    new_sevens = 7\n  elseif min % divisor\
    \ < 89 then\n    new_ones = 9\n  elseif min % divisor < 99 then\n    new_sevens\
    \ = 8\n  elseif\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpknul3omf.lua:63: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n \
    \           count = count + count_digit(i, 7)\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzbi4sajf.lua:12:\
    \ attempt to call a nil value (global 'count_digit')\nstack traceback:\n\t/tmp/tmpzbi4sajf.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpzbi4sajf.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    if n <= 0 then\n\
    \        return 0\n    end\n    return fizz_buzz(n-1) + ((((n % 11) == 0) or ((n\
    \ % 13) == 0)) and CountDigit7(n))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7rlapz2s.lua:12:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmp7rlapz2s.lua:12:\
    \ in upvalue 'fizz_buzz'\n\t/tmp/tmp7rlapz2s.lua:12: in upvalue 'fizz_buzz'\n\t\
    /tmp/tmp7rlapz2s.lua:12: in upvalue 'fizz_buzz'\n\t/tmp/tmp7rlapz2s.lua:12: in\
    \ upvalue 'fizz_buzz'\n\t/tmp/tmp7rlapz2s.lua:12: in upvalue 'fizz_buzz'\n\t/tmp/tmp7rlapz2s.lua:12:\
    \ in upvalue 'fizz_buzz'\n\t/tmp/tmp7rlapz2s.lua:12: in upvalue 'fizz_buzz'\n\t\
    /tmp/tmp7rlapz2s.lua:12: in upvalue 'fizz_buzz'\n\t/tmp/tmp7rlapz2s.lua:12: in\
    \ upvalue 'fizz_buzz'\n\t...\n\t/tmp/tmp7rlapz2s.lua:12: in local 'candidate'\n\
    \t/tmp/tmp7rlapz2s.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    -- Put your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7h9x_ax3.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp7h9x_ax3.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local c = 0\n\
    \  for i = 1, n - 1 do\n    if math.fmod(i, 11) == 0 or math.fmod(i, 13) == 0\
    \ then\n      local s = tostring(i)\n      for j = 1, string.len(s) do\n     \
    \   if string.sub(s, j, j) == \"7\" then\n          c = c + 1\n        end\n \
    \     end\n    end\n  end\n  return c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.030 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local sum =\
    \ 0\n    for i = 1, n - 1 do\n        if ((i % 11 == 0) or (i % 13 == 0)) and\
    \ (i % 10 == 7) then\n            sum = sum + 1\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1k7fe9on.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1k7fe9on.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tif type(n) ~=\
    \ \"number\" then return nil end\n\tlocal c = 0\n\tfor i = 1, n - 1 do\n\t\tif\
    \ ((i % 11 == 0) or (i % 13 == 0)) and (i % 10 == 7) then\n\t\t\tc = c + 1\n\t\
    \t\ti = i - 1\n\t\tend\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsuvbyj49.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpsuvbyj49.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal total =\
    \ 0\n\tfor i = 1, n do\n\t\tlocal fizz = (i % 11 == 0) or (i % 13 == 0)\n\t\t\
    if fizz then\n\t\t\tfor c in tostring(i):gmatch(\".\") do\n\t\t\t\tif c == \"\
    7\" then\n\t\t\t\t\ttotal = total + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnm66n6yz.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpnm66n6yz.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       count = count + string.len(string.gsub(tostring(i), \"7\", \"\"))\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47nx6h5m.lua:21:\
    \ expected: 0, actual: 14\nstack traceback:\n\t/tmp/tmp47nx6h5m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  if n < 0 then\n\
    \    return fizz_buzz(-n)\n  end\n  if n < 7 then\n    return 0\n  end\n  local\
    \ nstr = tostring(n)\n  local res = 0\n  for i = 1, #nstr do\n    if nstr:sub(i,\
    \ i) == '7' then\n      res = res + 1\n    end\n  end\n  return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7vnl0lq.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmps7vnl0lq.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  return 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxkzg_ti.lua:16:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpwxkzg_ti.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n      local i_str\
    \ = tostring(i)\n      for c in i_str:gmatch('.') do\n        if c == '7' then\n\
    \          count = count + 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchw1hga1.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpchw1hga1.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy14s4rs5.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy14s4rs5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local sum = 0\n\
    \  for i = 7, n-1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      sum = sum\
    \ + num_of_digit(i, 7)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuj67lfv3.lua:12:\
    \ attempt to call a nil value (global 'num_of_digit')\nstack traceback:\n\t/tmp/tmpuj67lfv3.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpuj67lfv3.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  -- guard clause\n\
    \  if n <= 0 then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8nzn86ej.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal cnt = 0\n\
    \tfor i = 1, n do\n\t\tif (i % 11 == 0 or i % 13 == 0) and string.find(tostring(i),\
    \ \"7\") then\n\t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\treturn cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpld9uz1ty.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpld9uz1ty.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    -- Implement\
    \ me!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6tvhi9m.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpm6tvhi9m.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  local next_fizz = 12\n  local next_buzz = 14\n  local next_fizz_buzz =\
    \ 78\n  for i = 1, n - 1 do\n    if i == next_fizz then\n      next_fizz = next_fizz\
    \ + 11\n    elseif i == next_buzz then\n      next_buzz = next_buzz + 13\n   \
    \ elseif i == next_fizz_buzz then\n      next_fizz_buzz = next_fizz_buzz + 11\
    \ * 13\n    else\n      local num = i\n      while num > 0 do\n        if num\
    \ % 10 == 7 then\n          count = count + 1\n        end\n        num = num\
    \ // 10\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gd2ixki.lua:36:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmp8gd2ixki.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and has_digit(i,\
    \ 7) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2z49n4fm.lua:11:\
    \ attempt to call a nil value (global 'has_digit')\nstack traceback:\n\t/tmp/tmp2z49n4fm.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp2z49n4fm.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local total =\
    \ 0\n  for i = 1, n - 1 do\n    if (i % 11 == 0 or i % 13 == 0) and string.find(tostring(i),\
    \ \"7\") then\n      total = total + 1\n    end\n  end\n  return total\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20yrqiox.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp20yrqiox.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local cnt =\
    \ 0\n    for i = 1, n do\n        if (i % 11 == 0 or i % 13 == 0) and i % 7 ==\
    \ 0 then\n            cnt = cnt + 1\n        end\n    end\n    return cnt\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2va1hv4.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpj2va1hv4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    return 3\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0u3hoda.lua:15:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmpq0u3hoda.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    local x = 0\n    while x < n do\n        if x % 11 == 0 or x % 13 ==\
    \ 0 then\n            local num = x\n            while num > 0 do\n          \
    \      local digit = num % 10\n                if digit == 7 then\n          \
    \          count = count + 1\n                end\n                num = math.floor(num\
    \ / 10)\n            end\n        end\n        x = x + 1\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local cnt =\
    \ 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and num.get_digit(i,\
    \ 10, 7) then\n            cnt = cnt + 1\n        end\n    end\n    return cnt\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwz51kffm.lua:11:\
    \ attempt to index a nil value (global 'num')\nstack traceback:\n\t/tmp/tmpwz51kffm.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpwz51kffm.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  return 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9tblq81x.lua:16:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp9tblq81x.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local result\
    \ = 0\n  local factor = 1\n  while factor * 10 <= n do\n    result = result +\
    \ (factor == 13 and 1 or 0)\n    factor = factor * 10\n  end\n  local factor =\
    \ 1\n  while factor * 11 <= n do\n    local part = factor * 11\n    while part\
    \ <= n do\n      local digit = math.floor(part % 10)\n      if digit == 7 then\n\
    \        result = result + 1\n      end\n      part = part + factor\n    end\n\
    \    factor = factor * 10\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bc2itw9.lua:33:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmp9bc2itw9.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal m, c =\
    \ 0, 0\n\tfor i = 1, n - 1 do\n\t\tm = i % 11 * i % 13\n\t\tif m == 0 then\n\t\
    \t\tc = c + 1\n\t\tend\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgcnjt23.lua:22:\
    \ expected: 0, actual: 7\nstack traceback:\n\t/tmp/tmpmgcnjt23.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local function\
    \ fizz_buzz_rec(n, sevens)\n        if n < 11 then\n            return sevens\n\
    \        elseif n % 11 == 0 or n % 13 == 0 then\n            return fizz_buzz_rec(n\
    \ // 10, sevens + (n % 10 == 7 and 1 or 0))\n        else\n            return\
    \ fizz_buzz_rec(n // 10, sevens)\n        end\n    end\n    return fizz_buzz_rec(n,\
    \ 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplru5ccch.lua:25:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmplru5ccch.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  assert(n > 0)\n\
    \  local count = 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n\
    \      local str = tostring(i)\n      for j = 1, #str do\n        if str:sub(j,\
    \ j) == '7' then\n          count = count + 1\n        end\n      end\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyri7jiqy.lua:28:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpyri7jiqy.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    return -1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_88xnd8.lua:15:\
    \ expected: 0, actual: -1\nstack traceback:\n\t/tmp/tmp1_88xnd8.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local sum = 0\n\
    \  for x = 1, n-1 do\n    if x % 11 == 0 or x % 13 == 0 then\n      sum = sum\
    \ + count_7(x)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbed3n9vj.lua:12:\
    \ attempt to call a nil value (global 'count_7')\nstack traceback:\n\t/tmp/tmpbed3n9vj.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpbed3n9vj.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n   local c = 0\n\
    \   for i = 0, n do\n      if (i % 11 == 0 or i % 13 == 0) and i % 7 == 0 then\n\
    \         c = c + 1\n      end\n   end\n   return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz7tzhxyw.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpz7tzhxyw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal count =\
    \ 0\n\tfor i = 1, n-1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tlocal\
    \ num = i\n\t\t\twhile num > 0 do\n\t\t\t\tif num % 10 == 7 then\n\t\t\t\t\tcount\
    \ = count + 1\n\t\t\t\tend\n\t\t\t\tnum = math.floor(num / 10)\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  if n < 1 then\n\
    \    return 0\n  end\n  if n % 11 == 0 or n % 13 == 0 then\n    return (n % 10\
    \ == 7 and 1 or 0) + fizz_buzz(n - 1)\n  end\n  return fizz_buzz(n - 1)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnl3v47ey.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpnl3v47ey.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local i, p1,\
    \ p2, count = 1, true, true, 0\n    while i < n do\n        if p1 and p2 then\n\
    \            local t = tostring(i)\n            for j = 1, #t do\n           \
    \     if t:sub(j, j) == '7' then\n                    count = count + 1\n    \
    \            end\n            end\n        end\n        p1 = not p1\n        p2\
    \ = not p2\n        i = i + 11\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckn663h4.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpckn663h4.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local count =\
    \ 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n      count =\
    \ count + string.len(string.gsub(tostring(i), \"%7\", \"\"))\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1fohoew5.lua:12:\
    \ invalid capture index %7\nstack traceback:\n\t/tmp/tmp1fohoew5.lua:12: in local\
    \ 'candidate'\n\t/tmp/tmp1fohoew5.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    -- BEGIN SOLUTION\
    \ --\n    local nb_7 = 0\n    -- END SOLUTION --\n    return nb_7\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3_dpe4d.lua:19:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpa3_dpe4d.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\tlocal function\
    \ count(x)\n\t\tlocal c = 0\n\t\twhile (x > 0) do\n\t\t\tif (x % 10 == 7) then\n\
    \t\t\t\tc = c + 1\n\t\t\tend\n\t\t\tx = math.floor(x / 10)\n\t\tend\n\t\treturn\
    \ c\n\tend\n\tlocal c = 0\n\tfor i = 1, n - 1 do\n\t\tif (i % 11 == 0 or i % 13\
    \ == 0) then\n\t\t\tc = c + count(i)\n\t\tend\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n\t-- TODO: Implement\
    \ Me\n    local c = 0\n    local d = 0\n    for i = 1, n - 1 do\n        if i\
    \ % 11 == 0 or i % 13 == 0 then\n            if i / 100 < 1 then\n           \
    \     d = i\n            else\n                d = i / 10\n            end\n \
    \           for j = 1, d / 10 do\n                if d % 10 == 7 then\n      \
    \              c = c + 1\n                end\n                d = d / 10\n  \
    \          end\n        end\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpev15ydke.lua:34:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpev15ydke.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  if n == 0 then\
    \ return 0 end\n  local r = 0\n  if n % 11 == 0 or n % 13 == 0 then\n    r = fizz_buzz(n\
    \ - 1)\n    if n % 10 == 7 then\n      r = r + 1\n    end\n  else\n    r = fizz_buzz(n\
    \ - 1)\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0f8kyotu.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0f8kyotu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  return 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmvhrq9x.lua:16:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmplmvhrq9x.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n  local m = 0\n\
    \  for i = 1, n - 1 do\n    if (i % 11 == 0 or i % 13 == 0) and string.find(tostring(i),\
    \ \"7\") then\n      m = m + 1\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0i2o5pr3.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0i2o5pr3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
    -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and string.find(tostring(i),\
    \ \"7\") then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2z93hope.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp2z93hope.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
