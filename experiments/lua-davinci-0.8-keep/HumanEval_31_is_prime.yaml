name: HumanEval_31_is_prime
language: lua
prompt: "-- Return true if a given number is prime, and false otherwise.\n-- >>> is_prime(6)\n\
  -- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n-- True\n-- >>> is_prime(13441)\n\
  -- True\n-- >>> is_prime(61)\n-- True\n-- >>> is_prime(4)\n-- False\n-- >>> is_prime(1)\n\
  -- False\nlocal function is_prime(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
  \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101), true)\n\
  \    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
  \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
  \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
  \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
  \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
  \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if n <= 1 then\n        return false\n    end\n    local count\
    \ = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count\
    \ + 1\n        end\n    end\n    if count == 2 then\n        return true\n   \
    \ else\n        return false\n    end\nend", "    -- corner case\n    if n ==\
    \ 2 then\n        return true\n    end", "    if n == 1 then\n        return false\n\
    \    end\n    for i = 2, n - 1 do\n        if n % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "\tif n == 1 then\n\t\t\
    return false\n\tend\n\t\n\tlocal half = math.floor(n / 2)\n\tfor i = 2, half do\n\
    \t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\treturn true\n\
    end", "    local is_prime = true\n    for i = 2, math.floor(math.sqrt(n)) do\n\
    \        if n % i == 0 then\n            is_prime = false\n            break\n\
    \        end\n    end\n    return is_prime\nend", "  if n <= 1 then\n    return\
    \ false\n  end\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "\tif n == 1 then\n\t\treturn false\n\t\
    end\n\tfor i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend", "  if n <= 1 then\n    return false\n  end\n  for\
    \ i = 2, n - 1 do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "    -- YOUR CODE HERE\n    if n == 2 then return true end\n\
    \    if n % 2 == 0 then return false end\n    for i = 3, math.floor(math.sqrt(n))\
    \ + 1, 2 do\n        if n % i == 0 then return false end\n    end\n    return\
    \ true\nend", "    -- check if n is a natural number (positive integer)\n    if\
    \ n ~= math.floor(n) or n < 1 then\n        error(\"not a natural number\")\n\
    \    end", "  return n >= 2 and\n    not any(function(x) return n % x == 0 end,\n\
    \      take_while(function(x) return x*x <= n end,\n        iterate(function(x)\
    \ return x + 1 end, 2)))\nend", "  if n == 1 then\n    return false\n  end\n \
    \ for i = 2,n-1 do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "    if n == 1 then\n        return false\n    end\n   \
    \ for i = 2, n-1 do\n        if n % i == 0 then\n            return false\n  \
    \      end\n    end\n    return true\nend", "    local function is_prime_helper(n,\
    \ i)\n        if i == 1 then\n            return true\n        elseif n % i ==\
    \ 0 then\n            return false\n        else\n            return is_prime_helper(n,\
    \ i - 1)\n        end\n    end\n    return is_prime_helper(n, math.floor(math.sqrt(n)))\n\
    end", "    if n == 2 then\n        return true\n    elseif n % 2 == 0 then\n \
    \       return false\n    end", "    -- 0 and 1 are not prime\n    if n <= 1 then\n\
    \        return false\n    end", "  local function check(d)\n    return d * d\
    \ > n or (n % d ~= 0 and check(d + 1))\n  end\n  return n >= 2 and check(2)\n\
    end", "  if n < 2 then\n    return false\n  end\n  for i = 2, n - 1 do\n    if\
    \ n % i == 0 then\n      return false\n    end\n  end\n  return true\nend", " \
    \ if n == 1 then\n    return false\n  end\n  for i = 2, math.sqrt(n) do\n    if\
    \ n % i == 0 then\n      return false\n    end\n  end\n  return true\nend", " \
    \   -- Ensure that n is a positive integer.\n    if (n <= 0) or (n ~= math.floor(n))\
    \ then\n        return false\n    end", "  -- Return false if n is 1 or 0\n  if\
    \ n <= 1 then\n    return false\n  end", "    if n < 2 then\n        return false\n\
    \    end\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "\tif\
    \ n < 2 then\n\t\treturn false\n\tend\n\t\n\tlocal lim = math.sqrt(n)\n\tfor i\
    \ = 2, lim do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\
    \treturn true\nend", '    local n = math.abs(math.floor(n))', "    for i = 2,\
    \ math.sqrt(n) do\n        if n % i == 0 then\n            return false\n    \
    \    end\n    end\n    return true\nend", "  if n <= 1 then\n    return false\n\
    \  end\n  for i = 2, math.floor(math.sqrt(n)) do\n    if n % i == 0 then\n   \
    \   return false\n    end\n  end\n  return true\nend", "  return n >= 2 and not\
    \ (n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0)\nend", "    if n < 1\
    \ then\n        return false\n    end\n    if n == 1 then\n        return false\n\
    \    end\n    if n == 2 then\n        return true\n    end\n    if n%2 == 0 then\n\
    \        return false\n    end\n    for i=3,math.sqrt(n),2 do\n        if n%i\
    \ == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    if n == 1 then\n        return false\n    end\n    for i = 2, n - 1\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    if n < 2 then\n        return false\n    end\n  \
    \  if n == 2 then\n        return true\n    end\n    if n % 2 == 0 then\n    \
    \    return false\n    end\n    for i = 3, math.sqrt(n), 2 do\n        if n %\
    \ i == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    if n < 2 then\n        return false\n    end\n    for k = 2, n^(1/2)\
    \ do\n        if n % k == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    if n <= 1 then\n        return false\n    end\n \
    \   local i = 2\n    while i <= math.sqrt(n) do\n        if n % i == 0 then\n\
    \            return false\n        end\n        i = i + 1\n    end\n    return\
    \ true\nend", "    if n < 2 then\n        return false\n    end\n    if n == 2\
    \ then\n        return true\n    end\n    if n % 2 == 0 then\n        return false\n\
    \    end\n    local max = math.sqrt(n)\n    for i = 3, max, 2 do\n        if n\
    \ % i == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "\tif n == 2 then\n\t\treturn true\n\telseif n == 1 or n % 2 == 0 then\n\
    \t\treturn false\n\tend\n\tlocal to = math.floor(math.sqrt(n))\n\tfor i = 3, to,\
    \ 2 do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return\
    \ true\n  end\n  for i = 2, math.sqrt(n) do\n    if math.fmod(n, i) == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "    local i, divisor\n\
    \    for i = 2, math.floor(math.sqrt(n)) do\n        divisor = n % i\n       \
    \ if divisor == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    if n == 1 then\n        return false\n    end\n    for i =\
    \ 2, n - 1 do\n        if n % i == 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "    -- Check every possible divisor up to n-1.\
    \ If it divides evenly,\n    -- then n is not prime.\n    for i = 2, n-1 do\n\
    \        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    if n == 1 then\n        return false\n    end\n \
    \   local divisor = 2\n    while divisor < n / 2 do\n        if n % divisor ==\
    \ 0 then\n            return false\n        end\n        divisor = divisor + 1\n\
    \    end\n    return true\nend", "    -- only 1 is not a prime\n    if n == 1\
    \ then\n        return false\n    end", "\t--\n\t-- Check the arguments are valid\
    \ first.\n\t--\n\tassert(n >= 1, \"number must be positive\")\n\tassert(n == math.floor(n),\
    \ \"number must be an integer\")", "  -- if x is even, then it's not prime, so\
    \ return false\n  if (n % 2 == 0) then\n    return false\n  end", "  if n == 1\
    \ then\n    return false\n  end\n  local m = floor(sqrt(n))\n  local i = 2\n \
    \ while i <= m do\n    if n % i == 0 then\n      return false\n    end\n    i\
    \ = i + 1\n  end\n  return true\nend", "    if n < 2 then\n        return false\n\
    \    end\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n       \
    \     return false\n        end\n    end\n    return true\nend", "    for i =\
    \ 2, n - 1 do\n        if n % i == 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "    for i = 2, math.sqrt(n) do\n        if n\
    \ % i == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    if n <= 1 then\n        return false\n    end\n    if n == 2 then\n\
    \        return true\n    end\n    if n == 3 then\n        return true\n    end\n\
    \    if n % 2 == 0 then\n        return false\n    end\n    if n % 3 == 0 then\n\
    \        return false\n    end\n    local i = 5\n    local w = 2\n    while i\
    \ * i <= n do\n        if n % i == 0 then\n            return false\n        end\n\
    \        i = i + w\n        w = 6 - w\n    end\n    return true\nend", "    if\
    \ n < 2 then\n        return false\n    end\n    local i = 2\n    while i * i\
    \ <= n do\n        if n % i == 0 then\n            return false\n        end\n\
    \        i = i + 1\n    end\n    return true\nend", "    if n == 1 then\n    \
    \    return false\n    end\n    for i = 2,math.floor(math.sqrt(n)) do\n      \
    \  if n % i == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  if n < 2 then\n    return false\n  end\n  local d = 2\n  while\
    \ d * d <= n do\n    if n % d == 0 then\n      return false\n    end\n    d =\
    \ d + 1\n  end\n  return true\nend", "  if n < 2 then\n    return false\n  end\n\
    \  for i = 2, n - 1 do\n    if n % i == 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "  if n < 2 then\n    return false\n  end\n  local\
    \ i = 2\n  while i <= n/2 do\n    if n % i == 0 then\n      return false\n   \
    \ end\n    i = i + 1\n  end\n  return true\nend", "    if n == 1 then\n      \
    \  return false\n    end\n    for i = 2, math.sqrt(n) do\n        if n % i ==\
    \ 0 then\n            return false\n        end\n    end\n    return true\nend",
  "    if n < 2 then\n        return false\n    end\n    for k=2,n-1 do\n        if\
    \ n % k == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  for i = 2, (n - 1) do\n    if (n % i) == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  if n <= 0 then\n    return false\n\
    \  end\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return false\n  \
    \  end\n  end\n  return true\nend", "\t-- lua supports arbitrary precision numbers,\
    \ so 10^9 is no problem\n\tif n < 2 then\n\t\treturn false\n\tend\n\tlocal limit\
    \ = math.sqrt(n)\n\tfor i = 2, limit do\n\t\tif n % i == 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "\tif n < 1 then return false end\n\
    \t-- TODO: Implement me!\n\t-- NOTE: There is no need to check for numbers above\
    \ sqrt(n),\n\t--       since those can never divide evenly into n.\n\tfor i =\
    \ 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\t\
    end\n\treturn true\nend", "    if n == 1 then\n        return false\n    end\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return false\n        end\n        i = i + 1\n    end\n    return true\nend",
  "  -- Check if n is prime.\n  if n == 2 then\n    return true\n  elseif n % 2 ==\
    \ 0 then\n    return false\n  end\n  for i = 3, math.sqrt(n), 2 do\n    if n %\
    \ i == 0 then\n      return false\n    end\n  end\n  return true\nend", "\tif\
    \ n == 1 then\n\t\treturn false\n\tend\n\tfor i = 2, n-1 do\n\t\tif n % i == 0\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  if n < 2 then\n\
    \    return false\n  end\n  local divisor = 2\n  while divisor <= math.sqrt(n)\
    \ do\n    if n % divisor == 0 then\n      return false\n    end\n    divisor =\
    \ divisor + 1\n  end\n  return true\nend", "  if n == 1 then\n    return false\n\
    \  end\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return false\n  \
    \  end\n  end\n  return true\nend", "  if n == 2 then\n    return true\n  elseif\
    \ n < 2 or n % 2 == 0 then\n    return false\n  end\n  local limit = math.floor(math.sqrt(n))\n\
    \  for i = 3, limit, 2 do\n    if n % i == 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "    local is_prime = false\n    if n >= 2 then\n\
    \        is_prime = true\n        for i = 2, n - 1 do\n            if n % i ==\
    \ 0 then\n                is_prime = false\n                break\n          \
    \  end\n        end\n    end\n    return is_prime\nend", "\tif n < 2 then\n\t\t\
    return false\n\tend\n\tfor i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "  if n <= 1 then\n    return false\n\
    \  end\n  for i = 2, math.sqrt(n) do\n    if n % i == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "  -- if n is less than or equal to 1, then\
    \ it is not prime.\n  if n <= 1 then\n    return false\n  end", "  if n < 2 then\n\
    \    return false\n  end\n  for i = 2, math.floor(math.sqrt(n)) do\n    if n %\
    \ i == 0 then\n      return false\n    end\n  end\n  return true\nend", "    if\
    \ n == 2 then\n        return true\n    elseif n % 2 == 0 then\n        return\
    \ false\n    end", "    -- If a number is less than or equal to one, then it is\
    \ not prime.\n    if n <= 1 then\n        return false\n    -- Otherwise, we will\
    \ begin by testing if a number is divisible by two.\n    elseif n % 2 == 0 then\n\
    \        return false\n    -- Next, we will test if a number is divisible by numbers\
    \ greater than\n    -- two, but less than the square root of that number.\n  \
    \  else\n        -- Define the upper bound of the range.\n        local up_bound\
    \ = math.sqrt(n)\n        -- Define the lower bound of the range.\n        local\
    \ lo_bound = 3\n        -- Loop through all the numbers between the bounds (inclusive)\
    \ and\n        -- return false if any one of them is a factor of n.\n        for\
    \ factor = lo_bound, up_bound, 2 do\n            if n % factor == 0 then\n   \
    \             return false\n            end\n        end\n        -- Return true\
    \ if none of the numbers between the bounds (inclusive)\n        -- are factors\
    \ of n.\n        return true\n    end\nend", "    if n == 1 then\n        return\
    \ false\n    end\n    for i = 2, n-1 do\n        if (n % i) == 0 then\n      \
    \      return false\n        end\n    end\n    return true\nend", "  if n < 2\
    \ then\n    return false\n  end\n  for d = 2, n-1 do\n    if n % d == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "    if n < 2 then\n\
    \        return false\n    end\n    if n == 2 then\n        return true\n    end\n\
    \    for i = 2, n - 1 do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  if n == 1 then\n    return false\n\
    \  end\n  for i = 2, math.sqrt(n) do\n    if n % i == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "    if n <= 1 then\n        return false\n\
    \    end\n    if n <= 3 then\n        return true\n    end\n    if n % 2 == 0\
    \ or n % 3 == 0 then\n        return false\n    end\n    for i = 5, math.sqrt(n),\
    \ 6 do\n        if n % i == 0 or n % (i + 2) == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    if n == 1 then\n        return\
    \ false\n    end\n    for i = 2, n-1 do\n        if n % i == 0 then\n        \
    \    return false\n        end\n    end\n    return true\nend", "\tassert(type(n)\
    \ == \"number\")\n\t-- if n <= 1\n\tif (n <= 1) then\n\t\treturn false\n\tend\n\
    \t-- if n <= 3\n\tif (n <= 3) then\n\t\treturn true\n\tend\n\t-- if n is odd\n\
    \tif (n % 2 == 0 or n % 3 == 0) then\n\t\treturn false\n\tend\n\ti = 5\n\twhile\
    \ (i * i <= n) do\n\t\tif (n % i == 0 or n % (i + 2) == 0) then\n\t\t\treturn\
    \ false\n\t\tend\n\t\ti = i + 6\n\tend\n\treturn true\nend", "\tif n == 1 then\n\
    \t\treturn false\n\tend\n\tif n < 4 then\n\t\treturn true\n\tend\n\tif n % 2 ==\
    \ 0 then\n\t\treturn false\n\tend\n\tif n < 9 then\n\t\treturn true\n\tend\n\t\
    if n % 3 == 0 then\n\t\treturn false\n\tend\n\tlocal r = math.floor(math.sqrt(n))\n\
    \tlocal f = 5\n\twhile f <= r do\n\t\tif n % f == 0 then\n\t\t\treturn false\n\
    \t\tend\n\t\tif n % (f + 2) == 0 then\n\t\t\treturn false\n\t\tend\n\t\tf = f\
    \ + 6\n\tend\n\treturn true\nend", "    if n <= 1 then\n        return false\n\
    \    end\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n       \
    \     return false\n        end\n    end\n    return true\nend", "  if n <= 1\
    \ then\n    return false\n  end\n  local x = math.sqrt(n)\n  for i = 2, x do\n\
    \    if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend",
  "\tif n <= 1 then\n\t\treturn false\n\tend\n\tfor divisor = 2, math.sqrt(n) do\n\
    \t\tif n % divisor == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "  local c = 1\n  for i = 2, n do\n    if n % i == 0 then\n      c = c +\
    \ 1\n    end\n  end\n  if c > 2 then\n    return false\n  else\n    return true\n\
    \  end\nend", "  if n <= 1 then\n    return false\n  end\n  for i = 2, n - 1 do\n\
    \    if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend",
  "\tif n == 1 then\n\t\treturn false\n\tend\n\tfor i = 2,math.sqrt(n) do\n\t\tif\
    \ n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", " \
    \   if n < 2 then\n        return false\n    end\n    local sqrt = math.sqrt(n)\n\
    \    for i = 2, sqrt do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  if n < 2 then\n    return false\n\
    \  end\n  for d = 2,n^(1/2) do\n    if n % d == 0 then\n      return false\n \
    \   end\n  end\n  return true\nend", "    if n < 1 then\n        return false\n\
    \    end\n    local factor = 1\n    while n % factor ~= 0 do\n        factor =\
    \ factor + 1\n    end\n    return factor == n\nend", "\tif n == 2 then\n\t\treturn\
    \ true\n\telseif n % 2 == 0 then\n\t\treturn false\n\tend\n\tfor i = 3, math.sqrt(n),\
    \ 2 do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "    if n < 2 then\n        return false\n    end\n    local sqrt = math.sqrt(n)\n\
    \    for i = 2, sqrt do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    if (n <= 1) then\n        return\
    \ false\n    end\n    for i = 2, (n - 1) do\n        if (n % i == 0) then\n  \
    \          return false\n        end\n    end\n    return true\nend", "    if\
    \ n == 1 then\n        return false\n    end\n    if n == 2 then\n        return\
    \ true\n    end\n    if n % 2 == 0 then\n        return false\n    end\n    if\
    \ n % 3 == 0 then\n        return false\n    end\n    if n % 5 == 0 then\n   \
    \     return false\n    end\n    if n % 7 == 0 then\n        return false\n  \
    \  end\n    if n % 11 == 0 then\n        return false\n    end\n    if n % 13\
    \ == 0 then\n        return false\n    end\n    if n % 17 == 0 then\n        return\
    \ false\n    end\n    if n % 19 == 0 then\n        return false\n    end\n   \
    \ if n % 23 == 0 then\n        return false\n    end\n    if n % 29 == 0 then\n\
    \        return false\n    end\n    if n % 31 == 0 then\n        return false\n\
    \    end\n    if n % 37 == 0 then\n        return false\n    end\n    if n % 41\
    \ == 0 then\n        return false\n    end\n    if n % 43 == 0 then\n        return\
    \ false\n    end\n    if n % 47 == 0 then\n        return false\n    end\n   \
    \ if n % 53 == 0 then\n        return false\n    end\n    if n % 59 == 0 then\n\
    \        return false\n    end\n    if n % 61 == 0 then\n        return false\n\
    \    end\n    if n % 67 == 0 then\n        return false\n    end\n    if n % 71\
    \ == 0 then\n        return false\n    end\n    if n % 73 == 0 then\n        return\
    \ false\n    end\n    if n % 79 == 0 then\n        return false\n    end\n   \
    \ if n % 83 == 0 then\n        return false\n    end\n    if n % 89 == 0 then\n\
    \        return false\n    end\n    if n % 97 == 0 then\n        return false\n\
    \    end\n    if n % 101 == 0 then\n        return false\n    end\n    if n %\
    \ 103 == 0 then\n        return false\n    end\n    if n % 107 == 0 then\n   \
    \     return false\n    end\n    if n % 109 == 0 then\n        return false\n\
    \    end\n    if n % 113 == 0 then\n        return false\n    end\n    if n",
  "    if n == 1 then\n        return false\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    if n == 1 then\n        return false\n    end\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    -- Your code here:\n    if\
    \ n < 2 then return false end\n    for i = 2, math.sqrt(n) do\n        if n %\
    \ i == 0 then return false end\n    end\n    return true\nend", "    if n <= 1\
    \ then\n        return false\n    end\n    for i = 2, math.sqrt(n) do\n      \
    \  if n % i == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  if n == 1 then\n    return false\n  end\n  local result = true\n\
    \  for i = 2, n - 1 do\n    if n % i == 0 then\n      result = false\n      break\n\
    \    end\n  end\n  return result\nend", "    -- your code here\n    if n==1 then\
    \ return false end\n    local mid=math.floor(math.sqrt(n))\n    for i=2,mid do\n\
    \        if n%i==0 then return false end\n    end\n    return true\nend", "\t\
    if (n < 2) then\n\t\treturn false\n\tend\n\tfor i = 2, (n-1) do\n\t\tif (n % i\
    \ == 0) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  if n\
    \ <= 1 then\n    return false\n  end\n  for i = 2, math.floor(math.sqrt(n)) do\n\
    \    if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend",
  "    if n < 2 then\n        return false\n    end\n    local i = 2\n    while i\
    \ * i <= n do\n        if n % i == 0 then\n            return false\n        end\n\
    \        i = i + 1\n    end\n    return true\nend", "    if n == 1 then\n    \
    \    return false\n    end\n    local limit = math.floor(math.sqrt(n))\n    for\
    \ i = 2, limit do\n        if n % i == 0 then\n            return false\n    \
    \    end\n    end\n    return true\nend", "\tif n > 1 then\n\t\tfor i = 2, math.sqrt(n)\
    \ do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\t\
    return true\n\telse\n\t\treturn false\n\tend\nend", "  if n == 1 then\n    return\
    \ false\n  end\n  local m = math.floor(math.sqrt(n))\n  for i = 2, m do\n    if\
    \ math.fmod(n, i) == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "    local i = 2\n    while (i <= math.sqrt(n)) do\n        if n % i ==\
    \ 0 then\n            return false\n        end\n        i = i + 1\n    end\n\
    \    return true\nend", "    for i = 2, n - 1 do\n        if n % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    --\
    \ Make sure n is a non-negative integer.\n    if not (type(n) == \"number\" and\
    \ n % 1 == 0 and n >= 0) then\n        error(\"n must be a non-negative integer\"\
    )\n    end", "  if n == 1 then\n    return false\n  end\n  if n == 2 then\n  \
    \  return true\n  end\n  if n % 2 == 0 then\n    return false\n  end\n  local\
    \ div = 3\n  while n % div ~= 0 and div * div <= n do\n    div = div + 2\n  end\n\
    \  return n % div ~= 0\nend", "\tif n < 2 then\n\t\treturn false\n\tend\n\tlocal\
    \ upper = math.sqrt(n)\n\tfor i = 2, upper do\n\t\tif n % i == 0 then\n\t\t\t\
    return false\n\t\tend\n\tend\n\treturn true\nend", "  if n == 1 then\n    return\
    \ false\n  end\n  local i = 2\n  while i < n do\n    if n % i == 0 then\n    \
    \  return false\n    end\n    i = i + 1\n  end\n  return true\nend", "  if n %\
    \ 2 == 0 and n ~= 2 then\n    return false\n  end\n  local mid = math.floor(math.sqrt(n))\n\
    \  for i = 3, mid, 2 do\n    if n % i == 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "    if n <= 1 then\n        return false\n    end\n\
    \    if n == 2 then\n        return true\n    end\n    if n % 2 == 0 then\n  \
    \      return false\n    end\n    local i = 3\n    while i*i <= n do\n       \
    \ if n % i == 0 then\n            return false\n        end\n        i = i + 2\n\
    \    end\n    return true\nend", "\tassert(type(n) == \"number\", \"n must be\
    \ a number\")\n\tassert(n % 1 == 0, \"n must be an integer\")\n\tif n < 2 then\n\
    \t\treturn false\n\tend\n\tif n % 2 == 0 then\n\t\treturn n == 2\n\tend\n\tfor\
    \ i = 3, n, 2 do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend", "    -- if n has a divisor (other than 1) up to n/2\n   \
    \ -- then it is not prime\n    for i = 2, n / 2 do\n        if n % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "  if\
    \ n < 2 then\n    return false\n  end\n  for k = 2, n-1 do\n    if (n % k) ==\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend", "    if n ==\
    \ 2 then\n        return true\n    elseif n % 2 == 0 then\n        return false\n\
    \    end", "  if n <= 1 then\n    return false\n  end\n  if n <= 3 then\n    return\
    \ true\n  end\n  if n % 2 == 0 or n % 3 == 0 then\n    return false\n  end\n \
    \ local i = 5\n  while i*i <= n do\n    if n % i == 0 or n % (i + 2) == 0 then\n\
    \      return false\n    end\n    i = i + 6\n  end\n  return true\nend", "  local\
    \ result = true\n  local divisor = n-1\n  while divisor > 1 do\n    if n % divisor\
    \ == 0 then\n      result = false\n      break\n    end\n    divisor = divisor\
    \ - 1\n  end\n  return result\nend", "  -- Corner case: 1 and 2 are prime numbers,\n\
    \  -- as are -1 and -2\n  if n == 1 or n == 2 or n == -1 or n == -2 then\n   \
    \ return true\n  end", "    if n <= 1 then\n        return false\n    end\n  \
    \  for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n      \
    \      return false\n        end\n    end\n    return true\nend", "  if n % 2\
    \ == 0 then\n    return false\n  end\n  local divisor = 3\n  while divisor*divisor\
    \ <= n do\n    if n % divisor == 0 then\n      return false\n    end\n    divisor\
    \ = divisor + 2\n  end\n  return true\nend", "\tif n <= 1 then\n\t\treturn false\n\
    \tend\n\tfor i = 2, n-1 do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend", "    -- Checking for a few simple cases first\n  \
    \  if n == 1 then\n        return false\n    elseif n == 2 then\n        return\
    \ true\n    elseif n % 2 == 0 then\n        return false\n    end", "    -- check\
    \ if n is a prime\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    if n < 2 then\n        return\
    \ false\n    end\n    local i = 2\n    while i*i <= n do\n        if n % i ==\
    \ 0 then\n            return false\n        end\n        i = i + 1\n    end\n\
    \    return true\nend", "    -- Negative numbers are not prime.\n    if n < 0\
    \ then\n        return false\n    end", "    -- n is prime if n is only divisible\
    \ by 1 and itself\n    -- n < 2 is not prime\n    if n < 2 then\n        return\
    \ false\n    end\n    -- 2 is a special case\n    if n == 2 then\n        return\
    \ true\n    end\n    -- even numbers > 2 are not prime\n    if n % 2 == 0 then\n\
    \        return false\n    end\n    -- loop from 3 to the square root of n, incrementing\
    \ by 2\n    for x = 3, math.sqrt(n), 2 do\n        -- if n is divisible by an\
    \ odd number, it is not prime\n        if n % x == 0 then\n            return\
    \ false\n        end\n    end\n    -- after all that, if n is not divisible by\
    \ any odd number, it is prime\n    return true\nend", "    local sqrt_n = math.sqrt(n)\n\
    \    for i = 2, sqrt_n do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  if n <= 1 then\n    return false\n\
    \  end\n  if n == 2 then\n    return true\n  end\n  if n % 2 == 0 then\n    return\
    \ false\n  end\n  local divisor = 3\n  while divisor <= math.sqrt(n) do\n    if\
    \ n % divisor == 0 then\n      return false\n    end\n    divisor = divisor +\
    \ 2\n  end\n  return true\nend", "    if n == 1 then\n        return false\n \
    \   end\n    if n == 2 then\n        return true\n    end\n    if n % 2 == 0 then\n\
    \        return false\n    end\n    local i = 3\n    while i <= math.sqrt(n) do\n\
    \        if n % i == 0 then\n            return false\n        end\n        i\
    \ = i + 2\n    end\n    return true\nend", "    if (n < 1) then\n        return\
    \ false\n    end\n    if (n < 4) then\n        return true\n    end\n    if (n\
    \ % 2 == 0) then\n        return false\n    end\n    local max = math.sqrt(n)\n\
    \    for i = 3, max, 2 do\n        if (n % i == 0) then\n            return false\n\
    \        end\n    end\n    return true\nend", "\tif n == 1 then\n\t\treturn false\n\
    \tend\n\tfor i = 2, math.floor(math.sqrt(n)) do\n\t\tif n % i == 0 then\n\t\t\t\
    return false\n\t\tend\n\tend\n\treturn true\nend", "  if n <= 1 then\n    return\
    \ false\n  end\n  local m = math.floor(math.sqrt(n))\n  for i = 2, m do\n    if\
    \ math.floor(n % i) == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "    -- Obviously 0 and 1 aren't prime.\n    if n <= 1 then\n        return\
    \ false\n    end", "  if n < 2 then\n    return false\n  end\n  for i = 2, n /\
    \ 2 do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  -- TODO: return true if n is prime, false otherwise\n  if n == 1 then\
    \ return false end\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    if n < 2 then\n        return\
    \ false\n    end\n    for i = 2, math.sqrt(n) do\n        if math.fmod(n, i) ==\
    \ 0 then\n            return false\n        end\n    end\n    return true\nend",
  "  if n == 2 then\n    return true\n  elseif n % 2 == 0 then\n    return false\n\
    \  end\n  local bound = math.floor(math.sqrt(n))\n  for i = 3, bound, 2 do\n \
    \   if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend",
  "    if (n > 1) then\n        if n == 2 then\n            return true\n        elseif\
    \ n % 2 == 0 then\n            return false\n        end\n        for x = 3, math.sqrt(n),\
    \ 2 do\n            if n % x == 0 then\n                return false\n       \
    \     end\n        end\n        return true\n    end\n    return false\nend",
  "    if n <= 1 then\n        return false\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "  if n == 1 then\n    return false\n  end\n  local max_divisor\
    \ = math.floor(math.sqrt(n))\n  for i = 2, max_divisor do\n    if n % i == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "  if n == 1 then\n    return false\n  end\n  local t\
    \ = 2\n  while t*t <= n do\n    if n % t == 0 then\n      return false\n    end\n\
    \    t = t + 1\n  end\n  return true\nend", "\t-- check if n is a multiple of\
    \ 2\n\tif n % 2 == 0 then return false end\n\t-- if not, then just check the odds\n\
    \tfor i = 3, math.sqrt(n), 2 do\n\t\tif n % i == 0 then return false end\n\tend\n\
    \treturn true\nend", "    if n == 2 then\n        return true\n    elseif n <=\
    \ 1 or n % 2 == 0 then\n        return false\n    end", "\t-- replace this with\
    \ your solution\nend", "\tif n < 2 then\n\t\treturn false\n\tend\n\tlocal s =\
    \ math.floor(math.sqrt(n))\n\tfor i = 2, s do\n\t\tif n % i == 0 then\n\t\t\t\
    return false\n\t\tend\n\tend\n\treturn true\nend", "    if n == 2 then\n     \
    \   return true\n    elseif n % 2 == 0 then\n        return false\n    end", " \
    \   if n < 2 then\n        return false\n    end\n    if n % 2 == 0 then\n   \
    \     return n == 2\n    end\n    for i = 3, math.sqrt(n), 2 do\n        if n\
    \ % i == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "\tif n < 2 then\n\t\treturn false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\
    \t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
  "    for x = 2,math.sqrt(n) do\n        if n % x == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    -- edge cases\n    if n <=\
    \ 1 then\n        return false\n    end\n    if n == 2 then\n        return true\n\
    \    end\n    if n % 2 == 0 then\n        return false\n    end", "  local i\n\
    \  local sqrt_n = math.sqrt(n)\n  for i = 2, sqrt_n do\n    if n % i == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "    if n < 2 then\n\
    \        return false\n    end\n    for i = 2, math.sqrt(n) do\n        if n %\
    \ i == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    -- Handle negative numbers.\n    if n < 0 then\n        n = -n\n  \
    \  end", "    local i\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    if\
    \ n < 2 then\n        return false\n    end\n    for i = 2, n - 1 do\n       \
    \ if n % i == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  if n == 1 then\n    return false\n  end\n  for i = 2, n - 1 do\n\
    \    if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend",
  "    if n < 2 then\n        return false\n    end\n    local m = 2\n    while m\
    \ * m <= n do\n        if n % m == 0 then\n            return false\n        end\n\
    \        m = m + 1\n    end\n    return true\nend", "    local divisor_ceiling\
    \ = math.sqrt(n)\n    local divisor = 2\n    while divisor <= divisor_ceiling\
    \ do\n        if n % divisor == 0 then\n            return false\n        end\n\
    \        divisor = divisor + 1\n    end\n    return true\nend", "\tfor i = 2,\
    \ math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend", "    if n <= 1 then\n        return false\n    end\n    local\
    \ i = 2\n    while i <= math.sqrt(n) do\n        if n % i == 0 then\n        \
    \    return false\n        end\n        i = i + 1\n    end\n    return true\n\
    end", "    if n <= 1 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    if n <= 1 then\n        return false\n    end\n \
    \   if n <= 3 then\n        return true\n    end\n    if n % 2 == 0 or n % 3 ==\
    \ 0 then\n        return false\n    end\n    local i = 5\n    while i * i <= n\
    \ do\n        if n % i == 0 or n % (i + 2) == 0 then\n            return false\n\
    \        end\n        i = i + 6\n    end\n    return true\nend", "    if n < 1\
    \ then\n        return false\n    end\n    local s = math.floor(math.sqrt(n))\n\
    \    for i = 2, s do\n        if n % i == 0 then\n            return false\n \
    \       end\n    end\n    return true\nend", "  if n <= 1 then\n    return false\n\
    \  end\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return false\n  \
    \  end\n  end\n  return true\nend", "\tif n < 1 then\n\t\treturn false\n\tend\n\
    \tfor i = 2, math.floor(math.sqrt(n)) do\n\t\tif n % i == 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", '    local divisor = 2', "    return\
    \ n > 1 and not any(function(x) return n % x == 0 end, range(2, n - 1))\nend",
  "    if n < 2 then\n        return false\n    end\n    local i = 2\n    while i\
    \ * i <= n do\n        if n % i == 0 then\n            return false\n        end\n\
    \        i = i + 1\n    end\n    return true\nend", "    -- not a prime if less\
    \ than 2 or an even number\n    if n < 2 or n % 2 == 0 then\n        return false\n\
    \    end", "  if n < 2 then\n    return false\n  end\n  for i = 2, math.sqrt(n)\
    \ do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "    if n == 1 then\n        return false\n    end\n    if n == 2 then\n\
    \        return true\n    end\n    if n % 2 == 0 then\n        return false\n\
    \    end\n    local k = 3\n    while k < math.sqrt(n) do\n        if n % k ==\
    \ 0 then\n            return false\n        end\n        k = k + 2\n    end\n\
    \    return true\nend", "    -- Insert your code here\n    -- The following line\
    \ prints the input and the output\n    if n == 2 then\n        return true\n \
    \   end\n    if n == 3 then\n        return true\n    end\n    if n == 5 then\n\
    \        return true\n    end\n    if n == 7 then\n        return true\n    end\n\
    \    if n == 11 then\n        return true\n    end\n    if n == 13 then\n    \
    \    return true\n    end\n    if n == 17 then\n        return true\n    end\n\
    \    if n == 19 then\n        return true\n    end\n    if n == 23 then\n    \
    \    return true\n    end\n    if n == 29 then\n        return true\n    end\n\
    \    if n == 31 then\n        return true\n    end\n    if n == 37 then\n    \
    \    return true\n    end\n    if n == 41 then\n        return true\n    end\n\
    \    if n == 43 then\n        return true\n    end\n    if n == 47 then\n    \
    \    return true\n    end\n    if n == 53 then\n        return true\n    end\n\
    \    if n == 59 then\n        return true\n    end\n    if n == 61 then\n    \
    \    return true\n    end\n    if n == 67 then\n        return true\n    end\n\
    \    if n == 71 then\n        return true\n    end\n    if n == 73 then\n    \
    \    return true\n    end\n    if n == 79 then\n        return true\n    end\n\
    \    if n == 83 then\n        return true\n    end\n    if n == 89 then\n    \
    \    return true\n    end\n    if n == 97 then\n        return true\n    end\n\
    \    if n == 101 then\n        return true\n    end\n    if n == 103 then\n  \
    \      return true\n    end\n    if n == 107 then\n        return true\n    end\n\
    \    if n == 109 then\n        return true\n    end\n    if n == 113 then\n  \
    \      return true\n    end\n    if n == 127 then\n        return true\n    end\n\
    \    if n == 131 then\n        return true\n    end\n    if n == 137 then\n  \
    \      return true\n    end\n    if n == 139 then\n        return true\n    end\n\
    \    if n == 149 then\n        return true\n    end\n    if", "\t-- Check if n\
    \ is a prime number\n\t-- Source: https://en.wikipedia.org/wiki/Primality_test#Pseudocode\n\
    \tif n <= 1 then\n\t\treturn false\n\telseif n <= 3 then\n\t\treturn true\n\t\
    elseif n % 2 == 0 or n % 3 == 0 then\n\t\treturn false\n\tend", "\tif n < 2 then\n\
    \t\treturn false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    -- Note: code inside\
    \ [[...]] is multiline comment\n    if n < 2 then\n        return false\n    end\n\
    \    for k = 2, math.sqrt(n) do\n        if n % k == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  -- make sure n > 1\n\
    \  n = n + 0\n  if n <= 1 then\n    return false\n  end", "    if n < 2 then\n\
    \        return false\n    end\n    for i = 2, n-1 do\n        if (n % i) == 0\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "\tfor m = 2, n - 1 do\n\t\tif n % m == 0 then\n\t\t\treturn false\n\t\tend\n\t\
    end\n\treturn true\nend", "  if n == 2 then\n    return true\n  elseif n == 1\
    \ or n % 2 == 0 then\n    return false\n  end", "\tif (n == 2) then\n\t\treturn\
    \ true\n\telseif ((n % 2) == 0) then\n\t\treturn false\n\tend\n\tlocal n_sqrt\
    \ = math.floor(math.sqrt(n))\n\tfor i = 3, n_sqrt, 2 do\n\t\tif ((n % i) == 0)\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  if n == 1\
    \ then\n    return false\n  end\n  if n < 4 then\n    return true\n  end\n  if\
    \ n % 2 == 0 then\n    return false\n  end\n  if n < 9 then\n    return true\n\
    \  end\n  if n % 3 == 0 then\n    return false\n  end\n  local r = math.floor(math.sqrt(n))\n\
    \  local f = 5\n  while f <= r do\n    if n % f == 0 then\n      return false\n\
    \    end\n    if n % (f + 2) == 0 then\n      return false\n    end\n    f = f\
    \ + 6\n  end\n  return true\nend", "\t-- Your code here\n\t-- we can rewrite is_prime(n)\
    \ as not (n == 1 or not is_prime(n))\n\tif n == 1 then\n\t\treturn false\n\telse\n\
    \t\treturn not not_prime(n)\n\tend\nend", "    if n <= 1 then\n        return\
    \ false\n    end\n    for d = 2, math.sqrt(n) do\n        if n % d == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ m = math.floor(math.sqrt(n))\n  for i = 2, m do\n    if n % i == 0 then\n  \
    \    return false\n    end\n  end\n  return true\nend", "  local result = true\n\
    \  local i = 2\n  while i < n and result do\n    result = n % i ~= 0\n    i =\
    \ i + 1\n  end\n  return result\nend", "    if n == 1 then\n        return false\n\
    \    end\n    local root = math.sqrt(n)\n    local i = 2\n    while i <= root\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    \
    \    i = i + 1\n    end\n    return true\nend", "\tif n == 1 then\n\t\treturn\
    \ false\n\tend\n\tlocal i = 2\n\twhile i * i <= n do\n\t\tif n % i == 0 then\n\
    \t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn true\nend", "  --\
    \ brute force it!\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  -- Check if n is a prime number\n\
    \  -- 1 is not prime\n  if n == 1 then\n    return false\n  end\n  -- 2 is the\
    \ only even prime number\n  if n == 2 then\n    return true\n  end\n  -- If n\
    \ is even it's not prime\n  if n % 2 == 0 then\n    return false\n  end\n  --\
    \ Check if there is a divisor less than sqrt(n)\n  local i = 3\n  while i <= math.sqrt(n)\
    \ do\n    if n % i == 0 then\n      return false\n    end\n    i = i + 2\n  end\n\
    \  return true\nend", "  if n < 2 then\n    return false\n  end\n  for i = 2,\
    \ math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "    if n < 2 then\n        return false\n    end\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    if n < 2 then\n        return\
    \ false\n    end\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    return false\nend", "\tif n\
    \ < 2 then\n\t\treturn false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif n %\
    \ i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\tif\
    \ (n < 2) then\n\t\treturn false\n\tend\n\tfor i = 2, n-1 do\n\t\tif (n % i ==\
    \ 0) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\tif n <\
    \ 2 then\n\t\treturn false\n\tend\n\tfor d = 2,n-1 do\n\t\tif n % d == 0 then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
