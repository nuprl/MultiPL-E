name: HumanEval_141_file_name_check
language: lua
prompt: "-- Create a function which takes a string representing a file's name, and\
  \ returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  -- A file's name is considered to be valid if and only if all the following conditions\
  \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n-- the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"example.txt\"\
  ) # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the name should start\
  \ with a latin alphapet letter)\nlocal function file_name_check(file_name)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
  \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
  \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
  \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n   \
  \ lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
  \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
  \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
  \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
  \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if string.match(file_name, \"%d\") == nil then\n        return\
    \ 'No'\n    end\n    if string.match(file_name, \"%.+\") == nil then\n       \
    \ return 'No'\n    end\n    if string.match(file_name, \"%.+\") ~= \".\" then\n\
    \        return 'No'\n    end\n    if string.match(file_name, \"%.+\") == \"..\"\
    \ then\n        return 'No'\n    end\n    if string.match(file_name, \"%.+\")\
    \ == \"...\" then\n        return 'No'\n    end\n    if string.match(file_name,\
    \ \"%.+\") == \"....\" then\n        return 'No'\n    end\n    if string.match(file_name,\
    \ \"%.+\") == \".....\" then\n        return 'No'\n    end\n    if string.match(file_name,\
    \ \"%.+\") == \"......\" then\n        return 'No'\n    end\n    if string.match(file_name,\
    \ \"%a+%.\") == nil then\n        return 'No'\n    end\n    if string.match(file_name,\
    \ \"%a+%.\") == \"\" then\n        return 'No'\n    end\n    if string.match(file_name,\
    \ \"%.%a+\") == nil then\n        return 'No'\n    end\n    if string.match(file_name,\
    \ \"%.%a+\") == \"\" then\n        return 'No'\n    end\n    if string.match(file_name,\
    \ \"%.%a+\") == \".\" then\n        return 'No'\n    end\n    if string.match(file_name,\
    \ \"%.%a+\") == \"..\" then\n        return 'No'\n    end\n    if string.match(file_name,\
    \ \"%.%a+\") == \"...\" then\n        return 'No'\n    end\n    if string.match(file_name,\
    \ \"%.%a+\") == \"....\" then\n        return 'No'\n    end\n    if string.match(file_name,\
    \ \"%.%a+\") == \".....\" then\n        return 'No'\n    end\n    if string.match(file_name,\
    \ \"%.%a+\") == \"", "  local i = 0\n  local dot_count = 0\n  local digit_count\
    \ = 0\n  local extension = file_name:match(\".*%.(.+)\")\n  local valid_extensions\
    \ = { txt = true, exe = true, dll = true }\n  for c in file_name:gmatch(\".\"\
    ) do\n    if c == \".\" then\n      dot_count = dot_count + 1\n    elseif c:match(\"\
    %d\") then\n      digit_count = digit_count + 1\n    end\n    i = i + 1\n  end\n\
    \  if digit_count > 3 or dot_count ~= 1 or not extension or not valid_extensions[extension]\
    \ then\n    return \"No\"\n  end\n  local name = file_name:sub(1, i - #extension\
    \ - 1)\n  if name:match(\"%d\") or #name == 0 then\n    return \"No\"\n  end\n\
    \  return \"Yes\"\nend", "\tif not file_name:match(\"^[a-zA-Z]%d*%.%w+$\") then\n\
    \t\treturn \"No\"\n\tend\n\tif #file_name:match(\"%d+\") > 3 then\n\t\treturn\
    \ \"No\"\n\tend\n\tif not file_name:match(\"%.(%w+)$\") then\n\t\treturn \"No\"\
    \n\tend\n\tif not file_name:match(\"%.(%w+)$\"):match(\"^(txt|exe|dll)$\") then\n\
    \t\treturn \"No\"\n\tend\n\treturn \"Yes\"\nend", "\t-- your code goes here",
  "    local count = 0\n    local dot = 0\n    local name_start = false\n    local\
    \ dot_start = false\n    local exts = {'txt', 'exe', 'dll'}\n    for i = 1, #file_name\
    \ do\n        local ch = file_name:sub(i, i)\n        if ch >= '0' and ch <= '9'\
    \ then\n            if not name_start then\n                return 'No'\n    \
    \        end\n            count = count + 1\n            if count > 3 then\n \
    \               return 'No'\n            end\n        elseif ch == '.' then\n\
    \            if dot == 1 then\n                return 'No'\n            end\n\
    \            dot = 1\n            count = 0\n            name_start = false\n\
    \            dot_start = true\n        elseif ch >= 'a' and ch <= 'z' or ch >=\
    \ 'A' and ch <= 'Z' then\n            name_start = true\n            dot_start\
    \ = false\n        else\n            return 'No'\n        end\n    end\n    if\
    \ not name_start or not dot_start then\n        return 'No'\n    end\n    local\
    \ ext = file_name:sub(#file_name - 2, #file_name)\n    for _, v in ipairs(exts)\
    \ do\n        if v == ext then\n            return 'Yes'\n        end\n    end\n\
    \    return 'No'\nend", "\tlocal result, _ = file_name:gsub(\"[0-9]\", \"\")\n\
    \tif result > 3 then return \"No\" end\n\tlocal result, _ = file_name:gsub(\"\
    %.\", \"\")\n\tif result ~= #file_name - 1 then return \"No\" end\n\tlocal i =\
    \ 1\n\twhile i <= #file_name do\n\t\tif file_name:sub(i, i) == \".\" then\n\t\t\
    \tlocal ext = file_name:sub(i + 1, #file_name)\n\t\t\tif ext ~= \"txt\" and ext\
    \ ~= \"exe\" and ext ~= \"dll\" then return \"No\" end\n\t\t\tlocal sub = file_name:sub(1,\
    \ i - 1)\n\t\t\tif sub == \"\" then return \"No\" end\n\t\t\tif sub:sub(1, 1):match(\"\
    [a-zA-Z]\") == nil then return \"No\" end\n\t\t\treturn \"Yes\"\n\t\tend\n\t\t\
    i = i + 1\n\tend\n\treturn \"No\"\nend", "  return 'Yes'\nend", "\t-- create function\
    \ to check if a character is a digit\n\tlocal function is_digit(c)\n\t\treturn\
    \ c:byte() >= string.byte('0') and c:byte() <= string.byte('9')\n\tend\n\t-- create\
    \ function to check if a character is a latin alphabet letter\n\tlocal function\
    \ is_letter(c)\n\t\treturn c:byte() >= string.byte('a') and c:byte() <= string.byte('z')\
    \ or\n\t\t\t   c:byte() >= string.byte('A') and c:byte() <= string.byte('Z')\n\
    \tend\n\t-- create function to check if a character is a dot\n\tlocal function\
    \ is_dot(c)\n\t\treturn c == '.'\n\tend\n\t-- create a set (dictionary) of valid\
    \ postfixes\n\tlocal extensions = {\n\t\t['txt'] = true,\n\t\t['exe'] = true,\n\
    \t\t['dll'] = true\n\t}\n\t-- create function to check if a string is a valid\
    \ postfix\n\tlocal function is_valid_extension(s)\n\t\treturn extensions[s] ==\
    \ true\n\tend\n\t-- start checking the file name\n\tlocal is_valid = true\n\t\
    local num_digits = 0\n\tlocal num_dots = 0\n\tlocal seen_first_letter = false\n\
    \tlocal seen_last_letter = false\n\tlocal seen_first_dot = false\n\tlocal seen_last_dot\
    \ = false\n\tlocal substring_before_dot = ''\n\tlocal substring_after_dot = ''\n\
    \tfor i = 1, #file_name do\n\t\t-- check if the number of digits is more than\
    \ 3\n\t\tif is_digit(file_name:sub(i, i)) then\n\t\t\tnum_digits = num_digits\
    \ + 1\n\t\t\tif num_digits > 3 then\n\t\t\t\tis_valid = false\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\tend\n\t\t-- check if the file name doesn't contain more than one\
    \ dot\n\t\tif is_dot(file_name:sub(i, i)) then\n\t\t\tnum_dots = num_dots + 1\n\
    \t\t\tif num_", "  local s, r, i, cnt = file_name, {}, 1, 0\n  while i <= string.len(s)\
    \ do\n    local cc = string.sub(s, i, i)\n    if cc == '.' then\n      cnt = cnt\
    \ + 1\n      r[cnt] = ''\n    else\n      r[cnt] = r[cnt] .. cc\n    end\n   \
    \ i = i + 1\n  end\n  if cnt ~= 2 then return 'No' end\n  local count, ext = string.match(r[2],\
    \ '^([0-9]*)(.*)$')\n  if count == '' or count == nil then return 'No' end\n \
    \ if tonumber(count) > 3 then return 'No' end\n  if string.match(r[1], '^[a-zA-Z]')\
    \ == nil then return 'No' end\n  if r[1] == '' then return 'No' end\n  if ext\
    \ ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then return 'No' end\n  return 'Yes'\n\
    end", "    local file_name = file_name or \"\"\n    local digits = 0\n    local\
    \ dots = 0\n    local last_char = nil\n    local ext = false\n    local first_char\
    \ = string.match(file_name, \"^%a\")\n    local ext_match = string.match(file_name,\
    \ \"%.[a-z]+$\")\n    local ext_list = { \"txt\", \"exe\", \"dll\" }\n    for\
    \ _, char in ipairs({ string.byte(file_name, 1, #file_name) }) do\n        if\
    \ char >= 48 and char <= 57 then\n            digits = digits + 1\n        elseif\
    \ char == 46 then\n            dots = dots + 1\n        end\n        last_char\
    \ = char\n    end\n    for _, ext_item in ipairs(ext_list) do\n        if ext_match\
    \ == \".\" .. ext_item then\n            ext = true\n        end\n    end\n  \
    \  if digits > 3 or dots ~= 1 or ext == false or first_char == nil or\n      \
    \  last_char == 46 then\n        return \"No\"\n    else\n        return \"Yes\"\
    \n    end\nend", "    local letters, numbers, dot = 0, 0, 0\n    for i = 1, #file_name\
    \ do\n        local c = file_name:sub(i, i)\n        if c >= 'a' and c <= 'z'\
    \ or c >= 'A' and c <= 'Z' then\n            letters = letters + 1\n        elseif\
    \ c >= '0' and c <= '9' then\n            numbers = numbers + 1\n        elseif\
    \ c == '.' then\n            dot = dot + 1\n        end\n    end\n    return letters\
    \ > 0 and numbers <= 3 and dot == 1 and \n        {'txt', 'exe', 'dll'}[tonumber(file_name:match('%d*$'))]\
    \ and\n        'Yes' or 'No'\nend", "    if (file_name:match(\"%d\") and file_name:match(\"\
    %d\") > 3) then\n        return \"No\"\n    end\n    if (file_name:match(\"[.]\"\
    ) ~= \".\") then\n        return \"No\"\n    end\n    local parts = file_name:split(\"\
    .\")\n    if (not (parts[1]:match(\"[A-Za-z]\") or parts[1]:match(\"%d\"))) then\n\
    \        return \"No\"\n    end\n    if (not (parts[2] == \"txt\" or parts[2]\
    \ == \"exe\" or parts[2] == \"dll\")) then\n        return \"No\"\n    end\n \
    \   return \"Yes\"\nend", "    if #file_name < 5 then\n        return 'No'\n \
    \   end\n    local dot_position = file_name:find('.')\n    if not dot_position\
    \ then\n        return 'No'\n    end\n    local name = file_name:sub(1, dot_position\
    \ - 1)\n    local extension = file_name:sub(dot_position + 1)\n    local count\
    \ = 0\n    for i = 1, #name do\n        if name:sub(i, i):match('%d') then\n \
    \           count = count + 1\n        end\n    end\n    if count > 3 then\n \
    \       return 'No'\n    end\n    if extension ~= 'txt' and extension ~= 'exe'\
    \ and extension ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\n\
    end", end, "    local n = file_name:find('.')\n    local file_name_before_point\
    \ = file_name:sub(1, n - 1)\n    local file_name_after_point = file_name:sub(n\
    \ + 1)\n    if file_name_before_point:find('%d') ~= nil and file_name_before_point:match('%d')\
    \ > 3 then\n        return 'No'\n    end\n    if file_name_before_point:match('[%a]')\
    \ == nil then\n        return 'No'\n    end\n    if file_name_after_point ~= 'txt'\
    \ and file_name_after_point ~= 'exe' and file_name_after_point ~= 'dll' then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend", "    -- write your code\
    \ here\nend", "    local ok, cnt = file_name:gsub(\"%d\", \"\")\n    if cnt >\
    \ 3 then\n        return \"No\"\n    end\n    local x = file_name:find(\"%.\"\
    )\n    if not x then\n        return \"No\"\n    end\n    local y = file_name:find(\"\
    %.\", x + 1)\n    if y then\n        return \"No\"\n    end\n    local name, ext\
    \ = file_name:match(\"^([^%.]+)%.([^%.]+)$\")\n    if not name then\n        return\
    \ \"No\"\n    end\n    if name:len() == 0 then\n        return \"No\"\n    end\n\
    \    if not name:match(\"^[a-zA-Z]\") then\n        return \"No\"\n    end\n \
    \   if ext ~= \"txt\" and ext ~= \"exe\" and ext ~= \"dll\" then\n        return\
    \ \"No\"\n    end\n    return \"Yes\"\nend", end, "    -- Get the substring before\
    \ the dot.\n    local _, i = string.find(file_name, \"%.\")\n    local file_name_prefix\
    \ = string.sub(file_name, 1, i - 1)\n    -- Get the substring after the dot.\n\
    \    local j, _ = string.find(file_name, \"%.\")\n    local file_name_suffix =\
    \ string.sub(file_name, j + 1)\n    -- Check if the file's name contains only\
    \ one dot.\n    if string.find(file_name, \"%.\") ~= string.find(file_name, \"\
    %.\", 2) then\n        return \"No\"\n    end\n    -- Check if the file's name\
    \ contains only three digits.\n    if string.find(file_name, \"%d%d%d\") and \n\
    \    string.find(file_name, \"%d%d%d\") ~= string.find(file_name, \"%d%d%d\",\
    \ 4) then\n        return \"No\"\n    end\n    -- Check if the substring before\
    \ the dot starts with a letter from the latin alphapet.\n    if string.find(file_name_prefix,\
    \ \"[a-zA-Z]\") ~= 1 then\n        return \"No\"\n    end\n    -- Check if the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if file_name_suffix\
    \ ~= \"txt\" and file_name_suffix ~= \"exe\" and file_name_suffix ~= \"dll\" then\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend", "  if type(file_name)\
    \ ~= \"string\" then\n    return nil, \"Expected string for argument #1: file_name\"\
    \n  end\n  if file_name:match('%.') == nil then\n    return 'No'\n  end\n  local\
    \ prefix, suffix = file_name:match('(.*)%.(.*)')\n  local count = file_name:gsub('%d',\
    \ '')\n  if prefix:match('^%a') == nil or count:len() > file_name:len()-3 then\n\
    \    return 'No'\n  end\n  if suffix == 'txt' or suffix == 'exe' or suffix ==\
    \ 'dll' then\n    return 'Yes'\n  end\n  return 'No'\nend", "    -- your code\
    \ here\n    -- Can I use string:match() here?\n    local count = 0\n    local\
    \ first = 0\n    local second = 0\n    local index = 0\n    local t = {}\n   \
    \ local array = {\"txt\", \"exe\", \"dll\"}\n    for i = 1, #file_name do\n  \
    \      -- print(string.sub(file_name, i, i))\n        local char = string.sub(file_name,\
    \ i, i)\n        if char == \".\" then\n            second = i\n            break\n\
    \        end\n    end\n    for i = 1, #file_name do\n        local char = string.sub(file_name,\
    \ i, i)\n        -- print(string.sub(file_name, i, i))\n        if char == \"\
    .\" then\n            index = index + 1\n            if index == 1 then\n    \
    \            first = i\n            end\n        end\n        if tonumber(char)\
    \ ~= nil then\n            count = count + 1\n        end\n    end\n    -- print(string.sub(file_name,\
    \ 1, first - 1))\n    if count > 3 then\n        return \"No\"\n    end\n    if\
    \ string.sub(file_name, 1, first - 1) == \"\" then\n        return \"No\"\n  \
    \  end\n    local substr = string.sub(file_name, first + 1, second - 1)\n    if\
    \ substr ~= \"txt\" and substr ~= \"exe\" and substr ~= \"dll\" then\n       \
    \ return \"No\"\n    end\n    local char = string.sub(file_name, 1, 1)\n    --\
    \ print(char)\n    local a = char >= \"a\" and char <= \"z\"\n    local b = char\
    \ >= \"A\" and char <= \"Z\"\n    if not (a or b) then\n        return \"No\"\n\
    \    end\n    return \"Yes\"\nend", "    local x = file_name:gmatch(\"[a-zA-Z]\"\
    )\n    local x1 = file_name:gmatch(\"%.\")\n    local count = 0\n    for _ in\
    \ x do\n        count = count + 1\n    end\n    for _ in x1 do\n        count\
    \ = count + 1\n    end\n    if count == 2 then\n        local x2 = file_name:gmatch(\"\
    %.\")\n        local dot = \"\"\n        for d in x2 do\n            dot = d\n\
    \        end\n        local x3 = file_name:gmatch(\"%d\")\n        local num_count\
    \ = 0\n        for _ in x3 do\n            num_count = num_count + 1\n       \
    \ end\n        if num_count > 3 then\n            return \"No\"\n        end\n\
    \        local x4 = file_name:gmatch(\"[a-zA-Z]\")\n        local alpha = false\n\
    \        for a in x4 do\n            alpha = true\n        end\n        if alpha\
    \ == false then\n            return \"No\"\n        end\n        if file_name:sub(#file_name\
    \ - 2, #file_name) == \"txt\" then\n            return \"Yes\"\n        elseif\
    \ file_name:sub(#file_name - 2, #file_name) == \"exe\" then\n            return\
    \ \"Yes\"\n        elseif file_name:sub(#file_name - 2, #file_name) == \"dll\"\
    \ then\n            return \"Yes\"\n        else\n            return \"No\"\n\
    \        end\n    else\n        return \"No\"\n    end\nend", "    local dot_pos\
    \ = file_name:find('.')\n    if not dot_pos then\n        return 'No'\n    end\n\
    \    local prefix = file_name:sub(1, dot_pos - 1)\n    local suffix = file_name:sub(dot_pos\
    \ + 1)\n    if #prefix < 1 or not prefix:match('^[a-zA-Z]+$') then\n        return\
    \ 'No'\n    end\n    if not suffix:match('^txt$') and not suffix:match('^exe$')\
    \ and not suffix:match('^dll$') then\n        return 'No'\n    end\n    local\
    \ num_count = prefix:match('%d+')\n    if num_count and #num_count > 3 then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend", "\tlocal cnt = file_name:gsub(\"\
    %d\", \"\")\n\tlocal suffix = file_name:match(\"%.([^%.]+)$\")\n\treturn #cnt\
    \ - #file_name > 3 and \"No\" or\n\t\tfile_name:find(\"%.%.\") and \"No\" or\n\
    \t\tfile_name:find(\"^%.\") and \"No\" or\n\t\tsuffix and suffix ~= \"txt\" and\
    \ suffix ~= \"exe\" and suffix ~= \"dll\" and \"No\" or\n\t\t\"Yes\"\nend", " \
    \   local letters = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM\"\n\
    \    local number = \"0123456789\"\n    local dot = \".\"\n    local extensions\
    \ = {'txt', 'exe', 'dll'}\n    local dots = 0\n    local latin = false\n    local\
    \ digits = 0\n    local extension_ok = false\n    for i = 1, string.len(file_name)\
    \ do\n        local char = string.sub(file_name, i, i)\n        if not latin and\
    \ string.find(letters, char) then\n            latin = true\n        end\n   \
    \     if string.find(number, char) then\n            digits = digits + 1\n   \
    \     end\n        if string.find(dot, char) then\n            dots = dots + 1\n\
    \        end\n    end\n    if dots ~= 1 then\n        return \"No\"\n    end\n\
    \    for i = 1, #extensions do\n        if string.sub(file_name, string.len(file_name)\
    \ - 2, string.len(file_name)) == extensions[i] then\n            extension_ok\
    \ = true\n        end\n    end\n    if not extension_ok then\n        return \"\
    No\"\n    end\n    if digits > 3 then\n        return \"No\"\n    end\n    if\
    \ not latin then\n        return \"No\"\n    end\n    return \"Yes\"\nend", " \
    \ if string.match(file_name, '^[a-zA-Z][a-zA-Z0-9]*%.[txt,exe,dll]$') then\n \
    \   return 'Yes'\n  else\n    return 'No'\n  end\nend", end, "    local function\
    \ isdigit(c)\n        return (c >= '0' and c <= '9')\n    end\n    local function\
    \ isalpha(c)\n        return (c >= 'a' and c <= 'z') or (c >= 'A' and c <= 'Z')\n\
    \    end\n    local function ends_with(str, ending)\n        return ending ==\
    \ \"\" or str:sub(-#ending) == ending\n    end\n    local function count_digits(str)\n\
    \        local digits = 0\n        for i = 1, #str do\n            if isdigit(str:sub(i,\
    \ i)) then\n                digits = digits + 1\n            end\n        end\n\
    \        return digits\n    end\n    local function get_substr(str, from, to)\n\
    \        if from < 1 then from = 1 end\n        if to > #str then to = #str end\n\
    \        local res = \"\"\n        for i = from, to do\n            res = res\
    \ .. str:sub(i, i)\n        end\n        return res\n    end\n    local function\
    \ check_substr(substr)\n        return substr ~= \"\" and isalpha(substr:sub(1,\
    \ 1)) and count_digits(substr) <= 3\n    end\n    local dot_index = file_name:find(\"\
    .\")\n    if dot_index == nil then\n        return \"No\"\n    end\n    local\
    \ substr_1 = get_substr(file_name, 1, dot_index - 1)\n    local substr_2 = get_substr(file_name,\
    \ dot_index + 1, #file_name)\n    if not check_substr(substr_1) or not check_substr(substr_2)\
    \ then\n        return \"No\"\n    end\n    if not ends_with(substr_2, \"txt\"\
    ) and not ends_with(substr_2, \"exe\") and not ends_with(substr_2, \"dll\") then\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend", "  -- local file_name\
    \ = \"example.txt\"\n  -- local file_name = \"1example.dll\"\n  local count =\
    \ 0\n  local dot_pos\n  local sub_1, sub_2\n  for i = 1, string.len(file_name)\
    \ do\n    if string.byte(file_name, i) >= 48 and string.byte(file_name, i) <=\
    \ 57 then\n      count = count + 1\n    end\n    if string.byte(file_name, i)\
    \ == 46 then\n      dot_pos = i\n    end\n  end\n  sub_1 = string.sub(file_name,\
    \ 1, dot_pos - 1)\n  sub_2 = string.sub(file_name, dot_pos + 1, string.len(file_name))\n\
    \  if count > 3 then\n    return \"No\"\n  elseif string.byte(sub_1, 1) < 65 or\
    \ (string.byte(sub_1, 1) > 90 and string.byte(sub_1, 1) < 97) or string.byte(sub_1,\
    \ 1) > 122 then\n    return \"No\"\n  elseif sub_2 ~= \"txt\" and sub_2 ~= \"\
    exe\" and sub_2 ~= \"dll\" then\n    return \"No\"\n  else\n    return \"Yes\"\
    \n  end\nend\nprint(file_name_check(\"example.txt\"))\nprint(file_name_check(\"\
    1example.dll\"))", "    local _, count = string.gsub(file_name, \"%d\", \"\")\n\
    \    if count > 3 then\n        return 'No'\n    end\n    local before_dot, after_dot\
    \ = file_name:match(\"^(%a+%.?%a*)%.(%a+)$\")\n    if not before_dot or not after_dot\
    \ then\n        return 'No'\n    end\n    if after_dot ~= 'txt' and after_dot\
    \ ~= 'exe' and after_dot ~= 'dll' then\n        return 'No'\n    end\n    return\
    \ 'Yes'\nend", "\tlocal has_dot = false\n\tlocal count_digits = 0\n\tfor i = 1,\
    \ #file_name do\n\t\tlocal char = file_name:sub(i, i)\n\t\tif char == '.' then\n\
    \t\t\tif has_dot then\n\t\t\t\treturn 'No'\n\t\t\tend\n\t\t\thas_dot = true\n\t\
    \telseif char:match('%d') then\n\t\t\tcount_digits = count_digits + 1\n\t\tend\n\
    \tend\n\tif count_digits > 3 then\n\t\treturn 'No'\n\tend\n\tif has_dot then\n\
    \t\tlocal after_dot = file_name:match('%w+%.(%w+)')\n\t\tif after_dot == 'txt'\
    \ or after_dot == 'exe' or after_dot == 'dll' then\n\t\t\tlocal before_dot = file_name:match('(%w+)%.')\n\
    \t\t\tif before_dot then\n\t\t\t\treturn 'Yes'\n\t\t\tend\n\t\tend\n\tend\n\t\
    return 'No'\nend", "    return file_name:match(\"^[a-zA-Z]+%.(txt|exe|dll)$\"\
    ) and file_name:match(\"%d\") and #file_name:match(\"%d\") < 4 and #file_name:match(\"\
    %.\") == 1 and 'Yes' or 'No'\nend", "  -- TODO: Implement the task\nend", end,
  "    if not file_name then return 'No' end\n    local name, ext = file_name:match('^([%a%d%-]+)(%.%a+)$')\n\
    \    if not name or not ext then return 'No' end\n    local digits_count = #name:gsub('%D',\
    \ '')\n    if digits_count > 3 then return 'No' end\n    local valid_exts = {\n\
    \        [\"txt\"] = true,\n        [\"exe\"] = true,\n        [\"dll\"] = true,\n\
    \    }\n    if not valid_exts[ext:sub(2)] then return 'No' end\n    return 'Yes'\n\
    end", "\tlocal sub_before_dot = file_name:match(\"^[^%.]+\")\n\tlocal sub_after_dot\
    \ = file_name:match(\"[^%.]+$\")\n\t\n\tlocal number_count = (file_name:gsub(\"\
    %d\", \"\"))\n\tif #file_name - number_count > 3 then\n\t\treturn \"No\"\n\tend\n\
    \t\n\tif not file_name:match(\"%.\") then\n\t\treturn \"No\"\n\tend\n\t\n\tif\
    \ sub_before_dot == \"\" or not sub_before_dot:match(\"^[a-zA-Z]\") then\n\t\t\
    return \"No\"\n\tend\n\t\n\tif sub_after_dot ~= \"txt\" and sub_after_dot ~= \"\
    exe\" and sub_after_dot ~= \"dll\" then\n\t\treturn \"No\"\n\tend\n\t\n\treturn\
    \ \"Yes\"\nend", "\tlocal start_letter, end_letter, digits, letters, dot_occurence,\
    \ end_string = 0, 0, 0, 0, 0, \"\"\n\tfor letter in file_name:gmatch(\"%a\") do\n\
    \t\tletters = letters + 1\n\t\tstart_letter = start_letter + 1\n\tend\n\tfor num\
    \ in file_name:gmatch(\"%d\") do\n\t\tdigits = digits + 1\n\tend\n\tfor dot in\
    \ file_name:gmatch(\"%.\") do\n\t\tdot_occurence = dot_occurence + 1\n\tend\n\t\
    for char in file_name:gmatch(\"[%a%d]\") do\n\t\tend_letter = end_letter + 1\n\
    \tend\n\tend_string = file_name:sub(end_letter + 1)\n\tif start_letter == 0 or\
    \ letters == 0 or dot_occurence > 1 or digits > 3 or end_string ~= \"txt\" and\
    \ end_string ~= \"exe\" and end_string ~= \"dll\" then\n\t\treturn \"No\"\n\t\
    else\n\t\treturn \"Yes\"\n\tend\nend\nprint(file_name_check(\"example.txt\"))",
  "    -- Write your code here\n    --[[\n    if not file_name then return \"No\"\
    \ end\n    if file_name:len() < 5 then return \"No\" end\n    if not file_name:match(\"\
    ^[a-zA-Z]+[0-9]?[0-9]?[0-9]?%.[txt|exe|dll]$\") then return \"No\" end\n    return\
    \ \"Yes\"\n    --]]\n    if not file_name then return \"No\" end\n    local _,\
    \ count = file_name:gsub(\"%d\", \"\")\n    if count > 3 then return \"No\" end\n\
    \    local _, count = file_name:gsub(\"%.\", \"\")\n    if count ~= 1 then return\
    \ \"No\" end\n    local pre, post = file_name:match(\"^([^%.]+)%.([^%.]+)$\")\n\
    \    if not pre or not post then return \"No\" end\n    if pre:len() == 0 then\
    \ return \"No\" end\n    if not pre:match(\"^[a-zA-Z]+$\") then return \"No\"\
    \ end\n    if post ~= \"txt\" and post ~= \"exe\" and post ~= \"dll\" then return\
    \ \"No\" end\n    return \"Yes\"\nend", "  -- Write your code here\nend", "  \
    \  return (file_name:match(\"[%a]\") and file_name:match(\"[.]\") and (file_name:match(\"\
    [%d]\") ~= '0' and file_name:match(\"[%d]\") ~= '1' and file_name:match(\"[%d]\"\
    ) ~= '2' and file_name:match(\"[%d]\") ~= '3' and file_name:match(\"[%d]\") ~=\
    \ '4' and file_name:match(\"[%d]\") ~= '5' and file_name:match(\"[%d]\") ~= '6'\
    \ and file_name:match(\"[%d]\") ~= '7' and file_name:match(\"[%d]\") ~= '8' and\
    \ file_name:match(\"[%d]\") ~= '9') and file_name:sub(-3, -1) == 'txt' or file_name:sub(-3,\
    \ -1) == 'exe' or file_name:sub(-3, -1) == 'dll')\nend", "    local i = 1\n  \
    \  while i <= #file_name do\n        if file_name:sub(i, i) == '.' then\n    \
    \        if i < 2 then\n                return 'No'\n            end\n       \
    \     local j = i + 1\n            while j <= #file_name do\n                if\
    \ file_name:sub(j, j) == '.' then\n                    return 'No'\n         \
    \       end\n                j = j + 1\n            end\n            if i > 1\
    \ and file_name:sub(i + 1, i + 3) == 'txt' or\n                    file_name:sub(i\
    \ + 1, i + 3) == 'exe' or\n                    file_name:sub(i + 1, i + 3) ==\
    \ 'dll' then\n                return 'Yes'\n            else\n               \
    \ return 'No'\n            end\n        end\n        i = i + 1\n    end\n    return\
    \ 'No'\nend", "    if type(file_name) ~= \"string\" then\n        return \"No\"\
    \n    end\n    if file_name:match(\"^[a-zA-Z]\") then\n        local count = string.gsub(file_name,\
    \ \"%d\", \"\")\n        if count < 3 then\n            local c = file_name:match(\"\
    %.([a-zA-Z]+)\")\n            if c == \"txt\" or c == \"exe\" or c == \"dll\"\
    \ then\n                return \"Yes\"\n            end\n        end\n    end\n\
    \    return \"No\"\nend", end, "\treturn \"Not yet implemented\"\nend", "    --\
    \ code here\nend", "    local name,ext = file_name:match(\"^(.-)%.(.+)$\")\n \
    \   return name:match(\"%D\") and ext:match(\"^dll$\") and name:match(\"%d\")\
    \ and #name:match(\"%d\") < 4 and true and 'Yes' or 'No'\nend", "    local err\
    \ = 'No'\n    local i = 0\n    local index = 0\n    while i < string.len(file_name)\
    \ do\n        local char = string.sub(file_name, i + 1, i + 1)\n        if string.byte(char)\
    \ >= string.byte('0') and string.byte(char) <= string.byte('9') then\n       \
    \     err = 'No'\n            break\n        elseif char == '.' then\n       \
    \     index = i\n            err = 'Yes'\n        end\n        i = i + 1\n   \
    \ end\n    local ext = string.sub(file_name, index + 1, string.len(file_name))\n\
    \    if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        err = 'No'\n\
    \    end\n    return err\nend", "\tlocal alphapet_pattern = \"^[a-zA-Z]\"\n\t\
    local digit_pattern = \"%d\"\n\tlocal txt_pattern = \"txt$\"\n\tlocal exe_pattern\
    \ = \"exe$\"\n\tlocal dll_pattern = \"dll$\"\n\tlocal dot_pattern = \"%.\"\n\t\
    local check = 0\n\t\n\tlocal check_extension = function(extension)\n\t\tif extension\
    \ == \"txt\" then\n\t\t\treturn txt_pattern\n\t\telseif extension == \"exe\" then\n\
    \t\t\treturn exe_pattern\n\t\telseif extension == \"dll\" then\n\t\t\treturn dll_pattern\n\
    \t\tend\n\tend\n\t\n\tlocal valid_extension = function(extension)\n\t\treturn\
    \ string.match(extension, check_extension(extension))\n\tend\n\t\n\tlocal valid_name\
    \ = function(name)\n\t\treturn string.match(name, alphapet_pattern)\n\tend\n\t\
    \n\tlocal valid_digit = function(file_name)\n\t\tlocal digit_count = 0\n\t\tfor\
    \ i in string.gmatch(file_name, digit_pattern) do\n\t\t\tdigit_count = digit_count\
    \ + 1\n\t\tend\n\t\treturn digit_count\n\tend\n\t\n\tlocal valid_dot = function(file_name)\n\
    \t\tlocal dot_count = 0\n\t\tfor i in string.gmatch(file_name, dot_pattern) do\n\
    \t\t\tdot_count = dot_count + 1\n\t\tend\n\t\treturn dot_count\n\tend\n\t\n\t\
    local valid_filename = function(file_name)\n\t\tlocal extension = string.sub(file_name,\
    \ string.find(file_name, dot_pattern)+1)\n\t\tlocal name = string.sub(file_name,\
    \ 0, string.find(file_name, dot_pattern)-1)\n\t\tif valid_digit(file_name) > 3\
    \ then\n\t\t\treturn 0\n\t\telseif valid_dot(file_name) > 1 then\n\t\t\treturn\
    \ 0\n\t\telseif not valid_name(name) then\n\t\t\treturn 0\n\t\t", "    return\
    \ nil\nend", "    local dot_pos = string.find(file_name, '%.')\n    local extension\
    \ = string.sub(file_name, dot_pos + 1)\n    local file_name_without_extension\
    \ = string.sub(file_name, 1, dot_pos - 1)\n    local digit_cnt = string.len(file_name_without_extension)\
    \ - string.len(string.gsub(file_name_without_extension, '%d', ''))\n    if (digit_cnt\
    \ > 3) then\n        return 'No'\n    end\n    local digit_cnt = string.len(file_name)\
    \ - string.len(string.gsub(file_name, '%d', ''))\n    if (digit_cnt > 3) then\n\
    \        return 'No'\n    end\n    if (string.sub(file_name_without_extension,\
    \ 1, 1) < 'a' or string.sub(file_name_without_extension, 1, 1) > 'z') and\n  \
    \     (string.sub(file_name_without_extension, 1, 1) < 'A' or string.sub(file_name_without_extension,\
    \ 1, 1) > 'Z') then\n        return 'No'\n    end\n    if (extension ~= 'txt'\
    \ and extension ~= 'exe' and extension ~= 'dll') then\n        return 'No'\n \
    \   end\n    return 'Yes'\nend", "    if (string.match(file_name, \"%d%d%d\")\
    \ ~= nil) then return \"No\" end\n    if (string.match(file_name, \"^[a-zA-Z]\"\
    ) == nil) then return \"No\" end\n    if (string.match(file_name, \"%.%w%w%w$\"\
    ) == nil) then return \"No\" end\n    return \"Yes\"\nend", "  return ((#file_name:match(\"\
    ^[^%.]+\") < 4) and (file_name:match(\"^[a-zA-Z]+[^%.]+%.txt$\") \n  or file_name:match(\"\
    ^[a-zA-Z]+[^%.]+%.exe$\") or file_name:match(\"^[a-zA-Z]+[^%.]+%.dll$\"))) and\
    \ \"Yes\" or \"No\"\nend", "\t-- body\nend", "\t-- TODO: body\nend", "    if not\
    \ file_name then\n        return 'No'\n    end\n    if not file_name:match('^%a')\
    \ then\n        return 'No'\n    end\n    if not file_name:match('%.') then\n\
    \        return 'No'\n    end\n    if file_name:match('%.txt$') then\n       \
    \ return 'Yes'\n    end\n    if file_name:match('%.exe$') then\n        return\
    \ 'Yes'\n    end\n    if file_name:match('%.dll$') then\n        return 'Yes'\n\
    \    end\n    return 'No'\nend", "    local file_name_parts = file_name:split(\"\
    %.\")\n    local pre_dot = file_name_parts[1]\n    local post_dot = file_name_parts[2]\n\
    \    local not_valid_before_dot = not pre_dot:match(\"^[A-Za-z]\")\n    local\
    \ not_valid_after_dot = not (post_dot == \"txt\" or post_dot == \"exe\" or post_dot\
    \ == \"dll\")\n    local file_name_has_more_than_three_digits = file_name:len()\
    \ - file_name:gsub(\"%d\", \"\"):len() > 3\n    return not file_name_has_more_than_three_digits\
    \ and not not_valid_before_dot and not not_valid_after_dot and file_name:find(\"\
    %.\")\nend", "    local n = string.len(file_name)\n    local cnt = 0\n    local\
    \ ind = 0\n    for i = 1, n do\n        local c = string.sub(file_name, i, i)\n\
    \        if c == '.' then\n            ind = i\n        elseif string.find(c,\
    \ \"%d\") then\n            cnt = cnt + 1\n        end\n    end\n    local ext\
    \ = string.sub(file_name, ind + 1)\n    local name = string.sub(file_name, 1,\
    \ ind - 1)\n    if cnt > 3 or ind == 0 or name == \"\" or not string.find(name,\
    \ \"%a\")\n        or not (ext == \"txt\" or ext == \"exe\" or ext == \"dll\"\
    ) then\n        return \"No\"\n    end\n    return \"Yes\"\nend", "  return \"\
    No\"\nend", "  return (file_name:match(\"%d\") and file_name:match(\"%d\") > 3)\
    \ and \"No\" or \"Yes\"\nend", "\tlocal function check_number(s)\n\t\tlocal i\
    \ = 1\n\t\tlocal count = 0\n\t\twhile i <= #s do\n\t\t\tif s:sub(i, i) >= '0'\
    \ and s:sub(i, i) <= '9' then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\ti =\
    \ i + 1\n\t\tend\n\t\treturn count\n\tend\n\tlocal function check_dot(s)\n\t\t\
    local i = 1\n\t\tlocal count = 0\n\t\twhile i <= #s do\n\t\t\tif s:sub(i, i) ==\
    \ '.' then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\ti = i + 1\n\t\tend\n\t\
    \treturn count\n\tend\n\tlocal function check_alphapet(s)\n\t\tlocal i = 1\n\t\
    \tlocal count = 0\n\t\twhile i <= #s do\n\t\t\tif (s:sub(i, i) >= 'a' and s:sub(i,\
    \ i) <= 'z') or (s:sub(i, i) >= 'A' and s:sub(i, i) <= 'Z') then\n\t\t\t\tcount\
    \ = count + 1\n\t\t\tend\n\t\t\ti = i + 1\n\t\tend\n\t\treturn count\n\tend\n\t\
    local function check_type(s)\n\t\tlocal types = {'txt', 'exe', 'dll'}\n\t\tfor\
    \ _, v in ipairs(types) do\n\t\t\tif s == v then\n\t\t\t\treturn true\n\t\t\t\
    end\n\t\tend\n\t\treturn false\n\tend\n\tlocal pre, post = file_name:match(\"\
    (.+)%.(.+)\")\n\tif check_number(file_name) > 3 then\n\t\treturn 'No'\n\telseif\
    \ check_dot(file_name) ~= 1 then\n\t\treturn 'No'\n\telseif pre == nil or check_alphapet(pre)\
    \ < 1 then\n\t\treturn 'No'\n\telseif not check_type(post) then\n\t\treturn 'No'\n\
    \telse\n\t\treturn 'Yes'\n\t", "  local name_pattern = \"^[a-zA-Z][a-zA-Z0-9]*[^0-9][.][txt|exe|dll]$\"\
    \n  local number_of_digits = 0\n  for i = 1, string.len(file_name) do\n    if\
    \ (string.byte(file_name, i) >= 48 and string.byte(file_name, i) <= 57) then\n\
    \      number_of_digits = number_of_digits + 1\n    end\n  end\n  if (number_of_digits\
    \ <= 3 and string.match(file_name, name_pattern)) then\n    return \"Yes\"\n \
    \ else\n    return \"No\"\n  end\nend", "  local res = true\n  local first_dot_idx\
    \ = string.find(file_name, \"%.\")\n  local substr_before_dot = string.sub(file_name,\
    \ 1, first_dot_idx-1)\n  local substr_after_dot = string.sub(file_name, first_dot_idx+1)\n\
    \  local l = string.len(substr_before_dot)\n  local n = 0\n  local latin_alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  for i = 1, l do\n\
    \    local c = string.sub(substr_before_dot, i, i)\n    if (string.find(latin_alphabet,\
    \ c) == nil) then\n      res = false\n      break\n    end\n    if (string.find('0123456789',\
    \ c) ~= nil) then\n      n = n + 1\n    end\n  end\n  if (res and (n > 3)) then\n\
    \    res = false\n  end\n  local valid_extensions = {'txt', 'exe', 'dll'}\n  if\
    \ (res and (l < 1)) then\n    res = false\n  end\n  local extension_found = false\n\
    \  for _, ext in ipairs(valid_extensions) do\n    if (substr_after_dot == ext)\
    \ then\n      extension_found = true\n      break\n    end\n  end\n  if (res and\
    \ (not extension_found)) then\n    res = false\n  end\n  return res and 'Yes'\
    \ or 'No'\nend", "\tlocal n, ndot, nnum = 0, 0, 0\n\tlocal ext = {}\n\tfor c in\
    \ file_name:gmatch('.') do\n\t\tn = n + 1\n\t\tif c == '.' then\n\t\t\tndot =\
    \ ndot + 1\n\t\t\tn = 0\n\t\telseif c:match('%d') then\n\t\t\tnnum = nnum + 1\n\
    \t\telseif n == 1 then\n\t\t\tif not c:match('%a') then\n\t\t\t\treturn 'No'\n\
    \t\t\tend\n\t\tend\n\t\tif ndot == 1 and n ~= 0 then\n\t\t\text[n] = c\n\t\tend\n\
    \tend\n\tif not ext[1] or ndot ~= 1 or nnum > 3 then\n\t\treturn 'No'\n\tend\n\
    \tlocal exts = {'txt', 'exe', 'dll'}\n\tfor _, e in ipairs(exts) do\n\t\tif table.concat(ext)\
    \ == e then\n\t\t\treturn 'Yes'\n\t\tend\n\tend\n\treturn 'No'\nend", "    if\
    \ file_name:match(\"%d%d%d\") then\n        return \"No\"\n    end\n    local\
    \ before_dot, after_dot = file_name:match(\"(.*)%.(.*)\")\n    if before_dot:match(\"\
    %a\") == nil then\n        return \"No\"\n    end\n    if after_dot == \"txt\"\
    \ or after_dot == \"exe\" or after_dot == \"dll\" then\n        return \"Yes\"\
    \n    end\n    return \"No\"\nend", "\t-- use pattern matching\n\tlocal pattern\
    \ = \"^[a-zA-Z][a-zA-Z0-9]*.[txt,exe,dll]$\"\n\tlocal res = string.match(file_name,\
    \ pattern)\n\tif res then\n\t\treturn \"Yes\"\n\telse\n\t\treturn \"No\"\n\tend\n\
    end", "    return false\nend", "\nend", "\nend", "    -- TODO: Write your code\
    \ here\n    return 'Yes'\nend", "    -- put your code here\n    if file_name:match(\"\
    %d\") == nil then\n        if file_name:match(\"%a%.\") then\n            if file_name:match(\"\
    %a%a%a\") then\n                if file_name:match(\"txt\") or file_name:match(\"\
    exe\") or file_name:match(\"dll\") then\n                    return \"Yes\"\n\
    \                end\n            end\n        end\n    end\n    return \"No\"\
    \nend", "  local s, e = string.find(file_name, '%a+%.%a+')\n  local ext = {txt=true,\
    \ exe=true, dll=true}\n  if s ~= 1 or (not ext[string.sub(file_name, e+1, -1)])\
    \ then\n    return 'No'\n  end\n  return string.find(file_name, '%d%d%d') and\
    \ 'No' or 'Yes'\nend", "\treturn nil\nend", "    local file_name_len = #file_name\n\
    \    local digits = 0\n    local dot_count = 0\n    local letters = 0\n    local\
    \ l = 0\n    for i = 1, file_name_len do\n        local c = file_name:sub(i, i)\n\
    \        if c >= '0' and c <= '9' then\n            digits = digits + 1\n    \
    \    elseif c == '.' then\n            dot_count = dot_count + 1\n        elseif\
    \ (c >= 'a' and c <= 'z') or (c >= 'A' and c <= 'Z') then\n            l = l +\
    \ 1\n            letters = letters + 1\n        end\n    end\n    if letters ==\
    \ 0 or digits > 3 or dot_count ~= 1 then\n        return 'No'\n    end\n    local\
    \ before_dot = file_name:sub(1, l)\n    local after_dot = file_name:sub(l + 2,\
    \ file_name_len)\n    if after_dot == 'txt' or after_dot == 'exe' or after_dot\
    \ == 'dll' then\n        return 'Yes'\n    end\n    return 'No'\nend", "    return\
    \ file_name:match(\"%a[%w_]*%.[a-z]*\") and file_name:match(\"%d\") and file_name:match(\"\
    %d%d%d\") and 'No' or 'Yes'\nend", "\t-- Your code goes here.\nend", "    if file_name:match('^[a-zA-Z][a-zA-Z%d]*%.txt$')\
    \ \n        or file_name:match('^[a-zA-Z][a-zA-Z%d]*%.exe$') \n        or file_name:match('^[a-zA-Z][a-zA-Z%d]*%.dll$')\
    \ then\n        return 'Yes'\n    else\n        return 'No'\n    end\nend", "\t\
    local start = file_name:match(\"^%a\")\n\tlocal count = file_name:gsub(\"%d\"\
    ,\"\")\n\tlocal dot = file_name:match(\"%.(%a+)$\")\n\tif start == nil or count:len()\
    \ < file_name:len() - 3 or dot == nil or (dot ~= \"txt\" and dot ~= \"exe\" and\
    \ dot ~= \"dll\") then\n\t\treturn \"No\"\n\telse\n\t\treturn \"Yes\"\n\tend\n\
    end", "\t-- TODO: Write your code here\n\t-- split file_name into two parts at\
    \ the dot character\n\t-- check that the first part has only latin alphapet letters\n\
    \t-- check that the second part is in one of [\"txt\", \"exe\", \"dll\"]\n\t--\
    \ check that there are at most 3 digits in the file_name\n\t-- return \"Yes\"\
    \ if all checks are positive, otherwise return \"No\"\nend", end, "\tif type(file_name)\
    \ ~= \"string\" then\n\t\treturn \"No\"\n\tend\n\t\n\tlocal count = 0\n\tlocal\
    \ dot = false\n\tlocal part1 = \"\"\n\tlocal part2 = \"\"\n\tfor i = 1, #file_name\
    \ do\n\t\tlocal c = file_name:sub(i, i)\n\t\tif c == \".\" then\n\t\t\tif dot\
    \ then\n\t\t\t\treturn \"No\"\n\t\t\tend\n\t\t\tdot = true\n\t\telseif string.match(c,\
    \ \"%d\") then\n\t\t\tcount = count + 1\n\t\t\tif count > 3 then\n\t\t\t\treturn\
    \ \"No\"\n\t\t\tend\n\t\telseif string.match(c, \"%a\") then\n\t\t\tif dot then\n\
    \t\t\t\tpart2 = part2 .. c\n\t\t\telse\n\t\t\t\tpart1 = part1 .. c\n\t\t\tend\n\
    \t\telse\n\t\t\treturn \"No\"\n\t\tend\n\tend\n\t\n\tif part1 == \"\" or not dot\
    \ or part2 == \"\" then\n\t\treturn \"No\"\n\tend\n\t\n\tif part2 == \"txt\" or\
    \ part2 == \"exe\" or part2 == \"dll\" then\n\t\treturn \"Yes\"\n\tend\n\t\n\t\
    return \"No\"\nend", "    local count = 0\n    local dot = 0\n    local ext =\
    \ false\n    local start = false\n    local finish = false\n    local check =\
    \ ''\n    for i = 1, #file_name do\n        if count < 3 then\n            if\
    \ file_name:sub(i, i) >= '0' and file_name:sub(i, i) <= '9' then\n           \
    \     count = count + 1\n            end\n        end\n        if file_name:sub(i,\
    \ i) == '.' then\n            dot = dot + 1\n        end\n        if i >= 2 and\
    \ dot > 0 then\n            if not ext then\n                check = check ..\
    \ file_name:sub(i, i)\n                if file_name:sub(i, i) == 't' then\n  \
    \                  ext = true\n                end\n            elseif ext then\n\
    \                check = check .. file_name:sub(i, i)\n                if check\
    \ == 'txt' or check == 'exe' or check == 'dll' then\n                    finish\
    \ = true\n                end\n            end\n        end\n        if dot ==\
    \ 0 then\n            if not start then\n                if (file_name:sub(i,\
    \ i) >= 'a' and file_name:sub(i, i) <= 'z') or (file_name:sub(i, i) >= 'A' and\
    \ file_name:sub(i, i) <= 'Z') then\n                    start = true\n       \
    \         end\n            end\n        end\n    end\n    if count <= 3 and dot\
    \ == 1 and start and finish then\n        return 'Yes'\n    else\n        return\
    \ 'No'\n    end\nend", "    -- body\nend", "    return file_name\nend", "  local\
    \ no, dot, ext = 0, false, ''\n  for c in file_name:gmatch('.') do\n    if c:match('%d')\
    \ then\n      no = no + 1\n    elseif c == '.' then\n      dot = true\n    elseif\
    \ dot then\n      ext = ext .. c\n    end\n  end\n  if no > 3 or not dot or not\
    \ file_name:match('^[%a]') or not ext:match('^txt$|^exe$|^dll$') then\n    return\
    \ 'No'\n  end\n  return 'Yes'\nend", "    local count = 0\n    local dot = 0\n\
    \    for c in file_name:gmatch\".\" do\n        if c:find\"[0-9]\" then\n    \
    \        count = count + 1\n        elseif c == \".\" then\n            dot =\
    \ dot + 1\n        end\n    end\n    if count > 3 or dot ~= 1 then\n        return\
    \ \"No\"\n    end\n    if file_name:match\"^[a-zA-Z]+%.[a-zA-Z]+$\" then\n   \
    \     local ext = file_name:match\"%.[a-zA-Z]+$\"\n        if ext == \".txt\"\
    \ or ext == \".exe\" or ext == \".dll\" then\n            return \"Yes\"\n   \
    \     end\n    end\n    return \"No\"\nend", "\tfile_name = file_name:lower()\n\
    \tif file_name:match(\"[a-z0-9]%.txt\") or file_name:match(\"[a-z0-9]%.exe\")\
    \ or file_name:match(\"[a-z0-9]%.dll\") then\n\t\tif file_name:match(\"%d\") and\
    \ #file_name:match(\"%d\") > 3 then\n\t\t\treturn \"No\"\n\t\telse\n\t\t\treturn\
    \ \"Yes\"\n\t\tend\n\telse\n\t\treturn \"No\"\n\tend\nend", "    return \"\"\n\
    end", "  local i, j = string.find(file_name, \".\")\n  if not i then return \"\
    No\" end\n  local file_name_start = string.sub(file_name, 1, i - 1)\n  local file_name_end\
    \ = string.sub(file_name, j + 1)\n  local k = string.find(file_name_start, \"\
    %d\")\n  if k and k <= 3 then return \"No\" end\n  if string.find(file_name_start,\
    \ \"%l\") ~= 1 then return \"No\" end\n  if file_name_end ~= \"txt\" and file_name_end\
    \ ~= \"exe\" and file_name_end ~= \"dll\" then\n    return \"No\"\n  end\n  return\
    \ \"Yes\"\nend", "\nend", "    -- Check if the file's name is valid or not.\n\
    end", end, "  -- YOUR CODE HERE\nend", "    -- your code here\n    local num =\
    \ string.match(file_name, \"[0-9]+\")\n    if num ~= nil and #num > 3 then return\
    \ \"No\" end\n    local dot = string.match(file_name, \"%.\")\n    if dot == nil\
    \ then return \"No\" end\n    local prefix = string.match(file_name, \"%a+%.\"\
    )\n    if prefix == nil then return \"No\" end\n    local suffix = string.match(file_name,\
    \ \"%..+\")\n    if suffix == nil then return \"No\" end\n    if suffix ~= \"\
    .txt\" and suffix ~= \".exe\" and suffix ~= \".dll\" then return \"No\" end\n\
    \    return \"Yes\"\nend", "    return 'Yes'\nend", "    -- TODO\nend", "\treturn\
    \ true\nend", end, "\t-- TODO: implement here\n\tlocal index_dot, index_end =\
    \ string.find(file_name, '.', 1, true)\n\tif string.len(file_name) ~= index_end\
    \ then\n\t\treturn 'No'\n\tend\n\tlocal no_digits = tonumber(string.match(file_name,\
    \ '[0-9]+'))\n\tif no_digits and no_digits > 3 then\n\t\treturn 'No'\n\tend\n\t\
    local extension = string.sub(file_name, index_dot+1)\n\tif extension ~= 'txt'\
    \ and extension ~= 'exe' and extension ~= 'dll' then\n\t\treturn 'No'\n\tend\n\
    \tlocal sub_file_name = string.sub(file_name, 1, index_dot-1)\n\tlocal first_letter\
    \ = string.sub(sub_file_name, 1, 1)\n\tif sub_file_name == '' or string.match(first_letter,\
    \ '[^a-zA-Z]') then\n\t\treturn 'No'\n\tend\n\treturn 'Yes'\nend", "  return file_name:match(\"\
    ^[a-zA-Z][%a%d_]*%.(txt|exe|dll)$\") and \"Yes\" or \"No\"\nend", end, "    --\
    \ your code here\n    -- return 'Yes' or 'No'\nend", "    -- your code here\n\
    end", "  return file_name:match(\"^[%a]%w*%.(%w+)$\") and not file_name:match(\"\
    %d%d%d\") and {'txt', 'exe', 'dll'}[file_name:match(\"^[%a]%w*%.(%w+)$\")] and\
    \ 'Yes' or 'No'\nend", "    if not file_name:match(\"^[a-zA-Z]\") then\n     \
    \   return \"No\"\n    end\n    if file_name:match(\"[0-9][0-9][0-9]\") then\n\
    \        return \"No\"\n    end\n    if not file_name:match(\"^[a-zA-Z]+[0-9a-zA-Z]*%.([a-zA-Z]+$)\"\
    ) then\n        return \"No\"\n    end\n    local file_type = file_name:match(\"\
    [a-zA-Z]+[0-9a-zA-Z]*%.([a-zA-Z]+$)\")\n    if file_type ~= \"txt\" and file_type\
    \ ~= \"exe\" and file_type ~= \"dll\" then\n        return \"No\"\n    end\n \
    \   return \"Yes\"\nend", "  -- TODO\nend", "    local first, second = file_name:match(\"\
    (.+)%.(.+)\")\n    if #first > 0 and first:match(\"^[a-zA-Z]\") and #second >\
    \ 0 and \n        (second == \"txt\" or second == \"exe\" or second == \"dll\"\
    ) and\n        file_name:match(\"%d%d%d\") == nil then\n        return \"Yes\"\
    \n    end\n    return \"No\"\nend", "  -- Write your code here\nend", end, " \
    \ return 'Your implementation'\nend", "    -- your code here\nend", "\tif not\
    \ file_name:match(\"^%a[%w]*%.txt$\")\n\tand not file_name:match(\"^%a[%w]*%.exe$\"\
    )\n\tand not file_name:match(\"^%a[%w]*%.dll$\") then\n\t\treturn \"No\"\n\tend\n\
    \t\n\tlocal c = file_name:gsub(\"%d\", \"\")\n\tif file_name:len() - c:len() >\
    \ 3 then\n\t\treturn \"No\"\n\tend\n\t\n\tlocal c = file_name:gsub(\"[^%.]\",\
    \ \"\")\n\tif c:len() ~= 1 then\n\t\treturn \"No\"\n\tend\n\t\n\treturn \"Yes\"\
    \nend", "  -- your code here\n  local str = file_name\n  local dot = string.find(str,\
    \ \"%.\")\n  local count = 0\n  for i = 1, #str do\n    if tonumber(str:sub(i,\
    \ i)) ~= nil then\n      count = count + 1\n    end\n  end\n  local before_dot\
    \ = str:sub(1, dot - 1)\n  local after_dot = str:sub(dot + 1, #str)\n  local alphapet\
    \ = string.find(before_dot, \"[a-zA-Z]\")\n  if count > 3 then\n    return \"\
    No\"\n  elseif dot == nil then\n    return \"No\"\n  elseif alphapet == nil then\n\
    \    return \"No\"\n  elseif after_dot ~= \"txt\" and after_dot ~= \"exe\" and\
    \ after_dot ~= \"dll\" then\n    return \"No\"\n  else\n    return \"Yes\"\n \
    \ end\nend", "  if (nil == file_name) then\n    return nil\n  end\n  --[[\n  local\
    \ pattern = \"(^[a-zA-Z][a-zA-Z0-9]*)(%d*)(%.)(txt|exe|dll)$\"\n  local match\
    \ = string.match(file_name, pattern)\n  if (nil == match) then\n    return \"\
    No\"\n  end\n  if (match[2] == \"\") then\n    return \"Yes\"\n  end\n  local\
    \ count = string.len(match[2])\n  if (count > 3) then\n    return \"No\"\n  end\n\
    \  return \"Yes\"\n  --]]\n  local pattern = \"^[a-zA-Z][a-zA-Z0-9]*(%d*)%.(txt|exe|dll)$\"\
    \n  local match = string.match(file_name, pattern)\n  if (nil == match) then\n\
    \    return \"No\"\n  end\n  if (match == \"\") then\n    return \"Yes\"\n  end\n\
    \  local count = string.len(match)\n  if (count > 3) then\n    return \"No\"\n\
    \  end\n  return \"Yes\"\nend", "    local dot_pos = string.find(file_name, '%.')\n\
    \    if not dot_pos then return 'No' end\n    local prefix = string.sub(file_name,\
    \ 1, dot_pos - 1)\n    local suffix = string.sub(file_name, dot_pos + 1)\n   \
    \ local m1 = string.match(prefix, '^[a-zA-Z]')\n    local m2 = string.match(prefix,\
    \ '%d%d%d')\n    local m3 = suffix == 'txt' or suffix == 'exe' or suffix == 'dll'\n\
    \    return (m1 and not m2 and m3) and 'Yes' or 'No'\nend", "\t-- your code goes\
    \ here\nend", "    local before_dot = {}\n    local after_dot = {}\n    local\
    \ has_three_digits = 0\n    local dot_counter = 0\n    local after_dot_values\
    \ = {'txt', 'exe', 'dll'}\n    local before_dot_values = {}\n    local valid_before_dot\
    \ = false\n    local valid_after_dot = false\n    for i=97,122 do table.insert(before_dot_values,\
    \ string.char(i)) end\n    for i=65,90 do table.insert(before_dot_values, string.char(i))\
    \ end\n    for i=48,57 do table.insert(before_dot_values, string.char(i)) end\n\
    \    for i=1,#file_name do\n        if file_name:sub(i,i) == '.' then\n      \
    \      dot_counter = dot_counter + 1\n        elseif file_name:sub(i,i) ~= '.'\
    \ then\n            if not before_dot[#before_dot] then\n                table.insert(before_dot,\
    \ file_name:sub(i,i))\n            elseif before_dot[#before_dot] == '.' then\n\
    \                table.insert(after_dot, file_name:sub(i,i))\n            end\n\
    \        end\n    end\n    if dot_counter == 1 then\n        for i=1,#before_dot\
    \ do\n            for j=1,#before_dot_values do\n                if before_dot[i]\
    \ == before_dot_values[j] then\n                    valid_before_dot = true\n\
    \                end\n            end\n        end\n        for i=1,#after_dot\
    \ do\n            for j=1,#after_dot_values do\n                if table.concat(after_dot)\
    \ == after_dot_values[j] then\n                    valid_after_dot = true\n  \
    \              end\n            end\n        end\n    end\n    if #before_dot\
    \ > 3 then\n        has_three_digits = 1\n    end\n    if valid_before_dot and\
    \ valid_after_dot and has_three_digits == 0 then\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend", "    -- TODO: your code here\nend", "\nend",
  "    -- Write your code here\n    return \"Yes\"\nend", "    -- Your code here\n\
    \    return nil\nend", "    -- write your code here\nend", end, "\tlocal A, B,\
    \ C = file_name:match(\"(%a-)(%d*)(%.%a*)\")\n\tlocal d = C:match(\"%.(%a*)\"\
    )\n\tif #B > 3 or B == \"\" or C == \"\" or d ~= \"txt\" and d ~= \"exe\" and\
    \ d ~= \"dll\" then\n\t\treturn \"No\"\n\telse\n\t\treturn \"Yes\"\n\tend\nend",
  "  if not file_name:match(\"^[a-zA-Z][^%d.]*%.(txt|exe|dll)$\") then return \"No\"\
    \ end\n  if file_name:match(\"%d\") and file_name:match(\"%d\") > 3 then return\
    \ \"No\" end\n  return \"Yes\"\nend", "\treturn (file_name:gsub(\"%d\", \"\"):gsub(\"\
    ^[%w]*%.%w*$\", \"Yes\"):gsub(\"^.*$\", \"No\"))\nend", "  -- YOUR CODE HERE\n\
    \  local s,num,t,i=0,0,0,1\n  if file_name==\"\" then\n    return \"No\"\n  end\n\
    \  for a in string.gmatch(file_name,\"%.\") do\n    s=s+1\n  end\n  if s~=1 then\n\
    \    return \"No\"\n  end\n  for a in string.gmatch(file_name,\"%d\") do\n   \
    \ num=num+1\n  end\n  if num>3 then\n    return \"No\"\n  end\n  while true do\n\
    \    i=string.find(file_name,\"%.\",i+1)\n    if i==nil then\n      break\n  \
    \  end\n    t=i\n  end\n  s=string.sub(file_name,1,t-1)\n  if not s:match(\"%a\"\
    ) then\n    return \"No\"\n  end\n  s=string.sub(file_name,t+1)\n  if s~=\"txt\"\
    \ and s~=\"exe\" and s~=\"dll\" then\n    return \"No\"\n  end\n  return \"Yes\"\
    \nend", "\treturn nil\nend", "  -- your code here\nend", "  -- TODO: implement\
    \ this function\nend", "    return false\nend", "  local dot_flag, digit_count\
    \ = false, 0\n  for c in file_name:gmatch(\"%w\") do\n    if c:match(\"%d\") then\n\
    \      digit_count = digit_count + 1\n    elseif c == \".\" then\n      dot_flag\
    \ = true\n    end\n  end\n  local prefix, suffix = file_name:match(\"^(%w+)%.(%w+)$\"\
    )\n  return not (digit_count > 3 or not dot_flag or not prefix or\n    (not suffix:match(\"\
    ^txt$\") and not suffix:match(\"^exe$\") and not suffix:match(\"^dll$\"))) and\
    \ \"Yes\" or \"No\"\nend", "    local filename = file_name:sub(1, file_name:find('.')\
    \ - 1)\n    local fileext = file_name:sub(file_name:find('.') + 1)\n    return\
    \ fileext == 'txt' or fileext == 'exe' or fileext == 'dll' and \n        file_name:find('%.')\
    \ and filename:match('^[a-zA-Z]') and not filename:match('%d%d%d')\n        and\
    \ #filename > 0 and #fileext > 0 and #file_name == #filename + #fileext + 1\n\
    \        and not filename:match('%d%d%d') and filename:match('%a+') and fileext:match('%a+')\n\
    end\nassert(file_name_check(\"example.txt\") == true)\nassert(file_name_check(\"\
    1example.dll\") == false)\nassert(file_name_check(\"example.txt\") == true)\n\
    assert(file_name_check(\"exampletxt\") == false)\nassert(file_name_check(\"1example.dll\"\
    ) == false)\nassert(file_name_check(\"example.txt\") == true)\nassert(file_name_check(\"\
    example.exe\") == true)\nassert(file_name_check(\"1example.ex1\") == false)\n\
    assert(file_name_check(\"example.ex1\") == false)\nassert(file_name_check(\"example.tXt\"\
    ) == false)\nassert(file_name_check(\"example.tx\") == false)\nassert(file_name_check(\"\
    example.txtt\") == false)\nassert(file_name_check(\"example.t\") == false)\nassert(file_name_check(\"\
    example.\") == false)\nassert(file_name_check(\"example\") == false)\nassert(file_name_check(\"\
    example.tx2\") == false)\nassert(file_name_check(\"example.tx3\") == false)\n\
    assert(file_name_check(\"example.tx4\") == false)\nassert(file_name_check(\"example.tx5\"\
    ) == false)\nassert(file_name_check(\"example.tx6\") == false)\nassert(file_name_check(\"",
  "    local count = 0\n    local _, pos = file_name:find(\"%.\")\n    if not pos\
    \ then\n        return \"No\"\n    end\n    local prefix = file_name:sub(1, pos\
    \ - 1)\n    if not prefix:match(\"^[a-zA-Z]\") then\n        return \"No\"\n \
    \   end\n    local postfix = file_name:sub(pos + 1)\n    if not postfix:match(\"\
    ^txt$\") and not postfix:match(\"^exe$\") and not postfix:match(\"^dll$\") then\n\
    \        return \"No\"\n    end\n    for i in file_name:gmatch(\"%d\") do\n  \
    \      count = count + 1\n    end\n    if count > 3 then\n        return \"No\"\
    \n    end\n    return \"Yes\"\nend", "  -- write your code here\nend", "    return\
    \ 'Yes'\nend", "  if #file_name < 5 then\n    return 'No'\n  end\n  local n, i\
    \ = 0, 0\n  while i < #file_name do\n    if file_name:byte(i) >= 48 and file_name:byte(i)\
    \ <= 57 then\n      n = n + 1\n    end\n    i = i + 1\n  end\n  if n > 3 then\n\
    \    return 'No'\n  end\n  i = 1\n  while i < #file_name do\n    if file_name:byte(i)\
    \ == 46 then\n      if file_name:sub(i + 1, i + 3) == 'txt' or file_name:sub(i\
    \ + 1, i + 3) == 'exe' or file_name:sub(i + 1, i + 3) == 'dll' then\n        return\
    \ 'Yes'\n      else\n        return 'No'\n      end\n    end\n    i = i + 1\n\
    \  end\n  return 'No'\nend", "    -- your code here\n    if file_name then\n \
    \       local dot = string.find(file_name,\"%.\")\n        local s_before_dot\
    \ = string.sub(file_name,1,dot-1)\n        local s_after_dot = string.sub(file_name,dot+1)\n\
    \        local t = {}\n        for i = 1,#s_before_dot do\n            table.insert(t,string.byte(s_before_dot,i))\n\
    \        end\n        local count = 0\n        for i = 1,#t do\n            if\
    \ t[i]>=48 and t[i]<=57 then\n                count = count + 1\n            end\n\
    \        end\n        if count>3 then\n            return \"No\"\n        end\n\
    \        if string.find(s_before_dot,\"%d\")==1 then\n            return \"No\"\
    \n        end\n        if s_after_dot~=\"txt\" and s_after_dot~=\"exe\" and s_after_dot~=\"\
    dll\" then\n            return \"No\"\n        end\n        return \"Yes\"\n \
    \   end\nend", "\tlocal f_name, extension = file_name:match(\"^([%a]%w*)%.([%a]%w*)$\"\
    )\n\tlocal digit_count = file_name:gsub(\"%D\", \"\"):len()\n\tif not f_name or\
    \ not extension or digit_count > 3 or not extenion:match(\"^(txt|exe|dll)$\")\
    \ then\n\t\treturn \"No\"\n\tend\n\treturn \"Yes\"\nend", "  -- write your code\
    \ here\n  return \"\"\nend", "\nend", "    local main_part, extension = file_name:match('(%a+%.?%a*)(%..+)')\n\
    \    local digits = file_name:match('%d+')\n    if digits and #digits > 3 then\n\
    \        return 'No'\n    end\n    if not main_part then\n        return 'No'\n\
    \    end\n    if not extension then\n        return 'No'\n    end\n    if not\
    \ main_part:match('^%a') then\n        return 'No'\n    end\n    if extension\
    \ == '.txt' or extension == '.exe' or extension == '.dll' then\n        return\
    \ 'Yes'\n    end\n    return 'No'\nend", end, "\tlocal a,b,c,d,e = string.match(file_name,\
    \ \"^(%a+)%.(%a+)$\")\n\tif (a and b and c and d and e) then\n\t\tif (string.len(a)\
    \ > 0 and string.len(a) < 5 and\n\t\t\tstring.len(c) == 0 and string.len(d) ==\
    \ 0 and string.len(e) == 0) then\n\t\t\tif (b == \"txt\" or b == \"exe\" or b\
    \ == \"dll\") then\n\t\t\t\treturn \"Yes\"\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ \"No\"\nend", "    if file_name:match(\"%d\") then\n        return \"No\"\n\
    \    end\n    if file_name:match(\"%..txt\") then\n        return \"Yes\"\n  \
    \  end\n    if file_name:match(\"%..exe\") then\n        return \"Yes\"\n    end\n\
    \    if file_name:match(\"%..dll\") then\n        return \"Yes\"\n    end\n  \
    \  return \"No\"\nend", "    -- Write your code here ...\n    local no_digits_len,\
    \ num_digits, dot_index = #file_name, 0, 0\n    for i=1, no_digits_len do\n  \
    \      if tonumber(file_name:sub(i,i)) ~= nil then\n            num_digits = num_digits\
    \ + 1\n        elseif file_name:sub(i,i) == '.' then\n            dot_index =\
    \ i\n        end\n    end\n    if num_digits > 3 then\n        return 'No'\n \
    \   end\n    local before_dot = file_name:sub(1, dot_index-1)\n    local after_dot\
    \ = file_name:sub(dot_index+1, no_digits_len)\n    if #before_dot == 0 or \n \
    \       (string.lower(before_dot:sub(1,1)) < 'a' or string.lower(before_dot:sub(1,1))\
    \ > 'z') then\n        return 'No'\n    end\n    if after_dot ~= 'txt' and after_dot\
    \ ~= 'exe' and after_dot ~= 'dll' then\n        return 'No'\n    end\n    return\
    \ 'Yes'\nend", "\nend", "  local point = file_name:find('.')\n  if point == nil\
    \ then\n    return 'No'\n  end\n  local s1 = file_name:sub(1, point - 1)\n  local\
    \ s2 = file_name:sub(point + 1)\n  local i = 1\n  while i <= s1:len() do\n   \
    \ if s1:sub(i, i) >= '0' and s1:sub(i, i) <= '9' then\n      return 'No'\n   \
    \ end\n    i = i + 1\n  end\n  if (s2 ~= 'txt' and s2 ~= 'exe' and s2 ~= 'dll')\
    \ then\n    return 'No'\n  end\n  return 'Yes'\nend", end, "    local nums = 0\n\
    \    local dot = false\n    local txt = false\n    local exe = false\n    local\
    \ dll = false\n    for i=1,#file_name do\n        if file_name:sub(i,i) == '.'\
    \ then\n            dot = true\n        elseif file_name:sub(i,i) >= '0' and file_name:sub(i,i)\
    \ <= '9' then\n            nums = nums + 1\n        elseif file_name:sub(i,i)\
    \ >= 'a' and file_name:sub(i,i) <= 'z' then\n            if i == #file_name then\n\
    \                txt = true\n            elseif file_name:sub(i+1,i+1) == '.'\
    \ then\n                if file_name:sub(i+2,i+2) == 't' and file_name:sub(i+3,i+3)\
    \ == 'x' and file_name:sub(i+4,i+4) == 't' then\n                    txt = true\n\
    \                elseif file_name:sub(i+2,i+2) == 'e' and file_name:sub(i+3,i+3)\
    \ == 'x' and file_name:sub(i+4,i+4) == 'e' then\n                    exe = true\n\
    \                elseif file_name:sub(i+2,i+2) == 'd' and file_name:sub(i+3,i+3)\
    \ == 'l' and file_name:sub(i+4,i+4) == 'l' then\n                    dll = true\n\
    \                end\n            end\n        elseif file_name:sub(i,i) >= 'A'\
    \ and file_name:sub(i,i) <= 'Z' then\n            if i == #file_name then\n  \
    \              txt = true\n            elseif file_name:sub(i+1,i+1) == '.' then\n\
    \                if file_name:sub(i+2,i+2) == 't' and file_name:sub(i+3,i+3) ==\
    \ 'x' and file_name:sub(i+4,", "\tif not file_name then return 'No' end\n\tlocal\
    \ count = 0\n\tlocal s, e = file_name:find(\"%d\")\n\twhile s do\n\t\tcount =\
    \ count + 1\n\t\tif count > 3 then return 'No' end\n\t\ts, e = file_name:find(\"\
    %d\", e + 1)\n\tend\n\ts, e = file_name:find(\"%.%a+$\")\n\tif not s then return\
    \ 'No' end\n\tif s < 2 then return 'No' end\n\tlocal file_type = file_name:sub(e\
    \ + 1, -1)\n\tif file_type ~= 'txt' and file_type ~= 'exe' and file_type ~= 'dll'\
    \ then return 'No' end\n\treturn 'Yes'\nend", "  if file_name:match(\"^[a-zA-Z]\"\
    ) and file_name:match(\"[^%d]+%.(txt|exe|dll)$\") then\n    return 'Yes'\n  else\n\
    \    return 'No'\n  end\nend", "    -- TODO: Your implementation here\nend", " \
    \ local dot_at = file_name:find(\"%.\")\n  if dot_at == nil then\n    return 'No'\n\
    \  end\n  local prefix = file_name:sub(1, dot_at - 1)\n  local suffix = file_name:sub(dot_at\
    \ + 1)\n  if prefix:find(\"%d\") ~= nil or\n     prefix:find(\"^%a%a*$\") == nil\
    \ or\n     suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then\n    return\
    \ 'No'\n  end\n  local count = 0\n  for i = 1, prefix:len() do\n    if prefix:sub(i,\
    \ i) >= '0' and prefix:sub(i, i) <= '9' then\n      count = count + 1\n    end\n\
    \  end\n  if count > 3 then\n    return 'No'\n  end\n  return 'Yes'\nend", " \
    \ local has_dot = false\n  local before_dot = \"\"\n  local after_dot = \"\"\n\
    \  local prev_char = ''\n  local digit_count = 0\n  for i = 1, #file_name do\n\
    \    local char = file_name:sub(i, i)\n    if char == '.' then\n      if has_dot\
    \ then\n        return 'No'\n      end\n      has_dot = true\n    elseif has_dot\
    \ then\n      after_dot = after_dot .. char\n    else\n      if char >= '0' and\
    \ char <= '9' then\n        digit_count = digit_count + 1\n        if digit_count\
    \ > 3 then\n          return 'No'\n        end\n      end\n      if prev_char\
    \ == '' and not (char >= 'a' and char <= 'z' or char >= 'A' and char <= 'Z') then\n\
    \        return 'No'\n      end\n      before_dot = before_dot .. char\n    end\n\
    \    prev_char = char\n  end\n  if not has_dot or before_dot == '' or\n     not\
    \ (after_dot == 'txt' or after_dot == 'exe' or after_dot == 'dll') then\n    return\
    \ 'No'\n  end\n  return 'Yes'\nend", "  local function exist_three_digits(str)\n\
    \    local count = 0\n    for i=1, #str do\n      if str:sub(i,i):match(\"%d\"\
    ) then\n        count = count + 1\n      end\n    end\n    return count <= 3\n\
    \  end\n  local function exist_one_dot(str)\n    local count = 0\n    for i=1,\
    \ #str do\n      if str:sub(i,i) == \".\" then\n        count = count + 1\n  \
    \    end\n    end\n    return count == 1\n  end\n  local function is_substr_start_with_letter(str)\n\
    \    local f = str:sub(1,1)\n    return f:match(\"%a\")\n  end\n  local function\
    \ is_substr_end_with_valid_ext(str)\n    local ext = str:sub(-3)\n    if ext ==\
    \ \"txt\" or ext == \"exe\" or ext == \"dll\" then\n      return true\n    end\n\
    \    return false\n  end\n  local function name_before_dot_not_empty(str)\n  \
    \  local f = str:sub(1, str:find(\".\")-1)\n    return #f ~= 0\n  end\n  if exist_three_digits(file_name)\
    \ and exist_one_dot(file_name) and \n     is_substr_start_with_letter(file_name)\
    \ and name_before_dot_not_empty(file_name) and\n     is_substr_end_with_valid_ext(file_name)\
    \ then\n    return \"Yes\"\n  end\n  return \"No\"\nend", "    local digits =\
    \ 0\n    local start = 0\n    local dot_pos = -1\n    local end_pos = -1\n   \
    \ for i = 1, #file_name do\n        local c = file_name:sub(i, i)\n        if\
    \ c == '.' then\n            if dot_pos >= 0 then\n                return 'No'\n\
    \            end\n            dot_pos = i\n        elseif '0' <= c and c <= '9'\
    \ then\n            digits = digits + 1\n            if digits > 3 then\n    \
    \            return 'No'\n            end\n        elseif 'a' <= c and c <= 'z'\
    \ or 'A' <= c and c <= 'Z' then\n            if start == 0 then\n            \
    \    start = i\n            end\n        end\n    end\n    if dot_pos < start\
    \ then\n        return 'No'\n    end\n    local ok = {\n        ['txt'] = true,\n\
    \        ['exe'] = true,\n        ['dll'] = true,\n    }\n    return ok[file_name:sub(dot_pos\
    \ + 1)] and 'Yes' or 'No'\nend", "    -- Implementation\nend", "    if file_name:find(\"\
    %D%d+\") then\n        return \"No\"\n    end\n    if file_name:find(\"%.\") then\n\
    \        local p = file_name:find(\"%.\")\n        local a = file_name:sub(p+1)\n\
    \        if a == \"txt\" or a == \"exe\" or a == \"dll\" then\n            return\
    \ \"Yes\"\n        end\n    end\n    return \"No\"\nend", end, "  local str, dots\
    \ = file_name:gsub(\"%.\", \"\")\n  local digits = str:gsub(\"%D\", \"\")\n  local\
    \ digits_num = string.len(digits)\n  local prefix = file_name:sub(1, file_name:find(\"\
    %.\") - 1)\n  local suffix = file_name:sub(file_name:find(\"%.\") + 1)\n  if digits_num\
    \ > 3 or dots ~= 1 or prefix == \"\" or not prefix:match(\"^[a-zA-Z]\")\n    or\
    \ suffix ~= \"txt\" and suffix ~= \"exe\" and suffix ~= \"dll\" then\n    return\
    \ \"No\"\n  end\n  return \"Yes\"\nend", "    -- your code here\nend", "    local\
    \ name, ext = file_name:match('^([%a]+)([%.]?[^%.]+)$')\n    return ({\n     \
    \   ['txt'] = 'Yes',\n        ['exe'] = 'Yes',\n        ['dll'] = 'Yes',\n   \
    \ })[ext] == 'Yes' and name:match('^[%a]+$') ~= nil and name:match('[%d]') ==\
    \ nil\nend", "    -- write your code here\nend", "    -- TODO: Complete this function.\n\
    end", "    if string.match(file_name, '%a[%w_]+%.%w+') then\n        local part1,\
    \ part2 = string.match(file_name, '(.+)%.(.+)')\n        if part2 == 'txt' or\
    \ part2 == 'exe' or part2 == 'dll' then\n            if string.len(part1) > 0\
    \ then\n                if string.match(part1, '%a') then\n                  \
    \  local digits = 0\n                    for c in string.gmatch(part1, '%d') do\n\
    \                        digits = digits + 1\n                    end\n      \
    \              if digits <= 3 then\n                        return 'Yes'\n   \
    \                 end\n                end\n            end\n        end\n   \
    \ end\n    return 'No'\nend", "  return 'Yes'\nend", "  -- TODO\nend", "\tlocal\
    \ result = 'No'\n\tlocal count = file_name:gsub('%d', '')\n\tlocal count_of_digits\
    \ = file_name:len() - count:len()\n\tif count_of_digits > 3 then return result\
    \ end\n\tlocal count = file_name:gsub('%.', '')\n\tlocal count_of_dots = file_name:len()\
    \ - count:len()\n\tif count_of_dots ~= 1 then return result end\n\tlocal name,\
    \ ext = file_name:match(\"([^.]+).([^.]+)\")\n\tif name == '' then return result\
    \ end\n\tlocal first_char = name:sub(1, 1)\n\tif not first_char:match('[a-zA-Z]')\
    \ then return result end\n\tif ext == 'txt' or ext == 'exe' or ext == 'dll' then\
    \ result = 'Yes' end\n\treturn result\nend", "    if file_name:len() < 4 then\n\
    \        return 'No'\n    end\n    local first = file_name:sub(1, 1)\n    if not\
    \ (first >= 'a' and first <= 'z' or first >= 'A' and first <= 'Z') then\n    \
    \    return 'No'\n    end\n    local dot = file_name:find('.')\n    if not dot\
    \ then\n        return 'No'\n    end\n    local ext = file_name:sub(dot+1)\n \
    \   if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n\
    \    end\n    local digits = 0\n    for i = 2, dot - 1 do\n        local c = file_name:sub(i,\
    \ i)\n        if c >= '0' and c <= '9' then\n            digits = digits + 1\n\
    \        end\n    end\n    if digits > 3 then\n        return 'No'\n    end\n\
    \    return 'Yes'\nend", "    -- write your code here\nend", "    -- Check for\
    \ digits in file_name\n    local digits = file_name:match(\"%d\")\n    local num_digits\
    \ = 0\n    while digits do\n        num_digits = num_digits + 1\n        digits\
    \ = file_name:match(\"%d\", digits + 1)\n    end\n    if num_digits > 3 then\n\
    \        return \"No\"\n    end", "  local function check_ext(ext)\n    for i\
    \ = 1, #ext do\n      if not (ext:byte(i) >= string.byte('a') and ext:byte(i)\
    \ <= string.byte('z')) then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local count = 0\n  local dot = false\n  local ext = \"\"\n  for\
    \ i = 1, #file_name do\n    local b = file_name:byte(i)\n    if not ((b >= string.byte('a')\
    \ and b <= string.byte('z')) or (b >= string.byte('A') and b <= string.byte('Z'))\
    \ or b == string.byte('.')) then\n      if b >= string.byte('0') and b <= string.byte('9')\
    \ then\n        count = count + 1\n      else\n        return 'No'\n      end\n\
    \    end\n    if b == string.byte('.') then\n      if dot then\n        return\
    \ 'No'\n      end\n      dot = true\n    else\n      if dot then\n        ext\
    \ = ext .. string.char(b)\n      end\n    end\n  end\n  if count > 3 then\n  \
    \  return 'No'\n  end\n  if not dot then\n    return 'No'\n  end\n  if not (file_name:byte(1)\
    \ >= string.byte('a') and file_name:byte(1) <= string.byte('z')) then\n    return\
    \ 'No'\n  end\n  if not check_ext(ext) then\n    return 'No'\n  end\n  if ext\
    \ ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n    return 'No'\n  end\n  return\
    \ 'Yes'\nend", "    if type(file_name) ~= \"string\" then return \"No\" end\n\
    \    local digits, dots, suffixes = 0, 0, {\"txt\", \"exe\", \"dll\"}\n    local\
    \ before_dot, after_dot = file_name:match(\"(%a+)%.(%a+)\")\n    for i = 1, #file_name\
    \ do\n        local ch = file_name:sub(i, i)\n        if ch:match(\"%d\") then\
    \ digits = digits + 1 end\n        if ch == \".\" then dots = dots + 1 end\n \
    \   end\n    if digits > 3 or dots ~= 1 or before_dot == \"\" then return \"No\"\
    \ end\n    for _, suffix in ipairs(suffixes) do\n        if after_dot == suffix\
    \ then return \"Yes\" end\n    end\n    return \"No\"\nend", "    return 'Yes'\n\
    end", "    local function check_name(pre_dot)\n        local c = pre_dot:sub(1,\
    \ 1)\n        if c < 'a' or c > 'z' and c < 'A' or c > 'Z' then\n            return\
    \ false\n        end\n        for i = 2, #pre_dot do\n            c = pre_dot:sub(i,\
    \ i)\n            if c < '0' or c > '9' then\n                return false\n \
    \           end\n        end\n        return true\n    end\n    local dots = 0\n\
    \    local digits = 0\n    for i = 1, #file_name do\n        local c = file_name:sub(i,\
    \ i)\n        if c == '.' then\n            dots = dots + 1\n        elseif c\
    \ >= '0' and c <= '9' then\n            digits = digits + 1\n        end\n   \
    \ end\n    if dots ~= 1 or digits > 3 then\n        return 'No'\n    end\n   \
    \ local pre_dot, post_dot = file_name:match('(.*)%.(.*)')\n    local suffix =\
    \ {'txt', 'exe', 'dll'}\n    for i = 1, #suffix do\n        if post_dot == suffix[i]\
    \ then\n            return check_name(pre_dot) and 'Yes' or 'No'\n        end\n\
    \    end\n    return 'No'\nend", end, "    --TODO: Implement file_name_check function\n\
    \    return true\nend", "    local file_name_regex =  \"^[A-Za-z][A-Za-z0-9]{0,3}\\\
    \\.txt$|^[A-Za-z][A-Za-z0-9]{0,3}\\\\.exe$|^[A-Za-z][A-Za-z0-9]{0,3}\\\\.dll$\"\
    \n    if file_name:match(file_name_regex) then\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend", end, "    local name_part, ext_part = string.match(file_name,\
    \ '^(%a.*)%.(%a%a%a)$')\n    if name_part and ext_part then\n        return (not\
    \ string.find(name_part, '%d')) and #string.gsub(name_part, '%d', '') <= 3 and\
    \ \n               ext_part == 'txt' or ext_part == 'exe' or ext_part == 'dll'\
    \ and 'Yes' or 'No'\n    end\n    return 'No'\nend", "    -- your code here\n\
    end", "\tlocal _, dot_pos = file_name:find(\"%.\")\n\tlocal count_digit, count_char,\
    \ count_dot = 0, 0, 0\n\tlocal left, right = file_name:sub(1, dot_pos-1), file_name:sub(dot_pos+1)\n\
    \tfor c in left:gmatch(\"%a\") do count_char = count_char + 1 end\n\tfor c in\
    \ left:gmatch(\"%d\") do count_digit = count_digit + 1 end\n\tfor c in file_name:gmatch(\"\
    %.\") do count_dot = count_dot + 1 end\n\tlocal types = {[\"txt\"] = true, [\"\
    exe\"] = true, [\"dll\"] = true}\n\treturn (count_char > 0 and count_dot == 1\
    \ and types[right] and count_digit <= 3) and 'Yes' or 'No'\nend", "    local result\
    \ = 'No'\n    local cnt = 0\n    local flag = true\n    local dot_pos\n    local\
    \ s", "  if type(file_name) ~= \"string\" then return \"No\" end\n  local status,\
    \ ext = pcall(string.match, file_name, \"(.+)%.(.+)\")\n  if not status then return\
    \ \"No\" end\n  local point_pos = string.find(file_name, \"%.\")\n  if point_pos\
    \ == 1 then return \"No\" end\n  if point_pos == #file_name then return \"No\"\
    \ end\n  local digit_count = 0\n  for i = 1, #file_name do\n    if string.match(file_name,\
    \ i, i, \"[0-9]\") then\n      digit_count = digit_count + 1\n    end\n  end\n\
    \  if digit_count > 3 then return \"No\" end\n  local exts = {\"txt\", \"exe\"\
    , \"dll\"}\n  local ext_found = false\n  for _, ext2 in ipairs(exts) do\n    if\
    \ ext == ext2 then\n      ext_found = true\n      break\n    end\n  end\n  if\
    \ not ext_found then return \"No\" end\n  local prefix = string.sub(file_name,\
    \ 1, point_pos - 1)\n  local first_char = string.sub(prefix, 1, 1)\n  if not (string.match(first_char,\
    \ \"[a-zA-Z]\") and not string.match(prefix, \"%d\")) then\n    return \"No\"\n\
    \  end\n  return \"Yes\"\nend", "  local digits = 0\n  local number_of_dots =\
    \ 0\n  local starting_with_letter = false\n  local extension = false\n  local\
    \ file_name_len = #file_name\n  local i = 1\n  while i <= file_name_len do\n \
    \   local ch = file_name:sub(i, i)\n    if ch >= '0' and ch <= '9' then\n    \
    \  digits = digits + 1\n    elseif ch == '.' then\n      number_of_dots = number_of_dots\
    \ + 1\n    elseif (ch >= 'a' and ch <= 'z') or (ch >= 'A' and ch <= 'Z') then\n\
    \      starting_with_letter = true\n    end\n    i = i + 1\n  end\n  if file_name:sub(file_name_len\
    \ - 2, file_name_len) == 'txt' or\n     file_name:sub(file_name_len - 2, file_name_len)\
    \ == 'exe' or\n     file_name:sub(file_name_len - 2, file_name_len) == 'dll' then\n\
    \    extension = true\n  end\n  if digits > 3 or number_of_dots ~= 1 or not starting_with_letter\
    \ or not extension then\n    return 'No'\n  else\n    return 'Yes'\n  end\nend",
  "    local s,e=file_name:find(\"%..*\")\n    local dp=file_name:sub(s,e)\n    local\
    \ s,e=file_name:find(\"%d\")\n    local ext=dp:sub(1,1)\n    local dig=dp:sub(2,#dp)\n\
    \    local nm=file_name:sub(1,s-1)\n    if s then\n        if #nm<1 then\n   \
    \         return \"No\"\n        end\n        if ext~=\".\" then\n           \
    \ return \"No\"\n        end\n        if #dig>3 then\n            return \"No\"\
    \n        end\n        if nm:sub(1,1):match(\"%a\") then\n            if dig==\"\
    txt\" or dig==\"exe\" or dig==\"dll\" then\n                return \"Yes\"\n \
    \           else\n                return \"No\"\n            end\n        else\n\
    \            return \"No\"\n        end\n    else\n        return \"No\"\n   \
    \ end\nend", "  if file_name:match(\"^[a-zA-Z]%d*%.(txt|exe|dll)$\") then\n  \
    \  return \"Yes\"\n  else\n    return \"No\"\n  end\nend", end, "    local f,e\
    \ = string.find(file_name, \"[A-Za-z]*[%d]*[.][t][x][t]\")\n    if f then return\
    \ 'Yes' end\n    local f,e = string.find(file_name, \"[A-Za-z]*[%d]*[.][e][x][e]\"\
    )\n    if f then return 'Yes' end\n    local f,e = string.find(file_name, \"[A-Za-z]*[%d]*[.][d][l][l]\"\
    )\n    if f then return 'Yes' end\n    return 'No'\nend", "\nend", "    return\
    \ file_name_check(file_name)\nend", "  return file_name\nend", "    if file_name\
    \ == nil then return 'No' end\n    file_name = file_name:gsub('%.', ' ') -- replace\
    \ dot with space\n    local is_valid = true\n    local parts = {}\n    for part\
    \ in file_name:gmatch('%S+') do\n        table.insert(parts, part)\n    end\n\
    \    if #parts ~= 2 then return 'No' end\n    if parts[1]:match('%d') and #parts[1]:match('%d')\
    \ > 3 then return 'No' end\n    if parts[1]:match('^%l+$') == nil then return\
    \ 'No' end\n    if not table.contains({'txt', 'exe', 'dll'}, parts[2]) then return\
    \ 'No' end\n    return 'Yes'\nend", end, '    -- Your code goes here.', "\tlocal\
    \ first, last = string.find(file_name, \"%.+\")\n\tlocal first_f = file_name:sub(1,\
    \ first-1)\n\tlocal last_f = file_name:sub(last+1)\n\t\n\tlocal digits = string.gsub(first_f,\
    \ \"[%D]\", \"\")\n\tlocal pattern = \"%a+\"\n\t\n\tif #digits > 3 then\n\t\t\
    return \"No\"\n\telseif string.match(first_f, pattern) and last_f:find(\"exe\"\
    ) or last_f:find(\"txt\") or last_f:find(\"dll\") then\n\t\treturn \"Yes\"\n\t\
    else\n\t\treturn \"No\"\n\tend\nend", "    local count = 0\n    local exe, dot,\
    \ txt = false, false, false\n    local len = string.len(file_name)\n    for i\
    \ = 1, len do\n        if string.sub(file_name, i, i) == '.' then\n          \
    \  dot = true\n        elseif string.sub(file_name, i, i) == 'e' then\n      \
    \      exe = true\n        elseif string.sub(file_name, i, i) == 't' then\n  \
    \          txt = true\n        elseif tonumber(string.sub(file_name, i, i)) ~=\
    \ nil then\n            count = count + 1\n        end\n    end\n    if count\
    \ <= 3 and dot and (exe or txt) then\n        return 'Yes'\n    else\n       \
    \ return 'No'\n    end\nend", "    -- your code here\nend", "\t-- your code here\n\
    \tlocal v = file_name:match('([^%d]+)(%d*)(%..+)')\n\tif v == nil then return\
    \ 'No' end\n\tif v:find('%d') and v:len() > 3 then return 'No' end\n\tif v:sub(v:len()-2)\
    \ ~= 'txt' and v:sub(v:len()-2) ~= 'exe' and v:sub(v:len()-2) ~= 'dll' then return\
    \ 'No' end\n\treturn 'Yes'\nend", "  -- your code goes here\n  if #file_name <\
    \ 5 then\n    return 'No'\n  end\n  local a,b,c = string.match(file_name, '(%a+).(%a+)')\n\
    \  if b ~= 'txt' and b ~= 'exe' and b ~= 'dll' then\n    return 'No'\n  end\n\
    \  local d = string.gsub(a, '[^%d]', '')\n  if #d > 3 then\n    return 'No'\n\
    \  end\n  return 'Yes'\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
