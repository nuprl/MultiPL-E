name: HumanEval_69_search
language: lua
prompt: "-- You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n-- zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n-- The frequency of an integer is the number\
  \ of times it appears in the list.\n-- If no such a value exist, return -1.\n--\
  \ Examples:\n-- search([4, 1, 2, 2, 3, 1]) == 2\n-- search([1, 2, 2, 3, 3, 3, 4,\
  \ 4, 4]) == 3\n-- search([5, 5, 4, 4, 4]) == -1\nlocal function search(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n\
  \    lu.assertEquals(candidate({5, 5, 5, 5, 1}), 1)\n    lu.assertEquals(candidate({4,\
  \ 1, 4, 1, 4, 4}), 4)\n    lu.assertEquals(candidate({3, 3}), -1)\n    lu.assertEquals(candidate({8,\
  \ 8, 8, 8, 8, 8, 8, 8}), 8)\n    lu.assertEquals(candidate({2, 3, 3, 2, 2}), 2)\n\
  \    lu.assertEquals(candidate({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7,\
  \ 1, 7, 4, 10, 8, 1}), 1)\n    lu.assertEquals(candidate({3, 2, 8, 2}), 2)\n   \
  \ lu.assertEquals(candidate({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), 1)\n    lu.assertEquals(candidate({8,\
  \ 8, 3, 6, 5, 6, 4}), -1)\n    lu.assertEquals(candidate({6, 9, 6, 7, 1, 4, 7, 1,\
  \ 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), 1)\n    lu.assertEquals(candidate({1,\
  \ 9, 10, 1, 3}), 1)\n    lu.assertEquals(candidate({6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), 5)\n    lu.assertEquals(candidate({1}),\
  \ 1)\n    lu.assertEquals(candidate({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6,\
  \ 10, 4, 2, 1, 10, 2, 1, 1, 5}), 4)\n    lu.assertEquals(candidate({2, 10, 4, 8,\
  \ 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), 2)\n    lu.assertEquals(candidate({1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), 1)\n    lu.assertEquals(candidate({9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4}), 4)\n    lu.assertEquals(candidate({2, 6, 4, 2, 8, 7, 5, 6, 4, 10,\
  \ 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), 4)\n    lu.assertEquals(candidate({9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), 2)\n    lu.assertEquals(candidate({5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), -1)\n    lu.assertEquals(candidate({10}),\
  \ -1)\n    lu.assertEquals(candidate({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
  \ 2)\n    lu.assertEquals(candidate({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), 1)\n \
  \   lu.assertEquals(candidate({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5,\
  \ 6, 7, 6, 7, 7, 6}), 1)\n    lu.assertEquals(candidate({3, 10, 10, 9, 2}), -1)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local map = {}\n    for _, v in ipairs(lst) do\n        map[v]\
    \ = (map[v] or 0) + 1\n    end\n    local max = -1\n    for k, v in pairs(map)\
    \ do\n        if v >= k and max < k then\n            max = k\n        end\n \
    \   end\n    return max\nend", "    local max = -1\n    local cnt = 0\n    local\
    \ lst = lst\n    for i = 1, #lst do\n        local k = lst[i]\n        for j =\
    \ 1, #lst do\n            if lst[j] == k then\n                cnt = cnt + 1\n\
    \            end\n        end\n        if k > 0 and cnt >= k and k > max then\n\
    \            max = k\n        end\n        cnt = 0\n    end\n    return max\n\
    end\nreturn search", "  local freq = {}\n  for i, val in ipairs(lst) do\n    freq[val]\
    \ = (freq[val] or 0) + 1\n  end\n  local freq_lst = {}\n  for k, v in pairs(freq)\
    \ do\n    table.insert(freq_lst, { k, v })\n  end\n  table.sort(freq_lst, function(x,\
    \ y) return x[2] > y[2] end)\n  local i = 1\n  while i <= #freq_lst do\n    if\
    \ freq_lst[i][1] > freq_lst[i][2] then\n      break\n    end\n    i = i + 1\n\
    \  end\n  if i <= #freq_lst then\n    return freq_lst[i][1]\n  else\n    return\
    \ -1\n  end\nend", "    local mx = -1\n    local count = {}\n    for i = 1, #lst\
    \ do\n        count[lst[i]] = (count[lst[i]] or 0) + 1\n    end\n    for i = 1,\
    \ #lst do\n        if count[lst[i]] >= lst[i] and lst[i] > mx then\n         \
    \   mx = lst[i]\n        end\n    end\n    return mx\nend", "    -- TODO implement\
    \ the function\nend", "    local dic = {}\n    for i, n in ipairs(lst) do\n  \
    \      dic[n] = dic[n] or 0\n        dic[n] = dic[n] + 1\n    end\n    local key,\
    \ value = nil, 0\n    for i, n in ipairs(lst) do\n        if dic[n] >= n and value\
    \ < n then\n            key, value = n, n\n        end\n    end\n    return key\
    \ or -1\nend", "  local count = {}\n  for _, v in ipairs(lst) do\n    count[v]\
    \ = (count[v] or 0) + 1\n  end\n  local greater = -1\n  for _, v in ipairs(lst)\
    \ do\n    if count[v] >= v and v > greater then\n      greater = v\n    end\n\
    \  end\n  return greater\nend", "    local max = 0\n    local nums = {}\n    for\
    \ _, v in ipairs(lst) do\n        if v > max then\n            max = v\n     \
    \   end\n        nums[v] = (nums[v] or 0) + 1\n    end\n    for i = max, 1, -1\
    \ do\n        if nums[i] and nums[i] >= i then\n            return i\n       \
    \ end\n    end\n    return -1\nend", "\tfor i = 1, #lst do\n\t\tlocal count =\
    \ 0\n\t\tfor j = 1, #lst do\n\t\t\tif lst[i] == lst[j] then\n\t\t\t\tcount = count\
    \ + 1\n\t\t\tend\n\t\tend\n\t\tif lst[i] == count then\n\t\t\treturn lst[i]\n\t\
    \tend\n\tend\n\treturn -1\nend", "    local _, max = 0, -1\n    for _, v in ipairs(lst)\
    \ do\n        local c = 0\n        for _, p in ipairs(lst) do\n            if\
    \ p == v then\n                c = c + 1\n            end\n        end\n     \
    \   if c >= v and c > _ then\n            _, max = c, v\n        end\n    end\n\
    \    return max\nend", "\t-- your code here\n\tlocal a, b = {}, {}\n\tfor _, v\
    \ in ipairs(lst) do\n\t\ta[v] = a[v] and a[v] + 1 or 1\n\tend\n\tfor k, v in pairs(a)\
    \ do\n\t\tb[v] = k\n\tend\n\tfor k, v in pairs(b) do\n\t\tif k >= v then\n\t\t\
    \treturn v\n\t\tend\n\tend\n\treturn -1\nend", "\tlocal res = 0\n\tlocal cnt =\
    \ 0\n\tfor _, v in ipairs(lst) do\n\t\tif v > cnt then\n\t\t\tcnt = 0\n\t\t\t\
    res = v\n\t\tend\n\t\tif v == res then\n\t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\t\
    return cnt >= res and res or -1\nend", "    local tbl = {}\n    for i, v in ipairs(lst)\
    \ do\n        tbl[v] = (tbl[v] or 0) + 1\n    end\n    local result = -1\n   \
    \ for k, v in pairs(tbl) do\n        if v >= k and k > result then\n         \
    \   result = k\n        end\n    end\n    return result\nend\nassert(search({4,\
    \ 1, 2, 2, 3, 1}) == 2)\nassert(search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3)\nassert(search({5,\
    \ 5, 4, 4, 4}) == -1)", "    local cnt = {}\n    for _, v in ipairs(lst) do\n\
    \        cnt[v] = (cnt[v] or 0) + 1\n    end\n    local res = -1\n    for k, v\
    \ in pairs(cnt) do\n        if k <= v and k > res then\n            res = k\n\
    \        end\n    end\n    return res\nend", "    local t = {}\n    for i, v in\
    \ ipairs(lst) do\n        t[v] = t[v] and t[v] + 1 or 1\n    end\n    for i, v\
    \ in ipairs(lst) do\n        if v > 0 and t[v] >= v then\n            return v\n\
    \        end\n    end\n    return -1\nend", "   -- your code here\nend", "   \
    \ local a = {}\n    for _, v in ipairs(lst) do\n        a[v] = (a[v] or 0) + 1\n\
    \    end\n    local max = 0\n    for _, v in ipairs(lst) do\n        if a[v] >=\
    \ v and v > max then\n            max = v\n        end\n    end\n    return max\
    \ > 0 and max or -1\nend", "  local freq={}\n  for _,v in ipairs(lst) do\n   \
    \ freq[v] = (freq[v] or 0) + 1\n  end\n  local res = -1\n  for i, v in ipairs(lst)\
    \ do\n    if v >= freq[v] and v > res then\n      res = v\n    end\n  end\n  return\
    \ res\nend", "  local tbl, res = {}, -1\n  for _, v in ipairs(lst) do\n    tbl[v]\
    \ = (tbl[v] or 0) + 1\n  end\n  for i = 1, #lst do\n    if tbl[i] and tbl[i] >=\
    \ i and i > res then\n      res = i\n    end\n  end\n  return res\nend", "   \
    \ local one = {}\n    local two = {}\n    for _, v in ipairs(lst) do\n       \
    \ if not one[v] then\n            one[v] = 1\n        else\n            one[v]\
    \ = one[v] + 1\n        end\n    end\n    for k, v in pairs(one) do\n        if\
    \ k >= v then\n            table.insert(two, k)\n        end\n    end\n    if\
    \ #two > 0 then\n        return math.max(unpack(two))\n    else\n        return\
    \ -1\n    end\nend", "  local lst_uniq_cnt = {}\n  for i = 1, #lst do\n    if\
    \ lst_uniq_cnt[lst[i]] == nil then\n      lst_uniq_cnt[lst[i]] = 1\n    else\n\
    \      lst_uniq_cnt[lst[i]] = lst_uniq_cnt[lst[i]] + 1\n    end\n  end\n  for\
    \ i = 1, #lst do\n    if lst_uniq_cnt[lst[i]] >= lst[i] then\n      return lst[i]\n\
    \    end\n  end\n  return -1\nend", "    local count = {}\n    for _,x in ipairs(lst)\
    \ do\n        if count[x] == nil then\n            count[x] = 1\n        else\n\
    \            count[x] = count[x] + 1\n        end\n    end\n    local max = -1\n\
    \    for x,c in pairs(count) do\n        if x > 0 and c >= x and x > max then\n\
    \            max = x\n        end\n    end\n    return max\nend", "\tlocal max\
    \ = 0\n\tlocal maxCount = 0\n\tfor i = 1, #lst do\n\t\tlocal v = lst[i]\n\t\t\
    local count = 0\n\t\tfor j = 1, #lst do\n\t\t\tif lst[j] == v then\n\t\t\t\tcount\
    \ = count + 1\n\t\t\tend\n\t\tend\n\t\tif v > max and count >= v then\n\t\t\t\
    max = v\n\t\t\tmaxCount = count\n\t\tend\n\tend\n\tif maxCount == 0 then\n\t\t\
    return -1\n\tend\n\treturn max\nend", "\tlocal counts = {}\n\tlocal max = 0\n\t\
    for _,v in ipairs(lst) do\n\t\tcounts[v] = (counts[v] or 0) + 1\n\t\tif v > max\
    \ then max = v end\n\tend\n\tfor i = max,1,-1 do\n\t\tif counts[i] >= i then return\
    \ i end\n\tend\n\treturn -1\nend", "  local i = 1\n  local max = 0\n  while i\
    \ < #lst + 1 do\n    local num = lst[i]\n    local count = 0\n    for j = 1, #lst\
    \ do\n      if lst[j] == num then\n        count = count + 1\n      end\n    end\n\
    \    if count >= num and num > max then\n      max = num\n    end\n    i = i +\
    \ 1\n  end\n  if max == 0 then\n    return -1\n  else\n    return max\n  end\n\
    end", "  local freq = {}\n  for _,num in ipairs(lst) do\n    freq[num] = (freq[num]\
    \ or 0) + 1\n  end\n  local max = -1\n  for num,f in pairs(freq) do\n    if num\
    \ <= f and num > max then\n      max = num\n    end\n  end\n  return max\nend",
  "    local count = {}\n    for i = 1, #lst do\n        if count[lst[i]] == nil then\n\
    \            count[lst[i]] = 1\n        else\n            count[lst[i]] = count[lst[i]]\
    \ + 1\n        end\n    end\n    local res = -1\n    for i = 1, #lst do\n    \
    \    if count[lst[i]] ~= nil and count[lst[i]] >= lst[i] and lst[i] > res then\n\
    \            res = lst[i]\n        end\n    end\n    return res\nend", "  local\
    \ m = {}\n  for i, v in ipairs(lst) do\n    if not m[v] then\n      m[v] = 1\n\
    \    else\n      m[v] = m[v] + 1\n    end\n  end\n  local max = -1\n  for k, v\
    \ in pairs(m) do\n    if v >= k and k > max then\n      max = k\n    end\n  end\n\
    \  return max\nend", end, "\tlocal m = math.max(unpack(lst))\n\tfor i = m, 1,\
    \ -1 do\n\t\tif lst[i] == i then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn -1\n\
    end", "  -- Your code here\n  for i=1, #lst do\n    local j = 0\n    for k=1,\
    \ #lst do\n      if lst[k] == lst[i] then\n        j = j + 1\n      end\n    end\n\
    \    if j >= lst[i] then\n      return lst[i]\n    end\n  end\n  return -1\nend",
  "    local count = {}\n    for i, v in ipairs(lst) do\n        count[v] = (count[v]\
    \ or 0) + 1\n    end\n    local max = -1\n    for i, v in ipairs(lst) do\n   \
    \     if v > 0 and count[v] >= v and v > max then\n            max = v\n     \
    \   end\n    end\n    return max\nend", "  local max_value, max_count = -1, -1\n\
    \  for _, v in ipairs(lst) do\n    local count = 0\n    for _, v2 in ipairs(lst)\
    \ do\n      if v == v2 then\n        count = count + 1\n      end\n    end\n \
    \   if v > max_value and count >= v then\n      max_value, max_count = v, count\n\
    \    end\n  end\n  return max_value\nend", "  local result = -1\n  for _,v in\
    \ ipairs(lst) do\n    local cnt = 0\n    for _,k in ipairs(lst) do\n      if k\
    \ == v then\n        cnt = cnt + 1\n      end\n    end\n    if v >= cnt and v\
    \ > result then\n      result = v\n    end\n  end\n  return result\nend", "  \
    \  local freq = {}\n    for _, i in ipairs(lst) do\n        freq[i] = (freq[i]\
    \ or 0) + 1\n    end\n    local mx = -1\n    for k, v in pairs(freq) do\n    \
    \    if k <= v and k > mx then\n            mx = k\n        end\n    end\n   \
    \ return mx\nend", "\tlocal counts = {}\n\tfor i, v in ipairs(lst) do\n\t\tcounts[v]\
    \ = (counts[v] or 0) + 1\n\tend\n\tfor i, v in ipairs(lst) do\n\t\tif counts[v]\
    \ >= v then\n\t\t\treturn v\n\t\tend\n\tend\n\treturn -1\nend", "  local freq\
    \ = {}\n  for _, v in ipairs(lst) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n\
    \  local best = -1\n  for v, c in pairs(freq) do\n    if v <= c and v > best then\n\
    \      best = v\n    end\n  end\n  return best\nend", "  local frq = {}\n  for\
    \ _, v in ipairs(lst) do\n    frq[v] = (frq[v] or 0) + 1\n  end\n  local ma =\
    \ -1\n  for k, v in pairs(frq) do\n    if k > 0 and k <= v and k > ma then\n \
    \     ma = k\n    end\n  end\n  return ma\nend", "    -- your code here\nend",
  "  local i, f = #lst, 0\n  for i, f in pairs(lst) do\n    if f == i then return\
    \ i end\n  end\n  return -1\nend", "    local freq = {}\n    for _, v in ipairs(lst)\
    \ do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    local max = -1\n    for\
    \ _, v in ipairs(lst) do\n        if freq[v] >= v and v > max then\n         \
    \   max = v\n        end\n    end\n    return max\nend", "    local count = {}\n\
    \    for _, v in ipairs(lst) do\n        count[v] = (count[v] or 0) + 1\n    end\n\
    \    local max = -1\n    for k, v in pairs(count) do\n        if v >= k and k\
    \ > max then\n            max = k\n        end\n    end\n    return max\nend",
  "  local r = -1\n  local c = 0\n  for _, v in ipairs(lst) do\n    if c < v then\
    \ c = v end\n  end\n  for i = 1, c do\n    local cc = 0\n    for _, v in ipairs(lst)\
    \ do\n      if v == i then cc = cc + 1 end\n    end\n    if cc >= i then r = i\
    \ end\n  end\n  return r\nend", "    local t = {}\n    for _,i in ipairs(lst)\
    \ do\n        if t[i] then\n            t[i] = t[i] + 1\n        else\n      \
    \      t[i] = 1\n        end\n    end\n    local tt = {}\n    for k,v in pairs(t)\
    \ do\n        if k > 0 and k <= v then\n            tt[k] = v\n        end\n \
    \   end\n    local max = 0\n    for k,v in pairs(tt) do\n        if k > max then\n\
    \            max = k\n        end\n    end\n    return max > 0 and max or -1\n\
    end", "    local n = #lst\n    local counts = {}\n    for i = 1, n do\n      \
    \  local c = counts[lst[i]]\n        if c == nil then\n            counts[lst[i]]\
    \ = 1\n        else\n            counts[lst[i]] = c + 1\n        end\n    end\n\
    \    for i = 1, n do\n        local c = counts[lst[i]]\n        if c >= lst[i]\
    \ then\n            return lst[i]\n        end\n    end\n    return -1\nend",
  "    local frequency = {}\n    for _, v in ipairs(lst) do\n        frequency[v]\
    \ = (frequency[v] or 0) + 1\n    end\n    local greatest = -1\n    for k, v in\
    \ pairs(frequency) do\n        if v >= k and k > greatest then\n            greatest\
    \ = k\n        end\n    end\n    return greatest\nend", "    local count = {}\n\
    \    for _, v in ipairs(lst) do\n        if not count[v] then\n            count[v]\
    \ = 1\n        else\n            count[v] = count[v] + 1\n        end\n    end\n\
    \    local res = 0\n    for k, v in pairs(count) do\n        if v >= k and k >\
    \ res then\n            res = k\n        end\n    end\n    if res > 0 then\n \
    \       return res\n    else\n        return -1\n    end\nend", "    return -1\n\
    end", "    local dict = {}\n    for _, v in ipairs(lst) do\n        dict[v] =\
    \ (dict[v] or 0) + 1\n    end\n    local max = -1\n    for k, v in pairs(dict)\
    \ do\n        if v >= k and k > max then\n            max = k\n        end\n \
    \   end\n    return max\nend", "  -- TODO\nend", "\tlocal m = {};\n\tfor _,v in\
    \ ipairs(lst) do m[v] = (m[v] or 0) + 1 end\n\tfor i,v in ipairs(lst) do if m[v]\
    \ >= v then return v end end\n\treturn -1\nend", "    local res, max, maxCount\
    \ = -1, 0, 0\n    local map = {}\n    for _, v in ipairs(lst) do\n        if v\
    \ > max then\n            max = v\n        end\n        map[v] = (map[v] or 0)\
    \ + 1\n    end\n    for i = 1, max do\n        if i <= map[i] and i > maxCount\
    \ then\n            res = i\n            maxCount = i\n        end\n    end\n\
    \    return res\nend", "  local frequency = { }\n  for _, value in ipairs(lst)\
    \ do\n    frequency[value] = (frequency[value] or 0) + 1\n  end\n  local max =\
    \ -1\n  for value, count in pairs(frequency) do\n    if value <= count and value\
    \ > max then\n      max = value\n    end\n  end\n  return max\nend", "  local\
    \ counts = {}\n  for _, v in ipairs(lst) do\n    counts[v] = (counts[v] or 0)\
    \ + 1\n  end\n  local res\n  for i, v in ipairs(lst) do\n    if v == counts[v]\
    \ and (not res or res < v) then\n      res = v\n    end\n  end\n  return res or\
    \ -1\nend", "    local found = -1\n    for _, v in ipairs(lst) do\n        local\
    \ count = 0\n        for _, x in ipairs(lst) do\n            if x == v then\n\
    \                count = count + 1\n            end\n        end\n        if count\
    \ >= v and v > found then\n            found = v\n        end\n    end\n    return\
    \ found\nend", "  local frequencies = {}\n  for _, v in ipairs(lst) do\n    frequencies[v]\
    \ = (frequencies[v] or 0) + 1\n  end\n  for _, v in ipairs(lst) do\n    if frequencies[v]\
    \ >= v then\n      return v\n    end\n  end\n  return -1\nend", "  local biggest,\
    \ max_count = -1, -1\n  for i,v in ipairs(lst) do\n    local count = 0\n    for\
    \ j,w in ipairs(lst) do\n      if v == w then\n        count = count + 1\n   \
    \   end\n    end\n    if v >= count and count >= max_count then\n      biggest\
    \ = v\n      max_count = count\n    end\n  end\n  return biggest\nend", "    local\
    \ rv = -1\n    local cnt = {}\n    for i,v in ipairs(lst) do\n        cnt[v] =\
    \ (cnt[v] or 0) + 1\n    end\n    for i,v in ipairs(lst) do\n        if v > 0\
    \ and v <= cnt[v] and v > rv then\n            rv = v\n        end\n    end\n\
    \    return rv\nend", "    local freq, max = {}, -1\n    for i = 1, #lst do\n\
    \        freq[lst[i]] = (freq[lst[i]] or 0) + 1\n        if lst[i] >= freq[lst[i]]\
    \ and lst[i] > max then\n            max = lst[i]\n        end\n    end\n    return\
    \ max\nend", end, "  lst:sort()\n  local n, p = lst[1], 1\n  for i, v in ipairs(lst)\
    \ do\n    if v ~= n then\n      if p >= n then return n end\n      n, p = v, 1\n\
    \    else\n      p = p + 1\n    end\n  end\n  return p >= n and n or -1\nend",
  "  local max = -1\n  local maxFreq = -1\n  local freq = {}\n  for _,x in ipairs(lst)\
    \ do\n    freq[x] = (freq[x] or 0) + 1\n    if freq[x] >= x and x > maxFreq then\n\
    \      max = x\n      maxFreq = freq[x]\n    end\n  end\n  return max\nend", " \
    \ local nums = {}\n  for _, val in ipairs(lst) do\n    nums[val] = (nums[val]\
    \ or 0) + 1\n  end\n  local max = -1\n  for num, count in pairs(nums) do\n   \
    \ if num <= count and num > max then\n      max = num\n    end\n  end\n  return\
    \ max\nend", "    local function fn(n)\n        local count = 0\n        for _,\
    \ v in ipairs(lst) do\n            if v == n then\n                count = count\
    \ + 1\n            end\n        end\n        return count\n    end\n    local\
    \ val = -1\n    for _, v in ipairs(lst) do\n        if v > 0 and fn(v) >= v and\
    \ v > val then\n            val = v\n        end\n    end\n    return val\nend",
  "  if #lst == 0 then return -1 end\n  local function findGreatest(l, g)\n    if\
    \ #l == 0 then return g end\n    if l[1] > g then return findGreatest(next(l),\
    \ l[1]) end\n    return findGreatest(next(l), g)\n  end\n  local function findFrequency(l,\
    \ f, g)\n    if #l == 0 then return f end\n    if l[1] == g then return findFrequency(next(l),\
    \ f + 1, g) end\n    return findFrequency(next(l), f, g)\n  end\n  local g = findGreatest(lst,\
    \ 0)\n  local f = findFrequency(lst, 0, g)\n  if f >= g then return g end\n  return\
    \ -1\nend", "  local count = 0\n  local res = {}\n  for _, v in ipairs(lst) do\n\
    \    local cnt = 0\n    for _, x in ipairs(lst) do\n      if v == x then\n   \
    \     cnt = cnt + 1\n      end\n    end\n    if cnt >= v then\n      table.insert(res,\
    \ v)\n    end\n  end\n  if #res > 0 then\n    table.sort(res)\n    return res[#res]\n\
    \  else\n    return -1\n  end\nend", "\tlocal max = 1\n\tfor i = 2, #lst do\n\t\
    \tif lst[i] > max then\n\t\t\tmax = lst[i]\n\t\tend\n\tend\n\t\n\tfor i = max,\
    \ 1, -1 do\n\t\tlocal cnt = 0\n\t\tfor j = 1, #lst do\n\t\t\tif lst[j] == i then\n\
    \t\t\t\tcnt = cnt + 1\n\t\t\tend\n\t\tend\n\t\tif cnt >= i then\n\t\t\treturn\
    \ i\n\t\tend\n\tend\n\treturn -1\nend", "    local maxNum = -1\n    local frequency\
    \ = 0\n    for _, v in ipairs(lst) do\n        if v > frequency then\n       \
    \     maxNum = v\n            frequency = 0\n        end\n        if v == maxNum\
    \ then\n            frequency = frequency + 1\n        end\n    end\n    if frequency\
    \ >= maxNum then\n        return maxNum\n    else\n        return -1\n    end\n\
    end", "  for i = #lst, 1, -1 do\n    local c = 0\n    for j = 1, #lst do\n   \
    \   if lst[j] == lst[i] then\n        c = c + 1\n      end\n    end\n    if c\
    \ >= lst[i] then\n      return lst[i]\n    end\n  end\n  return -1\nend", "  local\
    \ res, f = -1, {}\n  for i = 1, #lst do\n    f[lst[i]] = (f[lst[i]] or 0) + 1\n\
    \  end\n  for i = 1, #lst do\n    if (f[lst[i]] or 0) >= lst[i] and lst[i] > res\
    \ then\n      res = lst[i]\n    end\n  end\n  return res\nend", "  local max =\
    \ -1\n  local l = {}\n  for i = 1, #lst do\n    if l[lst[i]] == nil then\n   \
    \   l[lst[i]] = 1\n    else\n      l[lst[i]] = l[lst[i]] + 1\n    end\n  end\n\
    \  for i = 1, #lst do\n    if l[lst[i]] ~= nil and l[lst[i]] >= lst[i] and lst[i]\
    \ > max then\n      max = lst[i]\n    end\n  end\n  return max\nend", "    if\
    \ not lst then\n        return -1\n    end\n    local res = -1\n    local max\
    \ = 0\n    local tbl = {}\n    for i, v in ipairs(lst) do\n        tbl[v] = (tbl[v]\
    \ or 0) + 1\n    end\n    for i, v in ipairs(lst) do\n        if v >= tbl[v] and\
    \ v > max then\n            res = v\n            max = v\n        end\n    end\n\
    \    return res\nend", "    local biggestVal = -1\n    local biggestValAppear\
    \ = -1\n    for _,v in ipairs(lst) do\n        local appearCount = 0\n       \
    \ for _,x in ipairs(lst) do\n            if v == x then\n                appearCount\
    \ = appearCount + 1\n            end\n        end\n        if v >= biggestVal\
    \ and appearCount >= v then\n            biggestVal = v\n            biggestValAppear\
    \ = appearCount\n        end\n    end\n    return biggestVal\nend", "  local maxInt\
    \ = -1\n  local maxFreq = -1\n  local frequency = {}\n  for i = 1, #lst do\n \
    \   local currInt = lst[i]\n    if (currInt > maxInt) then\n      frequency[currInt]\
    \ = frequency[currInt] and frequency[currInt] + 1 or 1\n      if (frequency[currInt]\
    \ >= currInt) then\n        maxInt = currInt\n        maxFreq = frequency[currInt]\n\
    \      end\n    end\n  end\n  return maxInt\nend", "    return -1\nend", "   \
    \ local lst_copy = table.shallow_copy(lst)\n    table.sort(lst_copy)\n    local\
    \ max_val = -1\n    local max_freq = -1\n    local cur_val = -1\n    local cur_freq\
    \ = 0\n    for _, v in ipairs(lst_copy) do\n        if v == cur_val then\n   \
    \         cur_freq = cur_freq + 1\n        else\n            if cur_freq >= cur_val\
    \ and cur_val > max_val then\n                max_val = cur_val\n            \
    \    max_freq = cur_freq\n            end\n            cur_val = v\n         \
    \   cur_freq = 1\n        end\n    end\n    if cur_freq >= cur_val and cur_val\
    \ > max_val then\n        max_val = cur_val\n        max_freq = cur_freq\n   \
    \ end\n    return max_val\nend", "    local max = -1\n    local newTable = {}\n\
    \    for i = 1, #lst do\n        newTable[lst[i]] = newTable[lst[i]] or 0\n  \
    \      newTable[lst[i]] = newTable[lst[i]] + 1\n    end\n    for i = 1, #lst do\n\
    \        if (lst[i] <= newTable[lst[i]]) and (lst[i] > max) then\n           \
    \ max = lst[i]\n        end\n    end\n    return max\nend", "    local sorted\
    \ = {}\n    for k, v in pairs(lst) do\n        table.insert(sorted, v)\n    end\n\
    \    table.sort(sorted)\n    for k, v in pairs(sorted) do\n        if (sorted[k]\
    \ == sorted[k + 1]) then\n            if (sorted[k] == sorted[k + 2]) then\n \
    \               return sorted[k]\n            end\n        end\n    end\n    return\
    \ -1\nend", "    local mx = -1;\n    local c = {};\n    for i,v in ipairs(lst)\
    \ do\n        c[v] = (c[v] or 0) + 1;\n        if v > 0 and v == c[v] and v >\
    \ mx then\n            mx = v;\n        end\n    end\n    return mx;\nend", " \
    \   local num = -1\n    local lstFrequency = {}\n    for i = 1, #lst do\n    \
    \    if lstFrequency[lst[i]] == nil then\n            lstFrequency[lst[i]] = 1\n\
    \        else\n            lstFrequency[lst[i]] = lstFrequency[lst[i]] + 1\n \
    \       end\n    end\n    for i = 1, #lst do\n        if lstFrequency[lst[i]]\
    \ >= lst[i] and lst[i] > num then\n            num = lst[i]\n        end\n   \
    \ end\n    return num\nend", "  local count = {}\n  for i,v in ipairs(lst) do\n\
    \    count[v] = (count[v] or 0) + 1\n  end\n  local max = -1\n  for i,v in ipairs(lst)\
    \ do\n    if count[v] >= v and v > max then\n      max = v\n    end\n  end\n \
    \ return max\nend", "    local cnt = {}\n    for _,v in ipairs(lst) do\n     \
    \   cnt[v] = (cnt[v] or 0) + 1\n    end\n    local max_elem = -1\n    for k,v\
    \ in pairs(cnt) do\n        if k <= v and k > max_elem then\n            max_elem\
    \ = k\n        end\n    end\n    return max_elem\nend", "  local max_val = 0\n\
    \  local max_count = 0\n  for _, v in ipairs(lst) do\n    local count = 0\n  \
    \  for _, v2 in ipairs(lst) do\n      if v == v2 then\n        count = count +\
    \ 1\n      end\n    end\n    if count >= v and count >= max_count then\n     \
    \ max_val = v\n      max_count = count\n    end\n  end\n  if max_count >= max_val\
    \ then\n    return max_val\n  else\n    return -1\n  end\nend", "  local max =\
    \ 0\n  local res = -1\n  for i, v in ipairs(lst) do\n    if v > max then\n   \
    \   max = v\n    end\n  end\n  for j = 1, max do\n    local cnt = 0\n    for i,\
    \ v in ipairs(lst) do\n      if v == j then\n        cnt = cnt + 1\n      end\n\
    \    end\n    if cnt >= j then\n      res = j\n    end\n  end\n  return res\n\
    end", "    local maximum = lst[1]\n    for i,v in ipairs(lst) do\n        if v\
    \ > maximum then\n            maximum = v\n        end\n    end\n    local frequency\
    \ = {}\n    for i,v in ipairs(lst) do\n        frequency[v] = (frequency[v] or\
    \ 0) + 1\n    end\n    for i = maximum,1,-1 do\n        if frequency[i] and frequency[i]\
    \ >= i then\n            return i\n        end\n    end\n    return -1\nend",
  "  local m = {};\n  for _, v in ipairs(lst) do\n    if m[v] then\n      m[v] = m[v]\
    \ + 1;\n    else\n      m[v] = 1;\n    end\n  end\n  local result = -1;\n  for\
    \ k, v in pairs(m) do\n    if k > v and k > result then\n      result = k;\n \
    \   end\n  end\n  return result;\nend", "\tlocal search = {}\n\tlocal result =\
    \ -1\n\tfor _, v in ipairs(lst) do\n\t\tsearch[v] = (search[v] or 0) + 1\n\tend\n\
    \tfor _, v in ipairs(lst) do\n\t\tif search[v] >= v and v > result then\n\t\t\t\
    result = v\n\t\tend\n\tend\n\treturn result\nend", "    local max_f = 0\n    local\
    \ max_v = -1\n    local buf = {}\n    for _,v in ipairs(lst) do\n        buf[v]\
    \ = (buf[v] or 0) + 1\n        if buf[v] >= v and v > max_f then\n           \
    \ max_f = v\n            max_v = v\n        end\n    end\n    return max_v\nend",
  "    -- your code here\n    local count = {}\n    for i = 1, #lst do\n        count[lst[i]]\
    \ = (count[lst[i]] or 0) + 1\n    end\n    local result = -1\n    for k, v in\
    \ pairs(count) do\n        if v >= k and k > result then\n            result =\
    \ k\n        end\n    end\n    return result\nend", "    local fq = {}\n    for\
    \ _, n in ipairs(lst) do\n        if n == 0 then\n            return -1\n    \
    \    end\n        fq[n] = (fq[n] or 0) + 1\n    end\n    for i = #lst, 1, -1 do\n\
    \        if fq[i] >= i then\n            return i\n        end\n    end\n    return\
    \ -1\nend", "    local result = -1\n    local max = 0\n    local counts = {}\n\
    \    for _, v in ipairs(lst) do\n        counts[v] = (counts[v] or 0) + 1\n  \
    \      if counts[v] >= v and v > max then\n            max = v\n            result\
    \ = v\n        end\n    end\n    return result\nend", "    local result = -1\n\
    \    local frequency = 0\n    local digits = {}\n    for _, v in ipairs(lst) do\n\
    \        digits[v] = (digits[v] or 0) + 1\n    end\n    for k, v in pairs(digits)\
    \ do\n        if v >= k and k > result then\n            result = k\n        \
    \    frequency = v\n        end\n    end\n    return result\nend", "    for _,\
    \ v in ipairs(lst) do\n        local a = 0\n        for _, v2 in ipairs(lst) do\n\
    \            if v == v2 then\n                a = a + 1\n            end\n   \
    \     end\n        if a >= v then\n            return v\n        end\n    end\n\
    \    return -1\nend", "    local freq = {}\n    for _, num in ipairs(lst) do\n\
    \        freq[num] = (freq[num] or 0) + 1\n    end\n    local max_freq, max_num\
    \ = -1, -1\n    for num, count in pairs(freq) do\n        if count >= num and\
    \ count > max_freq then\n            max_freq, max_num = count, num\n        end\n\
    \    end\n    return max_num\nend", "  local freq = {}\n  for _, v in ipairs(lst)\
    \ do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  local result = -1\n  for _, v\
    \ in ipairs(lst) do\n    if freq[v] >= v and v > result then\n      result = v\n\
    \    end\n  end\n  return result\nend", "\treturn -1\nend", "  local val = -1\n\
    \  for i = 1, #lst do\n    local num = lst[i]\n    local count = 0\n    for j\
    \ = 1, #lst do\n      if num == lst[j] then\n        count = count + 1\n     \
    \ end\n    end\n    if count >= num and num > val then\n      val = num\n    end\n\
    \  end\n  return val\nend", "    local greatest = -1\n    local greatest_frequency\
    \ = -1\n    local frequencies = {}\n    for _, v in ipairs(lst) do\n        if\
    \ v > greatest then\n            greatest = v\n        end\n        if not frequencies[v]\
    \ then\n            frequencies[v] = 1\n        else\n            frequencies[v]\
    \ = frequencies[v] + 1\n        end\n        if frequencies[v] >= v and frequencies[v]\
    \ > greatest_frequency then\n            greatest_frequency = frequencies[v]\n\
    \        end\n    end\n    if greatest_frequency < greatest then\n        return\
    \ -1\n    end\n    return greatest\nend", "    local result = {}\n    local max\
    \ = 0\n    for _, v in ipairs(lst) do\n        if result[v] == nil then\n    \
    \        result[v] = 1\n        else\n            result[v] = result[v] + 1\n\
    \        end\n        if result[v] >= v and v > max then\n            max = v\n\
    \        end\n    end\n    return max == 0 and -1 or max\nend", "    return 1\n\
    end", "    local function search_aux(lst, curr_max, curr_max_freq)\n        local\
    \ n = #lst\n        if n == 0 then\n            return curr_max\n        else\n\
    \            local num = lst[1]\n            local freq = count(lst, num)\n  \
    \          if freq >= num and num > curr_max then\n                return search_aux(remove_all(lst,\
    \ num), num, freq)\n            else\n                return search_aux(remove_all(lst,\
    \ num), curr_max, curr_max_freq)\n            end\n        end\n    end\n    return\
    \ search_aux(lst, 0, 0)\nend", end, "\tlocal cnt, mx = {}, 1\n\tfor i = 1, #lst\
    \ do cnt[lst[i]] = (cnt[lst[i]] or 0) + 1 end\n\tfor i = 1, #lst do\n\t\tif cnt[lst[i]]\
    \ >= lst[i] and lst[i] > mx then mx = lst[i] end\n\tend\n\treturn mx == 1 and\
    \ -1 or mx\nend", "    local max = lst[1]\n    for _,i in ipairs(lst) do\n   \
    \     if i > max then\n            max = i\n        end\n    end\n    local sum\
    \ = 0\n    for _,i in ipairs(lst) do\n        if i == max then\n            sum\
    \ = sum + 1\n        end\n    end\n    if sum >= max then\n        return max\n\
    \    else\n        return -1\n    end\nend", "  local sorted = {}\n  for i,v in\
    \ ipairs(lst) do\n    if sorted[v] then\n      sorted[v] = sorted[v] + 1\n   \
    \ else\n      sorted[v] = 1\n    end\n  end\n  local result = 0\n  for k,v in\
    \ pairs(sorted) do\n    if v >= k and k > result then\n      result = k\n    end\n\
    \  end\n  if result == 0 then return -1 end\n  return result\nend", "    local\
    \ t = {}\n    for i = 1, #lst do\n        local x = lst[i]\n        t[x] = (t[x]\
    \ or 0) + 1\n    end\n    local m = -1\n    for i = 1, #lst do\n        local\
    \ x = lst[i]\n        if t[x] >= x and x > m then\n            m = x\n       \
    \ end\n    end\n    return m\nend", "  local max\n  for i, v in ipairs(lst) do\n\
    \    local count = 0\n    for j, w in ipairs(lst) do\n      if v == w then\n \
    \       count = count + 1\n      end\n    end\n    if count >= v and (max == nil\
    \ or v > max) then\n      max = v\n    end\n  end\n  return max or -1\nend", " \
    \ local counts, max = {}, 0\n  for _, v in ipairs(lst) do\n    if counts[v] then\n\
    \      counts[v] = counts[v] + 1\n    else\n      counts[v] = 1\n    end\n   \
    \ if v > max then\n      max = v\n    end\n  end\n  for i = max, 1, -1 do\n  \
    \  if counts[i] and counts[i] >= i then\n      return i\n    end\n  end\n  return\
    \ -1\nend", "    local t = {}\n    for _, v in ipairs(lst) do\n        t[v] =\
    \ (t[v] or 0) + 1\n    end\n    local r = -1\n    for i = 1, #lst do\n       \
    \ if t[i] and t[i] >= i then\n            r = i\n        end\n    end\n    return\
    \ r\nend", "    local cnt = {}\n    for i = 1, #lst do\n        if cnt[lst[i]]\
    \ == nil then\n            cnt[lst[i]] = 1\n        else\n            cnt[lst[i]]\
    \ = cnt[lst[i]] + 1\n        end\n    end\n    local res = -1\n    for k, v in\
    \ pairs(cnt) do\n        if k <= v and res < k then\n            res = k\n   \
    \     end\n    end\n    return res\nend", "    local answer = -1\n    local freq\
    \ = {}\n    for _, value in ipairs(lst) do\n        if value > answer then\n \
    \           freq[value] = freq[value] and freq[value] + 1 or 1\n            if\
    \ freq[value] >= value then\n                answer = value\n            end\n\
    \        end\n    end\n    return answer\nend", "    local max = -1\n    local\
    \ count = {}\n    for _, v in ipairs(lst) do\n        count[v] = (count[v] or\
    \ 0) + 1\n        if v > max and count[v] >= v then\n            max = v\n   \
    \     end\n    end\n    return max\nend", "  local freq = {}\n  for _, v in ipairs(lst)\
    \ do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  for _, v in ipairs(lst) do\n\
    \    if v >= freq[v] then\n      return v\n    end\n  end\n  return -1\nend",
  "  local a = {}\n  for _, v in ipairs(lst) do\n    if not a[v] then\n      a[v]\
    \ = 1\n    else\n      a[v] = a[v] + 1\n    end\n  end\n  local r = -1\n  for\
    \ i = 1, #lst do\n    if a[i] and a[i] >= i and r < i then\n      r = i\n    end\n\
    \  end\n  return r\nend", "  local res, qty = -1, 0\n  for _,v in ipairs(lst)\
    \ do\n    local cnt = 0\n    for _,b in ipairs(lst) do\n      if v == b then cnt\
    \ = cnt + 1 end\n    end\n    if cnt >= v and cnt > qty then\n      res, qty =\
    \ v, cnt\n    end\n  end\n  return res\nend", "    local function is_in_list(lst,\
    \ value)\n        local counter = 0\n        for k, v in pairs(lst) do\n     \
    \       if v == value then\n                counter = counter + 1\n          \
    \  end\n        end\n        return counter\n    end\n    local function greater_than_zero(lst)\n\
    \        local result = {}\n        for k, v in pairs(lst) do\n            if\
    \ v > 0 then\n                table.insert(result, v)\n            end\n     \
    \   end\n        return result\n    end\n    local function has_frequency(lst)\n\
    \        local result = {}\n        for k, v in pairs(lst) do\n            if\
    \ is_in_list(lst, v) >= v then\n                table.insert(result, v)\n    \
    \        end\n        end\n        return result\n    end\n    local function\
    \ find_max(lst)\n        local max = 0\n        for k, v in pairs(lst) do\n  \
    \          if v > max then\n                max = v\n            end\n       \
    \ end\n        return max\n    end\n    local result = find_max(has_frequency(greater_than_zero(lst)))\n\
    \    if result == 0 then\n        return -1\n    else\n        return result\n\
    \    end\nend", "    local biggest\n    local ints = {}\n    for i = 1, #lst do\n\
    \        if not ints[lst[i]] then\n            ints[lst[i]] = 1\n        else\n\
    \            ints[lst[i]] = ints[lst[i]] + 1\n        end\n        if not biggest\
    \ or lst[i] > biggest then\n            biggest = lst[i]\n        end\n    end\n\
    \    if ints[biggest] >= biggest then\n        return biggest\n    else\n    \
    \    return -1\n    end\nend", end, "  local n = -1\n  local max = -1\n  for i\
    \ = 1, #lst do\n    local count = 0\n    for j = 1, #lst do\n      if lst[i] ==\
    \ lst[j] then\n        count = count + 1\n      end\n    end\n    if max < count\
    \ and lst[i] <= count then\n      max = count\n      n = lst[i]\n    end\n  end\n\
    \  return n\nend", "  local count = {}\n  for _, v in ipairs(lst) do\n    if v\
    \ > 0 then\n      count[v] = (count[v] or 0) + 1\n    end\n  end\n  for _, v in\
    \ ipairs(lst) do\n    if count[v] and count[v] >= v then\n      return v\n   \
    \ end\n  end\n  return -1\nend", "\tlocal lst2 = lst\n\tfor i = 1, #lst, 1 do\n\
    \t\tlst2[i] = lst[i]\n\tend\n\ttable.sort(lst2)\n\tlocal count = 1\n\tlocal tmp\
    \ = lst2[1]\n\tfor i = 2, #lst2, 1 do\n\t\tif tmp == lst2[i] then\n\t\t\tcount\
    \ = count + 1\n\t\telse\n\t\t\tif count >= tmp then\n\t\t\t\treturn tmp\n\t\t\t\
    end\n\t\t\ttmp = lst2[i]\n\t\t\tcount = 1\n\t\tend\n\tend\n\tif count >= tmp then\n\
    \t\treturn tmp\n\tend\n\treturn -1\nend", "  local max, maxi = 0, -1\n  for _,x\
    \ in ipairs(lst) do\n    local y = {table.unpack(lst)}\n    table.remove(y, _)\n\
    \    if x > max and x == #y - #table.unique(y) + 1 then\n      max, maxi = x,\
    \ x\n    end\n  end\n  return maxi\nend", "    local i, maxi, max = 1, 0, -1\n\
    \    while lst[i] do\n        if lst[i] > maxi then\n            maxi = lst[i]\n\
    \            max = lst[i]\n        end\n        i = i + 1\n    end\n    local\
    \ freq = {}\n    for i = 1, maxi do\n        freq[i] = 0\n    end\n    i = 1\n\
    \    while lst[i] do\n        freq[lst[i]] = freq[lst[i]] + 1\n        i = i +\
    \ 1\n    end\n    for i = maxi, 1, -1 do\n        if freq[i] >= i then\n     \
    \       return i\n        end\n    end\n    return -1\nend", "  local count =\
    \ {}\n  for _, v in ipairs(lst) do\n    count[v] = (count[v] or 0) + 1\n  end\n\
    \  local max = -1\n  for k, v in pairs(count) do\n    if k <= v and k > max then\n\
    \      max = k\n    end\n  end\n  return max\nend", "  local value = -1\n  for\
    \ _,v in ipairs(lst) do\n    local cnt = 0\n    for _,v2 in ipairs(lst) do\n \
    \     if v == v2 then\n        cnt = cnt + 1\n      end\n    end\n    if v ==\
    \ cnt and v > value then\n      value = v\n    end\n  end\n  return value\nend",
  "  local highestFreq, highestVal = 0, 0\n  for _, v in ipairs(lst) do\n    local\
    \ freq = table.count(lst, v)\n    if freq >= v and freq > highestFreq then\n \
    \     highestFreq, highestVal = freq, v\n    end\n  end\n  return highestVal >\
    \ 0 and highestVal or -1\nend", "  local map = {}\n  for _,v in ipairs(lst) do\n\
    \    if map[v] then\n      map[v] = map[v] + 1\n    else\n      map[v] = 1\n \
    \   end\n  end\n  local rt = -1\n  for k,v in pairs(map) do\n    if v >= k and\
    \ k > rt then\n      rt = k\n    end\n  end\n  return rt\nend", "  local r = {}\n\
    \  for _,v in ipairs(lst) do\n    r[v] = (r[v] or 0) + 1\n  end\n  for _,v in\
    \ ipairs(lst) do\n    if r[v] and r[v] >= v then\n      return v\n    end\n  end\n\
    \  return -1\nend", "  local result = -1\n  for _, val in ipairs(lst) do\n   \
    \ local count = 0\n    for _, subval in ipairs(lst) do\n      if val == subval\
    \ then\n        count = count + 1\n      end\n    end\n    if val > 0 and count\
    \ >= val and val > result then\n      result = val\n    end\n  end\n  return result\n\
    end", "\tlocal dict = {}\n\tfor i, v in ipairs(lst) do\n\t\tdict[v] = dict[v]\
    \ and dict[v] + 1 or 1\n\tend\n\ttable.sort(lst)\n\tfor i, v in ipairs(lst) do\n\
    \t\tif dict[v] >= v then\n\t\t\treturn v\n\t\tend\n\tend\n\treturn -1\nend", " \
    \ local count = {}\n  for _, num in ipairs(lst) do\n    if count[num] then\n \
    \     count[num] = count[num] + 1\n    else\n      count[num] = 1\n    end\n \
    \ end\n  local num = -1\n  for i, v in ipairs(lst) do\n    if i <= count[v] and\
    \ v > num then\n      num = v\n    end\n  end\n  return num\nend", "  local maxFreq\
    \ = 0\n  local val = 0\n  for _, v in ipairs(lst) do\n    local count = 0\n  \
    \  for _, v2 in ipairs(lst) do\n      if v == v2 then\n        count = count +\
    \ 1\n      end\n    end\n    if count >= v and count >= maxFreq then\n      maxFreq\
    \ = count\n      val = v\n    end\n  end\n  if maxFreq > 0 then\n    return val\n\
    \  else\n    return -1\n  end\nend", "  local function getf(v)\n    local c =\
    \ 0\n    for _, i in ipairs(lst) do\n      if i == v then c = c + 1 end\n    end\n\
    \    return c\n  end\n  local mx = 0\n  for _, v in ipairs(lst) do\n    if v >\
    \ mx and getf(v) >= v then mx = v end\n  end\n  return mx == 0 and -1 or mx\n\
    end", "    -- collect data\n    local dict = {}\n    for i,v in ipairs(lst) do\n\
    \        if dict[v] then\n            dict[v] = dict[v] + 1\n        else\n  \
    \          dict[v] = 1\n        end\n    end\n    -- filter data\n    local max\
    \ = -1\n    for i,v in pairs(dict) do\n        if v >= i and i > max then\n  \
    \          max = i\n        end\n    end\n    return max\nend", "    local tbl\
    \ = {}\n    for i = 1, #lst do\n        local num = lst[i]\n        if tbl[num]\
    \ then\n            tbl[num] = tbl[num] + 1\n        else\n            tbl[num]\
    \ = 1\n        end\n    end\n    for i = #lst, 1, -1 do\n        local num = lst[i]\n\
    \        if tbl[num] >= num then\n            return num\n        end\n    end\n\
    \    return -1\nend", "  local counts = {}\n  for _, v in ipairs(lst) do\n   \
    \ if not counts[v] then\n      counts[v] = 1\n    else\n      counts[v] = counts[v]\
    \ + 1\n    end\n  end\n  local max_v = nil\n  for k, v in pairs(counts) do\n \
    \   if k > v then\n      goto continue\n    end\n    if not max_v or k > max_v\
    \ then\n      max_v = k\n    end\n    ::continue::\n  end\n  return max_v or -1\n\
    end", "  local cnt = {}\n  for _, v in ipairs(lst) do\n    cnt[v] = (cnt[v] or\
    \ 0) + 1\n  end\n  local max = 0\n  for k, v in pairs(cnt) do\n    if k >= v and\
    \ k > max then\n      max = k\n    end\n  end\n  return max > 0 and max or -1\n\
    end", "  local max, res = -1, -1\n  for _, v in ipairs(lst) do\n    if v > max\
    \ then\n      max = v\n    end\n  end\n  local frequency = {}\n  for _, v in ipairs(lst)\
    \ do\n    if frequency[v] == nil then\n      frequency[v] = 1\n    else\n    \
    \  frequency[v] = frequency[v] + 1\n    end\n  end\n  for k, v in pairs(frequency)\
    \ do\n    if v >= k and k > res then\n      res = k\n    end\n  end\n  return\
    \ res\nend", "    local frequency = {}\n    for _, e in ipairs(lst) do\n     \
    \   frequency[e] = (frequency[e] or 0) + 1\n    end\n    local value = -1\n  \
    \  for _, e in ipairs(lst) do\n        if frequency[e] >= e and e > value then\n\
    \            value = e\n        end\n    end\n    return value\nend", "    local\
    \ i, j, tbl, max = 1, #lst, {}, -1\n    for i = 1, j do\n        if not tbl[lst[i]]\
    \ then\n            tbl[lst[i]] = 1\n        else\n            tbl[lst[i]] = tbl[lst[i]]\
    \ + 1\n        end\n    end\n    for i = 1, j do\n        if tbl[lst[i]] >= lst[i]\
    \ and lst[i] > max then\n            max = lst[i]\n        end\n    end\n    return\
    \ max\nend", "    local freq = {}\n    for _, v in ipairs(lst) do\n        if\
    \ freq[v] then\n            freq[v] = freq[v] + 1\n        else\n            freq[v]\
    \ = 1\n        end\n    end\n    local res = {}\n    for k, v in pairs(freq) do\n\
    \        if v >= k then\n            table.insert(res, k)\n        end\n    end\n\
    \    table.sort(res)\n    return res[#res] or -1\nend", "  local count = {}\n\
    \  for _, v in ipairs(lst) do\n    count[v] = (count[v] or 0) + 1\n  end\n  for\
    \ _, v in ipairs(lst) do\n    if v > 0 and count[v] >= v then\n      return v\n\
    \    end\n  end\n  return -1\nend", "  local counts = {}\n  for i, v in ipairs(lst)\
    \ do\n    counts[v] = (counts[v] or 0) + 1\n  end\n  local max = -1\n  for i,\
    \ v in ipairs(lst) do\n    if v > 0 and v <= #lst and counts[v] >= v and v > max\
    \ then\n      max = v\n    end\n  end\n  return max\nend", "    local tbl = {}\n\
    \    for i = 1, #lst do\n        local number = lst[i]\n        if tbl[number]\
    \ then\n            tbl[number] = tbl[number] + 1\n        else\n            tbl[number]\
    \ = 1\n        end\n    end\n    local greater_than_one = false\n    for key,\
    \ value in pairs(tbl) do\n        if value >= key and key > 1 then\n         \
    \   greater_than_one = true\n            return key\n        end\n    end\n  \
    \  if not greater_than_one then\n        return -1\n    end\nend", "    local\
    \ flst, b1, b2 = {}, true, false\n    for i, v in ipairs(lst) do\n        flst[v]\
    \ = (flst[v] or 0) + 1\n    end\n    for i, v in ipairs(lst) do\n        if flst[v]\
    \ >= v then\n            if b1 and v > 0 then\n                b1 = false\n  \
    \              b2 = true\n            end\n            if b2 and v > 1 then\n\
    \                return v\n            end\n        end\n    end\n    return -1\n\
    end", "  local res = -1\n  for i = 1, #lst do\n    local cnt = 0\n    for j =\
    \ 1, #lst do\n      if lst[i] == lst[j] then\n        cnt = cnt + 1\n      end\n\
    \    end\n    if cnt >= lst[i] and lst[i] > res then\n      res = lst[i]\n   \
    \ end\n  end\n  return res\nend", "  local counts = {}\n  for i = 1, #lst do\n\
    \    local c = lst[i]\n    if counts[c] then\n      counts[c] = counts[c] + 1\n\
    \    else\n      counts[c] = 1\n    end\n  end\n  local r = -1\n  for i = 1, #lst\
    \ do\n    local c = lst[i]\n    if c > 0 and counts[c] >= c and c > r then\n \
    \     r = c\n    end\n  end\n  return r\nend", "  local tbl = {}\n  for _, v in\
    \ ipairs(lst) do\n    tbl[v] = (tbl[v] or 0) + 1\n  end\n  for _, v in ipairs(lst)\
    \ do\n    if tbl[v] >= v then\n      return v\n    end\n  end\n  return -1\nend",
  "    local result = -1\n    local count = 0\n    for _,v in ipairs(lst) do\n   \
    \     if v == result then\n            count = count + 1\n        elseif v > result\
    \ then\n            result = v\n            count = 1\n        end\n    end\n\
    \    return count >= result and result or -1\nend", "  local res = -1\n  local\
    \ count = 0\n  for i, v in ipairs(lst) do\n    if v > count then\n      res =\
    \ -1\n      count = 0\n    end\n    if v == res then\n      count = count + 1\n\
    \    elseif v > count then\n      res = v\n      count = 1\n    end\n  end\n \
    \ return count >= res and res or -1\nend", "    for i=1,#lst do\n        local\
    \ count = 0\n        for _, e in ipairs(lst) do\n            if e == i then\n\
    \                count = count + 1\n            end\n        end\n        if count\
    \ >= i then\n            return i\n        end\n    end\n    return -1\nend",
  "  local t = {}\n  for _, v in ipairs(lst) do\n    t[v] = (t[v] or 0) + 1\n  end\n\
    \  local m = -1\n  for i, v in ipairs(lst) do\n    if v >= t[v] and v > m then\n\
    \      m = v\n    end\n  end\n  return m\nend", "\tlocal frequency = {}\n\tfor\
    \ _,v in ipairs(lst) do frequency[v] = (frequency[v] or 0) + 1 end\n\ttable.sort(lst)\n\
    \tfor _,v in ipairs(lst) do\n\t\tif frequency[v] >= v then return v end\n\tend\n\
    \treturn -1\nend", "    local counts = {}\n    for i,v in ipairs(lst) do\n   \
    \     counts[v] = (counts[v] or 0) + 1\n    end\n    local max = -1\n    for k,v\
    \ in pairs(counts) do\n        if v >= k and k > max then\n            max = k\n\
    \        end\n    end\n    return max\nend", "    local counts = {}\n    for _,\
    \ v in ipairs(lst) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n   \
    \ for _, v in ipairs(lst) do\n        if counts[v] >= v then\n            return\
    \ v\n        end\n    end\n    return -1\nend", "  if not lst or #lst == 0 then\
    \ return -1 end\n  local tbl = {}\n  for _, v in ipairs(lst) do\n    tbl[v] =\
    \ (tbl[v] or 0) + 1\n  end\n  local res = -1\n  for k, v in pairs(tbl) do\n  \
    \  if v >= k and k > res then\n      res = k\n    end\n  end\n  return res\nend\n\
    print(search({4, 1, 2, 2, 3, 1}))\nprint(search({1, 2, 2, 3, 3, 3, 4, 4, 4}))\n\
    print(search({5, 5, 4, 4, 4}))", "    local max, freq = 0, 0\n    for _, val in\
    \ ipairs(lst) do\n        local cnt = 0\n        for _, n in ipairs(lst) do\n\
    \            if n == val then\n                cnt = cnt + 1\n            end\n\
    \        end\n        if val > max and cnt >= val then\n            max, freq\
    \ = val, cnt\n        end\n    end\n    return max > 0 and max or -1\nend", " \
    \ local count = {}\n  for _, v in ipairs(lst) do\n    count[v] = (count[v] or\
    \ 0) + 1\n  end\n  local sorted = sort(count)\n  for _, v in ipairs(sorted) do\n\
    \    if count[v[1]] >= v[1] then\n      return v[1]\n    end\n  end\n  return\
    \ -1\nend", "  local counts = {}\n  for _, v in ipairs(lst) do\n    counts[v]\
    \ = (counts[v] or 0) + 1\n  end\n  local result = -1\n  for i = 1, #lst do\n \
    \   if counts[i] and counts[i] >= i then\n      result = i\n    end\n  end\n \
    \ return result\nend", "  return -1\nend", "    local t = {}\n    for _, v in\
    \ ipairs(lst) do\n        t[v] = (t[v] or 0) + 1\n    end\n    for _, v in ipairs(lst)\
    \ do\n        if v == t[v] then\n            return v\n        end\n    end\n\
    \    return -1\nend", "    if type(lst) ~= \"table\" then return nil end\n   \
    \ if #lst == 0 then return -1 end\n    local int = lst[1]\n    local count = 1\n\
    \    for i = 2, #lst do\n        if lst[i] > int then\n            int = lst[i]\n\
    \            count = 1\n        elseif lst[i] == int then\n            count =\
    \ count + 1\n        end\n    end\n    if count >= int then\n        return int\n\
    \    else\n        return -1\n    end\nend", "    local t = {}\n    for _, v in\
    \ ipairs(lst) do\n        if t[v] then\n            t[v] = t[v] + 1\n        else\n\
    \            t[v] = 1\n        end\n    end\n    local n = -1\n    for k, v in\
    \ pairs(t) do\n        if k > v and k > n then\n            n = k\n        end\n\
    \    end\n    return n\nend", "  local result = -1\n  local sorted = {}\n  for\
    \ _,v in ipairs(lst) do\n    if not sorted[v] then\n      sorted[v] = 0\n    end\n\
    \    sorted[v] = sorted[v] + 1\n  end\n  for k,v in pairs(sorted) do\n    if v\
    \ >= k and k > result then\n      result = k\n    end\n  end\n  return result\n\
    end", "    local max, res = -1, -1\n    for i, v in ipairs(lst) do\n        local\
    \ cnt = 0\n        for j, w in ipairs(lst) do\n            if v == w then\n  \
    \              cnt = cnt + 1\n            end\n        end\n        if cnt >=\
    \ v and v > max then\n            max = v\n            res = v\n        end\n\
    \    end\n    return res\nend", "\tlocal maxFreq, maxVal = 0, -1\n\tfor _,n in\
    \ ipairs(lst) do\n\t\tlocal freq = lst:count(n)\n\t\tif freq >= n and freq > maxFreq\
    \ then\n\t\t\tmaxFreq, maxVal = freq, n\n\t\tend\n\tend\n\treturn maxVal\nend",
  "    -- Use a bucket sort to count the frequency of the numbers\n    local bucket\
    \ = {}\n    for _,x in ipairs(lst) do\n        if bucket[x] == nil then\n    \
    \        bucket[x] = 1\n        else\n            bucket[x] = bucket[x] + 1\n\
    \        end\n    end\n    -- Then do a second pass of the original list to find\
    \ the greatest number that has a frequency\n    -- greater than or equal to its\
    \ value.\n    local result = -1\n    for _,x in ipairs(lst) do\n        if bucket[x]\
    \ >= x and x > result then\n            result = x\n        end\n    end\n   \
    \ return result\nend", "  local tbl = {}\n  for i,v in ipairs(lst) do\n    if\
    \ tbl[v] == nil then\n      tbl[v] = 1\n    else\n      tbl[v] = tbl[v] + 1\n\
    \    end\n  end\n  for k,v in pairs(tbl) do\n    if v >= k then\n      return\
    \ k\n    end\n  end\n  return -1\nend", "  -- your code here\nend", "  local answer\
    \ = -1\n  for i = 1, #lst do\n    local value = lst[i]\n    local count = 0\n\
    \    for j = 1, #lst do\n      if lst[j] == value then\n        count = count\
    \ + 1\n      end\n    end\n    if count >= value and value > answer then\n   \
    \   answer = value\n    end\n  end\n  return answer\nend", "    local max, cnt\
    \ = -1, 0\n    for _, i in ipairs(lst) do\n        local c = 0\n        for _,\
    \ j in ipairs(lst) do\n            if i == j then\n                c = c + 1\n\
    \            end\n        end\n        if c >= i and c > cnt then\n          \
    \  max, cnt = i, c\n        end\n    end\n    return max\nend", "   -- your code\
    \ here\nend", "    local dic = {}\n    for _,v in ipairs(lst) do\n        if dic[v]\
    \ == nil then\n            dic[v] = 1\n        else\n            dic[v] = dic[v]\
    \ + 1\n        end\n    end\n    local max = -1\n    for k,v in pairs(dic) do\n\
    \        if v >= k and k > max then\n            max = k\n        end\n    end\n\
    \    return max\nend", "    local max, value = -1, -1\n    local temp = {}\n \
    \   for _,v in ipairs(lst) do\n        if not temp[v] then\n            temp[v]\
    \ = 1\n        else\n            temp[v] = temp[v] + 1\n        end\n        if\
    \ v > max and temp[v] >= v then\n            max = v\n            value = temp[v]\n\
    \        end\n    end\n    return max\nend", "  -- body\nend", end, "    local\
    \ freq = {}\n    for _, v in ipairs(lst) do\n        if freq[v] then\n       \
    \     freq[v] = freq[v] + 1\n        else\n            freq[v] = 1\n        end\n\
    \    end\n    local ans = -1\n    for k, v in pairs(freq) do\n        if k > 0\
    \ and k <= v and k > ans then\n            ans = k\n        end\n    end\n   \
    \ return ans\nend", "    -- your code here\nend", "\tlocal t = {}\n\tfor _,v in\
    \ ipairs(lst) do\n\t\tt[v] = (t[v] or 0) + 1\n\tend\n\tfor _,v in ipairs(lst)\
    \ do\n\t\tif t[v] >= v then\n\t\t\treturn v\n\t\tend\n\tend\n\treturn -1\nend",
  "    local counts = {}\n    for i, v in ipairs(lst) do\n        counts[v] = (counts[v]\
    \ or 0) + 1\n    end\n    local res = -1\n    for i, v in ipairs(lst) do\n   \
    \     if counts[v] >= v and v > res then\n            res = v\n        end\n \
    \   end\n    return res\nend", "  if #lst == 0 then return -1 end\n  local counts\
    \ = {}\n  for i = 1, #lst do\n    if counts[lst[i]] then\n      counts[lst[i]]\
    \ = counts[lst[i]] + 1\n    else\n      counts[lst[i]] = 1\n    end\n  end\n \
    \ local function comp (a, b)\n    return a > b\n  end\n  table.sort(lst, comp)\n\
    \  for i = 1, #lst do\n    if counts[lst[i]] >= lst[i] then\n      return lst[i]\n\
    \    end\n  end\n  return -1\nend", "    local m = 0\n    local freq = 0\n   \
    \ for _, v in ipairs(lst) do\n        if freq < v then\n            freq = v\n\
    \            m = 0\n        end\n        if v == freq then\n            m = v\n\
    \        end\n    end\n    return m\nend", "    local t = {}\n    for _, v in\
    \ ipairs(lst) do\n        if t[v] then\n            t[v] = t[v] + 1\n        else\n\
    \            t[v] = 1\n        end\n    end\n    local result = -1\n    for k,\
    \ v in pairs(t) do\n        if k >= v and k > result then\n            result\
    \ = k\n        end\n    end\n    return result\nend", "  local counts = {}\n \
    \ for _, v in ipairs(lst) do\n    counts[v] = (counts[v] or 0) + 1\n  end\n  local\
    \ mx = -1\n  for i, v in ipairs(lst) do\n    if v > 0 and counts[v] >= v and v\
    \ > mx then\n      mx = v\n    end\n  end\n  return mx\nend", "  local max,maxc\
    \ = -1,0\n  for i=1,#lst do\n    local c = 0\n    for j=1,#lst do\n      if lst[j]\
    \ == lst[i] then\n        c = c + 1\n      end\n    end\n    if c >= lst[i] and\
    \ c > maxc then\n      max = lst[i]\n      maxc = c\n    end\n  end\n  return\
    \ max\nend", "  -- return 0\n  local numbers = {}\n  for i, v in ipairs(lst) do\n\
    \    if numbers[v] then\n      numbers[v] = numbers[v] + 1\n    else\n      numbers[v]\
    \ = 1\n    end\n  end\n  for i, v in ipairs(lst) do\n    if numbers[v] >= v then\n\
    \      return v\n    end\n  end\n  return -1\nend", "  local val, cnt = -1, -1\n\
    \  for i = 1, #lst do\n    local k = lst[i]\n    local c = 0\n    for j = 1, #lst\
    \ do\n      if lst[j] == k then\n        c = c + 1\n      end\n    end\n    if\
    \ k > 0 and c >= k and c > cnt then\n      val, cnt = k, c\n    end\n  end\n \
    \ return val\nend", "    local dict = {}\n    for _,v in ipairs(lst) do\n    \
    \    dict[v] = dict[v] and dict[v] + 1 or 1\n    end\n    local max = -1\n   \
    \ for k,v in pairs(dict) do\n        if v >= k and k > max then\n            max\
    \ = k\n        end\n    end\n    return max\nend", "    local result = 0\n   \
    \ local counts = {}\n    for _, num in ipairs(lst) do\n        counts[num] = (counts[num]\
    \ or 0) + 1\n    end\n    for _, num in ipairs(lst) do\n        if counts[num]\
    \ >= num and num > result then\n            result = num\n        end\n    end\n\
    \    return result > 0 and result or -1\nend", "  local arr = {}\n  for i,v in\
    \ ipairs(lst) do\n    if not arr[v] then\n      arr[v] = 1\n    else\n      arr[v]\
    \ = arr[v] + 1\n    end\n  end\n  local max = -1\n  for i,v in ipairs(lst) do\n\
    \    if arr[v] >= v and v > max then\n      max = v\n    end\n  end\n  return\
    \ max\nend", "  local t = {}\n  for _, n in ipairs(lst) do\n    t[n] = t[n] and\
    \ t[n] + 1 or 1\n  end\n  local r = -1\n  for n, f in pairs(t) do\n    if f >=\
    \ n and n > r then\n      r = n\n    end\n  end\n  return r\nend", "  local counts\
    \ = {}\n  for _,v in ipairs(lst) do\n    if not counts[v] then\n      counts[v]\
    \ = 1\n    else\n      counts[v] = counts[v] + 1\n    end\n  end\n  local max\
    \ = 0\n  for k,v in pairs(counts) do\n    if k > max and v >= k then\n      max\
    \ = k\n    end\n  end\n  if max > 0 then\n    return max\n  else\n    return -1\n\
    \  end\nend", "    local counts = {}\n    for _, v in ipairs(lst) do\n       \
    \ if counts[v] then\n            counts[v] = counts[v] + 1\n        else\n   \
    \         counts[v] = 1\n        end\n    end\n    local answer = -1\n    for\
    \ v, count in pairs(counts) do\n        if v > 0 and count >= v and v > answer\
    \ then\n            answer = v\n        end\n    end\n    return answer\nend",
  "  local h = {}\n  for _,x in ipairs(lst) do\n    h[x] = (h[x] or 0) + 1\n  end\n\
    \  local g = -1\n  for x,c in pairs(h) do\n    if c >= x and x > g then\n    \
    \  g = x\n    end\n  end\n  return g\nend", "    local function frequency(el,\
    \ lst)\n        local count = 0\n        for _, v in ipairs(lst) do\n        \
    \    if v == el then\n                count = count + 1\n            end\n   \
    \     end\n        return count\n    end\n    table.sort(lst)\n    for i = 1,\
    \ #lst do\n        if lst[i] > 0 and frequency(lst[i], lst) >= lst[i] then\n \
    \           return lst[i]\n        end\n    end\n    return -1\nend", "  local\
    \ freq = {}\n  for _, v in ipairs(lst) do\n    if v > 0 then\n      freq[v] =\
    \ (freq[v] or 0) + 1\n    end\n  end\n  local max = -1\n  for i, v in ipairs(lst)\
    \ do\n    if v > 0 and freq[v] >= v and v > max then\n      max = v\n    end\n\
    \  end\n  return max\nend", "  -- Implement me!\nend", "    local res = -1\n \
    \   local max = 0\n    for _, v in ipairs(lst) do\n        local count = 0\n \
    \       for _, w in ipairs(lst) do\n            if v == w then\n             \
    \   count = count + 1\n            end\n        end\n        if count >= v and\
    \ count > max then\n            res = v\n            max = count\n        end\n\
    \    end\n    return res\nend", "    local f_table = {}\n    for i,v in ipairs(lst)\
    \ do\n        f_table[v] = (f_table[v] or 0) + 1\n    end\n    for i,v in ipairs(lst)\
    \ do\n        if f_table[v] >= v then\n            return v\n        end\n   \
    \ end\n    return -1\nend", "    local freq = {}\n    for i,v in ipairs(lst) do\n\
    \        if not freq[v] then\n            freq[v] = 0\n        end\n        freq[v]\
    \ = freq[v] + 1\n    end\n    local r = -1\n    for i,v in ipairs(lst) do\n  \
    \      if v > 0 and v <= freq[v] and v > r then\n            r = v\n        end\n\
    \    end\n    return r\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
